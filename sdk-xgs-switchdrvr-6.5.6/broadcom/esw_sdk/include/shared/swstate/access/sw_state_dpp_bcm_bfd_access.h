/* $Id: $
 * 
 * $Copyright: Copyright 2016 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 * search for 'sw_state_cbs_t' for the root of the struct
 */

#ifndef _SHR_SW_STATE_DPP_BCM_BFD_ACCESS_H_
#define _SHR_SW_STATE_DPP_BCM_BFD_ACCESS_H_

/********************************* access calbacks definitions *************************************/
/* this set of callbacks, are the callbacks used in the access calbacks struct 'sw_state_cbs_t' to */
/* access the data in 'sw_state_t'.                                                                */
/* the calbacks are inserted into the access struct by 'sw_state_access_cb_init'.                  */
/***************************************************************************************************/

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_set */
typedef int (*sw_state_dpp_bcm_bfd_set_cb)(
    int unit, CONST bcm_dpp_bfd_info_t *bfd);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_get */
typedef int (*sw_state_dpp_bcm_bfd_get_cb)(
    int unit, bcm_dpp_bfd_info_t *bfd);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_alloc */
typedef int (*sw_state_dpp_bcm_bfd_alloc_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_is_allocated */
typedef int (*sw_state_dpp_bcm_bfd_is_allocated_cb)(
    int unit, uint8 *is_allocated);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_free */
typedef int (*sw_state_dpp_bcm_bfd_free_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_verify */
typedef int (*sw_state_dpp_bcm_bfd_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_set */
typedef int (*sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_set_cb)(
    int unit, int YourDiscriminator_ref_count);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_get */
typedef int (*sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_get_cb)(
    int unit, int *YourDiscriminator_ref_count);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_verify */
typedef int (*sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_s_hop_set */
typedef int (*sw_state_dpp_bcm_bfd_s_hop_set_cb)(
    int unit, CONST bcm_dpp_bfd_pp_s_hop *s_hop);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_s_hop_get */
typedef int (*sw_state_dpp_bcm_bfd_s_hop_get_cb)(
    int unit, bcm_dpp_bfd_pp_s_hop *s_hop);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_s_hop_verify */
typedef int (*sw_state_dpp_bcm_bfd_s_hop_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_s_hop_ref_counter_set */
typedef int (*sw_state_dpp_bcm_bfd_s_hop_ref_counter_set_cb)(
    int unit, int ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_s_hop_ref_counter_get */
typedef int (*sw_state_dpp_bcm_bfd_s_hop_ref_counter_get_cb)(
    int unit, int *ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_s_hop_ref_counter_verify */
typedef int (*sw_state_dpp_bcm_bfd_s_hop_ref_counter_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_s_hop_tos_value_set */
typedef int (*sw_state_dpp_bcm_bfd_s_hop_tos_value_set_cb)(
    int unit, int tos_value);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_s_hop_tos_value_get */
typedef int (*sw_state_dpp_bcm_bfd_s_hop_tos_value_get_cb)(
    int unit, int *tos_value);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_s_hop_tos_value_verify */
typedef int (*sw_state_dpp_bcm_bfd_s_hop_tos_value_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_trap_info_set */
typedef int (*sw_state_dpp_bcm_bfd_trap_info_set_cb)(
    int unit, CONST SOC_PPC_BFD_INIT_TRAP_INFO *trap_info);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_trap_info_get */
typedef int (*sw_state_dpp_bcm_bfd_trap_info_get_cb)(
    int unit, SOC_PPC_BFD_INIT_TRAP_INFO *trap_info);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_trap_info_verify */
typedef int (*sw_state_dpp_bcm_bfd_trap_info_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_trap_info_trap_ids_set */
typedef int (*sw_state_dpp_bcm_bfd_trap_info_trap_ids_set_cb)(
    int unit, int trap_ids_idx_0, uint32 trap_ids);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_trap_info_trap_ids_get */
typedef int (*sw_state_dpp_bcm_bfd_trap_info_trap_ids_get_cb)(
    int unit, int trap_ids_idx_0, uint32 *trap_ids);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_trap_info_trap_ids_verify */
typedef int (*sw_state_dpp_bcm_bfd_trap_info_trap_ids_verify_cb)(
    int unit, int trap_ids_idx_0);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_set */
typedef int (*sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_set_cb)(
    int unit, uint32 mpls_udp_sport_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_get */
typedef int (*sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_get_cb)(
    int unit, uint32 *mpls_udp_sport_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_verify */
typedef int (*sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_set */
typedef int (*sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_set_cb)(
    int unit, ENDPOINT_LIST_PTR _bcm_bfd_endpoint_list);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_get */
typedef int (*sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_get_cb)(
    int unit, ENDPOINT_LIST_PTR *_bcm_bfd_endpoint_list);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_verify */
typedef int (*sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_set */
typedef int (*sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_set_cb)(
    int unit, uint32 ipv4_udp_sport_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_get */
typedef int (*sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_get_cb)(
    int unit, uint32 *ipv4_udp_sport_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_verify */
typedef int (*sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_set */
typedef int (*sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_set_cb)(
    int unit, uint32 ipv4_multi_hop_acc_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_get */
typedef int (*sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_get_cb)(
    int unit, uint32 *ipv4_multi_hop_acc_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_verify */
typedef int (*sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_pdu_ref_counter_set */
typedef int (*sw_state_dpp_bcm_bfd_pdu_ref_counter_set_cb)(
    int unit, uint32 pdu_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_pdu_ref_counter_get */
typedef int (*sw_state_dpp_bcm_bfd_pdu_ref_counter_get_cb)(
    int unit, uint32 *pdu_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_pdu_ref_counter_verify */
typedef int (*sw_state_dpp_bcm_bfd_pdu_ref_counter_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_set */
typedef int (*sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_set_cb)(
    int unit, uint32 mpls_tp_cc_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_get */
typedef int (*sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_get_cb)(
    int unit, uint32 *mpls_tp_cc_ref_counter);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
/* implemented by: sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_verify */
typedef int (*sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_verify_cb)(
    int unit);
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

/*********************************** access calbacks struct ****************************************/
/* this set of structs, rooted at 'sw_state_cbs_t' define the access layer for the entire SW state.*/
/* use this tree to alloc/free/set/get fields in the sw state rooted at 'sw_state_t'.              */
/* NOTE: 'sw_state_t' data should not be accessed directly.                                        */
/***************************************************************************************************/

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_cbs_s {
    sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_set_cb set;
    sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_get_cb get;
    sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_verify_cb verify;
} sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_s_hop_ref_counter_cbs_s {
    sw_state_dpp_bcm_bfd_s_hop_ref_counter_set_cb set;
    sw_state_dpp_bcm_bfd_s_hop_ref_counter_get_cb get;
    sw_state_dpp_bcm_bfd_s_hop_ref_counter_verify_cb verify;
} sw_state_dpp_bcm_bfd_s_hop_ref_counter_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_s_hop_tos_value_cbs_s {
    sw_state_dpp_bcm_bfd_s_hop_tos_value_set_cb set;
    sw_state_dpp_bcm_bfd_s_hop_tos_value_get_cb get;
    sw_state_dpp_bcm_bfd_s_hop_tos_value_verify_cb verify;
} sw_state_dpp_bcm_bfd_s_hop_tos_value_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_s_hop_cbs_s {
    sw_state_dpp_bcm_bfd_s_hop_set_cb set;
    sw_state_dpp_bcm_bfd_s_hop_get_cb get;
    sw_state_dpp_bcm_bfd_s_hop_verify_cb verify;
    sw_state_dpp_bcm_bfd_s_hop_ref_counter_cbs_t ref_counter;
    sw_state_dpp_bcm_bfd_s_hop_tos_value_cbs_t tos_value;
} sw_state_dpp_bcm_bfd_s_hop_cbs_t;

#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 
#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_trap_info_trap_ids_cbs_s {
    sw_state_dpp_bcm_bfd_trap_info_trap_ids_set_cb set;
    sw_state_dpp_bcm_bfd_trap_info_trap_ids_get_cb get;
    sw_state_dpp_bcm_bfd_trap_info_trap_ids_verify_cb verify;
} sw_state_dpp_bcm_bfd_trap_info_trap_ids_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_trap_info_cbs_s {
    sw_state_dpp_bcm_bfd_trap_info_set_cb set;
    sw_state_dpp_bcm_bfd_trap_info_get_cb get;
    sw_state_dpp_bcm_bfd_trap_info_verify_cb verify;
    sw_state_dpp_bcm_bfd_trap_info_trap_ids_cbs_t trap_ids;
} sw_state_dpp_bcm_bfd_trap_info_cbs_t;

#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 
#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_cbs_s {
    sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_set_cb set;
    sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_get_cb get;
    sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_verify_cb verify;
} sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_cbs_s {
    sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_set_cb set;
    sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_get_cb get;
    sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_verify_cb verify;
} sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_cbs_s {
    sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_set_cb set;
    sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_get_cb get;
    sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_verify_cb verify;
} sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_cbs_s {
    sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_set_cb set;
    sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_get_cb get;
    sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_verify_cb verify;
} sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_pdu_ref_counter_cbs_s {
    sw_state_dpp_bcm_bfd_pdu_ref_counter_set_cb set;
    sw_state_dpp_bcm_bfd_pdu_ref_counter_get_cb get;
    sw_state_dpp_bcm_bfd_pdu_ref_counter_verify_cb verify;
} sw_state_dpp_bcm_bfd_pdu_ref_counter_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_cbs_s {
    sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_set_cb set;
    sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_get_cb get;
    sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_verify_cb verify;
} sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_cbs_t;
#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

#if defined(BCM_PETRA_SUPPORT)
#ifdef BCM_PETRA_SUPPORT
typedef struct sw_state_dpp_bcm_bfd_cbs_s {
#if defined(BCM_PETRA_SUPPORT)
    sw_state_dpp_bcm_bfd_set_cb set;
#endif /* defined(BCM_PETRA_SUPPORT)*/ 
#if defined(BCM_PETRA_SUPPORT)
    sw_state_dpp_bcm_bfd_get_cb get;
#endif /* defined(BCM_PETRA_SUPPORT)*/ 
#if defined(BCM_PETRA_SUPPORT)
    sw_state_dpp_bcm_bfd_alloc_cb alloc;
#endif /* defined(BCM_PETRA_SUPPORT)*/ 
#if defined(BCM_PETRA_SUPPORT)
    sw_state_dpp_bcm_bfd_is_allocated_cb is_allocated;
#endif /* defined(BCM_PETRA_SUPPORT)*/ 
#if defined(BCM_PETRA_SUPPORT)
    sw_state_dpp_bcm_bfd_free_cb free;
#endif /* defined(BCM_PETRA_SUPPORT)*/ 
#if defined(BCM_PETRA_SUPPORT)
    sw_state_dpp_bcm_bfd_verify_cb verify;
#endif /* defined(BCM_PETRA_SUPPORT)*/ 
    sw_state_dpp_bcm_bfd_YourDiscriminator_ref_count_cbs_t YourDiscriminator_ref_count;
    sw_state_dpp_bcm_bfd_s_hop_cbs_t s_hop;
    sw_state_dpp_bcm_bfd_trap_info_cbs_t trap_info;
    sw_state_dpp_bcm_bfd_mpls_udp_sport_ref_counter_cbs_t mpls_udp_sport_ref_counter;
    sw_state_dpp_bcm_bfd__bcm_bfd_endpoint_list_cbs_t _bcm_bfd_endpoint_list;
    sw_state_dpp_bcm_bfd_ipv4_udp_sport_ref_counter_cbs_t ipv4_udp_sport_ref_counter;
    sw_state_dpp_bcm_bfd_ipv4_multi_hop_acc_ref_counter_cbs_t ipv4_multi_hop_acc_ref_counter;
    sw_state_dpp_bcm_bfd_pdu_ref_counter_cbs_t pdu_ref_counter;
    sw_state_dpp_bcm_bfd_mpls_tp_cc_ref_counter_cbs_t mpls_tp_cc_ref_counter;
} sw_state_dpp_bcm_bfd_cbs_t;

#endif /* BCM_PETRA_SUPPORT*/ 
#endif /* defined(BCM_PETRA_SUPPORT)*/ 

int sw_state_dpp_bcm_bfd_access_cb_init(int unit);

#endif /* _SHR_SW_STATE_DPP_BCM_BFD_ACCESS_H_ */
