/*
 * $Id: fabric.h,v 1.2 Broadcom SDK $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef _SOC_DCMN_FABRIC_H
#define _SOC_DCMN_FABRIC_H

#include <soc/error.h>
#include <shared/fabric.h>

#define SOC_DCMN_FABRIC_MESH_TOPOLOGY_LIST_MAX          (72)
#define SOC_DCMN_FABRIC_MAX_NOF_PIPES                   (3)

#define DCMN_FABRIC_LINK_NO_CONNECTIVITY          _SHR_FABRIC_LINK_NO_CONNECTIVITY
#define DCMN_FABRIC_LINK_STATUS_CRC_ERROR         _SHR_FABRIC_LINK_STATUS_CRC_ERROR
#define DCMN_FABRIC_LINK_STATUS_SIZE_ERROR        _SHR_FABRIC_LINK_STATUS_SIZE_ERROR
#define DCMN_FABRIC_LINK_STATUS_CODE_GROUP_ERROR  _SHR_FABRIC_LINK_STATUS_CODE_GROUP_ERROR
#define DCMN_FABRIC_LINK_STATUS_MISALIGN          _SHR_FABRIC_LINK_STATUS_MISALIGN
#define DCMN_FABRIC_LINK_STATUS_NO_SIG_LOCK       _SHR_FABRIC_LINK_STATUS_NO_SIG_LOCK
#define DCMN_FABRIC_LINK_STATUS_NO_SIG_ACCEP      _SHR_FABRIC_LINK_STATUS_NO_SIG_ACCEP
#define DCMN_FABRIC_LINK_STATUS_ERRORED_TOKENS    _SHR_FABRIC_LINK_STATUS_ERRORED_TOKENS

typedef enum dcmn_fabric_device_type_e {
    dcmnFabricDeviceTypeUnknown, /* Unknown device type */
    dcmnFabricDeviceTypeFE13,    /* FE13 device type */
    dcmnFabricDeviceTypeFE2,     /* FE2 device type */
    dcmnFabricDeviceTypeFAP,     /* FAP device type */
    dcmnFabricDeviceTypeFE1,     /* FE1 device type */
    dcmnFabricDeviceTypeFE3,     /* FE3 device type */
    dcmnFabricDeviceTypeFIP,     /* FIP device type */
    dcmnFabricDeviceTypeFOP      /* FOP device type */
} dcmn_fabric_device_type_t;

typedef enum soc_dcmn_fabric_direction_e {
    soc_dcmn_fabric_direction_rx = 0,
    soc_dcmn_fabric_direction_tx = 1,
    soc_dcmn_fabric_direction_middle = 2
} soc_dcmn_fabric_direction_t;


typedef uint32 soc_dcmn_fabric_pipe_t;

#define SOC_DCMN_FABRIC_PIPE_INIT(fabric_pipe) (fabric_pipe=0)
#define SOC_DCMN_FABRIC_PIPE_SET(fabric_pipe,pipe_num) SHR_BITSET(fabric_pipe,pipe_num)
#define SOC_DCMN_FABRIC_PIPE_CLEAR(fabric_pipe,pipe_num) SHR_BITCLR(fabric_pipe,pipe_num)
#define SOC_DCMN_FABRIC_PIPE_ALL_PIPES_SET(fabric_pipe,nof_pipes) SHR_BITSET_RANGE(fabric_pipe,0,nof_pipes)
#define SOC_DCMN_FABRIC_PIPE_IS_SET(fabric_pipe,pipe_num) (SHR_BITGET(fabric_pipe,pipe_num) ? 1 : 0)
#define SOC_DCMN_FABRIC_PIPE_IS_CLEAR(fabric_pipe,pipe_num) (!(SOC_DCMN_FABRIC_PIPE_IS_SET(fabric_pipe,pipe_num)))
#define SOC_DCMN_FABRIC_PIPE_ALL_PIPES_IS_CLEAR(fabric_pipe) SOC_DCMN_FABRIC_PIPE_IS_INIT(fabric_pipe)
#define SOC_DCMN_FABRIC_PIPE_IS_INIT(fabric_pipe) (fabric_pipe==0)			
#define SOC_DCMN_FABRIC_PIPE_MAX_NUM_OF_PRIORITIES (4)
#define SOC_DCMN_FABRIC_PIPE_NUM_OF_FABRIC_PIPE_VALID_CONFIGURATIONS (4)
#define SOC_DCMN_FABRIC_PIPE_MAX_LEN_NAME_PRIORITY_CONFIG (30)																																				
																																						
#define SOC_DCMN_FABRIC_PIPE_ALL_PIPES_IS_SET(fabric_pipe,mask_pipes) (fabric_pipe==mask_pipes)
#define SOC_DCMN_FABRIC_PIPE_ALL_PIPES_GET(fabric_pipe,mask) (fabric_pipe&mask)

typedef enum soc_dcmn_fabric_pipe_map_type_e
{
    soc_dcmn_drv_uc_mc_tdm_config_triple_pipe,
    soc_dcmn_drv_uc_hp_mc_lp_mc_config_triple_pipe,
    soc_dcmn_drv_tdm_non_tdm_config_dual_pipe,
    soc_dcmn_drv_uc_mc_config_dual_pipe,
    soc_dcmn_drv_custom_config_triple_pipe,
    soc_dcmn_drv_custom_config_dual_pipe,
    soc_dcmn_drv_config_single_pipe
} soc_dcmn_fabric_pipe_map_type_t ;

typedef struct soc_dcmn_fabric_pipe_map_s {
    int nof_pipes;
    int config_uc[SOC_DCMN_FABRIC_PIPE_MAX_NUM_OF_PRIORITIES];
    int config_mc[SOC_DCMN_FABRIC_PIPE_MAX_NUM_OF_PRIORITIES];
    char name[SOC_DCMN_FABRIC_PIPE_MAX_LEN_NAME_PRIORITY_CONFIG];
    soc_dcmn_fabric_pipe_map_type_t mapping_type;
} soc_dcmn_fabric_pipe_map_t;

typedef struct soc_dcmn_fabric_mesh_topology_diag_s {
    /*indications*/
    uint32 indication_1;
    uint32 indication_2;
    uint32 indication_3;
    uint32 indication_4;

    /*link_list*/
    int type2_list[SOC_DCMN_FABRIC_MESH_TOPOLOGY_LIST_MAX];
    uint32 link_list_count;

    /*counters*/
    uint32 rx_control_cells_type1;
    uint32 rx_control_cells_type2;
    uint32 control_cells_type3;

    /*status 1*/
    uint32 status_1;
    uint32 status_1_id1;
    uint32 status_1_id2;

    /*status 2*/
    uint32 status_2;
    uint32 status_2_id1;
    uint32 status_2_id2;
    
} soc_dcmn_fabric_mesh_topology_diag_t;

int soc_dcmn_drv_fabric_pipe_map_initalize_valid_configurations(int unit, int min_tdm_priority, soc_dcmn_fabric_pipe_map_t* fabric_pipe_map_valid_config);
soc_error_t soc_dcmn_fabric_mesh_topology_diag_get(int unit, soc_dcmn_fabric_mesh_topology_diag_t *mesh_topology_diag);


#endif /*_SOC_DCMN_FABRIC_H*/
