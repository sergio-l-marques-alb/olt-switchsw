/*
 *         
 * $Id:$
 * 
 * $Copyright: (c) 2017 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *         
 *     
 * DO NOT EDIT THIS FILE!
 *
 */

#ifndef _CPRIMOD_H__H_
#define _CPRIMOD_H__H_

#include <bcm/types.h>
#include <shared/cpri.h>
#include <phymod/phymod.h>
#include <phymod/phymod_diagnostics.h>

/*!
 * @enum cprimod_dispatch_type_e
 * @brief Supported Drivers 
 */ 
typedef enum cprimod_dispatch_type_e {
#ifdef CPRIMOD_CPRI_FALCON_SUPPORT
    cprimodDispatchTypeCprif,
#endif /*CPRIMOD_CPRI_FALCON_SUPPORT  */
    cprimodDispatchTypeCount
} cprimod_dispatch_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_dispatch_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_dispatch_type_t validation */
int cprimod_dispatch_type_t_validate(cprimod_dispatch_type_t cprimod_dispatch_type);



/*! 
 * cprimod_test_api_non_dispatch
 *
 * @brief  test api non dispatch  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  value           - 
 */
int cprimod_test_api_non_dispatch(int unit, int port, int* value);

/*! 
 * cprimod_test_api_dispatch
 *
 * @brief test api dispatch 
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  value           - 
 */
int cprimod_test_api_dispatch(int unit, int port, int* value);

#define CPRIMOD_MAX_LANES_PER_CORE 4 /**< Number of lanes per core. */

#define CPRIMOD_BASIC_FRAME_MAX_NUM_ENTRY 176 /**< Max Number of Entries in Basic Frame. */
#define CPRIMOD_BASIC_FRAME_MAX_BITS_PER_ENTRY 128 /**< Max Number of Bits in an entry. */

#define CPRIMOD_AXC_ID_CONTROL 0xFF /**< Control AxC ID. */
#define CPRIMOD_AXC_ID_ALL 0xFE /**< All AxCs. */

#define CPRIMOD_DEBUG_BASIC_FRAME_USAGE 0x0 /**< Control AxC ID. */
#define CPRIMOD_DEBUG_BASIC_FRAME_RAW 0x1 /**< All AxCs. */

#define CPRIMOD_RSVD4_HEADER_SIZE 24 /**< RSVD4 HEADER SIZE */
#define CPRIMOD_RSVD4_PAYLOAD_SIZE 128 /**< RSVD4 PAYLOAD SIZE */


/*!
 * @enum cprimod_direction_e
 * @brief  Identify Direction of Operation.  
 */ 
typedef enum cprimod_direction_e {
    cprimod_dir_rx,
    cprimod_dir_tx,
    cprimod_dir_Count
} cprimod_direction_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_direction_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_direction_t validation */
int cprimod_direction_t_validate(cprimod_direction_t cprimod_direction);

/*!
 * @enum cprimod_basic_frame_table_id_e
 * @brief  Identify Basic Frame Parse and Framer Table.  
 */ 
typedef enum cprimod_basic_frame_table_id_e {
    cprimod_basic_frame_table_0,
    cprimod_basic_frame_table_1,
    cprimod_basic_frame_table_Count
} cprimod_basic_frame_table_id_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_basic_frame_table_id_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_basic_frame_table_id_t validation */
int cprimod_basic_frame_table_id_t_validate(cprimod_basic_frame_table_id_t cprimod_basic_frame_table_id);

/*!
 * @struct cprimod_basic_frame_usage_entry_s
 * @brief  Basic Frame Usage Table Entry. Which has start bit location and num of bits.  
 */ 
typedef struct cprimod_basic_frame_usage_entry_s {
    uint32 axc_id; /**< AxC Id */
    uint32 start_bit; /**< start bit */
    uint32 num_bits; /**< Num Bit count */
} cprimod_basic_frame_usage_entry_t;

/* cprimod_basic_frame_usage_entry_t initialization and validation */
int cprimod_basic_frame_usage_entry_t_validate(const cprimod_basic_frame_usage_entry_t* cprimod_basic_frame_usage_entry);
int cprimod_basic_frame_usage_entry_t_init(cprimod_basic_frame_usage_entry_t* cprimod_basic_frame_usage_entry);

/*! 
 * cprimod_basic_frame_parser_active_table_set
 *
 * @brief  Get/Set Basic Frame set active table number and number of valid entries.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  table           - active table
 */
int cprimod_basic_frame_parser_active_table_set(int unit, int port, cprimod_basic_frame_table_id_t table);
/*! 
 * cprimod_basic_frame_parser_active_table_get
 *
 * @brief  Get/Set Basic Frame set active table number and number of valid entries.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  table           - active table
 */
int cprimod_basic_frame_parser_active_table_get(int unit, int port, cprimod_basic_frame_table_id_t* table);

/*! 
 * cprimod_basic_frame_parser_table_num_entries_set
 *
 * @brief  Get/Set Basic Frame set active table number and number of valid entries.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  table           - active table
 * @param [in]  num_entries     - Num of valid entries.
 */
int cprimod_basic_frame_parser_table_num_entries_set(int unit, int port, cprimod_basic_frame_table_id_t table, uint32 num_entries);
/*! 
 * cprimod_basic_frame_parser_table_num_entries_get
 *
 * @brief  Get/Set Basic Frame set active table number and number of valid entries.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  table           - active table
 * @param [out]  num_entries     - Num of valid entries.
 */
int cprimod_basic_frame_parser_table_num_entries_get(int unit, int port, cprimod_basic_frame_table_id_t table, uint32* num_entries);

/*! 
 * cprimod_basic_frame_assembly_active_table_set
 *
 * @brief  Get/Set Basic Frame set active table number and number of valid entries.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  table           - active table
 */
int cprimod_basic_frame_assembly_active_table_set(int unit, int port, cprimod_basic_frame_table_id_t table);
/*! 
 * cprimod_basic_frame_assembly_active_table_get
 *
 * @brief  Get/Set Basic Frame set active table number and number of valid entries.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  table           - active table
 */
int cprimod_basic_frame_assembly_active_table_get(int unit, int port, cprimod_basic_frame_table_id_t* table);

/*! 
 * cprimod_basic_frame_assembly_table_num_entries_set
 *
 * @brief  Get/Set Basic Frame set active table number and number of valid entries.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  table           - active table
 * @param [in]  num_entries     - Num of valid entries.
 */
int cprimod_basic_frame_assembly_table_num_entries_set(int unit, int port, cprimod_basic_frame_table_id_t table, uint32 num_entries);
/*! 
 * cprimod_basic_frame_assembly_table_num_entries_get
 *
 * @brief  Get/Set Basic Frame set active table number and number of valid entries.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  table           - active table
 * @param [out]  num_entries     - Num of valid entries.
 */
int cprimod_basic_frame_assembly_table_num_entries_get(int unit, int port, cprimod_basic_frame_table_id_t table, uint32* num_entries);

/*! 
 * cprimod_rx_axc_basic_frame_add
 *
 * @brief  Add AxC Rx Basic Frame to Shadow Table   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 0-63
 * @param [in]  start_bit       - Start Bit Postion
 * @param [in]  num_bit         - Number of Bits
 */
int cprimod_rx_axc_basic_frame_add(int unit, int port, uint32 axc_id, uint32 start_bit, uint32 num_bit);

/*! 
 * cprimod_rx_axc_basic_frame_delete
 *
 * @brief  Delete  AxC Rx Basic Frame from Shadow Table   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 0-63
 */
int cprimod_rx_axc_basic_frame_delete(int unit, int port, uint32 axc_id);

/*! 
 * cprimod_rx_axc_basic_frame_clear
 *
 * @brief  Clear all the AxC from the Basic Frame Parser Shadow Table.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 */
int cprimod_rx_axc_basic_frame_clear(int unit, int port);

/*! 
 * cprimod_rx_axc_basic_frame_get
 *
 * @brief  Retrieve  AxC Rx Basic Frame from Table   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id
 * @param [in]  table           - table id active or standby
 * @param [out]  usage_table     - usage table
 * @param [out]  num_entries     - in: buffer size out:Num of valid entries.
 */
int cprimod_rx_axc_basic_frame_get(int unit, int port, uint32 axc_id, cprimod_basic_frame_table_id_t table, cprimod_basic_frame_usage_entry_t* usage_table, int* num_entries);

/*! 
 * cprimod_tx_axc_basic_frame_add
 *
 * @brief  Add AxC Rx Basic Frame to Shadow Table   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id
 * @param [in]  start_bit       - Start Bit Postion
 * @param [in]  num_bit         - Number of Bits
 */
int cprimod_tx_axc_basic_frame_add(int unit, int port, uint32 axc_id, uint32 start_bit, uint32 num_bit);

/*! 
 * cprimod_tx_axc_basic_frame_delete
 *
 * @brief  Delete  AxC Rx Basic Frame from Shadow Table   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 0-63
 */
int cprimod_tx_axc_basic_frame_delete(int unit, int port, uint32 axc_id);

/*! 
 * cprimod_tx_axc_basic_frame_clear
 *
 * @brief  Clear all the AxC from the Basic Frame Assembly Shadow Table.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 */
int cprimod_tx_axc_basic_frame_clear(int unit, int port);

/*! 
 * cprimod_tx_axc_basic_frame_get
 *
 * @brief  Retrieve  AxC Rx Basic Frame from Table   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 0-63
 * @param [in]  table           - table id active or standby
 * @param [out]  usage_table     - usage table
 * @param [out]  num_entries     - in: buffer size out:Num of valid entries.
 */
int cprimod_tx_axc_basic_frame_get(int unit, int port, uint32 axc_id, cprimod_basic_frame_table_id_t table, cprimod_basic_frame_usage_entry_t* usage_table, int* num_entries);

/*! 
 * cprimod_basic_frame_debug
 *
 * @brief  Debug API for Basic Frame.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id
 * @param [in]  rx_table        - table_num
 * @param [in]  tx_table        - table_num
 * @param [in]  flags           - CPRIMOD_DEBUG_BASIC... flags
 */
int cprimod_basic_frame_debug(int unit, int port, uint32 axc_id, cprimod_basic_frame_table_id_t rx_table, cprimod_basic_frame_table_id_t tx_table, uint32 flags);


/*!
 * @enum cprimod_cpri_frame_map_method_e
 * @brief  CPRI Frame Map Method.  
 */ 
typedef enum cprimod_cpri_frame_map_method_e {
    cprimod_cpri_frame_map_method_1,
    cprimod_cpri_frame_map_method_2,
    cprimod_cpri_frame_map_method_3,
    cprimod_cpri_frame_map_method_Count
} cprimod_cpri_frame_map_method_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_cpri_frame_map_method_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_cpri_frame_map_method_t validation */
int cprimod_cpri_frame_map_method_t_validate(cprimod_cpri_frame_map_method_t cprimod_cpri_frame_map_method);

/*!
 * @enum cprimod_cpri_frame_sync_mode_e
 * @brief  CPRI Frame Sync Mode.  
 */ 
typedef enum cprimod_cpri_frame_sync_mode_e {
    cprimod_cpri_frame_sync_mode_hyper,
    cprimod_cpri_frame_sync_mode_radio,
    cprimod_cpri_frame_sync_mode_basic,
    cprimod_cpri_frame_sync_mode_Count
} cprimod_cpri_frame_sync_mode_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_cpri_frame_sync_mode_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_cpri_frame_sync_mode_t validation */
int cprimod_cpri_frame_sync_mode_t_validate(cprimod_cpri_frame_sync_mode_t cprimod_cpri_frame_sync_mode);

/*!
 * @enum cprimod_rsvd4_frame_sync_mode_e
 * @brief  CPRI Frame Sync Mode.  
 */ 
typedef enum cprimod_rsvd4_frame_sync_mode_e {
    cprimodRsvd4FrameSyncModeNoSync, /**< start any matching msg or tx time slot avail. */
    cprimodRsvd4FrameSyncModeMsgOffset, /**< start  Message Number with Master Frame */
    cprimodRsvd4FrameSyncModeMsgAndMasterOffset, /**< start on Master Frame number and Message Num Offset. */
    cprimodRsvd4FrameSyncModeMsgTsNoSync, /**< gsm only - start when msg_ts match. */
    cprimodRsvd4FrameSyncModeMsgTsMsgOffset, /**< gsm only - sync to Message Number offset  msg_ts match. */
    cprimodRsvd4FrameSyncModeMsgTsMsgAndMasterOffset, /**< gsm only - sync to Master Frame and Message Number  msg_ts match. */
    cprimodRsvd4FrameSyncModeCount
} cprimod_rsvd4_frame_sync_mode_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rsvd4_frame_sync_mode_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rsvd4_frame_sync_mode_t validation */
int cprimod_rsvd4_frame_sync_mode_t_validate(cprimod_rsvd4_frame_sync_mode_t cprimod_rsvd4_frame_sync_mode);

/*!
 * @enum cprimod_rsvd4_msg_ts_mode_e
 * @brief  CPRI Frame Sync Mode.  
 */ 
typedef enum cprimod_rsvd4_msg_ts_mode_e {
    cprimod_rsvd4_msg_ts_mode_WCDMA,
    cprimod_rsvd4_msg_ts_mode_LTE,
    cprimod_rsvd4_msg_ts_mode_GSM_DL,
    cprimod_rsvd4_msg_ts_mode_GSM_UL,
    cprimod_rsvd4_msg_ts_mode_Count
} cprimod_rsvd4_msg_ts_mode_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rsvd4_msg_ts_mode_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rsvd4_msg_ts_mode_t validation */
int cprimod_rsvd4_msg_ts_mode_t_validate(cprimod_rsvd4_msg_ts_mode_t cprimod_rsvd4_msg_ts_mode);

/*!
 * @struct cprimod_cpri_container_config_s
 * @brief  CPRI Container Parser Config Parameter.  
 */ 
typedef struct cprimod_cpri_container_config_s {
    cprimod_cpri_frame_map_method_t map_method; /**< Map Method 1,2or 3 */
    uint32 Naxc; /**< Container size in bits. If Method#3 has to be 2M */
    uint32 K; /**< Num of Basic Frames in Container Block. */
    uint32 Nst; /**< Num of stuffing bits in container block for Method 1.((K*Naxc)-(2MS)) */
    uint32 Na; /**< Number of AxC for Method 3. */
    uint32 Nc; /**< Number of contain in a basic frame for Method 3. */
    uint32 Nv; /**< Number of stuffing bits in container block for Method 3. */
    cprimod_cpri_frame_sync_mode_t frame_sync_mode; /**< Radio,Hyper or Basic */
    uint32 basic_frame_offset; /**< Basic Frame Offset. */
    uint32 radio_frame_offset; /**< Radio Frame Offset. */
    uint32 hyper_frame_offset; /**< Hyper Frame Offset. */
} cprimod_cpri_container_config_t;

/* cprimod_cpri_container_config_t initialization and validation */
int cprimod_cpri_container_config_t_validate(const cprimod_cpri_container_config_t* cprimod_cpri_container_config);
int cprimod_cpri_container_config_t_init(cprimod_cpri_container_config_t* cprimod_cpri_container_config);


/*!
 * @struct cprimod_rsvd4_container_config_s
 * @brief  RSVD4 Container Parser Config Parameter.  
 */ 
typedef struct cprimod_rsvd4_container_config_s {
    uint32 axc_id; /**< AxC/Queue ID. */
    uint32 stuffing_cnt; /**< Stuffing Count in bits. */
    cprimod_rsvd4_msg_ts_mode_t msg_ts_mode; /**< Msg TS sync mode */
    uint32 msg_ts_cnt; /**< Msg TS sync mode */
    cprimod_rsvd4_frame_sync_mode_t frame_sync_mode; /**< Frame Sync Mode */
    uint32 master_frame_offset; /**< Master Frame Offset (bfn_offset) . */
    uint32 message_number_offset; /**< Message Offset within Master Frame (rfrm_offset). */
    uint32 container_block_cnt; /**< Num of bit in container block. */
    uint32 use_ts_dbm; /**< Use TS DBM. */
    uint32 ts_dbm_prof_num; /**< TS DBM Profile Num. */
    uint32 num_active_slots; /**< TS DBM Num of Active Slots. */
    uint32 msg_addr; /**< RSVD4 Header Addr - Only for Tx */
    uint32 msg_type; /**< RSVD4 Header Type - Only for Tx */
    uint32 msg_ts_offset; /**< RSVD4 ts offset - Only for Tx */
} cprimod_rsvd4_container_config_t;

/* cprimod_rsvd4_container_config_t initialization and validation */
int cprimod_rsvd4_container_config_t_validate(const cprimod_rsvd4_container_config_t* cprimod_rsvd4_container_config);
int cprimod_rsvd4_container_config_t_init(cprimod_rsvd4_container_config_t* cprimod_rsvd4_container_config);

/*! 
 * cprimod_cpri_rx_axc_container_config_set
 *
 * @brief  Debug API for Basic Frame.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 
 * @param [in]  config_info     - container config info.
 */
int cprimod_cpri_rx_axc_container_config_set(int unit, int port, uint32 axc_id, const cprimod_cpri_container_config_t* config_info);
/*! 
 * cprimod_cpri_rx_axc_container_config_get
 *
 * @brief  Debug API for Basic Frame.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 
 * @param [out]  config_info     - container config info.
 */
int cprimod_cpri_rx_axc_container_config_get(int unit, int port, uint32 axc_id, cprimod_cpri_container_config_t* config_info);

/*! 
 * cprimod_cpri_tx_axc_container_config_set
 *
 * @brief  Debug API for Basic Frame.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id
 * @param [in]  config_info     - container  config info.
 */
int cprimod_cpri_tx_axc_container_config_set(int unit, int port, uint32 axc_id, const cprimod_cpri_container_config_t* config_info);
/*! 
 * cprimod_cpri_tx_axc_container_config_get
 *
 * @brief  Debug API for Basic Frame.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id
 * @param [out]  config_info     - container  config info.
 */
int cprimod_cpri_tx_axc_container_config_get(int unit, int port, uint32 axc_id, cprimod_cpri_container_config_t* config_info);

/*! 
 * cprimod_rsvd4_rx_axc_container_config_set
 *
 * @brief  Debug API for Basic Frame.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Flow  ID 
 * @param [in]  config_info     - container config info.
 */
int cprimod_rsvd4_rx_axc_container_config_set(int unit, int port, uint32 flow_id, const cprimod_rsvd4_container_config_t* config_info);
/*! 
 * cprimod_rsvd4_rx_axc_container_config_get
 *
 * @brief  Debug API for Basic Frame.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Flow  ID 
 * @param [out]  config_info     - container config info.
 */
int cprimod_rsvd4_rx_axc_container_config_get(int unit, int port, uint32 flow_id, cprimod_rsvd4_container_config_t* config_info);

/*! 
 * cprimod_rsvd4_tx_axc_container_config_set
 *
 * @brief  Debug API for Basic Frame.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Flow ID 
 * @param [in]  config_info     - container  config info.
 */
int cprimod_rsvd4_tx_axc_container_config_set(int unit, int port, uint32 flow_id, const cprimod_rsvd4_container_config_t* config_info);
/*! 
 * cprimod_rsvd4_tx_axc_container_config_get
 *
 * @brief  Debug API for Basic Frame.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Flow ID 
 * @param [out]  config_info     - container  config info.
 */
int cprimod_rsvd4_tx_axc_container_config_get(int unit, int port, uint32 flow_id, cprimod_rsvd4_container_config_t* config_info);


/*!
 * @struct cprimod_payload_size_info_s
 * @brief  Config Parameter for ROE Payload Size .  
 */ 
typedef struct cprimod_payload_size_info_s {
    uint32 packet_size; /**< ROE Pay Load size in Bits.2*M*S  */
    uint32 last_packet_num; /**< Set Packet Number if last packet has different size. */
    uint32 last_packet_size; /**< Size of last packet payload. */
} cprimod_payload_size_info_t;

/* cprimod_payload_size_info_t initialization and validation */
int cprimod_payload_size_info_t_validate(const cprimod_payload_size_info_t* cprimod_payload_size_info);
int cprimod_payload_size_info_t_init(cprimod_payload_size_info_t* cprimod_payload_size_info);

/*! 
 * cprimod_rx_roe_payload_size_set
 *
 * @brief  Rx ROE payload size config.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 
 * @param [in]  config_info     - ROE payload size info.
 */
int cprimod_rx_roe_payload_size_set(int unit, int port, uint32 axc_id, const cprimod_payload_size_info_t* config_info);
/*! 
 * cprimod_rx_roe_payload_size_get
 *
 * @brief  Rx ROE payload size config.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 
 * @param [out]  config_info     - ROE payload size info.
 */
int cprimod_rx_roe_payload_size_get(int unit, int port, uint32 axc_id, cprimod_payload_size_info_t* config_info);

/*! 
 * cprimod_tx_roe_payload_size_set
 *
 * @brief  Tx ROE payload size config.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 
 * @param [in]  config_info     - ROE payload size info.
 */
int cprimod_tx_roe_payload_size_set(int unit, int port, uint32 axc_id, const cprimod_payload_size_info_t* config_info);
/*! 
 * cprimod_tx_roe_payload_size_get
 *
 * @brief  Tx ROE payload size config.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  axc_id          - AxC Id 
 * @param [out]  config_info     - ROE payload size info.
 */
int cprimod_tx_roe_payload_size_get(int unit, int port, uint32 axc_id, cprimod_payload_size_info_t* config_info);


/*!
 * @enum cprimod_compression_type_e
 * @brief  Identify Direction of Operation.  
 */ 
typedef enum cprimod_compression_type_e {
    cprimod_compress,
    cprimod_decompress,
    cprimod_no_compress,
    cprimod_Count
} cprimod_compression_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_compression_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_compression_type_t validation */
int cprimod_compression_type_t_validate(cprimod_compression_type_t cprimod_compression_type);

/*!
 * @enum cprimod_truncation_type_e
 * @brief  Data Truncation Type .  
 */ 
typedef enum cprimod_truncation_type_e {
    cprimod_truncation_type_15_to_16,
    cprimod_truncation_type_add_0,
    cprimod_truncation_type_16_to_15,
    cprimod_truncation_type_add_1,
    cprimod_truncation_type_Count
} cprimod_truncation_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_truncation_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_truncation_type_t validation */
int cprimod_truncation_type_t_validate(cprimod_truncation_type_t cprimod_truncation_type);

/*!
 * @struct cprimod_encap_decap_data_config_s
 * @brief  Config Parameter for Encap Data Procession .  
 */ 
typedef struct cprimod_encap_decap_data_config_s {
    uint32 sample_size; /**< Sample Size  */
    uint32 truncation_enable; /**< Trunccation Enable  */
    cprimod_truncation_type_t truncation_type; /**< Trunccation Type  */
    cprimod_compression_type_t compression_type; /**< Compression Type  */
    uint32 mux_enable; /**< Mux/Demux Enable  */
    uint32 bit_reversal; /**< Bit Reversal 0 or 1  */
    uint32 buffer_size; /**< Encap Queue Size in Bytes.  */
    uint32 priority; /**< Priority 0-3 - Work Queue.  */
    uint32 cycle_size; /**< Num of packet in buffer Queue */
} cprimod_encap_decap_data_config_t;

/* cprimod_encap_decap_data_config_t initialization and validation */
int cprimod_encap_decap_data_config_t_validate(const cprimod_encap_decap_data_config_t* cprimod_encap_decap_data_config);
int cprimod_encap_decap_data_config_t_init(cprimod_encap_decap_data_config_t* cprimod_encap_decap_data_config);

/*! 
 * cprimod_cpri_encap_data_config_set
 *
 * @brief  Encapsulation Data Manipulation Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number
 * @param [in]  config_info     - Encap Data Configuration info.
 */
int cprimod_cpri_encap_data_config_set(int unit, int port, uint32 queue_num, const cprimod_encap_decap_data_config_t* config_info);
/*! 
 * cprimod_cpri_encap_data_config_get
 *
 * @brief  Encapsulation Data Manipulation Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number
 * @param [out]  config_info     - Encap Data Configuration info.
 */
int cprimod_cpri_encap_data_config_get(int unit, int port, uint32 queue_num, cprimod_encap_decap_data_config_t* config_info);

/*! 
 * cprimod_cpri_decap_data_config_set
 *
 * @brief  Decapsulation Data Manipulation Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number
 * @param [in]  config_info     - Decap Data Configuration info.
 */
int cprimod_cpri_decap_data_config_set(int unit, int port, uint32 queue_num, const cprimod_encap_decap_data_config_t* config_info);
/*! 
 * cprimod_cpri_decap_data_config_get
 *
 * @brief  Decapsulation Data Manipulation Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number
 * @param [out]  config_info     - Decap Data Configuration info.
 */
int cprimod_cpri_decap_data_config_get(int unit, int port, uint32 queue_num, cprimod_encap_decap_data_config_t* config_info);


/*!
 * @struct cprimod_rsvd4_encap_data_config_s
 * @brief  Config Parameter for RSVD4 Encap Data Procession .  
 */ 
typedef struct cprimod_rsvd4_encap_data_config_s {
    uint32 buffer_size; /**< Encap Queue Size in Bytes.  */
    uint32 priority; /**< Priority 0-3 - Work Queue.  */
    uint32 gsm_pad_size; /**< GSM Pad Size  */
    uint32 gsm_extra_pad_size; /**< GSM Exta Pad Enable  */
    uint32 gsm_pad_enable; /**< GSM Pad Enable  */
    uint32 gsm_control_location; /**< GSM Control Loc.  */
} cprimod_rsvd4_encap_data_config_t;

/* cprimod_rsvd4_encap_data_config_t initialization and validation */
int cprimod_rsvd4_encap_data_config_t_validate(const cprimod_rsvd4_encap_data_config_t* cprimod_rsvd4_encap_data_config);
int cprimod_rsvd4_encap_data_config_t_init(cprimod_rsvd4_encap_data_config_t* cprimod_rsvd4_encap_data_config);


/*!
 * @struct cprimod_rsvd4_decap_data_config_s
 * @brief  Config Parameter for RSVD4 Decap Data Procession .  
 */ 
typedef struct cprimod_rsvd4_decap_data_config_s {
    uint32 buffer_size; /**< Encap Queue Size in Bytes.  */
    uint32 cycle_size; /**< Num of Packet in Queue.  */
    uint32 gsm_pad_size; /**< GSM Pad Size  */
    uint32 gsm_extra_pad_size; /**< GSM Exta Pad Enable  */
    uint32 gsm_pad_enable; /**< GSM Pad Enable  */
    uint32 gsm_control_location; /**< GSM Control Loc.  */
} cprimod_rsvd4_decap_data_config_t;

/* cprimod_rsvd4_decap_data_config_t initialization and validation */
int cprimod_rsvd4_decap_data_config_t_validate(const cprimod_rsvd4_decap_data_config_t* cprimod_rsvd4_decap_data_config);
int cprimod_rsvd4_decap_data_config_t_init(cprimod_rsvd4_decap_data_config_t* cprimod_rsvd4_decap_data_config);

/*! 
 * cprimod_rsvd4_encap_data_config_set
 *
 * @brief  Encapsulation Data Manipulation Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number
 * @param [in]  config_info     - Encap Data Configuration info.
 */
int cprimod_rsvd4_encap_data_config_set(int unit, int port, uint32 queue_num, const cprimod_rsvd4_encap_data_config_t* config_info);
/*! 
 * cprimod_rsvd4_encap_data_config_get
 *
 * @brief  Encapsulation Data Manipulation Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number
 * @param [out]  config_info     - Encap Data Configuration info.
 */
int cprimod_rsvd4_encap_data_config_get(int unit, int port, uint32 queue_num, cprimod_rsvd4_encap_data_config_t* config_info);

/*! 
 * cprimod_rsvd4_decap_data_config_set
 *
 * @brief  Decapsulation Data Manipulation Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number
 * @param [in]  config_info     - Decap Data Configuration info.
 */
int cprimod_rsvd4_decap_data_config_set(int unit, int port, uint32 queue_num, const cprimod_rsvd4_decap_data_config_t* config_info);
/*! 
 * cprimod_rsvd4_decap_data_config_get
 *
 * @brief  Decapsulation Data Manipulation Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number
 * @param [out]  config_info     - Decap Data Configuration info.
 */
int cprimod_rsvd4_decap_data_config_get(int unit, int port, uint32 queue_num, cprimod_rsvd4_decap_data_config_t* config_info);


/*!
 * @enum cprimod_hdr_encap_type_e
 * @brief   Encapsulation  Header Type.  
 */ 
typedef enum cprimod_hdr_encap_type_e {
    cprimod_hdr_encap_type_roe,
    cprimod_hdr_encap_type_encap_none,
    cprimod_hdr_encap_type_Count
} cprimod_hdr_encap_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_hdr_encap_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_hdr_encap_type_t validation */
int cprimod_hdr_encap_type_t_validate(cprimod_hdr_encap_type_t cprimod_hdr_encap_type);

/*!
 * @enum cprimod_hdr_vlan_type_e
 * @brief  Header VLAN  Type.  
 */ 
typedef enum cprimod_hdr_vlan_type_e {
    cprimodHdrVlanTypeUntagged,
    cprimodHdrVlanTypeTaggedVlan0,
    cprimodHdrVlanTypeQinQ,
    cprimodHdrVlanTypeTaggedVlan1,
    cprimodHdrVlanTypeCount
} cprimod_hdr_vlan_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_hdr_vlan_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_hdr_vlan_type_t validation */
int cprimod_hdr_vlan_type_t_validate(cprimod_hdr_vlan_type_t cprimod_hdr_vlan_type);

/*!
 * @struct cprimod_encap_header_config_s
 * @brief  Encapsulation Header Configuration.  
 */ 
typedef struct cprimod_encap_header_config_s {
    cprimod_hdr_encap_type_t header_type; /**< Encapsulation Header Type. ROE or ETH (no encap). */
    uint32 roe_flow_id; /**< ROE flow ID. */
    uint32 roe_subtype; /**< ROE SubType (IEEE P1914). */
    uint32 ordering_info_index; /**< Ordering Info Profile number. */
    uint32 mac_da_index; /**< Index to Mac DA table. */
    uint32 mac_sa_index; /**< Index to Mac SA table. */
    cprimod_hdr_vlan_type_t vlan_type; /**< VLAN Type */
    uint32 vlan_id_0_index; /**< Index to VLAN ID 0 table. */
    uint32 vlan_id_1_index; /**< Index to VLAN ID 1 table. */
    uint32 vlan_0_priority; /**< VLAN 0 Priority. */
    uint32 vlan_1_priority; /**< VLAN 1 Priority. */
    uint32 vlan_eth_type_index; /**< Index to VLAN ETH Type. */
    uint32 use_tagid_for_vlan; /**< Use tag id to index vlan. */
    uint32 use_tagid_for_flowid; /**< Use tag id for flow id. */
    uint32 use_opcode; /**< Use opcode IEEE P1914. */
    uint32 roe_opcode; /**< ROE opcode IEEE P1914. */
} cprimod_encap_header_config_t;

/* cprimod_encap_header_config_t initialization and validation */
int cprimod_encap_header_config_t_validate(const cprimod_encap_header_config_t* cprimod_encap_header_config);
int cprimod_encap_header_config_t_init(cprimod_encap_header_config_t* cprimod_encap_header_config);

/*! 
 * cprimod_encap_header_config_set
 *
 * @brief  Encapsulation Header Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number 0-79
 * @param [in]  config_info     - Encap Header Configuration info.
 */
int cprimod_encap_header_config_set(int unit, int port, uint32 queue_num, const cprimod_encap_header_config_t* config_info);
/*! 
 * cprimod_encap_header_config_get
 *
 * @brief  Encapsulation Header Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number 0-79
 * @param [out]  config_info     - Encap Header Configuration info.
 */
int cprimod_encap_header_config_get(int unit, int port, uint32 queue_num, cprimod_encap_header_config_t* config_info);

/*! 
 * cprimod_rx_rsvd4_gsm_tsn_bitmap_set
 *
 * @brief  Encapsulation Header Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number 0-79
 * @param [in]  tsn_bitmap      - GSM TSN BitMap .
 */
int cprimod_rx_rsvd4_gsm_tsn_bitmap_set(int unit, int port, uint32 queue_num, uint32 tsn_bitmap);
/*! 
 * cprimod_rx_rsvd4_gsm_tsn_bitmap_get
 *
 * @brief  Encapsulation Header Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue number 0-79
 * @param [out]  tsn_bitmap      - GSM TSN BitMap.
 */
int cprimod_rx_rsvd4_gsm_tsn_bitmap_get(int unit, int port, uint32 queue_num, uint32* tsn_bitmap);


/*!
 * @enum cprimod_ordering_info_type_e
 * @brief  Ordering info  Types.  
 */ 
typedef enum cprimod_ordering_info_type_e {
    cprimod_ordering_info_type_roe_sequence,
    cprimod_ordering_info_type_bfn_for_qcnt,
    cprimod_ordering_info_type_use_pinfo,
    cprimod_ordering_info_type_Count
} cprimod_ordering_info_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_ordering_info_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_ordering_info_type_t validation */
int cprimod_ordering_info_type_t_validate(cprimod_ordering_info_type_t cprimod_ordering_info_type);

/*!
 * @enum cprimod_ordering_info_prop_e
 * @brief  Ordering info  Types.  
 */ 
typedef enum cprimod_ordering_info_prop_e {
    cprimod_ordering_info_prop_no_increment,
    cprimod_ordering_info_prop_increment_by_constant,
    cprimod_ordering_info_prop_increment_by_payload,
    cprimod_ordering_info_prop_Count
} cprimod_ordering_info_prop_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_ordering_info_prop_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_ordering_info_prop_t validation */
int cprimod_ordering_info_prop_t_validate(cprimod_ordering_info_prop_t cprimod_ordering_info_prop);

/*!
 * @struct cprimod_encap_ordering_info_entry_s
 * @brief   Encap Ordering info Entry .  
 */ 
typedef struct cprimod_encap_ordering_info_entry_s {
    cprimod_ordering_info_type_t type; /**< Ordering info type. */
    cprimod_ordering_info_prop_t pcnt_prop; /**< seqNumPIncProp */
    uint32 pcnt_size; /**< P count size 1-32 bits. */
    uint32 pcnt_increment; /**< .seqNumPInc */
    uint32 pcnt_max; /**< .seqNumPMax */
    cprimod_ordering_info_prop_t qcnt_prop; /**< seqNumQIncProp */
    uint32 qcnt_size; /**< Q count size 0 - (32-pcnt_size) bits. */
    uint32 qcnt_increment; /**< .seqNumQInc */
    uint32 qcnt_max; /**< .seqNumQMax */
    uint32 seq_reserve_value; /**< .seqNumRsvd Value. */
} cprimod_encap_ordering_info_entry_t;

/* cprimod_encap_ordering_info_entry_t initialization and validation */
int cprimod_encap_ordering_info_entry_t_validate(const cprimod_encap_ordering_info_entry_t* cprimod_encap_ordering_info_entry);
int cprimod_encap_ordering_info_entry_t_init(cprimod_encap_ordering_info_entry_t* cprimod_encap_ordering_info_entry);


/*!
 * @struct cprimod_decap_ordering_info_entry_s
 * @brief   Decap Ordering info , with TSN bit map Entry .  
 */ 
typedef struct cprimod_decap_ordering_info_entry_s {
    cprimod_ordering_info_type_t type; /**< Ordering info type. */
    uint32 pcnt_extended; /**< P counter combine with Q counter */
    uint32 pcnt_pkt_count; /**< Max packet describe by P counter. */
    uint32 pcnt_size; /**< P count size 1-32 bits. */
    uint32 pcnt_increment; /**< .seqNumPInc */
    uint32 pcnt_max; /**< .seqNumPMax */
    uint32 pcnt_bias; /**< P cnt bias */
    uint32 pcnt_increment_p2; /**< .seqNumPInc to be power of 2 */
    uint32 qcnt_size; /**< Q count size 0 - (32-pcnt_size) bits. */
    uint32 qcnt_increment; /**< .seqNumQInc */
    uint32 qcnt_max; /**< .seqNumQMax */
    uint32 qcnt_bias; /**< Q cnt bias */
    uint32 qcnt_increment_p2; /**< .seqNumQInc to be power of 2 */
    uint32 modulo_2; /**< Queue Cycle Size is modulo 2. */
    uint32 gsm_tsn_bitmap; /**< GSM TSN bit map. */
    uint32 seq_reserve_value; /**< .seqNumRsvd Value. */
} cprimod_decap_ordering_info_entry_t;

/* cprimod_decap_ordering_info_entry_t initialization and validation */
int cprimod_decap_ordering_info_entry_t_validate(const cprimod_decap_ordering_info_entry_t* cprimod_decap_ordering_info_entry);
int cprimod_decap_ordering_info_entry_t_init(cprimod_decap_ordering_info_entry_t* cprimod_decap_ordering_info_entry);

/*! 
 * cprimod_encap_ordering_info_entry_set
 *
 * @brief  Encapsulation Header Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Ordering info table index.
 * @param [in]  user_entry      - Encap Ordering info Entry
 */
int cprimod_encap_ordering_info_entry_set(int unit, int port, uint32 index, const cprimod_encap_ordering_info_entry_t* user_entry);
/*! 
 * cprimod_encap_ordering_info_entry_get
 *
 * @brief  Encapsulation Header Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Ordering info table index.
 * @param [out]  user_entry      - Encap Ordering info Entry
 */
int cprimod_encap_ordering_info_entry_get(int unit, int port, uint32 index, cprimod_encap_ordering_info_entry_t* user_entry);

/*! 
 * cprimod_decap_ordering_info_entry_set
 *
 * @brief  Encapsulation Header Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Ordering info table index.
 * @param [in]  user_entry      - Encap Ordering info Entry
 */
int cprimod_decap_ordering_info_entry_set(int unit, int port, uint32 index, const cprimod_decap_ordering_info_entry_t* user_entry);
/*! 
 * cprimod_decap_ordering_info_entry_get
 *
 * @brief  Encapsulation Header Configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Ordering info table index.
 * @param [out]  user_entry      - Encap Ordering info Entry
 */
int cprimod_decap_ordering_info_entry_get(int unit, int port, uint32 index, cprimod_decap_ordering_info_entry_t* user_entry);


/*!
 * @struct cprimod_cpri_ordering_info_offset_s
 * @brief   Encap Ordering info offset Entry .  
 */ 
typedef struct cprimod_cpri_ordering_info_offset_s {
    uint32 p_size; /**< P count size 1-32 bits. */
    uint32 p_offset; /**< P counter offset. */
    uint32 q_size; /**< Q count size 0-(32-p_size) bits. */
    uint32 q_offset; /**< ! counter offset. */
} cprimod_cpri_ordering_info_offset_t;

/* cprimod_cpri_ordering_info_offset_t initialization and validation */
int cprimod_cpri_ordering_info_offset_t_validate(const cprimod_cpri_ordering_info_offset_t* cprimod_cpri_ordering_info_offset);
int cprimod_cpri_ordering_info_offset_t_init(cprimod_cpri_ordering_info_offset_t* cprimod_cpri_ordering_info_offset);

/*! 
 * cprimod_encap_ordering_info_sequence_offset_set
 *
 * @brief  Encapsulation Order Info Offset, _get() user need to provide p_size and q_size.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue           - Queue numer.
 * @param [in]  control         - Control/Data.
 * @param [in]  offset_entry    - Encap Ordering info Offset Entry
 */
int cprimod_encap_ordering_info_sequence_offset_set(int unit, int port, uint32 queue, uint32 control, const cprimod_cpri_ordering_info_offset_t* offset_entry);
/*! 
 * cprimod_encap_ordering_info_sequence_offset_get
 *
 * @brief  Encapsulation Order Info Offset, _get() user need to provide p_size and q_size.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue           - Queue numer.
 * @param [in]  control         - Control/Data.
 * @param [out]  offset_entry    - Encap Ordering info Offset Entry
 */
int cprimod_encap_ordering_info_sequence_offset_get(int unit, int port, uint32 queue, uint32 control, cprimod_cpri_ordering_info_offset_t* offset_entry);

/*! 
 * cprimod_decap_ordering_info_sequence_offset_set
 *
 * @brief  Decapsulation Order Info Offset, _get() user need to provide p_size and q_size.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue           - Queue numer.
 * @param [in]  offset_entry    - Decap Ordering info Offset Entry
 */
int cprimod_decap_ordering_info_sequence_offset_set(int unit, int port, uint32 queue, const cprimod_cpri_ordering_info_offset_t* offset_entry);
/*! 
 * cprimod_decap_ordering_info_sequence_offset_get
 *
 * @brief  Decapsulation Order Info Offset, _get() user need to provide p_size and q_size.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue           - Queue numer.
 * @param [out]  offset_entry    - Decap Ordering info Offset Entry
 */
int cprimod_decap_ordering_info_sequence_offset_get(int unit, int port, uint32 queue, cprimod_cpri_ordering_info_offset_t* offset_entry);

typedef bcm_mac_t cprimod_mac_addr_t;

/*! 
 * cprimod_encap_mac_da_entry_set
 *
 * @brief  Destination MAC Addr.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Index number.
 * @param [in]  addr            - MAC Address.
 */
int cprimod_encap_mac_da_entry_set(int unit, int port, uint32 index, cprimod_mac_addr_t addr);
/*! 
 * cprimod_encap_mac_da_entry_get
 *
 * @brief  Destination MAC Addr.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Index number.
 * @param [out]  addr            - MAC Address.
 */
int cprimod_encap_mac_da_entry_get(int unit, int port, uint32 index, cprimod_mac_addr_t addr);

/*! 
 * cprimod_encap_mac_sa_entry_set
 *
 * @brief  Source MAC Addr.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Index number.
 * @param [in]  addr            - MAC Address.
 */
int cprimod_encap_mac_sa_entry_set(int unit, int port, uint32 index, cprimod_mac_addr_t addr);
/*! 
 * cprimod_encap_mac_sa_entry_get
 *
 * @brief  Source MAC Addr.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Index number.
 * @param [out]  addr            - MAC Address.
 */
int cprimod_encap_mac_sa_entry_get(int unit, int port, uint32 index, cprimod_mac_addr_t addr);


/*!
 * @enum cprimod_vlan_table_id_e
 * @brief  VLAN Table ID   
 */ 
typedef enum cprimod_vlan_table_id_e {
    cprimodVlanTable0,
    cprimodVlanTable1,
    cprimodVlanTableCount
} cprimod_vlan_table_id_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_vlan_table_id_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_vlan_table_id_t validation */
int cprimod_vlan_table_id_t_validate(cprimod_vlan_table_id_t cprimod_vlan_table_id);
/*! 
 * cprimod_encap_vlan_id_entry_set
 *
 * @brief  VLAN ID Entry.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  table_id        - VLAN Table ID 0 or 1.
 * @param [in]  index           - Index to Vlan Id Table.
 * @param [in]  vlan_id         - VLAN_ID.
 */
int cprimod_encap_vlan_id_entry_set(int unit, int port, cprimod_vlan_table_id_t table_id, uint32 index, uint32 vlan_id);
/*! 
 * cprimod_encap_vlan_id_entry_get
 *
 * @brief  VLAN ID Entry.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  table_id        - VLAN Table ID 0 or 1.
 * @param [in]  index           - Index to Vlan Id Table.
 * @param [out]  vlan_id         - VLAN_ID.
 */
int cprimod_encap_vlan_id_entry_get(int unit, int port, cprimod_vlan_table_id_t table_id, uint32 index, uint32* vlan_id);


/*!
 * @enum cprimod_ethertype_e
 * @brief   ETHER TYPE    
 */ 
typedef enum cprimod_ethertype_e {
    cprimodEthertypeRoe = 0,
    cprimodEthertypeFast = 1,
    cprimodEthertypeVlan = 2,
    cprimodEthertypeQinQ = 3,
    cprimodEthertypeRoe1 = 4,
    cprimodEthertypeCount
} cprimod_ethertype_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_ethertype_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_ethertype_t validation */
int cprimod_ethertype_t_validate(cprimod_ethertype_t cprimod_ethertype);
/*! 
 * cprimod_decap_ethertype_config_set
 *
 * @brief  Decap Ethertype Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  type_id         - ETHER TYpe ID.
 * @param [in]  ethertype       - EtherType.
 */
int cprimod_decap_ethertype_config_set(int unit, int port, cprimod_ethertype_t type_id, uint16 ethertype);
/*! 
 * cprimod_decap_ethertype_config_get
 *
 * @brief  Decap Ethertype Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  type_id         - ETHER TYpe ID.
 * @param [out]  ethertype       - EtherType.
 */
int cprimod_decap_ethertype_config_get(int unit, int port, cprimod_ethertype_t type_id, uint16* ethertype);

/*! 
 * cprimod_encap_ethertype_config_set
 *
 * @brief  Encap Ethtype Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  type_id         - ETHER TYpe ID.
 * @param [in]  ethertype       - EtherType.
 */
int cprimod_encap_ethertype_config_set(int unit, int port, cprimod_ethertype_t type_id, uint16 ethertype);
/*! 
 * cprimod_encap_ethertype_config_get
 *
 * @brief  Encap Ethtype Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  type_id         - ETHER TYpe ID.
 * @param [out]  ethertype       - EtherType.
 */
int cprimod_encap_ethertype_config_get(int unit, int port, cprimod_ethertype_t type_id, uint16* ethertype);

/*! 
 * cprimod_encap_memroy_clear
 *
 * @brief  Clear the internal queue and memory processing  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - QUEUE Number.
 */
int cprimod_encap_memroy_clear(int unit, int port, int queue_num);

/*! 
 * cprimod_cpri_rx_framer_state_clear
 *
 * @brief  Clear the internal state of framer and container processing  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - QUEUE Number.
 */
int cprimod_cpri_rx_framer_state_clear(int unit, int port, int queue_num);

/*! 
 * cprimod_decap_memroy_clear
 *
 * @brief  Clear the internal queue and memory processing  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - QUEUE Number.
 */
int cprimod_decap_memroy_clear(int unit, int port, int queue_num);

/*! 
 * cprimod_cpri_tx_framer_state_clear
 *
 * @brief  Clear the internal state of framer and container processing  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - QUEUE Number.
 */
int cprimod_cpri_tx_framer_state_clear(int unit, int port, int queue_num);


/*!
 * @enum cprimod_cls_option_e
 * @brief   Decap Flow Classification Options.    
 */ 
typedef enum cprimod_cls_option_e {
    cprimodClsOptionUseQueueNum,
    cprimodClsOptionUseFlowIdToQueue,
    cprimodClsOptionUseOpcodeToQueue,
    cprimodClsOptionCount
} cprimod_cls_option_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_cls_option_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_cls_option_t validation */
int cprimod_cls_option_t_validate(cprimod_cls_option_t cprimod_cls_option);

/*!
 * @enum cprimod_cls_flow_type_e
 * @brief   Decap Flow Classification Options.    
 */ 
typedef enum cprimod_cls_flow_type_e {
    cprimodClsFlowTypeData,
    cprimodClsFlowTypeDataWithExt,
    cprimodClsFlowTypeCtrlWithOpcode,
    cprimodClsFlowTypeCtrl,
    cprimodClsFlowTypeCount
} cprimod_cls_flow_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_cls_flow_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_cls_flow_type_t validation */
int cprimod_cls_flow_type_t_validate(cprimod_cls_flow_type_t cprimod_cls_flow_type);
/*! 
 * cprimod_decap_flow_classification_config_set
 *
 * @brief  Set Flow Classification,  Subtype to Queue Mapping.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  subtype         - ROE Subtype - index.
 * @param [in]  queue_num       - Queue Num or Offset to Flow
 * @param [in]  cls_option      - Flow CLS Option.
 * @param [in]  flow_type       - CLS flow Type
 */
int cprimod_decap_flow_classification_config_set(int unit, int port, uint8 subtype, uint32 queue_num, cprimod_cls_option_t cls_option, cprimod_cls_flow_type_t flow_type);
/*! 
 * cprimod_decap_flow_classification_config_get
 *
 * @brief  Set Flow Classification,  Subtype to Queue Mapping.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  subtype         - ROE Subtype - index.
 * @param [out]  queue_num       - Queue Num or Offset to Flow
 * @param [out]  cls_option      - Flow CLS Option.
 * @param [out]  flow_type       - CLS flow Type
 */
int cprimod_decap_flow_classification_config_get(int unit, int port, uint8 subtype, uint32* queue_num, cprimod_cls_option_t* cls_option, cprimod_cls_flow_type_t* flow_type);

/*! 
 * cprimod_decap_flow_to_queue_mapping_set
 *
 * @brief  Set/Get Flow to  Queue Mapping.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Flow ID
 * @param [in]  queue_num       - Queue Num or Offset to Flow
 */
int cprimod_decap_flow_to_queue_mapping_set(int unit, int port, uint32 flow_id, uint32 queue_num);
/*! 
 * cprimod_decap_flow_to_queue_mapping_get
 *
 * @brief  Set/Get Flow to  Queue Mapping.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Flow ID
 * @param [out]  queue_num       - Queue Num or Offset to Flow
 */
int cprimod_decap_flow_to_queue_mapping_get(int unit, int port, uint32 flow_id, uint32* queue_num);

/*! 
 * cprimod_decap_queue_to_ordering_info_index_mapping_set
 *
 * @brief  Set/Get Queue to Ordering info Table Index Mapping.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue Num
 * @param [in]  ordering_info_index   - Index to Ordering info Table
 */
int cprimod_decap_queue_to_ordering_info_index_mapping_set(int unit, int port, uint32 queue_num, uint32 ordering_info_index);
/*! 
 * cprimod_decap_queue_to_ordering_info_index_mapping_get
 *
 * @brief  Set/Get Queue to Ordering info Table Index Mapping.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Queue Num
 * @param [out]  ordering_info_index   - Index to Ordering info Table
 */
int cprimod_decap_queue_to_ordering_info_index_mapping_get(int unit, int port, uint32 queue_num, uint32* ordering_info_index);

/*! 
 * cprimod_tx_framer_tgen_tick_set
 *
 * @brief  Tx Framer TGEN tick configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  divider         - PMD clock divider.
 * @param [in]  basic_frame_tick   - Number of Ticks in a basic frame.
 * @param [in]  tick_bitmap     - Bit Map for the tick.
 * @param [in]  tick_bitmap_size   - Tick Bitmap size in number of bits.
 */
int cprimod_tx_framer_tgen_tick_set(int unit, int port, uint32 divider, uint32 basic_frame_tick, uint32 tick_bitmap, uint32 tick_bitmap_size);
/*! 
 * cprimod_tx_framer_tgen_tick_get
 *
 * @brief  Tx Framer TGEN tick configuration.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  divider         - PMD clock divider.
 * @param [out]  basic_frame_tick   - Number of Ticks in a basic frame.
 * @param [out]  tick_bitmap     - Bit Map for the tick.
 * @param [out]  tick_bitmap_size   - Tick Bitmap size in number of bits.
 */
int cprimod_tx_framer_tgen_tick_get(int unit, int port, uint32* divider, uint32* basic_frame_tick, uint32* tick_bitmap, uint32* tick_bitmap_size);

/*! 
 * cprimod_tx_framer_tgen_enable
 *
 * @brief  Tx Framer Tgen Enable/Disable set.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  enable          - TGEN enable/disable.
 */
int cprimod_tx_framer_tgen_enable(int unit, int port, uint8 enable);

/*! 
 * cprimod_tx_framer_tgen_offset_set
 *
 * @brief  Tx Framer offset to start TGEN.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  timestamp_offset   - Offset to start TGEN.
 */
int cprimod_tx_framer_tgen_offset_set(int unit, int port, uint64 timestamp_offset);
/*! 
 * cprimod_tx_framer_tgen_offset_get
 *
 * @brief  Tx Framer offset to start TGEN.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  timestamp_offset   - Offset to start TGEN.
 */
int cprimod_tx_framer_tgen_offset_get(int unit, int port, uint64* timestamp_offset);

/*! 
 * cprimod_tx_framer_tgen_next_bfn_set
 *
 * @brief  Tx Framer TGEN next Radio Frame Number (bfn).   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  tgen_bfn        - Next Radio Frame Number.
 */
int cprimod_tx_framer_tgen_next_bfn_set(int unit, int port, uint16 tgen_bfn);
/*! 
 * cprimod_tx_framer_tgen_next_bfn_get
 *
 * @brief  Tx Framer TGEN next Radio Frame Number (bfn).   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  tgen_bfn        - Next Radio Frame Number.
 */
int cprimod_tx_framer_tgen_next_bfn_get(int unit, int port, uint16* tgen_bfn);

/*! 
 * cprimod_tx_framer_tgen_next_hfn_set
 *
 * @brief  Tx Framer TGEN next Hyper Frame Number(HFN).   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  tgen_hfn        - Next Hyper Frame Number.
 */
int cprimod_tx_framer_tgen_next_hfn_set(int unit, int port, uint8 tgen_hfn);
/*! 
 * cprimod_tx_framer_tgen_next_hfn_get
 *
 * @brief  Tx Framer TGEN next Hyper Frame Number(HFN).   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  tgen_hfn        - Next Hyper Frame Number.
 */
int cprimod_tx_framer_tgen_next_hfn_get(int unit, int port, uint8* tgen_hfn);


/*!
 * @enum cprimod_tgen_counter_select_e
 * @brief   Tx Framer TGEN counter Selection.    
 */ 
typedef enum cprimod_tgen_counter_select_e {
    cprimodTgenCounterSelectBfn,
    cprimodTgenCounterSelectHfn,
    cprimodTgenCounterSelectCount
} cprimod_tgen_counter_select_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_tgen_counter_select_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_tgen_counter_select_t validation */
int cprimod_tgen_counter_select_t_validate(cprimod_tgen_counter_select_t cprimod_tgen_counter_select);
/*! 
 * cprimod_tx_framer_tgen_select_counter_set
 *
 * @brief  Tx Framer TGEN Select which counter to use.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  tgen_counter_select   - Select BFN or HFN.
 */
int cprimod_tx_framer_tgen_select_counter_set(int unit, int port, cprimod_tgen_counter_select_t tgen_counter_select);
/*! 
 * cprimod_tx_framer_tgen_select_counter_get
 *
 * @brief  Tx Framer TGEN Select which counter to use.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  tgen_counter_select   - Select BFN or HFN.
 */
int cprimod_tx_framer_tgen_select_counter_get(int unit, int port, cprimod_tgen_counter_select_t* tgen_counter_select);


/*!
 * @enum cprimod_flow_type_e
 * @brief   Flow Type Data or Ctrl.    
 */ 
typedef enum cprimod_flow_type_e {
    cprimodFlowTypeData,
    cprimodFlowTypeCtrl,
    cprimodFlowTypeCount
} cprimod_flow_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_flow_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_flow_type_t validation */
int cprimod_flow_type_t_validate(cprimod_flow_type_t cprimod_flow_type);

/*!
 * @struct cprimod_header_compare_entry_s
 * @brief   Header Compare Entry .  
 */ 
typedef struct cprimod_header_compare_entry_s {
    uint8 valid; /**< Entry is active. */
    uint32 match_data; /**< Entry is active. */
    uint32 mask; /**< Entry is active. */
    uint8 flow_id; /**< Flow ID. */
    cprimod_flow_type_t flow_type; /**< Flow Type Data or Ctrl. */
} cprimod_header_compare_entry_t;

/* cprimod_header_compare_entry_t initialization and validation */
int cprimod_header_compare_entry_t_validate(const cprimod_header_compare_entry_t* cprimod_header_compare_entry);
int cprimod_header_compare_entry_t_init(cprimod_header_compare_entry_t* cprimod_header_compare_entry);

/*! 
 * cprimod_header_compare_entry_add
 *
 * @brief  Header Compare Entry Add.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  compare_entry   - Header Compare Entry.
 */
int cprimod_header_compare_entry_add(int unit, int port, const cprimod_header_compare_entry_t* compare_entry);

/*! 
 * cprimod_header_compare_entry_delete
 *
 * @brief  Header Compare Entry Add.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  compare_entry   - Header Compare Entry.
 */
int cprimod_header_compare_entry_delete(int unit, int port, const cprimod_header_compare_entry_t* compare_entry);


/*!
 * @enum cprimod_transmission_rule_type_e
 * @brief   Modulo Rule Type.    
 */ 
typedef enum cprimod_transmission_rule_type_e {
    cprimodTxRuleTypeData,
    cprimodTxRuleTypeCtrl,
    cprimodTxRuleTypeCount
} cprimod_transmission_rule_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_transmission_rule_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_transmission_rule_type_t validation */
int cprimod_transmission_rule_type_t_validate(cprimod_transmission_rule_type_t cprimod_transmission_rule_type);

/*!
 * @enum cprimod_modulo_rule_mod_e
 * @brief   Modulo Rule Type.    
 */ 
typedef enum cprimod_modulo_rule_mod_e {
    cprimodModuloRuleMod1,
    cprimodModuloRuleMod2,
    cprimodModuloRuleMod4,
    cprimodModuloRuleMod8,
    cprimodModuloRuleMod16,
    cprimodModuloRuleMod32,
    cprimodModuloRuleMod64,
    cprimodModuloRuleModCount
} cprimod_modulo_rule_mod_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_modulo_rule_mod_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_modulo_rule_mod_t validation */
int cprimod_modulo_rule_mod_t_validate(cprimod_modulo_rule_mod_t cprimod_modulo_rule_mod);

/*!
 * @struct cprimod_modulo_rule_entry_s
 * @brief   Modulo Rule Entry .  
 */ 
typedef struct cprimod_modulo_rule_entry_s {
    uint8 active; /**< Entry is active. */
    cprimod_modulo_rule_mod_t modulo_value; /**< Modulo Value. */
    uint8 modulo_index; /**< Modulo Value. */
    uint8 dbm_enable; /**< Dual Bitmap Rule is enable. */
    uint8 flow_dbm_id; /**< Flow Id or DBM profile ID if dbm is enabled. */
    cprimod_flow_type_t flow_type; /**< Flow Type Data or Ctrl. */
} cprimod_modulo_rule_entry_t;

/* cprimod_modulo_rule_entry_t initialization and validation */
int cprimod_modulo_rule_entry_t_validate(const cprimod_modulo_rule_entry_t* cprimod_modulo_rule_entry);
int cprimod_modulo_rule_entry_t_init(cprimod_modulo_rule_entry_t* cprimod_modulo_rule_entry);

/*! 
 * cprimod_modulo_rule_entry_set
 *
 * @brief  Modulo Rule Entry Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  modulo_rule_num   - Modulo Rule Number 0-71 for data 0-15 for control.
 * @param [in]  modulo_rule_type   - Modulo Rule Type, Data or Ctrl.
 * @param [in]  modulo_rule     - Modulo Rule Entry.
 */
int cprimod_modulo_rule_entry_set(int unit, int port, uint8 modulo_rule_num, cprimod_transmission_rule_type_t modulo_rule_type, const cprimod_modulo_rule_entry_t* modulo_rule);
/*! 
 * cprimod_modulo_rule_entry_get
 *
 * @brief  Modulo Rule Entry Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  modulo_rule_num   - Modulo Rule Number 0-71 for data 0-15 for control.
 * @param [in]  modulo_rule_type   - Modulo Rule Type, Data or Ctrl.
 * @param [out]  modulo_rule     - Modulo Rule Entry.
 */
int cprimod_modulo_rule_entry_get(int unit, int port, uint8 modulo_rule_num, cprimod_transmission_rule_type_t modulo_rule_type, cprimod_modulo_rule_entry_t* modulo_rule);


/*!
 * @enum cprimod_dbm_rule_pos_index_e
 * @brief   DBM Rule Position Index.    
 */ 
typedef enum cprimod_dbm_rule_pos_index_e {
    cprimodDbmRulePosIndexStart0,
    cprimodDbmRulePosIndexStart10,
    cprimodDbmRulePosIndexStart20,
    cprimodDbmRulePosIndexStart30,
    cprimodDbmRulePosIndexStart40,
    cprimodDbmRulePosIndexStart50,
    cprimodDbmRulePosIndexStart60,
    cprimodDbmRulePosIndexStart70,
    cprimodDbmRulePosIndexCount
} cprimod_dbm_rule_pos_index_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_dbm_rule_pos_index_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_dbm_rule_pos_index_t validation */
int cprimod_dbm_rule_pos_index_t_validate(cprimod_dbm_rule_pos_index_t cprimod_dbm_rule_pos_index);

/*!
 * @enum cprimod_dbm_rule_pos_grp_size_e
 * @brief   DBM Rule Group Size .    
 */ 
typedef enum cprimod_dbm_rule_pos_grp_size_e {
    cprimodDbmRulePosGrpSize10,
    cprimodDbmRulePosGrpSize20,
    cprimodDbmRulePosGrpSize40,
    cprimodDbmRulePosGrpSize80,
    cprimodDbmRulePosGrpSizeCount
} cprimod_dbm_rule_pos_grp_size_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_dbm_rule_pos_grp_size_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_dbm_rule_pos_grp_size_t validation */
int cprimod_dbm_rule_pos_grp_size_t_validate(cprimod_dbm_rule_pos_grp_size_t cprimod_dbm_rule_pos_grp_size);

/*!
 * @struct cprimod_dbm_rule_entry_s
 * @brief   DBM Rule Entry .  
 */ 
typedef struct cprimod_dbm_rule_entry_s {
    uint8 bm1_mult; /**< Bitmap1 multiple. */
    uint32 bm1[3]; /**< Bitmap1. */
    uint8 bm1_size; /**< Bitmap1 size. */
    uint32 bm2[2]; /**< Bitmap2. */
    uint8 bm2_size; /**< Bitmap2 size. */
    uint8 num_slots; /**< Num of Slots. */
    cprimod_dbm_rule_pos_index_t pos_grp_index; /**< Index to start location of Position Table. */
    cprimod_dbm_rule_pos_grp_size_t pos_grp_size; /**< Position Group Size. */
} cprimod_dbm_rule_entry_t;

/* cprimod_dbm_rule_entry_t initialization and validation */
int cprimod_dbm_rule_entry_t_validate(const cprimod_dbm_rule_entry_t* cprimod_dbm_rule_entry);
int cprimod_dbm_rule_entry_t_init(cprimod_dbm_rule_entry_t* cprimod_dbm_rule_entry);

/*! 
 * cprimod_dual_bitmap_rule_entry_set
 *
 * @brief  Dual Bitmap Rule Entry Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  dbm_rule_num    - Dual Bitmap Rule Number.
 * @param [in]  dbm_rule        - Dual Bitmap Rule Entry.
 */
int cprimod_dual_bitmap_rule_entry_set(int unit, int port, uint8 dbm_rule_num, const cprimod_dbm_rule_entry_t* dbm_rule);
/*! 
 * cprimod_dual_bitmap_rule_entry_get
 *
 * @brief  Dual Bitmap Rule Entry Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  dbm_rule_num    - Dual Bitmap Rule Number.
 * @param [out]  dbm_rule        - Dual Bitmap Rule Entry.
 */
int cprimod_dual_bitmap_rule_entry_get(int unit, int port, uint8 dbm_rule_num, cprimod_dbm_rule_entry_t* dbm_rule);


/*!
 * @struct cprimod_secondary_dbm_rule_entry_s
 * @brief   Secondary DBM Rule Entry .  
 */ 
typedef struct cprimod_secondary_dbm_rule_entry_s {
    uint8 bm1_mult; /**< Bitmap1 multiple. */
    uint8 bm1; /**< Bitmap1. */
    uint8 bm1_size; /**< Bitmap1 size. */
    uint8 bm2; /**< Bitmap2. */
    uint8 bm2_size; /**< Bitmap2 size. */
    uint8 num_slots; /**< Num of Slots. */
} cprimod_secondary_dbm_rule_entry_t;

/* cprimod_secondary_dbm_rule_entry_t initialization and validation */
int cprimod_secondary_dbm_rule_entry_t_validate(const cprimod_secondary_dbm_rule_entry_t* cprimod_secondary_dbm_rule_entry);
int cprimod_secondary_dbm_rule_entry_t_init(cprimod_secondary_dbm_rule_entry_t* cprimod_secondary_dbm_rule_entry);

/*! 
 * cprimod_secondary_dual_bitmap_rule_entry_set
 *
 * @brief  Dual Bitmap Rule Entry Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  dbm_rule_num    - Secondary Dual Bit Map Rule Num.
 * @param [in]  dbm_rule        - Secondary Dual Bitmap Rule Entry.
 */
int cprimod_secondary_dual_bitmap_rule_entry_set(int unit, int port, uint8 dbm_rule_num, const cprimod_secondary_dbm_rule_entry_t* dbm_rule);
/*! 
 * cprimod_secondary_dual_bitmap_rule_entry_get
 *
 * @brief  Dual Bitmap Rule Entry Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  dbm_rule_num    - Secondary Dual Bit Map Rule Num.
 * @param [out]  dbm_rule        - Secondary Dual Bitmap Rule Entry.
 */
int cprimod_secondary_dual_bitmap_rule_entry_get(int unit, int port, uint8 dbm_rule_num, cprimod_secondary_dbm_rule_entry_t* dbm_rule);


/*!
 * @struct cprimod_dbm_pos_table_entry_s
 * @brief   DBM Position Table Entry.  
 */ 
typedef struct cprimod_dbm_pos_table_entry_s {
    uint8 valid; /**< Valid. */
    uint8 flow_id; /**< Flow Id. */
    cprimod_flow_type_t flow_type; /**< Flow Type Data or Ctrl. */
    uint8 index; /**< X slot position , 0 to (Num_slot-1). */
} cprimod_dbm_pos_table_entry_t;

/* cprimod_dbm_pos_table_entry_t initialization and validation */
int cprimod_dbm_pos_table_entry_t_validate(const cprimod_dbm_pos_table_entry_t* cprimod_dbm_pos_table_entry);
int cprimod_dbm_pos_table_entry_t_init(cprimod_dbm_pos_table_entry_t* cprimod_dbm_pos_table_entry);

/*! 
 * cprimod_dbm_position_entry_set
 *
 * @brief  Dual Bitmap Position Table Entry Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Index to Position Table Entry.
 * @param [in]  pos_entry       - DBM Position  Table  Entry.
 */
int cprimod_dbm_position_entry_set(int unit, int port, uint8 index, const cprimod_dbm_pos_table_entry_t* pos_entry);
/*! 
 * cprimod_dbm_position_entry_get
 *
 * @brief  Dual Bitmap Position Table Entry Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - Index to Position Table Entry.
 * @param [out]  pos_entry       - DBM Position  Table  Entry.
 */
int cprimod_dbm_position_entry_get(int unit, int port, uint8 index, cprimod_dbm_pos_table_entry_t* pos_entry);


/*!
 * @enum cprimod_cpri_pcs_mode_e
 * @brief   CPRI PCS mode 8b10b or 64/66b .  
 */ 
typedef enum cprimod_cpri_pcs_mode_e {
    cprimodCpriPcsMode8b10b,
    cprimodCpriPcsMode64b66b,
    cprimodCpriPcsModeCount
} cprimod_cpri_pcs_mode_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_cpri_pcs_mode_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_cpri_pcs_mode_t validation */
int cprimod_cpri_pcs_mode_t_validate(cprimod_cpri_pcs_mode_t cprimod_cpri_pcs_mode);

/*!
 * @enum cprimod_port_speed_e
 * @brief   CPRI speeds .  
 */ 
typedef enum cprimod_port_speed_e {
    cprimodSpd614p4,
    cprimodSpd1228p8,
    cprimodSpd2457p6,
    cprimodSpd3072p0,
    cprimodSpd4915p2,
    cprimodSpd6144p0,
    cprimodSpd8110p08,
    cprimodSpd9830p4,
    cprimodSpd10137p6,
    cprimodSpd12165p12,
    cprimodSpd24330p24,
    cprimodSpdCount
} cprimod_port_speed_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_port_speed_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_port_speed_t validation */
int cprimod_port_speed_t_validate(cprimod_port_speed_t cprimod_port_speed);

/*!
 * @enum cprimod_port_interface_type_e
 * @brief   Port type CPRI/RSVD4 .  
 */ 
typedef enum cprimod_port_interface_type_e {
    cprimodCpri,
    cprimodRsvd4,
    cprimodCount
} cprimod_port_interface_type_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_port_interface_type_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_port_interface_type_t validation */
int cprimod_port_interface_type_t_validate(cprimod_port_interface_type_t cprimod_port_interface_type);

/*!
 * @struct cprimod_port_interface_config_s
 * @brief   Port speed and interface.  
 */ 
typedef struct cprimod_port_interface_config_s {
    cprimod_port_speed_t speed; /**< Speed. */
    cprimod_port_interface_type_t interface; /**< Cpri or other. */
} cprimod_port_interface_config_t;

/* cprimod_port_interface_config_t initialization and validation */
int cprimod_port_interface_config_t_validate(const cprimod_port_interface_config_t* cprimod_port_interface_config);
int cprimod_port_interface_config_t_init(cprimod_port_interface_config_t* cprimod_port_interface_config);


/*!
 * @enum cprimod_port_rsvd4_speed_mult_e
 * @brief   Obsi speed .  
 */ 
typedef enum cprimod_port_rsvd4_speed_mult_e {
    cprimodRsvd4SpdMult4X,
    cprimodRsvd4SpdMult8X,
    cprimodRsvd4SpdMultCount
} cprimod_port_rsvd4_speed_mult_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_port_rsvd4_speed_mult_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_port_rsvd4_speed_mult_t validation */
int cprimod_port_rsvd4_speed_mult_t_validate(cprimod_port_rsvd4_speed_mult_t cprimod_port_rsvd4_speed_mult);

/*!
 * @struct cprimod_port_rsvd4_config_s
 * @brief   Port speed and interface.  
 */ 
typedef struct cprimod_port_rsvd4_config_s {
    cprimod_port_rsvd4_speed_mult_t speed; /**< Speed Mult. */
    cprimod_port_interface_type_t interface; /**< Cpri or other. */
} cprimod_port_rsvd4_config_t;

/* cprimod_port_rsvd4_config_t initialization and validation */
int cprimod_port_rsvd4_config_t_validate(const cprimod_port_rsvd4_config_t* cprimod_port_rsvd4_config);
int cprimod_port_rsvd4_config_t_init(cprimod_port_rsvd4_config_t* cprimod_port_rsvd4_config);

/*! 
 * cprimod_port_rx_interface_config_set
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  config          - Speed and type.
 */
int cprimod_port_rx_interface_config_set(int unit, int port, const cprimod_port_interface_config_t* config);
/*! 
 * cprimod_port_rx_interface_config_get
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  config          - Speed and type.
 */
int cprimod_port_rx_interface_config_get(int unit, int port, cprimod_port_interface_config_t* config);

/*! 
 * cprimod_port_tx_interface_config_set
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  config          - Speed and type.
 */
int cprimod_port_tx_interface_config_set(int unit, int port, const cprimod_port_interface_config_t* config);
/*! 
 * cprimod_port_tx_interface_config_get
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  config          - Speed and type.
 */
int cprimod_port_tx_interface_config_get(int unit, int port, cprimod_port_interface_config_t* config);

/*! 
 * cprimod_port_rsvd4_rx_config_set
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  config          - Speed and type.
 */
int cprimod_port_rsvd4_rx_config_set(int unit, int port, const cprimod_port_rsvd4_config_t* config);
/*! 
 * cprimod_port_rsvd4_rx_config_get
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  config          - Speed and type.
 */
int cprimod_port_rsvd4_rx_config_get(int unit, int port, cprimod_port_rsvd4_config_t* config);

/*! 
 * cprimod_port_rsvd4_tx_config_set
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  config          - Speed and type.
 */
int cprimod_port_rsvd4_tx_config_set(int unit, int port, const cprimod_port_rsvd4_config_t* config);
/*! 
 * cprimod_port_rsvd4_tx_config_get
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  config          - Speed and type.
 */
int cprimod_port_rsvd4_tx_config_get(int unit, int port, cprimod_port_rsvd4_config_t* config);


/*!
 * @enum cprimod_rsvd4_rx_config_field_e
 * @brief   Rsvd4 Rx PCS config .  
 */ 
typedef enum cprimod_rsvd4_rx_config_field_e {
    cprimodRsvd4RxConfigDescrambleEnable,
    cprimodRsvd4RxConfigSyncThreshold,
    cprimodRsvd4RxConfigUnsyncThreshold,
    cprimodRsvd4RxConfigFrameSyncThreshold,
    cprimodRsvd4RxConfigFrameUnsyncThreshold,
    cprimodRsvd4RxConfigBlockSize,
    cprimodRsvd4RxConfigCount
} cprimod_rsvd4_rx_config_field_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rsvd4_rx_config_field_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rsvd4_rx_config_field_t validation */
int cprimod_rsvd4_rx_config_field_t_validate(cprimod_rsvd4_rx_config_field_t cprimod_rsvd4_rx_config_field);

/*!
 * @enum cprimod_rx_config_field_e
 * @brief   CPRI Rx PCS config .  
 */ 
typedef enum cprimod_rx_config_field_e {
    cprimodRxConfig8b10bAllowSeedChange,
    cprimodRxConfig8b10bDescrHw,
    cprimodRxConfig8b10bDescrEn,
    cprimodRxConfiglinkAcqSwMode,
    cprimodRxConfig64b66bLosOption,
    cprimodRxConfig8b10bForceCommaAlignEn,
    cprimodRxConfig64b66bBerWindowLimit,
    cprimodRxConfig64b66bBerLimit,
    cprimodRxConfigtestMode,
    cprimodRxConfig64b66bInvalidShCnt,
    cprimodRxConfig64b66bValidShCnt,
    cprimodRxConfigCount
} cprimod_rx_config_field_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rx_config_field_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rx_config_field_t validation */
int cprimod_rx_config_field_t_validate(cprimod_rx_config_field_t cprimod_rx_config_field);

/*!
 * @enum cprimod_rsvd4_rx_fsm_state_e
 * @brief   Rsvd4 Rx Pcs state .  
 */ 
typedef enum cprimod_rsvd4_rx_fsm_state_e {
    cprimodRsvd4RxFsmStateUnsync,
    cprimodRsvd4RxFsmStateWaitForSeed,
    cprimodRsvd4RxFsmStateWaitForK28p7Idles,
    cprimodRsvd4RxFsmStateWaitForFrameSync,
    cprimodRsvd4RxFsmStateFrameSync,
    cprimodRsvd4RxFsmStateCount
} cprimod_rsvd4_rx_fsm_state_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rsvd4_rx_fsm_state_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rsvd4_rx_fsm_state_t validation */
int cprimod_rsvd4_rx_fsm_state_t_validate(cprimod_rsvd4_rx_fsm_state_t cprimod_rsvd4_rx_fsm_state);

/*!
 * @enum cprimod_rsvd4_rx_overide_e
 * @brief   Rsvd4 Rx overide HW .  
 */ 
typedef enum cprimod_rsvd4_rx_overide_e {
    cprimodRsvd4RxOverideFrameUnsyncTInvldMgRecvd,
    cprimodRsvd4RxOverideFrameSyncTVldMgRecvd,
    cprimodRsvd4RxOverideKMgIdlesRecvd,
    cprimodRsvd4RxOverideIdleReqRecvd,
    cprimodRsvd4RxOverideIdleAckRecvd,
    cprimodRsvd4RxOverideSeedCapAndVerifyDone,
    cprimodRsvd4RxOverideCount
} cprimod_rsvd4_rx_overide_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rsvd4_rx_overide_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rsvd4_rx_overide_t validation */
int cprimod_rsvd4_rx_overide_t_validate(cprimod_rsvd4_rx_overide_t cprimod_rsvd4_rx_overide);

/*!
 * @enum cprimod_rsvd4_tx_config_field_e
 * @brief   Rsvd4 Tx PCS config .  
 */ 
typedef enum cprimod_rsvd4_tx_config_field_e {
    cprimodRsvd4TxConfigForceOffState,
    cprimodRsvd4TxConfigAckT,
    cprimodRsvd4TxConfigForceIdleAck,
    cprimodRsvd4TxConfigLosEnable,
    cprimodRsvd4TxConfigScrambleEnable,
    cprimodRsvd4TxConfigScramblerSeed,
    cprimodRsvd4TxConfigTransmitterEnable,
    cprimodRsvd4TxConfigCount
} cprimod_rsvd4_tx_config_field_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rsvd4_tx_config_field_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rsvd4_tx_config_field_t validation */
int cprimod_rsvd4_tx_config_field_t_validate(cprimod_rsvd4_tx_config_field_t cprimod_rsvd4_tx_config_field);

/*!
 * @enum cprimod_tx_config_field_e
 * @brief   CPRI Tx PCS config .  
 */ 
typedef enum cprimod_tx_config_field_e {
    cprimodTxConfigagnosticMode,
    cprimodTxConfigtxpmdDisableOverrideVal,
    cprimodTxConfigtxpmdDisableOverrideEn,
    cprimodTxConfigseed8B10B,
    cprimodTxConfigscrambleBypass,
    cprimodTxConfigseed8b10b,
    cprimodTxConfigcwaScrEn8b10b,
    cprimodTxConfigCount
} cprimod_tx_config_field_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_tx_config_field_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_tx_config_field_t validation */
int cprimod_tx_config_field_t_validate(cprimod_tx_config_field_t cprimod_tx_config_field);

/*!
 * @enum cprimod_rsvd4_tx_fsm_state_e
 * @brief   Rsvd4 Tx Pcs state .  
 */ 
typedef enum cprimod_rsvd4_tx_fsm_state_e {
    cprimodRsvd4TxFsmStateOff,
    cprimodRsvd4TxFsmStateIdle,
    cprimodRsvd4TxFsmStateIdleReq,
    cprimodRsvd4TxFsmStateIdleAck,
    cprimodRsvd4TxFsmStateFrameTx,
    cprimodRsvd4TxFsmStateCount
} cprimod_rsvd4_tx_fsm_state_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rsvd4_tx_fsm_state_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rsvd4_tx_fsm_state_t validation */
int cprimod_rsvd4_tx_fsm_state_t_validate(cprimod_rsvd4_tx_fsm_state_t cprimod_rsvd4_tx_fsm_state);

/*!
 * @enum cprimod_rsvd4_tx_overide_e
 * @brief   Rsvd4 Tx overide HW .  
 */ 
typedef enum cprimod_rsvd4_tx_overide_e {
    cprimodRsvd4TxOverideStartTx,
    cprimodRsvd4TxOverideRxPcsAckCap,
    cprimodRsvd4TxOverideRxPcsIdleReq,
    cprimodRsvd4TxOverideRxPcsScrLock,
    cprimodRsvd4TxOverideLosStauts,
    cprimodRsvd4TxOverideCount
} cprimod_rsvd4_tx_overide_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rsvd4_tx_overide_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rsvd4_tx_overide_t validation */
int cprimod_rsvd4_tx_overide_t_validate(cprimod_rsvd4_tx_overide_t cprimod_rsvd4_tx_overide);

/*!
 * @enum cprimod_rx_pcs_status_e
 * @brief   Rx PCS status.  
 */ 
typedef enum cprimod_rx_pcs_status_e {
    cprimodRxPcsStatusLinkStatusLive,
    cprimodRxPcsStatusSeedLocked,
    cprimodRxPcsStatusSeedVector,
    cprimodRxPcsStatusLosLive,
    cprimodRxPcsStatus64b66bHiBerLive,
    cprimodRxPcsStatus64b66bBlockLockLive,
    cprimodRxPcsStatusCount
} cprimod_rx_pcs_status_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_rx_pcs_status_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_rx_pcs_status_t validation */
int cprimod_rx_pcs_status_t_validate(cprimod_rx_pcs_status_t cprimod_rx_pcs_status);
/*! 
 * cprimod_port_rx_frame_optional_config_set
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  field           - Optionbal config.
 * @param [in]  value           - CPRI PCS config.
 */
int cprimod_port_rx_frame_optional_config_set(int unit, int port, cprimod_rx_config_field_t field, int value);
/*! 
 * cprimod_port_rx_frame_optional_config_get
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  field           - Optionbal config.
 * @param [out]  value           - CPRI PCS config.
 */
int cprimod_port_rx_frame_optional_config_get(int unit, int port, cprimod_rx_config_field_t field, int* value);

/*! 
 * cprimod_port_tx_frame_optional_config_set
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  field           - Optionbal config.
 * @param [in]  value           - CPRI PCS config.
 */
int cprimod_port_tx_frame_optional_config_set(int unit, int port, cprimod_tx_config_field_t field, uint32 value);
/*! 
 * cprimod_port_tx_frame_optional_config_get
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  field           - Optionbal config.
 * @param [out]  value           - CPRI PCS config.
 */
int cprimod_port_tx_frame_optional_config_get(int unit, int port, cprimod_tx_config_field_t field, uint32* value);

/*! 
 * cprimod_port_rsvd4_rx_frame_optional_config_set
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  field           - Optionbal config.
 * @param [in]  value           - RSVD4 PCS config.
 */
int cprimod_port_rsvd4_rx_frame_optional_config_set(int unit, int port, cprimod_rsvd4_rx_config_field_t field, int value);
/*! 
 * cprimod_port_rsvd4_rx_frame_optional_config_get
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  field           - Optionbal config.
 * @param [out]  value           - RSVD4 PCS config.
 */
int cprimod_port_rsvd4_rx_frame_optional_config_get(int unit, int port, cprimod_rsvd4_rx_config_field_t field, int* value);

/*! 
 * cprimod_port_rsvd4_rx_speed_set
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  speed           - RSVD4 PCS config.
 */
int cprimod_port_rsvd4_rx_speed_set(int unit, int port, cprimod_port_rsvd4_speed_mult_t speed);
/*! 
 * cprimod_port_rsvd4_rx_speed_get
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  speed           - RSVD4 PCS config.
 */
int cprimod_port_rsvd4_rx_speed_get(int unit, int port, cprimod_port_rsvd4_speed_mult_t* speed);

/*! 
 * cprimod_port_rsvd4_tx_speed_set
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  speed           - RSVD4 PCS config.
 */
int cprimod_port_rsvd4_tx_speed_set(int unit, int port, cprimod_port_rsvd4_speed_mult_t speed);
/*! 
 * cprimod_port_rsvd4_tx_speed_get
 *
 * @brief  Rx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  speed           - RSVD4 PCS config.
 */
int cprimod_port_rsvd4_tx_speed_get(int unit, int port, cprimod_port_rsvd4_speed_mult_t* speed);

/*! 
 * cprimod_port_rsvd4_rx_fsm_state_set
 *
 * @brief  Speed and interface Set.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  state           - Optionbal config.
 */
int cprimod_port_rsvd4_rx_fsm_state_set(int unit, int port, cprimod_rsvd4_rx_fsm_state_t state);
/*! 
 * cprimod_port_rsvd4_rx_fsm_state_get
 *
 * @brief  Speed and interface Set.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  state           - Optionbal config.
 */
int cprimod_port_rsvd4_rx_fsm_state_get(int unit, int port, cprimod_rsvd4_rx_fsm_state_t* state);

/*! 
 * cprimod_port_rsvd4_rx_overide_set
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  parameter       - overide param.
 * @param [in]  enable          - overide enable.
 * @param [in]  value           - overide value.
 */
int cprimod_port_rsvd4_rx_overide_set(int unit, int port, cprimod_rsvd4_rx_overide_t parameter, int enable, int value);
/*! 
 * cprimod_port_rsvd4_rx_overide_get
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  parameter       - overide param.
 * @param [out]  enable          - overide enable.
 * @param [out]  value           - overide value.
 */
int cprimod_port_rsvd4_rx_overide_get(int unit, int port, cprimod_rsvd4_rx_overide_t parameter, int* enable, int* value);

/*! 
 * cprimod_port_rsvd4_tx_frame_optional_config_set
 *
 * @brief  tx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  field           - Optionbal config.
 * @param [in]  value           - RSVD4 PCS config.
 */
int cprimod_port_rsvd4_tx_frame_optional_config_set(int unit, int port, cprimod_rsvd4_tx_config_field_t field, int value);
/*! 
 * cprimod_port_rsvd4_tx_frame_optional_config_get
 *
 * @brief  tx optional config Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  field           - Optionbal config.
 * @param [out]  value           - RSVD4 PCS config.
 */
int cprimod_port_rsvd4_tx_frame_optional_config_get(int unit, int port, cprimod_rsvd4_tx_config_field_t field, int* value);

/*! 
 * cprimod_port_rsvd4_tx_fsm_state_set
 *
 * @brief  Speed and interface Set.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  state           - Optionbal config.
 */
int cprimod_port_rsvd4_tx_fsm_state_set(int unit, int port, cprimod_rsvd4_tx_fsm_state_t state);
/*! 
 * cprimod_port_rsvd4_tx_fsm_state_get
 *
 * @brief  Speed and interface Set.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  state           - Optionbal config.
 */
int cprimod_port_rsvd4_tx_fsm_state_get(int unit, int port, cprimod_rsvd4_tx_fsm_state_t* state);

/*! 
 * cprimod_port_rsvd4_tx_overide_set
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  parameter       - overide param.
 * @param [in]  enable          - overide enable.
 * @param [in]  value           - overide value.
 */
int cprimod_port_rsvd4_tx_overide_set(int unit, int port, cprimod_rsvd4_tx_overide_t parameter, int enable, int value);
/*! 
 * cprimod_port_rsvd4_tx_overide_get
 *
 * @brief  Speed and interface Set/Get.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  parameter       - overide param.
 * @param [out]  enable          - overide enable.
 * @param [out]  value           - overide value.
 */
int cprimod_port_rsvd4_tx_overide_get(int unit, int port, cprimod_rsvd4_tx_overide_t parameter, int* enable, int* value);

/*! 
 * cprimod_port_rx_pcs_status_get
 *
 * @brief  Speed and interface Set.   
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  status          - Optionbal config.
 * @param [out]  value           - Rx PCS status.
 */
int cprimod_port_rx_pcs_status_get(int unit, int port, cprimod_rx_pcs_status_t status, uint32* value);


/*!
 * @struct cprimod_polarity_s
 * @brief Polarity bitmaps. The bitmap refers to number of lanes in access structure. 
            For example if the structure contains 2 lanes (at any position), two first bits of these bitmaps are relevant. 
 */ 
typedef struct cprimod_polarity_s {
    uint32_t rx_polarity; /**< TX polarity bitmap */
    uint32_t tx_polarity; /**< RX polarity bitmap */
} cprimod_polarity_t;

/* cprimod_polarity_t initialization and validation */
int cprimod_polarity_t_validate(const cprimod_polarity_t* cprimod_polarity);
int cprimod_polarity_t_init(cprimod_polarity_t* cprimod_polarity);


/*!
 * @struct cprimod_lane_map_s
 * @brief Core information 
 */ 
typedef struct cprimod_lane_map_s {
    uint32_t num_of_lanes; /**< Number of elements in lane_map_rx/tx arrays */
    uint32_t lane_map_rx[CPRIMOD_MAX_LANES_PER_CORE]; /**< lane_map_rx[x]=y means that rx lane x is mapped to rx lane y */
    uint32_t lane_map_tx[CPRIMOD_MAX_LANES_PER_CORE]; /**< lane_map_tx[x]=y means that tx lane x is mapped to tx lane y */
} cprimod_lane_map_t;

/* cprimod_lane_map_t initialization and validation */
int cprimod_lane_map_t_validate(const cprimod_lane_map_t* cprimod_lane_map);
int cprimod_lane_map_t_init(cprimod_lane_map_t* cprimod_lane_map);


/*!
 * @struct cprimod_firmware_core_config_s
 * @brief Firmware core config 
 */ 
typedef struct cprimod_firmware_core_config_s {
    uint32_t CoreConfigFromPCS;
    uint32_t VcoRate; /**< vco rate */
    uint32_t disable_write_pll_iqp; /**< When 1 ucode will not update pll_iqp */
} cprimod_firmware_core_config_t;

/* cprimod_firmware_core_config_t initialization and validation */
int cprimod_firmware_core_config_t_validate(const cprimod_firmware_core_config_t* cprimod_firmware_core_config);
int cprimod_firmware_core_config_t_init(cprimod_firmware_core_config_t* cprimod_firmware_core_config);

/*! 
 * cprimod_firmware_loader_f
 *
 * @brief function definition for firmware loading 
 *
 * @param [in]  core            - core access
 * @param [in]  length          - Firmware length
 * @param [in]  data            - Frimware data
 */
typedef int (*cprimod_firmware_loader_f)(const phymod_core_access_t* core, uint32_t length, const uint8_t* data);


/*!
 * @enum cprimod_firmware_load_force_e
 * @brief Firmware load force 
 */ 
typedef enum cprimod_firmware_load_force_e {
    cprimodFirmwareLoadSkip = 0, /**< Skip load FW */
    cprimodFirmwareLoadForce, /**< Force load FW */
    cprimodFirmwareLoadAuto, /**< Auto load FW in case of firmware change */
    cprimodFirmwareLoadCount
} cprimod_firmware_load_force_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_firmware_load_force_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_firmware_load_force_t validation */
int cprimod_firmware_load_force_t_validate(cprimod_firmware_load_force_t cprimod_firmware_load_force);

/*!
 * @enum cprimod_firmware_load_method_e
 * @brief Firmware load method 
 */ 
typedef enum cprimod_firmware_load_method_e {
    cprimodFirmwareLoadMethodNone = 0, /**< Don't load FW */
    cprimodFirmwareLoadMethodInternal, /**< Load FW internaly */
    cprimodFirmwareLoadMethodExternal, /**< Load FW by a given function */
    cprimodFirmwareLoadMethodProgEEPROM, /**< Program EEPROM */
    cprimodFirmwareLoadMethodCount
} cprimod_firmware_load_method_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_firmware_load_method_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_firmware_load_method_t validation */
int cprimod_firmware_load_method_t_validate(cprimod_firmware_load_method_t cprimod_firmware_load_method);
/*! 
 * @brief Core init flags 
 */ 
#define CPRIMOD_CORE_INIT_F_UNTIL_FW_LOAD 0x1 /**< Run init sequence until FW load stage (without loading FW) */
#define CPRIMOD_CORE_INIT_F_RESUME_AFTER_FW_LOAD 0x2 /**< Run init sequence from FW loading stage (without loading FW) */
#define CPRIMOD_CORE_INIT_F_FIRMWARE_LOAD_VERIFY 0x4 /**< Verify FW loaded correctly */
#define CPRIMOD_CORE_INIT_F_EXECUTE_PASS1 0x8 /**< core init state pass1 */
#define CPRIMOD_CORE_INIT_F_EXECUTE_PASS2 0x10 /**< core init state pass2 */
#define CPRIMOD_CORE_INIT_F_BYPASS_CRC_CHECK 0x20 /**< by pass crc check */
#define CPRIMOD_CORE_INIT_F_FW_FORCE_DOWNLOAD 0x40 /**< force the FW download */
#define CPRIMOD_CORE_INIT_F_EXECUTE_FW_LOAD 0x80 /**< Perform the firmware load */
#define CPRIMOD_CORE_INIT_F_RESET_CORE_FOR_FW_LOAD 0x100 /**< Reset Core for F/W Load */
#define CPRIMOD_CORE_INIT_F_FW_LOAD_END 0x200 /**< Firmware load end */
#define CPRIMOD_CORE_INIT_F_FW_AUTO_DOWNLOAD 0x400 /**< force the FW download */

#define CPRIMOD_CORE_INIT_F_UNTIL_FW_LOAD_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_UNTIL_FW_LOAD)
#define CPRIMOD_CORE_INIT_F_RESUME_AFTER_FW_LOAD_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_RESUME_AFTER_FW_LOAD)
#define CPRIMOD_CORE_INIT_F_FIRMWARE_LOAD_VERIFY_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_FIRMWARE_LOAD_VERIFY)
#define CPRIMOD_CORE_INIT_F_EXECUTE_PASS1_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_EXECUTE_PASS1)
#define CPRIMOD_CORE_INIT_F_EXECUTE_PASS2_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_EXECUTE_PASS2)
#define CPRIMOD_CORE_INIT_F_BYPASS_CRC_CHECK_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_BYPASS_CRC_CHECK)
#define CPRIMOD_CORE_INIT_F_FW_FORCE_DOWNLOAD_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_FW_FORCE_DOWNLOAD)
#define CPRIMOD_CORE_INIT_F_EXECUTE_FW_LOAD_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_EXECUTE_FW_LOAD)
#define CPRIMOD_CORE_INIT_F_RESET_CORE_FOR_FW_LOAD_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_RESET_CORE_FOR_FW_LOAD)
#define CPRIMOD_CORE_INIT_F_FW_LOAD_END_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_FW_LOAD_END)
#define CPRIMOD_CORE_INIT_F_FW_AUTO_DOWNLOAD_SET(conf) ((conf)->flags |= CPRIMOD_CORE_INIT_F_FW_AUTO_DOWNLOAD)

#define CPRIMOD_CORE_INIT_F_UNTIL_FW_LOAD_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_UNTIL_FW_LOAD)
#define CPRIMOD_CORE_INIT_F_RESUME_AFTER_FW_LOAD_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_RESUME_AFTER_FW_LOAD)
#define CPRIMOD_CORE_INIT_F_FIRMWARE_LOAD_VERIFY_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_FIRMWARE_LOAD_VERIFY)
#define CPRIMOD_CORE_INIT_F_EXECUTE_PASS1_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_EXECUTE_PASS1)
#define CPRIMOD_CORE_INIT_F_EXECUTE_PASS2_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_EXECUTE_PASS2)
#define CPRIMOD_CORE_INIT_F_BYPASS_CRC_CHECK_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_BYPASS_CRC_CHECK)
#define CPRIMOD_CORE_INIT_F_FW_FORCE_DOWNLOAD_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_FW_FORCE_DOWNLOAD)
#define CPRIMOD_CORE_INIT_F_EXECUTE_FW_LOAD_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_EXECUTE_FW_LOAD)
#define CPRIMOD_CORE_INIT_F_RESET_CORE_FOR_FW_LOAD_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_RESET_CORE_FOR_FW_LOAD)
#define CPRIMOD_CORE_INIT_F_FW_LOAD_END_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_FW_LOAD_END)
#define CPRIMOD_CORE_INIT_F_FW_AUTO_DOWNLOAD_CLR(conf) ((conf)->flags &= ~CPRIMOD_CORE_INIT_F_FW_AUTO_DOWNLOAD)

#define CPRIMOD_CORE_INIT_F_UNTIL_FW_LOAD_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_UNTIL_FW_LOAD ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_RESUME_AFTER_FW_LOAD_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_RESUME_AFTER_FW_LOAD ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_FIRMWARE_LOAD_VERIFY_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_FIRMWARE_LOAD_VERIFY ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_EXECUTE_PASS1_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_EXECUTE_PASS1 ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_EXECUTE_PASS2_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_EXECUTE_PASS2 ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_BYPASS_CRC_CHECK_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_BYPASS_CRC_CHECK ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_FW_FORCE_DOWNLOAD_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_FW_FORCE_DOWNLOAD ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_EXECUTE_FW_LOAD_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_EXECUTE_FW_LOAD ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_RESET_CORE_FOR_FW_LOAD_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_RESET_CORE_FOR_FW_LOAD ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_FW_LOAD_END_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_FW_LOAD_END ? 1 : 0)
#define CPRIMOD_CORE_INIT_F_FW_AUTO_DOWNLOAD_GET(conf) ((conf)->flags & CPRIMOD_CORE_INIT_F_FW_AUTO_DOWNLOAD ? 1 : 0)


/*!
 * @enum cprimod_tx_input_voltage_e
 * @brief Tx input voltage 
 */ 
typedef enum cprimod_tx_input_voltage_e {
    cprimodTxInputVoltageDefault = 0, /**< Default */
    cprimodTxInputVoltage1p00, /**< Tx input voltage as 1.00v */
    cprimodTxInputVoltage1p25, /**< Tx input voltage as 1.25v */
    cprimodTxInputVoltageCount
} cprimod_tx_input_voltage_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_tx_input_voltage_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_tx_input_voltage_t validation */
int cprimod_tx_input_voltage_t_validate(cprimod_tx_input_voltage_t cprimod_tx_input_voltage);

/*!
 * @struct cprimod_afe_pll_s
 * @brief AFE/PLL related parameter 
 */ 
typedef struct cprimod_afe_pll_s {
    uint32_t afe_pll_change_default; /**< If 1 change AFE/PLL reg */
    uint32_t ams_pll_iqp;
    uint32_t ams_pll_en_hrz;
} cprimod_afe_pll_t;

/* cprimod_afe_pll_t initialization and validation */
int cprimod_afe_pll_t_validate(const cprimod_afe_pll_t* cprimod_afe_pll);
int cprimod_afe_pll_t_init(cprimod_afe_pll_t* cprimod_afe_pll);


/*!
 * @struct cprimod_pll_parm_s
 * @brief AFE/PLL related parameter 
 */ 
typedef struct cprimod_pll_parm_s {
    uint32_t change_pll;
    uint32_t vcoRate;
    int div2;
    int div4;
    cprimod_afe_pll_t afe_pll; /**< PMD config for PLL */
} cprimod_pll_parm_t;

/* cprimod_pll_parm_t initialization and validation */
int cprimod_pll_parm_t_validate(const cprimod_pll_parm_t* cprimod_pll_parm);
int cprimod_pll_parm_t_init(cprimod_pll_parm_t* cprimod_pll_parm);

typedef struct cprimod_core_init_config_s {
    cprimod_lane_map_t lane_map;
    cprimod_firmware_load_method_t firmware_load_method;
    cprimod_firmware_loader_f firmware_loader;
    cprimod_firmware_core_config_t firmware_core_config;
    uint32_t flags; /**< init flags */
    cprimod_tx_input_voltage_t tx_input_voltage; /**< Tx input voltage */
    cprimod_pll_parm_t pll0; /**< AFE/PLL register value */
    cprimod_pll_parm_t pll1; /**< AFE/PLL register value */
    uint8_t trcvr_host_managed;
} cprimod_core_init_config_t;

/* cprimod_core_init_config_t initialization and validation */
int cprimod_core_init_config_t_validate(const cprimod_core_init_config_t* cprimod_core_init_config);
int cprimod_core_init_config_t_init(cprimod_core_init_config_t* cprimod_core_init_config);

typedef struct cprimod_core_status_s {
    uint32_t pmd_active;
} cprimod_core_status_t;

/* cprimod_core_status_t initialization and validation */
int cprimod_core_status_t_validate(const cprimod_core_status_t* cprimod_core_status);
int cprimod_core_status_t_init(cprimod_core_status_t* cprimod_core_status);

/*! 
 * cprimod_core_init
 *
 * @brief Core Initialization 
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  phy             - phy access for PMD
 * @param [in]  init_config     - 
 * @param [out]  core_status     - 
 */
int cprimod_core_init(int unit, int port, const phymod_core_access_t* phy, const phymod_core_init_config_t* init_config, phymod_core_status_t* core_status);


/*!
 * @struct cprimod_port_init_config_s
 * @brief port config information. 
 */ 
typedef struct cprimod_port_init_config_s {
    int polarity;
    cprimod_port_interface_type_t interface;
    cprimod_port_speed_t tx_cpri_speed;
    cprimod_port_speed_t rx_cpri_speed;
    cprimod_port_rsvd4_speed_mult_t tx_rsvd4_speed;
    cprimod_port_rsvd4_speed_mult_t rx_rsvd4_speed;
    int roe_stuffing_bit; /**< 1bit value for Stuffing bit */
    int roe_reserved_bit; /**< 1bit value for Reserved bit */
} cprimod_port_init_config_t;

/* cprimod_port_init_config_t initialization and validation */
int cprimod_port_init_config_t_validate(const cprimod_port_init_config_t* cprimod_port_init_config);
int cprimod_port_init_config_t_init(cprimod_port_init_config_t* cprimod_port_init_config);

/*! 
 * cprimod_port_init
 *
 * @brief Core Initialization 
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  phy             - phy access for PMD
 * @param [in]  port_config     - 
 */
int cprimod_port_init(int unit, int port, const phymod_phy_access_t* phy, const cprimod_port_init_config_t* port_config);

/*! 
 * cprimod_rsvd4_rx_master_frame_sync_config_set
 *
 * @brief Set/Get Rx Master Frame Synchronizaiton  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  master_frame_number   - Master Frame Number when start countng.
 * @param [in]  master_frame_start_time   - Maser Frame Time to start count.
 */
int cprimod_rsvd4_rx_master_frame_sync_config_set(int unit, int port, uint32 master_frame_number, uint64 master_frame_start_time);
/*! 
 * cprimod_rsvd4_rx_master_frame_sync_config_get
 *
 * @brief Set/Get Rx Master Frame Synchronizaiton  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  master_frame_number   - Master Frame Number when start countng.
 * @param [out]  master_frame_start_time   - Master Frame Time to start count.
 */
int cprimod_rsvd4_rx_master_frame_sync_config_get(int unit, int port, uint32* master_frame_number, uint64* master_frame_start_time);

/*! 
 * cprimod_cpri_rx_control_word_sync_info_get
 *
 * @brief  Get CPRI Frame Sync information from control.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  basic_frame_num   - Basic Frame Number.
 * @param [out]  hyper_frame_num   - Hyper Frame Number Z.64.0.
 * @param [out]  radio_frame_num   - Radio Frame Number Z.192.0 Z.128.0.
 */
int cprimod_cpri_rx_control_word_sync_info_get(int unit, int port, uint32* basic_frame_num, uint32* hyper_frame_num, uint32* radio_frame_num);

typedef _shr_cpri_cw_l1_protocol_info_t cprimod_cpri_cw_l1_protocol_info_t;

/*! 
 * cprimod_cpri_rx_control_word_l1_signal_info_get
 *
 * @brief  Get CPRI Control Word L1 Signal Information.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  l1_info         - CPRI Control Word L1 Signal info.
 */
int cprimod_cpri_rx_control_word_l1_signal_info_get(int unit, int port, cprimod_cpri_cw_l1_protocol_info_t* l1_info);

/*! 
 * @brief L1 Signal Map 
 */ 
#define CPRIMOD_L1_SIGNAL_LOF 0x1 /**< Loss of Frame */
#define CPRIMOD_L1_SIGNAL_LOS 0x2 /**< Loss of Signal */
#define CPRIMOD_L1_SIGNAL_SDI 0x4 /**< SAP Defect Indication */
#define CPRIMOD_L1_SIGNAL_RAI 0x8 /**< Remote Alarm Indication */
#define CPRIMOD_L1_SIGNAL_RESET 0x10 /**< Reset Reqeust/Acknowledge */
#define CPRIMOD_L1_SIGNAL_ETH_PTR 0x20 /**< Fast Ethernet Pointer */
#define CPRIMOD_L1_SIGNAL_HDLC_RATE 0x40 /**< HDLC rate */
#define CPRIMOD_L1_SIGNAL_PROT_VER 0x80 /**< Protection Version */

#define CPRIMOD_L1_SIGNAL_LOF_SET(flags) (flags |= CPRIMOD_L1_SIGNAL_LOF)
#define CPRIMOD_L1_SIGNAL_LOS_SET(flags) (flags |= CPRIMOD_L1_SIGNAL_LOS)
#define CPRIMOD_L1_SIGNAL_SDI_SET(flags) (flags |= CPRIMOD_L1_SIGNAL_SDI)
#define CPRIMOD_L1_SIGNAL_RAI_SET(flags) (flags |= CPRIMOD_L1_SIGNAL_RAI)
#define CPRIMOD_L1_SIGNAL_RESET_SET(flags) (flags |= CPRIMOD_L1_SIGNAL_RESET)
#define CPRIMOD_L1_SIGNAL_ETH_PTR_SET(flags) (flags |= CPRIMOD_L1_SIGNAL_ETH_PTR)
#define CPRIMOD_L1_SIGNAL_HDLC_RATE_SET(flags) (flags |= CPRIMOD_L1_SIGNAL_HDLC_RATE)
#define CPRIMOD_L1_SIGNAL_PROT_VER_SET(flags) (flags |= CPRIMOD_L1_SIGNAL_PROT_VER)

#define CPRIMOD_L1_SIGNAL_LOF_CLR(flags) (flags &= ~CPRIMOD_L1_SIGNAL_LOF)
#define CPRIMOD_L1_SIGNAL_LOS_CLR(flags) (flags &= ~CPRIMOD_L1_SIGNAL_LOS)
#define CPRIMOD_L1_SIGNAL_SDI_CLR(flags) (flags &= ~CPRIMOD_L1_SIGNAL_SDI)
#define CPRIMOD_L1_SIGNAL_RAI_CLR(flags) (flags &= ~CPRIMOD_L1_SIGNAL_RAI)
#define CPRIMOD_L1_SIGNAL_RESET_CLR(flags) (flags &= ~CPRIMOD_L1_SIGNAL_RESET)
#define CPRIMOD_L1_SIGNAL_ETH_PTR_CLR(flags) (flags &= ~CPRIMOD_L1_SIGNAL_ETH_PTR)
#define CPRIMOD_L1_SIGNAL_HDLC_RATE_CLR(flags) (flags &= ~CPRIMOD_L1_SIGNAL_HDLC_RATE)
#define CPRIMOD_L1_SIGNAL_PROT_VER_CLR(flags) (flags &= ~CPRIMOD_L1_SIGNAL_PROT_VER)

#define CPRIMOD_L1_SIGNAL_LOF_GET(flags) (flags & CPRIMOD_L1_SIGNAL_LOF ? 1 : 0)
#define CPRIMOD_L1_SIGNAL_LOS_GET(flags) (flags & CPRIMOD_L1_SIGNAL_LOS ? 1 : 0)
#define CPRIMOD_L1_SIGNAL_SDI_GET(flags) (flags & CPRIMOD_L1_SIGNAL_SDI ? 1 : 0)
#define CPRIMOD_L1_SIGNAL_RAI_GET(flags) (flags & CPRIMOD_L1_SIGNAL_RAI ? 1 : 0)
#define CPRIMOD_L1_SIGNAL_RESET_GET(flags) (flags & CPRIMOD_L1_SIGNAL_RESET ? 1 : 0)
#define CPRIMOD_L1_SIGNAL_ETH_PTR_GET(flags) (flags & CPRIMOD_L1_SIGNAL_ETH_PTR ? 1 : 0)
#define CPRIMOD_L1_SIGNAL_HDLC_RATE_GET(flags) (flags & CPRIMOD_L1_SIGNAL_HDLC_RATE ? 1 : 0)
#define CPRIMOD_L1_SIGNAL_PROT_VER_GET(flags) (flags & CPRIMOD_L1_SIGNAL_PROT_VER ? 1 : 0)

/*! 
 * cprimod_cpri_rx_control_word_l1_signal_signal_protection_set
 *
 * @brief  Get/Set CPRI Control Word L1 Signal Protection Enable.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  signal_map      - Signal Map Flags, User CPRIMOD_L1_SIGNAL_....
 * @param [in]  enable          - Enable or Disable.
 */
int cprimod_cpri_rx_control_word_l1_signal_signal_protection_set(int unit, int port, uint32 signal_map, uint32 enable);
/*! 
 * cprimod_cpri_rx_control_word_l1_signal_signal_protection_get
 *
 * @brief  Get/Set CPRI Control Word L1 Signal Protection Enable.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  signal_map      - Signal Map Flags, User CPRIMOD_L1_SIGNAL_....
 * @param [out]  enable          - Enable/Disable Map.
 */
int cprimod_cpri_rx_control_word_l1_signal_signal_protection_get(int unit, int port, uint32 signal_map, uint32* enable);


/*!
 * @enum cprimod_hdlc_crc_byte_order_e
 * @brief HDLC CRC Byte Order. 
 */ 
typedef enum cprimod_hdlc_crc_byte_order_e {
    cprimodHdlcCrcByteOrderNone = 0, /**< Default 15 .. 0  */
    cprimodHdlcCrcByteOrderSwap = 1, /**<  Byte Order Swap [7:0][15:8] */
    cprimodHdlcCrcByteOrderCount
} cprimod_hdlc_crc_byte_order_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_hdlc_crc_byte_order_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_hdlc_crc_byte_order_t validation */
int cprimod_hdlc_crc_byte_order_t_validate(cprimod_hdlc_crc_byte_order_t cprimod_hdlc_crc_byte_order);

/*!
 * @enum cprimod_hdlc_fcs_err_check_e
 * @brief HDLC FCS Error Check or no check. 
 */ 
typedef enum cprimod_hdlc_fcs_err_check_e {
    cprimodHdlcFcsErrCheck = 0, /**<  Check for FCS Error  */
    cprimodHdlcFcsErrNoCheck = 1, /**<  No FCS Error Check.  Ignore FCS. */
    cprimodHdlcFcsErrCount
} cprimod_hdlc_fcs_err_check_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_hdlc_fcs_err_check_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_hdlc_fcs_err_check_t validation */
int cprimod_hdlc_fcs_err_check_t_validate(cprimod_hdlc_fcs_err_check_t cprimod_hdlc_fcs_err_check);
typedef _shr_hdlc_fcs_size_t cprimod_cpri_hdlc_fcs_size_t;

#define CPRIMOD_CPRI_HDLC_FCS_SIZE_8_BITS _shrHdlcFcsSize8Bits
#define CPRIMOD_CPRI_HDLC_FCS_SIZE_16_BITS _shrHdlcFcsSize16Bits
#define CPRIMOD_CPRI_HDLC_FCS_SIZE_32_BITS _shrHdlcFcsSize32Bits

typedef _shr_hdlc_filling_flag_pattern_t cprimod_cpri_hdlc_filling_flag_pattern_t;

#define CPRIMOD_CPRI_HDLC_FILLING_FLAG_PATTERN_7E _shrHdlcFillingFlagPattern7E
#define CPRIMOD_CPRI_HDLC_FILLING_FLAG_PATTERN_7F _shrHdlcFillingFlagPattern7F
#define CPRIMOD_CPRI_HDLC_FILLING_FLAG_PATTERN_FF _shrHdlcFillingFlagPatternFF

typedef _shr_hdlc_flag_size_t cprimod_cpri_hdlc_num_flag_bytes_t;

#define CPRIMOD_HDLC_FLAG_SIZE_1_BYTE _shrHdlcNumFlagSizeOneByte
#define CPRIMOD_HDLC_FLAG_SIZE_2_BYTE _shrHdlcNumFlagSizeTwoByte

typedef _shr_hdlc_crc_mode_t cprimod_cpri_crc_mode_t;

#define CPRIMOD_CPRI_CRC_MODE_APPEND _shrHdlcCrcAppend
#define CPRIMOD_CPRI_CRC_MODE_REPLACE _shrHdlcCrcReplace
#define CPRIMOD_CPRI_CRC_MODE_NO_UPDATE _shrHdlcCrcNoUpdate

typedef _shr_hdlc_crc_init_val_t cprimod_cpri_hdlc_crc_init_val_t;

#define CPRIMOD_CPRI_HDLC_CRC_INIT_VAL_ALL_0 _shrHdlcCrcInitValAll0
#define CPRIMOD_CPRI_HDLC_CRC_INIT_VAL_ALL_1 _shrHdlcCrcInitValAll1


/*!
 * @struct cprimod_slow_hdlc_config_info_s
 * @brief CPRI Slow HDLC configuration information. 
 */ 
typedef struct cprimod_slow_hdlc_config_info_s {
    cprimod_cpri_crc_mode_t tx_crc_mode; /**< Tx CRC Mode. Append/Replace/NoUpdate.   */
    cprimod_cpri_hdlc_num_flag_bytes_t tx_flag_size; /**< Tx Num of Flag Bytes 1 or 2.   */
    cprimod_cpri_hdlc_filling_flag_pattern_t tx_filling_flag_pattern; /**< Tx Filling Flag Pattern.   */
    cprimod_cpri_hdlc_crc_init_val_t crc_init_val; /**< CRC init Value, all 0s or 1s.   */
    int use_fe_mac; /**<  Use FE Mac instead of HDLC.   */
    int crc_byte_swap; /**<  0 - 15..0  1- [7:0][15:8]   */
    int no_fcs_err_check; /**<  Turn off FCS error check.   */
    uint32 cw_sel; /**< control word subchannel Xs */
    uint32 cw_size; /**< control word size */
    cprimod_cpri_hdlc_fcs_size_t fcs_size; /**< 8,16 or 16 bits FCS. */
    int runt_frame_drop; /**< Indicate frame smaller than 16 bits (runt) be dropped. */
    int long_frame_drop; /**< Indicate frame longer than max frame size be dropped. */
    uint32 min_frame_size; /**< Min HDLC Frame Size in Bits (including FCS). */
    uint32 max_frame_size; /**< Max HDLC Frame Size in Bits (including FCS). */
    uint32 queue_num; /**< Queue Number */
} cprimod_slow_hdlc_config_info_t;

/* cprimod_slow_hdlc_config_info_t initialization and validation */
int cprimod_slow_hdlc_config_info_t_validate(const cprimod_slow_hdlc_config_info_t* cprimod_slow_hdlc_config_info);
int cprimod_slow_hdlc_config_info_t_init(cprimod_slow_hdlc_config_info_t* cprimod_slow_hdlc_config_info);

/*! 
 * cprimod_cpri_port_cw_slow_hdlc_config_set
 *
 * @brief  Get/Set CPRI HDLC control Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  config_info     - Configuration info.
 */
int cprimod_cpri_port_cw_slow_hdlc_config_set(int unit, int port, const cprimod_slow_hdlc_config_info_t* config_info);
/*! 
 * cprimod_cpri_port_cw_slow_hdlc_config_get
 *
 * @brief  Get/Set CPRI HDLC control Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  config_info     - Configuration info.
 */
int cprimod_cpri_port_cw_slow_hdlc_config_get(int unit, int port, cprimod_slow_hdlc_config_info_t* config_info);


/*!
 * @struct cprimod_fast_eth_config_info_s
 * @brief CPRI Fast ETH  configuration information. 
 */ 
typedef struct cprimod_fast_eth_config_info_s {
    cprimod_cpri_crc_mode_t tx_crc_mode; /**< Tx CRC Mode. Append/Replace/NoUpdate.   */
    uint32 schan_start; /**< sub channel start location */
    uint32 schan_size; /**< sub channel size. */
    uint32 cw_sel; /**< control word subchannel Xs */
    uint32 cw_size; /**< control word size */
    uint32 min_packet_size; /**< Min Packet Size in Bytes. */
    uint32 max_packet_size; /**< Max Packet Size in Bytes. */
    int min_packet_drop; /**< Indicate frame smaller than min_packet_size be dropped. */
    int max_packet_drop; /**< Indicate frame larger than max packet size be dropped. */
    int strip_crc; /**< CRC bytes are drop and not forwarded to encap. */
    uint32 min_ipg; /**< Min IPG Size in Bytes. */
    uint32 queue_num; /**< Queue Number */
    int no_fcs_err_check; /**<  Turn off FCS error check.   */
} cprimod_fast_eth_config_info_t;

/* cprimod_fast_eth_config_info_t initialization and validation */
int cprimod_fast_eth_config_info_t_validate(const cprimod_fast_eth_config_info_t* cprimod_fast_eth_config_info);
int cprimod_fast_eth_config_info_t_init(cprimod_fast_eth_config_info_t* cprimod_fast_eth_config_info);

/*! 
 * cprimod_cpri_port_cw_fast_eth_config_set
 *
 * @brief  Get/Set CPRI Fast Ethernet control Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  config_info     - Configuration info.
 */
int cprimod_cpri_port_cw_fast_eth_config_set(int unit, int port, const cprimod_fast_eth_config_info_t* config_info);
/*! 
 * cprimod_cpri_port_cw_fast_eth_config_get
 *
 * @brief  Get/Set CPRI Fast Ethernet control Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  config_info     - Configuration info.
 */
int cprimod_cpri_port_cw_fast_eth_config_get(int unit, int port, cprimod_fast_eth_config_info_t* config_info);

typedef _shr_control_schan_num_bytes_t cprimod_cpri_control_schan_num_bytes_t;

#define CPRIMOD_CPRI_CONTROL_SCHAN_NUM_BYTES_1 _shrVsdCtrlSchanNumBytes1
#define CPRIMOD_CPRI_CONTROL_SCHAN_NUM_BYTES_2 _shrVsdCtrlSchanNumBytes2
#define CPRIMOD_CPRI_CONTROL_SCHAN_NUM_BYTES_4 _shrVsdCtrlSchanNumBytes4

typedef _shr_control_flow_num_bytes_t cprimod_cpri_control_flow_num_bytes_t;

#define CPRIMOD_CPRI_CONTROL_FLOW_NUM_BYTES_2 _shrVsdCtrlFlowNumBytes2
#define CPRIMOD_CPRI_CONTROL_FLOW_NUM_BYTES_4 _shrVsdCtrlFlowNumBytes4


/*!
 * @struct cprimod_cpri_rx_vsd_config_info_s
 * @brief CPRI VSD  configuration information. 
 */ 
typedef struct cprimod_cpri_rx_vsd_config_info_s {
    uint32 schan_start; /**< sub channel start location */
    uint32 schan_size; /**< sub channel size. */
    cprimod_cpri_control_schan_num_bytes_t schan_bytes; /**< Number of bytes */
    uint32 schan_steps; /**< control word steps */
    cprimod_cpri_control_flow_num_bytes_t flow_bytes; /**< Number of Bytes per flow. */
    uint32 queue_num; /**< Queue Number */
    uint32 rsvd_sector_mask[4]; /**< Reserved Sector Mask up to 128 bits total.  */
} cprimod_cpri_rx_vsd_config_info_t;

/* cprimod_cpri_rx_vsd_config_info_t initialization and validation */
int cprimod_cpri_rx_vsd_config_info_t_validate(const cprimod_cpri_rx_vsd_config_info_t* cprimod_cpri_rx_vsd_config_info);
int cprimod_cpri_rx_vsd_config_info_t_init(cprimod_cpri_rx_vsd_config_info_t* cprimod_cpri_rx_vsd_config_info);

/*! 
 * cprimod_cpri_port_rx_vsd_cw_config_set
 *
 * @brief  Get/Set CPRI Rx VSD Control  Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  config_info     - Configuration info.
 */
int cprimod_cpri_port_rx_vsd_cw_config_set(int unit, int port, const cprimod_cpri_rx_vsd_config_info_t* config_info);
/*! 
 * cprimod_cpri_port_rx_vsd_cw_config_get
 *
 * @brief  Get/Set CPRI Rx VSD Control  Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  config_info     - Configuration info.
 */
int cprimod_cpri_port_rx_vsd_cw_config_get(int unit, int port, cprimod_cpri_rx_vsd_config_info_t* config_info);

typedef _shr_cpri_rx_vsd_flow_info_t cprimod_cpri_rx_vsd_flow_info_t;


/*!
 * @struct cprimod_cpri_rx_vsd_ctrl_flow_config_xxx_s
 * @brief CPRI VSD Rx Flow configuration information. 
 */ 
typedef struct cprimod_cpri_rx_vsd_ctrl_flow_config_xxx_s {
    uint32 hyper_frame_number; /**< Hyper Frame Number */
    uint32 hyper_frame_modulo; /**< Hyper Frame Modulo */
    int filter_zero_data; /**< Filer all 0's Data.  */
    uint32 section_num[4]; /**< VSD Section in this group in Order 0-127.  */
    uint32 num_sector; /**< Number of Sectors. */
    uint32 tag_id; /**< Tag Id */
} cprimod_cpri_rx_vsd_ctrl_flow_config_xxx_t;

/* cprimod_cpri_rx_vsd_ctrl_flow_config_xxx_t initialization and validation */
int cprimod_cpri_rx_vsd_ctrl_flow_config_xxx_t_validate(const cprimod_cpri_rx_vsd_ctrl_flow_config_xxx_t* cprimod_cpri_rx_vsd_ctrl_flow_config_xxx);
int cprimod_cpri_rx_vsd_ctrl_flow_config_xxx_t_init(cprimod_cpri_rx_vsd_ctrl_flow_config_xxx_t* cprimod_cpri_rx_vsd_ctrl_flow_config_xxx);

/*! 
 * cprimod_cpri_port_rx_vsd_ctrl_flow_add
 *
 * @brief  Add CPRI Rx VSD Group Flow  Configuration Add.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  group_id        - group id
 * @param [in]  config_info     - Group Flow Configuration info.
 */
int cprimod_cpri_port_rx_vsd_ctrl_flow_add(int unit, int port, uint32 group_id, const cprimod_cpri_rx_vsd_flow_info_t* config_info);

/*! 
 * cprimod_encap_control_queue_tag_to_flow_id_map_set
 *
 * @brief  Get/Set Encap Tag Id to Flow Id Map.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  tag_id          - Tag Id for this flow.
 * @param [in]  flow_id         - Flow Id.
 */
int cprimod_encap_control_queue_tag_to_flow_id_map_set(int unit, int port, uint32 tag_id, uint32 flow_id);
/*! 
 * cprimod_encap_control_queue_tag_to_flow_id_map_get
 *
 * @brief  Get/Set Encap Tag Id to Flow Id Map.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  tag_id          - Tag Id for this flow.
 * @param [out]  flow_id         - Flow_Id.
 */
int cprimod_encap_control_queue_tag_to_flow_id_map_get(int unit, int port, uint32 tag_id, uint32* flow_id);


/*!
 * @struct cprimod_cpri_tx_vsd_config_info_s
 * @brief CPRI Tx VSD configuration information. 
 */ 
typedef struct cprimod_cpri_tx_vsd_config_info_s {
    uint32 schan_start; /**< sub channel start location */
    uint32 schan_size; /**< sub channel size. */
    cprimod_cpri_control_schan_num_bytes_t schan_bytes; /**< Number of bytes */
    uint32 schan_steps; /**< control word steps */
    cprimod_cpri_control_flow_num_bytes_t flow_bytes; /**< Number of Bytes per flow. */
    uint32 queue_num; /**< Queue Number */
    uint32 rsvd_sector_mask[4]; /**< Reserved  Sector Mask up to 128 bits total.  */
} cprimod_cpri_tx_vsd_config_info_t;

/* cprimod_cpri_tx_vsd_config_info_t initialization and validation */
int cprimod_cpri_tx_vsd_config_info_t_validate(const cprimod_cpri_tx_vsd_config_info_t* cprimod_cpri_tx_vsd_config_info);
int cprimod_cpri_tx_vsd_config_info_t_init(cprimod_cpri_tx_vsd_config_info_t* cprimod_cpri_tx_vsd_config_info);

/*! 
 * cprimod_cpri_port_tx_vsd_cw_config_set
 *
 * @brief  Get/Set CPRI Tx VSD control Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  config_info     - Configuration info.
 */
int cprimod_cpri_port_tx_vsd_cw_config_set(int unit, int port, const cprimod_cpri_tx_vsd_config_info_t* config_info);
/*! 
 * cprimod_cpri_port_tx_vsd_cw_config_get
 *
 * @brief  Get/Set CPRI Tx VSD control Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  config_info     - Configuration info.
 */
int cprimod_cpri_port_tx_vsd_cw_config_get(int unit, int port, cprimod_cpri_tx_vsd_config_info_t* config_info);

typedef _shr_cpri_tx_vsd_flow_info_t cprimod_cpri_tx_vsd_flow_info_t;


/*!
 * @struct cprimod_cpri_tx_vsd_flow_config_info_s
 * @brief CPRI VSD Tx Flow configuration information. 
 */ 
typedef struct cprimod_cpri_tx_vsd_flow_config_info_s {
    uint32 hyper_frame_number; /**< Hyper Frame Number */
    uint32 hyper_frame_modulo; /**< Hyper Frame Number */
    int repeat_mode; /**< Filer all 0's Data.  */
    uint32 section_num[4]; /**< VSD Sector in this group in Order.  */
    uint32 num_sector; /**< Number of Sectors. */
} cprimod_cpri_tx_vsd_flow_config_info_t;

/* cprimod_cpri_tx_vsd_flow_config_info_t initialization and validation */
int cprimod_cpri_tx_vsd_flow_config_info_t_validate(const cprimod_cpri_tx_vsd_flow_config_info_t* cprimod_cpri_tx_vsd_flow_config_info);
int cprimod_cpri_tx_vsd_flow_config_info_t_init(cprimod_cpri_tx_vsd_flow_config_info_t* cprimod_cpri_tx_vsd_flow_config_info);

/*! 
 * cprimod_cpri_port_tx_vsd_ctrl_flow_add
 *
 * @brief  Add CPRI Tx VSD Group Flow  Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  group_id        - group id
 * @param [in]  config_info     - Group Flow Configuration info.
 */
int cprimod_cpri_port_tx_vsd_ctrl_flow_add(int unit, int port, uint32 group_id, const cprimod_cpri_tx_vsd_flow_info_t* config_info);

typedef _shr_cpri_cw_filter_mode_t cprimod_cpri_cw_filter_mode_t;

#define CPRIMOD_CPRI_CW_FILTER_DISABLE _shrCpriFilterDisable
#define CPRIMOD_CPRI_CW_FILTER_NON_ZERO _shrCpriFilterNonZero
#define CPRIMOD_CPRI_CW_FILTER_PERIODIC _shrCpriFilterPeriodic
#define CPRIMOD_CPRI_CW_FILTER_CHANGE _shrCpriFilterChange
#define CPRIMOD_CPRI_CW_FILTER_PATTERN_MATCH _shrCpriFilterPatternMatch


/*!
 * @enum cprimod_cw_filter_mode_e
 * @brief VSD Raw Filter Modes. 
 */ 
typedef enum cprimod_cw_filter_mode_e {
    cprimodCwFilterDisable = 0, /**< Disable Filter */
    cprimodCwFilterNonZero = 1, /**< Non-Zero Data only */
    cprimodCwFilterPeriodic = 2, /**< Periodic Generation */
    cprimodCwFilterChange = 3, /**< Content Change Only */
    cprimodCwFilterPatternMatch = 4, /**<  Pattern Match */
    cprimodCwFilterCount
} cprimod_cw_filter_mode_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_cw_filter_mode_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_cw_filter_mode_t validation */
int cprimod_cw_filter_mode_t_validate(cprimod_cw_filter_mode_t cprimod_cw_filter_mode);

/*!
 * @struct cprimod_cpri_rx_vsd_raw_config_s
 * @brief CPRI Rx VSD Raw Configuration Information. 
 */ 
typedef struct cprimod_cpri_rx_vsd_raw_config_s {
    uint32 schan_start; /**< Sub Channel Start */
    uint32 schan_size; /**< Sub Channel Size */
    uint32 cw_sel; /**< Control Word Select Bit Map */
    uint32 cw_size; /**< Control Word Size, number of bytes */
    cprimod_cpri_cw_filter_mode_t filter_mode; /**< Filter Mode */
    uint32 hyper_frame_index; /**< Hyper Frame Index */
    uint32 hyper_frame_modulo; /**< Hyper Frame Modulo */
    uint32 match_offset; /**< Match Offset */
    uint32 match_value; /**< Match Value */
    uint32 match_mask; /**< Match Mask */
    uint32 queue_num; /**< Queue Number. */
} cprimod_cpri_rx_vsd_raw_config_t;

/* cprimod_cpri_rx_vsd_raw_config_t initialization and validation */
int cprimod_cpri_rx_vsd_raw_config_t_validate(const cprimod_cpri_rx_vsd_raw_config_t* cprimod_cpri_rx_vsd_raw_config);
int cprimod_cpri_rx_vsd_raw_config_t_init(cprimod_cpri_rx_vsd_raw_config_t* cprimod_cpri_rx_vsd_raw_config);

/*! 
 * cprimod_cpri_port_rx_vsd_raw_config_set
 *
 * @brief  Get/Set VSD Raw Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - VSD Raw Group Index. 0-7 
 * @param [in]  config_info     - VSD Raw  Configuration info.
 */
int cprimod_cpri_port_rx_vsd_raw_config_set(int unit, int port, uint32 index, const cprimod_cpri_rx_vsd_raw_config_t* config_info);
/*! 
 * cprimod_cpri_port_rx_vsd_raw_config_get
 *
 * @brief  Get/Set VSD Raw Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - VSD Raw Group Index. 0-7 
 * @param [out]  config_info     - VSD Raw  Configuration info.
 */
int cprimod_cpri_port_rx_vsd_raw_config_get(int unit, int port, uint32 index, cprimod_cpri_rx_vsd_raw_config_t* config_info);

typedef _shr_vsd_raw_map_mode_t cprimod_cpri_vsd_raw_map_mode_t;

#define CPRIMOD_CPRI_CW_MAP_MODE_PERIODIC _shrVsdRawMapModePeriodic
#define CPRIMOD_CPRI_CW_MAP_MODE_ROE_FRAME _shrVsdRawMapModeRoeFrame


/*!
 * @enum cprimod_vsd_raw_map_mode_e
 * @brief VSD Raw Map Modes. 
 */ 
typedef enum cprimod_vsd_raw_map_mode_e {
    cprimodVsdRawMapModePeriodic = 0, /**< Peridic insert data using Modulo */
    cprimodVsdRawMapModeRoeFrame = 1, /**< Use Frame Number from ROE frame. */
    cprimodVsdRawMapModeCount
} cprimod_vsd_raw_map_mode_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_vsd_raw_map_mode_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_vsd_raw_map_mode_t validation */
int cprimod_vsd_raw_map_mode_t_validate(cprimod_vsd_raw_map_mode_t cprimod_vsd_raw_map_mode);

/*!
 * @struct cprimod_cpri_tx_vsd_raw_config_s
 * @brief CPRI Tx VSD Raw Configuration Information. 
 */ 
typedef struct cprimod_cpri_tx_vsd_raw_config_s {
    uint32 schan_start; /**< Sub Channel Start */
    uint32 schan_size; /**< Sub Channel Size */
    uint32 cw_sel; /**< Control Word Select Bit Map */
    uint32 cw_size; /**< Control Word Size, number of bytes */
    uint32 hyper_frame_index; /**< Hyper Frame Index */
    uint32 hyper_frame_modulo; /**< Hyper Frame Modulo */
    uint32 queue_num; /**< Queue Number. */
    cprimod_cpri_vsd_raw_map_mode_t map_mode; /**< Map Mode. */
    int repeat_enable; /**< Repeat until new data.. */
    int bfn0_filter_enable; /**< Enable Filter BFN0. */
    int bfn1_filter_enable; /**< Enable Filter BFN1. */
    uint32 idle_value; /**< Value to be insert when data is not available. */
} cprimod_cpri_tx_vsd_raw_config_t;

/* cprimod_cpri_tx_vsd_raw_config_t initialization and validation */
int cprimod_cpri_tx_vsd_raw_config_t_validate(const cprimod_cpri_tx_vsd_raw_config_t* cprimod_cpri_tx_vsd_raw_config);
int cprimod_cpri_tx_vsd_raw_config_t_init(cprimod_cpri_tx_vsd_raw_config_t* cprimod_cpri_tx_vsd_raw_config);

/*! 
 * cprimod_cpri_port_tx_vsd_raw_config_set
 *
 * @brief  Get/Set Tx VSD Raw Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - VSD Raw Group Index. 0-7 
 * @param [in]  config_info     - VSD Raw  Configuration info.
 */
int cprimod_cpri_port_tx_vsd_raw_config_set(int unit, int port, uint32 index, const cprimod_cpri_tx_vsd_raw_config_t* config_info);
/*! 
 * cprimod_cpri_port_tx_vsd_raw_config_get
 *
 * @brief  Get/Set Tx VSD Raw Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - VSD Raw Group Index. 0-7 
 * @param [out]  config_info     - VSD Raw  Configuration info.
 */
int cprimod_cpri_port_tx_vsd_raw_config_get(int unit, int port, uint32 index, cprimod_cpri_tx_vsd_raw_config_t* config_info);

/*! 
 * cprimod_cpri_port_tx_vsd_raw_filter_set
 *
 * @brief  VSD Raw Radio Frame Filter Set.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  bfn0_value      - BFN0 Radio Frame Number. 
 * @param [in]  bfn0_mask       - BFN0 Radio Frame Mask. 
 * @param [in]  bfn1_value      - BFN1 Radio Frame Number. 
 * @param [in]  bfn1_mask       - BFN1 Radio Frame Mask. 
 */
int cprimod_cpri_port_tx_vsd_raw_filter_set(int unit, int port, uint32 bfn0_value, uint32 bfn0_mask, uint32 bfn1_value, uint32 bfn1_mask);

/*! 
 * cprimod_cpri_port_rx_brcm_rsvd5_control_config_set
 *
 * @brief  Get/Set Rx S D V M.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  schan_start     - BRCM_RSVD5 sub channel start.
 * @param [in]  schan_size      - BRCM_RSVD5 sub channel size.
 * @param [in]  queue_num       - BRCM_RSVD5 Queue Number.
 * @param [in]  parity_disable   - BRCM_RSVD5 parity disable.
 */
int cprimod_cpri_port_rx_brcm_rsvd5_control_config_set(int unit, int port, uint32 schan_start, uint32 schan_size, uint32 queue_num, int parity_disable);
/*! 
 * cprimod_cpri_port_rx_brcm_rsvd5_control_config_get
 *
 * @brief  Get/Set Rx S D V M.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  schan_start     - BRCM_RSVD5 sub channel start.
 * @param [out]  schan_size      - BRCM_RSVD5 sub channel size.
 * @param [out]  queue_num       - BRCM_RSVD5 Queue Number.
 * @param [out]  parity_disable   - BRCM_RSVD5 parity disab;e.
 */
int cprimod_cpri_port_rx_brcm_rsvd5_control_config_get(int unit, int port, uint32* schan_start, uint32* schan_size, uint32* queue_num, int* parity_disable);

/*! 
 * cprimod_cpri_port_tx_brcm_rsvd5_control_config_set
 *
 * @brief  Get/Set TX  S D V M.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  schan_start     - BRCM_RSVD5 sub channel start.
 * @param [in]  schan_size      - BRCM_RSVD5 sub channel size.
 * @param [in]  queue_num       - BRCM_RSVD5 Queue Number.
 * @param [in]  crc_enable      - BRCM_RSVD5 parity disable.
 */
int cprimod_cpri_port_tx_brcm_rsvd5_control_config_set(int unit, int port, uint32 schan_start, uint32 schan_size, uint32 queue_num, int crc_enable);
/*! 
 * cprimod_cpri_port_tx_brcm_rsvd5_control_config_get
 *
 * @brief  Get/Set TX  S D V M.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  schan_start     - BRCM_RSVD5 sub channel start.
 * @param [out]  schan_size      - BRCM_RSVD5 sub channel size.
 * @param [out]  queue_num       - BRCM_RSVD5 Queue Number.
 * @param [out]  crc_enable      - BRCM_RSVD5 parity disab;e.
 */
int cprimod_cpri_port_tx_brcm_rsvd5_control_config_get(int unit, int port, uint32* schan_start, uint32* schan_size, uint32* queue_num, int* crc_enable);

typedef _shr_cpri_gcw_mask_t cprimod_cpri_gcw_mask_t;

#define CPRIMOD_CPRI_GCW_MASK_NONE _shrCpriGcwMaskNone
#define CPRIMOD_CPRI_GCW_MASK_LSB _shrCpriGcwMaskLSB
#define CPRIMOD_CPRI_GCW_MASK_MSB _shrCpriGcwMaskMSB
#define CPRIMOD_CPRI_GCW_MASK_BOTH _shrCpriGcwMaskBOTH


/*!
 * @enum cprimod_gcw_mask_e
 * @brief GCW Mask. 
 */ 
typedef enum cprimod_gcw_mask_e {
    cprimodGcwMaskNone = 0, /**< None of the Byte are extracted. */
    cprimodGcwMaskLSB = 1, /**< LSB Byte is extracted. */
    cprimodGcwMaskMSB = 2, /**< MSB Byte is extracted. */
    cprimodGcwMaskBOTH = 3, /**< Both Byte are extracted. */
    cprimodGcwMaskCount
} cprimod_gcw_mask_t;

#ifdef CPRIMOD_DIAG
extern enum_mapping_t cprimod_gcw_mask_t_mapping[];
#endif /*CPRIMOD_DIAG*/

/* cprimod_gcw_mask_t validation */
int cprimod_gcw_mask_t_validate(cprimod_gcw_mask_t cprimod_gcw_mask);

/*!
 * @struct cprimod_cpri_rx_gcw_config_s
 * @brief CPRI Rx GCW Configuration Information. 
 */ 
typedef struct cprimod_cpri_rx_gcw_config_s {
    uint32 Ns; /**< Sub Channel Number 0-63 */
    uint32 Xs; /**< Sub Channel Word 0-3. */
    uint32 Y; /**< Sub Channel First Byte Location . */
    cprimod_cpri_gcw_mask_t mask; /**< Mask  */
    cprimod_cpri_cw_filter_mode_t filter_mode; /**< Filter Mode */
    uint32 hyper_frame_index; /**< Hyper Frame Index */
    uint32 hyper_frame_modulo; /**< Hyper Frame Modulo */
    uint32 match_mask; /**< Match Mask */
    uint32 match_value; /**< Match Value */
} cprimod_cpri_rx_gcw_config_t;

/* cprimod_cpri_rx_gcw_config_t initialization and validation */
int cprimod_cpri_rx_gcw_config_t_validate(const cprimod_cpri_rx_gcw_config_t* cprimod_cpri_rx_gcw_config);
int cprimod_cpri_rx_gcw_config_t_init(cprimod_cpri_rx_gcw_config_t* cprimod_cpri_rx_gcw_config);


/*!
 * @struct cprimod_cpri_tx_gcw_config_s
 * @brief CPRI Tx GCW Configuration Information. 
 */ 
typedef struct cprimod_cpri_tx_gcw_config_s {
    uint32 Ns; /**< Sub Channel Number 0-63 */
    uint32 Xs; /**< Sub Channel Word 0-3. */
    uint32 Y; /**< Sub Channel First Byte Location . */
    cprimod_cpri_gcw_mask_t mask; /**< Mask  */
    uint32 hyper_frame_index; /**< Hyper Frame Index */
    uint32 hyper_frame_modulo; /**< Hyper Frame Modulo */
    int repeat_enable; /**< Repeat until new data.. */
    int bfn0_filter_enable; /**< Enable Filter BFN0. */
    int bfn1_filter_enable; /**< Enable Filter BFN1. */
} cprimod_cpri_tx_gcw_config_t;

/* cprimod_cpri_tx_gcw_config_t initialization and validation */
int cprimod_cpri_tx_gcw_config_t_validate(const cprimod_cpri_tx_gcw_config_t* cprimod_cpri_tx_gcw_config);
int cprimod_cpri_tx_gcw_config_t_init(cprimod_cpri_tx_gcw_config_t* cprimod_cpri_tx_gcw_config);

/*! 
 * cprimod_cpri_port_rx_gcw_config_set
 *
 * @brief  Get/Set Rx GCW Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - GCW  Index. 0-15 
 * @param [in]  config_info     - GCW  Configuration info.
 */
int cprimod_cpri_port_rx_gcw_config_set(int unit, int port, uint32 index, const cprimod_cpri_rx_gcw_config_t* config_info);
/*! 
 * cprimod_cpri_port_rx_gcw_config_get
 *
 * @brief  Get/Set Rx GCW Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - GCW  Index. 0-15 
 * @param [out]  config_info     - GCW  Configuration info.
 */
int cprimod_cpri_port_rx_gcw_config_get(int unit, int port, uint32 index, cprimod_cpri_tx_gcw_config_t* config_info);

/*! 
 * cprimod_cpri_port_tx_gcw_config_set
 *
 * @brief  Get/Set Tx GCW Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - GCW  Index. 0-15 
 * @param [in]  config_info     - GCW  Configuration info.
 */
int cprimod_cpri_port_tx_gcw_config_set(int unit, int port, uint32 index, const cprimod_cpri_tx_gcw_config_t* config_info);
/*! 
 * cprimod_cpri_port_tx_gcw_config_get
 *
 * @brief  Get/Set Tx GCW Configuration.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           - GCW  Index. 0-15 
 * @param [out]  config_info     - GCW  Configuration info.
 */
int cprimod_cpri_port_tx_gcw_config_get(int unit, int port, uint32 index, cprimod_cpri_tx_gcw_config_t* config_info);

typedef _shr_cpri_cw_l1_config_info_t cprimod_cpri_cw_l1_config_info_t;

/*! 
 * cprimod_cpri_port_tx_gcw_filter_set
 *
 * @brief  GCW Radio Frame Filter Set.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  bfn0_value      - BFN0 Radio Frame Number. 
 * @param [in]  bfn0_mask       - BFN0 Radio Frame Mask. 
 * @param [in]  bfn1_value      - BFN1 Radio Frame Number. 
 * @param [in]  bfn1_mask       - BFN1 Radio Frame Mask. 
 */
int cprimod_cpri_port_tx_gcw_filter_set(int unit, int port, uint32 bfn0_value, uint32 bfn0_mask, uint32 bfn1_value, uint32 bfn1_mask);


/*!
 * @struct cprimod_cpri_tx_control_word_s
 * @brief CPRI Tx Control Word information. 
 */ 
typedef struct cprimod_cpri_tx_control_word_s {
    uint32 enet_ptr; /**< Pointer to Fast Ethernet. */
    uint32 l1_fun; /**< L1 functions . */
    uint32 hdlc_rate; /**< HDLC rate */
    uint32 protocol_ver; /**< Protocol Version */
} cprimod_cpri_tx_control_word_t;

/* cprimod_cpri_tx_control_word_t initialization and validation */
int cprimod_cpri_tx_control_word_t_validate(const cprimod_cpri_tx_control_word_t* cprimod_cpri_tx_control_word);
int cprimod_cpri_tx_control_word_t_init(cprimod_cpri_tx_control_word_t* cprimod_cpri_tx_control_word);

/*! 
 * cprimod_cpri_port_tx_control_word_set
 *
 * @brief  Set CRPI control word information.  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  control_info    - CPRI control word.
 */
int cprimod_cpri_port_tx_control_word_set(int unit, int port, const cprimod_cpri_cw_l1_config_info_t* control_info);

/*! 
 * cprimod_rsvd4_rx_control_message_config_set
 *
 * @brief  Set Control Message Configuration..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  queue_num       - Single Message Queue Numer. 
 * @param [in]  default_tag     - Default Tag. 
 * @param [in]  no_match_tag    - No Match Tag. 
 */
int cprimod_rsvd4_rx_control_message_config_set(int unit, int port, uint32 queue_num, uint32 default_tag, uint32 no_match_tag);

typedef _shr_control_msg_proc_type_t cprimod_control_msg_proc_type_t;

#define CPRIMOD_CONTROL_MSG_PROC_TYPE_FE _shrCtrlMsgProcFE
#define CPRIMOD_CONTROL_MSG_PROC_TYPE_FCB _shrCtrlMsgProcFCB
#define CPRIMOD_CONTROL_MSG_PROC_TYPE_PAYLOAD _shrCtrlMsgProcPayload
#define CPRIMOD_CONTROL_MSG_PROC_TYPE_FULL_MESSAGE _shrCtrlMsgProcFull
#define CPRIMOD_CONTROL_MSG_PROC_TYPE_FULL_MESSAGE_W_TAG _shrCtrlMsgProcFullWithTag


/*!
 * @struct cprimod_control_flow_config_s
 * @brief  Control Flow Configuration Information. 
 */ 
typedef struct cprimod_control_flow_config_s {
    cprimod_control_msg_proc_type_t proc_type; /**< . */
    uint32 queue_num; /**< Queue Number . */
    uint32 sync_profile; /**< Sync Profile Number */
    int sync_enable; /**< Sync Profile Enable. */
} cprimod_control_flow_config_t;

/* cprimod_control_flow_config_t initialization and validation */
int cprimod_control_flow_config_t_validate(const cprimod_control_flow_config_t* cprimod_control_flow_config);
int cprimod_control_flow_config_t_init(cprimod_control_flow_config_t* cprimod_control_flow_config);

/*! 
 * cprimod_rsvd4_rx_control_flow_config_set
 *
 * @brief  Set Control Message Configuration..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Control Flow ID. 
 * @param [in]  config          - Control Flow Configuration. 
 */
int cprimod_rsvd4_rx_control_flow_config_set(int unit, int port, uint32 flow_id, const cprimod_control_flow_config_t* config);
/*! 
 * cprimod_rsvd4_rx_control_flow_config_get
 *
 * @brief  Set Control Message Configuration..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Control Flow ID. 
 * @param [out]  config          - Control Flow Configuration. 
 */
int cprimod_rsvd4_rx_control_flow_config_get(int unit, int port, uint32 flow_id, cprimod_control_flow_config_t* config);

typedef _shr_sync_count_cycle_t cprimod_sync_count_cycle_t;

#define CPRIMOD_SYNC_COUNT_CYCLE_EVERY_MF _shrSyncCountCycleEveryMF
#define CPRIMOD_SYNC_COUNT_CYCLE_UP_TO_6MF _shrSyncCountCycleUpToSixMF


/*!
 * @struct cprimod_sync_profile_entry_s
 * @brief  Control Flow Configuration Information. 
 */ 
typedef struct cprimod_sync_profile_entry_s {
    cprimod_sync_count_cycle_t count_cycle; /**< Count Cycle */
    uint32 message_offset; /**< Message offset within Master Frame . */
    uint32 master_frame_offset; /**< Master Frame Offset. bfn_offset */
} cprimod_sync_profile_entry_t;

/* cprimod_sync_profile_entry_t initialization and validation */
int cprimod_sync_profile_entry_t_validate(const cprimod_sync_profile_entry_t* cprimod_sync_profile_entry);
int cprimod_sync_profile_entry_t_init(cprimod_sync_profile_entry_t* cprimod_sync_profile_entry);

/*! 
 * cprimod_rsvd4_rx_sync_profile_entry_set
 *
 * @brief  Sync Profile Entry..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  profile_id      - Control Flow ID. 
 * @param [in]  entry           - Sync Profile Entry. 
 */
int cprimod_rsvd4_rx_sync_profile_entry_set(int unit, int port, uint32 profile_id, const cprimod_sync_profile_entry_t* entry);
/*! 
 * cprimod_rsvd4_rx_sync_profile_entry_get
 *
 * @brief  Sync Profile Entry..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  profile_id      - Control Flow ID. 
 * @param [out]  entry           - Sync Profile Entry. 
 */
int cprimod_rsvd4_rx_sync_profile_entry_get(int unit, int port, uint32 profile_id, cprimod_sync_profile_entry_t* entry);

/*! 
 * cprimod_rx_tag_config_set
 *
 * @brief  Tag Generation Entry..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  default_tag     - Default Tag . 
 * @param [in]  no_match_tag    - No Match Tag . 
 */
int cprimod_rx_tag_config_set(int unit, int port, uint32 default_tag, uint32 no_match_tag);

typedef _shr_tag_gen_entry_t cprimod_tag_gen_entry_t;

/*! 
 * cprimod_rx_tag_gen_entry_add
 *
 * @brief  Tag Generation Entry..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  entry           - Tag Generation Entry Info. 
 */
int cprimod_rx_tag_gen_entry_add(int unit, int port, const cprimod_tag_gen_entry_t* entry);

/*! 
 * cprimod_rx_tag_gen_entry_delete
 *
 * @brief  Tag Generation Entry..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  entry           - Tag Generation Entry Info. 
 */
int cprimod_rx_tag_gen_entry_delete(int unit, int port, const cprimod_tag_gen_entry_t* entry);

typedef _shr_tag_option_t cprimod_cpri_tag_option_t;

#define CPRIMOD_CPRI_TAG_DEFAULT _shrTagUseDefault
#define CPRIMOD_CPRI_TAG_LOOKUP _shrTagUseLookup

/*! 
 * cprimod_rx_control_flow_tag_option_set
 *
 * @brief  Set tag option for control Flow..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Control Flow ID. 
 * @param [in]  tag_option      - Tag Option. 
 */
int cprimod_rx_control_flow_tag_option_set(int unit, int port, uint32 flow_id, cprimod_cpri_tag_option_t tag_option);

/*! 
 * cprimod_rsvd4_tx_control_flow_group_member_add
 *
 * @brief  Add member to the Tx Control Flow Group..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  group_id        - Group Number 0 or 1. 
 * @param [in]  priority        - Prioirty within the group 0-3. 
 * @param [in]  queue_num       - Queue Numer. 
 * @param [in]  proc_type       - Processing Type. 
 */
int cprimod_rsvd4_tx_control_flow_group_member_add(int unit, int port, uint32 group_id, uint32 priority, uint32 queue_num, cprimod_control_msg_proc_type_t proc_type);

/*! 
 * cprimod_rsvd4_tx_control_flow_group_member_delete
 *
 * @brief  Delete member to the Tx Control Flow Group..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  group_id        - Group Number 0 or 1. 
 * @param [in]  priority        - Prioirty within the group 0-3. 
 */
int cprimod_rsvd4_tx_control_flow_group_member_delete(int unit, int port, uint32 group_id, uint32 priority);

/*! 
 * cprimod_rsvd4_tx_eth_message_config_set
 *
 * @brief  Setting RSVD4 Fast Ethernet Control Message Configuration..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  msg_node        - Message Node. 
 * @param [in]  msg_subnode     - Message SubNode. 
 * @param [in]  msg_type        - Message Type. 
 * @param [in]  msg_padding     - Padding Bit 0 or 1. 
 */
int cprimod_rsvd4_tx_eth_message_config_set(int unit, int port, uint32 msg_node, uint32 msg_subnode, uint32 msg_type, uint32 msg_padding);

/*! 
 * cprimod_rsvd4_tx_single_raw_message_config_set
 *
 * @brief  Setting RSVD4 Single Raw Control Message Configuration..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  msg_id          - Message ID. 
 * @param [in]  msg_type        - Message Type. 
 */
int cprimod_rsvd4_tx_single_raw_message_config_set(int unit, int port, uint32 msg_id, uint32 msg_type);

typedef _shr_cpri_crc_option_t cprimod_cpri_crc_option_t;

#define CPRIMOD_CPRI_CRC_USE_ROE _shrCrcOptionUseRoe
#define CPRIMOD_CPRI_CRC_REGENERATE _shrCrcOptionRegenerate

/*! 
 * cprimod_rsvd4_tx_single_tunnel_message_config_set
 *
 * @brief  Setting RSVD4 Single Raw Control Message Configuration..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  crc_option      - CRC option. 
 */
int cprimod_rsvd4_tx_single_tunnel_message_config_set(int unit, int port, cprimod_cpri_crc_option_t crc_option);

/*! 
 * cprimod_rsvd4_tx_control_flow_config_set
 *
 * @brief  Set Control Message Configuration..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Control Flow ID. 
 * @param [in]  queue_num       - Queue Numer. 
 * @param [in]  proc_type       - Processing Type. 
 */
int cprimod_rsvd4_tx_control_flow_config_set(int unit, int port, uint32 flow_id, uint32 queue_num, cprimod_control_msg_proc_type_t proc_type);
/*! 
 * cprimod_rsvd4_tx_control_flow_config_get
 *
 * @brief  Set Control Message Configuration..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  flow_id         - Control Flow ID. 
 * @param [out]  queue_num       - Queue Numer. 
 * @param [out]  proc_type       - Processing Type. 
 */
int cprimod_rsvd4_tx_control_flow_config_get(int unit, int port, uint32 flow_id, uint32* queue_num, cprimod_control_msg_proc_type_t* proc_type);

/*! 
 * cprimod_rsvd4_tx_control_flow_header_index_set
 *
 * @brief  Set Index to header config table for a particular flow..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  roe_flow_id     -  Flow ID from ROE header. 
 * @param [in]  index           - Index to header config table. 
 */
int cprimod_rsvd4_tx_control_flow_header_index_set(int unit, int port, uint32 roe_flow_id, uint32 index);
/*! 
 * cprimod_rsvd4_tx_control_flow_header_index_get
 *
 * @brief  Set Index to header config table for a particular flow..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  roe_flow_id     -  Flow ID from ROE header. 
 * @param [out]  index           - Index to header config table. 
 */
int cprimod_rsvd4_tx_control_flow_header_index_get(int unit, int port, uint32 roe_flow_id, uint32* index);

/*! 
 * cprimod_rsvd4_tx_control_header_entry_set
 *
 * @brief   Header Look up Entry..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           -  Index to the table. 
 * @param [in]  header_node     - rsvd4 header node. 
 * @param [in]  header_subnode   - rsvd4 header subnode. 
 * @param [in]  payload_node    - rsvd4 payload node. 
 */
int cprimod_rsvd4_tx_control_header_entry_set(int unit, int port, uint32 index, uint32 header_node, uint32 header_subnode, uint32 payload_node);
/*! 
 * cprimod_rsvd4_tx_control_header_entry_get
 *
 * @brief   Header Look up Entry..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  index           -  Index to the table. 
 * @param [out]  header_node     - rsvd4 header node. 
 * @param [out]  header_subnode   - rsvd4 header subnode. 
 * @param [out]  payload_node    - rsvd4 payload node. 
 */
int cprimod_rsvd4_tx_control_header_entry_get(int unit, int port, uint32 index, uint32* header_node, uint32* header_subnode, uint32* payload_node);

typedef _shr_fast_eth_config_t cprimod_cpri_fast_eth_config_t;

/*! 
 * cprimod_rsvd4_fast_eth_config_set
 *
 * @brief  Set Fast Ethernet configuration..  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  config_info     - Fast Eth Configuration. 
 */
int cprimod_rsvd4_fast_eth_config_set(int unit, int port, const cprimod_cpri_fast_eth_config_t* config_info);

/*! 
 * cprimod_cpri_or_enet_port_set
 *
 * @brief  Set Get if the port is cpri or Ethernet  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  val             - If 1 CPRI I/F 0 Ethernet I/F. 
 */
int cprimod_cpri_or_enet_port_set(int unit, int port, int val);
/*! 
 * cprimod_cpri_or_enet_port_get
 *
 * @brief  Set Get if the port is cpri or Ethernet  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  val             - If 1 CPRI I/F 0 Ethernet I/F. 
 */
int cprimod_cpri_or_enet_port_get(int unit, int port, int* val);

/*! 
 * cprimod_cpri_port_rx_enable_set
 *
 * @brief  Set Get if Rx enabled  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  val             - If 1 CPRI I/F 0 Ethernet I/F. 
 */
int cprimod_cpri_port_rx_enable_set(int unit, int port, int val);
/*! 
 * cprimod_cpri_port_rx_enable_get
 *
 * @brief  Set Get if Rx enabled  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  val             - If 1 CPRI I/F 0 Ethernet I/F. 
 */
int cprimod_cpri_port_rx_enable_get(int unit, int port, int* val);

/*! 
 * cprimod_cpri_port_tx_enable_set
 *
 * @brief  Set Get if Tx enabled  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [in]  val             - If 1 CPRI I/F 0 Ethernet I/F. 
 */
int cprimod_cpri_port_tx_enable_set(int unit, int port, int val);
/*! 
 * cprimod_cpri_port_tx_enable_get
 *
 * @brief  Set Get if Tx enabled  
 *
 * @param [in]  unit            - unit id
 * @param [in]  port            - logical port
 * @param [out]  val             - If 1 CPRI I/F 0 Ethernet I/F. 
 */
int cprimod_cpri_port_tx_enable_get(int unit, int port, int* val);

#endif /*_CPRIMOD_H_*/
