/*
 * $Id: $
 * $Copyright: (c) 2017 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_SW_STATE_LOGGING_H
#define _DNX_SW_STATE_LOGGING_H

#if defined(DNX_SW_STATE_LOGGING)
#include <bcm/types.h>
#include <soc/types.h>

#define DNX_SW_STATE_LOG(func_type, bsl_ls, module, value_addr, format, ...) \
    do { \
        if (LOG_CHECK(BSL_VERBOSE | bsl_ls)) { \
            dnx_sw_state_log(func_type, bsl_ls, #func_type, (void*)value_addr, sizeof(*value_addr), format, __VA_ARGS__); \
        } \
    } while(0)

typedef enum dnx_sw_state_func_type_logging
{
    DNX_SW_STATE_INIT_LOGGING,
    DNX_SW_STATE_DEINIT_LOGGING,
    DNX_SW_STATE_IS_INIT_LOGGING,
    DNX_SW_STATE_GET_LOGGING,
    DNX_SW_STATE_SET_LOGGING,
    DNX_SW_STATE_ALLOC_LOGGING,
    DNX_SW_STATE_FREE_LOGGING,
    DNX_SW_STATE_IS_ALLOC_LOGGING,
    DNX_SW_STATE_PTR_ALLOC_LOGGING,
    DNX_SW_STATE_PTR_FREE_LOGGING,
    DNX_SW_STATE_ALLOC_BITMAP_LOGGING,
    DNX_SW_STATE_MUTEX_CREATE_LOGGING,
    DNX_SW_STATE_MUTEX_DESTROY_LOGGING,
    DNX_SW_STATE_MUTEX_TAKE_LOGGING,
    DNX_SW_STATE_MUTEX_GIVE_LOGGING,
    DNX_SW_STATE_PBMP_NEQ_LOGGING,
    DNX_SW_STATE_PBMP_EQ_LOGGING,
    DNX_SW_STATE_PBMP_MEMBER_LOGGING,
    DNX_SW_STATE_PBMP_NOT_NULL_LOGGING,
    DNX_SW_STATE_PBMP_IS_NULL_LOGGING,
    DNX_SW_STATE_PBMP_COUNT_LOGGING,
    DNX_SW_STATE_PBMP_XOR_LOGGING,
    DNX_SW_STATE_PBMP_REMOVE_LOGGING,
    DNX_SW_STATE_PBMP_ASSIGN_LOGGING,
    DNX_SW_STATE_PBMP_GET_LOGGING,
    DNX_SW_STATE_PBMP_AND_LOGGING,
    DNX_SW_STATE_PBMP_NEGATE_LOGGING,
    DNX_SW_STATE_PBMP_OR_LOGGING,
    DNX_SW_STATE_PBMP_CLEAR_LOGGING,
    DNX_SW_STATE_PBMP_PORT_ADD_LOGGING,
    DNX_SW_STATE_PBMP_PORT_FLIP_LOGGING,
    DNX_SW_STATE_PBMP_PORT_REMOVE_LOGGING,
    DNX_SW_STATE_PBMP_PORT_SET_LOGGING,
    DNX_SW_STATE_PBMP_PORTS_RANGE_ADD_LOGGING,
    DNX_SW_STATE_PBMP_FMT_LOGGING,
    DNX_SW_STATE_MEMREAD_LOGGING,
    DNX_SW_STATE_MEMWRITE_LOGGING,
    DNX_SW_STATE_MEMCMP_LOGGING,
    DNX_SW_STATE_MEMSET_LOGGING,
    DNX_SW_STATE_RANGE_READ_LOGGING,
    DNX_SW_STATE_RANGE_WRITE_LOGGING,
    DNX_SW_STATE_RANGE_FILL_LOGGING,
    DNX_SW_STATE_OCC_BM_ALLOC_NEXT_LOGGING,
    DNX_SW_STATE_OCC_BM_CLEAR_LOGGING,
    DNX_SW_STATE_OCC_BM_CREATE_LOGGING,
    DNX_SW_STATE_OCC_BM_DESTROY_LOGGING,
    DNX_SW_STATE_OCC_BM_GET_NEXT_IN_RANGE_LOGGING,
    DNX_SW_STATE_OCC_BM_GET_NEXT_LOGGING,
    DNX_SW_STATE_OCC_BM_IS_OCCUPIED_LOGGING,
    DNX_SW_STATE_OCC_BM_STATUS_SET_LOGGING,
    DNX_SW_STATE_OCC_BM_PRINT_LOGGING,
    DNX_SW_STATE_HTB_CREATE_LOGGING,
    DNX_SW_STATE_HTB_DESTROY_LOGGING,
    DNX_SW_STATE_HTB_INSERT_LOGGING,
    DNX_SW_STATE_HTB_FIND_LOGGING,
    DNX_SW_STATE_HTB_GET_NEXT_LOGGING,
    DNX_SW_STATE_HTB_CLEAR_LOGGING,
    DNX_SW_STATE_HTB_DELETE_LOGGING,
    DNX_SW_STATE_HTB_INSERT_AT_INDEX_LOGGING,
    DNX_SW_STATE_HTB_DELETE_BY_INDEX_LOGGING,
    DNX_SW_STATE_HTB_GET_BY_INDEX_LOGGING,
    DNX_SW_STATE_HTB_PRINT_LOGGING,
    DNX_SW_STATE_MULTI_SET_CREATE_LOGGING,
    DNX_SW_STATE_MULTI_SET_DESTROY_LOGGING,
    DNX_SW_STATE_MULTI_SET_FIND_LOGGING,
    DNX_SW_STATE_MULTI_SET_GET_NEXT_LOGGING,
    DNX_SW_STATE_MULTI_SET_CLEAR_LOGGING,
    DNX_SW_STATE_MULTI_SET_PRINT_LOGGING,
    DNX_SW_STATE_MULTI_SET_ADD_LOGGING,
    DNX_SW_STATE_MULTI_SET_ADD_AT_INDEX_LOGGING,
    DNX_SW_STATE_MULTI_SET_ADD_AT_INDEX_MULTIPLE_LOGGING,
    DNX_SW_STATE_MULTI_SET_GET_BY_INDEX_LOGGING,
    DNX_SW_STATE_MULTI_SET_REMOVE_LOGGING,
    DNX_SW_STATE_MULTI_SET_REMOVE_BY_INDEX_LOGGING,
    DNX_SW_STATE_MULTI_SET_REMOVE_BY_INDEX_MULTIPLE_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_CREATE_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_DESTROY_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_PIECE_ALLOC_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_PIECE_FREE_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_PRINT_LOGGING,
    DNX_SW_STATE_LL_CREATE_EMPTY_LOGGING,
    DNX_SW_STATE_LL_DESTROY_LOGGING,
    DNX_SW_STATE_LL_NOF_ELEMENTS_LOGGING,
    DNX_SW_STATE_LL_NODE_KEY_LOGGING,
    DNX_SW_STATE_LL_NODE_VALUE_LOGGING,
    DNX_SW_STATE_LL_NODE_UPDATE_LOGGING,
    DNX_SW_STATE_LL_NEXT_NODE_LOGGING,
    DNX_SW_STATE_LL_PREVIOUS_NODE_LOGGING,
    DNX_SW_STATE_LL_ADD_LOGGING,
    DNX_SW_STATE_LL_ADD_FIRST_LOGGING,
    DNX_SW_STATE_LL_ADD_LAST_LOGGING,
    DNX_SW_STATE_LL_ADD_BEFORE_LOGGING,
    DNX_SW_STATE_LL_ADD_AFTER_LOGGING,
    DNX_SW_STATE_LL_REMOVE_NODE_LOGGING,
    DNX_SW_STATE_LL_GET_LAST_LOGGING,
    DNX_SW_STATE_LL_GET_FIRST_LOGGING,
    DNX_SW_STATE_LL_FIND_LOGGING,
    DNX_SW_STATE_LL_PRINT_LOGGING,
    DNX_SW_STATE_BIT_SET_LOGGING,
    DNX_SW_STATE_BIT_CLEAR_LOGGING,
    DNX_SW_STATE_BIT_GET_LOGGING,
    DNX_SW_STATE_BIT_RANGE_READ_LOGGING,
    DNX_SW_STATE_BIT_RANGE_WRITE_LOGGING,
    DNX_SW_STATE_BIT_RANGE_AND_LOGGING,
    DNX_SW_STATE_BIT_RANGE_OR_LOGGING,
    DNX_SW_STATE_BIT_RANGE_XOR_LOGGING,
    DNX_SW_STATE_BIT_RANGE_REMOVE_LOGGING,
    DNX_SW_STATE_BIT_RANGE_NEGATE_LOGGING,
    DNX_SW_STATE_BIT_RANGE_CLEAR_LOGGING,
    DNX_SW_STATE_BIT_RANGE_SET_LOGGING,
    DNX_SW_STATE_BIT_RANGE_NULL_LOGGING,
    DNX_SW_STATE_BIT_RANGE_TEST_LOGGING,
    DNX_SW_STATE_BIT_RANGE_EQ_LOGGING,
    DNX_SW_STATE_CB_DB_GET_CB_LOGGING,
    DNX_SW_STATE_CB_DB_REGISTER_CB_LOGGING,
    DNX_SW_STATE_CB_DB_UNREGISTER_CB_LOGGING,
    DNX_SW_STATE_BIT_RANGE_COUNT_LOGGING
} dnx_sw_state_func_type_logging_e;

void dnx_sw_state_log(
    dnx_sw_state_func_type_logging_e func_type,
    uint32 bsl_ls,
    char *func_name,
    void *value_addr,
    uint32 size,
    char *format,
    ...);

void dnx_sw_state_print_mem_to_string(
    void const *vp,
    uint32 n,
    char **str);

#else

#define DNX_SW_STATE_LOG(func_type, bsl_ls, module, value_addr, format, ...)

#endif /* DNX_SW_STATE_LOGGING */
#endif /* _DNX_SW_STATE_LOGGING_H */
