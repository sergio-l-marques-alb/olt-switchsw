/*
 *
 * Copyright (C) 1992-2006 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -c core iso -snmpFrameworkMIB -apo -row_status -userpart -separate_type_file 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_CORETYPE_H
#define SR_CORETYPE_H


#ifdef __cplusplus
extern "C" {
#endif

#include "userpart.h"


/*
 * The system family. 
 */


typedef
struct _system_t {
        OctetString     *sysDescr;
        OID             *sysObjectID;
        SR_UINT32       sysUpTime;
        OctetString     *sysContact;
        OctetString     *sysName;
        OctetString     *sysLocation;
        SR_INT32        sysServices;
        SR_UINT32       sysORLastChange;
#ifdef U_system
U_system
#endif /* U_system */
        char            valid[2];
        char            mod[2];
} system_t;


/*
 * The sysOREntry family. 
 */


typedef
struct _sysOREntry_t {
        SR_INT32        sysORIndex;
        OID             *sysORID;
        OctetString     *sysORDescr;
        SR_UINT32       sysORUpTime;
#ifdef U_sysOREntry
U_sysOREntry
#endif /* U_sysOREntry */
        char            valid[1];
} sysOREntry_t;


#if 0 /* LVL7 */
/*
 * The interfaces family. 
 */


typedef
struct _interfaces_t {
        SR_INT32        ifNumber;
#ifdef U_interfaces
U_interfaces
#endif /* U_interfaces */
        char            valid[1];
} interfaces_t;


/*
 * The ifEntry family. 
 */


typedef
struct _ifEntry_t {
        SR_INT32        ifIndex;
        OctetString     *ifDescr;
        SR_INT32        ifType;
        SR_INT32        ifMtu;
        SR_UINT32       ifSpeed;
        OctetString     *ifPhysAddress;
        SR_INT32        ifAdminStatus;
        SR_INT32        ifOperStatus;
        SR_UINT32       ifLastChange;
        SR_UINT32       ifInOctets;
        SR_UINT32       ifInUcastPkts;
        SR_UINT32       ifInNUcastPkts;
        SR_UINT32       ifInDiscards;
        SR_UINT32       ifInErrors;
        SR_UINT32       ifInUnknownProtos;
        SR_UINT32       ifOutOctets;
        SR_UINT32       ifOutUcastPkts;
        SR_UINT32       ifOutNUcastPkts;
        SR_UINT32       ifOutDiscards;
        SR_UINT32       ifOutErrors;
        SR_UINT32       ifOutQLen;
        OID             *ifSpecific;
#ifdef U_ifEntry
U_ifEntry
#endif /* U_ifEntry */
        char            valid[3];
        char            mod[3];
} ifEntry_t;
#endif /* LVL7 */

/*
 * The atEntry family. 
 */


typedef
struct _atEntry_t {
        SR_INT32        atIfIndex;
        OctetString     *atPhysAddress;
        OctetString     *atNetAddress;
#ifdef U_atEntry
U_atEntry
#endif /* U_atEntry */
        char            valid[1];
        char            mod[1];
} atEntry_t;


/*
 * The ip family. 
 */


typedef
struct _ip_t {
        SR_INT32        ipForwarding;
        SR_INT32        ipDefaultTTL;
        SR_UINT32       ipInReceives;
        SR_UINT32       ipInHdrErrors;
        SR_UINT32       ipInAddrErrors;
        SR_UINT32       ipForwDatagrams;
        SR_UINT32       ipInUnknownProtos;
        SR_UINT32       ipInDiscards;
        SR_UINT32       ipInDelivers;
        SR_UINT32       ipOutRequests;
        SR_UINT32       ipOutDiscards;
        SR_UINT32       ipOutNoRoutes;
        SR_INT32        ipReasmTimeout;
        SR_UINT32       ipReasmReqds;
        SR_UINT32       ipReasmOKs;
        SR_UINT32       ipReasmFails;
        SR_UINT32       ipFragOKs;
        SR_UINT32       ipFragFails;
        SR_UINT32       ipFragCreates;
        SR_UINT32       ipRoutingDiscards;
#ifdef U_ip
U_ip
#endif /* U_ip */
        char            valid[3];
        char            mod[3];
} ip_t;


/*
 * The ipAddrEntry family. 
 */


typedef
struct _ipAddrEntry_t {
        SR_UINT32       ipAdEntAddr;
        SR_INT32        ipAdEntIfIndex;
        SR_UINT32       ipAdEntNetMask;
        SR_INT32        ipAdEntBcastAddr;
        SR_INT32        ipAdEntReasmMaxSize;
#ifdef U_ipAddrEntry
U_ipAddrEntry
#endif /* U_ipAddrEntry */
        char            valid[1];
} ipAddrEntry_t;


/*
 * The ipRouteEntry family. 
 */


typedef
struct _ipRouteEntry_t {
        SR_UINT32       ipRouteDest;
        SR_INT32        ipRouteIfIndex;
        SR_INT32        ipRouteMetric1;
        SR_INT32        ipRouteMetric2;
        SR_INT32        ipRouteMetric3;
        SR_INT32        ipRouteMetric4;
        SR_UINT32       ipRouteNextHop;
        SR_INT32        ipRouteType;
        SR_INT32        ipRouteProto;
        SR_INT32        ipRouteAge;
        SR_UINT32       ipRouteMask;
        SR_INT32        ipRouteMetric5;
        OID             *ipRouteInfo;
#ifdef U_ipRouteEntry
U_ipRouteEntry
#endif /* U_ipRouteEntry */
        char            valid[2];
        char            mod[2];
} ipRouteEntry_t;


/*
 * The ipNetToMediaEntry family. 
 */


typedef
struct _ipNetToMediaEntry_t {
        SR_INT32        ipNetToMediaIfIndex;
        OctetString     *ipNetToMediaPhysAddress;
        SR_UINT32       ipNetToMediaNetAddress;
        SR_INT32        ipNetToMediaType;
#ifdef U_ipNetToMediaEntry
U_ipNetToMediaEntry
#endif /* U_ipNetToMediaEntry */
        char            valid[1];
        char            mod[1];
} ipNetToMediaEntry_t;


/*
 * The icmp family. 
 */


typedef
struct _icmp_t {
        SR_UINT32       icmpInMsgs;
        SR_UINT32       icmpInErrors;
        SR_UINT32       icmpInDestUnreachs;
        SR_UINT32       icmpInTimeExcds;
        SR_UINT32       icmpInParmProbs;
        SR_UINT32       icmpInSrcQuenchs;
        SR_UINT32       icmpInRedirects;
        SR_UINT32       icmpInEchos;
        SR_UINT32       icmpInEchoReps;
        SR_UINT32       icmpInTimestamps;
        SR_UINT32       icmpInTimestampReps;
        SR_UINT32       icmpInAddrMasks;
        SR_UINT32       icmpInAddrMaskReps;
        SR_UINT32       icmpOutMsgs;
        SR_UINT32       icmpOutErrors;
        SR_UINT32       icmpOutDestUnreachs;
        SR_UINT32       icmpOutTimeExcds;
        SR_UINT32       icmpOutParmProbs;
        SR_UINT32       icmpOutSrcQuenchs;
        SR_UINT32       icmpOutRedirects;
        SR_UINT32       icmpOutEchos;
        SR_UINT32       icmpOutEchoReps;
        SR_UINT32       icmpOutTimestamps;
        SR_UINT32       icmpOutTimestampReps;
        SR_UINT32       icmpOutAddrMasks;
        SR_UINT32       icmpOutAddrMaskReps;
#ifdef U_icmp
U_icmp
#endif /* U_icmp */
        char            valid[4];
} icmp_t;


/*
 * The tcp family. 
 */


typedef
struct _tcp_t {
        SR_INT32        tcpRtoAlgorithm;
        SR_INT32        tcpRtoMin;
        SR_INT32        tcpRtoMax;
        SR_INT32        tcpMaxConn;
        SR_UINT32       tcpActiveOpens;
        SR_UINT32       tcpPassiveOpens;
        SR_UINT32       tcpAttemptFails;
        SR_UINT32       tcpEstabResets;
        SR_UINT32       tcpCurrEstab;
        SR_UINT32       tcpInSegs;
        SR_UINT32       tcpOutSegs;
        SR_UINT32       tcpRetransSegs;
        SR_UINT32       tcpInErrs;
        SR_UINT32       tcpOutRsts;
#ifdef U_tcp
U_tcp
#endif /* U_tcp */
        char            valid[2];
} tcp_t;


/*
 * The tcpConnEntry family. 
 */


typedef
struct _tcpConnEntry_t {
        SR_INT32        tcpConnState;
        SR_UINT32       tcpConnLocalAddress;
        SR_INT32        tcpConnLocalPort;
        SR_UINT32       tcpConnRemAddress;
        SR_INT32        tcpConnRemPort;
#ifdef U_tcpConnEntry
U_tcpConnEntry
#endif /* U_tcpConnEntry */
        char            valid[1];
        char            mod[1];
} tcpConnEntry_t;


/*
 * The udp family. 
 */


typedef
struct _udp_t {
        SR_UINT32       udpInDatagrams;
        SR_UINT32       udpNoPorts;
        SR_UINT32       udpInErrors;
        SR_UINT32       udpOutDatagrams;
#ifdef U_udp
U_udp
#endif /* U_udp */
        char            valid[1];
} udp_t;


/*
 * The udpEntry family. 
 */


typedef
struct _udpEntry_t {
        SR_UINT32       udpLocalAddress;
        SR_INT32        udpLocalPort;
#ifdef U_udpEntry
U_udpEntry
#endif /* U_udpEntry */
        char            valid[1];
} udpEntry_t;


/*
 * The egp family. 
 */


typedef
struct _egp_t {
        SR_UINT32       egpInMsgs;
        SR_UINT32       egpInErrors;
        SR_UINT32       egpOutMsgs;
        SR_UINT32       egpOutErrors;
        SR_INT32        egpAs;
#ifdef U_egp
U_egp
#endif /* U_egp */
        char            valid[1];
} egp_t;


/*
 * The egpNeighEntry family. 
 */


typedef
struct _egpNeighEntry_t {
        SR_INT32        egpNeighState;
        SR_UINT32       egpNeighAddr;
        SR_INT32        egpNeighAs;
        SR_UINT32       egpNeighInMsgs;
        SR_UINT32       egpNeighInErrs;
        SR_UINT32       egpNeighOutMsgs;
        SR_UINT32       egpNeighOutErrs;
        SR_UINT32       egpNeighInErrMsgs;
        SR_UINT32       egpNeighOutErrMsgs;
        SR_UINT32       egpNeighStateUps;
        SR_UINT32       egpNeighStateDowns;
        SR_INT32        egpNeighIntervalHello;
        SR_INT32        egpNeighIntervalPoll;
        SR_INT32        egpNeighMode;
        SR_INT32        egpNeighEventTrigger;
#ifdef U_egpNeighEntry
U_egpNeighEntry
#endif /* U_egpNeighEntry */
        char            valid[2];
} egpNeighEntry_t;


/*
 * The snmp family. 
 */


typedef
struct _snmp_t {
        SR_UINT32       snmpInPkts;
        SR_UINT32       snmpOutPkts;
        SR_UINT32       snmpInBadVersions;
        SR_UINT32       snmpInBadCommunityNames;
        SR_UINT32       snmpInBadCommunityUses;
        SR_UINT32       snmpInASNParseErrs;
        SR_UINT32       snmpInTooBigs;
        SR_UINT32       snmpInNoSuchNames;
        SR_UINT32       snmpInBadValues;
        SR_UINT32       snmpInReadOnlys;
        SR_UINT32       snmpInGenErrs;
        SR_UINT32       snmpInTotalReqVars;
        SR_UINT32       snmpInTotalSetVars;
        SR_UINT32       snmpInGetRequests;
        SR_UINT32       snmpInGetNexts;
        SR_UINT32       snmpInSetRequests;
        SR_UINT32       snmpInGetResponses;
        SR_UINT32       snmpInTraps;
        SR_UINT32       snmpOutTooBigs;
        SR_UINT32       snmpOutNoSuchNames;
        SR_UINT32       snmpOutBadValues;
        SR_UINT32       snmpOutGenErrs;
        SR_UINT32       snmpOutGetRequests;
        SR_UINT32       snmpOutGetNexts;
        SR_UINT32       snmpOutSetRequests;
        SR_UINT32       snmpOutGetResponses;
        SR_UINT32       snmpOutTraps;
        SR_INT32        snmpEnableAuthenTraps;
        SR_UINT32       snmpSilentDrops;
        SR_UINT32       snmpProxyDrops;
#ifdef U_snmp
U_snmp
#endif /* U_snmp */
        char            valid[4];
        char            mod[4];
} snmp_t;


/*
 * The srAgentInfo family. 
 */


typedef
struct _srAgentInfo_t {
        OctetString     *srAgentInfoDescr;
        OctetString     *srAgentInfoOSFlavor;
#ifdef U_srAgentInfo
U_srAgentInfo
#endif /* U_srAgentInfo */
        char            valid[1];
} srAgentInfo_t;


/*
 * The apoCapabilitiesObjects family. 
 */


typedef
struct _apoCapabilitiesObjects_t {
        OctetString     *apoSupportedPduClasses;
        OctetString     *apoSupportedSnmpVersions;
        OctetString     *apoSupportedSecurityModels;
        OctetString     *apoSupportedAuthProtocols;
        OctetString     *apoSupportedPrivProtocols;
#ifdef U_apoCapabilitiesObjects
U_apoCapabilitiesObjects
#endif /* U_apoCapabilitiesObjects */
        char            valid[1];
} apoCapabilitiesObjects_t;


/*
 * The apoAdditionalSupportedSecurityModelsEntry family. 
 */


typedef
struct _apoAdditionalSupportedSecurityModelsEntry_t {
        SR_INT32        apoAdditionalSupportedSecurityModels;
        OctetString     *apoAdditionalSupportedSecurityModelsDescr;
#ifdef U_apoAdditionalSupportedSecurityModelsEntry
U_apoAdditionalSupportedSecurityModelsEntry
#endif /* U_apoAdditionalSupportedSecurityModelsEntry */
        char            valid[1];
} apoAdditionalSupportedSecurityModelsEntry_t;


/*
 * The apoAdditionalSupportedAuthProtocolsEntry family. 
 */


typedef
struct _apoAdditionalSupportedAuthProtocolsEntry_t {
        OID             *apoAdditionalSupportedAuthProtocols;
        OctetString     *apoAdditionalSupportedAuthProtocolsDescr;
#ifdef U_apoAdditionalSupportedAuthProtocolsEntry
U_apoAdditionalSupportedAuthProtocolsEntry
#endif /* U_apoAdditionalSupportedAuthProtocolsEntry */
        char            valid[1];
} apoAdditionalSupportedAuthProtocolsEntry_t;


/*
 * The apoAdditionalSupportedPrivProtocolsEntry family. 
 */


typedef
struct _apoAdditionalSupportedPrivProtocolsEntry_t {
        OID             *apoAdditionalSupportedPrivProtocols;
        OctetString     *apoAdditionalSupportedPrivProtocolsDescr;
#ifdef U_apoAdditionalSupportedPrivProtocolsEntry
U_apoAdditionalSupportedPrivProtocolsEntry
#endif /* U_apoAdditionalSupportedPrivProtocolsEntry */
        char            valid[1];
} apoAdditionalSupportedPrivProtocolsEntry_t;


/*
 * The snmpTrap family. 
 */


typedef
struct _snmpTrap_t {
        OID             *snmpTrapOID;
        OID             *snmpTrapEnterprise;
#ifdef U_snmpTrap
U_snmpTrap
#endif /* U_snmpTrap */
        char            valid[1];
} snmpTrap_t;


/*
 * The snmpSet family. 
 */


typedef
struct _snmpSet_t {
        SR_INT32        snmpSetSerialNo;
#ifdef U_snmpSet
U_snmpSet
#endif /* U_snmpSet */
        char            valid[1];
} snmpSet_t;


#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_CORETYPE_H */
