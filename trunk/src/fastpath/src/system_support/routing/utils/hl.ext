/********************************************************************
 *
 * (C) Copyright Broadcom Corporation 2003-2007
 *
 * *********************************************************************
 *
 * @filename     hl.ext
 *
 * @purpose      Provides external API for the hash list object
 *
 * @component    Routing
 *
 * @comments
 *
 * @create       12/01/1997
 *
 * @author       Alex Ossinski
 *
 * @end
 *
 * ********************************************************************/



#ifndef _hash_list_ext
#define _hash_list_ext

#include "std.h"
#include "common.h"
#include "local.h"

#define HL_SMALL_TABLE_SIZE 17  /* default small table size */
#define HL_LARGE_TABLE_SIZE 139 /* default lagre table size */
#define SORTED_DEC     1   /* use decrement order during the sorted insert */
#define OWN_LINK     2          /* use HL object memory allocation and linking  */
                                /*   during the insert routine                  */
#define KEY_IS_VALUE 4          /* key and value are equal                      */
#define FREE_ON_DEL    8        /* deallocate memory for all deleted            */
                                /*  data even if OWN_LINK is 0                  */
#define KEY_AT_START    16      /* key place is at the start of key string      */

e_Err HL_Init  (byte flags,                /* control flags */
                byte keyLen,               /* the key length in bytes */
                word keyOffset,            /* key offset in the handle structure */
                word tableSize,            /* numbers of fields in hash list */
                word (*f_hash)(byte *),    /* user defined hash function if NULLP then   */
                                           /*  hash function will be define in hash list */
                byte *(*f_getKey)(void *), /* user defined function to get key via       */
                                           /*  the handle, if NULLP key is in the handle structure */
                t_Handle *p_objId);        /* pointer to put hash list Id */


e_Err HL_Destroy ( t_Handle *p_objId);     /* pointer to the hash list Id */

e_Err HL_Insert( t_Handle objId,           /* hash list object Id */
                 byte *key,                /* key to search */
                 void *handle);            /* handle to be inserted*/

e_Err HL_SortedInsert( t_Handle objId,     /* hash list object Id */
                byte *key,                 /* key to calculate field number */
                void *handle);             /* handle to be inserted */

/* Replace existing value with new value with same key. */
e_Err HL_Change(t_Handle objId, byte *key, void *value);

e_Err HL_FindFirst( t_Handle objId,        /* hash list object Id */
                    byte *key,             /* key to find */
                    void **handle);        /* pointer to put handle or NULLP */

e_Err HL_FindNext( t_Handle objId,         /* hash list object Id */
                   byte *key,              /* key to find */
                   void *lastValue,        /* last found handle */
                   void **handle);         /* pointer to put handle or NULLP */

e_Err HL_DeleteFirst( t_Handle objId,      /* hash list object Id */
                      byte *key,           /* key to find */
                      void **handle);      /* pointer to put deleted handle or NULLP     */
                                           /*  if 'handle' specified deleted data memory */
                                           /*  deallocation will be blocked              */

e_Err HL_Delete ( t_Handle objId,          /* hash list object Id */
                  byte     *key,           /* key to find */
                  void     *handle);       /* handle for compare */

/* Browse entire match table, calling  f_browse for every entry. */
/*  If f_browse returns FALSE, delete the entry from hash list   */

e_Err HL_Browse( t_Handle objId,               /* hash list object Id */
                Bool (*f_browse)(void *,ulng), /* user browse function */
                ulng flag);                    /* user defined flag    */

e_Err HL_GetEntriesNmb(t_Handle objId, word *entriesNmb);

e_Err HL_GetFirst(t_Handle objId, void **handle);

e_Err HL_GetNext(t_Handle objId, void **handle, void *currentValue);


e_Err HL_Move(t_Handle objId,   /* hash list object Id */
              byte *oldKey,     /* key to be found */
              void *handle,     /* handle to be found */
              byte *newKey);    /* key to be chaged */

void HL_Cleanup(t_Handle objId, Bool delflag);

void HL_SetKeyLen(t_Handle objId, byte keyLen);


e_Err HL_Constructor  (IN     t_Handle             dParam,
                       IN OUT t_Handle             fTarg,
                       OUT    t_Handle             *pp_objId);

#endif /*_hash_list_ext*/
