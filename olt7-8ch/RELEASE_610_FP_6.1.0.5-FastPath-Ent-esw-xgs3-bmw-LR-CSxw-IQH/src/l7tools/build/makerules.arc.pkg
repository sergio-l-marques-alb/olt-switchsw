##############################################################################
#
# makerules.arc.pkg
#
# Purpose:  
#      Provides build rules to create an archive file from the set of 
#      source files contained in the specified $(sub_path) subdirectory.
#      This archive is used when pre-linking the package-level library.
#
# Note:
#      This is primarily intended for building vendor source code whose
#      source files are not uniquely named throughout its source tree.
#      This file can be included multiple times, each with a different
#      $(sub_path) to create different archives.
#
# Note:
#      This file is used in conjunction with 'bldlib' processing.
#
##############################################################################


# Specific information needed for building special (i.e. vendor code) archives.
#
# Specify archive source base location and common prefix for output names:
#   - ARC_BASE    := parent directory containing the source tree to build.
#   - ARC_TOPOUT  := top level output directory containing all archive subdirs.
#   - ARC_PREFIX  := common prefix used for archive file names.
#
# The following are updated prior to each include of makerules.arc.pkg:
# (Note that these cannot be displayed accurately via debug-variables rule.)
#   - ARC_PATH    := name of a single source subdirectory to build within the subtree.
#   - ARC_INCLUDE := lists specific source files to build in addition to sub_src.
#   - ARC_EXCLUDE := lists specific source files not to build from sub_src.
#
# The following must be initialized empty so that contents can be accumulated within:
#   - ARC_DIRLIST := list of all archive output directories.
#

od = $(ARC_PREFIX)_$(subst /,_,$(subst -,_,$(ARC_PATH)))

outpath := $(ARC_TOPOUT)/$(od)
sources := sources_$(od)
objects := objects_$(od)
arcname := arcname_$(od)

ARC_DIRLIST += $(outpath)

# Manipulate the source file variables for specific directory or file build requests.
#
# Note: It is assumed that a local file build takes precedence over a local directory.
#       A local file build reuses the CMD_LOCAL_DIR varaible to determine if the source
#       file's path is defined for the current package.
#
# Note: Similar logic is used in both make.magic.pkg and makerules.arc.pkg.
#
arc_sources = $(ARC_BASE)/$(ARC_PATH)/*.$(type)
ifeq (1,$(CMD_LOCAL_DIR_OR_FILE))
  temp_arcpath := $(subst ../,$(BLANK),$(ARC_BASE)/$(ARC_PATH))
  ifeq ($(temp_arcpath),$(CMD_LOCAL_DIR))
    ifneq (,$(CMD_LOCAL_FILE))
      arc_sources =
      ARC_EXCLUDE :=
      ARC_INCLUDE := $(CMD_LOCAL_FILE)
    else
      arc_sources = $(ARC_BASE)/$(ARC_PATH)/*.$(type)
    endif
  else  
    arc_sources =
    ARC_INCLUDE :=
    ARC_EXCLUDE :=
  endif
endif

# List all source files in the package,
# filtering out those source files specifically excluded from the source paths,
# then add in individually-specified source files.
#
sources := $(wildcard $(foreach type, $(SRC_FILE_TYPES), $(arc_sources)))
sources := $(filter-out $(addprefix $(ARC_BASE)/$(ARC_PATH)/,$(ARC_EXCLUDE)), $(sources))
sources += $(addprefix $(ARC_BASE)/$(ARC_PATH)/, $(ARC_INCLUDE))

objects := $(foreach type, $(SRC_FILE_TYPES), \
		$(addprefix $(outpath)/, $(filter %.o,$(notdir $(sources:.$(type)=.o)))))

arcname := $(od).a


# Add archive to list.
#
LIBARCS += $(arcname)


# Explicit rule to build this vendor archive file.
#
$(arcname): $(objects)
ifeq (0,$(CMD_LOCAL_DIR_OR_FILE))
  ifneq (,$(strip $(objects)))
	$(ARCHIVING_MSG)
	-$(DBG) $(RM) $@
	$(DBG) $(AR) -rcs $@ $^
	$(DBG) sleep $(TOUCH_SLEEP)
	$(DBG) touch $@
  endif
endif


# Special compilation rules for vendor objects in own output subtree.
#

create_dir = +@$(shell [ -d $(dir $@) ] || $(MKDIRP) $(dir $@))

# This changes the .d rule from xxx.o: to e.g. vendor/_fp_vend_something/xxx.o:
define fix-depend
  @mv $(@:.o=.d) $(@:.o=.P)
  @sed -e 's#^$*\.o\([/s*:]\)#$@\1#' <$(@:.o=.P) >$(@:.o=.d)
  -@$(RM) $(@:.o=.P)
endef

$(outpath)/%.o: $(ARC_BASE)/$(ARC_PATH)/%.c
	$(COMPILING_MSG)
	$(create_dir)
	$(MAKE_C_CMD)
	$(fix-depend)

$(outpath)/%.o: $(ARC_BASE)/$(ARC_PATH)/%.cpp
	$(COMPILING_MSG)
	$(create_dir)
	$(MAKE_CPP_CMD)
	$(fix-depend)

$(outpath)/%.o: $(ARC_BASE)/$(ARC_PATH)/%.s
	$(COMPILING_MSG)
	$(create_dir)
	$(MAKE_S_CMD)

