/*
 * $Id:dpp_config_defs.csv,v 1.1.2.5 Broadcom SDK $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * This file is auto-generated by autoCoder
 * DO NOT EDIT THIS FILE!
 *
 */
#ifndef DPP_CONFIG_DEFS
#define DPP_CONFIG_DEFS

#include <soc/error.h>
#include <soc/dcmn/error.h>
#include <soc/drv.h>
#include <sal/core/alloc.h>
#include <soc/dpp/SAND/Utils/sand_integer_arithmetic.h>

#include <soc/dpp/soc_dpp_arad_config_defs.h>
#include <soc/dpp/soc_dpp_petrab_config_defs.h>
#include <soc/dpp/soc_dpp_jericho_config_defs.h>
#include <soc/dpp/soc_dpp_ardon_config_defs.h>

/************************************/
/*          Structs define          */
/************************************/

/* Implementation-specific defines */

/*      Configuration defines       */
typedef struct soc_dpp_defines_s {
    uint32     soc_dpp_defs_nof_flows;                                /* Number of flows */
    uint32     soc_dpp_defs_nof_flows_per_pipe;                       /* Number of flows per pipe */
    uint32     soc_dpp_defs_nof_queues;                               /* Number of queues */
    uint32     soc_dpp_defs_nof_queues_per_pipe;                      /* Number of queues per pipe */
    int32      soc_dpp_defs_max_queues;                               /* Reserve last queues for special settings such as default ISP */
    uint32     soc_dpp_defs_ocb_memory_size;                          /* Total size of DRAM buffers used for OCB (Full Multicast and Unicast) in Mb.  */
    uint32     soc_dpp_defs_hw_dram_interfaces_max;                   /* Maximal number of DRAM interfaces. */
    uint32     soc_dpp_defs_nof_counter_processors;                   /* Number of counter processors */
    uint32     soc_dpp_defs_counters_per_counter_processor;           /* Number of counters per counter processor. */
    uint32     soc_dpp_defs_nof_small_counter_processors;             /* Number EGQ dedicated counter processor engines */
    uint32     soc_dpp_defs_counters_per_small_counter_processor;     /* Number of counters per EGQ dedicated counter processor. */
    uint32     soc_dpp_defs_nof_counter_fifos;                        /* Number of counter processors fifos */
    uint32     soc_dpp_defs_max_nof_fifos_per_counter;                /* The maximum number of counter processors per FIFO */
    uint32     soc_dpp_defs_counter_fifo_depth;                       /* The DRAM size per FIFO */
    uint32     soc_dpp_defs_pdm_size;                                 /* PDM size */
    uint32     soc_dpp_defs_nof_fabric_macs;                          /* Total number of fabric MAC blocks. */
    uint32     soc_dpp_defs_nof_instances_fsrd;                       /* Number of FSRD block instances */
    uint32     soc_dpp_defs_nof_quads_in_fsrd;                        /* Number of FMAC blocks attached to single FSRD */
    uint32     soc_dpp_defs_nof_instances_fmac;                       /* Number of FMAC block instances */
    uint32     soc_dpp_defs_nof_fabric_links;                         /* Number of fabric links */
    uint32     soc_dpp_defs_first_fabric_link_id;                     /* first fabric link id */
    uint32     soc_dpp_defs_nof_rci_levels;                           /* Number of RCI bucket levels */
    uint32     soc_dpp_defs_nof_fabric_links_in_mac;                  /* NOF_FABRIC_LINKS / NOF_FABRIC_MACS */
    uint32     soc_dpp_defs_fabric_rmgr_units;                        /*  resolution per clock cycles of Reachability-Message-Generation-Period */
    uint32     soc_dpp_defs_fabric_rmgr_nof_links;                    /*  number of links that should be take into account for Reachability-Message-Generation-Period calculation */
    uint32     soc_dpp_defs_vrrp_mymac_cam_size;                      /* Size of the VrrpMymacCam table */
    uint32     soc_dpp_defs_vrrp_mymac_map_size;                      /* Size of the VrrpMymacMap table */
    uint32     soc_dpp_defs_vrrp_mymac_map_width;                     /* How many bits in each line of VrrpMyMacMap */
    uint32     soc_dpp_defs_isem_width;                               /* Width of isem */
    uint32     soc_dpp_defs_nof_isem_lines;                           /* Number of iesm lines */
    uint32     soc_dpp_defs_nof_isem_tables;                          /* Number of isem tables */
    uint32     soc_dpp_defs_isem_prefix_nof_bits;                     /* The length of isem prefix in bits */
    uint32     soc_dpp_defs_isem_payload_nof_bits;                    /* The length of isem pyload in bitsNumber of isem payloads */
    uint32     soc_dpp_defs_isem_payload_nof_uint32;                  /* The length of isem payload in 32-bits units */
    uint32     soc_dpp_defs_out_lif_nof_bits;                         /* The length of out lif in bits */
    uint32     soc_dpp_defs_oam_lif_nof_bits;                         /* The length of oam lif in bits */
    uint32     soc_dpp_defs_nof_local_lifs;                           /* Number of local lifs */
    uint32     soc_dpp_defs_vrrp_nof_protocol_groups;                 /* Number of vrrp protocol groups  */
    uint32     soc_dpp_defs_nof_global_lifs;                          /* Number of global lifs */
    uint32     soc_dpp_defs_nof_out_lifs;                             /* Number of out lifs */
    uint32     soc_dpp_defs_nof_oam_lifs;                             /* Number of oam lifs */
    uint32     soc_dpp_defs_lif_width;                                /* Width of lif */
    uint32     soc_dpp_defs_lem_width;                                /* Width of lem */
    uint32     soc_dpp_defs_nof_lem_lines;                            /* Width of lem payload */
    uint32     soc_dpp_defs_lem_payload_width;                        /* Number of lem payloads */
    uint32     soc_dpp_defs_nof_lem_prefixes;                         /* Number of lem prefixes */
    uint32     soc_dpp_defs_lpm_width;                                /* The width of lpm */
    uint32     soc_dpp_defs_nof_lpm_lines;                            /* Number of lpm lines */
    uint32     soc_dpp_defs_nof_lpm_payloads;                         /* Number of lpm payloads */
    uint32     soc_dpp_defs_eedb_width;                               /* The width of eedb */
    uint32     soc_dpp_defs_nof_eedb_lines;                           /* The number of eedb lines */
    uint32     soc_dpp_defs_nof_eebd_payloads;                        /* The number of eedb payloads */
    uint32     soc_dpp_defs_fec_nof_bits;                             /* The length of fec in bits */
    uint32     soc_dpp_defs_nof_fecs;                                 /* Number of fecs */
    uint32     soc_dpp_defs_nof_fec_banks;                            /* Number of fec banks */
    uint32     soc_dpp_defs_nof_fec_payloads;                         /* Number of fec payloads */
    uint32     soc_dpp_defs_nof_fids;                                 /* Number of fids */
    uint32     soc_dpp_defs_tcam_action_width;                        /* The width of tcam action */
    uint32     soc_dpp_defs_tcam_cascaded_data_nof_bits;              /* The length of tcam cascaded-data in bits */
    uint32     soc_dpp_defs_tcam_big_bank_key_nof_bits;               /* The length of tcam big bank key in bits */
    uint32     soc_dpp_defs_nof_tcam_big_bank_lines;                  /* Number of big bank lines */
    uint32     soc_dpp_defs_nof_tcam_big_banks;                       /* Number of tcam big banks */
    uint32     soc_dpp_defs_nof_tcam_small_banks;                     /* Number of tcam small banks */
    uint32     soc_dpp_defs_nof_tcam_entries_160_bits;                /* Number of 160 bits tcam entries  */
    uint32     soc_dpp_defs_nof_vsi_lowers;                           /* Number of vsi lowers */
    uint32     soc_dpp_defs_nof_vsi_uppers;                           /* Number of vsi uppers */
    uint32     soc_dpp_defs_in_rif_nof_bits;                          /* The length of in-rif in bits */
    uint32     soc_dpp_defs_nof_rifs;                                 /* Number of rifs */
    uint32     soc_dpp_defs_nof_rif_payloads;                         /* Number of rif payloads */
    uint32     soc_dpp_defs_oem1_widsth;                              /* The width of oem1 */
    uint32     soc_dpp_defs_nof_oem1_lines;                           /* Number of oem1 lines */
    uint32     soc_dpp_defs_nof_oem1_payloads;                        /* Number of oem1 payloads */
    uint32     soc_dpp_defs_oem2_widsth;                              /* The width of oem2 */
    uint32     soc_dpp_defs_nof_oem2_lines;                           /* Number of oem2 lines */
    uint32     soc_dpp_defs_nof_oem2_payloads;                        /* Number of oem2 payloads */
    uint32     soc_dpp_defs_rmep_em_width;                            /* The width of rmep-em */
    uint32     soc_dpp_defs_nof_rmep_em_lines;                        /* Number of rmep-em lines */
    uint32     soc_dpp_defs_nof_rmep_em_payloads;                     /* Number of rmep-em payloads */
    uint32     soc_dpp_defs_vlan_membership_width;                    /* The width of vlan-membership  */
    uint32     soc_dpp_defs_nof_vlan_membership_lines;                /* Number of vlan-membership lines */
    uint32     soc_dpp_defs_nof_vlan_membership_tables;               /* Number of vlan-membership tables */
    uint32     soc_dpp_defs_glem_width;                               /* The width of glem */
    uint32     soc_dpp_defs_nof_glem_lines;                           /* Number of glem lines */
    uint32     soc_dpp_defs_nof_glem_payloads;                        /* Number of glem payloads */
    uint32     soc_dpp_defs_esem_width;                               /* The width of esem */
    uint32     soc_dpp_defs_nof_esem_lines;                           /* Number of esem lines */
    uint32     soc_dpp_defs_nof_esem_payloads;                        /* Number of esem payloads */
    uint32     soc_dpp_defs_multicast_group_nof_bits;                 /* The length of multicast group in bits */
    uint32     soc_dpp_defs_nof_multicast_groups;                     /* Number of mulicats groups */
    uint32     soc_dpp_defs_nof_virtual_port_lines;                   /* Number of virtual port lines */
    uint32     soc_dpp_defs_virtual_port_nof_bits;                    /* The length of virtual port in bits */
    uint32     soc_dpp_defs_vrf_nof_bits;                             /* The length of vrf in bits */
    uint32     soc_dpp_defs_nof_vrfs;                                 /* Number of vrfs */
    uint32     soc_dpp_defs_topology_id_nof_bits;                     /* The length of topology-id in bits */
    uint32     soc_dpp_defs_nof_topology_ids;                         /* Number of topology ids */
    uint32     soc_dpp_defs_vlan_domain_nof_bits;                     /* The length of vlan domain in bits */
    uint32     soc_dpp_defs_nof_vlan_domains;                         /* Number of vlan domains */
    uint32     soc_dpp_defs_elk_lookup_payload_nof_bits;              /* The length of elk lookup payload in bits */
    uint32     soc_dpp_defs_oam_type_nof_bits;                        /* The length of oam type in bits */
    uint32     soc_dpp_defs_nof_oam_types;                            /* Number of oam types */
    uint32     soc_dpp_defs_oam_2_id_nof_bits;                        /* The length of oam 2 is in bits */
    uint32     soc_dpp_defs_oam_counter_index_nof_bits;               /* The length of oam counter index in bits */
    uint32     soc_dpp_defs_nof_oam_counter_indexes;                  /* Number of oam counter indexes */
    uint32     soc_dpp_defs_counter_nof_bits;                         /* The length of counter in bits */
    uint32     soc_dpp_defs_nof_counters;                             /* Number of counters */
    uint32     soc_dpp_defs_meter_pointer_nof_bits;                   /* The length of meter pointer in bits */
    uint32     soc_dpp_defs_nof_fem_4;                                /* Number of fem-4 */
    uint32     soc_dpp_defs_nof_fem_16;                               /* Number of fem-16 */
    uint32     soc_dpp_defs_nof_fem_19;                               /* Number of fem-19 */
    uint32     soc_dpp_defs_nof_fem_24;                               /* Number of fem-24 */
    uint32     soc_dpp_defs_fem_max_action_size_nof_bits;             /* The maximal lenghth of action size in bits */
    uint32     soc_dpp_defs_nof_ecmp;                                 /* Number of ecmp */
    uint32     soc_dpp_defs_ecmp_max_size;                            /* The maximal size of ecmp */
    uint32     soc_dpp_defs_vlan_translation_profile_nof_bits;        /* The length of vlan translation profile in bits */
    uint32     soc_dpp_defs_nof_vtt_program_selection_lines;          /* The number of vtt program selection lines */
    uint32     soc_dpp_defs_nof_vtt_programs;                         /* Number of vtt programs */
    uint32     soc_dpp_defs_in_pp_port_termination_profile_nof_bits;  /* The length of in-pp-port termination profile in bits */
    uint32     soc_dpp_defs_in_pp_port_forwarding_lookup_profile_nof_bits; /* The length of in-pp-port forwarding lookup profile in bits */
    uint8      soc_dpp_defs_nof_cores;                                /* The number of cores that the device has */
    uint32     soc_dpp_defs_max_mact_limit;                           /* Max mact limit */
    uint32     soc_dpp_defs_lem_is_dynamic_lsb;                       /* is dynamic field lsb in lem payload */
    uint32     soc_dpp_defs_lem_3b_payload_format_eei_nof_bits;       /* lem payload format 3b: nof bits of eei/arp pointer/outLif */
    uint32     soc_dpp_defs_lem_3b_payload_format_native_vsi_nof_bits; /* lem payload format 3b: nof bits of native vsi/outRif */
    uint32     soc_dpp_defs_nof_logical_ports;                        /* Number of logical ports */
    uint32     soc_dpp_defs_nof_pp_ports;                             /* Number of PP ports */
    uint32     soc_dpp_defs_nof_prge_programs;                        /* Number of prge programs */
    uint32     soc_dpp_defs_nof_prge_instr_entries;                   /* Number of instruction entries for egress editor programs (Including jump only instructions) [Jericho bug - theoretically the number should be 42 but entries 32-41 unreachable due to HW bug] */
    uint32     soc_dpp_defs_nof_egress_pmf_actions;                   /* Number of Egress PMF actions in HW */
    uint32     soc_dpp_defs_nof_eg_encap_lsbs;                        /* Number of LSBs in eg encap (bits that don't signify the bank number) */
    uint32     soc_dpp_defs_eg_encap_access_prefix_msb;               /* First bit of eg encap type signifier */
    uint32     soc_dpp_defs_eg_encap_access_prefix_lsb;               /* Last bit of eg encap type signifier */
    uint32     soc_dpp_defs_eg_encap_nof_banks;                       /* Number of banks in egress encapsulation */
    uint32     soc_dpp_defs_nof_failover_fec_ids;                     /* Number of available failover entries of type FEC, the last two values are reserved for Facility Protection */
    uint32     soc_dpp_defs_nof_failover_ingress_ids;                 /* (2 * 1024) - 2 */
    uint32     soc_dpp_defs_nof_failover_egress_ids;                  /* Number of available failover entries of type Egress */
    uint32     soc_dpp_defs_core_clock_freq_mhz;                      /* Core clock frequency default in mhz. */
    uint32     soc_dpp_defs_glob_clock_freq_mhz;                      /* Global clock frequency default in mhz. */
    uint32     soc_dpp_defs_jumbo_max_size;                           /* Max allowed packet size */
    uint32     soc_dpp_defs_cosq_egr_default_thresh_type;             /* egress default threshold type profile */
    uint32     soc_dpp_defs_modid_max_valid;                          /* Upper limit for device id. */
    uint32     soc_dpp_defs_nof_flp_program_selection_lines;          /* Number of Ingress FLP program selection lines */
    uint32     soc_dpp_defs_ihb_flp_program_selection_cam_mask_nof_bits; /* Number of bits for data or mask in the memory IHB_FLP_PROGRAM_SELECTION_CAM */
    uint32     soc_dpp_defs_nof_flp_programs;                         /* Number of flp programs */
    uint32     soc_dpp_defs_nof_flp_keys;                             /* Number of flp keys */
    uint32     soc_dpp_defs_nof_flp_16b_instructions;                 /* Number of flp 16-bits instructions */
    uint32     soc_dpp_defs_nof_flp_32b_instructions;                 /* Number of flp 32-bits instructions */
    uint32     soc_dpp_defs_nof_flp_instructions_lsb;                 /* Number of flp instructions at LSB */
    uint32     soc_dpp_defs_nof_flp_cycles;                           /* Number of flp cycles */
    uint32     soc_dpp_defs_nof_flp_80b_zones;                        /* Number of flp 80b dedicated instruction groups  */
    uint32     soc_dpp_defs_nof_flp_key_zones;                        /* Number of flp 80b key zones */
    uint32     soc_dpp_defs_nof_flp_key_zone_bits;                    /* Number of flp key zone bits */
    uint32     soc_dpp_defs_nof_ingress_pmf_program_selection_lines;  /* Number of Ingress PMF program selection lines */
    uint32     soc_dpp_defs_ihb_pmf_program_selection_cam_mask_nof_bits; /* Number of bits for data or mask in the memory IHB_PMF_PROGRAM_SELECTION_CAM */
    uint32     soc_dpp_defs_nof_ingress_pmf_programs;                 /* Number of Ingress PMF programs */
    uint32     soc_dpp_defs_nof_ingress_pmf_keys;                     /* Number of Ingress PMF keys */
    uint32     soc_dpp_defs_nof_ingress_pmf_instructions_lsb;         /* Number of Ingress PMF instructions at LSB */
    uint32     soc_dpp_defs_nof_ingress_pmf_cycles;                   /* Number of Ingress PMF cycles */
    uint32     soc_dpp_defs_nof_ingress_pmf_80b_zones;                /* Number of Ingress PMF 80b dedicated instruction groups  */
    uint32     soc_dpp_defs_nof_ingress_pmf_key_zones;                /* Number of Ingress PMF 80b key zones */
    uint32     soc_dpp_defs_nof_ingress_pmf_key_zone_bits;            /* Number of Ingress PMF 80b key zone bits */
    uint32     soc_dpp_defs_nof_egress_pmf_program_selection_lines;   /* Number of Egress PMF program selection lines */
    uint32     soc_dpp_defs_egq_pmf_program_selection_cam_mask_nof_bits; /* Number of bits for data or mask in the memory EGQ_PMF_PROGRAM_SELECTION_CAM */
    uint32     soc_dpp_defs_nof_egress_pmf_programs;                  /* Number of Egress PMF programs */
    uint32     soc_dpp_defs_nof_egress_pmf_keys;                      /* Number of Egress PMF keys */
    uint32     soc_dpp_defs_nof_egress_pmf_cycles;                    /* Number of Egress PMF cycles */
    uint32     soc_dpp_defs_nof_egress_pmf_instructions_lsb;          /* Number of Egress PMF instructions at LSB */
    uint32     soc_dpp_defs_nof_egress_pmf_80b_zones;                 /* Number of Egress PMF 80b dedicated instruction groups  */
    uint32     soc_dpp_defs_nof_egress_pmf_key_zones;                 /* Number of Egress PMF 80b key zones */
    uint32     soc_dpp_defs_nof_egress_pmf_key_zone_bits;             /* Number of Egress PMF key zone bits */
    uint32     soc_dpp_defs_nof_slb_program_selection_lines;          /* Number of Ingress SLB program selection lines */
    uint32     soc_dpp_defs_ihp_consistent_hashing_program_sel_tcam_mask_nof_bits; /* Number of bits for data or mask in the memory IHP_CONSISTENT_HASHING_PROGRAM_SEL_TCAM */
    uint32     soc_dpp_defs_nof_slb_programs;                         /* Number of Ingress SLB programs */
    uint32     soc_dpp_defs_nof_slb_keys;                             /* Number of Egress PMF keys */
    uint32     soc_dpp_defs_nof_slb_instructions_lsb;                 /* Number of Ingress SLB instructions at LSB */
    uint32     soc_dpp_defs_nof_slb_cycles;                           /* Number of Ingress SLB cycles */
    uint32     soc_dpp_defs_nof_slb_80b_zones;                        /* Number of Ingress SLB 80b dedicated instruction groups  */
    uint32     soc_dpp_defs_nof_slb_key_zones;                        /* Number of Ingress SLB 80b key zones */
    uint32     soc_dpp_defs_nof_slb_key_zone_bits;                    /* Number of Ingress SLB key zone bits */
    uint32     soc_dpp_defs_oamp_number_of_eth_y1731_mep_profiles;    /* Number of elements in OAMP_ETH_y_1731_MEP_PROFILE (Aradplus or Jericho only) */
    uint32     soc_dpp_defs_oamp_number_of_meps;                      /* Number of entries in MEP DB */
    uint32     soc_dpp_defs_oamp_number_of_rmeps;                     /* Number of entries in RMEP DB */
    uint32     soc_dpp_defs_num_of_reassembly_context;                /* number of ingress reassembly ctxt */
    uint32     soc_dpp_defs_oamp_umc_table_size;                      /* Size of UMC table (number of endpoints with long MA format) */
    uint32     soc_dpp_defs_egr_prge_nof_lfems;                       /* Number of LFEMs used in the egress programmable editor */
    uint32     soc_dpp_defs_egr_prge_nof_program_instructions;        /* Number of instructions (program length) for the egress programmable editor */
    uint32     soc_dpp_defs_egr_prge_nof_instruction_mems;            /* Number of instruction memory tables for the egress programmable editor */
    uint32     soc_dpp_defs_egr_prge_max_lfem;                        /* Max lfem number (max odd lfem = max even lfem) */
    uint32     soc_dpp_defs_egr_prge_nof_lfem_tables;                 /* Number of LFEM map tables */
    uint32     soc_dpp_defs_lem_entry_type_is_fec_eei_lsb;            /* LEM result Format 1 type encoding bit LSB */
    uint32     soc_dpp_defs_lem_sa_drop_lsb;                          /* LEM result drop bit LSB */
    uint32     soc_dpp_defs_nof_ecmps;                                /* Number of ECMPs */
    uint32     soc_dpp_defs_inlif_bank_msbs_mask;                     /* Where the bank's id is in the lif id msb. */
    uint32     soc_dpp_defs_inlif_bank_msbs_mask_start;               /* Position of the leftmost MSB */
    uint32     soc_dpp_defs_inlif_bank_lsbs_mask;                     /* Where the bank's id is in the lif id lsb (offset is obviously 0). */
    uint32     soc_dpp_defs_inlif_bank_lsbs_mask_end;                 /* Position of the rightmost LSB */
    uint32     soc_dpp_defs_nof_interlaken_ports;                     /* Number of Interlaken ports */
    uint32     soc_dpp_defs_nof_caui_ports;                           /* Number of CAUI ports */
    uint32     soc_dpp_defs_nof_fc_pfc_generic_bitmaps;               /* Number of PFC Generic Bitmaps */
    uint32     soc_dpp_defs_nof_roo_ll_format_eth_type_indexs;        /* Number of entries for ROO-LL additional table.  */
    uint32     soc_dpp_defs_oamp_local_port_2_sys_port_size;          /* Size of LocalPort2SysPort table, AKA MEM2000.  */
    uint32     soc_dpp_defs_oamp_pe_prog_tcam_size;                   /* Size of the OAMP PE TCAM (program selection) */
    uint32     soc_dpp_defs_inlif_p2p_out_lif_valid_bit;              /* OutLif valid bit in Out-Lif field(In-Lif table) */
    uint32     soc_dpp_defs_repeater_none_empty_cell_size;            /* empty cell size while link not connected to repeater */
    uint32     soc_dpp_defs_repeater_default_empty_cell_size;         /* default empty cell size while link connected to repeater */
    uint32     soc_dpp_defs_fabric_vsc256_max_cell_size;              /* max cell size in vsc256 configuration */
    uint32     soc_dpp_defs_nof_channelized_calendars;                /* Number of channelized calendars */
    uint32     soc_dpp_defs_nof_big_channelized_calendars;            /* Number of special(big) channelized calendars */
    uint32     soc_dpp_defs_nof_small_channelized_calendars;          /* Number of regular(small) channelized calendars */
    uint32     soc_dpp_defs_fabric_comma_burst_period;                /* Comma burst period for fabric MAC */
    uint32     soc_dpp_defs_small_channelized_cal_size;               /* number of entries in small  channelized calendars */
    uint32     soc_dpp_defs_big_channelized_cal_size;                 /* number of entries in big  channelized calendars */
    uint32     soc_dpp_defs_nof_eve_profile_bits;                     /* number of EVE profile bits in the HW */
    uint32     soc_dpp_defs_cal_internal_rate_max;                    /* max value of  calendar rate (according to number of bits in the field) */
    uint32     soc_dpp_defs_non_channelized_cal_id;                   /* id of non channelized calendar */
    uint32     soc_dpp_defs_fabric_mac_bus_size;                      /* Size of fabric MAC */
    uint32     soc_dpp_defs_oamp_pe_prog_sel_profile_nof;             /* Number of program selection profiles in the OAMP PE */
    uint32     soc_dpp_defs_nof_credit_request_profiles;              /* Number of credit request profiles in the IPS */
    uint32     soc_dpp_defs_nof_links_in_fsrd;                        /* Number of links in each instance of FSRD */
    uint32     soc_dpp_defs_nof_vt_program_selection_lines;           /* Number of Ingress vt program selection lines */
    uint32     soc_dpp_defs_ihp_vtt_1st_program_selection_tcam_mask_nof_bits; /* Number of bits for data or mask in the memory  IHP_VTT_1ST_KEY_PROG_SEL_TCAMm */
    uint32     soc_dpp_defs_nof_vt_programs;                          /* Number of vt programs */
    uint32     soc_dpp_defs_nof_vt_keys;                              /* Number of vt keys */
    uint32     soc_dpp_defs_nof_vt_16b_instructions;                  /* Number of vt 16-bits instructions */
    uint32     soc_dpp_defs_nof_vt_32b_instructions;                  /* Number of vt 32-bits instructions */
    uint32     soc_dpp_defs_nof_vt_instructions_lsb;                  /* Number of vt instructions at LSB */
    uint32     soc_dpp_defs_nof_vt_cycles;                            /* Number of vt cycles */
    uint32     soc_dpp_defs_nof_vt_80b_zones;                         /* Number of vt 80b dedicated instruction groups  */
    uint32     soc_dpp_defs_nof_vt_key_zones;                         /* Number of vt 80b key zones */
    uint32     soc_dpp_defs_nof_vt_key_zone_bits;                     /* Number of vt key zone bits */
    uint32     soc_dpp_defs_vt_ce_buffer_length;                      /* Size of ce internal buffer in bits */
    uint32     soc_dpp_defs_nof_tt_program_selection_lines;           /* The number of tt program selection lines */
    uint32     soc_dpp_defs_ihp_vtt_2nd_program_selection_tcam_mask_nof_bits; /* Number of bits for data or mask in the memory IHP_VTT_2ND_KEY_PROG_SEL_TCAMm */
    uint32     soc_dpp_defs_nof_tt_programs;                          /* Number of tt programs */
    uint32     soc_dpp_defs_nof_tt_keys;                              /* Number of tt keys */
    uint32     soc_dpp_defs_nof_tt_16b_instructions;                  /* Number of tt 16-bits instructions */
    uint32     soc_dpp_defs_nof_tt_32b_instructions;                  /* Number of tt 32-bits instructions */
    uint32     soc_dpp_defs_nof_tt_instructions_lsb;                  /* Number of tt instructions at LSB */
    uint32     soc_dpp_defs_nof_tt_cycles;                            /* Number of tt cycles */
    uint32     soc_dpp_defs_nof_tt_80b_zones;                         /* Number of tt 80b dedicated instruction groups  */
    uint32     soc_dpp_defs_nof_tt_key_zones;                         /* Number of tt 80b key zones */
    uint32     soc_dpp_defs_nof_tt_key_zone_bits;                     /* Number of tt key zone bits */
    uint32     soc_dpp_defs_tt_ce_buffer_length;                      /* Size of tt ce buffer in bits */
    uint32     soc_dpp_defs_max_gbps_rate_egq;                        /* Maximum rate in Gbps of egress interface */
    uint32     soc_dpp_defs_max_gbps_rate_sch;                        /* Maximum rate in Gbps of E2E interface */
    uint32     soc_dpp_defs_size_of_oam_key;                          /* Size of OAM-key in O-EM tables, in bits. */
    uint32     soc_dpp_defs_fc_inb_cal_len_max;                       /* Maximum calendar length of Interlaken in-band interface */
    uint32     soc_dpp_defs_itm_glob_rcs_fc_bdbs_size_max;            /* Maximum BDBs of Global VSQ Flow control */
    uint32     soc_dpp_defs_itm_glob_rcs_fc_uc_size_max;              /* Maximum Unicast DBs of Global VSQ Flow control */
    uint32     soc_dpp_defs_itm_glob_rcs_fc_fmc_size_max;             /* Maximum Full-Multicast DBs of Global VSQ Flow control */
    uint32     soc_dpp_defs_itm_glob_rcs_fc_mnmc_size_max;            /* Maximum Mini-Multicast DBs of Global VSQ Flow control */
    uint32     soc_dpp_defs_itm_glob_rcs_fc_ocb_size_max;             /* Maximum OCB of Global VSQ Flow control */
    uint32     soc_dpp_defs_itm_glob_rcs_fc_ocb_p0_size_max;          /* Maximum Pool-0 OCB-Buffers of Global VSQ Flow control */
    uint32     soc_dpp_defs_itm_glob_rcs_fc_ocb_p1_size_max;          /* Maximum Pool-1 OCB-Buffers of Global VSQ Flow control */
    uint32     soc_dpp_defs_itm_glob_rcs_fc_mix_p0_size_max;          /* Maximum Pool-0 MIX-Buffers of Global VSQ Flow control */
    uint32     soc_dpp_defs_itm_glob_rcs_fc_mix_p1_size_max;          /* Maximum Pool-1 MIX-Buffers of Global VSQ Flow control */
    uint32     soc_dpp_defs_max_oob_wd_period;                        /* Maximum watchdog period for OOB interface */
    uint32     soc_dpp_defs_ip_tunnel_lif_learn_data_nof_bits;        /* number of bits for learn data of type FEC or UC flow. In ip tunnel lif table */
    uint32     soc_dpp_defs_ac_mp_lif_learn_data_nof_bits;            /* number of bits for learn data of type FEC or UC flow. In ac mp lif table */
    uint32     soc_dpp_defs_ip_tunnel_lif_uc_flow_learn_data_static_lsbs; /* number of static lsbs for uc flow learn data. In ip tunnel inlif  */
    uint32     soc_dpp_defs_ac_mp_lif_uc_flow_learn_data_static_lsbs; /* number of static lsbs for uc flow learn data. In ac mp inlif  */
    uint32     soc_dpp_defs_encode_dest_prefix_nof_bits_19_fec_ptr;   /* Number of bits for FEC destination prefix  */
    uint32     soc_dpp_defs_encode_dest_prefix_value_19_fec_ptr;      /* FEC destination prefix value */
    uint32     soc_dpp_defs_encode_dest_prefix_nof_bits_19_mc_id;     /* Number of bits for MC destination prefix */
    uint32     soc_dpp_defs_encode_dest_prefix_value_19_mc_id;        /* MC destination prefix value */
    uint32     soc_dpp_defs_encode_dest_prefix_value_19_sys_port;     /* system port destination prefix value */
    uint32     soc_dpp_defs_mac_counter_first;                        /* first mac counter id */
} soc_dpp_defines_t;

extern soc_dpp_defines_t *soc_dpp_defines[SOC_MAX_NUM_DEVICES];

/************************************/
/*          Macros Define           */
/************************************/


/*         soc_dpp_defines macros            */
#define SOC_DPP_DEFS_SET(unit, dpp_define, value)    {soc_dpp_defines[unit]->soc_dpp_defs_##dpp_define = value;}
#define SOC_DPP_DEFS_GET(unit, dpp_define)           ( soc_dpp_defines[unit]->soc_dpp_defs_##dpp_define )
#define SOC_DPP_DEFS_MAX2(_a_, _b_)    (_a_ > _b_ ? _a_ : _b_)
#define SOC_DPP_DEFS_MAX4(x0,x1,x2,x3)                    SOC_DPP_DEFS_MAX2(SOC_DPP_DEFS_MAX2(SOC_DPP_DEFS_MAX2(x0, x1),x2),x3)
#define SOC_DPP_DEFS_MAX(dpp_define)                 SOC_DPP_DEFS_MAX4(SOC_DPP_GET_ARDON(dpp_define),SOC_DPP_GET_JERICHO(dpp_define),SOC_DPP_GET_PETRAB(dpp_define),SOC_DPP_GET_ARAD(dpp_define))

int soc_dpp_defines_init(int unit);
int soc_dpp_defines_deinit(int unit);

#endif /* DPP_CONFIG_DEFS */
