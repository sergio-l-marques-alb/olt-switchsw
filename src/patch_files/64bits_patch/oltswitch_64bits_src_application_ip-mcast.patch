Index: src/application/ip_mcast/mapping/dvmrpmap/include/dvmrp_map_util.h
===================================================================
--- src/application/ip_mcast/mapping/dvmrpmap/include/dvmrp_map_util.h	(revision 7768)
+++ src/application/ip_mcast/mapping/dvmrpmap/include/dvmrp_map_util.h	(working copy)
@@ -93,13 +93,13 @@ typedef struct dvmrpGblVaribles_s
 
   dvmrpQueue_t              dvmrpQueue[DVMRP_MAX_Q];
   void                      *queueCountersSemId;
   L7_uint32                 eventCounters[DVMRP_MAP_COUNTERS_TYPE_MAX];
   void                      *eventCountersSemId;
   void                      *msgQSema;
-  L7_int32                  dvmrpMapTaskId;
+  L7_uint64                 dvmrpMapTaskId;
   dvmrpCnfgrState_t         dvmrpCnfgrState;
   MCAST_CB_HNDL_t           dvmrpCb;
   L7_uchar8                 family;
   L7_BOOL                   heapAlloc; 
 } dvmrpGblVaribles_t;
 
Index: src/application/ip_mcast/mapping/mcastmap/core/mcast_debug.c
===================================================================
--- src/application/ip_mcast/mapping/mcastmap/core/mcast_debug.c	(revision 7768)
+++ src/application/ip_mcast/mapping/mcastmap/core/mcast_debug.c	(working copy)
@@ -1085,13 +1085,13 @@ void mcastMapDebugRegisteredMulticastInf
 * @notes
 *
 * @end
 *********************************************************************/
 void mcastMapDebugHeapShow(L7_uchar8 addrFamily)
 {
-  L7_uint32 heapId;
+  L7_uint64 heapId;
 
   /* Basic validations */
   if ((addrFamily != L7_AF_INET) && (addrFamily != L7_AF_INET6))
   {
     sysapiPrintf ("Bad Address Family Specified.\n");
     return;
Index: src/application/ip_mcast/mapping/mcastmap/core/mcast_map.c
===================================================================
--- src/application/ip_mcast/mapping/mcastmap/core/mcast_map.c	(revision 7768)
+++ src/application/ip_mcast/mapping/mcastmap/core/mcast_map.c	(working copy)
@@ -1757,13 +1757,13 @@ L7_RC_t mcastMapGetHandleListHandle (L7_
 *
 * @comments This heapID is to be used for all the memory allocations for the
 *           given IP address family within the Multicast module
 *
 * @end
 *********************************************************************/
-L7_uint32 mcastMapHeapIdGet (L7_uint32 family)
+L7_uint64 mcastMapHeapIdGet (L7_uint32 family)
 {
   if(family == L7_AF_INET)
   {
     return mcastGblVariables_g.mcastV4HeapId;
   }
   else if(family == L7_AF_INET6)
Index: src/application/ip_mcast/mapping/mcastmap/include/mcast_util.h
===================================================================
--- src/application/ip_mcast/mapping/mcastmap/include/mcast_util.h	(revision 7768)
+++ src/application/ip_mcast/mapping/mcastmap/include/mcast_util.h	(working copy)
@@ -94,21 +94,21 @@ typedef struct mcastGblVar_s
   L7_uint32            *pMcastMapCfgMapTbl;
   L7_mcastMapCfg_t      mcastMapCfgData;     /* Configuration for IPv4 MCAST */
   L7_mcastMapCfg_t      *mcastMapV6CfgData;  /* Configuration for IPv6 MCAST */
   L7_uint32             mcastV4CtrlPktPoolId;
   L7_uint32             mcastV6CtrlPktPoolId;
   L7_uint32             mcastV6DataPktPoolId;
-  L7_uint32             mcastV4HeapId;
-  L7_uint32             mcastV6HeapId;
+  L7_uint64             mcastV4HeapId;
+  L7_uint64             mcastV6HeapId;
   L7_uint32             mcastAppTimerBufPoolId;
   void                  *mcastHandleListMemHndl;
   void                  *mcastV6HandleListMemHndl;
   L7_uint32             mcastV4MgmdEventsPoolId;
   L7_uint32             mcastV6MgmdEventsPoolId;
-  L7_int32              mcastMapTaskId;
-  L7_int32              pktRcvrTaskId;
+  L7_uint64             mcastMapTaskId;
+  L7_uint64             pktRcvrTaskId;
   L7_PktRcvr_t*         pktRcvr;
  /* Three message queues are created to prioritize the timer events and control msg events ahead of
     data packet reception events so that the operational control events are still
     handled irrespective of packets flowing at high data rate */
 
    mcastMapQueue_t            mcastMapQueue[MCASTMAP_MAX_Q];
Index: src/application/ip_mcast/mapping/mgmdmap/include/mgmdmap_util.h
===================================================================
--- src/application/ip_mcast/mapping/mgmdmap/include/mgmdmap_util.h	(revision 7768)
+++ src/application/ip_mcast/mapping/mgmdmap/include/mgmdmap_util.h	(working copy)
@@ -102,13 +102,13 @@ typedef struct mgmdMapGblVars_s
   mgmdQueue_t        mgmdQueue[MGMD_MAX_Q];
 
   /* Counting semaphore. Semaphore is given every time a message is added to the
      mgmdMapMsgQueue or mgmdMapPktQueue or Apptimer Queue. The processing task waits
      on this semaphore before reading from the queues. */
   void              *mgmdMapMsgQSema;
-  L7_int32           mgmdMapTaskId;
+  L7_uint64          mgmdMapTaskId;
   mgmdCnfgrState_t   mgmdCnfgrState;
   L7_BOOL            warmRestart; /* L7_TRUE if last restart was a warm restart */
 } mgmdMapGblVars_t;
 
 
 
@@ -124,13 +124,13 @@ typedef struct mgmdMapCB_s
   L7_mgmdMapCfg_t  *pMgmdMapCfgData;
   L7_uchar8         familyType;
   L7_BOOL           warmRestartInProgress;       /* L7_TRUE if operating in warm Restart mode */
   osapiTimerDescr_t *mgmdMapStartupTimer;
   MCAST_CB_HNDL_t   cbHandle;
   MCAST_CB_HNDL_t   proxyCbHandle;
-  L7_uint32         mgmdHeapId;
+  L7_uint64         mgmdHeapId;
   mgmdMapGblVars_t *gblVars;
 } mgmdMapCB_t;
 
 extern mgmdMapGblVars_t mgmdMapGblVariables_g;
 extern mgmdMapCB_t     *mgmdMapCB_g;
 
Index: src/application/ip_mcast/mapping/mgmdmap/include/mgmdmap_vend_exten.h
===================================================================
--- src/application/ip_mcast/mapping/mgmdmap/include/mgmdmap_vend_exten.h	(revision 7768)
+++ src/application/ip_mcast/mapping/mgmdmap/include/mgmdmap_vend_exten.h	(working copy)
@@ -1115,9 +1115,9 @@ L7_RC_t mgmdMapProtocolMRPMembershipEven
 *
 * @comments This heapID is to be used for all the memory allocations for the
 *           given IP address family within the Multicast module
 *
 * @end
 *********************************************************************/
-L7_uint32 mgmdMapHeapIdGet (L7_uint32 family);
+L7_uint64 mgmdMapHeapIdGet (L7_uint32 family);
 
 #endif
Index: src/application/ip_mcast/mapping/mgmdmap/mgmdmap_map.c
===================================================================
--- src/application/ip_mcast/mapping/mgmdmap/mgmdmap_map.c	(revision 7768)
+++ src/application/ip_mcast/mapping/mgmdmap/mgmdmap_map.c	(working copy)
@@ -54,13 +54,13 @@ static void mgmdMapMcastCommonEventProce
 static L7_RC_t mgmdIntfCreate(mgmdMapCB_t *mgmdMapCbPtr, L7_uint32 intIfNum);
 
 static L7_RC_t mgmdIntfDelete(mgmdMapCB_t *mgmdMapCbPtr, L7_uint32 intIfNum);
 
 static L7_RC_t mgmdResetCleanUp(mgmdMapCB_t *mgmdMapCbPtr);
 
-static void mgmdMapStartupTimerExpireCallback(L7_uint32 familyType, L7_uint32 arg2);
+static void mgmdMapStartupTimerExpireCallback(L7_uint64 familyType, L7_uint64 arg2);
 
 /*********************************************************************
 *
 * @purpose task to handle all MGMD Mapping messages
 *
 * @param    none
@@ -1981,20 +1981,20 @@ L7_RC_t mgmdMapAdminScopeEventChangeCall
 {
   return mgmdMapComponentCallback(L7_AF_INET,eventType,
                                   msgLen, eventMsg);
 
 }
 
-void mgmdMapStartupTimerExpireCallback(L7_uint32 familyType, L7_uint32 arg2)
+void mgmdMapStartupTimerExpireCallback(L7_uint64 familyType, L7_uint64 arg2)
 {
   mgmdMapCB_t *mgmdMapCbPtr;
   L7_uint32    cbIndex;
   L7_uint32    protoMax;
   L7_BOOL      restartInProgress;
 
-  MGMD_MAP_DEBUG (MGMD_MAP_DEBUG_EVENTS, "Startup timer expired for familyType = %d", familyType);
+  MGMD_MAP_DEBUG (MGMD_MAP_DEBUG_EVENTS, "Startup timer expired for familyType = %d", (L7_uchar8) familyType);
 
   if (mgmdMapCtrlBlockGet((L7_uchar8) familyType, &mgmdMapCbPtr) != L7_SUCCESS)
   {
     /* Failed to get control block */
     MGMD_MAP_DEBUG (MGMD_MAP_DEBUG_FAILURES, "Failed to get Control Block");
     return;
Index: src/application/ip_mcast/mapping/mgmdmap/mgmdmap_vend_exten.c
===================================================================
--- src/application/ip_mcast/mapping/mgmdmap/mgmdmap_vend_exten.c	(revision 7768)
+++ src/application/ip_mcast/mapping/mgmdmap/mgmdmap_vend_exten.c	(working copy)
@@ -2331,13 +2331,13 @@ L7_RC_t mgmdMapProtocolMRPMembershipEven
 *
 * @comments This heapID is to be used for all the memory allocations for the
 *           given IP address family within the MGMD module
 *
 * @end
 *********************************************************************/
-L7_uint32 mgmdMapHeapIdGet (L7_uint32 family)
+L7_uint64 mgmdMapHeapIdGet (L7_uint32 family)
 {
   mgmdMapCB_t *mgmdMapCbPtr = L7_NULLPTR;
 
   if (mgmdMapCtrlBlockGet(family, &mgmdMapCbPtr) == L7_SUCCESS)
   {
     return (mgmdMapCbPtr->mgmdHeapId);
Index: src/application/ip_mcast/mapping/pimdmmap/include/pimdm_map_util.h
===================================================================
--- src/application/ip_mcast/mapping/pimdmmap/include/pimdm_map_util.h	(revision 7768)
+++ src/application/ip_mcast/mapping/pimdmmap/include/pimdm_map_util.h	(working copy)
@@ -98,13 +98,13 @@ typedef enum
 typedef struct pimdmGblVars_s
 {
   void                      *msgQSema;
   pimdmMapQueue_t            pimdmQueue[PIMDM_MAX_Q];
   void                       *queueCountersSemId;
   pimdmCnfgrState_t          pimdmCnfgrState;
-  L7_int32                   pimdmMapTaskId;
+  L7_uint64                  pimdmMapTaskId;
   void                       *eventCountersSemId;
   L7_uint32                  eventCounters[PIMDM_MAP_COUNTERS_TYPE_MAX];
   L7_BOOL                    warmRestart; /* L7_TRUE if last restart was a warm restart */
 }pimdmGblVars_t;
 
 typedef struct pimdmMapCB_s
Index: src/application/ip_mcast/mapping/pimdmmap/pimdm_map.c
===================================================================
--- src/application/ip_mcast/mapping/pimdmmap/pimdm_map.c	(revision 7768)
+++ src/application/ip_mcast/mapping/pimdmmap/pimdm_map.c	(working copy)
@@ -61,13 +61,13 @@ static L7_BOOL pimdmMapIntfConfigEntryGe
 static void pimdmMapMcastCommonEventProcess(L7_uint32 event,
                                             pimdmMapCB_t *pimdmMapCbPtr);
 
 static L7_RC_t pimdmIntfCreate(L7_uint32 intIfNum, 
                                             pimdmMapCB_t *pimdmMapCbPtr); 
 
-static void pimdmMapStartupTimerExpireCallback(L7_uint32 familyType, L7_uint32 arg2);
+static void pimdmMapStartupTimerExpireCallback(L7_uint64 familyType, L7_uint64 arg2);
 
 static void pimdmMapRtrStartupDoneProcess(pimdmMapCB_t *pimdmMapCbPtr);
 
 /*********************************************************************
 *
 * @purpose task to handle all PIM-DM Mapping messages
@@ -1735,20 +1735,20 @@ L7_RC_t pimdmMapUIEventSend (pimdmMapCB_
   }
 
   return L7_SUCCESS;
 }
 
 
-void pimdmMapStartupTimerExpireCallback(L7_uint32 familyType, L7_uint32 arg2)
+void pimdmMapStartupTimerExpireCallback(L7_uint64 familyType, L7_uint64 arg2)
 {
   pimdmMapCB_t *pimdmMapCbPtr;
   L7_uint32    cbIndex;
   L7_uint32    protoMax;
   L7_BOOL      restartInProgress;
 
-  PIMDM_MAP_DEBUG (PIMDM_MAP_DEBUG_EVENTS, "Startup timer expired for familyType = %d", familyType);
+  PIMDM_MAP_DEBUG (PIMDM_MAP_DEBUG_EVENTS, "Startup timer expired for familyType = %d", (L7_uchar8) familyType);
 
   if (pimdmMapCtrlBlockGet((L7_uchar8) familyType, &pimdmMapCbPtr) != L7_SUCCESS)
   {
     /* Failed to get control block */
     PIMDM_MAP_DEBUG (PIMDM_MAP_DEBUG_FAILURES, "Failed to get Control Block");
     return;
Index: src/application/ip_mcast/mapping/pimsmmap/include/pimsm_map_util.h
===================================================================
--- src/application/ip_mcast/mapping/pimsmmap/include/pimsm_map_util.h	(revision 7768)
+++ src/application/ip_mcast/mapping/pimsmmap/include/pimsm_map_util.h	(working copy)
@@ -121,13 +121,13 @@ typedef struct pimsmGblVariables_s
   void                      *tempBuffer; /* TBD: To temporarily resolve the PIM-SM MsgQ Memory Corruption */
 
   pimsmMapQueue_t            pimsmQueue[PIMSM_MAX_Q];
   void                       *queueCountersSemId;
   void                       *msgQSema;
   pimsmCnfgrState_t          pimsmCnfgrState;
-  L7_uint32                  pimsmMapTaskId;
+  L7_uint64                  pimsmMapTaskId;
   void                       *eventCountersSemId;
   L7_uint32                  eventCounters[PIMSM_MAP_COUNTERS_TYPE_MAX];
   L7_BOOL                    warmRestart; /* L7_TRUE if last restart was a warm restart */
 } pimsmGblVariables_t;
 
 typedef struct pimsmMapCB_s
Index: src/application/ip_mcast/mapping/pimsmmap/pimsm_map.c
===================================================================
--- src/application/ip_mcast/mapping/pimsmmap/pimsm_map.c	(revision 7768)
+++ src/application/ip_mcast/mapping/pimsmmap/pimsm_map.c	(working copy)
@@ -34,13 +34,13 @@
 pimsmGblVariables_t pimsmGblVariables_g;
 pimsmMapCB_t        *pimsmMapCB;
 
 
 pimsmDebugCfg_t pimsmDebugCfg;
 
-static void pimsmMapStartupTimerExpireCallback(L7_uint32 familyType, L7_uint32 arg2);
+static void pimsmMapStartupTimerExpireCallback(L7_uint64 familyType, L7_uint64 arg2);
 static void pimsmMapStartupTimerExpireProcess(pimsmMapCB_t *pimsmMapCbPtr);
 static void pimsmMapRtrStartupDoneProcess(pimsmMapCB_t *pimsmMapCbPtr);
 
 /*********************************************************************
 * @purpose  Save PIM-SM user config file to NVStore
 *
@@ -1844,17 +1844,17 @@ void pimsmMapStartupTimerExpireProcess(p
   {
     (void)cnfgrApiComponentHwUpdateDone(L7_FLEX_PIMSM_MAP_COMPONENT_ID, L7_CNFGR_HW_APPLY_IPMCAST);
   }
   return;
 }
 
-void pimsmMapStartupTimerExpireCallback(L7_uint32 familyType, L7_uint32 arg2)
+void pimsmMapStartupTimerExpireCallback(L7_uint64 familyType, L7_uint64 arg2)
 {
   pimsmMapCB_t *pimsmMapCbPtr;
 
-  PIMSM_MAP_DEBUG (PIMSM_MAP_DEBUG_NSF, "Startup timer expired for familyType = %d", familyType);
+  PIMSM_MAP_DEBUG (PIMSM_MAP_DEBUG_NSF, "Startup timer expired for familyType = %d", (L7_uchar8) familyType);
 
   if (pimsmMapCtrlBlockGet((L7_uchar8) familyType, &pimsmMapCbPtr) != L7_SUCCESS)
   {
     /* Failed to get control block */
     PIMSM_MAP_DEBUG (PIMSM_MAP_DEBUG_FAILURES, "Failed to get Control Block");
     return;
Index: src/application/ip_mcast/util/heapmgr/heap.c
===================================================================
--- src/application/ip_mcast/util/heapmgr/heap.c	(revision 7768)
+++ src/application/ip_mcast/util/heapmgr/heap.c	(working copy)
@@ -219,26 +219,27 @@ L7_RC_t heapInitialize(heap_t         *h
                        heapFlags_t    flags,
                        L7_uint32      heapSize,
                        L7_uint32      buffPoolCount)
 {
   heapBuffPool_t  *tmpBuffPool= (heapBuffPool_t*)bList;
   buffPool_t      *heapBuffPool, *freeBuffPool, *buffPool;
-  L7_uint32       dataPtr, buffOverhead, i, j, buffSize;
+  L7_uint32       buffOverhead, i, j, buffSize;
+  L7_uint64       dataPtr;
 
   /* Simple validations */
   if((heap == L7_NULLPTR) || (tmpBuffPool == L7_NULLPTR) ||
      (heapSize == 0) || (buffPoolCount == 0))
   {
     HEAP_TRACE(HEAP_PRINT_ALWAYS,"\n[%s:%u]Error: Invalid Params - heap %x, bList %x, heapSize %u, buffPoolCount %u\n",
                __FUNCTION__,__LINE__,heap,tmpBuffPool,heapSize,buffPoolCount);
     return L7_FAILURE;
   }
 
   /* Set-up the heap structure */
-  memset((void *)((L7_uint32)heap + sizeof(heap_t)), 0, heapSize);
-  heap->buffPool = (buffPool_t *)((L7_uint32)heap + sizeof(heap_t));
+  memset(UINT_TO_PTR(PTR_TO_UINT64(heap) + sizeof(heap_t)), 0, heapSize);
+  heap->buffPool = (buffPool_t *)UINT_TO_PTR(PTR_TO_UINT64(heap) + sizeof(heap_t));
   heap->buffPoolCount = buffPoolCount;
   heap->flags = flags;
   heap->dbgPrint = 0;  /* Turn-off debug prints by default */
   if((flags & HEAP_DEBUG_FILE_INFO) != 0)
   {
     heap->headerSize += sizeof(heapDebugInfo_t);
@@ -308,25 +309,25 @@ L7_RC_t heapInitialize(heap_t         *h
       freeBuffPool->flags = tmpBuffPool->flags;
     }
     freeBuffPool++;
   }
 
   /* Populate the free list and the start & end locs */
-  dataPtr = (L7_uint32)(heap->buffPool) + buffPoolCount * sizeof(buffPool_t);
+  dataPtr = PTR_TO_UINT64(heap->buffPool) + buffPoolCount * sizeof(buffPool_t);
   buffOverhead = heap->headerSize +
                  (((flags & HEAP_DEBUG_MEMORY_GUARD) != 0) ?
                   sizeof(heapDebugMemGuard_t) : 0);
   for(i = 0, buffPool = heap->buffPool; i < buffPoolCount; i++, buffPool++)
   {
     buffPool->startLoc = dataPtr;
     buffPool->endLoc = dataPtr +
       (buffPool->buffSize + buffOverhead) * buffPool->buffCount - 1;
     for(j = 0; j < buffPool->buffCount; j++)
     {
-      *(L7_uint32 *)(dataPtr + heap->headerSize) = (L7_uint32)(buffPool->freeList);
-      buffPool->freeList = (void *)(dataPtr + heap->headerSize);
+      PTR_SET_VALUE(UINT_TO_PTR(dataPtr + heap->headerSize)) = PTR_TO_UINT64(buffPool->freeList);
+      buffPool->freeList = UINT_TO_PTR(dataPtr + heap->headerSize);
       dataPtr += buffPool->buffSize + buffOverhead;
     }
   }
   /* All OK; set the heap to be in use */
   heapSizeUpdate(heap, heapSize);
   return L7_SUCCESS;
@@ -349,16 +350,17 @@ L7_RC_t heapInitialize(heap_t         *h
 *********************************************************************/
 static
 L7_RC_t heapBuffPoolGet(heap_t     *heap,
                         void       *pMem,
                         buffPool_t **buffPool)
 {
-  L7_uint32 pBuff, i;
+  L7_uint64 pBuff;
+  L7_uint32 i;
 
   /* Get the pointer to the whole buffer (including the debug header info) */
-  pBuff =  (L7_uint32)pMem - heap->headerSize;
+  pBuff =  PTR_TO_UINT64(pMem) - heap->headerSize;
 
   /* Iterate through the various pools and see which pool does this buffer belong */
   *buffPool = heap->buffPool;
   for(i = 0; (i < heap->buffPoolCount) && (*buffPool != L7_NULLPTR);
      i++, (*buffPool)++)
   {
@@ -408,13 +410,13 @@ L7_RC_t heapBuffPoolGet(heap_t     *heap
 * @returns  L7_NULL on failure.
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_uint32 heapCreate(L7_COMPONENT_IDS_t compId,
+L7_uint64 heapCreate(L7_COMPONENT_IDS_t compId,
                      size_t             size)
 {
   L7_uint32 heapSize, usrSize;
   heap_t    *heap = L7_NULL;
 
   /* Basic sanity checks */
@@ -434,13 +436,13 @@ L7_uint32 heapCreate(L7_COMPONENT_IDS_t
                __FUNCTION__,__LINE__,heapSize);
     return L7_NULL;
   }
 
   /* Initialize the heap structure and return the heapID */
   memset(heap, 0, sizeof(heap_t));
-  heap->validateMem = (L7_uint32)heap;
+  heap->validateMem = PTR_TO_UINT64(heap);
   heap->compId = compId;
   heap->heapSize = usrSize;
   heap->inUse = 0;
   heap->heapSemId = osapiSemaBCreate(OSAPI_SEM_Q_FIFO, OSAPI_SEM_FULL);
   if(heap->heapSemId == L7_NULLPTR)
   {
@@ -453,13 +455,13 @@ L7_uint32 heapCreate(L7_COMPONENT_IDS_t
   if(heap->semId == L7_NULLPTR)
   {
     HEAP_TRACE(HEAP_PRINT_ALWAYS,"\n[%s:%u]Error: Semaphore creation failed\n",
                __FUNCTION__,__LINE__);
     return L7_FAILURE;
   }
-  return (L7_uint32)heap;
+  return PTR_TO_UINT64(heap);
 }
 
 /*********************************************************************
 *
 * @purpose  Initialize a Heap
 *
@@ -471,34 +473,34 @@ L7_uint32 heapCreate(L7_COMPONENT_IDS_t
 * @returns  L7_FAILURE
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_RC_t heapInit(L7_uint32      heapId,
+L7_RC_t heapInit(L7_uint64      heapId,
                  heapBuffPool_t bList[],
                  heapFlags_t    flags)
 {
-  heap_t    *heap = (heap_t*)heapId;
+  heap_t    *heap = (heap_t*) UINT_TO_PTR(heapId);
   L7_uint32 heapSize, buffPoolCount;
 
   /* Basic sanity checks */
-  if(heap == L7_NULLPTR || (*((L7_uint32*)heapId) != heapId))
+  if(heap == L7_NULLPTR || (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId))
   {
     HEAP_TRACE(HEAP_PRINT_ALWAYS,
-               "[%s:%u] ERROR: Heap Initialization failed for heapId - %x\n",
+               "[%s:%u] ERROR: Heap Initialization failed for heapId - %llx\n",
                __FUNCTION__,__LINE__,heapId);
     return L7_FAILURE;
   }
   if(heapIsInUse(heap) == L7_TRUE)
   {
     /* While changing one MRP to other MRP, very fast
        we dont want this message on the console
      */
     L7_LOGF(L7_LOG_SEVERITY_NOTICE, L7_FLEX_MCAST_MAP_COMPONENT_ID,
-            "[%s:%u] Heap with ID 0x%x is already in use\n",
+            "[%s:%u] Heap with ID 0x%llx is already in use\n",
                __FUNCTION__,__LINE__,heapId);
 
     return L7_FAILURE;
   }
 
   /* Validate the params & Compute the heap size */
@@ -529,41 +531,41 @@ L7_RC_t heapInit(L7_uint32      heapId,
 * @returns  L7_FAILURE
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_RC_t heapDeInit(L7_uint32 heapId,
+L7_RC_t heapDeInit(L7_uint64 heapId,
                    L7_BOOL   bForced)
 {
-  heap_t     *heap = (heap_t*)heapId;
+  heap_t     *heap = (heap_t*)UINT_TO_PTR(heapId);
   L7_uint32  i;
   buffPool_t *buffPool;
 
   /* Validate the heap */
-  if(heap == L7_NULLPTR || (*((L7_uint32*)heapId) != heapId))
+  if(heap == L7_NULLPTR || (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId))
   {
     HEAP_TRACE(HEAP_PRINT_ALWAYS,
-               "[%s:%u] ERROR: Invalid Heap ID %x. De-Init failed\n",
+               "[%s:%u] ERROR: Invalid Heap ID %llx. De-Init failed\n",
                __FUNCTION__,__LINE__,heapId);
     return L7_FAILURE;
   }
   if(heapIsInUse(heap) == L7_FALSE)
   {
     HEAP_TRACE(HEAP_PRINT_ALWAYS,
-               "[%s:%u] ERROR: Heap %x is not inited yet; De-Init failed.\n",
+               "[%s:%u] ERROR: Heap %llx is not inited yet; De-Init failed.\n",
                __FUNCTION__,__LINE__,heapId);
     return L7_FAILURE;
   }
   /* Lock Heap accesses, if needed */
   if((heap->flags & HEAP_LOCK_GUARD) != 0)
   {
     if(osapiSemaTake(heap->semId, L7_WAIT_FOREVER) != L7_SUCCESS)
     {
       HEAP_TRACE(HEAP_PRINT_ALWAYS,
-                 "[%s:%u] ERROR: Semaphore acquisition failed for heap 0x%x.\n",
+                 "[%s:%u] ERROR: Semaphore acquisition failed for heap 0x%llx.\n",
                  __FUNCTION__,__LINE__,heapId);
       return L7_FAILURE;
     }
   }
 
   /* Check if any outstanding allocations */
@@ -572,13 +574,13 @@ L7_RC_t heapDeInit(L7_uint32 heapId,
     for(i = 0, buffPool = heap->buffPool; i < heap->buffPoolCount; i++, buffPool++)
     {
       if(buffPool->stats.allocCount != 0)
       {
         /* Outstanding allocated buffers */
         HEAP_TRACE(HEAP_PRINT_ALWAYS,
-                   "[%s:%u] Outstanding buffers (%u) allocated in buffpool %s, heap 0x%x. De-Init failed.\n",
+                   "[%s:%u] Outstanding buffers (%u) allocated in buffpool %s, heap 0x%llx. De-Init failed.\n",
                    __FUNCTION__,__LINE__,buffPool->stats.allocCount,buffPool->descr,heapId);
         /* Unlock access */
         if((heap->flags & HEAP_LOCK_GUARD) != 0)
         {
           osapiSemaGive(heap->semId);
         }
@@ -610,37 +612,37 @@ L7_RC_t heapDeInit(L7_uint32 heapId,
 * @returns  L7_FAILURE
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_RC_t heapDestroy(L7_uint32 heapId,
+L7_RC_t heapDestroy(L7_uint64 heapId,
                     L7_BOOL   bForced)
 {
-  heap_t     *heap = (heap_t*)heapId;
+  heap_t     *heap = (heap_t*)UINT_TO_PTR(heapId);
 
   /* Validate the heap */
-  if(heap == L7_NULLPTR || (*((L7_uint32*)heapId) != heapId))
+  if(heap == L7_NULLPTR || (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId))
   {
     HEAP_TRACE(HEAP_PRINT_ALWAYS,
-               "FAILED to destroy the heap with ID - %x. Invalid heapID\n",
+               "FAILED to destroy the heap with ID - %llx. Invalid heapID\n",
                heapId);
     return L7_FAILURE;
   }
   /* Check if any outstanding allocations */
   if((bForced != L7_TRUE) && heapIsInUse(heap) == L7_TRUE)
   {
     /* Still in use */
     HEAP_TRACE(HEAP_PRINT_ALWAYS,
-               "FAILED to destroy the heap with ID - %x. Heap in use\n",
+               "FAILED to destroy the heap with ID - %llx. Heap in use\n",
                heapId);
     return L7_FAILURE;
   }
 
   /* Invalidate the heap and then free-up the resources */
-  heap->validateMem = (L7_uint32)L7_NULL;
+  heap->validateMem = (L7_uint64)L7_NULL;
   heapSizeUpdate(heap, 0);
 
   osapiSemaDelete(heap->heapSemId);
   heap->semId = L7_NULLPTR;
 
   osapiSemaDelete(heap->semId);
@@ -664,26 +666,26 @@ L7_RC_t heapDestroy(L7_uint32 heapId,
 * @returns  L7_NULLPTR on failure
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void *heapAlloc(L7_uint32 heapId,
+void *heapAlloc(L7_uint64 heapId,
                 size_t    size,
                 L7_uchar8 *fileName,
                 L7_uint32 lineNumber)
 {
-  heap_t     *heap = (heap_t*)heapId;
+  heap_t     *heap = (heap_t*) UINT_TO_PTR(heapId);
   buffPool_t *buffPool;
   void       *output = L7_NULLPTR;
   L7_uint32  i;
 
   l7utilsFilenameStrip((L7_char8 **)&fileName);
 
   /* Basic sanity checks */
-  if((heap == L7_NULL) || (*((L7_uint32*)heapId) != heapId) || (size == 0))
+  if((heap == L7_NULL) || (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId) || (size == 0))
   {
     HEAP_TRACE(HEAP_PRINT_ALWAYS,"Failed to allocate memory -Invalid Params\n");
     return L7_NULLPTR;
   }
   if(heapIsInUse(heap) == L7_FALSE)
   {
@@ -715,34 +717,34 @@ void *heapAlloc(L7_uint32 heapId,
     if(buffPool->freeList != L7_NULLPTR)
     {
       void *wholeBuff;
 
       /* Extract the free buffer from the freeList */
       output = (void *)buffPool->freeList;
-      buffPool->freeList = (void *)(*(L7_uint32 *)output);
-      *(L7_uint32 *)output = 0;
+      buffPool->freeList = UINT_TO_PTR(PTR_GET_VALUE(output));
+      PTR_SET_VALUE(output) = 0;
 
       /* Setup the debug information */
-      wholeBuff = (void *)((L7_uint32)(output) - heap->headerSize);
+      wholeBuff = (void *)UINT_TO_PTR(PTR_TO_UINT64(output) - heap->headerSize);
       if((heap->flags & HEAP_DEBUG_FILE_INFO) != 0)
       {
         heapDebugInfo_t *dbgInfo = (heapDebugInfo_t *)wholeBuff;
         osapiStrncpy(dbgInfo->fileName, fileName, sizeof(dbgInfo->fileName));
         dbgInfo->lineNumber = lineNumber;
         if(osapiTaskIDSelfGet(&(dbgInfo->taskId)) != L7_SUCCESS)
         {
           dbgInfo->taskId = 0;
         }
         dbgInfo->sizeRequest = size;
-        wholeBuff = (void *)((L7_uint32)(wholeBuff) + sizeof(heapDebugInfo_t));
+        wholeBuff = (void *)UINT_TO_PTR(PTR_TO_UINT64(wholeBuff) + sizeof(heapDebugInfo_t));
       }
       if((heap->flags & HEAP_DEBUG_MEMORY_GUARD) != 0)
       {
         heapDebugMemGuard_t *dbgInfo = (heapDebugMemGuard_t *)wholeBuff;
         dbgInfo->guardWord = HEAP_GUARD_WORD_HEADER;
-        dbgInfo = (heapDebugMemGuard_t *)((L7_uint32)(output) + buffPool->buffSize);
+        dbgInfo = (heapDebugMemGuard_t *)UINT_TO_PTR(PTR_TO_UINT64(output) + buffPool->buffSize);
         dbgInfo->guardWord = HEAP_GUARD_WORD_TRAILER;
       }
 
       /* Update stats and exit */
       buffPool->stats.allocSuccess++;
       buffPool->stats.allocCount++;
@@ -767,13 +769,13 @@ void *heapAlloc(L7_uint32 heapId,
   /* If system mallocs are allowed, then try and satisfy the request using mallocs */
   if((i == heap->buffPoolCount) || (buffPool == L7_NULLPTR))
   {
     if((heap->flags & HEAP_MALLOC_ENABLE) != 0)
     {
       HEAP_TRACE(heap->dbgPrint,
-                 "Allocating from system memory for heapID - %x and size -%d \n",
+                 "Allocating from system memory for heapID - 0x%llx and size -%d \n",
                  heapId, size);
       output = (void*)osapiMalloc(heap->compId, size);
       if(output != L7_NULLPTR)
       {
         heap->sysMemStats.allocCount++;
         heap->sysMemStats.allocSuccess++;
@@ -787,13 +789,13 @@ void *heapAlloc(L7_uint32 heapId,
         heap->sysMemStats.allocFail++;
       }
     }
     else
     {
       HEAP_TRACE(heap->dbgPrint,
-                 "Failed: to allocate memory for heapID - %x and size -%d \n",
+                 "Failed: to allocate memory for heapID - 0x%llx and size -%d \n",
                  heapId,size);
       heap->sysMemStats.allocFail++;
     }
   }
 
   /* Unlock access */
@@ -815,21 +817,21 @@ void *heapAlloc(L7_uint32 heapId,
 * @returns  None
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void heapFree(L7_uint32 heapId,
+void heapFree(L7_uint64 heapId,
               void      *pMem)
 {
-  heap_t     *heap = (heap_t*)heapId;
+  heap_t     *heap = (heap_t*)UINT_TO_PTR(heapId);
   buffPool_t *buffPool;
 
   /* Basic sanity checks */
   if((heap == L7_NULL) || (pMem == L7_NULLPTR) ||
-     (*((L7_uint32*)heapId) != heapId))
+     (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId))
   {
     HEAP_TRACE(HEAP_PRINT_ALWAYS,"Failed to free to heap - Invalid Params\n");
     return;
   }
   if(heapIsInUse(heap) == L7_FALSE)
   {
@@ -848,13 +850,13 @@ void heapFree(L7_uint32 heapId,
   }
 
   /* Retrieve the buffer pool structure associated with the given buffer */
   if(heapBuffPoolGet(heap, pMem, &buffPool) == L7_SUCCESS)
   {
     /* Valid buffer to be freed-up */
-    *(L7_uint32 *)pMem = (L7_uint32)(buffPool->freeList);
+    PTR_SET_VALUE(pMem) = PTR_TO_UINT64(buffPool->freeList);
     buffPool->freeList = pMem;
 
     /* Update stats */
     buffPool->stats.allocCount--;
     buffPool->stats.cumFreeCount++;
   }
@@ -889,22 +891,22 @@ void heapFree(L7_uint32 heapId,
 * @returns  L7_FAILURE
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_RC_t heapBuffValidate(L7_uint32 heapId,
+L7_RC_t heapBuffValidate(L7_uint64 heapId,
                          void      *pMem)
 {
-  heap_t     *heap = (heap_t*)heapId;
+  heap_t     *heap = (heap_t*)UINT_TO_PTR(heapId);
   buffPool_t *buffPool;
   L7_RC_t    retVal = L7_FAILURE;
 
   /* Basic sanity checks */
   if((heap == L7_NULL) || (pMem == L7_NULLPTR) ||
-     (*((L7_uint32*)heapId) != heapId))
+     (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId))
   {
     return retVal;
   }
   if(heapIsInUse(heap) == L7_FALSE)
   {
     /* Un-initialized heap access */
@@ -942,18 +944,18 @@ L7_RC_t heapBuffValidate(L7_uint32 heapI
 * @returns  None
 *
 * @notes    memShow equivalent data output
 *
 * @end
 *********************************************************************/
-void  heapShow(L7_uint32 heapId)
+void  heapShow(L7_uint64 heapId)
 {
-  heap_t *heap = (heap_t *)heapId;
+  heap_t *heap = (heap_t *)UINT_TO_PTR(heapId);
 
   /* validate heap ID */
-  if((heap == L7_NULLPTR) || (*((L7_uint32*)heapId) != heapId))
+  if((heap == L7_NULLPTR) || (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId))
   {
     sysapiPrintf("Invalid Heap ID : 0x%x\n", heapId);
     return;
   }
   /* First dump the heap structure info */
   sysapiPrintf(" \n *********************** HEAP INFORMATION ********************** \n");
@@ -990,19 +992,19 @@ void  heapShow(L7_uint32 heapId)
 * @returns  None
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void heapDbgPrintSet(L7_uint32 heapId,
+void heapDbgPrintSet(L7_uint64 heapId,
                      L7_uint32 dbgPrint)
 {
-  heap_t *heap = (heap_t*)heapId;
+  heap_t *heap = (heap_t*)UINT_TO_PTR(heapId);
 
   /* validate heap ID */
-  if((heap == L7_NULLPTR) || (*((L7_uint32*)heapId) != heapId))
+  if((heap == L7_NULLPTR) || (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId))
   {
     return;
   }
   heap->dbgPrint = dbgPrint;
 }
 
@@ -1015,28 +1017,28 @@ void heapDbgPrintSet(L7_uint32 heapId,
 * @returns  None
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void heapDbgStatsDisplay(L7_uint32 heapId)
+void heapDbgStatsDisplay(L7_uint64 heapId)
 {
-  heap_t     *heap = (heap_t*)heapId;
+  heap_t     *heap = (heap_t*)UINT_TO_PTR(heapId);
   buffPool_t *tempPool;
   L7_uint32  i;
 
   /* Basic sanity checks */
-  if(heap == L7_NULLPTR || (*((L7_uint32*)heapId) != heapId))
+  if(heap == L7_NULLPTR || (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId))
   {
-    sysapiPrintf(" \n Invalid Heap ID : 0x%x\n", heapId);
+    sysapiPrintf(" \n Invalid Heap ID : 0x%llx\n", heapId);
     return;
   }
 
   /* First dump the heap structure info */
   sysapiPrintf(" \n *********************** HEAP INFORMATION ********************** \n");
-  sysapiPrintf(" Heap ID                        - 0x%x\n",heapId);
+  sysapiPrintf(" Heap ID                        - 0x%llx\n",heapId);
   sysapiPrintf(" Component ID                   - %u\n",heap->compId);
   sysapiPrintf(" Total heap size                - %u\n",heap->heapSize);
   if(heapIsInUse(heap) == L7_FALSE)
   {
     sysapiPrintf(" Heap Not In Use\n");
   }
@@ -1058,14 +1060,14 @@ void heapDbgStatsDisplay(L7_uint32 heapI
     {
       sysapiPrintf(" \n ******** Buffer Pool #%d Stats :\n", i + 1);
       sysapiPrintf("   Buffer Size                - %u\n",tempPool->buffSize);
       sysapiPrintf("   Number of buffers          - %u\n",tempPool->buffCount);
       sysapiPrintf("   Description of the pool    - %s\n",tempPool->descr);
       sysapiPrintf("   Flags                      - 0x%x\n",tempPool->flags);
-      sysapiPrintf("   Starting Memory Address    - 0x%x\n",tempPool->startLoc);
-      sysapiPrintf("   Ending Memory Address      - 0x%x\n",tempPool->endLoc);
+      sysapiPrintf("   Starting Memory Address    - 0x%llx\n",tempPool->startLoc);
+      sysapiPrintf("   Ending Memory Address      - 0x%llx\n",tempPool->endLoc);
       sysapiPrintf("   Current outstanding allocs - %u\n",tempPool->stats.allocCount);
       sysapiPrintf("   Total successful allocs    - %u\n",tempPool->stats.allocSuccess);
       sysapiPrintf("   Total failed allocs        - %u\n",tempPool->stats.allocFail);
       sysapiPrintf("   Cummulative frees          - %u\n",tempPool->stats.cumFreeCount);
       sysapiPrintf("   Usage maximum watermark    - %u\n",tempPool->stats.maxWaterLevel);
       sysapiPrintf("   Total request overflows    - %u\n",tempPool->stats.overflowCount);
@@ -1083,22 +1085,22 @@ void heapDbgStatsDisplay(L7_uint32 heapI
 * @returns  None
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void heapDbgBuffInfo(L7_uint32 heapId,
+void heapDbgBuffInfo(L7_uint64 heapId,
                      void      *pMem)
 {
-  heap_t         *heap = (heap_t*)heapId;
+  heap_t         *heap = (heap_t*)UINT_TO_PTR(heapId);
   buffPool_t     *buffPool;
 
   /* Basic sanity checks */
-  if((heap == L7_NULLPTR) || (*((L7_uint32*)heapId) != heapId))
+  if((heap == L7_NULLPTR) || (PTR_GET_VALUE(UINT_TO_PTR(heapId)) != heapId))
   {
-    sysapiPrintf(" \n Invalid Heap ID : 0x%x\n", heapId);
+    sysapiPrintf(" \n Invalid Heap ID : 0x%llx\n", heapId);
     return;
   }
   if(pMem == L7_NULLPTR)
   {
     sysapiPrintf(" \n Invalid Buffer Pointer of NULL\n");
     return;
@@ -1112,46 +1114,46 @@ void heapDbgBuffInfo(L7_uint32 heapId,
 
   /* Lock the access, if needed */
   if((heap->flags & HEAP_LOCK_GUARD) != 0)
   {
     if(osapiSemaTake(heap->semId, L7_WAIT_FOREVER) != L7_SUCCESS)
     {
-      sysapiPrintf(" \n Failed to acquire heap semaphore for heapId 0x%x\n", heapId);
+      sysapiPrintf(" \n Failed to acquire heap semaphore for heapId 0x%llx\n", heapId);
       return;
     }
   }
 
   /* Retrieve the buffer pool structure associated with the given buffer */
   if(heapBuffPoolGet(heap, pMem, &buffPool) != L7_SUCCESS)
   {
-    sysapiPrintf(" \n Buffer at 0x%x is not a valid buffer for heapId 0x%x\n",
-           (L7_uint32)pMem, heapId);
+    sysapiPrintf(" \n Buffer at %p is not a valid buffer for heapId 0x%x\n",
+                 pMem, heapId);
   }
   else
   {
-    L7_uint32 wholeBuffAddress;
+    L7_uint64 wholeBuffAddress;
 
-    wholeBuffAddress = (L7_uint32)pMem - heap->headerSize;
+    wholeBuffAddress = PTR_TO_UINT64(pMem) - heap->headerSize;
 
     /* display the info */
     sysapiPrintf(" \n ************************** Memory Details ****************************** \n");
-    sysapiPrintf(" Buffer/memory 0x%x resides in Buffer Pool - %s \n",
-           (L7_uint32)pMem, buffPool->descr);
+    sysapiPrintf(" Buffer/memory %p resides in Buffer Pool - %s \n",
+                 pMem, buffPool->descr);
     if((heap->flags & HEAP_DEBUG_FILE_INFO) != 0)
     {
-      heapDebugInfo_t *pDbgInfo = (heapDebugInfo_t *)wholeBuffAddress;
+      heapDebugInfo_t *pDbgInfo = (heapDebugInfo_t *)UINT_TO_PTR(wholeBuffAddress);
       sysapiPrintf(" Last allocated at File - %s:%d in task - %d and for size - %d \n",
              pDbgInfo->fileName,pDbgInfo->lineNumber,pDbgInfo->taskId,
              pDbgInfo->sizeRequest);
     }
     if((heap->flags & HEAP_DEBUG_MEMORY_GUARD) != 0)
     {
       heapDebugMemGuard_t *pDbgInfo =
-        (heapDebugMemGuard_t *)((L7_uint32)pMem - sizeof(heapDebugMemGuard_t));
+        (heapDebugMemGuard_t *)UINT_TO_PTR(PTR_TO_UINT64(pMem) - sizeof(heapDebugMemGuard_t));
       sysapiPrintf(" Header Guard Word - 0x%x\n", pDbgInfo->guardWord);
-      pDbgInfo = (heapDebugMemGuard_t *)((L7_uint32)pMem + buffPool->buffSize);
+      pDbgInfo = (heapDebugMemGuard_t *)UINT_TO_PTR(PTR_TO_UINT64(pMem) + buffPool->buffSize);
       sysapiPrintf(" Footer Guard Word - 0x%x\n", pDbgInfo->guardWord);
     }
   }
 
   /* Unlock access */
   if((heap->flags & HEAP_LOCK_GUARD) != 0)
Index: src/application/ip_mcast/util/heapmgr/heap.h
===================================================================
--- src/application/ip_mcast/util/heapmgr/heap.h	(revision 7768)
+++ src/application/ip_mcast/util/heapmgr/heap.h	(working copy)
@@ -42,13 +42,13 @@
 
 /* This structure needs to have a aligned memory size or else add padding */
 typedef struct heapDebugInfo_s
 {
   L7_uchar8 fileName[HEAP_FILENAME_SIZE];
   L7_uint32 lineNumber;
-  L7_uint32 taskId;
+  L7_uint64 taskId;
   L7_uint32 sizeRequest;
 }heapDebugInfo_t;
 
 /* This structure would be prefixed and suffixed for every buffer allocated */
 typedef struct heapDebugMemGuard_s
 {
@@ -69,21 +69,21 @@ typedef struct heapStats_s
 typedef struct buffPool_s
 {
   L7_uint32   buffSize;        /* Adjusted user available size per buffer */
   L7_uint32   buffCount;       /* Number of buffers in this pool */
   L7_uchar8   descr[HEAP_POOLNAME_SIZE]; /* Name of the pool */
   L7_uint32   flags;           /* Flags defining extra properties of the pool */
-  L7_uint32   startLoc;        /* Start location (absolute address) */
-  L7_uint32   endLoc;          /* End location (absolute address) */
+  L7_uint64   startLoc;        /* Start location (absolute address) */
+  L7_uint64   endLoc;          /* End location (absolute address) */
   heapStats_t stats;           /* Buffer pool statistics */
   void        *freeList;       /* Singly linked free buffers in the pool */
 }buffPool_t;
 
 typedef struct heap_s
 {
-  L7_uint32          validateMem;     /* Need to be first item always */
+  L7_uint64          validateMem;     /* Need to be first item always */
   L7_COMPONENT_IDS_t compId;
   L7_uint32          heapSize;        /* Size of heap, excluding the heap node */
   L7_uint32          inUse;           /* Size of heap initialized; 0 if un-initialized*/
   buffPool_t         *buffPool;       /* would be the sorted list */
   L7_uint32          buffPoolCount;   /* number of buffer pools configured */
   L7_uint32          headerSize;      /* Size of headers, if any */
Index: src/application/ip_mcast/util/heapmgr/heap_api.h
===================================================================
--- src/application/ip_mcast/util/heapmgr/heap_api.h	(revision 7768)
+++ src/application/ip_mcast/util/heapmgr/heap_api.h	(working copy)
@@ -60,13 +60,13 @@ typedef struct heapBuffPool_s
 * @returns  L7_NULL on failure.
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_uint32 heapCreate(L7_COMPONENT_IDS_t compId,
+L7_uint64 heapCreate(L7_COMPONENT_IDS_t compId,
                      size_t             size);
 
 /*********************************************************************
 *
 * @purpose  Initialize a Heap
 *
@@ -78,13 +78,13 @@ L7_uint32 heapCreate(L7_COMPONENT_IDS_t
 * @returns  L7_FAILURE
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_RC_t heapInit(L7_uint32      heapId,
+L7_RC_t heapInit(L7_uint64      heapId,
                  heapBuffPool_t bList[],
                  heapFlags_t    flags);
 
 /*********************************************************************
 *
 * @purpose  De-initialize a Heap
@@ -96,13 +96,13 @@ L7_RC_t heapInit(L7_uint32      heapId,
 * @returns  L7_FAILURE
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_RC_t heapDeInit(L7_uint32 heapId,
+L7_RC_t heapDeInit(L7_uint64 heapId,
 				   L7_BOOL   bForced);
 
 /*********************************************************************
 *
 * @purpose  Destroy a Heap
 *
@@ -113,13 +113,13 @@ L7_RC_t heapDeInit(L7_uint32 heapId,
 * @returns  L7_FAILURE
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_RC_t heapDestroy(L7_uint32 heapId,
+L7_RC_t heapDestroy(L7_uint64 heapId,
 					L7_BOOL   bForced);
 
 /*********************************************************************
 *
 * @purpose  Allocation from the heap
 *
@@ -132,13 +132,13 @@ L7_RC_t heapDestroy(L7_uint32 heapId,
 * @returns  L7_NULLPTR on failure
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void *heapAlloc(L7_uint32 heapId,
+void *heapAlloc(L7_uint64 heapId,
                 size_t    size,
                 L7_uchar8 *fileName,
                 L7_uint32 lineNumber);
 
 /*********************************************************************
 *
@@ -150,13 +150,13 @@ void *heapAlloc(L7_uint32 heapId,
 * @returns  None
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void heapFree(L7_uint32 heapId,
+void heapFree(L7_uint64 heapId,
               void      *pMem);
 
 /*********************************************************************
 *
 * @purpose  Check if a buffer is valid in a heap context
 *
@@ -167,13 +167,13 @@ void heapFree(L7_uint32 heapId,
 * @returns  L7_FAILURE
 *
 * @notes
 *
 * @end
 *********************************************************************/
-L7_RC_t heapBuffValidate(L7_uint32 heapId,
+L7_RC_t heapBuffValidate(L7_uint64 heapId,
                          void      *pMem);
 
 /*********************************************************************
 *
 * @purpose  To display the basic statistics for a heap
 *
@@ -182,13 +182,13 @@ L7_RC_t heapBuffValidate(L7_uint32 heapI
 * @returns  None
 *
 * @notes    memShow equivalent data output
 *
 * @end
 *********************************************************************/
-void  heapShow(L7_uint32 heapId);
+void  heapShow(L7_uint64 heapId);
 
 /*********************************************************************
 *
 * @purpose  Enable/disable debug prints for a heap
 *
 * @param    heapId   @b{(input)} Heap ID
@@ -197,13 +197,13 @@ void  heapShow(L7_uint32 heapId);
 * @returns  None
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void heapDbgPrintSet(L7_uint32 heapId,
+void heapDbgPrintSet(L7_uint64 heapId,
                      L7_uint32 dbgPrint);
 
 /*********************************************************************
 *
 * @purpose  To display the status for a heap
 *
@@ -212,13 +212,13 @@ void heapDbgPrintSet(L7_uint32 heapId,
 * @returns  None
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void heapDbgStatsDisplay(L7_uint32 heapId);
+void heapDbgStatsDisplay(L7_uint64 heapId);
 
 /*********************************************************************
 *
 * @purpose  Display available information on a heap allocated buffer
 *
 * @param    heapId  @b{(input)} Heap ID
@@ -227,12 +227,12 @@ void heapDbgStatsDisplay(L7_uint32 heapI
 * @returns  None
 *
 * @notes
 *
 * @end
 *********************************************************************/
-void heapDbgBuffInfo(L7_uint32 heapId,
+void heapDbgBuffInfo(L7_uint64 heapId,
                      void      *pMem);
 
 #endif /* HEAP_API_INCLUDE_H */
 
 
Index: src/application/ip_mcast/util/mcast_rtmbuf.c
===================================================================
--- src/application/ip_mcast/util/mcast_rtmbuf.c	(revision 7768)
+++ src/application/ip_mcast/util/mcast_rtmbuf.c	(working copy)
@@ -51,13 +51,13 @@ L7_uint32 rtmMbufAllocFailed =0;
 *
 * @end
 *********************************************************************/
 struct rtmbuf *rtm_dup(struct rtmbuf *pBuf)
 {
   struct rtmbuf *pDupBuf = L7_NULLPTR;
-  L7_uint32     frameHdl;
+  L7_uint64     frameHdl;
   L7_uchar8     *bufferAddr = L7_NULLPTR;
   L7_uint32     bufferPoolId;
   L7_uint32     dataLen;
   L7_uchar8     *pDataStart = L7_NULLPTR;
   L7_uchar8     *pOldDataStart = L7_NULLPTR;
 
@@ -100,23 +100,23 @@ struct rtmbuf *rtm_dup(struct rtmbuf *pB
    /* LOG_MSG("\n %s, %d : Failed to get free MBuf ", __FUNCTION__, __LINE__);*/
     return L7_NULLPTR;
   }
 
   /* Copy the data from the old data frame over to the new one
      and assign it to the duplicate buffer */
-  pDupBuf->rtm_bufhandle = (void *)frameHdl;
-  SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)(pDupBuf->rtm_bufhandle), pDataStart);
-  SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)(pBuf->rtm_bufhandle), pOldDataStart);
-  SYSAPI_NET_MBUF_GET_DATALENGTH((L7_netBufHandle)(pBuf->rtm_bufhandle), dataLen);
+  pDupBuf->rtm_bufhandle = UINT_TO_PTR(frameHdl);
+  SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)PTR_TO_UINT64(pDupBuf->rtm_bufhandle), pDataStart);
+  SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle), pOldDataStart);
+  SYSAPI_NET_MBUF_GET_DATALENGTH((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle), dataLen);
   memcpy(pDataStart, pOldDataStart, dataLen);
-  SYSAPI_NET_MBUF_SET_DATALENGTH((L7_netBufHandle)(pDupBuf->rtm_bufhandle), dataLen);
+  SYSAPI_NET_MBUF_SET_DATALENGTH((L7_netBufHandle)PTR_TO_UINT64(pDupBuf->rtm_bufhandle), dataLen);
 
   /* If the packet is vlan tagged then it needs to be stripped for application to process.
      If the outgoing ports are tagged then the lower layer should tag the packets again */
-  if (sysNetDataStripVlanTag((L7_uint32)(pDupBuf->rtm_bufhandle)) == L7_SUCCESS)
-    SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)(pDupBuf->rtm_bufhandle), pDataStart);
+  if (sysNetDataStripVlanTag(PTR_TO_UINT64(pDupBuf->rtm_bufhandle)) == L7_SUCCESS)
+    SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)PTR_TO_UINT64(pDupBuf->rtm_bufhandle), pDataStart);
 
   /* Setup the data length and start and return to caller */
   pDupBuf->rtm_data = (caddr_t)(pDataStart + sysNetDataOffsetGet(pDataStart));
   pDupBuf->rtm_len  = dataLen - sysNetDataOffsetGet(pDataStart);
   pDupBuf->rtm_pkthdr.len = pDupBuf->rtm_len;
 
Index: src/application/ip_mcast/vendor/dvmrp/dvmrp_cache_table.c
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/dvmrp_cache_table.c	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/dvmrp_cache_table.c	(working copy)
@@ -267,25 +267,25 @@ L7_RC_t dvmrpCacheTableCacheDelete(dvmrp
   if (entry->prune_retry_timer)
   {
     appTimerDelete(dvmrpcb->timerHandle, entry->prune_retry_timer);
     if (entry->pruneRetransmitimerHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &entry->pruneRetransmitimerHandle);
+                           (L7_uint64 *) &entry->pruneRetransmitimerHandle);
     }
     entry->prune_retry_timer=L7_NULLPTR;
 
   }
 
   if (entry->graft_sent)
   {
     appTimerDelete(dvmrpcb->timerHandle, entry->graft_timer);
     if (entry->graftTimeoutHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &entry->graftTimeoutHandle);
+                           (L7_uint64 *) &entry->graftTimeoutHandle);
     }
     DVMRP_FREE (L7_AF_INET, (void*) entry->graft_sent);        
     entry->graft_sent=L7_NULLPTR;   
     entry->graft_timer=L7_NULLPTR;
 
   }
@@ -293,13 +293,13 @@ L7_RC_t dvmrpCacheTableCacheDelete(dvmrp
   if (entry->cacheRemove_timer != L7_NULLPTR)
   {
     appTimerDelete(dvmrpcb->timerHandle, entry->cacheRemove_timer);
     if (entry->cacheRemoveHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &entry->cacheRemoveHandle);
+                           (L7_uint64 *) &entry->cacheRemoveHandle);
     }
     entry->cacheRemove_timer=L7_NULLPTR;    
   }
   
 
   for (prune = (dvmrp_prune_t*)SLLFirstGet(&(entry->ll_prunes));
Index: src/application/ip_mcast/vendor/dvmrp/dvmrp_debug.c
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/dvmrp_debug.c	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/dvmrp_debug.c	(working copy)
@@ -47,13 +47,13 @@ void dvmrpDebugIntfShow(L7_uint32 addrFa
   L7_uint32 uiIntf = 0;
   dvmrp_t *dvmrpcb=L7_NULLPTR;      
   L7_uint32 s_addr;  
   L7_int32 timeLeft;    
   L7_ulong32 probeExpTime;    
 
-  DVMRP_DEBUG_PRINTF("\n\nMCAST Heap-ID - 0x%x", mcastMapHeapIdGet(addrFamily));
+  DVMRP_DEBUG_PRINTF("\n\nMCAST Heap-ID - 0x%llx", (L7_uint64) mcastMapHeapIdGet(addrFamily));
 
 
   if ((dvmrpcb = dvmrpMapProtocolCtrlBlockGet (addrFamily)) == L7_NULLPTR)
   {
     DVMRP_DEBUG_PRINTF("\n\ndvmrpcb Pointer is NULL!!!!!!!!! \n\n");
     return;
@@ -1072,15 +1072,15 @@ void dvmrpDebugMRTTableShow(L7_uint32 ad
     }
     else
     {
       DVMRP_DEBUG_PRINTF("cahce remove timer not running\n");
     }
 
-    DVMRP_DEBUG_PRINTF("cache remove handle :%x\n",entry->cacheRemoveHandle);
-    DVMRP_DEBUG_PRINTF("prune Retransmitimer Handle:%x\n",entry->pruneRetransmitimerHandle);
-    DVMRP_DEBUG_PRINTF("graft Timeout Handle:%x\n",entry->graftTimeoutHandle);
+    DVMRP_DEBUG_PRINTF("cache remove handle :0x%llx\n",entry->cacheRemoveHandle);
+    DVMRP_DEBUG_PRINTF("prune Retransmitimer Handle:0x%llx\n",entry->pruneRetransmitimerHandle);
+    DVMRP_DEBUG_PRINTF("graft Timeout Handle:0x%llx\n",entry->graftTimeoutHandle);
     DVMRP_DEBUG_PRINTF("\n");      
 
     memcpy(&tmpEntry, entry, sizeof(dvmrp_cache_entry_t));
     entry = L7_NULLPTR;
     if (L7_SUCCESS != dvmrpCacheTableCacheNextGet(dvmrpcb,&tmpEntry, &entry))
     {
Index: src/application/ip_mcast/vendor/dvmrp/dvmrp_interface.c
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/dvmrp_interface.c	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/dvmrp_interface.c	(working copy)
@@ -232,13 +232,13 @@ L7_RC_t dvmrp_interface_activate (dvmrp_
     interface->timerBlock.data4 = dvmrpcb;    
     interface->probePeriodicTimerHandle =
     handleListNodeStore(dvmrpcb->handle_list, (void*)&interface->timerBlock);
 
     if (L7_NULLPTR == (interface->probe = appTimerAdd(dvmrpcb->timerHandle,
                                                       dvmrp_probe_sendHandler,
-                                                      (void *)interface->probePeriodicTimerHandle,
+                                                      UINT_TO_PTR(interface->probePeriodicTimerHandle),
                                                       DVMRP_NEIGHBOR_PROBE_INTERVAL,
                                                       "DV-PRB")))
     {
       DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,
                   "%s : %d Timer creation failed\n",__FUNCTION__,__LINE__);
       return L7_FAILURE;
@@ -273,13 +273,13 @@ L7_RC_t dvmrp_interface_activate (dvmrp_
     dvmrp_direct_route_delete(interface);
 
     appTimerDelete(dvmrpcb->timerHandle, interface->probe);
     if (interface->probePeriodicTimerHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &interface->probePeriodicTimerHandle);
+                           (L7_uint64 *) &interface->probePeriodicTimerHandle);
     }
     interface->probe=L7_NULLPTR;
 
     for (nbr = (dvmrp_neighbor_t *)SLLFirstGet(&(interface->ll_neighbors));
         nbr != L7_NULLPTR; nbr = nbrNext)
     {
@@ -291,13 +291,13 @@ L7_RC_t dvmrp_interface_activate (dvmrp_
         dvmrp_neighbor_cleanup(nbr);
 
         appTimerDelete(dvmrpcb ->timerHandle, nbr->timeout);
         if (nbr->nbrTimeoutHandle != L7_NULL)
         {
           handleListNodeDelete(dvmrpcb ->handle_list,
-                               &nbr->nbrTimeoutHandle);
+                               (L7_uint64 *) &nbr->nbrTimeoutHandle);
         }
         nbr->timeout=L7_NULLPTR;
       }
       if (osapiWriteLockTake(dvmrpcb->dvmrpRwLock, L7_WAIT_FOREVER) == L7_FAILURE)
       {
         DVMRP_DEBUG(DVMRP_DEBUG_FAILURES, "%s:%d Could Not Access the semaphore.\n\n",
Index: src/application/ip_mcast/vendor/dvmrp/dvmrp_main.c
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/dvmrp_main.c	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/dvmrp_main.c	(working copy)
@@ -59,13 +59,13 @@ L7_int32 dvmrpAdminModeSet(dvmrp_t *dvmr
               __FUNCTION__,__LINE__);
   dvmrpcb->updateTimerHandle =
   handleListNodeStore(dvmrpcb->handle_list, (void*)dvmrpcb);
 
   if (L7_NULLPTR == (dvmrpcb->timer = appTimerAdd(dvmrpcb->timerHandle,
                                                   dvmrp_timer_update,
-                                                  (void *)dvmrpcb->updateTimerHandle,
+                                                  UINT_TO_PTR(dvmrpcb->updateTimerHandle),
                                                   DVMRP_UPDATE_INTERVAL,
                                                   "DV-UPD")))
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s:%d timer instantiation failed \n", 
                 __FUNCTION__,__LINE__);
     DVMRP_DEBUG(DVMRP_DEBUG_TIMERS,"%s:%d timer instantiation failed \n",
@@ -73,13 +73,13 @@ L7_int32 dvmrpAdminModeSet(dvmrp_t *dvmr
     DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,"%s:%d timer instantiation failed \n", 
                 __FUNCTION__,__LINE__);
     appTimerDelete(dvmrpcb->timerHandle, dvmrpcb->timer);
     if (dvmrpcb->updateTimerHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &dvmrpcb->updateTimerHandle);
+                           (L7_uint64 *) &dvmrpcb->updateTimerHandle);
       dvmrpcb->updateTimerHandle = L7_NULL;
     }
     return L7_FAILURE;
   }
 
   DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,
@@ -87,71 +87,71 @@ L7_int32 dvmrpAdminModeSet(dvmrp_t *dvmr
               __FUNCTION__,__LINE__);
   dvmrpcb->routesTimeoutHandle =
   handleListNodeStore(dvmrpcb->handle_list, (void*)dvmrpcb);
 
   if (L7_NULLPTR == (dvmrpcb->age = appTimerAdd(dvmrpcb->timerHandle,
                                                 dvmrp_routes_timeout,
-                                                (void *)dvmrpcb->routesTimeoutHandle,
+                                                UINT_TO_PTR(dvmrpcb->routesTimeoutHandle),
                                                 DVMRP_TIMEOUT_INTERVAL,
                                                 "DV-RT")))
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s:%d timer instantiation failed \n", 
                 __FUNCTION__,__LINE__);
     DVMRP_DEBUG(DVMRP_DEBUG_TIMERS,"%s:%d timer instantiation failed \n", 
                 __FUNCTION__,__LINE__);
     appTimerDelete(dvmrpcb->timerHandle, dvmrpcb->age);
     if (dvmrpcb->routesTimeoutHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &dvmrpcb->routesTimeoutHandle);
+                           (L7_uint64 *) &dvmrpcb->routesTimeoutHandle);
       dvmrpcb->routesTimeoutHandle = L7_NULL;
     }
     appTimerDelete(dvmrpcb->timerHandle, dvmrpcb->timer);
     if (dvmrpcb->updateTimerHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &dvmrpcb->updateTimerHandle);
+                           (L7_uint64 *) &dvmrpcb->updateTimerHandle);
       dvmrpcb->updateTimerHandle = L7_NULL;
     }
     dvmrpcb->timer=L7_NULLPTR;
     return L7_FAILURE;
   }
 
   dvmrpcb->pruneExpireHandle =
   handleListNodeStore(dvmrpcb->handle_list, (void*)dvmrpcb);
 
   if (L7_NULLPTR == (dvmrpcb->expire = appTimerAdd(dvmrpcb->timerHandle,
                                                    dvmrp_prune_expire,
-                                                   (void *)dvmrpcb->pruneExpireHandle,
+                                                   UINT_TO_PTR(dvmrpcb->pruneExpireHandle),
                                                    DVMRP_PRUNE_TIMEOUT_INTERVAL,
                                                    "DV-PT")))
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s:%d timer instantiation failed \n", 
                 __FUNCTION__,__LINE__);
     DVMRP_DEBUG(DVMRP_DEBUG_TIMERS,"%s:%d prune timer instantiation failed \n",
                 __FUNCTION__,__LINE__);
     appTimerDelete(dvmrpcb->timerHandle, dvmrpcb->age);
     if (dvmrpcb->routesTimeoutHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &dvmrpcb->routesTimeoutHandle);
+                           (L7_uint64 *) &dvmrpcb->routesTimeoutHandle);
       dvmrpcb->routesTimeoutHandle = L7_NULL;
     }
     appTimerDelete(dvmrpcb->timerHandle, dvmrpcb->expire);
     if (dvmrpcb->pruneExpireHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &dvmrpcb->pruneExpireHandle);
+                           (L7_uint64 *) &dvmrpcb->pruneExpireHandle);
       dvmrpcb->pruneExpireHandle = L7_NULL;
     }
     dvmrpcb->expire=L7_NULLPTR;
     appTimerDelete(dvmrpcb->timerHandle, dvmrpcb->timer);
     if (dvmrpcb->updateTimerHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &dvmrpcb->updateTimerHandle);
+                           (L7_uint64 *) &dvmrpcb->updateTimerHandle);
       dvmrpcb->updateTimerHandle = L7_NULL;
     }
     dvmrpcb->timer=L7_NULLPTR;
     return L7_FAILURE;
   }
   DVMRP_DEBUG(DVMRP_DEBUG_TIMERS,"%s:%d prune timer instantiation successful\n",
@@ -201,36 +201,36 @@ L7_int32 dvmrpAdminModeReset(dvmrp_t *dv
     dvmrpcb->expire = L7_NULLPTR;
   }
 
   if (dvmrpcb->pruneExpireHandle != L7_NULL)
   {
     handleListNodeDelete(dvmrpcb->handle_list,
-                         &dvmrpcb->pruneExpireHandle);
+                         (L7_uint64 *) &dvmrpcb->pruneExpireHandle);
   }
   
   if(dvmrpcb->age != L7_NULLPTR)
   {
     appTimerDelete(dvmrpcb->timerHandle, dvmrpcb->age);
     dvmrpcb->age = L7_NULLPTR;  
   }
   if (dvmrpcb->routesTimeoutHandle != L7_NULL)
   {
     handleListNodeDelete(dvmrpcb->handle_list,
-                         &dvmrpcb->routesTimeoutHandle);
+                         (L7_uint64 *) &dvmrpcb->routesTimeoutHandle);
   }
   
   if(dvmrpcb->timer != L7_NULLPTR)
   {
     appTimerDelete(dvmrpcb->timerHandle, dvmrpcb->timer);
     dvmrpcb->timer = L7_NULLPTR;  
   }
 
   if (dvmrpcb->updateTimerHandle != L7_NULL)
   {
     handleListNodeDelete(dvmrpcb->handle_list,
-                         &dvmrpcb->updateTimerHandle);
+                         (L7_uint64 *) &dvmrpcb->updateTimerHandle);
   }
   
   DVMRP_DEBUG(DVMRP_DEBUG_APIS,"%s: LEAVING \n",__FUNCTION__);
   return(ret);
 }
 
@@ -371,13 +371,13 @@ L7_RC_t dvmrpEventProcess(L7_uchar8 fami
         entry->cacheRemoveHandle =
         handleListNodeStore(dvmrpcb->handle_list, (void*)entry);
 
         if (L7_NULLPTR == (entry->cacheRemove_timer = 
                            appTimerAdd(dvmrpcb->timerHandle,
                                        dvmrp_Cache_Remove,
-                                       (void *)entry->cacheRemoveHandle,
+                                       UINT_TO_PTR(entry->cacheRemoveHandle),
                                        expiryTime,
                                        "DV-CT")))
         {
           DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,
                       "%s:%d timer instantiation failed \n",
                       __FUNCTION__,__LINE__);
Index: src/application/ip_mcast/vendor/dvmrp/dvmrp_mfc.c
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/dvmrp_mfc.c	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/dvmrp_mfc.c	(working copy)
@@ -346,13 +346,13 @@ void dvmrp_cache_mfc_update (dvmrp_cache
     if (entry->prune_retry_timer)
     {
       appTimerDelete(dvmrpcb->timerHandle, entry->prune_retry_timer);
       if (entry->pruneRetransmitimerHandle != L7_NULL)
       {
         handleListNodeDelete(dvmrpcb->handle_list,
-                             &entry->pruneRetransmitimerHandle);
+                             (L7_uint64 *) &entry->pruneRetransmitimerHandle);
       }
       entry->prune_retry_timer=0;      
 
       /* reinitialize the prune retry back-off mechanism */
       entry->count = 0;
       entry->firstPrune = 0;
Index: src/application/ip_mcast/vendor/dvmrp/dvmrp_nbr.c
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/dvmrp_nbr.c	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/dvmrp_nbr.c	(working copy)
@@ -282,13 +282,13 @@ dvmrp_neighbor_t *dvmrp_neighbor_registe
     }
 
     nbr->nbrTimeoutHandle =
     handleListNodeStore(dvmrpcb->handle_list, (void*)nbr);
 
     nbr->timeout = appTimerAdd(dvmrpcb->timerHandle, dvmrp_neighbor_timeout, 
-                               (void *)nbr->nbrTimeoutHandle, expire_interval,
+                               UINT_TO_PTR(nbr->nbrTimeoutHandle), expire_interval,
                                "DV-NLT");
     if (L7_NULLPTR == nbr->timeout)
     {
       DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s : %d Timer creation failed\n",
                   __FUNCTION__,__LINE__);
       return L7_NULLPTR;
@@ -365,21 +365,22 @@ void dvmrp_neighbor_recover (dvmrp_inter
   if (timeLeft >= L7_NULL)
   {
     appTimerDelete(dvmrpcb->timerHandle, nbr->timeout);
     if (nbr->nbrTimeoutHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &nbr->nbrTimeoutHandle);
+                           (L7_uint64 *) &nbr->nbrTimeoutHandle);
     }
     nbr->timeout=L7_NULLPTR;
   }
   nbr->nbrTimeoutHandle =
   handleListNodeStore(dvmrpcb->handle_list, (void*)nbr);
 
   if (L7_NULLPTR == (nbr->timeout = appTimerAdd(dvmrpcb->timerHandle, 
-                                                dvmrp_neighbor_timeout, (void *)nbr->nbrTimeoutHandle,
+                                                dvmrp_neighbor_timeout,
+                                                UINT_TO_PTR(nbr->nbrTimeoutHandle),
                                                 expire_interval,
                                                 "DV-NLT2")))
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s:%d timer instantiation failed \n",
                 __FUNCTION__,__LINE__);
     DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,"%s:%d timer instantiation failed \n", 
@@ -593,13 +594,13 @@ void dvmrp_neighbor_cleanup (dvmrp_neigh
       if(graft->neighbor == nbr)
       {
       appTimerDelete(dvmrpcb->timerHandle, entry->graft_timer);
       if (entry->graftTimeoutHandle != L7_NULL)
       {
         handleListNodeDelete(dvmrpcb->handle_list,
-                             &entry->graftTimeoutHandle);
+                             (L7_uint64 *) &entry->graftTimeoutHandle);
       }
       DVMRP_FREE (L7_AF_INET, (void*) entry->graft_sent);        
       entry->graft_sent=L7_NULLPTR;
       entry->graft_timer=L7_NULLPTR;
       }
 
@@ -655,13 +656,13 @@ void dvmrp_neighbor_cleanup (dvmrp_neigh
                     __FUNCTION__,__LINE__);
         dvmrpcb->routesTimeoutHandle =
         handleListNodeStore(dvmrpcb->handle_list, (void*)dvmrpcb);
 
         if (L7_NULLPTR == (dvmrpcb->age = appTimerAdd(dvmrpcb->timerHandle,
                                                       dvmrp_routes_timeout,
-                                                      (void *)dvmrpcb->routesTimeoutHandle,
+                                                      UINT_TO_PTR(dvmrpcb->routesTimeoutHandle),
                                                       DVMRP_ROUTE_HOLD_TIME,
                                                       "DV-RT2")))
         {
           DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,
                       "%s:%d timer instantiation failed returning\n",
                       __FUNCTION__,__LINE__);
@@ -679,24 +680,24 @@ void dvmrp_neighbor_cleanup (dvmrp_neigh
                     __FUNCTION__,__LINE__);
 
         appTimerDelete(dvmrpcb->timerHandle, dvmrpcb->age);
         if (dvmrpcb->routesTimeoutHandle != L7_NULL)
         {
           handleListNodeDelete(dvmrpcb->handle_list,
-                               &dvmrpcb->routesTimeoutHandle);
+                               (L7_uint64 *) &dvmrpcb->routesTimeoutHandle);
         }
         dvmrpcb->age=L7_NULL;
         DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,
                     "%s:%d\n\nStarted dvmrp_routes_timeout every (120sec)\n\n",
                     __FUNCTION__,__LINE__);
         dvmrpcb->routesTimeoutHandle =
         handleListNodeStore(dvmrpcb->handle_list, (void*)dvmrpcb);
 
         if (L7_NULLPTR == (dvmrpcb->age = appTimerAdd(dvmrpcb->timerHandle,
                                                       dvmrp_routes_timeout,
-                                                      (void *)dvmrpcb->routesTimeoutHandle,
+                                                      UINT_TO_PTR(dvmrpcb->routesTimeoutHandle),
                                                       DVMRP_ROUTE_HOLD_TIME,
                                                       "DV-RT3")))
         {
           DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,
                       "%s:%d timer instantiation failed \n", __FUNCTION__,__LINE__);
           DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,
@@ -914,13 +915,13 @@ void dvmrp_neighbor_cleanup (dvmrp_neigh
     pData = pNextData;     
   }
 
   if (nbr->nbrTimeoutHandle != L7_NULL)
   {
     handleListNodeDelete(dvmrpcb->handle_list,
-                         &nbr->nbrTimeoutHandle);
+                         (L7_uint64 *) &nbr->nbrTimeoutHandle);
   }
   
   nbr->timeout =L7_NULLPTR;
   
 
   
Index: src/application/ip_mcast/vendor/dvmrp/dvmrp_protocol.c
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/dvmrp_protocol.c	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/dvmrp_protocol.c	(working copy)
@@ -104,22 +104,22 @@ L7_RC_t dvmrp_probe_recv (dvmrp_interfac
     if (timeLeft >= L7_NULL)
     {
       appTimerDelete(dvmrpcb->timerHandle, nbr->timeout);
       if (nbr->nbrTimeoutHandle != L7_NULL)
       {
         handleListNodeDelete(dvmrpcb->handle_list,
-                             &nbr->nbrTimeoutHandle);
+                             (L7_uint64 *) &nbr->nbrTimeoutHandle);
       }
       nbr->timeout=L7_NULLPTR;
     }
     nbr->nbrTimeoutHandle =
     handleListNodeStore(dvmrpcb->handle_list, (void*)nbr);
 
     if (L7_NULLPTR == (nbr->timeout = appTimerAdd(dvmrpcb->timerHandle,
                                                   dvmrp_neighbor_timeout,
-                                                  (void *)nbr->nbrTimeoutHandle,
+                                                  UINT_TO_PTR(nbr->nbrTimeoutHandle),
                                                   DVMRP_NEIGHBOR_EXPIRE_TIME,
                                                   "DV-NLT3")))
     {
       DVMRP_DEBUG(DVMRP_DEBUG_FAILURES, "%s:%d timer instantiation failed \n", 
                   __FUNCTION__, __LINE__);
       DVMRP_DEBUG(DVMRP_DEBUG_ROUTE, "%s:%d timer instantiation failed \n", 
@@ -387,22 +387,22 @@ L7_RC_t dvmrp_probe_recv (dvmrp_interfac
     if (timeLeft >= L7_NULL)
     {
       appTimerDelete(dvmrpcb->timerHandle, nbr->timeout);
       if (nbr->nbrTimeoutHandle != L7_NULL)
       {
         handleListNodeDelete(dvmrpcb->handle_list,
-                             &nbr->nbrTimeoutHandle);
+                             (L7_uint64 *) &nbr->nbrTimeoutHandle);
       }
       nbr->timeout = L7_NULLPTR;
     }
     nbr->nbrTimeoutHandle =
     handleListNodeStore(dvmrpcb->handle_list, (void*)nbr);
 
     if (L7_NULLPTR == (nbr->timeout = appTimerAdd(dvmrpcb->timerHandle,
                                                   dvmrp_neighbor_timeout,
-                                                  (void *)nbr->nbrTimeoutHandle,
+                                                  UINT_TO_PTR(nbr->nbrTimeoutHandle),
                                                   DVMRP_NEIGHBOR_EXPIRE_TIME,
                                                   "DV-NLT4")))
     {
       DVMRP_DEBUG(DVMRP_DEBUG_FAILURES, "%s:%d timer instantiation failed \n", 
                   __FUNCTION__, __LINE__);
       DVMRP_DEBUG(DVMRP_DEBUG_ROUTE, "%s:%d timer instantiation failed \n", 
@@ -1621,13 +1621,13 @@ L7_RC_t dvmrp_graft_ack_recv(dvmrp_inter
     entry->cacheRemove_timer = L7_NULLPTR;
   }
 
   if (entry->cacheRemoveHandle != L7_NULL)
   {
     handleListNodeDelete(dvmrpcb ->handle_list,
-                         &entry->cacheRemoveHandle);
+                         (L7_uint64 *) &entry->cacheRemoveHandle);
   }
 
   }
   DVMRP_DEBUG(DVMRP_DEBUG_APIS,"%s: LEAVING \n",__FUNCTION__);
 
   return L7_SUCCESS;  
@@ -1797,13 +1797,13 @@ L7_int32 dvmrp_graft_send (dvmrp_cache_e
   if (entry->cacheRemove_timer != L7_NULLPTR)
   {
     appTimerDelete(dvmrpcb->timerHandle, entry->cacheRemove_timer);
     if (entry->cacheRemoveHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &entry->cacheRemoveHandle);
+                           (L7_uint64 *) &entry->cacheRemoveHandle);
     }
     entry->cacheRemove_timer=L7_NULLPTR;    
   }
   
   if (entry->prune_retry_timer != L7_NULLPTR)
   {
@@ -1811,13 +1811,13 @@ L7_int32 dvmrp_graft_send (dvmrp_cache_e
     entry->prune_retry_timer=L7_NULLPTR;
   }
 
     if (entry->pruneRetransmitimerHandle != L7_NULL)
     {
       handleListNodeDelete(dvmrpcb->handle_list,
-                           &entry->pruneRetransmitimerHandle);
+                           (L7_uint64 *) &entry->pruneRetransmitimerHandle);
     }
 
  
   entry->holdtime = DVMRP_CACHE_EXPIRE_TIME;
   entry->expire = now + DVMRP_CACHE_EXPIRE_TIME;
   if (inetAddrHtop(&nbr->nbrAddr.addr, nbrAddr) != L7_SUCCESS)
@@ -1885,26 +1885,26 @@ L7_int32 dvmrp_graft_send (dvmrp_cache_e
     graft->expire = now + graft->holdtime;
     entry->graft_sent = graft;  
 
     if(timerRunning == L7_TRUE)
     {
       if (appTimerUpdate(dvmrpcb->timerHandle, entry->graft_timer, dvmrp_graft_timeout, 
-                         (void *)entry->graftTimeoutHandle, graft->holdtime,
+                         UINT_TO_PTR(entry->graftTimeoutHandle), graft->holdtime,
                          "DVMRP Graft Timer4") != L7_SUCCESS)
       {
         DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s : %d Timer Updation failed\n",__FUNCTION__,__LINE__);
         return L7_FAILURE;
       }
     }
     else
     {
       entry->graftTimeoutHandle =
       handleListNodeStore(dvmrpcb->handle_list, (void*)entry);
       if (L7_NULLPTR == (entry->graft_timer = appTimerAdd(dvmrpcb->timerHandle,
                                                           dvmrp_graft_timeout,
-                                                          (void *)entry->graftTimeoutHandle,
+                                                          UINT_TO_PTR(entry->graftTimeoutHandle),
                                                           graft->holdtime,
                                                           "DV-GT")))
       {
         DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s : %d Timer creation failed\n",__FUNCTION__,__LINE__);
         DVMRP_DEBUG(DVMRP_DEBUG_GRAFT,"%s : %d Timer creation failed\n",__FUNCTION__,__LINE__);
         return L7_FAILURE;
@@ -2110,13 +2110,13 @@ L7_int32 dvmrp_probe_send(dvmrp_interfac
 *********************************************************************/
 void dvmrp_probe_sendHandler(void *pParam)
 {
   dvmrp_timer_event_t *timerBlock = L7_NULLPTR;
   dvmrp_interface_t *interface = L7_NULLPTR;
   L7_dvmrp_inet_addr_t *addr = L7_NULLPTR;
-  L7_int32  handle = (L7_int32)pParam;
+  L7_int64 handle = PTR_TO_UINT64(pParam);
   L7_int32 rtrIfNum;
   dvmrp_t *dvmrpcb; 
 
   DVMRP_DEBUG(DVMRP_DEBUG_APIS, "%s: ENTERED \n", __FUNCTION__);
 
   timerBlock = (dvmrp_timer_event_t *)handleListNodeRetrieve(handle);
@@ -2164,13 +2164,14 @@ void dvmrp_probe_sendHandler(void *pPara
              " As a result of this, the DVMRP neighborship"
              " could be lost in the neighboring DVMRP routers.",
              interface->index);
   }
 
   if (L7_NULLPTR == (interface->probe = appTimerAdd(dvmrpcb->timerHandle,
-                                                    dvmrp_probe_sendHandler, (void *)interface->probePeriodicTimerHandle, 
+                                                    dvmrp_probe_sendHandler,
+                                                    UINT_TO_PTR(interface->probePeriodicTimerHandle), 
                                                     DVMRP_NEIGHBOR_PROBE_INTERVAL,
                                                     "DV-PRB2")))
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES, "%s:%d timer instantiation failed \n", 
                 __FUNCTION__, __LINE__);
     return;
@@ -2296,13 +2297,13 @@ L7_int32 dvmrp_prune_send(dvmrp_interfac
        */
       entry->pruneRetransmitimerHandle =
       handleListNodeStore(dvmrpcb->handle_list, (void*)entry);
 
       entry->prune_retry_timer = appTimerAdd(dvmrpcb->timerHandle,
                                              dvmrp_prune_retransmit_timer_expire,
-                                             (void *)entry->pruneRetransmitimerHandle,
+                                             UINT_TO_PTR(entry->pruneRetransmitimerHandle),
                                              entry->prune_retry_interval,
                                              "DV-PRxT");
     }
     else
     {
       L7_uint32 timeLeft = 0;
@@ -2320,23 +2321,23 @@ L7_int32 dvmrp_prune_send(dvmrp_interfac
       if (timeLeft >= L7_NULL)
       {
         appTimerDelete(dvmrpcb->timerHandle, entry->prune_retry_timer);
         if (entry->pruneRetransmitimerHandle != L7_NULL)
         {
           handleListNodeDelete(dvmrpcb->handle_list,
-                               &entry->pruneRetransmitimerHandle);
+                               (L7_uint64 *) &entry->pruneRetransmitimerHandle);
         }
         entry->prune_retry_timer=0;
       }
       entry->pruneRetransmitimerHandle =
       handleListNodeStore(dvmrpcb->handle_list, (void*)entry);
 
       if (L7_NULLPTR == (entry->prune_retry_timer = 
                          appTimerAdd(dvmrpcb->timerHandle, 
                                      dvmrp_prune_retransmit_timer_expire,
-                                     (void *)entry->pruneRetransmitimerHandle,
+                                     UINT_TO_PTR(entry->pruneRetransmitimerHandle),
                                      entry->prune_retry_interval,
                                       "DV-PRxT2")))
       {
         DVMRP_DEBUG(DVMRP_DEBUG_FAILURES, 
                     "%s:%d timer instantiation failed \n", 
                     __FUNCTION__, __LINE__);
@@ -2353,13 +2354,13 @@ L7_int32 dvmrp_prune_send(dvmrp_interfac
       entry->graft_sent=L7_NULLPTR;   
       entry->graft_timer=L7_NULLPTR;
     }
       if (entry->graftTimeoutHandle != L7_NULL)
       {
         handleListNodeDelete(dvmrpcb->handle_list,
-                             &entry->graftTimeoutHandle);
+                             (L7_uint64 *) &entry->graftTimeoutHandle);
       }
     
   }
   assert (neighbor);
   if (BIT_TEST (neighbor->flags, DVMRP_NEIGHBOR_DELETE))
   {
Index: src/application/ip_mcast/vendor/dvmrp/dvmrp_routing.c
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/dvmrp_routing.c	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/dvmrp_routing.c	(working copy)
@@ -161,13 +161,13 @@ void dvmrp_route_del (dvmrp_route_t *rou
     if (entry->graft_sent != L7_NULLPTR)
     {
       appTimerDelete(dvmrpcb->timerHandle, entry->graft_timer);
       if (entry->graftTimeoutHandle != L7_NULL)
       {
         handleListNodeDelete(dvmrpcb->handle_list,
-                             &entry->graftTimeoutHandle);
+                             (L7_uint64 *) &entry->graftTimeoutHandle);
       }
       DVMRP_FREE (L7_AF_INET, (void*) entry->graft_sent);        
       entry->graft_sent = L7_NULLPTR;      
       entry->graft_timer=L7_NULLPTR;
 
     }
@@ -855,13 +855,13 @@ L7_int32 dvmrp_update_fn_call(L7_int32 c
           DVMRP_DEBUG(DVMRP_DEBUG_GROUP,"%s: Successfully removed the timer grp=%s,src=%s on index=%d\n",
                       __FUNCTION__,grp,src,entry->parent->index);
         }
         if (entry->cacheRemoveHandle != L7_NULL)
         {
           handleListNodeDelete(dvmrpcb->handle_list,
-                               &entry->cacheRemoveHandle);
+                               (L7_uint64 *) &entry->cacheRemoveHandle);
         }
         entry->cacheRemove_timer=L7_NULLPTR;
       }
       if (entry->data)
       {
         route = entry->data;
@@ -964,13 +964,13 @@ L7_int32 dvmrp_update_fn_call(L7_int32 c
             DVMRP_DEBUG(DVMRP_DEBUG_GROUP,"%s: Successfully removed the timer grp=%s,src=%s on index=%d\n",
                         __FUNCTION__,grp,src,entry->parent->index);
           }
           if (entry->cacheRemoveHandle != L7_NULL)
           {
             handleListNodeDelete(dvmrpcb->handle_list,
-                                 &entry->cacheRemoveHandle);
+                                 (L7_uint64 *) &entry->cacheRemoveHandle);
           }
           entry->cacheRemove_timer=L7_NULLPTR;
         }
         interface = &dvmrpcb->dvmrp_interfaces[ifindex];
         if (dvmrpMemberShipTest (dvmrpcb,&entry->group, &entry->source, 
                                  ifindex) == L7_SUCCESS)
Index: src/application/ip_mcast/vendor/dvmrp/dvmrp_timer.c
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/dvmrp_timer.c	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/dvmrp_timer.c	(working copy)
@@ -45,13 +45,13 @@ void dvmrp_graft_timeout (void *pParam)
 {
   L7_uint32 now;
   dvmrp_graft_t *graft = L7_NULLPTR;
   dvmrp_neighbor_t *nbr = L7_NULLPTR;
   dvmrp_route_t *route = L7_NULLPTR;
   dvmrp_cache_entry_t *entry = L7_NULLPTR;
-  L7_int32  handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   dvmrp_t *dvmrpcb = L7_NULLPTR;  
 
   DVMRP_DEBUG(DVMRP_DEBUG_APIS,"%s: ENTERED \n",__FUNCTION__);
 
   entry = (dvmrp_cache_entry_t *)handleListNodeRetrieve(handle);
   if (L7_NULLPTR == entry)
@@ -79,13 +79,13 @@ void dvmrp_graft_timeout (void *pParam)
         BIT_TEST (graft->entry->flags, DVMRP_CACHE_DELETE))
     {
       appTimerDelete(dvmrpcb->timerHandle, entry->graft_timer);
       if (entry->graftTimeoutHandle != L7_NULL)
       {
         handleListNodeDelete(dvmrpcb->handle_list,
-                             &entry->graftTimeoutHandle);
+                             (L7_uint64 *) &entry->graftTimeoutHandle);
       }
       DVMRP_FREE (L7_AF_INET, (void*) graft);        
       entry->graft_sent =L7_NULLPTR;     
       entry->graft_timer=L7_NULLPTR;
       return; 
     }
@@ -116,13 +116,13 @@ void dvmrp_graft_timeout (void *pParam)
       graft->expire = now;
       BIT_SET(graft->entry->flags, DVMRP_CACHE_DVMRP_GRAFT);
     }
 
     if (L7_NULLPTR == (entry->graft_timer = appTimerAdd(dvmrpcb->timerHandle,
                                                         dvmrp_graft_timeout,
-                                                        (void *)entry->graftTimeoutHandle,
+                                                        UINT_TO_PTR(entry->graftTimeoutHandle),
                                                         graft->holdtime,
                                                         "DV-GT2")))
     {
       DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,
                   "%s : %d Timer creation failed\n",__FUNCTION__,__LINE__);
       return;
@@ -144,13 +144,13 @@ void dvmrp_graft_timeout (void *pParam)
 * @end
 *********************************************************************/
 void dvmrp_neighbor_timeout (void *pParam)
 {
   dvmrp_neighbor_t *nbr = L7_NULLPTR;
   dvmrp_t *dvmrpcb = L7_NULLPTR;     
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
 
   DVMRP_DEBUG(DVMRP_DEBUG_APIS,"%s: ENTERED \n",__FUNCTION__);
   
   nbr = (dvmrp_neighbor_t *)handleListNodeRetrieve(handle);
   if (L7_NULLPTR == nbr)
   {
@@ -187,13 +187,13 @@ void dvmrp_prune_expire (void *pParam)
 {
   dvmrp_cache_entry_t tmpEntry, *entry = L7_NULLPTR;
   dvmrp_prune_t *prune = L7_NULLPTR;
   dvmrp_t *dvmrpcb = L7_NULLPTR; 
   L7_uint32 min_prune_interval = 1/*DVMRP_PRUNE_TIMEOUT_INTERVAL*/;
   L7_uint32 now;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
 
   dvmrpcb = (dvmrp_t *)handleListNodeRetrieve(handle);
   if (L7_NULLPTR == dvmrpcb)
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"\n\nINVALID : dvmrpcb is NULL!\n\n");
     return;  
@@ -272,13 +272,13 @@ void dvmrp_prune_expire (void *pParam)
       break;
     }
   }
 
   if (L7_NULLPTR == (dvmrpcb->expire = appTimerAdd(dvmrpcb->timerHandle,
                                                    dvmrp_prune_expire,
-                                                   (void *)dvmrpcb->pruneExpireHandle,
+                                                   UINT_TO_PTR(dvmrpcb->pruneExpireHandle),
                                                    min_prune_interval,
                                                    "DV-PT3")))
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s:%d timer instantiation failed \n", 
                 __FUNCTION__,__LINE__);
     DVMRP_DEBUG(DVMRP_DEBUG_TIMERS,"%s:%d timer instantiation failed \n",
@@ -308,13 +308,13 @@ void dvmrpRestartRoutesTimeoutHandler(dv
               "%s:%d\n\nRestart dvmrp_routes_timeout every (140sec)\n\n",
               __FUNCTION__,__LINE__);
 
 
   if (L7_NULLPTR == (dvmrpcb->age = appTimerAdd(dvmrpcb->timerHandle,
                                                 dvmrp_routes_timeout,
-                                                (void *)dvmrpcb->routesTimeoutHandle, t,
+                                                UINT_TO_PTR(dvmrpcb->routesTimeoutHandle), t,
                                                 "DV-RT3")))
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s:%d timer instantiation failed \n",
                 __FUNCTION__,__LINE__);
     DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,"%s:%d timer instantiation failed \n",
                 __FUNCTION__,__LINE__);
@@ -338,13 +338,13 @@ void dvmrp_routes_timeout (void *pParam)
   L7_uint32 now, t;
   L7_uint32 nexttime = 0;
   dvmrpRouteData_t *pData = L7_NULLPTR;
   dvmrp_cache_entry_t tmpEntry, *entry = L7_NULLPTR;
   dvmrpRouteData_t *pNextData = L7_NULLPTR;
   dvmrp_route_t *route = L7_NULLPTR;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   dvmrp_t *dvmrpcb = L7_NULLPTR;
 
   DVMRP_DEBUG(DVMRP_DEBUG_APIS,"%s: ENTERED \n",__FUNCTION__);
   DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,"%s: ENTERED \n",__FUNCTION__);
 
   dvmrpcb = (dvmrp_t *)handleListNodeRetrieve(handle);
@@ -511,13 +511,13 @@ void dvmrp_routes_timeout (void *pParam)
 *
 * @end
 *********************************************************************/
 void dvmrp_Cache_Remove (void *pParam)
 {
   dvmrp_cache_entry_t *entry = L7_NULLPTR;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   dvmrp_t *dvmrpcb=L7_NULLPTR;  
 
   entry = (dvmrp_cache_entry_t *)handleListNodeRetrieve(handle);
   if (L7_NULLPTR == entry)
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"Invalid input parameter");
@@ -549,13 +549,13 @@ void dvmrp_Cache_Remove (void *pParam)
     entry->prune_retry_timer = L7_NULLPTR;
   }
   
   if (entry->pruneRetransmitimerHandle != L7_NULL)
   {
     handleListNodeDelete(dvmrpcb ->handle_list,
-                         &entry->pruneRetransmitimerHandle);
+                         (L7_uint64 *) &entry->pruneRetransmitimerHandle);
   }
 
   dvmrpCacheRemove(dvmrpcb ,entry);
 }
 
 /*********************************************************************
@@ -569,13 +569,13 @@ void dvmrp_Cache_Remove (void *pParam)
 * @notes    Route reports are sent on all the interfaces
 *       
 * @end
 *********************************************************************/
 void dvmrp_timer_update (void *pParam )
 {
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   dvmrp_t *dvmrpcb = L7_NULLPTR;
 
   /* DVMRP_DEBUG(DVMRP_DEBUG_APIS,"%s: ENTERED \n",__FUNCTION__); */
 
   dvmrpcb = (dvmrp_t *)handleListNodeRetrieve(handle);
   if (L7_NULLPTR == dvmrpcb)
@@ -595,13 +595,13 @@ void dvmrp_timer_update (void *pParam )
   DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,
               "%s:%d\n\nRestart dvmrp_timer_update every (60sec)\n\n",
               __FUNCTION__,__LINE__);
 
   if (L7_NULLPTR == (dvmrpcb->timer = appTimerAdd(dvmrpcb->timerHandle,
                                                   dvmrp_timer_update,
-                                                  (void *)dvmrpcb->updateTimerHandle,
+                                                  UINT_TO_PTR(dvmrpcb->updateTimerHandle),
                                                   DVMRP_UPDATE_INTERVAL,
                                                   "DV-UPD2")))
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s:%d timer instantiation failed \n",
                 __FUNCTION__,__LINE__);
     DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,"%s:%d timer instantiation failed \n", 
@@ -621,13 +621,13 @@ void dvmrp_timer_update (void *pParam )
 * @notes    only the updated routes are sent
 *       
 * @end
 *********************************************************************/
 void dvmrp_flash_update (void *pParam)
 {
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   dvmrp_t *dvmrpcb = L7_NULLPTR;
 
   DVMRP_DEBUG(DVMRP_DEBUG_APIS,"%s: ENTERED \n",__FUNCTION__);
   DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,"%s: ENTERED \n",__FUNCTION__);
 
   dvmrpcb = (dvmrp_t *)handleListNodeRetrieve(handle);
@@ -653,13 +653,13 @@ void dvmrp_flash_update (void *pParam)
                 "dvmrp_route_advertise\n",__FUNCTION__,__LINE__);
   }
 
   if(dvmrpcb->flashrUpdateTimerHandle != L7_NULL)
   {
     handleListNodeDelete(dvmrpcb ->handle_list,
-                         &dvmrpcb->flashrUpdateTimerHandle);
+                         (L7_uint64 *) &dvmrpcb->flashrUpdateTimerHandle);
 
   }
   
   DVMRP_DEBUG(DVMRP_DEBUG_APIS,"%s: LEAVING \n",__FUNCTION__);
   DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,"%s: LEAVING \n",__FUNCTION__);
 }
@@ -692,13 +692,13 @@ void dvmrp_flash_timer_set (dvmrp_t *dvm
 
   dvmrpcb->flashrUpdateTimerHandle =
   handleListNodeStore(dvmrpcb->handle_list, (void*)dvmrpcb);
 
   if (L7_NULLPTR == (dvmrpcb->flash = appTimerAdd(dvmrpcb->timerHandle,
                                                   dvmrp_flash_update,
-                                                  (void *)dvmrpcb->flashrUpdateTimerHandle,
+                                                  UINT_TO_PTR(dvmrpcb->flashrUpdateTimerHandle),
                                                   DVMRP_FLASH_INTERVAL,
                                                   "DV-FT")))
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"%s:%d Timer creation failed\n",
                 __FUNCTION__,__LINE__);
     DVMRP_DEBUG(DVMRP_DEBUG_ROUTE,"%s:%d Timer creation failed\n",
@@ -724,13 +724,13 @@ void dvmrp_flash_timer_set (dvmrp_t *dvm
 *       
 * @end
 *********************************************************************/
 void dvmrp_prune_retransmit_timer_expire(void * pParam)
 {
   dvmrp_cache_entry_t *entry = L7_NULLPTR;
-  L7_int32  handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   dvmrp_t           *dvmrpcb = L7_NULLPTR;
 
   entry= (dvmrp_cache_entry_t *)handleListNodeRetrieve(handle);
   if (L7_NULLPTR == entry)
   {
     DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,"Invalid input parameter");
@@ -775,13 +775,13 @@ void dvmrp_prune_retransmit_timer_expire
        entry->cacheRemoveHandle =
            handleListNodeStore(dvmrpcb->handle_list, (void*)entry);
 
     if (L7_NULLPTR == (entry->cacheRemove_timer =
                            appTimerAdd(dvmrpcb->timerHandle,
                                        dvmrp_Cache_Remove,
-                                       (void *)entry->cacheRemoveHandle,
+                                       UINT_TO_PTR(entry->cacheRemoveHandle),
                                        expiryTime,
                                        "DV-CT")))
     {
           DVMRP_DEBUG(DVMRP_DEBUG_FAILURES,
                       "%s:%d timer instantiation failed \n",
                       __FUNCTION__,__LINE__);
Index: src/application/ip_mcast/vendor/dvmrp/include/dvmrp_common.h
===================================================================
--- src/application/ip_mcast/vendor/dvmrp/include/dvmrp_common.h	(revision 7768)
+++ src/application/ip_mcast/vendor/dvmrp/include/dvmrp_common.h	(working copy)
@@ -215,13 +215,13 @@ typedef struct _dvmrp_interface_t
   L7_int32 dlist_out;   /* list num for output filtering */
   L7_int32 nbr_count;
   L7_APP_TMR_HNDL_t probe; /* neighbor probe */
   void *global; 
   L7_int32 igmp_querier;    
 
-  L7_uint32 probePeriodicTimerHandle;
+  L7_uint64 probePeriodicTimerHandle;
   dvmrp_timer_event_t timerBlock;
 } dvmrp_interface_t;
 
 typedef struct _dvmrp_neighbor_t
 {
   L7_sll_member_t *next;
@@ -235,13 +235,13 @@ typedef struct _dvmrp_neighbor_t
   L7_ulong32 flags;
   L7_ulong32 versionSupport;
   L7_int32 index;
   L7_APP_TMR_HNDL_t timeout;/* neighbor timeout */
   L7_int32 state;
 
-  L7_uint32 nbrTimeoutHandle;
+  L7_uint64 nbrTimeoutHandle;
 } dvmrp_neighbor_t;
 
 typedef struct _desg_fwd_t
 {
   L7_ulong32 status;  
   L7_int32 metric;
@@ -291,15 +291,15 @@ typedef struct dvmrp_cache_entry_s
   L7_uint32 firstPrune;                           /* prune retransmission*/
   L7_uint32 lastPrune;                            /* prune retransmission*/
   L7_uint32 prune_retry_interval;          /* prune retransmission*/
   L7_APP_TMR_HNDL_t prune_retry_timer; /* Prune retry timer  */
   L7_APP_TMR_HNDL_t cacheRemove_timer; /* cacheRemove timer  */
 
-  L7_uint32  cacheRemoveHandle;
-  L7_uint32  pruneRetransmitimerHandle;
-  L7_uint32  graftTimeoutHandle;
+  L7_uint64  cacheRemoveHandle;
+  L7_uint64  pruneRetransmitimerHandle;
+  L7_uint64  graftTimeoutHandle;
   /* AVL TREE requires this as last */  
   void *avlData;
 } dvmrp_cache_entry_t;
 
 typedef struct dvmrp_src_grp_entry_s 
 {
@@ -406,16 +406,16 @@ typedef struct _dvmrp_t
   L7_uint32 radix_entries;
 
   osapiRWLock_t    dvmrpRwLock;  /* read-write lock protects all DVMRP data. */
   L7_BOOL          dvmrpOperFlag; /* DVMRP Current operational flag */
   handle_list_t    *handle_list;     /* create the handle list */
 
-  L7_uint32  updateTimerHandle;
-  L7_uint32  routesTimeoutHandle;
-  L7_uint32  pruneExpireHandle;
-  L7_uint32  flashrUpdateTimerHandle;
+  L7_uint64  updateTimerHandle;
+  L7_uint64  routesTimeoutHandle;
+  L7_uint64  pruneExpireHandle;
+  L7_uint64  flashrUpdateTimerHandle;
 } dvmrp_t;
 
 typedef struct _dvmrp_prune_t 
 {
   L7_sll_member_t *next;
   dvmrp_neighbor_t *neighbor;
Index: src/application/ip_mcast/vendor/mfc/mfc.c
===================================================================
--- src/application/ip_mcast/vendor/mfc/mfc.c	(revision 7768)
+++ src/application/ip_mcast/vendor/mfc/mfc.c	(working copy)
@@ -1569,14 +1569,13 @@ L7_RC_t mfcMroutePktForward(mfcEntry_t *
          * packet arrival events are used to set up the control plane; however there is no valid data
          * to forward via the software forwarding plane
          */
         if (pData->m->rtm_bufhandle != L7_NULLPTR)
         {
           /* Attempt to forward the packet */
-          SYSAPI_NET_MBUF_GET_DATALENGTH(
-                                        (L7_netBufHandle)(pData->m->rtm_bufhandle), len);
+          SYSAPI_NET_MBUF_GET_DATALENGTH((L7_netBufHandle)PTR_TO_UINT64(pData->m->rtm_bufhandle), len);
           outEntry.iif = tempEntry.iif;
           if (mfcPktTransmit(pData->m, &outEntry) == L7_SUCCESS)
           {
             txStatus = L7_SUCCESS;
             /* Update the stats */
             tempEntry.numForwardedPkts++;
Index: src/application/ip_mcast/vendor/mfc/mfc_rxtx.c
===================================================================
--- src/application/ip_mcast/vendor/mfc/mfc_rxtx.c	(revision 7768)
+++ src/application/ip_mcast/vendor/mfc/mfc_rxtx.c	(working copy)
@@ -763,13 +763,13 @@ static L7_RC_t mfcIpPktDtlTransmit(L7_uc
 
   if ((family != L7_AF_INET) && (family != L7_AF_INET6))
   {
     MFC_DEBUG(MFC_DEBUG_FAILURES, "Wrong family type");
     if ((pBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
     }
     rtm_freem(pBuf);
     return L7_FAILURE;
   }
 
   /* Prepare packet to be sent */
@@ -784,21 +784,21 @@ static L7_RC_t mfcIpPktDtlTransmit(L7_uc
     MFC_DEBUG(MFC_DEBUG_FAILURES,"failed to tranmit packet over oif = %d ", rtrIfNum); 
     MFC_DEBUG(MFC_DEBUG_TX,
               "\n failed to tranmit packet through DTL over oif = %d",
               rtrIfNum);
     if ((pBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
     }
     rtm_freem(pBuf);
     return L7_FAILURE;
 
   }
   if ((pBuf->rtm_bufhandle) != L7_NULLPTR)
   {
-    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
   }
   rtm_freem(pBuf);
   return L7_SUCCESS;
 
 }
 
@@ -1100,13 +1100,13 @@ L7_BOOL mfcIpv4PktRecv(struct ip *pIp,
     return L7_FALSE;
   }
         
   /* Verify that MAC address in the packet is correctly formatted
      with respect to the destination multicast IP address.
      If the packet is malformed, then discard it. */
-  SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)pBuf->rtm_bufhandle, pData);
+  SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle), pData);
 
   if(mcastMacAddressCheck(L7_AF_INET,((L7_uchar8 *)(&(pIp->ip_dst))),pData)== L7_FAILURE)
   {
     return L7_TRUE;
   }
 
@@ -1137,13 +1137,13 @@ L7_BOOL mfcIpv4PktRecv(struct ip *pIp,
      and rtmbuf will be freed by the caller of this function. */
 
   memset(&sysnetPduInfo, 0, sizeof(sysnet_pdu_info_t));
   sysnetPduInfo.intIfNum = pBuf->rtm_pkthdr.rcvif->if_index;
   if (SYSNET_PDU_INTERCEPT(AF_INET,
                            SYSNET_INET_MFORWARD_IN,
-                           (L7_netBufHandle)(pBuf->rtm_bufhandle),
+                           (L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle),
                            &sysnetPduInfo,
                            L7_NULLPTR,
                            &hookVerdict) == L7_TRUE)
   {
     MFC_DEBUG(MFC_DEBUG_FAILURES,"\n SYSNET_PDU_INTERCEPT failed");
     return L7_FALSE;
Index: src/application/ip_mcast/vendor/mfc/mfc_v6.c
===================================================================
--- src/application/ip_mcast/vendor/mfc/mfc_v6.c	(revision 7768)
+++ src/application/ip_mcast/vendor/mfc/mfc_v6.c	(working copy)
@@ -259,13 +259,13 @@ L7_RC_t mfcIpv6PktTransmit(L7_uint32 rtr
   /* Compute the internal interface number for the given outgoing interface */
   if (ip6MapRtrIntfToIntIfNum(rtrIfNum, &intIfNum) != L7_SUCCESS)
   {
     MFC_DEBUG(MFC_DEBUG_FAILURES,
              " Failed to convert to internal interface number for rtrIfNum : %d",
              rtrIfNum);
-    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
     rtm_freem(pBuf);
     return L7_FAILURE;
   }
 
   pIp6Hdr = rtmtod(pBuf, L7_ip6Header_t *);
 
@@ -294,18 +294,18 @@ L7_RC_t mfcIpv6PktTransmit(L7_uint32 rtr
                               L7_FALSE, L7_FALSE, L7_FALSE)) != L7_SUCCESS)
   {
     MFC_DEBUG(MFC_DEBUG_FAILURES,
              " Failed to transmit pkt from socket = %d",mfcIp6SendSockId);   
     MFC_DEBUG(MFC_DEBUG_TX,"\n Failed to transmit pkt from socket = %d",
               mfcIp6SendSockId);
-    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
     rtm_freem(pBuf);
     return L7_FAILURE;
   }
 
-  SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+  SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
   rtm_freem(pBuf);
 
   return L7_SUCCESS;
 }
 #endif
 
@@ -326,13 +326,13 @@ L7_RC_t mfcIpv6PktTransmit(L7_uint32 rtr
   {
     MFC_DEBUG(MFC_DEBUG_FAILURES,
              " Failed to convert to internal interface number for rtrIfNum : %d",
              rtrIfNum);
     if ((pBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
     }
     rtm_freem(pBuf);
     return L7_FAILURE;
   }
 
   pIp6Hdr = (L7_ip6Header_t *)&pBuf->m_hdr.mh_data;
@@ -363,13 +363,13 @@ L7_RC_t mfcIpv6PktTransmit(L7_uint32 rtr
              intIfNum);  
     MFC_DEBUG(MFC_DEBUG_FAILURES,
               "\n Failed to convert to stack interface number for intIfNum = %d ", 
               intIfNum);  
     if ((pBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
     }
     rtm_freem(pBuf);
     return L7_FAILURE;
   }
 
   if ((ret = osapiPktInfoSend(mfcIp6SendSockId, pBuf->rtm_data + L7_IP6_HEADER_LEN,
@@ -382,20 +382,20 @@ L7_RC_t mfcIpv6PktTransmit(L7_uint32 rtr
     MFC_DEBUG(MFC_DEBUG_FAILURES,
              " Failed to transmit pkt from socket = %d",mfcIp6SendSockId);   
     MFC_DEBUG(MFC_DEBUG_TX,"\n Failed to transmit pkt from socket = %d",
               mfcIp6SendSockId);
     if ((pBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
     }
     rtm_freem(pBuf);
     return L7_FAILURE;
   }
   if ((pBuf->rtm_bufhandle) != L7_NULLPTR)
   {
-    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pBuf->rtm_bufhandle));
+    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(pBuf->rtm_bufhandle));
   }
   rtm_freem(pBuf);
 
   return L7_SUCCESS;
 }
 
@@ -489,13 +489,13 @@ L7_RC_t mfcIpv6PktRecv(void  *pktMsg)
     MFC_DEBUG(MFC_DEBUG_FAILURES,"\n Failed to get free MBuf ");
     bufferPoolFree(bufferPoolId, bufferAddr);
     return L7_FAILURE;
   }
   recvBuf->rtm_bufhandle = (void *)recvFrame;
 
-  SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)(recvBuf->rtm_bufhandle),
+  SYSAPI_NET_MBUF_GET_DATASTART((L7_netBufHandle)PTR_TO_UINT64(recvBuf->rtm_bufhandle),
                                 pDataStart); 
   
   memset(pDataStart, 0, L7_ENET_HDR_SIZE + 2);
   memcpy(pDataStart + L7_ENET_HDR_SIZE, &protoType, sizeof(protoType));
 
  /* inBytes = L7_PORT_ENET_ENCAP_MAX_MTU;*/
@@ -503,13 +503,13 @@ L7_RC_t mfcIpv6PktRecv(void  *pktMsg)
 
   memcpy((pDataStart + L7_ENET_HDR_SIZE + 2), buffer, inBytes);
 
   recvBuf->rtm_type = MT_DATA;  
   recvBuf->rtm_data = pDataStart + sysNetDataOffsetGet(pDataStart);
   /* this set the rtm_len */
-  SYSAPI_NET_MBUF_SET_DATALENGTH((L7_netBufHandle)(recvBuf->rtm_bufhandle), 
+  SYSAPI_NET_MBUF_SET_DATALENGTH((L7_netBufHandle)PTR_TO_UINT64(recvBuf->rtm_bufhandle), 
                                     inBytes+ L7_ENET_HDR_SIZE + 2);
 
   recvBuf->rtm_pkthdr.rcvif = L7_NULLPTR;
 
   /* Extract the IP Header from the packet and fill-up the internal structure */
   pTmpPtr = recvBuf->rtm_data;
@@ -524,49 +524,49 @@ L7_RC_t mfcIpv6PktRecv(void  *pktMsg)
 
   /* Set-up the Cache Info structure */
   if (inetAddressSet(L7_AF_INET6, &(ip6Hdr.src), &(mfcEntry.source)) != L7_SUCCESS)
   {
     if ((recvBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(recvBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(recvBuf->rtm_bufhandle));
     }
     bufferPoolFree(bufferPoolId, bufferAddr);  
     return L7_FAILURE;
   }
 
   /* Validity check for source address */
   if (inetIpAddressValidityCheck(L7_AF_INET6, &mfcEntry.source) != L7_SUCCESS)
   {
     MFC_DEBUG (MFC_DEBUG_FAILURES,"Source Address - %s is invalid",
                inetAddrPrint(&(mfcEntry.source),src));
     if ((recvBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(recvBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(recvBuf->rtm_bufhandle));
     } 
     bufferPoolFree(bufferPoolId, bufferAddr);
     return L7_FAILURE;
   }
    
   if (inetAddressSet(L7_AF_INET6, &(ip6Hdr.dst), &(mfcEntry.group)) != L7_SUCCESS)
   {
     if ((recvBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(recvBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(recvBuf->rtm_bufhandle));
     }
     bufferPoolFree(bufferPoolId, bufferAddr);  
     return L7_FAILURE;
   }
   MFC_DEBUG_ADDR(MFC_DEBUG_RX, "Rx'ed pkt for group : ", &mfcEntry.group);
   MFC_DEBUG_ADDR(MFC_DEBUG_RX, "Rx'ed pkt for source: ", &mfcEntry.source);
   MFC_DEBUG(MFC_DEBUG_RX, "Rx'ed pkt on iface  :  %d", rtrIfNum);
   if (inetIsInMulticast(&mfcEntry.group) != L7_TRUE)
   {
     MFC_DEBUG_ADDR(MFC_DEBUG_RX, "Rx'ed pkt for non- multicast group : ", &mfcEntry.group);
     if ((recvBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(recvBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(recvBuf->rtm_bufhandle));
     }
     bufferPoolFree(bufferPoolId, bufferAddr);  
     return L7_FAILURE;
   }
 
   mfcEntry.iif = rtrIfNum;
@@ -575,31 +575,31 @@ L7_RC_t mfcIpv6PktRecv(void  *pktMsg)
   mfcEntry.m   = recvBuf;
   if (L7_IP6_IS_ADDR_MULTICAST_LOC_SCOPE(&(mfcEntry.group.addr.ipv6)))
   {
     MFC_DEBUG(MFC_DEBUG_RX,"\n Received link local multicast packet,ignoring it");
     if ((recvBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(recvBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(recvBuf->rtm_bufhandle));
     }
     bufferPoolFree(bufferPoolId, bufferAddr);
     return L7_FAILURE;
   }
 
   if (mfcMroutePktForward(&mfcEntry) != L7_SUCCESS)
   {
     MFC_DEBUG(MFC_DEBUG_FAILURES,"\n Failed to forward packet ");
     if ((recvBuf->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(recvBuf->rtm_bufhandle));
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(recvBuf->rtm_bufhandle));
     }
     bufferPoolFree(bufferPoolId, bufferAddr);
     return L7_FAILURE;
   }
   if ((recvBuf->rtm_bufhandle) != L7_NULLPTR)
   {
-    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(recvBuf->rtm_bufhandle));
+    SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(recvBuf->rtm_bufhandle));
   }
   bufferPoolFree(bufferPoolId, bufferAddr);
   return L7_SUCCESS;
 }  
 
 /*********************************************************************
Index: src/application/ip_mcast/vendor/mgmd/mgmd.c
===================================================================
--- src/application/ip_mcast/vendor/mgmd/mgmd.c	(revision 7768)
+++ src/application/ip_mcast/vendor/mgmd/mgmd.c	(working copy)
@@ -124,13 +124,13 @@ static L7_RC_t mgmdUtilAppTimerLower (mg
                       void *pParam,
                       L7_APP_TMR_HNDL_t *tmrHandle,
                       L7_uint32 lowerTimeOut,
                       MGMD_TIMER_t timerType);
 static L7_RC_t  mgmdUtilAppTimerHandleDelete(mgmd_cb_t *mgmdCB,
                                              L7_APP_TMR_HNDL_t *timer,
-                                             L7_uint32 *handle);
+                                             L7_uint64 *handle);
 static L7_RC_t  mgmdUtilAppTimerDelete(mgmd_cb_t *mgmdCB,
                                        L7_APP_TMR_HNDL_t *timer);
 
 static
 L7_RC_t mgmd_global_mode_set(mgmd_cb_t *mgmdCB, L7_uint32 gblAdminMode);
 
@@ -172,14 +172,17 @@ void mgmdSourceTimerUpdate(mgmd_cb_t *mg
 {
   qSrcs[*srcCount] = srcRec->sourceAddress;
   (*srcCount)++;
   srcRec->sourceInterval = lastMemQueryCount * lastMemQueryInterval;
 
   if ((srcRec->sourceTimer != L7_NULLPTR) &&
-      (appTimerUpdate(mgmdCB->timerHandle,&srcRec->sourceTimer, mgmd_timeout_sources_event_handler,
-                     (void*)srcRec->src_timer_handle, srcRec->sourceInterval,
+      (appTimerUpdate(mgmdCB->timerHandle,
+                      &srcRec->sourceTimer, 
+                      (void *) mgmd_timeout_sources_event_handler,
+                      UINT_TO_PTR(srcRec->src_timer_handle), 
+                      srcRec->sourceInterval,
                      "MGMD Source Timer2") != L7_SUCCESS))
   {
     MGMD_DEBUG_ADDR(MGMD_DEBUG_APIS, "Src Node Timer Updation Failed for src = \n",
                     &srcRec->sourceAddress);
     return;
   }
@@ -618,14 +621,17 @@ static void mgmd_v3_is_in_process (mgmd_
         mgmd_src_info_for_mrp_add(&group_info, srcRec->sourceAddress, MGMD_FILTER_MODE_INCLUDE, MGMD_SOURCE_ADD);
       }
 
     }
     /* 6.4.1: (A)=GMI */
     srcRec->sourceInterval = ((robustnessvar * queryInterval) + (responseInterval));
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)srcRec->src_timer_handle,
-                            &srcRec->sourceTimer,srcRec->sourceInterval,
+    if (mgmdUtilAppTimerSet(mgmdCB,
+                            L7_NULL,
+                            (void*) UINT_TO_PTR(srcRec->src_timer_handle),
+                            &srcRec->sourceTimer,
+                            srcRec->sourceInterval,
                             L7_MGMD_SRC_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not Start the Source timer \n");
       return;
     }
   }/*End-of-For-Loop*/
@@ -694,13 +700,13 @@ static void mgmd_v3_is_ex_process(mgmd_i
   /* Initialize */
   group_info.numSrcs = 0;
   /* 6.4.1: Group Timer=GMI */
   mgmd_group->interval = ((robustnessvar * queryInterval) + (responseInterval));
 
   MGMD_DEBUG (MGMD_DEBUG_APIS, " Grp timer = %p", mgmd_group->groupTimer);
-  if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_group->grp_timer_handle,
+  if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*) UINT_TO_PTR(mgmd_group->grp_timer_handle),
                           &mgmd_group->groupTimer,  mgmd_group->interval,
                           L7_MGMD_GRP_TIMER) != L7_SUCCESS)
   {
     MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not update the Grp Timer\n");
     return;
   }
@@ -721,13 +727,13 @@ static void mgmd_v3_is_ex_process(mgmd_i
         if((srcRec =mgmd_source_create(mgmdCB,mgmd_group,temp_src_ptr.sourceAddress ))== L7_NULLPTR)
         {
           MGMD_DEBUG (MGMD_DEBUG_FAILURE, " MGMD:Error in creating the Source node \n");
           return;
         }
         srcRec->sourceInterval = ((robustnessvar * queryInterval) + (responseInterval));
-        if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)srcRec->src_timer_handle,
+        if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*) UINT_TO_PTR(srcRec->src_timer_handle),
                             &srcRec->sourceTimer,srcRec->sourceInterval,
                             L7_MGMD_SRC_TIMER) != L7_SUCCESS)
         {
           MGMD_FREE(mgmdCB->proto,(srcRec));
           MGMD_DEBUG (MGMD_DEBUG_FAILURE, " MGMD:Could not Start the Source timer \n");
           return;
@@ -938,13 +944,13 @@ static void mgmd_v3_to_in_process (mgmd_
       }
     }
 
     /* 6.4.2: (A/B)=GMI */
     srcRec->sourceInterval = ((robustnessvar * queryInterval) + (responseInterval));
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL,(void*) srcRec->src_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL,(void*) UINT_TO_PTR(srcRec->src_timer_handle),
                             &srcRec->sourceTimer,srcRec->sourceInterval,
                             L7_MGMD_SRC_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not Start the Source timer \n");
       return;
     }
@@ -1088,13 +1094,13 @@ static void mgmd_v3_to_ex_process(mgmd_i
   /* Initialize local variables */
   group_info.numSrcs = 0;
 
   /* 6.4.2: Group Timer=GMI */
   mgmd_group->interval = ((robustnessvar * queryInterval) + (responseInterval));
 
-  if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_group->grp_timer_handle,
+  if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_group->grp_timer_handle),
                           &mgmd_group->groupTimer, mgmd_group->interval,
                           L7_MGMD_GRP_TIMER) != L7_SUCCESS)
   {
     MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the Grp Timer\n");
     return;
   }
@@ -1223,13 +1229,13 @@ static void mgmd_v3_to_ex_process(mgmd_i
         if((srcRec =mgmd_source_create(mgmdCB,mgmd_group,temp_src_ptr.sourceAddress ))== L7_NULLPTR)
         {
           MGMD_DEBUG (MGMD_DEBUG_FAILURE, " MGMD:Error in creating the Source node \n");
           return;
         }
         srcRec->sourceInterval = grpTimeLeft;
-        if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)srcRec->src_timer_handle,
+        if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(srcRec->src_timer_handle),
                                 &srcRec->sourceTimer,srcRec->sourceInterval,
                                 L7_MGMD_SRC_TIMER) != L7_SUCCESS)
         {
           MGMD_FREE(mgmdCB->proto,(srcRec));
           MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not Start the Source timer \n");
           return;
@@ -1400,13 +1406,13 @@ static void mgmd_v3_allow_process(mgmd_i
       }
     }
 
     /* 6.4.2: (A/B)=GMI */
     srcRec->sourceInterval = ((robustnessvar * queryInterval) + (responseInterval));
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void *)srcRec->src_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void *)UINT_TO_PTR(srcRec->src_timer_handle),
                             &srcRec->sourceTimer,srcRec->sourceInterval,
                             L7_MGMD_SRC_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not Start the Source timer \n");
       return;
     }
@@ -1526,13 +1532,13 @@ static void mgmd_v3_block_process (mgmd_
         {
           MGMD_DEBUG (MGMD_DEBUG_FAILURE, " MGMD:Error in creating the Source node \n");
           return;
         }
 
         srcRec->sourceInterval = grpTimeLeft;
-        if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)srcRec->src_timer_handle,
+        if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(srcRec->src_timer_handle),
                                 &srcRec->sourceTimer,srcRec->sourceInterval,
                                 L7_MGMD_SRC_TIMER) != L7_SUCCESS)
         {
           MGMD_FREE(mgmdCB->proto,(srcRec));
           MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not Start the Source timer \n");
           return;
@@ -1968,21 +1974,21 @@ void mgmd_v2membership_report(mgmd_info_
     }
 
     mgmd_group->interval = mgmd_group_membership_interval1;
 
     mgmd_info->numOfJoins++;
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_group->grp_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_group->grp_timer_handle),
                             &mgmd_group->groupTimer, mgmd_group->interval,
                             L7_MGMD_GRP_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not update the Grp Timer\n");
       return;
     }
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_group->v2host_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_group->v2host_timer_handle),
                             &mgmd_group->v2HostTimer, mgmd_group_membership_interval1,
                             L7_MGMD_V2HOST_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the V2 host Timer\n");
       return;
     }
@@ -1992,13 +1998,13 @@ void mgmd_v2membership_report(mgmd_info_
   {
     inetAddrHtop(&group, groupStr);
     MGMD_DEBUG (MGMD_DEBUG_REPORTS, "TR_TRACE: group %s on %d updated\n", groupStr, mgmd_info->ifIndex);
 
     mgmd_group->v2HostPresentFlag = L7_TRUE;
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_group->v2host_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_group->v2host_timer_handle),
                             &mgmd_group->v2HostTimer, mgmd_group_membership_interval1,
                             L7_MGMD_V2HOST_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the V2 host Timer\n");
       return;
     }
@@ -2036,13 +2042,13 @@ void mgmd_v2membership_report(mgmd_info_
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Copy operation Failed \n");
       return;
     }
     mgmd_group->interval = mgmd_group_membership_interval1;
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_group->grp_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_group->grp_timer_handle),
                             &mgmd_group->groupTimer, mgmd_group->interval,
                             L7_MGMD_GRP_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not update the Grp Timer\n");
       return;
     }
@@ -2128,26 +2134,26 @@ static void mgmd_v1membership_report (mg
     mgmd_group->v1HostPresentFlag = L7_TRUE;
     mgmd_group->groupCompatMode = L7_MGMD_VERSION_1;
 
     inetAddrHtop(&group, groupStr);
     MGMD_DEBUG (MGMD_DEBUG_REPORTS, "TR_TRACE: group %s on %d joined\n",groupStr, mgmd_info->ifIndex);
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL,(void*) mgmd_group->grp_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL,(void*)UINT_TO_PTR(mgmd_group->grp_timer_handle),
                             &mgmd_group->groupTimer, mgmd_group->interval,
                             L7_MGMD_GRP_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not update the Grp Timer\n");
       return;
     }
 
     if ((!MCAST_BITX_TEST (mgmd_info->flags.bits, IGMP_QUERIER)) &&
       (mgmd_info->querierQueryInterval != MGMD_ZERO))
     {
       queryInterval = mgmd_info->querierQueryInterval;
     }
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL,(void*) mgmd_group->v1host_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL,(void*)UINT_TO_PTR(mgmd_group->v1host_timer_handle),
                             &mgmd_group->v1HostTimer, mgmd_group_membership_interval1,
                             L7_MGMD_V1HOST_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the V1 host Timer\n");
       return;
     }
@@ -2180,23 +2186,23 @@ static void mgmd_v1membership_report (mg
 
     inetAddrHtop(&group, groupStr);
     MGMD_DEBUG (MGMD_DEBUG_REPORTS, "MGMD:TR_TRACE: group %s on %d updated\n",
                 groupStr, mgmd_info->ifIndex);
     mgmd_group->v1HostPresentFlag = L7_TRUE;
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_group->v1host_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_group->v1host_timer_handle),
                             &mgmd_group->v1HostTimer, mgmd_group_membership_interval1,
                             L7_MGMD_V1HOST_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the V1 host Timer\n");
       return;
     }
 
     mgmd_group->interval = mgmd_group_membership_interval1;
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL,(void*)mgmd_group->grp_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL,(void*)UINT_TO_PTR(mgmd_group->grp_timer_handle),
                             &mgmd_group->groupTimer, mgmd_group->interval,
                             L7_MGMD_GRP_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not update the Grp Timer\n");
       return;
     }
@@ -2373,13 +2379,13 @@ static void mgmd_group_src_specific_q_se
       SLLNodeDelete(&(mgmd_info->ll_query_reqs), (L7_sll_member_t *)qreq);
       mgmd_group->grpSrcQueryData =  L7_NULLPTR;
       MGMD_DEBUG (MGMD_DEBUG_FAILURE, " MGMD:Could not get the handle node to store the timer data.\n");
       return;
     }
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)qreq->query_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(qreq->query_timer_handle),
                             &qreq->timer, lastMemQueryInterval,
                             L7_MGMD_GRP_QUERY_TIMER) != L7_SUCCESS)
     {
       for (index = 0; index < numSrcs; index++)
       {
         srcAddrBuff = qreq->qSrcs[index];
@@ -2515,25 +2521,25 @@ static void mgmd_group_specific_q_send(m
       SLLNodeDelete(&(mgmd_info->ll_query_reqs), (L7_sll_member_t *)qreq);
       mgmd_group->grpQueryData =  L7_NULLPTR;
       MGMD_DEBUG (MGMD_DEBUG_FAILURE, " MGMD:Could not get the handle node to store the timer data.\n");
       return;
     }
 
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)qreq->query_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(qreq->query_timer_handle),
                             &qreq->timer, lastMemQueryInterval,
                             L7_MGMD_GRP_QUERY_TIMER) != L7_SUCCESS)
     {
       MGMD_FREE(family,(info));
       SLLNodeDelete(&(mgmd_info->ll_query_reqs), (L7_sll_member_t *)qreq);
       mgmd_group->grpQueryData =  L7_NULLPTR;
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the Grp Timer\n");
       return;
     }
   }
 
-  if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_group->grp_timer_handle,
+  if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_group->grp_timer_handle),
                           &mgmd_group->groupTimer, mgmd_group->interval,
                           L7_MGMD_GRP_TIMER) != L7_SUCCESS)
   {
     MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not update the Grp Timer\n");
     return;
   }
@@ -2822,13 +2828,13 @@ static void mgmd_group_query_timeout_eve
   L7_inet_addr_t *srcsLeLmqt[MGMD_MAX_QUERY_SOURCES];
   L7_uint32       numGtLmqt, numLeLmqt;
   L7_uint32       lastMemQueryInterval;
   L7_uint32       lastMemQueryCount;
   L7_uchar8       family;
   void *info;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
 
   MGMD_DEBUG (MGMD_DEBUG_APIS, " Entered");
 
   info= (void*)handleListNodeRetrieve(handle);
   if(info == L7_NULLPTR)
   {
@@ -2934,13 +2940,13 @@ static void mgmd_group_query_timeout_eve
     {
       mgmd_group->grpQueryData =  L7_NULLPTR;
     }
   }
   else
   {
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)qreq->query_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(qreq->query_timer_handle),
                             &qreq->timer, lastMemQueryInterval,
                             L7_MGMD_GRP_QUERY_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the Grp Timer\n");
       return;
     }
@@ -3033,24 +3039,24 @@ void mgmd_v3membership_query(mgmd_info_t
   mgmdCB = mgmd_info->mgmdCB;
 
   result = L7_INET_ADDR_COMPARE(&(mgmd_info->mgmd_querierIP), &source);
   if (result == 0)
   {
     /* Reset other querier present timer */
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_info->mgmd_querier_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_info->mgmd_querier_timer_handle),
                             &mgmd_info->mgmd_querier_timer,
                             mgmd_other_querier_present_interval, L7_MGMD_QUERIER_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Failed to update Querier timer\n");
       return;
     }
   }
   else if (result > 0)
   {
     /* This querier has lower ip address than the current */
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_info->mgmd_querier_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_info->mgmd_querier_timer_handle),
                             &mgmd_info->mgmd_querier_timer,
                             mgmd_other_querier_present_interval,
                             L7_MGMD_QUERIER_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the Querier Timer\n");
       return;
@@ -3131,13 +3137,13 @@ void mgmd_v3membership_query(mgmd_info_t
 
         MGMD_DEBUG (MGMD_DEBUG_QUERY, " Group found , lmqt = %d, numSrcs = %d",
                     lmqt, numSrcs);
 
         if (numSrcs == 0)
         {
-          if (mgmdUtilAppTimerLower(mgmdCB, L7_NULL, (void*)mgmd_group->grp_timer_handle,
+          if (mgmdUtilAppTimerLower(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_group->grp_timer_handle),
                                     &mgmd_group->groupTimer, lmqt, L7_MGMD_GRP_TIMER) != L7_SUCCESS)
           {
             MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not lower the Group timer  \n");
             return;
           }
           mgmd_group->interval = lmqt;
@@ -3152,13 +3158,13 @@ void mgmd_v3membership_query(mgmd_info_t
             srcRecSrch.sourceAddress = srcs[index];;
 
             srcRec = (mgmd_source_record_t *)SLLFind(&(mgmd_group->sourceRecords),
                                                      (L7_sll_member_t *)&srcRecSrch);
             if (srcRec != L7_NULLPTR)
             {
-              if (mgmdUtilAppTimerLower(mgmdCB, L7_NULL,(void*)srcRec->src_timer_handle,
+              if (mgmdUtilAppTimerLower(mgmdCB, L7_NULL,(void*)UINT_TO_PTR(srcRec->src_timer_handle),
                                         &srcRec->sourceTimer, lmqt, L7_MGMD_SRC_TIMER) != L7_SUCCESS)
               {
                 MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not lower the Source timer  \n");
                 return;
               }
               srcRec->sourceInterval = lmqt;
@@ -3219,13 +3225,13 @@ void mgmd_membership_query (mgmd_info_t
   mgmdCB = mgmd_info->mgmdCB;
 
   result = L7_INET_ADDR_COMPARE(&(mgmd_info->mgmd_querierIP), &source);
   if (result == 0)
   {
     /* Reset other querier present timer */
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_info->mgmd_querier_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_info->mgmd_querier_timer_handle),
                             &mgmd_info->mgmd_querier_timer,
                             mgmd_other_querier_present_interval,
                             L7_MGMD_QUERIER_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Querier Timer Updation Failed \n");
       return;
@@ -3233,13 +3239,13 @@ void mgmd_membership_query (mgmd_info_t
     MGMD_DEBUG (MGMD_DEBUG_QUERY, "TR_INFO: Update querier on %d\n", mgmd_info->ifIndex);
     MGMD_DEBUG_ADDR (MGMD_DEBUG_QUERY, "Querier is ", &source);
   }
   else if (result > 0)
   {
     /* This querier has lower ip address than the current */
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_info->mgmd_querier_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_info->mgmd_querier_timer_handle),
                             &mgmd_info->mgmd_querier_timer,
                             mgmd_other_querier_present_interval,
                             L7_MGMD_QUERIER_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the Querier Timer\n");
       return;
@@ -3299,13 +3305,13 @@ void mgmd_membership_query (mgmd_info_t
     {
       L7_uint32 newTime;
 
       MGMD_DEBUG_ADDR (MGMD_DEBUG_QUERY, "Found group ", &(mgmd_group->group));
 
       newTime = ((lastMemQueryCount * max_resp_time) );
-      if (mgmdUtilAppTimerLower(mgmdCB, L7_NULL, (void*)mgmd_group->grp_timer_handle,
+      if (mgmdUtilAppTimerLower(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_group->grp_timer_handle),
                                 &mgmd_group->groupTimer, newTime, L7_MGMD_GRP_TIMER)
                                 != L7_SUCCESS)
       {
         MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not update the Group timer  \n");
         return;
       }
@@ -4032,13 +4038,13 @@ static void mgmd_timeout_groups_event_ha
   mgmd_host_info_t     *mgmd_host_info;
   mgmdGroupInfo_t       group_info;
   L7_uint32             rtrIfNum;
   mgmd_info_t  *mgmd_info;
   mgmd_group_t *mgmd_group = L7_NULLPTR;
 
-  L7_int32      handle = (L7_int32)param;
+  L7_uint64 handle = PTR_TO_UINT64(param);
   mgmd_group_timer_data_t *timerData;
   L7_uint32             proxy_status;
 
   MGMD_DEBUG (MGMD_DEBUG_TIMERS,"Entered ");
 
   timerData = (void*)handleListNodeRetrieve(handle);
@@ -4221,13 +4227,13 @@ static void mgmd_timeout_sources_event_h
   L7_inet_addr_t        tmpSrc;
   mgmd_host_info_t     *mgmd_host_info ;
   mgmdGroupInfo_t       group_info;
   L7_uint32             rtrIfNum;
   mgmd_info_t          *mgmd_info;
   mgmd_group_t         *mgmd_group = L7_NULLPTR;
-  L7_int32      handle = (L7_int32)param;
+  L7_uint64             handle = PTR_TO_UINT64(param);
   mgmd_source_timer_data_t *timerData;
   L7_uint32             proxy_status;
 
   MGMD_DEBUG (MGMD_DEBUG_TIMERS,"Entered ");
 
 
@@ -4350,13 +4356,13 @@ static void mgmd_querier_timeout_event_h
   mgmd_info_t   *mgmd_info;
   mgmd_cb_t     *mgmdCB;
   L7_uint32      rtrIfNum;
   L7_uint32      timeLeft;
   L7_uchar8      inetAddrStr[IPV6_DISP_ADDR_LEN];
   L7_uint32      queryInterval;
-  L7_int32      handle = (L7_int32)param;
+  L7_uint64      handle = PTR_TO_UINT64(param);
 
   MGMD_DEBUG (MGMD_DEBUG_APIS, " Entered");
 
   mgmd_info= (void*)handleListNodeRetrieve(handle);
 
 
@@ -4407,13 +4413,13 @@ static void mgmd_querier_timeout_event_h
   queryInterval = mgmd_info->intfConfig.queryInterval;
 
   mgmd_info->mgmd_query_timer = L7_NULLPTR;
   mgmd_info->querierQueryInterval = 0; /* when the router itself is querier, reset it
                                           so that the default value is used */
 
-  if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_info->mgmd_query_timer_handle,
+  if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_info->mgmd_query_timer_handle),
                           &mgmd_info->mgmd_query_timer,
                           queryInterval, L7_MGMD_QUERY_TIMER) != L7_SUCCESS)
   {
     MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the Query Timer\n");
     return;
   }
@@ -4443,13 +4449,13 @@ static void mgmd_query_timeout_event_han
   mgmd_cb_t   *mgmdCB;
   L7_uint32    rtrIfNum;
   L7_uint32    timeLeft;
   L7_uint32    startupQueryCount;
   L7_uint32    startupQueryInterval;
   L7_uint32    queryInterval;
-  L7_int32      handle = (L7_int32)param;
+  L7_uint64    handle = PTR_TO_UINT64(param);
 
   MGMD_DEBUG (MGMD_DEBUG_APIS, " Entered");
 
   mgmd_info= (void*)handleListNodeRetrieve(handle);
 
 
@@ -4480,26 +4486,26 @@ static void mgmd_query_timeout_event_han
     mgmd_info->mgmd_query_timer= L7_NULLPTR;
 
     if (mgmd_info->mgmd_query_count >= startupQueryCount)
     {
       queryInterval = mgmd_info->intfConfig.queryInterval;
 
-      if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_info->mgmd_query_timer_handle,
+      if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_info->mgmd_query_timer_handle),
                               &mgmd_info->mgmd_query_timer,
                               queryInterval, L7_MGMD_QUERY_TIMER) != L7_SUCCESS)
       {
         MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the Query Timer\n");
         return;
       }
 
 
     }
     else if (mgmd_info->mgmd_query_count < startupQueryCount)
     {
       startupQueryInterval = mgmd_info->intfConfig.startupQueryInterval;
-      if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_info->mgmd_query_timer_handle,
+      if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_info->mgmd_query_timer_handle),
                               &mgmd_info->mgmd_query_timer,
                               startupQueryInterval, L7_MGMD_QUERY_TIMER) != L7_SUCCESS)
       {
         MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the Grp Timer\n");
         return;
       }
@@ -4810,13 +4816,13 @@ static L7_RC_t mgmd_router_interface(mgm
     MGMD_DEBUG (MGMD_DEBUG_EVENTS, "TR_INFO: new querier %s on %d", inetAddrStr, mgmd_info->ifIndex);
 
     mgmd_info->mgmd_query_count = 0;
 
     if (mgmd_info->mgmd_query_count < startupQueryCount)
     {
-      if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)mgmd_info->mgmd_query_timer_handle,
+      if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void*)UINT_TO_PTR(mgmd_info->mgmd_query_timer_handle),
                               &mgmd_info->mgmd_query_timer,
                               MGMD_STARTUP_QUERY_DELAY, L7_MGMD_QUERY_TIMER) != L7_SUCCESS)
       {
         MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not start the Query Timer\n");
         return L7_FAILURE;
       }
@@ -4921,13 +4927,13 @@ L7_RC_t mgmd_interface_version_set(mgmd_
 * @notes
 *
 * @end
 *********************************************************************/
 static void mgmd_v1host_timeout_event_handler(void *param)
 {
-  L7_int32      handle = (L7_int32)param;
+  L7_uint64 handle = PTR_TO_UINT64(param);
   mgmd_group_t *mgmd_group;
 
   MGMD_DEBUG (MGMD_DEBUG_TIMERS,"Entered ");
 
   mgmd_group= (mgmd_group_t *)handleListNodeRetrieve(handle);
 
@@ -4958,14 +4964,13 @@ static void mgmd_v1host_timeout_event_ha
 * @notes
 *
 * @end
 *********************************************************************/
 static void mgmd_v2host_timeout_event_handler(void *param)
 {
-
-  L7_int32      handle = (L7_int32)param;
+  L7_uint64 handle = PTR_TO_UINT64(param);
   mgmd_group_t *mgmd_group;
 
   MGMD_DEBUG (MGMD_DEBUG_TIMERS,"Entered ");
 
   mgmd_group= (mgmd_group_t *)handleListNodeRetrieve(handle);
 
@@ -5270,13 +5275,13 @@ L7_RC_t  mgmd_start_timer(mgmd_cb_t *mgm
 *
 * @notes
 *
 * @end
 *********************************************************************/
 
-L7_RC_t  mgmdUtilAppTimerHandleDelete(mgmd_cb_t *mgmdCB,L7_APP_TMR_HNDL_t *timer, L7_uint32 *handle)
+L7_RC_t  mgmdUtilAppTimerHandleDelete(mgmd_cb_t *mgmdCB,L7_APP_TMR_HNDL_t *timer, L7_uint64 *handle)
 {
   MGMD_DEBUG (MGMD_DEBUG_APIS, " Entered, timer = %d", timer);
 
   if (*timer != L7_NULLPTR)
   {
     if (appTimerDelete(mgmdCB->timerHandle, *timer ) != L7_SUCCESS)
@@ -5631,13 +5636,14 @@ L7_RC_t mgmdMRPGroupInfoGet(mgmd_cb_t *m
 *
 * @end
 *********************************************************************/
 void mgmd_mrp_timeout_handler(void *param)
 {
   mgmd_cb_t   *mgmdCB ;
-  L7_uint32    handle = (L7_uint32)param, timeLeft = 0;
+  L7_uint64    handle = PTR_TO_UINT64(param);
+  L7_uint32    timeLeft = 0;
   mgmd_group_t dummyGroup, *mgmdGroup;
 
   mgmdCB = (void*)handleListNodeRetrieve(handle);
 
   if (mgmdCB == L7_NULLPTR)
   {
Index: src/application/ip_mcast/vendor/mgmd/mgmd.h
===================================================================
--- src/application/ip_mcast/vendor/mgmd/mgmd.h	(revision 7768)
+++ src/application/ip_mcast/vendor/mgmd/mgmd.h	(working copy)
@@ -181,13 +181,13 @@ typedef struct ipv6pkt_s
 
 typedef struct mgmd_query_req_s
 {
   L7_sll_member_t  *next;
   L7_inet_addr_t    group;
   L7_APP_TMR_HNDL_t timer;
-  L7_uint32         query_timer_handle; /* to safeguard timeout functions */    
+  L7_uint64         query_timer_handle; /* to safeguard timeout functions */    
   L7_int32          count;
   L7_inet_addr_t    *qSrcs[MGMD_MAX_QUERY_SOURCES];
   L7_int32          numSrcs;
   void             *mgmdCB;  /* mgmd control block stored to retrieve info 
                                 while destroying the node itself */
 }mgmd_query_req_t; 
@@ -224,19 +224,19 @@ typedef enum
 
 typedef struct mgmd_info_s 
 {
   flags_t             flags;              
   L7_uint32           ifIndex;            /* Router interface index */
   L7_APP_TMR_HNDL_t   mgmd_query_timer;
-  L7_uint32           mgmd_query_timer_handle; /* to safeguard timeout functions */    
+  L7_uint64           mgmd_query_timer_handle; /* to safeguard timeout functions */    
   int                 mgmd_query_count;
   L7_inet_addr_t      mgmd_querierIP;
   L7_uint32           querierQueryInterval;  /* Stores querier's query interval when existing 
                                                 router is non-querier */
   L7_APP_TMR_HNDL_t   mgmd_querier_timer;
-  L7_uint32           mgmd_querier_timer_handle; /* to safeguard timeout functions */    
+  L7_uint64           mgmd_querier_timer_handle; /* to safeguard timeout functions */    
   L7_sll_t            ll_query_reqs;      /* Nodes are of the type mgmd_query_req_t */ 
   int                 numOfJoins;         /* The number of times a group membership has been added on this interface*/
   int                 numOfGroups;        /* The current number of groups registered for this interface. */
   int                 Wrongverqueries;    /* The number of queries received whose IGMP/MLD version does not match Interface Version*/
   int                 querierUpTime;      /* time since Querier was last changed.*/
   int                 querierExpiryTime;  /* The amount of time remaining before the Other Querier Present Timer expires.*/
@@ -330,13 +330,13 @@ typedef struct mgmd_cb_s
 
      This timer expires every 5 seconds and searches for all the group nodes which are all not informed to MRP during the regular 
      packet processing and infomrs them to MRP.In this way, even if the the group udate event is lost because of queue failures
      it will again infomred latter after 5 secs.
    */  
   L7_APP_TMR_HNDL_t      mgmd_mrp_timer;                  
-  L7_uint32              mgmd_mrp_timer_handle; /* to safeguard timeout functions */    
+  L7_uint64              mgmd_mrp_timer_handle; /* to safeguard timeout functions */    
   L7_APP_TMR_CTRL_BLK_t  timerHandle;     /* MGMD App Timer Control Block */
   handle_list_t          *handle_list;
   void                   *handleListMem;
   L7_mgmdv3Report_t      v3Report;
   L7_uchar8              pktRxBuf[MGMD_PKT_SIZE_MAX+L7_IP6_HEADER_LEN]; /* Buffer used to Receive PIM-SM Packets */
   L7_uchar8              pktTxBuf[MGMD_PKT_SIZE_MAX]; /* Buffer used to Transmit PIM-SM Packets */
@@ -370,16 +370,16 @@ typedef struct mgmd_group_s
   L7_sll_t              sourceRecords;   /* Nodes of Type mgmd_source_record_t */
   L7_APP_TMR_HNDL_t     v1HostTimer;
   L7_int32              v1HostPresentFlag;
   L7_APP_TMR_HNDL_t     v2HostTimer;
   L7_int32              v2HostPresentFlag;
   L7_APP_TMR_HNDL_t     groupTimer;    /* group timeout */  
-  L7_uint32             grp_timer_handle; /* to safeguard timeout functions */
+  L7_uint64             grp_timer_handle; /* to safeguard timeout functions */
 
-  L7_uint32             v2host_timer_handle; /* to safeguard timeout functions */  
-  L7_uint32             v1host_timer_handle; /* to safeguard timeout functions */  
+  L7_uint64             v2host_timer_handle; /* to safeguard timeout functions */  
+  L7_uint64             v1host_timer_handle; /* to safeguard timeout functions */  
   mgmd_group_timer_data_t  timerData;
   mgmd_timer_event_info_t  *grpQueryData;        /* pointer for timer data for grp-specific query*/
   mgmd_timer_event_info_t  *grpSrcQueryData;    /* pointer for timer data for grp-n-src-specific query*/  
   void *                dummy;           /* required by the AVL tree implementation */
 } mgmd_group_t;
 typedef struct mgmd_source_timer_data_s
@@ -392,13 +392,13 @@ typedef struct mgmd_source_record_s
 {
   L7_sll_member_t     *next;
   L7_inet_addr_t      sourceAddress;
   time_t              sourceCtime;
   L7_int32            sourceInterval;
   L7_APP_TMR_HNDL_t   sourceTimer;    /* source  timeout */  
-  L7_uint32           src_timer_handle; /* to safeguard timeout functions */
+  L7_uint64           src_timer_handle; /* to safeguard timeout functions */
   void                *mgmdCB;        /* mgmd control block stored to retrieve info 
                                          while destroying the node itself */
   mgmd_source_timer_data_t timerData;
 
 } mgmd_source_record_t;
 
Index: src/application/ip_mcast/vendor/mgmd/mgmd_mrp.c
===================================================================
--- src/application/ip_mcast/vendor/mgmd/mgmd_mrp.c	(revision 7768)
+++ src/application/ip_mcast/vendor/mgmd/mgmd_mrp.c	(working copy)
@@ -120,13 +120,13 @@ void mgmd_frame_event_info_and_notify(mg
   mgmd_group->mrpUpdated &= ~MGMD_MRP_REQUESTED_GROUP;
     mgmd_group->mrpUpdated &= ~MGMD_MRP_INFORM_FAILED;    
   }
   else
   {
     mgmd_group->mrpUpdated |= MGMD_MRP_INFORM_FAILED;
-    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void *)mgmdCB->mgmd_mrp_timer_handle,
+    if (mgmdUtilAppTimerSet(mgmdCB, L7_NULL, (void *)UINT_TO_PTR(mgmdCB->mgmd_mrp_timer_handle),
                             &mgmdCB->mgmd_mrp_timer, MGMD_MRP_INFORM_TIMEOUT,
                             L7_MGMD_MRP_INFORM_TIMER) != L7_SUCCESS)
     {
       MGMD_DEBUG (MGMD_DEBUG_APIS, "Could not Start the L7_MGMD_MRP_INFORM_TIMER \n"); 
       return;
     }
Index: src/application/ip_mcast/vendor/mgmd/mgmd_proxy.c
===================================================================
--- src/application/ip_mcast/vendor/mgmd/mgmd_proxy.c	(revision 7768)
+++ src/application/ip_mcast/vendor/mgmd/mgmd_proxy.c	(working copy)
@@ -2460,13 +2460,13 @@ void mgmd_proxy_v3membership_query_proce
         grpTime = selectedDelay;
         if (selectedDelay > IGMP_PROXY_GROUP_TIMER)
         {
           grpTime = IGMP_PROXY_GROUP_TIMER;
         }
         if (mgmdProxyUtilAppTimerSet(mgmdCB, L7_NULL, 
-                                     (void*)mgmd_host_group->grp_rsp_timer_handle,
+                                     (void*) UINT_TO_PTR(mgmd_host_group->grp_rsp_timer_handle),
                                      &mgmd_host_group->grp_rsp_timer,
                                      grpTime, 
                                      L7_MGMD_GRP_RSP_TIMER) != L7_SUCCESS)
         {
           MGMD_PROXY_DEBUG(MGMD_PROXY_DEBUG_APIS, "Could not start the Group Response timer  \n");
           return;
@@ -2501,13 +2501,13 @@ void mgmd_proxy_v3membership_query_proce
           if ((srcRec = (mgmd_host_source_record_t *)SLLFind(&(mgmd_host_group->sourceRecords), (L7_sll_member_t *)&srcRecSrchKey)))
           {
             srcRec->sendQueryReport = L7_TRUE;
           }
         } /*End-of-FOR-Loop*/
       }
-      if (mgmdProxyUtilAppTimerLower(mgmdCB, L7_NULL, (void *)mgmd_host_group->grp_rsp_timer_handle,
+      if (mgmdProxyUtilAppTimerLower(mgmdCB, L7_NULL, (void *)UINT_TO_PTR(mgmd_host_group->grp_rsp_timer_handle),
                                      &mgmd_host_group->grp_rsp_timer,selectedDelay, 
                                      L7_MGMD_GRP_RSP_TIMER) != L7_SUCCESS)
       {
         MGMD_PROXY_DEBUG(MGMD_PROXY_DEBUG_APIS, "Could not update the Group Response timer with delay(%d)\n",
                          selectedDelay);
         return;
@@ -2778,18 +2778,18 @@ void mgmd_proxy_membership_query_process
         }
       }
 
       if (mgmd_host_group != L7_NULL)
       {
         /* reset the group response timer */
-        if (mgmdProxyUtilAppTimerLower(mgmdCB, L7_NULL, (void *)mgmd_host_group->grp_rsp_timer_handle,
+        if (mgmdProxyUtilAppTimerLower(mgmdCB, L7_NULL, (void *)UINT_TO_PTR(mgmd_host_group->grp_rsp_timer_handle),
                                        &mgmd_host_group->grp_rsp_timer,selectedDelay, 
                                        L7_MGMD_GRP_RSP_TIMER) != L7_SUCCESS)
         {
           if (mgmdProxyUtilAppTimerSet(mgmdCB, L7_NULL, 
-                                     (void*)mgmd_host_group->grp_rsp_timer_handle,
+                                     (void*)UINT_TO_PTR(mgmd_host_group->grp_rsp_timer_handle),
                                      &mgmd_host_group->grp_rsp_timer,
                                      selectedDelay, 
                                      L7_MGMD_GRP_RSP_TIMER) != L7_SUCCESS)
           {
             MGMD_PROXY_DEBUG(MGMD_PROXY_DEBUG_APIS, "Could not start the Group Response timer  \n");
             return;
@@ -4219,13 +4219,13 @@ static void mgmd_proxy_unsolicited_timer
   {
     MGMD_DEBUG (MGMD_DEBUG_FAILURE,   "Could not get the handle node to store the timer data.\n");                    
     MGMD_PROXY_FREE(mgmdCB->proto, (rreq));       
     return;
   }
   if (mgmdProxyUtilAppTimerSet(mgmdCB, L7_NULL, 
-                               (void*)rreq->timer_handle,
+                               (void*)UINT_TO_PTR(rreq->timer_handle),
                                &rreq->timer,
                                unsolicitedReportInterval, 
                                L7_MGMD_UNSOLICITED_REPORT_TIMER) != L7_SUCCESS)
   {
      MGMD_PROXY_DEBUG(MGMD_PROXY_DEBUG_APIS, "Could not start the unsolicited report timer  \n");
     MGMD_PROXY_FREE(mgmdCB->proto, (rreq));       
@@ -4840,13 +4840,13 @@ void mgmd_proxy_group_response_timer_exp
   mgmd_host_group_t         *mgmd_host_group = L7_NULLPTR;
   mgmd_host_source_record_t *hostSrcRec = L7_NULL;
   L7_uint32                  i = 0, numSrcs = 0, grpRecType = 0;
   L7_BOOL                    grpSrcReport = L7_FALSE, srcTmrFlag;
   L7_inet_addr_t            *sourceSet[MGMD_MAX_QUERY_SOURCES];
   mgmd_host_info_t          *mgmd_host_info; 
-  L7_int32      handle = (L7_int32)param; 
+  L7_uint64                  handle = PTR_TO_UINT64(param);
 
   MGMD_PROXY_DEBUG(MGMD_PROXY_DEBUG_APIS," Entered , handle = %d", handle);
 
   mgmd_host_group = (mgmd_host_group_t *)handleListNodeRetrieve(handle); 
   MGMD_PROXY_DEBUG(MGMD_PROXY_DEBUG_APIS," mgmd_host_group = %p ",mgmd_host_group);
 
@@ -4941,14 +4941,14 @@ void mgmd_proxy_unsolicited_timer_expiry
   mgmd_cb_t                    *mgmdCB = L7_NULLPTR;
   L7_uint32                     reportIndex, index;
   mgmd_host_group_t            *mgmd_host_group = L7_NULL, mgmd_host_group_srchKey;
   mgmd_proxy_unsolicited_rpt_t *rreq = L7_NULL;
   mgmd_host_info_t             *mgmd_host_info;
   L7_uint32                     unsolicitedReportInterval;
-  L7_int32      handle = (L7_int32)param; 
-  L7_inet_addr_t              *srcList[MGMD_MAX_QUERY_SOURCES];
+  L7_uint64                     handle = PTR_TO_UINT64(param);
+  L7_inet_addr_t               *srcList[MGMD_MAX_QUERY_SOURCES];
 
   MGMD_PROXY_DEBUG(MGMD_PROXY_DEBUG_APIS," Entered ");
 
   rreq = (mgmd_proxy_unsolicited_rpt_t *)handleListNodeRetrieve(handle);   
 
   if (rreq == L7_NULLPTR)
@@ -5018,13 +5018,13 @@ void mgmd_proxy_unsolicited_timer_expiry
       return ;
     }
   }
   else
   {
     if (mgmdProxyUtilAppTimerSet(mgmdCB, L7_NULL, 
-                                 (void*)rreq->timer_handle,
+                                 (void*)UINT_TO_PTR(rreq->timer_handle),
                                  &rreq->timer,
                                  unsolicitedReportInterval, 
                                  L7_MGMD_UNSOLICITED_REPORT_TIMER) != L7_SUCCESS)
     {
       MGMD_PROXY_DEBUG(MGMD_PROXY_DEBUG_APIS, "Could not start the unsolicited report timer  \n");
       return;
@@ -5067,13 +5067,13 @@ void mgmd_proxy_querier_update_event_sen
 *
 * @notes    
 *
 * @end
 *********************************************************************/
 
-L7_RC_t  mgmdProxyUtilAppTimerHandleDelete(mgmd_cb_t *mgmdCB,L7_APP_TMR_HNDL_t *timer, L7_uint32 *handle)
+L7_RC_t  mgmdProxyUtilAppTimerHandleDelete(mgmd_cb_t *mgmdCB,L7_APP_TMR_HNDL_t *timer, L7_uint64 *handle)
 {
   MGMD_PROXY_DEBUG(MGMD_PROXY_DEBUG_APIS,"\n  Entered ");
   if (timer != L7_NULL && *timer != L7_NULLPTR)
   {
     if (appTimerDelete(mgmdCB->timerHandle, *timer ) != L7_SUCCESS)
     {
Index: src/application/ip_mcast/vendor/mgmd/mgmd_proxy.h
===================================================================
--- src/application/ip_mcast/vendor/mgmd/mgmd_proxy.h	(revision 7768)
+++ src/application/ip_mcast/vendor/mgmd/mgmd_proxy.h	(working copy)
@@ -100,13 +100,13 @@ typedef L7_uint32  (*router_timer_events
 
 typedef struct mgmd_proxy_unsolicited_rpt_s
 {
   L7_sll_member_t   *next;
   L7_inet_addr_t    group;
   L7_APP_TMR_HNDL_t timer;
-  L7_uint32         timer_handle; /* to safeguard timeout functions */  
+  L7_uint64         timer_handle; /* to safeguard timeout functions */  
   L7_uint32         retryCount;
   L7_uint32         reportId;
   L7_inet_addr_t    srcList[MGMD_MAX_QUERY_SOURCES];
   L7_uint32         numSrcs;
   L7_uint32         grpRecType;
   void              *mgmdCB;     /* mgmd control block stored to retrieve info 
@@ -150,13 +150,13 @@ typedef struct mgmd_host_group_s
 {
   L7_inet_addr_t     group;          /* group address */
   time_t             uptime;         /* time received  */ 
   L7_inet_addr_t     last_reporter;  /* last reporter group address */
   MGMD_FILTER_MODE_T filterMode;     /* Source Filter Mode */
   L7_APP_TMR_HNDL_t  grp_rsp_timer;  /* Timer respond to group queries */
-  L7_uint32          grp_rsp_timer_handle; /* to safeguard timeout functions */  
+  L7_uint64          grp_rsp_timer_handle; /* to safeguard timeout functions */  
   interface_bitset_t grpPortList;    /* (GPL) Mask of interfaces configured for this Group Address */
   L7_sll_t           sourceRecords;  /* list of source records for each group */
   MGMD_HOST_STATE_T  hostState;
   L7_BOOL            grpSuppressed;
   L7_BOOL            sendReportUponQuery; /* Introduced for Rate-Limiting IGMP
                                            * Group Membership Reports.
@@ -485,13 +485,13 @@ void mgmd_proxy_querier_update_event_sen
 *
 * @notes    
 *
 * @end
 *********************************************************************/
 
-L7_RC_t  mgmdProxyUtilAppTimerHandleDelete(mgmd_cb_t *mgmdCB,L7_APP_TMR_HNDL_t *timer, L7_uint32 *handle);
+L7_RC_t  mgmdProxyUtilAppTimerHandleDelete(mgmd_cb_t *mgmdCB,L7_APP_TMR_HNDL_t *timer, L7_uint64 *handle);
 
 /*********************************************************************
 *
 * @purpose  Handles the group mode change
 *
 * @param    mgmdCB            @b{ (input) }   MGMD Control Block
Index: src/application/ip_mcast/vendor/pimdm/include/pimdm_intf.h
===================================================================
--- src/application/ip_mcast/vendor/pimdm/include/pimdm_intf.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimdm/include/pimdm_intf.h	(working copy)
@@ -63,13 +63,13 @@ typedef struct pimdmInterface_s
 
   /* Neighbor related parameters */
   L7_APP_TMR_HNDL_t helloTimer;     /* Hello Timer handle */
   L7_uchar8 nbrBitmap[MCAST_BITX_NUM_BITS(PIMDM_MAX_NEIGHBORS)];
                                     /* Bitmap of neighbors on this interface */
   L7_uint32 numNbrs;                /* Total number of neighbors on this interface */
-  L7_uint32 intfTmrHandle;          /* Handle List Timer Handle for the Interface Block */
+  L7_uint64 intfTmrHandle;          /* Handle List Timer Handle for the Interface Block */
 
   L7_uint32  intfStats[PIMDM_CTRL_PKT_MAX][PIMDM_STATS_TYPE_MAX];
 
   pimdmCB_t *pimdmCB;               /* Back pointer to the PIM-DM Control Block */
 } pimdmInterface_t;
 
@@ -130,13 +130,13 @@ typedef struct pimdmNeighbor_s
   L7_uint32      stateRefreshIntvl; /* State Refresh interval in seconds */
   L7_uint32      genID;             /* Generation ID */
   L7_APP_TMR_HNDL_t livenessTimer;  /* Expiry Timer to consider this neighbor */
   L7_uint32      livenessTimerGenId; /* Generation ID of the liveness timer */
   L7_uint32      createTime;        /* Time reference when created */
   L7_uint32      rtrIfNum;        /* Router interface index of the associated interface */
-  L7_uint32      nbrTmrHandle;      /* Handle List Timer Handle for the Neighbor Block */
+  L7_uint64      nbrTmrHandle;      /* Handle List Timer Handle for the Neighbor Block */
   pimdmCB_t      *pimdmCB;          /* Back pointer to the PIM-DM Control Block */
   pimdmJPMsgStoreBuff_t pimdmBuildJPMsg; /* A structure for fairly
                      * complicated Join/Prune
                      * message construction.
                      */
 } pimdmNeighbor_t;
Index: src/application/ip_mcast/vendor/pimdm/include/pimdm_mrt.h
===================================================================
--- src/application/ip_mcast/vendor/pimdm/include/pimdm_mrt.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimdm/include/pimdm_mrt.h	(working copy)
@@ -158,13 +158,13 @@ typedef struct pimdmDownstrmIntfInfo_s
   L7_uint32            maxPruneHoldTime;  /* The max prune hold time */ 
 
   /* Assert State info */
   pimdmAssertInfo_t    downstrmAssertInfo; 
 
   /*Timer handle */
-  L7_uint32            mrtEntryDnstrmTmrHndlParam; /* Timer Handle Param for the MRT Entry's Downstream Timers */
+  L7_uint64            mrtEntryDnstrmTmrHndlParam; /* Timer Handle Param for the MRT Entry's Downstream Timers */
 
   pimdmStRfrMsg_t      stRfrMsg; /* Storage for the recently relayed State Refresh
                                   * message that will be used to replay when the
                                   * Gen-Id of the Neighbor on the Downstream
                                   * interface is changed.
                                   */
@@ -212,15 +212,15 @@ typedef struct pimdmMrtEntry_s
   interface_bitset_t boundaryGMask;     /* Adminscope Boundary bitmask for a Group */
   interface_bitset_t pimIncludeStarG;   /* Include <*,G> local membership bitmap */
   interface_bitset_t pimIncludeSG;      /* Include <S,G> local membership bitmap */
   interface_bitset_t pimExcludeSG;      /* Exclude <S,G> local membership bitmap */
 
   /* Entry's Timer/Handle related Information */
-  L7_uint32         mrtEntryUpstrmTmrHndlParam; /* Timer Handle Param for the MRT Entry's Upstream Timers */
+  L7_uint64         mrtEntryUpstrmTmrHndlParam; /* Timer Handle Param for the MRT Entry's Upstream Timers */
   L7_APP_TMR_HNDL_t mrtEntryExpiryTimer;        /* MRT Entry Expiry Timer */
-  L7_uint32         mrtEntryExpiryTimerHandle;  /* Timer Handle for the MRT Entry's Expiry Timer */
+  L7_uint64         mrtEntryExpiryTimerHandle;  /* Timer Handle for the MRT Entry's Expiry Timer */
   L7_uint32         entryUpTime;                /* Entry's Create Time */
 
   /* Additional Information */
   pimdmCB_t *pimdmCB; /* Pointer to the PIM-DM Control Block. */
 
   void *avlData; /* AVL TREE requires this as last */
Index: src/application/ip_mcast/vendor/pimdm/pimdm_asrt_fsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimdm/pimdm_asrt_fsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimdm/pimdm_asrt_fsm.c	(working copy)
@@ -285,13 +285,13 @@ static void pimdmDnstrmAssertTimerExpiry
   pimdmAssertEventInfo_t asrtFsmEventInfo;
   pimdmAssertInfo_t *asrtIntfInfo = L7_NULLPTR;
 
   PIMDM_TRACE (PIMDM_DEBUG_API, "Entry");
 
   if ((dnstrmIntfInfo = (pimdmDownstrmIntfInfo_t*)
-                         handleListNodeRetrieve ((L7_uint32)mrtEntryDnstrmTmrHndlParam))
+                         handleListNodeRetrieve (PTR_TO_UINT64(mrtEntryDnstrmTmrHndlParam)))
                       == L7_NULLPTR)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE, "Handle Node retrieval Failed");
     return;
   }
 
@@ -408,13 +408,13 @@ pimdmAssertFsmActionSendAsrtSetAT (pimdm
                  "AT (S,G,I) Set Success for Src - %s Grp - %s Intf - %d ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp),
                  rtrIfNum);
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmDnstrmAssertTimerExpiryHandler,
-                            (void*) dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam,
+                            UINT_TO_PTR(dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam),
                             assertEventInfo->interval,
                             errMsgBuf, sucMsgBuf,
                             &asrtIntfInfo->assertTimer,
                             "DM-AT2")
                          != L7_SUCCESS)
   {
@@ -568,13 +568,13 @@ L7_RC_t pimdmAssertFsmActionSendPrnSetAT
                  "AT (S,G,I) Set Success for Src - %s Grp - %s Intf - %d ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp),
                  assertEventInfo->rtrIfNum);
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmDnstrmAssertTimerExpiryHandler,
-                            (void*) dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam,
+                            UINT_TO_PTR(dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam),
                             assertEventInfo->interval,
                             errMsgBuf, sucMsgBuf,
                             &asrtIntfInfo->assertTimer,
                             "DM-AT3")
                          != L7_SUCCESS)
   {
@@ -647,13 +647,13 @@ L7_RC_t pimdmAssertFsmActionSetAT(pimdmM
                  "AT (S,G,I) Set Success for Src - %s Grp - %s Intf - %d ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp),
                  assertEventInfo->rtrIfNum);
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmDnstrmAssertTimerExpiryHandler,
-                            (void*) dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam,
+                            UINT_TO_PTR(dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam),
                             assertEventInfo->interval,
                             errMsgBuf, sucMsgBuf,
                             &asrtIntfInfo->assertTimer,
                             "DM-AT4")
                          != L7_SUCCESS)
   {
@@ -737,13 +737,13 @@ L7_RC_t  pimdmAssertFsmActionResetAT (pi
                  "AT (S,G,I) ReSet Success for Src - %s Grp - %s Intf - %d ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp),
                  assertEventInfo->rtrIfNum);
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmDnstrmAssertTimerExpiryHandler,
-                            (void*) dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam,
+                            UINT_TO_PTR(dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam),
                             assertEventInfo->interval, errMsgBuf, sucMsgBuf,
                             &asrtIntfInfo->assertTimer,
                             "DM-AT5")
                          != L7_SUCCESS)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE,
Index: src/application/ip_mcast/vendor/pimdm/pimdm_dnstrm_fsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimdm/pimdm_dnstrm_fsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimdm/pimdm_dnstrm_fsm.c	(working copy)
@@ -257,13 +257,13 @@ static void pimdmDnstrmPrunePendingTimer
   pimdmDownstrmIntfInfo_t *dnstrmIntfInfo =L7_NULLPTR;
   pimdmDnstrmEventInfo_t dnstrmFsmEventInfo;
 
   PIMDM_TRACE (PIMDM_DEBUG_FSM_DNSTRM, "Entry");
 
   if ((dnstrmIntfInfo = (pimdmDownstrmIntfInfo_t*)
-                         handleListNodeRetrieve ((L7_uint32)mrtEntryDnstrmTmrHndlParam))
+                         handleListNodeRetrieve (PTR_TO_UINT64(mrtEntryDnstrmTmrHndlParam)))
                       == L7_NULLPTR)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE, "Handle Node retrieval Failed");
     return;
   }
 
@@ -312,13 +312,13 @@ static void pimdmDnstrmPruneTimerExpiryH
   pimdmDownstrmIntfInfo_t *dnstrmIntfInfo = L7_NULLPTR;
   pimdmDnstrmEventInfo_t dnstrmFsmEventInfo;
 
   PIMDM_TRACE (PIMDM_DEBUG_FSM_DNSTRM, "Entry");
 
   if ((dnstrmIntfInfo = (pimdmDownstrmIntfInfo_t*)
-                         handleListNodeRetrieve ((L7_uint32)mrtEntryDnstrmTmrHndlParam))
+                         handleListNodeRetrieve (PTR_TO_UINT64(mrtEntryDnstrmTmrHndlParam)))
                       == L7_NULLPTR)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE, "Handle Node retrieval Failed");
     return;
   }
 
@@ -416,13 +416,13 @@ L7_RC_t pimdmDnstrmFsmActionSetPPT(pimdm
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp), rtrIfNum);
 
   /*Converting oiTimeout and lpdTimeout in seconds and ceil the value */
   timeout = ((oiTimeout + lpdTimeout) + 999)/1000;
 
   if (pimdmUtilAppTimerSet (pimdmCB, pimdmDnstrmPrunePendingTimerExpiryHandler,
-                            (void*) dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam,
+                            UINT_TO_PTR(dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam),
                             timeout, errMsgBuf, sucMsgBuf,
                             &dnstrmIntfInfo->prunePndTimer,
                             "DM-PPT")
                          != L7_SUCCESS)
   {
     PIMDM_TRACE(PIMDM_DEBUG_FAILURE,
@@ -493,13 +493,13 @@ L7_RC_t pimdmDnstrmFsmActionResetPT (pim
   osapiSnprintf (sucMsgBuf, PIMDM_MAX_DBG_MSG_SIZE,
                  "PT (S,G,I) ReSet Success for Src - %s Grp - %s Intf - %d ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp),
                  rtrIfNum);
 
   if (pimdmUtilAppTimerSet (pimdmCB, pimdmDnstrmPruneTimerExpiryHandler,
-                            (void*) dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam,
+                            UINT_TO_PTR(dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam),
                             dnstrmEventInfo->holdTime, errMsgBuf, sucMsgBuf,
                             &dnstrmIntfInfo->pruneTimer,
                             "DM-DnPT")
                          != L7_SUCCESS)
   {
     PIMDM_TRACE(PIMDM_DEBUG_FAILURE, "Resetting Prune Timer Failed on rtrIfNum %d",
@@ -750,13 +750,13 @@ L7_RC_t pimdmDnstrmFsmActionSetPT(pimdmM
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "PT (S,G,I) Set Success for Src - %s Grp - %s Intf - %d ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp),
                  rtrIfNum);
 
   if (pimdmUtilAppTimerSet (pimdmCB, pimdmDnstrmPruneTimerExpiryHandler,
-                            (void*) dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam,
+                            UINT_TO_PTR(dnstrmIntfInfo->mrtEntryDnstrmTmrHndlParam),
                             timeout, errMsgBuf, sucMsgBuf,
                             &dnstrmIntfInfo->pruneTimer,
                             "DM-DnPT2")
                          != L7_SUCCESS)
   {
     PIMDM_TRACE(PIMDM_DEBUG_FAILURE,
Index: src/application/ip_mcast/vendor/pimdm/pimdm_init.c
===================================================================
--- src/application/ip_mcast/vendor/pimdm/pimdm_init.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimdm/pimdm_init.c	(working copy)
@@ -492,13 +492,13 @@ pimdmCtrlBlockMembersShow (pimdmCB_t* pi
   PIMDM_DEBUG_PRINTF ("Address of PIM-DM Control Block : 0x%x.\n", pimdmCB);
   PIMDM_DEBUG_PRINTF ("General Information ....\n");
   PIMDM_DEBUG_PRINTF ("    addrFamily         - %s.\n", ((pimdmCB->addrFamily == L7_AF_INET) ? ("IPv4") : ("IPv6")));
   PIMDM_DEBUG_PRINTF ("    operMode           - %s.\n", ((pimdmCB->operMode == L7_TRUE) ? ("Operational") : ("Not Operational")));
   PIMDM_DEBUG_PRINTF ("    sockFD             - %d.\n", pimdmCB->sockFD);
   PIMDM_DEBUG_PRINTF ("    allRoutersAddr     - %s.\n", inetAddrPrint (&(pimdmCB->allRoutersAddr), addr));
-  PIMDM_DEBUG_PRINTF ("    heapID             - 0x%x.\n", mcastMapHeapIdGet (pimdmCB->addrFamily));
+  PIMDM_DEBUG_PRINTF ("    heapID             - 0x%llx.\n", mcastMapHeapIdGet (pimdmCB->addrFamily));
   PIMDM_DEBUG_PRINTF ("Interface/Neighbor related Information ....\n");
   PIMDM_DEBUG_PRINTF ("    intfInfo           - 0x%x.\n", pimdmCB->intfInfo);
   PIMDM_DEBUG_PRINTF ("    nbrBitmap          - ");
   for (index = 1; index <= PIMDM_INTF_BIT_SIZE; index++)
     if (BITX_TEST (&pimdmCB->nbrBitmap, index) != 0)
       PIMDM_DEBUG_PRINTF (" %02d ", index);
Index: src/application/ip_mcast/vendor/pimdm/pimdm_intf.c
===================================================================
--- src/application/ip_mcast/vendor/pimdm/pimdm_intf.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimdm/pimdm_intf.c	(working copy)
@@ -374,13 +374,13 @@ pimdmIntfHelloTimerExpiryHandler (void *
   L7_uint32 rtrIfNum;
   L7_uchar8 errMsgBuf[PIMDM_MAX_DBG_MSG_SIZE];
   L7_uchar8 sucMsgBuf[PIMDM_MAX_DBG_MSG_SIZE];
 
   PIMDM_TRACE (PIMDM_DEBUG_API, "Entry");
 
-  if ((pIf = (pimdmInterface_t*) handleListNodeRetrieve ((L7_uint32) pParam))
+  if ((pIf = (pimdmInterface_t*) handleListNodeRetrieve (PTR_TO_UINT64(pParam)))
           == L7_NULLPTR)
   {
     PIMDM_TRACE(PIMDM_DEBUG_FAILURE,
                "Invalid interface info [NULL] in Hello Timer expiry Handle\n");
     return;
   }
@@ -419,20 +419,20 @@ pimdmIntfHelloTimerExpiryHandler (void *
   osapiSnprintf (errMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "Hello timer refresh failed on rtrIfNum %d", rtrIfNum);
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "Hello timer refresh success on rtrIfNum %d", rtrIfNum);
   /* Restart the Hello Timer */
   if (pimdmUtilAppTimerSet (pimdmCB, pimdmIntfHelloTimerExpiryHandler,
-                            (void*) pIf->intfTmrHandle, pIf->helloInterval,
+                            UINT_TO_PTR(pIf->intfTmrHandle), pIf->helloInterval,
                             errMsgBuf, sucMsgBuf, &(pIf->helloTimer),
                             "DM-HT")
                          != L7_SUCCESS)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE,
                  "Failed to start the Hello Timer for rtrIfNum %d", rtrIfNum);
-    handleListNodeDelete (pimdmCB->handleList, &(pIf->intfTmrHandle));
+    handleListNodeDelete (pimdmCB->handleList, (L7_uint64 *) &(pIf->intfTmrHandle));
     return;
   }
 
   PIMDM_TRACE (PIMDM_DEBUG_API, "Exit.");
 }
 
@@ -455,13 +455,13 @@ pimdmIntfNbrTimerExpiryHandler (void *pP
   pimdmNeighbor_t *pNbr = L7_NULLPTR;
   L7_int32 nbrIndex,numNbrs=-1;
   L7_uint32 rtrIfNum = 0;
 
   PIMDM_TRACE (PIMDM_DEBUG_API, "Entry");
 
-  if ((pNbr = (pimdmNeighbor_t*) handleListNodeRetrieve ((L7_uint32) pParam))
+  if ((pNbr = (pimdmNeighbor_t*) handleListNodeRetrieve (PTR_TO_UINT64(pParam)))
           == L7_NULLPTR)
   {
     PIMDM_TRACE(PIMDM_DEBUG_FAILURE,
                "Invalid neighbor info [NULL] in NLT expiry Handle");
     return;
   }
@@ -1775,13 +1775,13 @@ pimdmIntfHelloMsgProcess (pimdmCB_t
         pimdmIntfNeighborClear(pimdmCB, rtrIfNum, nbrIndex);
         return L7_FAILURE;
       }
 
       /* Start the NLT */
       if (pimdmUtilAppTimerSet (pimdmCB, pimdmIntfNbrTimerExpiryHandler,
-                                (void*) pNbr->nbrTmrHandle,
+                                UINT_TO_PTR(pNbr->nbrTmrHandle),
                                 pNbrInfo->holdTime, L7_NULLPTR, L7_NULLPTR,
                                 &(pNbr->livenessTimer),
                                 "DM-NLT")
                              != L7_SUCCESS)
       {
         PIMDM_TRACE (PIMDM_DEBUG_FAILURE,
@@ -1807,13 +1807,13 @@ pimdmIntfHelloMsgProcess (pimdmCB_t
                  "Hello timer Fastening failed on rtrIfNum %d", rtrIfNum);
           osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "Hello timer Fastening success on rtrIfNum %d", rtrIfNum);
 
           /* Update the Hello Timer */
           if (pimdmUtilAppTimerSet (pimdmCB, pimdmIntfHelloTimerExpiryHandler,
-                                    (void*) pIf->intfTmrHandle,
+                                    UINT_TO_PTR(pIf->intfTmrHandle),
                                     nextDelay, errMsgBuf, sucMsgBuf,
                                     &(pIf->helloTimer),
                                     "DM-HT2")
                                  != L7_SUCCESS)
           {
             PIMDM_TRACE (PIMDM_DEBUG_FAILURE,"Hello Timer Updation Failed");
@@ -1846,13 +1846,13 @@ pimdmIntfHelloMsgProcess (pimdmCB_t
     {
       /* Remove the neighbor */
       /* First : Stop the liveness timer */
       if(pNbr->livenessTimer != L7_NULLPTR)
       {
         pimdmUtilAppTimerCancel (pimdmCB, &(pNbr->livenessTimer));
-        handleListNodeDelete (pimdmCB->handleList, &(pNbr->nbrTmrHandle));
+        handleListNodeDelete (pimdmCB->handleList, (L7_uint64 *) &(pNbr->nbrTmrHandle));
       }
 
       /* Second : Update the interface parameters */
       /*pimdmIntfParamsCompute(pCB, pNbr, PIMDM_INTF_NBR_DELETE, pIf);*/
 
       pimdmMrtNLTExpiryProcess(pimdmCB,&pNbr->addr,rtrIfNum,pIf->numNbrs);
@@ -1905,20 +1905,20 @@ pimdmIntfHelloMsgProcess (pimdmCB_t
          osapiSnprintf (errMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                         "Hello timer refresh failed on rtrIfNum %d", rtrIfNum);
          osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                         "Hello timer refresh success on rtrIfNum %d", rtrIfNum);
          /* Restart the Hello Timer */
          if (pimdmUtilAppTimerSet (pimdmCB, pimdmIntfHelloTimerExpiryHandler,
-                                   (void*) pIf->intfTmrHandle, pIf->helloInterval,
+                                   UINT_TO_PTR(pIf->intfTmrHandle), pIf->helloInterval,
                                    errMsgBuf, sucMsgBuf, &(pIf->helloTimer),
                                    "DM-HT")
                                 != L7_SUCCESS)
          {
            PIMDM_TRACE (PIMDM_DEBUG_FAILURE,
                         "Failed to start the Hello Timer for rtrIfNum %d", rtrIfNum);
-           handleListNodeDelete (pimdmCB->handleList, &(pIf->intfTmrHandle));
+           handleListNodeDelete (pimdmCB->handleList, (L7_uint64 *) &(pIf->intfTmrHandle));
          }
 
         /* Handle the Router Failure scenario by invoking the MRT to send
          * Prunes Upstream, if necessary - Section 4.3.4.
          */
         pimdmMrtNbrGenIDChangeProcess (pimdmCB, rtrIfNum, &pNbr->addr);
@@ -1928,22 +1928,22 @@ pimdmIntfHelloMsgProcess (pimdmCB_t
       pimdmIntfParamsCompute(pimdmCB, pNbr, PIMDM_INTF_NBR_UPDATE, pIf);
 
       /* Start, Stop or update the liveness timer as necessary */
       if(pNbrInfo->holdTime == PIMDM_INFINITE_HOLDTIME)
       {
         pimdmUtilAppTimerCancel (pimdmCB, &(pNbr->livenessTimer));
-        handleListNodeDelete (pimdmCB->handleList, &(pNbr->nbrTmrHandle));
+        handleListNodeDelete (pimdmCB->handleList, (L7_uint64 *) &(pNbr->nbrTmrHandle));
       }
       else
       {
         L7_BOOL bNewTimerNeeded = L7_FALSE;
 
         if(pNbr->livenessTimer != L7_NULLPTR)
         {
           if (pimdmUtilAppTimerSet (pimdmCB, pimdmIntfNbrTimerExpiryHandler,
-                                    (void*) pNbr->nbrTmrHandle,
+                                    UINT_TO_PTR(pNbr->nbrTmrHandle),
                                     pNbrInfo->holdTime, L7_NULLPTR, L7_NULLPTR,
                                     &(pNbr->livenessTimer),
                                     "DM-NLT2")
                                  != L7_SUCCESS)
           {
             bNewTimerNeeded = L7_TRUE;
@@ -1966,20 +1966,20 @@ pimdmIntfHelloMsgProcess (pimdmCB_t
                          "Failed to Store node in the Timer Handle List");
             pNbr->livenessTimer = L7_NULLPTR;
           }
           else
           {
             if (pimdmUtilAppTimerSet (pimdmCB, pimdmIntfNbrTimerExpiryHandler,
-                                      (void*) pNbr->nbrTmrHandle,
+                                      UINT_TO_PTR(pNbr->nbrTmrHandle),
                                       pNbrInfo->holdTime, L7_NULLPTR, L7_NULLPTR,
                                       &(pNbr->livenessTimer),
                                       "DM-NLT3")
                                    != L7_SUCCESS)
             {
               /* Could not start a liveness timer. Purge the neighbor */
-              handleListNodeDelete (pimdmCB->handleList, &(pNbr->nbrTmrHandle));
+              handleListNodeDelete (pimdmCB->handleList, (L7_uint64 *) &(pNbr->nbrTmrHandle));
               /*pimdmIntfParamsCompute(pCB, pNbr, PIMDM_INTF_NBR_DELETE, pIf);*/
               bChange = pimdmIntfNeighborClear(pimdmCB, rtrIfNum, nbrIndex);
             }
           }
         }
       }
@@ -2143,13 +2143,13 @@ pimdmIntfUp (pimdmCB_t      *pimdmCB,
   osapiSnprintf (errMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
          "Initial Hello timer set failed on rtrIfNum %d", rtrIfNum);
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
          "Initial Hello timer set success on rtrIfNum %d", rtrIfNum);
 
   if (pimdmUtilAppTimerSet (pimdmCB, pimdmIntfHelloTimerExpiryHandler,
-                            (void*) pIf->intfTmrHandle, initialDelay, errMsgBuf,
+                            UINT_TO_PTR(pIf->intfTmrHandle), initialDelay, errMsgBuf,
                             sucMsgBuf, &(pIf->helloTimer),
                             "DM-HT4")
                          != L7_SUCCESS)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE,
                 "Hello Timer start failed for rtrIfNum %d", rtrIfNum);
@@ -2272,13 +2272,13 @@ pimdmIntfDown (pimdmCB_t *pimdmCB,
   /* Stop the Hello timer */
   PIMDM_TRACE (PIMDM_DEBUG_API, " Deleting Hello timer of TimerNode : %p",
                pIf->helloTimer);
   PIMDM_TRACE (PIMDM_DEBUG_API, " Deleting Hello timer of Timerhandle : %p",
                pIf->intfTmrHandle);
   pimdmUtilAppTimerCancel (pimdmCB, &(pIf->helloTimer));
-  handleListNodeDelete (pimdmCB->handleList, &(pIf->intfTmrHandle));
+  handleListNodeDelete (pimdmCB->handleList, (L7_uint64 *) &(pIf->intfTmrHandle));
 
   /* Notify PIM-DM MGMD Database of the interface going down */
   if (pimdmMgmdIntfDownUpdate (pimdmCB, rtrIfNum) != L7_SUCCESS)
   {
     PIMDM_TRACE(PIMDM_DEBUG_FAILURE,
                 "MGMD Database updation failure on interface %d Down", rtrIfNum);
@@ -2312,13 +2312,13 @@ pimdmIntfDown (pimdmCB_t *pimdmCB,
 
         pNbr = &(pInfo->nbrs[i]);
         if (L7_INET_ADDR_COMPARE (&zeroInet, &(pNbr->addr)) != 0)
         {
           /* Clean-up the neighbor structure */
           pimdmUtilAppTimerCancel (pimdmCB, &(pNbr->livenessTimer));
-          handleListNodeDelete (pimdmCB->handleList, &(pNbr->nbrTmrHandle));
+          handleListNodeDelete (pimdmCB->handleList, (L7_uint64 *) &(pNbr->nbrTmrHandle));
           pimdmJPWorkingBuffReturn (pimdmCB, pNbr);
           tmpGenId = pNbr->genID;
           memset(pNbr, 0, sizeof(pimdmNeighbor_t));
           pNbr->genID = tmpGenId;
         }
       }
@@ -2422,13 +2422,13 @@ pimdmIntfPurge (pimdmCB_t *pimdmCB,
     return L7_FAILURE;  /* Inconsistancy in the interface list */
 
   pInfo->intIfNum[rtrIfNum] = 0;
 
   /* Stop the Hello timer */
   pimdmUtilAppTimerCancel (pimdmCB, &(pIf->helloTimer));
-  handleListNodeDelete (pimdmCB->handleList, &(pIf->intfTmrHandle));
+  handleListNodeDelete (pimdmCB->handleList, (L7_uint64 *) &(pIf->intfTmrHandle));
 
   /* Clean-up the interface entry itself */
   tmpGenId = pIf->genID;
   memset(pIf, 0, sizeof(pimdmInterface_t));
   pIf->genID = tmpGenId;
 
Index: src/application/ip_mcast/vendor/pimdm/pimdm_mrt.c
===================================================================
--- src/application/ip_mcast/vendor/pimdm/pimdm_mrt.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimdm/pimdm_mrt.c	(working copy)
@@ -830,18 +830,18 @@ pimdmMrtEntryDelete (pimdmCB_t *pimdmCB,
     return L7_FAILURE;
   }
 
   /* Delete the Upstream Handle List Param */
   if (mrtEntry->mrtEntryUpstrmTmrHndlParam != L7_NULL)
   {
-    handleListNodeDelete (handleList,&mrtEntry->mrtEntryUpstrmTmrHndlParam);
+    handleListNodeDelete (handleList, (L7_uint64 *) &mrtEntry->mrtEntryUpstrmTmrHndlParam);
   }
   /* Delete the Entry Expiry Timer Handle List Param */
   if (mrtEntry->mrtEntryExpiryTimerHandle != L7_NULL)
   {
-    handleListNodeDelete (handleList, &mrtEntry->mrtEntryExpiryTimerHandle);
+    handleListNodeDelete (handleList, (L7_uint64 *) &mrtEntry->mrtEntryExpiryTimerHandle);
   }
 
   /* Cancel the Entry expiry timer */
   if (mrtEntry->mrtEntryExpiryTimer != L7_NULLPTR)
   {
     pimdmUtilAppTimerCancel (pimdmCB, &(mrtEntry->mrtEntryExpiryTimer));
@@ -984,13 +984,13 @@ pimdmMrtEntryAdd (pimdmCB_t *pimdmCB,
     osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                    "MRT Entry Expiry Timer Set Success for Src - %s Grp - %s ",
                    inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
     if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                               pimdmMrtEntryExpiryTimerHandler,
-                              (void*) mrtEntry->mrtEntryExpiryTimerHandle,
+                              UINT_TO_PTR(mrtEntry->mrtEntryExpiryTimerHandle),
                               PIMDM_MRT_ENTRY_TIMER_TIMEOUT,
                               errMsgBuf, sucMsgBuf,
                               &mrtEntry->mrtEntryExpiryTimer,
                               "DM-ET")
                            != L7_SUCCESS)
     {
@@ -2891,13 +2891,13 @@ pimdmMrtUpstreamAssertProcess (pimdmMrtE
   osapiSnprintf (sucMsgBuf, PIMDM_MAX_DBG_ADDR_SIZE,
                  "Upstream AT (S,G,I) Set Success for Src - %s Grp - %s Intf - %d ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp), rtrIfNum);
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmUpstreamAssertTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_DEFAULT_ASSERT_TIMEOUT, errMsgBuf, sucMsgBuf,
                             &upstrmNbrInfo->assertTimer,
                             "DM-AT")
                          != L7_SUCCESS)
   {
     PIMDM_TRACE(PIMDM_DEBUG_FAILURE,
@@ -3477,13 +3477,13 @@ static void pimdmMrtEntryExpiryTimerHand
   L7_uchar8 src[PIMDM_MAX_DBG_ADDR_SIZE];
   L7_uchar8 grp[PIMDM_MAX_DBG_ADDR_SIZE];
   mfcEntry_t mfcEntry;
 
   PIMDM_TRACE (PIMDM_DEBUG_API, "Entry");
 
-  mrtEntry  = (pimdmMrtEntry_t*)handleListNodeRetrieve((L7_uint32)handle);
+  mrtEntry  = (pimdmMrtEntry_t*)handleListNodeRetrieve(PTR_TO_UINT64(handle));
   if (mrtEntry == L7_NULLPTR)
   {
     PIMDM_TRACE(PIMDM_DEBUG_FAILURE,
                "Failed to retrive the MRT entry from the given handle");
     return;
   }
@@ -3520,13 +3520,13 @@ static void pimdmMrtEntryExpiryTimerHand
                  "MRT Entry Expiry Timer Set Success for Src - %s Grp - %s ",
                  inetAddrPrint(&mrtEntry->srcAddr,src),
                  inetAddrPrint(&mrtEntry->grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmMrtEntryExpiryTimerHandler,
-                            (void*) mrtEntry->mrtEntryExpiryTimerHandle,
+                            UINT_TO_PTR(mrtEntry->mrtEntryExpiryTimerHandle),
                             PIMDM_MRT_ENTRY_TIMER_TIMEOUT,
                             errMsgBuf, sucMsgBuf,
                             &mrtEntry->mrtEntryExpiryTimer,
                             "DM-ET2")
                          != L7_SUCCESS)
   {
Index: src/application/ip_mcast/vendor/pimdm/pimdm_strfr_fsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimdm/pimdm_strfr_fsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimdm/pimdm_strfr_fsm.c	(working copy)
@@ -196,13 +196,13 @@ void pimdmStateRefreshTimerExpiryHandler
 {
   pimdmMrtEntry_t *mrtEntry = L7_NULLPTR;
 
   PIMDM_TRACE (PIMDM_DEBUG_FSM_STRFR, "Entry");
 
   if ((mrtEntry  = (pimdmMrtEntry_t*)
-                   handleListNodeRetrieve ((L7_uint32)mrtEntryUpstrmTmrHndlParam))
+                   handleListNodeRetrieve (PTR_TO_UINT64(mrtEntryUpstrmTmrHndlParam)))
                 == L7_NULLPTR)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE, "Handle Node retrieval Failed");
     return;
   }
 
@@ -244,13 +244,13 @@ void pimdmSourceActiveTimerExpiryHandler
   L7_inet_addr_t *srcAddr = L7_NULLPTR;
   L7_inet_addr_t *grpAddr = L7_NULLPTR;
 
   PIMDM_TRACE (PIMDM_DEBUG_FSM_STRFR, "Entry");
 
   if ((mrtEntry  = (pimdmMrtEntry_t*)
-                   handleListNodeRetrieve ((L7_uint32)mrtEntryUpstrmTmrHndlParam))
+                   handleListNodeRetrieve (PTR_TO_UINT64(mrtEntryUpstrmTmrHndlParam)))
                 == L7_NULLPTR)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE, "Handle Node retrieval Failed");
     return;
   }
 
@@ -284,13 +284,13 @@ void pimdmSourceActiveTimerExpiryHandler
     osapiSnprintf (sucMsgBuf, PIMDM_MAX_DBG_MSG_SIZE,
                    "SAT (S,G) ReSet Success for Src - %s Grp - %s ",
                    inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
     if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                               pimdmSourceActiveTimerExpiryHandler,
-                              (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                              UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                               PIMDM_DEFAULT_SOURCE_LIFETIME,
                               errMsgBuf, sucMsgBuf,
                               &(mrtEntry->origStateInfo.srcActiveTimer),
                               "DM-SAT2")
                            != L7_SUCCESS)
     {
@@ -344,13 +344,13 @@ static L7_RC_t pimdmStateRfrFsmActionSet
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "SRT (S,G) Set Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmStateRefreshTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_DEFAULT_REFRESH_INTERVAL,
                             errMsgBuf, sucMsgBuf,
                             &(mrtEntry->origStateInfo.stateRfrTimer),
                             "DM-SRT")
                          != L7_SUCCESS)
   {
@@ -367,13 +367,13 @@ static L7_RC_t pimdmStateRfrFsmActionSet
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "SAT (S,G) Set Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmSourceActiveTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_DEFAULT_SOURCE_LIFETIME,
                             errMsgBuf, sucMsgBuf,
                             &(mrtEntry->origStateInfo.srcActiveTimer),
                             "DM-SAT")
                          != L7_SUCCESS)
   {
@@ -427,13 +427,13 @@ static L7_RC_t pimdmStateRfrFsmActionRes
   osapiSnprintf (sucMsgBuf, PIMDM_MAX_DBG_MSG_SIZE,
                  "SAT (S,G) ReSet Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmSourceActiveTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_DEFAULT_SOURCE_LIFETIME,
                             errMsgBuf, sucMsgBuf,
                             &(mrtEntry->origStateInfo.srcActiveTimer),
                             "DM-SAT3")
                          != L7_SUCCESS)
   {
@@ -506,13 +506,13 @@ static L7_RC_t pimdmStateRfrFsmActionSen
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "SRT (S,G) ReSet Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (pimdmCB, pimdmStateRefreshTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_DEFAULT_REFRESH_INTERVAL,
                             errMsgBuf, sucMsgBuf,
                             &(mrtEntry->origStateInfo.stateRfrTimer),
                             "DM-SRT2")
                          != L7_SUCCESS)
   {
@@ -707,13 +707,13 @@ static L7_RC_t pimdmStateRfrFsmActionRep
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "SRT (S,G) ReSet Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (pimdmCB, pimdmStateRefreshTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_DEFAULT_REFRESH_INTERVAL,
                             errMsgBuf, sucMsgBuf,
                             &(mrtEntry->origStateInfo.stateRfrTimer),
                             "DM-SRT2")
                          != L7_SUCCESS)
   {
Index: src/application/ip_mcast/vendor/pimdm/pimdm_upstrm_fsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimdm/pimdm_upstrm_fsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimdm/pimdm_upstrm_fsm.c	(working copy)
@@ -352,13 +352,13 @@ L7_RC_t pimdmUpstrmFsmExecute (PIMDM_UPS
 static void pimdmUpstrmOverrideTimerExpiryHandler (void *mrtEntryUpstrmTmrHndlParam)
 {
   pimdmMrtEntry_t *mrtEntry = L7_NULLPTR;
   pimdmUpstrmEventInfo_t upstrmFsmEventInfo;
 
   if ((mrtEntry  = (pimdmMrtEntry_t*)
-                   handleListNodeRetrieve ((L7_uint32)mrtEntryUpstrmTmrHndlParam))
+                   handleListNodeRetrieve (PTR_TO_UINT64(mrtEntryUpstrmTmrHndlParam)))
                 == L7_NULLPTR)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE, "Handle Node retrieval Failed");
     return;
   }
 
@@ -400,13 +400,13 @@ static void pimdmUpstrmOverrideTimerExpi
 static void pimdmUpstrmGraftRetryTimerExpiryHandler (void *mrtEntryUpstrmTmrHndlParam)
 {
   pimdmMrtEntry_t *mrtEntry = L7_NULLPTR;
   pimdmUpstrmEventInfo_t upstrmFsmEventInfo;
 
   if ((mrtEntry  = (pimdmMrtEntry_t*)
-                   handleListNodeRetrieve ((L7_uint32)mrtEntryUpstrmTmrHndlParam))
+                   handleListNodeRetrieve (PTR_TO_UINT64(mrtEntryUpstrmTmrHndlParam)))
                 == L7_NULLPTR)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE, "Handle Node retrieval Failed");
     return;
   }
 
@@ -448,13 +448,13 @@ static void pimdmUpstrmPruneLimitTimerEx
 {
   pimdmMrtEntry_t *mrtEntry =L7_NULLPTR;
   L7_BOOL isEmpty = L7_FALSE;
   pimdmUpstrmEventInfo_t upstrmFsmEventInfo;
 
   if ((mrtEntry  = (pimdmMrtEntry_t*)
-                   handleListNodeRetrieve ((L7_uint32)mrtEntryUpstrmTmrHndlParam))
+                   handleListNodeRetrieve (PTR_TO_UINT64(mrtEntryUpstrmTmrHndlParam)))
                 == L7_NULLPTR)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE, "Handle Node retrieval Failed");
     return;
   }
 
@@ -509,13 +509,13 @@ pimdmUpstreamAssertTimerExpiryHandler (v
   pimdmMrtEntry_t *mrtEntry = L7_NULLPTR;
   pimdmAssertInfo_t *upstrmNbrInfo = L7_NULLPTR;
   pimdmUpstrmEventInfo_t upstrmFsmEventInfo;
   L7_BOOL isNull = L7_FALSE;
 
   if ((mrtEntry  = (pimdmMrtEntry_t*)
-                   handleListNodeRetrieve ((L7_uint32)mrtEntryUpstrmTmrHndlParam))
+                   handleListNodeRetrieve (PTR_TO_UINT64(mrtEntryUpstrmTmrHndlParam)))
                 == L7_NULLPTR)
   {
     PIMDM_TRACE (PIMDM_DEBUG_FAILURE, "Handle Node retrieval Failed");
     return;
   }
 
@@ -610,13 +610,13 @@ L7_RC_t pimdmUpstrmFsmActionSendPrnSetPL
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "PLT (S,G) Set Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmUpstrmPruneLimitTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_PRUNE_LIMIT_TIMER_TIMEOUT,
                             errMsgBuf, sucMsgBuf,
                             &mrtEntry->upstrmGraftPruneStateInfo.prnLmtTimer,
                             "DM-PLT")
                          != L7_SUCCESS)
   {
@@ -711,13 +711,13 @@ L7_RC_t pimdmUpstrmFsmActionSetOT (pimdm
     osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                    "OT (S,G) Set Success for Src - %s Grp - %s ",
                    inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
     if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                               pimdmUpstrmOverrideTimerExpiryHandler,
-                              (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                              UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                               timeout, errMsgBuf, sucMsgBuf,
                               &mrtEntry->upstrmGraftPruneStateInfo.overrideTimer,
                               "DM-OT")
                            != L7_SUCCESS)
     {
       PIMDM_TRACE(PIMDM_DEBUG_FAILURE,"Failed to set Override Timer");
@@ -804,13 +804,13 @@ L7_RC_t pimdmUpstrmFsmActionResetPLT (pi
   osapiSnprintf (sucMsgBuf, PIMDM_MAX_DBG_MSG_SIZE,
                  "PLT (S,G) ReSet Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmUpstrmPruneLimitTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_PRUNE_LIMIT_TIMER_TIMEOUT,
                             errMsgBuf, sucMsgBuf,
                             &mrtEntry->upstrmGraftPruneStateInfo.prnLmtTimer,
                             "DM-PLT2")
                          != L7_SUCCESS)
   {
@@ -869,13 +869,13 @@ L7_RC_t pimdmUpstrmFsmActionSendPruneRes
   osapiSnprintf (sucMsgBuf, PIMDM_MAX_DBG_MSG_SIZE,
                  "PLT (S,G) ReSet Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmUpstrmPruneLimitTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_PRUNE_LIMIT_TIMER_TIMEOUT,
                             errMsgBuf, sucMsgBuf,
                             &mrtEntry->upstrmGraftPruneStateInfo.prnLmtTimer,
                             "DM-PLT3")
                          != L7_SUCCESS)
   {
@@ -966,13 +966,13 @@ L7_RC_t pimdmUpstrmFsmActionSendPrnSetPL
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "PLT (S,G) Set Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmUpstrmPruneLimitTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_PRUNE_LIMIT_TIMER_TIMEOUT,
                             errMsgBuf, sucMsgBuf,
                             &mrtEntry->upstrmGraftPruneStateInfo.prnLmtTimer,
                             "DM-PLT4")
                          != L7_SUCCESS)
   {
@@ -1040,13 +1040,13 @@ static L7_RC_t pimdmUpstrmFsmActionCance
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "GRT (S,G) Set Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmUpstrmGraftRetryTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_GRAFT_RETRY_TIMER_TIMEOUT, errMsgBuf,
                             sucMsgBuf,
                             &mrtEntry->upstrmGraftPruneStateInfo.grftRetryTimer,
                             "DM-GRT")
                          != L7_SUCCESS)
   {
@@ -1104,13 +1104,13 @@ static L7_RC_t pimdmUpstrmFsmActionSendG
   osapiSnprintf (sucMsgBuf,PIMDM_MAX_DBG_MSG_SIZE,
                  "GRT (S,G) Set Success for Src - %s Grp - %s ",
                  inetAddrPrint(srcAddr,src), inetAddrPrint(grpAddr,grp));
 
   if (pimdmUtilAppTimerSet (mrtEntry->pimdmCB,
                             pimdmUpstrmGraftRetryTimerExpiryHandler,
-                            (void*) mrtEntry->mrtEntryUpstrmTmrHndlParam,
+                            UINT_TO_PTR(mrtEntry->mrtEntryUpstrmTmrHndlParam),
                             PIMDM_GRAFT_RETRY_TIMER_TIMEOUT, errMsgBuf,
                             sucMsgBuf,
                             &mrtEntry->upstrmGraftPruneStateInfo.grftRetryTimer,
                             "DM-GRT2")
                          != L7_SUCCESS)
   {
Index: src/application/ip_mcast/vendor/pimsm/include/pimsmbsr.h
===================================================================
--- src/application/ip_mcast/vendor/pimsm/include/pimsmbsr.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/include/pimsmbsr.h	(working copy)
@@ -93,13 +93,13 @@ typedef struct pimsmBsrPerScopeZone_s
   L7_uchar8            pimsmBSRGroupMask;    
   L7_inet_addr_t       pimsmBSRAddr; /* ipaddr of the bsr */
   L7_uint32            pimsmBSRPriority; 
   L7_ushort16          pimsmBSRHashMasklen; 
   pimsmBSMPacketNode_t pimsmLastBSMPktNode[PIMSM_BSM_PKT_FRAGMENT_COUNT_MAX];
   L7_APP_TMR_HNDL_t    pimsmBSRTimer;    /* the bootstrap timer */
-  L7_uint32            pimsmBSRTimerHandle; /* to safeguard timeout functions */
+  L7_uint64            pimsmBSRTimerHandle; /* to safeguard timeout functions */
   L7_uint32            ctime;        /* creation time */
   pimsmBsrFragmentInfo_t pimsmBSRFragInfo;
 
   union 
   {
     struct 
Index: src/application/ip_mcast/vendor/pimsm/include/pimsmintf.h
===================================================================
--- src/application/ip_mcast/vendor/pimsm/include/pimsmintf.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/include/pimsmintf.h	(working copy)
@@ -77,15 +77,15 @@ typedef struct pimsmInterfaceEntry_s
   L7_uint32     pimsmInterfaceJoinPruneHoldtime;
   L7_sll_t        pimsmNbrList;
   L7_uint32     pimsmNbrCount;
   L7_BOOL       pimsmLANPruneDelayPresent;
   L7_uint32     pimsmPropagationDelay;
   L7_uint32     pimsmOverrideInterval;
-  L7_APP_TMR_HNDL_t  pimsmHelloTimer;
-  pimsmTimerData_t   pimsmHelloTimerParams;
-  L7_uint32  pimsmHelloTimerHandle;   
+  L7_APP_TMR_HNDL_t pimsmHelloTimer;
+  pimsmTimerData_t  pimsmHelloTimerParams;
+  L7_uint64         pimsmHelloTimerHandle;   
 }pimsmInterfaceEntry_t;
 
 
 struct pimsmNeighborEntry_s;
 struct pimsmCB_s;
 
Index: src/application/ip_mcast/vendor/pimsm/include/pimsmmain.h
===================================================================
--- src/application/ip_mcast/vendor/pimsm/include/pimsmmain.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/include/pimsmmain.h	(working copy)
@@ -54,17 +54,17 @@ struct pimsmTimerData_s;
 
 typedef struct pimsmCB_s
 {
   struct pimsmBSRBlock_s   *pimsmBsrInfo; /* BSR info. */
   struct pimsmRpBlock_s    *pimsmRpInfo;  /* node type is pimsm_rp_block_t   */ 
 
-  L7_APP_TMR_HNDL_t          pimsmSPTTimer;
-  L7_uint32          pimsmSPTTimerHandle;
-  struct pimsmTimerData_s        pimsmSPTTimerParam; 
-  L7_APP_TMR_HNDL_t          pimsmJPBundleTimer;
-  L7_uint32          pimsmJPBundleTimerHandle;    
+  L7_APP_TMR_HNDL_t         pimsmSPTTimer;
+  L7_uint64                 pimsmSPTTimerHandle;
+  struct pimsmTimerData_s   pimsmSPTTimerParam; 
+  L7_APP_TMR_HNDL_t         pimsmJPBundleTimer;
+  L7_uint64                 pimsmJPBundleTimerHandle;    
   struct pimsmTimerData_s           pimsmJPBundleTimerParam; 
   L7_sll_t             pimsmStarStarRpList;
   /* Semaphore to lock StarStarRpList*/
   void       *pimsmStarStarRpListLock;
   avlTreeTables_t        *pimsmStarGTreeHeap; /* space for tree nodes */
   struct pimsmStarGNode_s    *pimsmStarGDataHeap; /* space for data */
Index: src/application/ip_mcast/vendor/pimsm/include/pimsmneighbor.h
===================================================================
--- src/application/ip_mcast/vendor/pimsm/include/pimsmneighbor.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/include/pimsmneighbor.h	(working copy)
@@ -62,21 +62,21 @@ typedef struct pimsmNeighborAddrList_s
   L7_BOOL  pimsmSecondaryAddrActive[PIMSM_MAX_NBR_SECONDARY_ADDR];
 }pimsmNeighborAddrList_t;
 
 typedef struct pimsmNeighborEntry_s
 {
   L7_sll_member_t * next;
-  L7_uint32   pimsmNeighborIfIndex;
+  L7_uint32     pimsmNeighborIfIndex;
   pimsmNeighborAddrList_t pimsmNeighborAddrList;
   /*L7_uint32      pimsmNeighborUpTime;*/
-  L7_uint32   pimsmNeighborCreateTime;
+  L7_uint32     pimsmNeighborCreateTime;
   L7_APP_TMR_HNDL_t pimsmNeighborExpiryTimer;
-  L7_uint32 pimsmNeighborExpiryTimerHandle;
+  L7_uint64     pimsmNeighborExpiryTimerHandle;
   pimsmTimerData_t  pimsmNeighborExpiryTimerParam;
-  L7_uint32   pimsmNeighborGenerationIDValue;
-  L7_uint32   pimsmNeighborDRPriority;    
+  L7_uint32     pimsmNeighborGenerationIDValue;
+  L7_uint32     pimsmNeighborDRPriority;    
   pimsmJPMsgStoreBuff_t pimsmBuildJPMsg; /* A structure for fairly
                      * complicated Join/Prune
                      * message construction.
                      */
   L7_BOOL     pimsmNeighborLANPruneDelayPresent;                     
   L7_BOOL     pimsmNeighborTrackingSupportPresent;  
Index: src/application/ip_mcast/vendor/pimsm/include/pimsmrp.h
===================================================================
--- src/application/ip_mcast/vendor/pimsm/include/pimsmrp.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/include/pimsmrp.h	(working copy)
@@ -60,13 +60,13 @@ typedef struct pimsmAddrList_s
   L7_uchar8          pimsmMaskLen;     /* used by group-rp mapping */
   L7_APP_TMR_HNDL_t  pimsmRpGrpExpiryTimer;  /* used by the rp-grp mapping */
   L7_uint32          pimsmAddrListPoolId;  
   L7_BOOL            pimsmOriginFlag;  /* used when originating BSMs,if there is RP with more than one origin */
   void              *pimsmRpGrpNode; /* this is used as pointer to rp details for the grp-rp mapping to get rp details 
                                  this is to point to the bsr when candidate rp advertisement needs to be done */    
-  L7_uint32          pimsmRpGrpExpireTimerHandle; /* This is used to keep track of not deleting 
+  L7_uint64          pimsmRpGrpExpireTimerHandle; /* This is used to keep track of not deleting 
                                                the node when giving this pointer to timeout functions */
   pimsmCB_t     *pimsmCb;  /* pointer to back track*/
 }pimsmAddrList_t;
 
 
 /*This structure is used to store the RP information -it also contains the rp-grp mapping*/
Index: src/application/ip_mcast/vendor/pimsm/include/pimsmsgrpttree.h
===================================================================
--- src/application/ip_mcast/vendor/pimsm/include/pimsmsgrpttree.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/include/pimsmsgrpttree.h	(working copy)
@@ -35,35 +35,35 @@ struct pimsmCB_s;
 
 typedef struct pimsmSGRptEntry_s
 {
   L7_inet_addr_t  pimsmSGRptGrpAddress;
   L7_inet_addr_t  pimsmSGRptSrcAddress;
   L7_uint32     pimsmSGRptCreateTime;
-  pimsmUpStrmSGRptStates_t pimsmSGRptUpstreamPruneInitState; 
+  pimsmUpStrmSGRptStates_t  pimsmSGRptUpstreamPruneInitState; 
       /* used to initialize pimsmSGRptUpstreamPruneState */
-  pimsmUpStrmSGRptStates_t pimsmSGRptUpstreamPruneState; 
-  L7_APP_TMR_HNDL_t   pimsmSGRptUpstreamOverrideTimer;
-  L7_uint32   pimsmSGRptUpstreamOverrideTimerHandle;
-  pimsmTimerData_t pimsmSGRptUpstreamOverrideTimerParam; 
-  L7_uint32   pimsmSGRptRPFIfIndex; /* = RPF_interface(RP(G))*/
-  L7_inet_addr_t    pimsmSGRptUpstreamNeighbor;   /*RPFDash */
+  pimsmUpStrmSGRptStates_t  pimsmSGRptUpstreamPruneState; 
+  L7_APP_TMR_HNDL_t         pimsmSGRptUpstreamOverrideTimer;
+  L7_uint64                 pimsmSGRptUpstreamOverrideTimerHandle;
+  pimsmTimerData_t          pimsmSGRptUpstreamOverrideTimerParam; 
+  L7_uint32                 pimsmSGRptRPFIfIndex; /* = RPF_interface(RP(G))*/
+  L7_inet_addr_t            pimsmSGRptUpstreamNeighbor;   /*RPFDash */
 } pimsmSGRptEntry_t;
 
 typedef struct pimsmSGRptIEntry_s
 {
   /*L7_ushort16         flags;*/
-  L7_uint32           pimsmSGRptIIfIndex;
-  L7_uint32     pimsmSGRptICreateTime;
-  L7_BOOL           pimsmSGRptILocalMembership;
+  L7_uint32                 pimsmSGRptIIfIndex;
+  L7_uint32                 pimsmSGRptICreateTime;
+  L7_BOOL                   pimsmSGRptILocalMembership;
   pimsmDnStrmPerIntfSGRptStates_t     pimsmSGRptIJoinPruneState;
-  L7_APP_TMR_HNDL_t       pimsmSGRptIPrunePendingTimer;
-  L7_uint32   pimsmSGRptIPrunePendingTimerHandle;   
-  pimsmTimerData_t pimsmSGRptIPrunePendingTimerParam; 
-  L7_APP_TMR_HNDL_t       pimsmSGRptIPruneExpiryTimer;
-  L7_uint32   pimsmSGRptIPruneExpiryTimerHandle;      
-  pimsmTimerData_t pimsmSGRptIPruneExpiryTimerParam;
+  L7_APP_TMR_HNDL_t         pimsmSGRptIPrunePendingTimer;
+  L7_uint64                 pimsmSGRptIPrunePendingTimerHandle;   
+  pimsmTimerData_t          pimsmSGRptIPrunePendingTimerParam; 
+  L7_APP_TMR_HNDL_t         pimsmSGRptIPruneExpiryTimer;
+  L7_uint64                 pimsmSGRptIPruneExpiryTimerHandle;
+  pimsmTimerData_t          pimsmSGRptIPruneExpiryTimerParam;
 } pimsmSGRptIEntry_t;
 typedef struct pimsmSGRptNode_s
 {
   L7_ushort16     flags;  /*Uses flags PIMSM_XXX*/
   pimsmSGRptEntry_t   pimsmSGRptEntry;
   pimsmSGRptIEntry_t * pimsmSGRptIEntry[MCAST_MAX_INTERFACES]; 
Index: src/application/ip_mcast/vendor/pimsm/include/pimsmsgtree.h
===================================================================
--- src/application/ip_mcast/vendor/pimsm/include/pimsmsgtree.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/include/pimsmsgtree.h	(working copy)
@@ -40,53 +40,53 @@ typedef struct pimsmSGEntry_s
   L7_inet_addr_t  pimsmSGSrcAddress;
   L7_uint32       pimsmSGCreateTime;
   pimMode_t       pimsmSGPimMode;
   pimsmUpStrmSGStates_t 
   pimsmSGUpstreamJoinState;
   L7_APP_TMR_HNDL_t pimsmSGUpstreamJoinTimer;
-  L7_uint32  pimsmSGUpstreamJoinTimerHandle;
+  L7_uint64         pimsmSGUpstreamJoinTimerHandle;
   pimsmTimerData_t  pimsmSGUpstreamJoinTimerParam;
   L7_inet_addr_t    pimsmSGUpstreamNeighbor;
-  L7_uint32     pimsmSGRPFIfIndex;
+  L7_uint32         pimsmSGRPFIfIndex;
   L7_inet_addr_t    pimsmSGRPFNextHop;
   L7_RTO_PROTOCOL_INDICES_t     
   pimsmSGRPFRouteProtocol;
   L7_inet_addr_t    pimsmSGRPFRouteAddress;
   L7_uint32     pimsmSGRPFRoutePrefixLength;   
   L7_uint32     pimsmSGRPFRouteMetricPref;
   L7_uint32     pimsmSGRPFRouteMetric;
   L7_BOOL       pimsmSGSPTBit;
   L7_APP_TMR_HNDL_t pimsmSGKeepaliveTimer;
-  pimsmTimerData_t pimsmSGKeepaliveTimerParam;
-  L7_uint32 pimsmSGKeepaliveTimerHandle;
+  pimsmTimerData_t  pimsmSGKeepaliveTimerParam;
+  L7_uint64         pimsmSGKeepaliveTimerHandle;
   pimsmRegPerSGStates_t    
   pimsmSGDRRegisterState;
   L7_APP_TMR_HNDL_t pimsmSGDRRegisterStopTimer;
-  pimsmTimerData_t pimsmSGDRRegisterStopTimerParam; 
-  L7_uint32  pimsmSGDRRegisterStopTimerHandle;
+  pimsmTimerData_t  pimsmSGDRRegisterStopTimerParam; 
+  L7_uint64         pimsmSGDRRegisterStopTimerHandle;
   L7_inet_addr_t    pimsmSGRPRegisterPMBRAddress;
 } pimsmSGEntry_t;
 
 typedef struct pimsmSGIEntry_s
 {
   L7_uint32     pimsmSGIIfIndex;
   L7_uint32       pimsmSGICreateTime;
   L7_BOOL       pimsmSGILocalMembership;
   pimsmDnStrmPerIntfSGStates_t    
   pimsmSGIJoinPruneState;
   L7_APP_TMR_HNDL_t pimsmSGIPrunePendingTimer;
-  L7_uint32  pimsmSGIPrunePendingTimerHandle;   
-  pimsmTimerData_t pimsmSGIPrunePendingTimerParam;  
+  L7_uint64         pimsmSGIPrunePendingTimerHandle;   
+  pimsmTimerData_t  pimsmSGIPrunePendingTimerParam;  
   L7_APP_TMR_HNDL_t pimsmSGIJoinExpiryTimer;
-  L7_uint32  pimsmSGIJoinExpiryTimerHandle;
+  L7_uint64         pimsmSGIJoinExpiryTimerHandle;
   pimsmTimerData_t pimsmSGIJoinExpiryTimerParam;  
   pimsmPerIntfSGAssertStates_t      
   pimsmSGIAssertState;
   L7_APP_TMR_HNDL_t pimsmSGIAssertTimer;
-  L7_uint32 pimsmSGIAssertTimerHandle;
-  pimsmTimerData_t pimsmSGIAssertTimerParam;  
+  L7_uint64         pimsmSGIAssertTimerHandle;
+  pimsmTimerData_t  pimsmSGIAssertTimerParam;  
   L7_inet_addr_t    pimsmSGIAssertWinnerAddress;
   L7_uint32     pimsmSGIAssertWinnerMetricPref;
   L7_uint32     pimsmSGIAssertWinnerMetric;
 } pimsmSGIEntry_t;
 
 typedef struct pimsmSGNode_s 
Index: src/application/ip_mcast/vendor/pimsm/include/pimsmstargtree.h
===================================================================
--- src/application/ip_mcast/vendor/pimsm/include/pimsmstargtree.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/include/pimsmstargtree.h	(working copy)
@@ -32,50 +32,50 @@
 #include "pimsmtimer.h"
 
 
 typedef struct pimsmStarGEntry_s
 {
   L7_inet_addr_t    pimsmStarGGrpAddress;
-  L7_uint32       pimsmStarGCreateTime;
-  pimMode_t       pimsmStarGPimMode;
+  L7_uint32         pimsmStarGCreateTime;
+  pimMode_t         pimsmStarGPimMode;
   L7_inet_addr_t    pimsmStarGRPAddress;
   PIMSM_RP_GRP_MAPPING_ORIGIN_TYPE pimsmStarGRPOrigin;
-  L7_BOOL       pimsmStarGRPIsLocal;
+  L7_BOOL           pimsmStarGRPIsLocal;
   pimsmUpStrmStarGStates_t pimsmStarGUpstreamJoinState;
   L7_APP_TMR_HNDL_t pimsmStarGUpstreamJoinTimer;
-  L7_uint32 pimsmStarGUpstreamJoinTimerHandle;
-  pimsmTimerData_t        pimsmStarGUpstreamJoinTimerParam;
+  L7_uint64         pimsmStarGUpstreamJoinTimerHandle;
+  pimsmTimerData_t  pimsmStarGUpstreamJoinTimerParam;
   L7_inet_addr_t    pimsmStarGUpstreamNeighbor;
-  L7_uint32       pimsmStarGRPFIfIndex;
+  L7_uint32         pimsmStarGRPFIfIndex;
   L7_inet_addr_t    pimsmStarGRPFNextHop;
   L7_RTO_PROTOCOL_INDICES_t pimsmStarGRPFRouteProtocol;
   L7_inet_addr_t    pimsmStarGRPFRouteAddress;
-  L7_uint32       pimsmStarGRPFRoutePrefixLength;
-  L7_uint32       pimsmStarGRPFRouteMetricPref;
-  L7_uint32       pimsmStarGRPFRouteMetric;
+  L7_uint32         pimsmStarGRPFRoutePrefixLength;
+  L7_uint32         pimsmStarGRPFRouteMetricPref;
+  L7_uint32         pimsmStarGRPFRouteMetric;
 } pimsmStarGEntry_t;
 
 typedef struct pimsmStarGIEntry_s
 {
-  L7_uint32     pimsmStarGIIfIndex;
-  L7_uint32       pimsmStarGICreateTime;  
-  L7_BOOL       pimsmStarGILocalMembership;
+  L7_uint32         pimsmStarGIIfIndex;
+  L7_uint32         pimsmStarGICreateTime;  
+  L7_BOOL           pimsmStarGILocalMembership;
   pimsmDnStrmPerIntfStarGStates_t     pimsmStarGIJoinPruneState;
   L7_APP_TMR_HNDL_t pimsmStarGIPrunePendingTimer;
-  L7_uint32 pimsmStarGIPrunePendingTimerHandle;
+  L7_uint64         pimsmStarGIPrunePendingTimerHandle;
   pimsmTimerData_t  pimsmStarGIPrunePendingTimerParam;
   L7_APP_TMR_HNDL_t pimsmStarGIJoinExpiryTimer;
-  L7_uint32 pimsmStarGIJoinExpiryTimerHandle;
-  pimsmTimerData_t pimsmStarGIJoinExpiryTimerParam;
+  L7_uint64         pimsmStarGIJoinExpiryTimerHandle;
+  pimsmTimerData_t  pimsmStarGIJoinExpiryTimerParam;
   pimsmPerIntfStarGAssertStates_t       pimsmStarGIAssertState;
   L7_APP_TMR_HNDL_t pimsmStarGIAssertTimer;
-  L7_uint32 pimsmStarGIAssertTimerHandle;   
-  pimsmTimerData_t pimsmStarGIAssertTimerParam;
+  L7_uint64         pimsmStarGIAssertTimerHandle;   
+  pimsmTimerData_t  pimsmStarGIAssertTimerParam;
   L7_inet_addr_t    pimsmStarGIAssertWinnerAddress;
-  L7_uint32       pimsmStarGIAssertWinnerMetricPref;
-  L7_uint32       pimsmStarGIAssertWinnerMetric;
+  L7_uint32         pimsmStarGIAssertWinnerMetricPref;
+  L7_uint32         pimsmStarGIAssertWinnerMetric;
 } pimsmStarGIEntry_t;
 
 /* Following data struct and APIs represents data and operations on Tree-B */
 
 typedef struct pimsmStarGNode_s
 {
Index: src/application/ip_mcast/vendor/pimsm/include/pimsmstarstarrptree.h
===================================================================
--- src/application/ip_mcast/vendor/pimsm/include/pimsmstarstarrptree.h	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/include/pimsmstarstarrptree.h	(working copy)
@@ -28,43 +28,43 @@
 #include "pimsmcache.h"
 #include "pimsmdefs.h"
 #include "pimsmtimer.h"
 
 typedef struct pimsmStarStarRpEntry_s
 {
-  L7_inet_addr_t pimsmStarStarRpRPAddress;
+  L7_inet_addr_t    pimsmStarStarRpRPAddress;
   PIMSM_RP_GRP_MAPPING_ORIGIN_TYPE pimsmStarStarRpRPOrigin;
-  L7_uint32      pimsmStarStarRpCreateTime;
-  pimMode_t      pimsmStarStarRpPimMode;
+  L7_uint32         pimsmStarStarRpCreateTime;
+  pimMode_t         pimsmStarStarRpPimMode;
   pimsmUpStrmStarStarRPStates_t pimsmStarStarRpUpstreamJoinState;
-  L7_APP_TMR_HNDL_t      pimsmStarStarRpUpstreamJoinTimer;
-  L7_uint32      pimsmStarStarRpUpstreamJoinTimerHandle;
-  pimsmTimerData_t pimsmStarStarRpUpstreamJoinTimerParam;    
-  L7_inet_addr_t pimsmStarStarRpUpstreamNeighbor;
-  L7_uint32      pimsmStarStarRpRPFIfIndex;
-  L7_inet_addr_t pimsmStarStarRpRPFNextHop;
+  L7_APP_TMR_HNDL_t pimsmStarStarRpUpstreamJoinTimer;
+  L7_uint64         pimsmStarStarRpUpstreamJoinTimerHandle;
+  pimsmTimerData_t  pimsmStarStarRpUpstreamJoinTimerParam;    
+  L7_inet_addr_t    pimsmStarStarRpUpstreamNeighbor;
+  L7_uint32         pimsmStarStarRpRPFIfIndex;
+  L7_inet_addr_t    pimsmStarStarRpRPFNextHop;
   L7_RTO_PROTOCOL_INDICES_t pimsmStarStarRpRPFRouteProtocol;
-  L7_inet_addr_t pimsmStarStarRpRPFRouteAddress;
-  L7_uint32       pimsmStarStarRpRPFRoutePrefixLength;
-  L7_uint32      pimsmStarStarRpRPFRouteMetricPref;
-  L7_uint32      pimsmStarStarRpRPFRouteMetric;
-  L7_short16     flags;
+  L7_inet_addr_t    pimsmStarStarRpRPFRouteAddress;
+  L7_uint32         pimsmStarStarRpRPFRoutePrefixLength;
+  L7_uint32         pimsmStarStarRpRPFRouteMetricPref;
+  L7_uint32         pimsmStarStarRpRPFRouteMetric;
+  L7_short16        flags;
   interface_bitset_t  immediateOlist;
 } pimsmStarStarRpEntry_t;
 
 typedef struct pimsmStarStarRpIEntry_s
 {
-  L7_uint32   pimsmStarStarRpIIfIndex;
-  L7_uint32      pimsmStarStarRpICreateTime;
+  L7_uint32         pimsmStarStarRpIIfIndex;
+  L7_uint32         pimsmStarStarRpICreateTime;
 /*  L7_BOOL             pimsmStarStarRpILocalMembership; */
   pimsmDnStrmPerIntfStarStarRPStates_t      pimsmStarStarRpIJoinPruneState;
-  L7_APP_TMR_HNDL_t       pimsmStarStarRpIPrunePendingTimer;
-  L7_uint32      pimsmStarStarRpIPrunePendingTimerHandle;    
-  pimsmTimerData_t pimsmStarStarRpIPrunePendingTimerParam;   
-  L7_APP_TMR_HNDL_t       pimsmStarStarRpIJoinExpiryTimer;
-  L7_uint32      pimsmStarStarRpIJoinExpiryTimerHandle;    
+  L7_APP_TMR_HNDL_t pimsmStarStarRpIPrunePendingTimer;
+  L7_uint64         pimsmStarStarRpIPrunePendingTimerHandle;    
+  pimsmTimerData_t  pimsmStarStarRpIPrunePendingTimerParam;   
+  L7_APP_TMR_HNDL_t pimsmStarStarRpIJoinExpiryTimer;
+  L7_uint64         pimsmStarStarRpIJoinExpiryTimerHandle;    
   pimsmTimerData_t pimsmStarStarRpIJoinExpiryTimerParam;    
 } pimsmStarStarRpIEntry_t;
 
 /* Following data struct and APIs represents data and operations on Tree-A */
 
 typedef struct pimsmStarStarRpNode_s 
Index: src/application/ip_mcast/vendor/pimsm/pimsmapi.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmapi.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmapi.c	(working copy)
@@ -76,13 +76,13 @@ L7_RC_t pimsmWholePacketEventQueue(L7_uc
                                sizeof(mfcEntry_t),
                                (L7_VOIDPTR)pMfcEntry) != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_MFC_INTERACTION, PIMSM_TRACE_INFO,"PIMSM message Queue Send  failed");
     if ((pMfcEntry->m->rtm_bufhandle) != L7_NULLPTR)
     {
-      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)(pMfcEntry->m)->rtm_bufhandle);
+      SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64((pMfcEntry->m)->rtm_bufhandle));
     }
     rtm_freem(pMfcEntry->m);
     /*restore original buf pointer */
     pMfcEntry->m = mbuf;
     return L7_FAILURE;
   }
Index: src/application/ip_mcast/vendor/pimsm/pimsmbsr.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmbsr.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmbsr.c	(working copy)
@@ -145,13 +145,13 @@ L7_RC_t pimsmBsrNodeDelete(pimsmCB_t *pi
     PIMSM_TRACE(PIMSM_DEBUG_BIT_BSR, PIMSM_TRACE_INFO,"BSR Scope zone timer deleted ");
     pimsmUtilAppTimerCancel (pimsmCb, &(bsrEntry->zone.nbsr.pimsmBSRScopeZoneExpireTimer));
   }
 
   /* remove the handle */
   handleListNodeDelete(bsrEntry->pimsmCb->handleList,
-                         &bsrEntry->pimsmBSRTimerHandle);
+                       (L7_uint64 *) &bsrEntry->pimsmBSRTimerHandle);
   /* Delete the entry */
   memset(bsrEntry, 0, sizeof(pimsmBsrPerScopeZone_t));
   inetAddressZeroSet(pimsmCb->family, &bsrEntry->pimsmBSRAddr);
   inetAddressZeroSet(pimsmCb->family, &bsrEntry->pimsmBSRGroupRange);
   inetAddressZeroSet(pimsmCb->family, 
                        &bsrEntry->zone.cbsr.pimsmElectedBSRAddress);  
@@ -451,13 +451,13 @@ static L7_RC_t pimsmBsrInfoNodeAdd(pimsm
       bsrNode->zone.cbsr.pimsmCandBSRState = 
       PIMSM_CANDIDATE_BSR_SM_STATE_PENDING_BSR;
       bsrNode->zone.cbsr.pimsmElectedBSRPriority= bsrPriority;
       bsrNode->zone.cbsr.pimsmElectedBSRHashMaskLen = bsrHashMasklen;
       inetCopy(&(bsrNode->zone.cbsr.pimsmElectedBSRAddress), &bsrAddr);
       if (pimsmUtilAppTimerSet (pimsmCb, pimsmBsrCandidateBootStrapTimerExpiresHandler,
-                                (void*)bsrNode->pimsmBSRTimerHandle,
+                                UINT_TO_PTR(bsrNode->pimsmBSRTimerHandle),
                                 pimsmBsrRandOverrideIntervalGet(pimsmCb,bsrNode),
                                 &(bsrNode->pimsmBSRTimer),
                                 "SM-BSR") != L7_SUCCESS)
       {
         PIMSM_TRACE(PIMSM_DEBUG_BIT_BSR,  PIMSM_TRACE_ERROR, "BSR Timer Add Failed");
       }
@@ -475,13 +475,13 @@ static L7_RC_t pimsmBsrInfoNodeAdd(pimsm
         /* set the state to accept any */
         bsrNode->zone.nbsr.pimsmNonCandBSRState = 
         PIM_NON_CANDIDATE_BSR_SM_STATE_ACCEPT_ANY;
 
         /*  start the scope zone timer */
         if (pimsmUtilAppTimerSet (pimsmCb, pimsmBsrNonCandidateScopeZoneTimerExpiresHandler,
-                                  (void*)bsrNode->pimsmBSRTimerHandle,
+                                  UINT_TO_PTR(bsrNode->pimsmBSRTimerHandle),
                                   PIMSM_DEFAULT_BOOTSTRAP_SZ_TIMEOUT,
                                   &(bsrNode->zone.nbsr.pimsmBSRScopeZoneExpireTimer),
                                   "SM-SZT")
                                != L7_SUCCESS)
         {
           PIMSM_TRACE(PIMSM_DEBUG_BIT_BSR,  PIMSM_TRACE_ERROR, "pimsmBSRScopeZoneExpireTimer Timer Add Failed");
@@ -1168,13 +1168,13 @@ L7_uint32 pimsmBsrPacketGrpInfoExtract(L
   pGrpNode->pimsmGrpMaskLength = encodGrpAddr.masklen;
   MCAST_GET_BYTE(pGrpNode->pimsmRpCnt,pDataTemp);
   MCAST_GET_BYTE(pGrpNode->pimsmFragRpCnt,pDataTemp);
   MCAST_GET_SHORT(reserved, pDataTemp);
   MCAST_UNUSED_PARAM (reserved);
 
-  return((L7_uint32)pDataTemp - (L7_uint32)pData);
+  return (L7_uint32) (PTR_TO_UINT64(pDataTemp) - PTR_TO_UINT64(pData));
 }
 
 /******************************************************************************
 * @purpose  To extract the RP info from the BSM packet
 *
 * @param    pimPkt   @b{(input)} the pointer to the pim message.
@@ -1201,13 +1201,13 @@ L7_uint32 pimsmBsrPacketRpInfoExtract(L7
   inetAddressSet(encodRpAddr.addr_family,&encodRpAddr.addr,&pRpNode->pimsmRpAddr);
   MCAST_GET_SHORT(pRpNode->pimsmRpHoldtime,pDataTemp);
   MCAST_GET_BYTE(pRpNode->pimsmRpPriority,pDataTemp);
   MCAST_GET_BYTE(reserved,pDataTemp);
   MCAST_UNUSED_PARAM (reserved);
 
-  return((L7_uint32)pDataTemp - (L7_uint32)pData);
+  return (L7_uint32) (PTR_TO_UINT64(pDataTemp) - PTR_TO_UINT64(pData));
 }
 
 /******************************************************************************
 * @purpose  To store the grp-rp mappings in the fragment list 
 *
 * @param    pimsmCb      @b{(input)} pointer to the pimsm control block.
@@ -1327,13 +1327,13 @@ static L7_uint32 pimsmBsrPacketFragListS
       }
       /* delete the frag node belonging to this group afterwards */
       SLLDelete(&(pBsrNode->pimsmBSRFragInfo.pimsmGrpRpList),
                 (L7_sll_member_t*)pFragGrpNode);
     }
   }
-  return((L7_uint32)pDataTemp - (L7_uint32)pData);
+  return (L7_uint32) (PTR_TO_UINT64(pDataTemp) - PTR_TO_UINT64(pData));
 }
 
 
 /******************************************************************************
 * @purpose  To store the RP-Group mapping obtained from the BSR packet 
 *
@@ -1371,13 +1371,13 @@ void pimsmBsrPacketRpGrpMappingStore(pim
   MCAST_GET_BYTE(bsrHashMaskLen,pData);
   MCAST_GET_BYTE(bsrPriority,pData);
   MCAST_UNUSED_PARAM (bsrPriority); /* NOTE: TBD: Looks like bsrPriority processing is not implemented. */
   PIM_GET_EUADDR_INET( &encodBsrAddr,pData);
   inetAddressSet(encodBsrAddr.addr_family,&encodBsrAddr.addr,&bsrAddr);
 
-  while (((L7_uint32)pData - (L7_uint32)pimHeader) < pimPktLen)
+  while (((L7_uint32) (PTR_TO_UINT64(pData) - PTR_TO_UINT64(pimHeader))) < pimPktLen)
   {
     L7_uint32 count;
     pimsmBSMMsgGrpNode_t    grpNode;
 
     /* get each of the group address */
     len = pimsmBsrPacketGrpInfoExtract(pData,&grpNode);
@@ -1385,13 +1385,13 @@ void pimsmBsrPacketRpGrpMappingStore(pim
 
     /* check if the fragment contains all the rp's */
     if (grpNode.pimsmRpCnt == grpNode.pimsmFragRpCnt)
     {
       count=0 ;
       while (count < grpNode.pimsmFragRpCnt && 
-             ((L7_uint32)pData - (L7_uint32)pimHeader) < pimPktLen)
+             ((L7_uint32) (PTR_TO_UINT64(pData) - PTR_TO_UINT64(pimHeader))) < pimPktLen)
       {
         pimsmBSMMsgRpNode_t   bsrRpNode;
         pimsmCandRpConfigInfo_t   rpConfigInfo;
 
         len = pimsmBsrPacketRpInfoExtract(pData,&bsrRpNode);
         pData +=len;
@@ -1762,13 +1762,13 @@ void pimsmBsrPacketOriginate(pimsmCB_t
   MCAST_PUT_BYTE(pBsrNode->pimsmBSRPriority, pDataTemp);
 
   /* fillup the BSR address in encoded unicast format*/
   PIM_PUT_EUADDR_INET(&pBsrNode->pimsmBSRAddr, pDataTemp);
 
   /* calculate the header offset */
-  bsrHeaderOffset = (L7_uint32)pData - (L7_uint32)pDataTemp;
+  bsrHeaderOffset = (L7_uint32) (PTR_TO_UINT64(pData) - PTR_TO_UINT64(pDataTemp));
 
   inetMaskLenToMask(pimsmCb->family,(L7_uchar8)pBsrNode->pimsmBSRGroupMask,
                     &bsrGrpMask);
 
   rc = pimsmRpSetTreeGrpNodeFind(pimsmCb,pBsrNode->pimsmBSRGroupRange,
                                  bsrGrpMask,&pRpSetNode);
@@ -1853,13 +1853,13 @@ void pimsmBsrPacketOriginate(pimsmCB_t
             if (pRpNode->pimsmOrigin == PIMSM_RP_GRP_MAPPING_ORIGIN_TYPE_CONFIG ||
                 pRpNode->pimsmOrigin == PIMSM_RP_GRP_MAPPING_ORIGIN_TYPE_BSR)
             {
               pimsmRpGrpNode_t     *pRpGrpNode;
               pRpGrpNode = (pimsmRpGrpNode_t*)pRpNode->pimsmRpGrpNode;
 
-              dataLen = (L7_uint32)pDataTemp - (L7_uint32)pData;
+              dataLen = (L7_uint32) (PTR_TO_UINT64(pDataTemp) - PTR_TO_UINT64(pData));
               /* fill the rp details */
               if (dataLen < PIMSM_PKT_SIZE_MAX)
               {
                 PIM_PUT_EUADDR_INET(&(pRpGrpNode->pimsmRpAddr), pDataTemp);
                 fragRpCnt++;
                 MCAST_PUT_SHORT(pRpGrpNode->pimsmRpHoldTime, pDataTemp);
@@ -1903,13 +1903,13 @@ void pimsmBsrPacketOriginate(pimsmCB_t
 
     if (pRpSetNode == L7_NULLPTR)
     {
       noMoreInfo = L7_FALSE;
     }
 
-    dataLen = (L7_uint32)pDataTemp - (L7_uint32)pData;
+    dataLen = (L7_uint32) (PTR_TO_UINT64(pDataTemp) - PTR_TO_UINT64(pData));
     /* send the packet */
     if (rtrIfNum == 0)
     {
       pimsmBsrPacketInterfaceSend(pimsmCb, pBsrNode, pData, dataLen);
     }
     else
@@ -2240,13 +2240,13 @@ L7_RC_t pimsmBsrCandRpAdvRecv(pimsmCB_t
   pData = (L7_uchar8*)(pimHeader + PIM_HEARDER_SIZE);
 
   /* Parse the CRP message */
   MCAST_GET_BYTE(prefixCount,pData);
   MCAST_GET_BYTE(rpPriority,pData);
   MCAST_GET_SHORT(rpHoldtime,pData);
-  dataLen = (L7_uint32)pData - (L7_uint32)pimHeader;
+  dataLen = (L7_uint32) (PTR_TO_UINT64(pData) - PTR_TO_UINT64(pimHeader));
 
   if (pimPktLen <= dataLen)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_BSR, PIMSM_TRACE_ERROR,
                 "data pkt length for CRP Adverisement is less than expected ");
     return L7_FAILURE;
Index: src/application/ip_mcast/vendor/pimsm/pimsmcandbsrfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmcandbsrfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmcandbsrfsm.c	(working copy)
@@ -152,13 +152,13 @@ L7_RC_t pimsmPerScopeZoneCandBSRExecute(
 * @comments
 *
 * @end
 ******************************************************************************/
 void pimsmBsrCandidateBootStrapTimerExpiresHandler (void *pParam)
 {
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   pimsmBsrPerScopeZone_t                *bsrNode;
   pimsmPerScopeZoneCandBSREventInfo_t    candEventInfo;
 
   bsrNode = (pimsmBsrPerScopeZone_t *)handleListNodeRetrieve(handle);
 
   if(bsrNode == L7_NULLPTR)
@@ -218,13 +218,13 @@ L7_RC_t  pimsmPerScopeZoneCandBSRAction1
                      bsrNode,
                      candBsrEventInfo->pimsmPktInfo.pimHeader,
                      candBsrEventInfo->pimsmPktInfo.pimPktLen);
 
   /*Set Bootstrap Timer to BS_timeout;*/
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmBsrCandidateBootStrapTimerExpiresHandler,
-                            (void*)bsrNode->pimsmBSRTimerHandle,
+                            UINT_TO_PTR(bsrNode->pimsmBSRTimerHandle),
                             PIMSM_DEFAULT_BOOTSTRAP_TIMEOUT,
                             &(bsrNode->pimsmBSRTimer),
                             "SM-BSR2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_BSR_FSM,  PIMSM_TRACE_ERROR, "bsrCandidateBSRBootstrapTimer Add Failed");
@@ -259,13 +259,13 @@ L7_RC_t  pimsmPerScopeZoneCandBSRAction2
   pimsmBsrPacketForward (pimsmCb, bsrNode, candBsrEventInfo->pimsmPktInfo.pimHeader,
                          candBsrEventInfo->pimsmPktInfo.pimPktLen,
                          candBsrEventInfo->pimsmPktInfo.rtrIfNum);
 
   /*Set Bootstrap Timer to BS_timeout;*/
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmBsrCandidateBootStrapTimerExpiresHandler,
-                            (void*)bsrNode->pimsmBSRTimerHandle,
+                            UINT_TO_PTR(bsrNode->pimsmBSRTimerHandle),
                             pimsmBsrRandOverrideIntervalGet(pimsmCb,bsrNode),
                             &(bsrNode->pimsmBSRTimer),
                             "SM-BSR3")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_BSR_FSM,  PIMSM_TRACE_ERROR,"bsrCandidateBSRBootstrapTimer Add Failed");
@@ -306,13 +306,13 @@ L7_RC_t  pimsmPerScopeZoneCandBSRAction3
                 pimsmCb->pimsmBsrInfo->pimsmCandBSRInfo.pimsmBSRCandidateBSRHashMaskLength;
   pimsmBsrCandRpToRpGrpListGet(pimsmCb,bsrNode);
   pimsmBsrPacketOriginate(pimsmCb,bsrNode,L7_NULLPTR,0);
 
   /*Set Bootstrap Timer to BS_period;*/
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmBsrCandidateBootStrapTimerExpiresHandler,
-                            (void*)bsrNode->pimsmBSRTimerHandle,
+                            UINT_TO_PTR(bsrNode->pimsmBSRTimerHandle),
                             PIMSM_DEFAULT_BOOTSTRAP_PERIOD,
                             &(bsrNode->pimsmBSRTimer),
                             "SM-BSR4")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_BSR_FSM,  PIMSM_TRACE_ERROR,"bsrCandidateBSRBootstrapTimer Add Failed");
Index: src/application/ip_mcast/vendor/pimsm/pimsmcontrol.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmcontrol.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmcontrol.c	(working copy)
@@ -1548,13 +1548,13 @@ L7_RC_t pimsmGlobalAdminModeProcess(MCAS
     pTimerData = &pimsmCb->pimsmJPBundleTimerParam;
     memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
     pTimerData->pimsmCb = pimsmCb;
   
     timer = appTimerAdd(pimsmCb->timerCb,
                         pimsmJPBundleTimerExpiryHandler,
-                        (void*)pimsmCb->pimsmJPBundleTimerHandle,
+                        UINT_TO_PTR(pimsmCb->pimsmJPBundleTimerHandle),
                         PIMSM_DEFAULT_JP_BUNDLE_TIME,
                         "SM-JPB");
     if(timer != L7_NULLPTR)
     {
       pimsmCb->pimsmJPBundleTimer = timer;
     }
@@ -1565,13 +1565,13 @@ L7_RC_t pimsmGlobalAdminModeProcess(MCAS
     pTimerData = &pimsmCb->pimsmSPTTimerParam;
     memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
     pTimerData->pimsmCb = pimsmCb;
  
     timer = appTimerAdd(pimsmCb->timerCb,
                         pimsmSPTTimerExpiresHandler,
-                        (void*)pimsmCb->pimsmSPTTimerHandle,
+                        UINT_TO_PTR(pimsmCb->pimsmSPTTimerHandle),
                         PIMSM_DEFAULT_CHECK_INTERVAL,
                         "SM-SPT");
     if(timer != L7_NULLPTR)
     {
       pimsmCb->pimsmSPTTimer = timer;
     }
Index: src/application/ip_mcast/vendor/pimsm/pimsmdebug.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmdebug.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmdebug.c	(working copy)
@@ -1274,17 +1274,17 @@ void pimsmDebugCtrlBlockShow ( pimsmCB_t
   PIMSM_DEBUG_PRINTF( "pimsmRegRateBytes: %d \n", pimsmCb->pimsmRegRateBytes );
   PIMSM_DEBUG_PRINTF( "pimsmRateCheckInterval: %d \n", pimsmCb->pimsmRateCheckInterval );
   PIMSM_DEBUG_PRINTF( "family: %d \n", pimsmCb->family );  
   PIMSM_DEBUG_PRINTF( "isPimsmEnabled: %d \n", pimsmCb->isPimsmEnabled );  
   PIMSM_DEBUG_PRINTF( "isPimsmEnabled: %d \n", pimsmCb->isPimsmEnabled );  
   PIMSM_DEBUG_PRINTF( "pimsmRestartInProgress: %d \n", pimsmCb->pimsmRestartInProgress );  
-  PIMSM_DEBUG_PRINTF( "pimsmSPTTimerHandle: %d \n", 
+  PIMSM_DEBUG_PRINTF( "pimsmSPTTimerHandle: 0x%llx \n", 
                       pimsmCb->pimsmSPTTimerHandle );  
   PIMSM_DEBUG_PRINTF( "pimsmSPTTimerParam Addr: %p \n", 
                       &pimsmCb->pimsmSPTTimerParam );
-  PIMSM_DEBUG_PRINTF( "pimsmJPBundleTimerHandle: %d \n", 
+  PIMSM_DEBUG_PRINTF( "pimsmJPBundleTimerHandle: 0x%llx \n", 
                       pimsmCb->pimsmJPBundleTimerHandle );  
   PIMSM_DEBUG_PRINTF( "pimsmJPBundleTimerParam Addr: %p \n", 
                       &pimsmCb->pimsmJPBundleTimerParam );
   PIMSM_DEBUG_PRINTF( "timerCb: %p \n", 
                       (pimsmCb->timerCb));  
   PIMSM_DEBUG_PRINTF( "handleList: %p \n", 
@@ -1298,13 +1298,13 @@ void pimsmDebugCtrlBlockShow ( pimsmCB_t
                 pimsmCb->pimsmStarGNextHopUpdateCnt);
   PIMSM_DEBUG_PRINTF( "pimsmSGRptNextHopUpdateCnt: %d\n",
                 pimsmCb->pimsmSGRptNextHopUpdateCnt);
   PIMSM_DEBUG_PRINTF( "maxNumOfTimers: %d\n",
                 pimsmCb->maxNumOfTimers);
 
-  PIMSM_DEBUG_PRINTF( "mcastHeapId: 0x%x \n", mcastMapHeapIdGet(pimsmCb->family));
+  PIMSM_DEBUG_PRINTF( "mcastHeapId: 0x%llx \n", mcastMapHeapIdGet(pimsmCb->family));
 }
 
 /******************************************************************************
 * @purpose  Help command: show all debug APIs
 *
 * @param
Index: src/application/ip_mcast/vendor/pimsm/pimsmdnstrmsgfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmdnstrmsgfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmdnstrmsgfsm.c	(working copy)
@@ -222,13 +222,13 @@ static L7_RC_t  pimsmDnStrmPerIntfSGExpi
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   pTimerData->rtrIfNum = rtrIfNum;
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGIJoinTimerExpiresHandler,
-                            (void*)pSGIEntry->pimsmSGIJoinExpiryTimerHandle,
+                            UINT_TO_PTR(pSGIEntry->pimsmSGIJoinExpiryTimerHandle),
                             holdtime,
                             &(pSGIEntry->pimsmSGIJoinExpiryTimer),
                             "SGI-JT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G, PIMSM_TRACE_ERROR,
@@ -291,13 +291,13 @@ static L7_RC_t  pimsmDnStrmPerIntfSGExpi
                            &timeLeft) == L7_SUCCESS)
   {
     holdtime = max (timeLeft, holdtime);
   }
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGIJoinTimerExpiresHandler,
-                            (void*)pSGIEntry->pimsmSGIJoinExpiryTimerHandle,
+                            UINT_TO_PTR(pSGIEntry->pimsmSGIJoinExpiryTimerHandle),
                             holdtime,
                             &(pSGIEntry->pimsmSGIJoinExpiryTimer),
                             "SGI-JT2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G, PIMSM_TRACE_ERROR,
@@ -361,13 +361,13 @@ static L7_RC_t  pimsmDnStrmPerIntfSGPrun
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   pTimerData->rtrIfNum = rtrIfNum;
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGIPrunePendingTimerExpiresHandler,
-                            (void*)pSGIEntry->pimsmSGIPrunePendingTimerHandle,
+                            UINT_TO_PTR(pSGIEntry->pimsmSGIPrunePendingTimerHandle),
                             timeOut,
                             &(pSGIEntry->pimsmSGIPrunePendingTimer),
                             "SGI-PPT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G, PIMSM_TRACE_ERROR,
@@ -516,13 +516,13 @@ static L7_RC_t pimsmDnStrmPerIntfSGError
 * @end
 ******************************************************************************/
 static void pimsmSGIPrunePendingTimerExpiresHandler(void *pParam)
 {
   pimsmCB_t               *pimsmCb;
   pimsmTimerData_t        *pTimerData;
-  L7_int32                 handle = (L7_int32)pParam;
+  L7_uint64                handle = PTR_TO_UINT64(pParam);
   pimsmSGNode_t           *pSGNode;
   pimsmSGIEntry_t         *pSGIEntry = L7_NULLPTR;
   L7_uint32                rtrIfNum;
   L7_BOOL                  joinDesired;
   pimsmDnStrmPerIntfSGEventInfo_t dnStrmPerIntfSGEventInfo;
   pimsmUpStrmSGEventInfo_t upStrmSGEventInfo;
@@ -619,13 +619,13 @@ static void pimsmSGIPrunePendingTimerExp
 * @end
 ******************************************************************************/
 static void pimsmSGIJoinTimerExpiresHandler(void *pParam)
 {
   pimsmTimerData_t   *pTimerData;
   pimsmCB_t          *pimsmCb;
-  L7_int32            handle = (L7_int32)pParam;
+  L7_uint64           handle = PTR_TO_UINT64(pParam);
   pimsmSGNode_t      *pSGNode;
   pimsmSGIEntry_t    *pSGIEntry = L7_NULLPTR;
   L7_uint32           rtrIfNum;
   L7_BOOL             joinDesired;
   pimsmDnStrmPerIntfSGEventInfo_t dnStrmPerIntfSGEventInfo;
   pimsmUpStrmSGEventInfo_t upStrmSGEventInfo;
Index: src/application/ip_mcast/vendor/pimsm/pimsmdnstrmsgrptfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmdnstrmsgrptfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmdnstrmsgrptfsm.c	(working copy)
@@ -273,13 +273,13 @@ static L7_RC_t pimsmDnStrmPerIntfSGRptPr
   inetCopy(&pTimerData->addr1, &pSGRptNode->pimsmSGRptEntry.pimsmSGRptSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGRptNode->pimsmSGRptEntry.pimsmSGRptGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
 
   PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G_RPT, PIMSM_TRACE_INFO,"Adding Expire timer ");
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGRptIPruneExpireTimerExpiresHandler,
-                            (void*)pSGRptIEntry ->pimsmSGRptIPruneExpiryTimerHandle,
+                            UINT_TO_PTR(pSGRptIEntry ->pimsmSGRptIPruneExpiryTimerHandle),
                             holdtime,
                             &(pSGRptIEntry->pimsmSGRptIPruneExpiryTimer),
                             "SGr-PT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G_RPT, PIMSM_TRACE_ERROR,
@@ -304,13 +304,13 @@ static L7_RC_t pimsmDnStrmPerIntfSGRptPr
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   pTimerData->rtrIfNum = rtrIfNum;
   inetCopy(&pTimerData->addr1, &pSGRptNode->pimsmSGRptEntry.pimsmSGRptSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGRptNode->pimsmSGRptEntry.pimsmSGRptGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGRptIPrunePendingTimerExpiresHandler,
-                            (void*)pSGRptIEntry ->pimsmSGRptIPrunePendingTimerHandle,
+                            UINT_TO_PTR(pSGRptIEntry ->pimsmSGRptIPrunePendingTimerHandle),
                             timeOut,
                             &(pSGRptIEntry ->pimsmSGRptIPrunePendingTimer),
                             "SGr-PPT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G_RPT, PIMSM_TRACE_ERROR,
@@ -376,13 +376,13 @@ static L7_RC_t pimsmDnStrmPerIntfSGRptPr
   pTimerData->rtrIfNum = rtrIfNum;
   inetCopy(&pTimerData->addr1, &pSGRptNode->pimsmSGRptEntry.pimsmSGRptSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGRptNode->pimsmSGRptEntry.pimsmSGRptGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGRptIPruneExpireTimerExpiresHandler,
-                            (void*)pSGRptIEntry ->pimsmSGRptIPruneExpiryTimerHandle,
+                            UINT_TO_PTR(pSGRptIEntry ->pimsmSGRptIPruneExpiryTimerHandle),
                             holdtime,
                             &(pSGRptIEntry->pimsmSGRptIPruneExpiryTimer),
                             "SGr-PT2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G_RPT, PIMSM_TRACE_ERROR,
@@ -455,13 +455,13 @@ static void pimsmSGRptIPrunePendingTimer
   pimsmDnStrmPerIntfSGRptEventInfo_t pDnStrmPerIntfSGRptEventInfo;
   pimsmSGRptNode_t   *pSGRptNode;
   pimsmSGRptIEntry_t *pSGRptIEntry= L7_NULLPTR;
   L7_uint32           rtrIfNum;
   pimsmTimerData_t   *pTimerData;
   pimsmCB_t          *pimsmCb;
-  L7_int32            handle = (L7_int32)pParam;
+  L7_uint64           handle = PTR_TO_UINT64(pParam);
   pimsmUpStrmSGRptEventInfo_t upStrmSGRptEventInfo;
   L7_BOOL pruneDesired;
   L7_inet_addr_t *pGrpAddr, *pSrcAddr;
   pimsmStarGNode_t * pStarGNode;
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
@@ -550,13 +550,13 @@ static void  pimsmSGRptIPruneExpireTimer
   pimsmDnStrmPerIntfSGRptEventInfo_t pDnStrmPerIntfSGRptEventInfo;
   pimsmSGRptNode_t    *pSGRptNode;
   pimsmSGRptIEntry_t  *pSGRptIEntry= L7_NULLPTR;
   L7_uint32            rtrIfNum;
   pimsmTimerData_t    *pTimerData;
   pimsmCB_t           *pimsmCb;
-  L7_int32             handle = (L7_int32)pParam;
+  L7_uint64            handle = PTR_TO_UINT64(pParam);
   pimsmUpStrmSGRptEventInfo_t upStrmSGRptEventInfo;
   L7_BOOL pruneDesired;
   L7_inet_addr_t *pGrpAddr, *pSrcAddr;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
Index: src/application/ip_mcast/vendor/pimsm/pimsmdnstrmstargfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmdnstrmstargfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmdnstrmstargfsm.c	(working copy)
@@ -225,13 +225,13 @@ static L7_RC_t pimsmDnStrmPerIntfStarGEx
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr2, &pStarGNode->pimsmStarGEntry.pimsmStarGGrpAddress);
   pTimerData->rtrIfNum = rtrIfNum;
 
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGIJoinExpiryTimerExpiresHandler,
-                            (void*)pStarGIEntry->pimsmStarGIJoinExpiryTimerHandle,
+                            UINT_TO_PTR(pStarGIEntry->pimsmStarGIJoinExpiryTimerHandle),
                             holdtime,
                             &(pStarGIEntry->pimsmStarGIJoinExpiryTimer),
                             "xGI-JT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_G, PIMSM_TRACE_ERROR,
@@ -294,13 +294,13 @@ static L7_RC_t pimsmDnStrmPerIntfStarGEx
                            &timeLeft) == L7_SUCCESS)
   {
     holdtime = max (timeLeft, holdtime);
   }
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGIJoinExpiryTimerExpiresHandler,
-                            (void*)pStarGIEntry->pimsmStarGIJoinExpiryTimerHandle,
+                            UINT_TO_PTR(pStarGIEntry->pimsmStarGIJoinExpiryTimerHandle),
                             holdtime,
                             &(pStarGIEntry->pimsmStarGIJoinExpiryTimer),
                             "xGI-JT2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_G, PIMSM_TRACE_ERROR,
@@ -362,13 +362,13 @@ static L7_RC_t pimsmDnStrmPerIntfStarGPr
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr2, &pStarGNode->pimsmStarGEntry.pimsmStarGGrpAddress);
   pTimerData->rtrIfNum = rtrIfNum;
 
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGIPrunePendingTimerExpiresHandler,
-                            (void*)pStarGIEntry->pimsmStarGIPrunePendingTimerHandle,
+                            UINT_TO_PTR(pStarGIEntry->pimsmStarGIPrunePendingTimerHandle),
                             timeOut,
                             &(pStarGIEntry->pimsmStarGIPrunePendingTimer),
                             "xGI-PPT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_G, PIMSM_TRACE_ERROR,
@@ -522,13 +522,13 @@ static void pimsmStarGIPrunePendingTimer
   pimsmDnStrmPerIntfStarGEventInfo_t dnStrmPerIntfStarGEventInfo;
   pimsmTimerData_t   *pTimerData;
   pimsmStarGNode_t   *pStarGNode;
   pimsmStarGIEntry_t *pStarGIEntry = L7_NULLPTR;
   L7_uint32           rtrIfNum;
   pimsmCB_t          *pimsmCb;
-  L7_int32            handle = (L7_int32)pParam;
+  L7_uint32           handle = PTR_TO_UINT64(pParam);
   pimsmUpStrmStarGEventInfo_t UpStrmStarGEventInfo;
   L7_BOOL  joinDesired =L7_FALSE;
   L7_BOOL couldAssert;
   pimsmPerIntfStarGAssertEventInfo_t  starGAssertEventInfo;
   L7_inet_addr_t *pGrpAddr;
 
@@ -637,13 +637,13 @@ static void pimsmStarGIJoinExpiryTimerEx
 
   pimsmTimerData_t *pTimerData ;
   pimsmStarGNode_t * pStarGNode;
   pimsmStarGIEntry_t *pimsmStarGIEntry =L7_NULLPTR;
   L7_uint32 rtrIfNum;
   pimsmCB_t * pimsmCb;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint32 handle = PTR_TO_UINT64(pParam);
   pimsmUpStrmStarGEventInfo_t starGUpStrmEvData;
   L7_BOOL  joinDesired =L7_FALSE;
   L7_inet_addr_t *pGrpAddr;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
Index: src/application/ip_mcast/vendor/pimsm/pimsmdnstrmstarstarrpfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmdnstrmstarstarrpfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmdnstrmstarstarrpfsm.c	(working copy)
@@ -231,13 +231,13 @@ static L7_RC_t pimsmDnSmPerIntfStartStar
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr1,
       &pStarStarRpNode->pimsmStarStarRpEntry.pimsmStarStarRpRPAddress);
   pTimerData->rtrIfNum = rtrIfNum;
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarStarRpIJoinExpiryTimerExpiresHandler,
-                            (void*)pStarStarRPIEntry->pimsmStarStarRpIJoinExpiryTimerHandle,
+                            UINT_TO_PTR(pStarStarRPIEntry->pimsmStarStarRpIJoinExpiryTimerHandle),
                             holdtime,
                             &(pStarStarRPIEntry->pimsmStarStarRpIJoinExpiryTimer),
                             "xRI-JT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP,  PIMSM_TRACE_ERROR,
@@ -303,13 +303,13 @@ static L7_RC_t pimsmDnSmPerIntfStartStar
                            &timeLeft) == L7_SUCCESS)
   {
     holdtime = max (timeLeft, holdtime);
   }
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarStarRpIJoinExpiryTimerExpiresHandler,
-                            (void*)pStarStarRPIEntry->pimsmStarStarRpIJoinExpiryTimerHandle,
+                            UINT_TO_PTR(pStarStarRPIEntry->pimsmStarStarRpIJoinExpiryTimerHandle),
                             holdtime,
                             &(pStarStarRPIEntry->pimsmStarStarRpIJoinExpiryTimer),
                             "xRI-JT2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP,  PIMSM_TRACE_ERROR,
@@ -376,13 +376,13 @@ static L7_RC_t pimsmDnSmPerIntfStartStar
 
   PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP,  PIMSM_TRACE_INFO," J/P Override intvl = %d ",
         pimsmJoinPruneOverrideIntervalGet(pimsmCb,rtrIfNum));
 
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarStarRpIPrunePendingTimerExpiresHandler,
-                            (void*)pStarStarRPIEntry->pimsmStarStarRpIPrunePendingTimerHandle,
+                            UINT_TO_PTR(pStarStarRPIEntry->pimsmStarStarRpIPrunePendingTimerHandle),
                             timeOut,
                             &(pStarStarRPIEntry->pimsmStarStarRpIPrunePendingTimer),
                             "xRI-PPT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP,  PIMSM_TRACE_ERROR,
@@ -534,13 +534,13 @@ static void pimsmStarStarRpIPrunePending
   pimsmDnStrmPerIntfStarStarRPEventInfo_t dnStrmPerIntfStarStarRpEventInfo;
   pimsmTimerData_t *pTimerData;
   pimsmStarStarRpNode_t * pStarStarRpNode;
   pimsmStarStarRpIEntry_t *pimsmStarStarRpIEntry = L7_NULLPTR;
   L7_uint32  rtrIfNum;
   pimsmCB_t *pimsmCb;
-  L7_int32   handle = (L7_int32)pParam;
+  L7_uint64  handle = PTR_TO_UINT64(pParam);
   pimsmUpStrmStarStarRPEventInfo_t upStrmStarStarRpEventInfo;
   L7_BOOL joinDesired = L7_FALSE;
   L7_inet_addr_t *pRpAddr;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
@@ -619,13 +619,13 @@ static void pimsmStarStarRpIJoinExpiryTi
   pimsmDnStrmPerIntfStarStarRPEventInfo_t dnStrmPerIntfStarStarRpEventInfo;
   pimsmTimerData_t *pTimerData;
   pimsmStarStarRpNode_t *pStarStarRpNode;
   pimsmStarStarRpIEntry_t *pimsmStarStarRpIEntry = L7_NULLPTR;
   L7_uint32 rtrIfNum;
   pimsmCB_t *pimsmCb;
-  L7_int32   handle = (L7_int32)pParam;
+  L7_uint64  handle = PTR_TO_UINT64(pParam);
   pimsmUpStrmStarStarRPEventInfo_t upStrmStarStarRpEventInfo;
   L7_BOOL joinDesired = L7_FALSE;
   L7_inet_addr_t *pRpAddr;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
Index: src/application/ip_mcast/vendor/pimsm/pimsmintf.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmintf.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmintf.c	(working copy)
@@ -380,13 +380,13 @@ L7_RC_t pimsmIntfDeInit(pimsmCB_t *pimsm
 *
 * @end
 ******************************************************************************/
 static void pimsmIntfHelloTimerExpiresHandler(void *pParam)
 {
   L7_uint32 rtrIfNum;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64  handle = PTR_TO_UINT64(pParam);
   pimsmTimerData_t *pTimerData;
   pimsmCB_t * pimsmCb;
   pimsmInterfaceEntry_t  * pIntfEntry = L7_NULLPTR;
   L7_RC_t rc;
 
   PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_DEBUG,"Enter ");
@@ -440,13 +440,13 @@ static void pimsmIntfHelloTimerExpiresHa
 
   pTimerData = &pIntfEntry->pimsmHelloTimerParams;
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   pTimerData->pimsmCb = pimsmCb;
   pTimerData->rtrIfNum = rtrIfNum;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmIntfHelloTimerExpiresHandler,
-                            (void*)pIntfEntry->pimsmHelloTimerHandle,
+                            UINT_TO_PTR(pIntfEntry->pimsmHelloTimerHandle),
                             pIntfEntry->pimsmInterfaceHelloInterval,
                             &(pIntfEntry->pimsmHelloTimer),
                             "SM-HT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_ERROR, "Inteface pimsmHelloTimer TimerAdd Failed");
@@ -583,13 +583,13 @@ L7_RC_t pimsmIntfUp(pimsmCB_t *pimsmCb,
   PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_DEBUG,"rtrIfNum =%d",rtrIfNum);
   pTimerData = &pIntfEntry->pimsmHelloTimerParams;
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   pTimerData->rtrIfNum = rtrIfNum;
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmIntfHelloTimerExpiresHandler,
-                            (void*)pIntfEntry->pimsmHelloTimerHandle,
+                            UINT_TO_PTR(pIntfEntry->pimsmHelloTimerHandle),
                             helloIntvl,
                             &(pIntfEntry->pimsmHelloTimer),
                             "SM-HT2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_ERROR,
@@ -638,13 +638,13 @@ L7_RC_t pimsmIntfUp(pimsmCB_t *pimsmCb,
 * @end
 ******************************************************************************/
 static L7_RC_t pimsmIntfCleanup(pimsmCB_t *pimsmCb, L7_uint32 rtrIfNum)
 {
   pimsmInterfaceEntry_t *pIntfEntry  = L7_NULLPTR;
   L7_RC_t  rc;
-  L7_uint32 timerHandle;
+  L7_uint64 timerHandle;
 
   PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_DEBUG,"Enter ");
 
   if(pimsmCb == L7_NULLPTR)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_ERROR,
@@ -696,13 +696,13 @@ static L7_RC_t pimsmIntfCleanup(pimsmCB_
   timerHandle = pIntfEntry->pimsmHelloTimerHandle;
   memset(pIntfEntry, 0 , sizeof(pimsmInterfaceEntry_t));
   pIntfEntry->pimsmHelloTimerHandle = timerHandle;
   pIntfEntry->pimsmInterfaceIfIndex = MCAST_MAX_INTERFACES;
 
   handleListNodeDelete(pimsmCb->handleList,
-                         &pIntfEntry->pimsmHelloTimerHandle);
+                       (L7_uint64 *) &pIntfEntry->pimsmHelloTimerHandle);
 
   PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_DEBUG,"Exit ");
   return L7_SUCCESS;
 }
 
 /******************************************************************************
Index: src/application/ip_mcast/vendor/pimsm/pimsmmacros.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmmacros.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmmacros.c	(working copy)
@@ -3661,13 +3661,13 @@ void pimsmRestartKeepaliveTimer(pimsmCB_
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   pTimerData->pimsmCb = pimsmCb;
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
     
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGKeepaliveTimerExpiresHandler,
-                            (void*)pSGNode->pimsmSGEntry.pimsmSGKeepaliveTimerHandle,
+                            UINT_TO_PTR(pSGNode->pimsmSGEntry.pimsmSGKeepaliveTimerHandle),
                             timeout,
                             &(pSGNode->pimsmSGEntry.pimsmSGKeepaliveTimer),
                             "SM-KAT")
                          != L7_SUCCESS)
   {
      PIMSM_TRACE(PIMSM_DEBUG_BIT_MACROS, PIMSM_TRACE_ERROR, 
Index: src/application/ip_mcast/vendor/pimsm/pimsmmain.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmmain.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmmain.c	(working copy)
@@ -341,25 +341,25 @@ MCAST_CB_HNDL_t pimsmCtrlBlockInit(L7_uc
     pimsmCtrlBlockCleanUp(pimsmCb);
     return L7_NULLPTR;
   }
   pimsmCb->pimsmSPTTimerHandle = 
   handleListNodeStore(pimsmCb->handleList,
                       (void*)&pimsmCb->pimsmSPTTimerParam); 
-  PIMSM_TRACE(PIMSM_DEBUG_BIT_MISC,PIMSM_TRACE_DEBUG, "pimsmCb->pimsmSPTTimerHandle= %d",
+  PIMSM_TRACE(PIMSM_DEBUG_BIT_MISC,PIMSM_TRACE_DEBUG, "pimsmCb->pimsmSPTTimerHandle= 0x%llx",
               pimsmCb->pimsmSPTTimerHandle);   
   /*Initialize the timer */
   pimsmCb->pimsmRateCheckInterval = PIMSM_DEFAULT_CHECK_INTERVAL;
   pimsmCb->pimsmDataRateBytes = (L7_PIMSM_DATA_THRESHOLD_RATE * 1000 *
                                   PIMSM_DEFAULT_CHECK_INTERVAL)/10;
   pimsmCb->pimsmRegRateBytes = (L7_PIMSM_REG_THRESHOLD_RATE * 1000 *
                                  PIMSM_DEFAULT_CHECK_INTERVAL)/10;
 
   pimsmCb->pimsmJPBundleTimerHandle= 
   handleListNodeStore(pimsmCb->handleList,
                       (void*)&pimsmCb->pimsmJPBundleTimerParam); 
-  PIMSM_TRACE(PIMSM_DEBUG_BIT_MISC,PIMSM_TRACE_DEBUG, "pimsmCb->pimsmJPBundleTimerHandle= %d",
+  PIMSM_TRACE(PIMSM_DEBUG_BIT_MISC,PIMSM_TRACE_DEBUG, "pimsmCb->pimsmJPBundleTimerHandle= 0x%llx",
               pimsmCb->pimsmJPBundleTimerHandle);   
   if(pimsmRouteChangeBufMemAlloc(pimsmCb) != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_MISC,PIMSM_TRACE_ERROR,"PIMSM: RTO change buffer allocation failed\n");
     pimsmCtrlBlockCleanUp(pimsmCb);
     return L7_NULLPTR;
@@ -538,13 +538,13 @@ L7_RC_t pimsmEventProcess(L7_uchar8 fami
       pMfcEntry = (mfcEntry_t*) pMsg;
       mbuf = (struct rtmbuf *)pMfcEntry->m;
       pData = rtmtod(mbuf, L7_uchar8 *);
       rc = pimsmMfcWholePktProcess(pimsmCb, pData);
       if ((mbuf->rtm_bufhandle) != L7_NULLPTR)
       {
-        SYSAPI_NET_MBUF_FREE((L7_netBufHandle)mbuf->rtm_bufhandle);
+        SYSAPI_NET_MBUF_FREE((L7_netBufHandle)PTR_TO_UINT64(mbuf->rtm_bufhandle));
       }
       rtm_freem(mbuf);
       break;
 
     case MCAST_EVENT_MGMD_GROUP_UPDATE:
       mgmdMrpGrpInfo = (mgmdMrpEventInfo_t *) pMsg;
Index: src/application/ip_mcast/vendor/pimsm/pimsmneighbor.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmneighbor.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmneighbor.c	(working copy)
@@ -172,13 +172,13 @@ L7_RC_t pimsmNeighborDeInit(pimsmCB_t *
   pCurrNbrEntry = (pimsmNeighborEntry_t *)SLLFirstGet(pNbrList);
   while(pCurrNbrEntry != ( pimsmNeighborEntry_t * )L7_NULLPTR)
   {
     pimsmJPWorkingBuffReturn(pimsmCb, pCurrNbrEntry);
     pimsmUtilAppTimerCancel (pimsmCb, &(pCurrNbrEntry->pimsmNeighborExpiryTimer));
     handleListNodeDelete(pimsmCb->handleList,
-                         &pCurrNbrEntry->pimsmNeighborExpiryTimerHandle);
+                         (L7_uint64 *) &pCurrNbrEntry->pimsmNeighborExpiryTimerHandle);
     pCurrNbrEntry = (pimsmNeighborEntry_t *)SLLNextGet(pNbrList,
                         (L7_sll_member_t *)pCurrNbrEntry);
   }
   rc = SLLDestroy(L7_FLEX_PIMSM_MAP_COMPONENT_ID,
                       &(pIntfEntry->pimsmNbrList));
   if(osapiSemaGive(pimsmCb->pimsmNbrLock) != L7_SUCCESS)
@@ -350,13 +350,13 @@ L7_RC_t pimsmNeighborDelete(pimsmCB_t *
   {
     updateDR = L7_TRUE;
   }
 
   pimsmUtilAppTimerCancel (pimsmCb, &(pNbrEntry->pimsmNeighborExpiryTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                       &pNbrEntry->pimsmNeighborExpiryTimerHandle);
+                       (L7_uint64 *) &pNbrEntry->pimsmNeighborExpiryTimerHandle);
   /* Lock the Table */
   if(osapiSemaTake(pimsmCb->pimsmNbrLock, L7_WAIT_FOREVER)
      != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_ERROR, "osapiSemaTake() failed");
     return L7_FAILURE;
@@ -795,13 +795,13 @@ static L7_RC_t pimsmNLTExpiresPostEvent(
 *
 * @end
 ******************************************************************************/
 static void pimsmNeighborTimerExpiresHandler(void *pParam)
 {
   L7_uint32 rtrIfNum;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   pimsmTimerData_t *pTimerData;
   pimsmCB_t * pimsmCb;
   pimsmInterfaceEntry_t * pIntfEntry = L7_NULLPTR;
   pimsmNeighborEntry_t  *pCurrNbrEntry;
   L7_RC_t rc = L7_FAILURE;
   L7_inet_addr_t *pNbrAddr;
@@ -1073,13 +1073,13 @@ L7_RC_t pimsmNeighborCreate(pimsmCB_t *
     memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
     inetCopy(&pTimerData->addr1,
       &pNbrEntry->pimsmNeighborAddrList.pimsmPrimaryAddress);
     pTimerData->rtrIfNum = rtrIfNum;
     pTimerData->pimsmCb = pimsmCb;
     if (pimsmUtilAppTimerSet (pimsmCb, pimsmNeighborTimerExpiresHandler,
-                              (void*)pNbrEntry->pimsmNeighborExpiryTimerHandle,
+                              UINT_TO_PTR(pNbrEntry->pimsmNeighborExpiryTimerHandle),
                               holdtime,
                               &(pNbrEntry->pimsmNeighborExpiryTimer),
                               "SM-NLT")
                            != L7_SUCCESS)
     {
       PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_ERROR, "RegRate TimerAdd Failed");
@@ -1339,13 +1339,13 @@ L7_RC_t pimsmNeighborUpdate(pimsmCB_t *
     inetCopy(&pTimerData->addr1,
       &pNbrEntry->pimsmNeighborAddrList.pimsmPrimaryAddress);
     pTimerData->pimsmCb = pimsmCb;
     pTimerData->rtrIfNum = rtrIfNum;
 
     if (pimsmUtilAppTimerSet (pimsmCb, pimsmNeighborTimerExpiresHandler,
-                              (void*)pNbrEntry->pimsmNeighborExpiryTimerHandle,
+                              UINT_TO_PTR(pNbrEntry->pimsmNeighborExpiryTimerHandle),
                               pHelloParams->holdtime,
                               &(pNbrEntry->pimsmNeighborExpiryTimer),
                               "SM-NLT2")
                            != L7_SUCCESS)
     {
       PIMSM_TRACE(PIMSM_DEBUG_BIT_INTF_NEIGHBOR,  PIMSM_TRACE_ERROR,
Index: src/application/ip_mcast/vendor/pimsm/pimsmnoncandbsrfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmnoncandbsrfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmnoncandbsrfsm.c	(working copy)
@@ -169,13 +169,13 @@ L7_RC_t pimsmPerScopeZoneNonCandBSRExecu
 * @comments
 *
 * @end
 ******************************************************************************/
 void pimsmBsrNonCandidateBootStrapTimerExpiresHandler(void *pParam)
 {
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   pimsmBsrPerScopeZone_t  *bsr_node;
   pimsmPerScopeZoneNonCandBSREventInfo_t       nonCandEventInfo;
 
   bsr_node = (pimsmBsrPerScopeZone_t*)handleListNodeRetrieve(handle);
 
   if(bsr_node == L7_NULLPTR)
@@ -210,13 +210,13 @@ void pimsmBsrNonCandidateBootStrapTimerE
 * @comments
 *
 * @end
 ******************************************************************************/
 void pimsmBsrNonCandidateScopeZoneTimerExpiresHandler(void *pParam)
 {
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   pimsmBsrPerScopeZone_t  *bsr_node;
   pimsmPerScopeZoneNonCandBSREventInfo_t       nonCandEventInfo;
 
   bsr_node = (pimsmBsrPerScopeZone_t *)handleListNodeRetrieve(handle);
 
   if(bsr_node == L7_NULLPTR)
@@ -268,13 +268,13 @@ L7_RC_t pimsmPerScopeZoneNonCandBSRRpSet
                      nonCandBsrEventInfo->pBsrNode,
                      nonCandBsrEventInfo->pimsmPktInfo.pimHeader,
                      nonCandBsrEventInfo->pimsmPktInfo.pimPktLen);
 
   /* set the Bootstrap Timer */
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmBsrNonCandidateBootStrapTimerExpiresHandler,
-                            (void*)nonCandBsrEventInfo->pBsrNode->pimsmBSRTimerHandle,
+                            UINT_TO_PTR(nonCandBsrEventInfo->pBsrNode->pimsmBSRTimerHandle),
                             PIMSM_DEFAULT_BOOTSTRAP_TIMEOUT,
                             &(nonCandBsrEventInfo->pBsrNode->pimsmBSRTimer),
                             "NC-BSR")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_BSR_FSM,  PIMSM_TRACE_ERROR,"bsrCandidateBSRBootstrapTimer Add Failed");
Index: src/application/ip_mcast/vendor/pimsm/pimsmproto.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmproto.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmproto.c	(working copy)
@@ -1499,13 +1499,13 @@ void pimsmJPBundleTimerExpiryHandler(voi
   L7_uint32 rtrIfNum;
   pimsmTimerData_t *pTimerData;
   pimsmCB_t *pimsmCb = L7_NULLPTR;
   pimsmInterfaceEntry_t *   pIntfEntry = L7_NULLPTR;
   pimsmNeighborEntry_t *    pCurrentNbrEntry;
   L7_RC_t rc;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if(L7_NULLPTR == pTimerData)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_JOIN_RX_TX, PIMSM_TRACE_ERROR,"Invalid input parameter");
     return;
@@ -1542,13 +1542,13 @@ void pimsmJPBundleTimerExpiryHandler(voi
          &pCurrentNbrEntry );
     }
 
   }
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmJPBundleTimerExpiryHandler,
-                            (void*)pimsmCb->pimsmJPBundleTimerHandle,
+                            UINT_TO_PTR(pimsmCb->pimsmJPBundleTimerHandle),
                             PIMSM_DEFAULT_JP_BUNDLE_TIME,
                             &(pimsmCb->pimsmJPBundleTimer),
                             "SM-JPB2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_JOIN_RX_TX, PIMSM_TRACE_ERROR, "pimsmJPBundleTimer appTimerAdd Failed");
Index: src/application/ip_mcast/vendor/pimsm/pimsmrp.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmrp.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmrp.c	(working copy)
@@ -173,13 +173,13 @@ L7_RC_t pimsmRpGrpAddrNodeDelete(L7_sll_
     addrListNode->pimsmRpGrpExpiryTimer = L7_NULLPTR;
   }
   /* delete the handle */
   if (addrListNode->pimsmRpGrpExpireTimerHandle != L7_NULL)
   {
    handleListNodeDelete(addrListNode->pimsmCb->handleList,
-                       &addrListNode->pimsmRpGrpExpireTimerHandle);
+                        (L7_uint64 *) &addrListNode->pimsmRpGrpExpireTimerHandle);
    addrListNode->pimsmRpGrpExpireTimerHandle = L7_NULL;
   }
   /* remove it from the buffer pool */
   PIMSM_FREE (addrListNode->pimsmCb->family, (void*) addrListNode);
 
   return L7_SUCCESS;
@@ -1729,13 +1729,13 @@ L7_RC_t pimsmRpCandRpAdvCreate(pimsmCB_t
 *
 * @end
 ******************************************************************************/
 static
 void pimsmRpGrpMappingTimerExpiresHandler(void *pParam)
 {
-  L7_int32                 handle = (L7_int32)pParam;
+  L7_uint64 handle = PTR_TO_UINT64(pParam);
   pimsmAddrList_t         *pAddrListNode = L7_NULLPTR;
   pimsmCandRpConfigInfo_t  rpConfigInfo;
   pimsmRpGrpNode_t  *pRpGrpNode;
 
   pAddrListNode = (pimsmAddrList_t*)handleListNodeRetrieve(handle);
 
@@ -2221,13 +2221,13 @@ void pimsmRprGrpMappingExpireTimerSet(pi
   {
     rc = pimsmRpGrpListGrpNodeFind(pimsmCb, pRpGrpNode, grpAddr,
                                    grpMaskLen,origin, &pAddrGrpNode);
     if (rc == L7_SUCCESS)
     {
       if (pimsmUtilAppTimerSet (pimsmCb, pimsmRpGrpMappingTimerExpiresHandler,
-                                (void*)pAddrGrpNode->pimsmRpGrpExpireTimerHandle,
+                                UINT_TO_PTR(pAddrGrpNode->pimsmRpGrpExpireTimerHandle),
                                 timeout,
                                 &(pAddrGrpNode->pimsmRpGrpExpiryTimer),
                                 "RPG-ET")
                              != L7_SUCCESS)
       {
         PIMSM_TRACE(PIMSM_DEBUG_BIT_RP, PIMSM_TRACE_ERROR," Unable to start pimsmRpGrpExpiryTimer");
@@ -2858,13 +2858,13 @@ void pimsmRpGrpMappingPurge(pimsmCB_t *p
   {
     pAddrListNode = (pimsmAddrList_t *)SLLFirstGet(&(pRpGrpNode->pimsmGrpList));
     while(pAddrListNode != L7_NULLPTR)
     {
       pimsmUtilAppTimerCancel (pimsmCb, &(pAddrListNode->pimsmRpGrpExpiryTimer));
       handleListNodeDelete(pimsmCb->handleList,
-                           &pAddrListNode->pimsmRpGrpExpireTimerHandle);
+                           (L7_uint64 *) &pAddrListNode->pimsmRpGrpExpireTimerHandle);
       pAddrListNodeDelete = pAddrListNode;
       pAddrListNode = (pimsmAddrList_t*)SLLNextGet(&(pRpGrpNode->pimsmGrpList),
                                         (L7_sll_member_t*)pAddrListNode);
       SLLNodeDelete(&(pRpGrpNode->pimsmGrpList),
                     (L7_sll_member_t *) pAddrListNodeDelete);
     }
Index: src/application/ip_mcast/vendor/pimsm/pimsmsgassertfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmsgassertfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmsgassertfsm.c	(working copy)
@@ -358,13 +358,13 @@ static L7_RC_t  pimsmPerIntfSGAssertActi
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
 
   pTimerData->rtrIfNum = rtrIfNum;
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGIAssertTimerExpiresHandler,
-                            (void*)pSGIEntry->pimsmSGIAssertTimerHandle,
+                            UINT_TO_PTR(pSGIEntry->pimsmSGIAssertTimerHandle),
                             PIMSM_DEFAULT_ASSERT_TIME - PIMSM_DEFAULT_ASSERT_OVERRIDE_INTERVAL,
                             &(pSGIEntry->pimsmSGIAssertTimer),
                             "SGI-AT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_ASSERT_FSM, PIMSM_TRACE_ERROR,
@@ -445,13 +445,13 @@ static L7_RC_t  pimsmPerIntfSGAssertActi
   pTimerData->pimsmCb = pimsmCb;
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
   pTimerData->rtrIfNum = rtrIfNum;
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGIAssertTimerExpiresHandler,
-                            (void*)pSGIEntry->pimsmSGIAssertTimerHandle,
+                            UINT_TO_PTR(pSGIEntry->pimsmSGIAssertTimerHandle),
                             PIMSM_DEFAULT_ASSERT_TIME,
                             &(pSGIEntry->pimsmSGIAssertTimer),
                             "SGI-AT2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_ASSERT_FSM, PIMSM_TRACE_ERROR,
@@ -551,13 +551,13 @@ static L7_RC_t  pimsmPerIntfSGAssertActi
   pTimerData->pimsmCb = pimsmCb;
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
   pTimerData->rtrIfNum = rtrIfNum;
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGIAssertTimerExpiresHandler,
-                            (void*)pSGIEntry->pimsmSGIAssertTimerHandle,
+                            UINT_TO_PTR(pSGIEntry->pimsmSGIAssertTimerHandle),
                             PIMSM_DEFAULT_ASSERT_TIME - PIMSM_DEFAULT_ASSERT_OVERRIDE_INTERVAL,
                             &(pSGIEntry->pimsmSGIAssertTimer),
                             "SGI-AT3")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_ASSERT_FSM, PIMSM_TRACE_ERROR,
@@ -752,13 +752,13 @@ static void pimsmSGIAssertTimerExpiresHa
   pimsmPerIntfSGAssertEventInfo_t perIntfSGAssertEventInfo;
   pimsmSGNode_t *pSGNode;
   pimsmSGIEntry_t *pSGIEntry= L7_NULLPTR;
   L7_uint32 rtrIfNum;
   pimsmCB_t * pimsmCb;
   pimsmTimerData_t *pTimerData;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64      handle = PTR_TO_UINT64(pParam);
   L7_inet_addr_t *pGrpAddr, *pSrcAddr;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_ASSERT_FSM, PIMSM_TRACE_NORMAL, "pTimerData == L7_NULLPTR");
Index: src/application/ip_mcast/vendor/pimsm/pimsmsgregisterfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmsgregisterfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmsgregisterfsm.c	(working copy)
@@ -308,13 +308,13 @@ static L7_RC_t   pimsmRegStopTimerSet (p
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGDRRegisterStopTimerExpiresHandler,
-                            (void*)pSGNode->pimsmSGEntry.pimsmSGDRRegisterStopTimerHandle,
+                            UINT_TO_PTR(pSGNode->pimsmSGEntry.pimsmSGDRRegisterStopTimerHandle),
                             regStopTime,
                             &(pSGNode->pimsmSGEntry.pimsmSGDRRegisterStopTimer),
                             "SM-RST")
                          != L7_SUCCESS)
   {
      PIMSM_TRACE(PIMSM_DEBUG_BIT_REG_RX_TX_FSM,  PIMSM_TRACE_ERROR,
@@ -482,13 +482,13 @@ static L7_RC_t pimsmPerSGRegisterNullReg
   pTimerData = &pSGNode->pimsmSGEntry.pimsmSGDRRegisterStopTimerParam;
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGDRRegisterStopTimerExpiresHandler,
-                            (void*)pSGNode->pimsmSGEntry.pimsmSGDRRegisterStopTimerHandle,
+                            UINT_TO_PTR(pSGNode->pimsmSGEntry.pimsmSGDRRegisterStopTimerHandle),
                             regStopTime,
                             &(pSGNode->pimsmSGEntry.pimsmSGDRRegisterStopTimer),
                             "SM-RST2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_REG_RX_TX_FSM,  PIMSM_TRACE_ERROR,
@@ -590,13 +590,13 @@ static L7_RC_t pimsmPerSGRegisterErrorRe
 static void pimsmSGDRRegisterStopTimerExpiresHandler(void *pParam)
 {
   pimsmSGNode_t *pSGNode;
   pimsmPerSGRegisterEventInfo_t perSGRegisterEventInfo;
   pimsmSGEntry_t *pSGEntry= L7_NULLPTR;
   pimsmCB_t   *pimsmCb;
-  L7_int32     handle = (L7_int32)pParam;
+  L7_uint64     handle = PTR_TO_UINT64(pParam);
   pimsmTimerData_t *pTimerData;
   L7_inet_addr_t *pGrpAddr, *pSrcAddr;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
   {
Index: src/application/ip_mcast/vendor/pimsm/pimsmsgrpttree.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmsgrpttree.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmsgrpttree.c	(working copy)
@@ -300,13 +300,13 @@ L7_RC_t pimsmSGRptDelete(pimsmCB_t * pim
                              pSGRptNodeDelete,index);
     }
   }
 
   pimsmUtilAppTimerCancel (pimsmCb, &(pSGRptNodeDelete->pimsmSGRptEntry.pimsmSGRptUpstreamOverrideTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                       &pSGRptNodeDelete->pimsmSGRptEntry.pimsmSGRptUpstreamOverrideTimerHandle);
+                       (L7_uint64 *) &pSGRptNodeDelete->pimsmSGRptEntry.pimsmSGRptUpstreamOverrideTimerHandle);
   pimsmSGRptMFCUpdate(pimsmCb, pSGRptNodeDelete, MFC_DELETE_ENTRY, L7_FALSE);
   pSGRptNode = avlDeleteEntry(&pimsmCb->pimsmSGRptTree,pSGRptNodeDelete);
   if(osapiSemaGive(pimsmCb->pimsmSGRptTree.semId) != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G_RPT, PIMSM_TRACE_ERROR, "Failed to give semaphore"); 
     return L7_FAILURE;
@@ -768,17 +768,17 @@ L7_RC_t pimsmSGRptIEntryDelete(pimsmCB_t
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G_RPT, PIMSM_TRACE_DEBUG,
          " (S,G,Rpt,%d) already deleted ",rtrIfNum);
    return L7_SUCCESS;
   }   
   pimsmUtilAppTimerCancel (pimsmCb, &(pSGRptIEntry->pimsmSGRptIPrunePendingTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                       &pSGRptIEntry->pimsmSGRptIPrunePendingTimerHandle);
+                       (L7_uint64 *) &pSGRptIEntry->pimsmSGRptIPrunePendingTimerHandle);
 
   pimsmUtilAppTimerCancel (pimsmCb, &(pSGRptIEntry->pimsmSGRptIPruneExpiryTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                       &pSGRptIEntry->pimsmSGRptIPruneExpiryTimerHandle);
+                       (L7_uint64 *) &pSGRptIEntry->pimsmSGRptIPruneExpiryTimerHandle);
 
   PIMSM_FREE (pimsmCb->family, (void*) pSGRptIEntry);
   pSGRptNode->pimsmSGRptIEntry[rtrIfNum] = L7_NULLPTR;
   return L7_SUCCESS;
 }
 
@@ -808,13 +808,13 @@ L7_RC_t pimsmSGRptTreePurge(pimsmCB_t *
   while(rc == L7_SUCCESS)
   {
     pimsmSGRptMFCUpdate(pimsmCb, pSGRptNode, MFC_DELETE_ENTRY, L7_FALSE);
     pSGRptEntry = &pSGRptNode->pimsmSGRptEntry;  
     pimsmUtilAppTimerCancel (pimsmCb, &(pSGRptEntry->pimsmSGRptUpstreamOverrideTimer));
     handleListNodeDelete(pimsmCb->handleList,
-                         &pSGRptEntry->pimsmSGRptUpstreamOverrideTimerHandle);
+                         (L7_uint64 *) &pSGRptEntry->pimsmSGRptUpstreamOverrideTimerHandle);
 
     for(rtrIfNum = 0; rtrIfNum < MCAST_MAX_INTERFACES; rtrIfNum++)
     {
       pimsmSGRptIEntryDelete(pimsmCb, pSGRptNode,rtrIfNum);
     }    
    rc = pimsmSGRptNextGet( pimsmCb, pSGRptNode, &pSGRptNode );
Index: src/application/ip_mcast/vendor/pimsm/pimsmsgtree.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmsgtree.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmsgtree.c	(working copy)
@@ -339,17 +339,17 @@ L7_RC_t pimsmSGDelete(pimsmCB_t * pimsmC
                   "Deleting (S,G,%d) entry",index); 
       pimsmSGIEntryDelete(pimsmCb,pSGNodeDelete, index);
     }
   }
 
   handleListNodeDelete(pimsmCb->handleList,
-                       &pSGNodeDelete->pimsmSGEntry.pimsmSGDRRegisterStopTimerHandle);
+                       (L7_uint64 *) &pSGNodeDelete->pimsmSGEntry.pimsmSGDRRegisterStopTimerHandle);
   handleListNodeDelete(pimsmCb->handleList,
-                       &pSGNodeDelete->pimsmSGEntry.pimsmSGKeepaliveTimerHandle);
+                       (L7_uint64 *) &pSGNodeDelete->pimsmSGEntry.pimsmSGKeepaliveTimerHandle);
   handleListNodeDelete(pimsmCb->handleList,
-                       &pSGNodeDelete->pimsmSGEntry.pimsmSGUpstreamJoinTimerHandle);
+                       (L7_uint64 *) &pSGNodeDelete->pimsmSGEntry.pimsmSGUpstreamJoinTimerHandle);
 
   pimsmSGMFCUpdate(pimsmCb, pSGNodeDelete, MFC_DELETE_ENTRY, L7_FALSE);
   pSGNodeDelete->pimsmSGEntry.pimsmSGSPTBit = L7_FALSE;  
   pSGNode = avlDeleteEntry(&pimsmCb->pimsmSGTree, pSGNodeDelete);
   if(osapiSemaGive(pimsmCb->pimsmSGTree.semId) != L7_SUCCESS)
   {
@@ -697,13 +697,13 @@ L7_RC_t pimsmSGNodeCreate(pimsmCB_t * pi
       inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
      /* As per the draft, keepAliveTimer should be started only when
       then data-traffic is startedi, not when (S,G) entry is created */
       if(bStartKAT == L7_TRUE)
       {
         if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGKeepaliveTimerExpiresHandler,
-                                  (void*) pSGNode->pimsmSGEntry.pimsmSGKeepaliveTimerHandle,
+                                  UINT_TO_PTR(pSGNode->pimsmSGEntry.pimsmSGKeepaliveTimerHandle),
                                   PIMSM_DEFAULT_KEEPALIVE_PERIOD,
                                   &(pSGNode->pimsmSGEntry.pimsmSGKeepaliveTimer),
                                   "SM-KAT2")
                                != L7_SUCCESS)
         {
           PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G, PIMSM_TRACE_ERROR, 
@@ -888,17 +888,17 @@ L7_RC_t pimsmSGIEntryDelete(pimsmCB_t *p
   }
 
   pimsmUtilAppTimerCancel (pimsmCb, &(pSGIEntry->pimsmSGIPrunePendingTimer));
   pimsmUtilAppTimerCancel (pimsmCb, &(pSGIEntry->pimsmSGIJoinExpiryTimer));
   pimsmUtilAppTimerCancel (pimsmCb, &(pSGIEntry->pimsmSGIAssertTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                       &pSGIEntry->pimsmSGIPrunePendingTimerHandle);     
+                       (L7_uint64 *) &pSGIEntry->pimsmSGIPrunePendingTimerHandle);     
   handleListNodeDelete(pimsmCb->handleList,
-                       &pSGIEntry->pimsmSGIJoinExpiryTimerHandle);     
+                       (L7_uint64 *) &pSGIEntry->pimsmSGIJoinExpiryTimerHandle);     
   handleListNodeDelete(pimsmCb->handleList,
-                       &pSGIEntry->pimsmSGIAssertTimerHandle);  
+                       (L7_uint64 *) &pSGIEntry->pimsmSGIAssertTimerHandle);  
   PIMSM_FREE (pimsmCb->family, (void*) pSGIEntry);
 
   pSGNode->pimsmSGIEntry[rtrIfNum] = L7_NULLPTR;
   return L7_SUCCESS;
 }
 /*********************************************************************
@@ -930,17 +930,17 @@ L7_RC_t pimsmSGTreePurge(pimsmCB_t * pim
     pSGEntry = &pSGNode->pimsmSGEntry;
 
     pimsmUtilAppTimerCancel (pimsmCb, &(pSGEntry->pimsmSGKeepaliveTimer));
     pimsmUtilAppTimerCancel (pimsmCb, &(pSGEntry->pimsmSGDRRegisterStopTimer));
     pimsmUtilAppTimerCancel (pimsmCb, &(pSGEntry->pimsmSGUpstreamJoinTimer));
     handleListNodeDelete(pimsmCb->handleList,
-                         &pSGEntry->pimsmSGDRRegisterStopTimerHandle);
+                         (L7_uint64 *) &pSGEntry->pimsmSGDRRegisterStopTimerHandle);
     handleListNodeDelete(pimsmCb->handleList,
-                         &pSGEntry->pimsmSGKeepaliveTimerHandle);
+                         (L7_uint64 *) &pSGEntry->pimsmSGKeepaliveTimerHandle);
     handleListNodeDelete(pimsmCb->handleList,
-                         &pSGEntry->pimsmSGUpstreamJoinTimerHandle);    
+                         (L7_uint64 *) &pSGEntry->pimsmSGUpstreamJoinTimerHandle);    
 
     for(rtrIfNum = 0; rtrIfNum < MCAST_MAX_INTERFACES; rtrIfNum++)
     {
       pimsmSGIEntryDelete(pimsmCb, pSGNode, rtrIfNum);
     }
     rc = pimsmSGNextGet( pimsmCb, pSGNode, &pSGNode );
Index: src/application/ip_mcast/vendor/pimsm/pimsmstargassertfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmstargassertfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmstargassertfsm.c	(working copy)
@@ -347,13 +347,13 @@ static L7_RC_t  pimsmPerIntfStarGAssertA
   pTimerData = &pStarGIEntry->pimsmStarGIAssertTimerParam;
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr2, &pStarGNode->pimsmStarGEntry.pimsmStarGGrpAddress);
   pTimerData->rtrIfNum = rtrIfNum;
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGIAssertTimerExpiresHandler,
-                            (void*)pStarGIEntry->pimsmStarGIAssertTimerHandle,
+                            UINT_TO_PTR(pStarGIEntry->pimsmStarGIAssertTimerHandle),
                             PIMSM_DEFAULT_ASSERT_TIME - PIMSM_DEFAULT_ASSERT_OVERRIDE_INTERVAL,
                             &(pStarGIEntry->pimsmStarGIAssertTimer),
                             "xGI-AT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_ASSERT_FSM, PIMSM_TRACE_ERROR,
@@ -428,13 +428,13 @@ static L7_RC_t  pimsmPerIntfStarGAssertA
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr2, &pStarGNode->pimsmStarGEntry.pimsmStarGGrpAddress);
   pTimerData->rtrIfNum = rtrIfNum;
   pTimerData->pimsmCb = pimsmCb;
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGIAssertTimerExpiresHandler,
-                            (void*)pStarGIEntry->pimsmStarGIAssertTimerHandle,
+                            UINT_TO_PTR(pStarGIEntry->pimsmStarGIAssertTimerHandle),
                             PIMSM_DEFAULT_ASSERT_TIME,
                             &(pStarGIEntry->pimsmStarGIAssertTimer),
                             "xGI-AT2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_ASSERT_FSM, PIMSM_TRACE_ERROR,
@@ -506,13 +506,13 @@ static L7_RC_t  pimsmPerIntfStarGAssertA
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr2, &pStarGNode->pimsmStarGEntry.pimsmStarGGrpAddress);
   pTimerData->rtrIfNum = rtrIfNum;
   pTimerData->pimsmCb = pimsmCb;
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGIAssertTimerExpiresHandler,
-                            (void*)pStarGIEntry->pimsmStarGIAssertTimerHandle,
+                            UINT_TO_PTR(pStarGIEntry->pimsmStarGIAssertTimerHandle),
                             (PIMSM_DEFAULT_ASSERT_TIME - PIMSM_DEFAULT_ASSERT_OVERRIDE_INTERVAL),
                             &(pStarGIEntry->pimsmStarGIAssertTimer),
                             "xGI-AT3")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_ASSERT_FSM, PIMSM_TRACE_ERROR,
@@ -663,13 +663,13 @@ static void  pimsmStarGIAssertTimerExpir
   pimsmPerIntfStarGAssertEventInfo_t perIntfStarGAssertEventInfo;
   pimsmStarGNode_t *pStarGNode;
   pimsmStarGIEntry_t *pStarGIEntry = L7_NULLPTR;
   L7_uint32 rtrIfNum;
   pimsmCB_t  * pimsmCb;
   pimsmTimerData_t *pTimerData;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64    handle = PTR_TO_UINT64(pParam);
   L7_inet_addr_t *pGrpAddr;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_ASSERT_FSM, PIMSM_TRACE_NORMAL, "pTimerData == L7_NULLPTR");
Index: src/application/ip_mcast/vendor/pimsm/pimsmstargtree.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmstargtree.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmstargtree.c	(working copy)
@@ -278,13 +278,13 @@ L7_RC_t pimsmStarGDelete(pimsmCB_t * pim
     }
     return L7_SUCCESS;
   }
 
   pimsmUtilAppTimerCancel (pimsmCb, &(pStarGNode->pimsmStarGEntry.pimsmStarGUpstreamJoinTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                       &pStarGNode->pimsmStarGEntry.pimsmStarGUpstreamJoinTimerHandle);
+                       (L7_uint64 *) &pStarGNode->pimsmStarGEntry.pimsmStarGUpstreamJoinTimerHandle);
 
   for(index = 0; index < MCAST_MAX_INTERFACES; index++)
   {
     if(pStarGNode->pimsmStarGIEntry[index] != L7_NULLPTR)
     {
       pimsmStarGIEntryDelete(pimsmCb, pStarGNode,index);
@@ -798,19 +798,19 @@ L7_RC_t pimsmStarGIEntryDelete(pimsmCB_t
             " (*,G,%d) already deleted ",rtrIfNum);
    return L7_SUCCESS;
   }
 
   pimsmUtilAppTimerCancel (pimsmCb, &(pStarGIEntry->pimsmStarGIPrunePendingTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                         &pStarGIEntry->pimsmStarGIPrunePendingTimerHandle);     
+                       (L7_uint64 *) &pStarGIEntry->pimsmStarGIPrunePendingTimerHandle);     
   pimsmUtilAppTimerCancel (pimsmCb, &(pStarGIEntry->pimsmStarGIJoinExpiryTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                         &pStarGIEntry->pimsmStarGIJoinExpiryTimerHandle);
+                       (L7_uint64 *) &pStarGIEntry->pimsmStarGIJoinExpiryTimerHandle);
   pimsmUtilAppTimerCancel (pimsmCb, &(pStarGIEntry->pimsmStarGIAssertTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                         &pStarGIEntry->pimsmStarGIAssertTimerHandle);
+                       (L7_uint64 *) &pStarGIEntry->pimsmStarGIAssertTimerHandle);
 
   PIMSM_FREE (pimsmCb->family, (void*) pStarGIEntry);
 
   pStarGNode->pimsmStarGIEntry[rtrIfNum] = L7_NULLPTR;
   return L7_SUCCESS;
 }
@@ -847,13 +847,13 @@ L7_RC_t pimsmStarGTreePurge(pimsmCB_t *
            "Failed to delete (*,G) from MFC");
     }
     pStarGEntry = &pStarGNode->pimsmStarGEntry;
 
     pimsmUtilAppTimerCancel (pimsmCb, &(pStarGEntry->pimsmStarGUpstreamJoinTimer));
     handleListNodeDelete(pimsmCb->handleList,
-                         &pStarGEntry->pimsmStarGUpstreamJoinTimerHandle);
+                         (L7_uint64 *) &pStarGEntry->pimsmStarGUpstreamJoinTimerHandle);
 
     for(rtrIfNum = 0; rtrIfNum < MCAST_MAX_INTERFACES; rtrIfNum++)
     {
       pimsmStarGIEntryDelete(pimsmCb, pStarGNode, rtrIfNum);
       pStarGNode->pimsmStarGIEntry[rtrIfNum] = L7_NULLPTR;
     }  
Index: src/application/ip_mcast/vendor/pimsm/pimsmstarstarrptree.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmstarstarrptree.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmstarstarrptree.c	(working copy)
@@ -264,13 +264,13 @@ L7_RC_t pimsmStarStarRpDelete(pimsmCB_t
   }
 
   PIMSM_TRACE_ADDR(PIMSM_DEBUG_BIT_STAR_STAR_RP, PIMSM_TRACE_ERROR, "Addr to delete is :",
                &pStarStarRpNode->pimsmStarStarRpEntry.pimsmStarStarRpRPAddress);   
   pimsmUtilAppTimerCancel (pimsmCb, &(pStarStarRpNode->pimsmStarStarRpEntry.pimsmStarStarRpUpstreamJoinTimer));
   handleListNodeDelete(pimsmCb->handleList,
-  &pStarStarRpNode->pimsmStarStarRpEntry.pimsmStarStarRpUpstreamJoinTimerHandle);
+                       (L7_uint64 *) &pStarStarRpNode->pimsmStarStarRpEntry.pimsmStarStarRpUpstreamJoinTimerHandle);
 
   for(rtrIfNum = 0; rtrIfNum < MCAST_MAX_INTERFACES; rtrIfNum++)
   {
     pimsmStarStarRpIEntryDelete(pimsmCb, pStarStarRpNode, rtrIfNum);
   }
 
@@ -763,15 +763,15 @@ L7_RC_t pimsmStarStarRpIEntryDelete(pims
    return L7_SUCCESS;
   }     
 
   pimsmUtilAppTimerCancel (pimsmCb, &(pStarStarRpIEntry->pimsmStarStarRpIPrunePendingTimer));
   pimsmUtilAppTimerCancel (pimsmCb, &(pStarStarRpIEntry->pimsmStarStarRpIJoinExpiryTimer));
   handleListNodeDelete(pimsmCb->handleList,
-                       &pStarStarRpIEntry->pimsmStarStarRpIPrunePendingTimerHandle);     
+                       (L7_uint64 *) &pStarStarRpIEntry->pimsmStarStarRpIPrunePendingTimerHandle);     
   handleListNodeDelete(pimsmCb->handleList,
-                       &pStarStarRpIEntry->pimsmStarStarRpIJoinExpiryTimerHandle);     
+                       (L7_uint64 *) &pStarStarRpIEntry->pimsmStarStarRpIJoinExpiryTimerHandle);     
 
   PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP, PIMSM_TRACE_DEBUG,"Address of pointer to be freed is %p\r\n",
               pStarStarRpIEntry);
   PIMSM_FREE (pimsmCb->family, (void*) pStarStarRpIEntry);
 
   pStarStarRpNode->pimsmStarStarRpIEntry[rtrIfNum] = L7_NULLPTR;
Index: src/application/ip_mcast/vendor/pimsm/pimsmtimer.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmtimer.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmtimer.c	(working copy)
@@ -84,16 +84,16 @@ void pimsmSPTTimerExpiresHandler(void *p
   pimsmStarGNode_t  *pStarGNode;
   L7_RC_t rc;
   pimsmCache_t  kernelRouteData, *kernelCacheNode;
   L7_inet_addr_t   *pSrcAddr;
   L7_inet_addr_t   *pGrpAddr;
   pimsmTimerData_t *pTimerData;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64         handle = PTR_TO_UINT64(pParam);
   pimsmCB_t *pimsmCb = L7_NULLPTR;
 
-  PIMSM_TRACE(PIMSM_DEBUG_BIT_MISC,PIMSM_TRACE_DEBUG, "handle = %d",
+  PIMSM_TRACE(PIMSM_DEBUG_BIT_MISC,PIMSM_TRACE_DEBUG, "handle = %llu",
               handle);
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if(L7_NULLPTR == pTimerData)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_MISC,PIMSM_TRACE_ERROR,"Invalid input parameter");
@@ -135,13 +135,13 @@ void pimsmSPTTimerExpiresHandler(void *p
                                    kernelCacheNode, &kernelCacheNode);
     }
      rc = pimsmStarGNextGet(pimsmCb, pStarGNode, &pStarGNode);
   }
 
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSPTTimerExpiresHandler,
-                            (void*)pimsmCb->pimsmSPTTimerHandle,
+                            UINT_TO_PTR(pimsmCb->pimsmSPTTimerHandle),
                             PIMSM_DEFAULT_CHECK_INTERVAL,
                             &(pimsmCb->pimsmSPTTimer),
                             "SM-SPT2")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_MISC,PIMSM_TRACE_ERROR, "pimsmSPTTimer appTimerAdd Failed");
Index: src/application/ip_mcast/vendor/pimsm/pimsmupstrmsgfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmupstrmsgfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmupstrmsgfsm.c	(working copy)
@@ -273,13 +273,13 @@ static L7_RC_t  pimsmUpStrmSGJoinSend(pi
   pTimerData = &pSGEntry->pimsmSGUpstreamJoinTimerParam ;
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGUpstreamJoinTimerExpiresHandler,
-                            (void*)pSGEntry->pimsmSGUpstreamJoinTimerHandle,
+                            UINT_TO_PTR(pSGEntry->pimsmSGUpstreamJoinTimerHandle),
                             jpInterval,
                             &(pSGEntry->pimsmSGUpstreamJoinTimer),
                             "SG-JT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G,PIMSM_TRACE_ERROR, "Failed to add (S,G) upstrm join timer");
@@ -433,13 +433,13 @@ static L7_RC_t  pimsmUpStrmSGJoinTimerIn
     pTimerData = &pSGEntry->pimsmSGUpstreamJoinTimerParam;
     memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
     inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
     inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
     pTimerData->pimsmCb = pimsmCb;
     if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGUpstreamJoinTimerExpiresHandler,
-                              (void*)pSGEntry->pimsmSGUpstreamJoinTimerHandle,
+                              UINT_TO_PTR(pSGEntry->pimsmSGUpstreamJoinTimerHandle),
                               joinSuppress,
                               &(pSGEntry->pimsmSGUpstreamJoinTimer),
                               "SG-JT2")
                            != L7_SUCCESS)
     {
       PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G,PIMSM_TRACE_ERROR, "Failed to update (S,G) upstrm join timer");
@@ -496,13 +496,13 @@ static L7_RC_t  pimsmUpStrmSGJoinTimerDe
     pTimerData = &pSGEntry->pimsmSGUpstreamJoinTimerParam;
     memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
     inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
     inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
     pTimerData->pimsmCb = pimsmCb;
     if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGUpstreamJoinTimerExpiresHandler,
-                              (void*)pSGEntry->pimsmSGUpstreamJoinTimerHandle,
+                              UINT_TO_PTR(pSGEntry->pimsmSGUpstreamJoinTimerHandle),
                               joinPruneOverrideInterval,
                               &(pSGEntry->pimsmSGUpstreamJoinTimer),
                               "SG-JT3")
                            != L7_SUCCESS)
     {
       PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G,PIMSM_TRACE_ERROR, "Failed to update (S,G) upstrm join timer");
@@ -638,13 +638,13 @@ static L7_RC_t  pimsmUpStrmSGJoinPruneSe
   pTimerData = &pSGEntry->pimsmSGUpstreamJoinTimerParam;
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr1, &pSGNode->pimsmSGEntry.pimsmSGSrcAddress);
   inetCopy(&pTimerData->addr2, &pSGNode->pimsmSGEntry.pimsmSGGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGUpstreamJoinTimerExpiresHandler,
-                            (void*)pSGEntry->pimsmSGUpstreamJoinTimerHandle,
+                            UINT_TO_PTR(pSGEntry->pimsmSGUpstreamJoinTimerHandle),
                             jpInterval,
                             &(pSGEntry->pimsmSGUpstreamJoinTimer),
                             "SG-JT4")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G,PIMSM_TRACE_ERROR, "Failed to add (S,G) upstrm join timer");
@@ -689,14 +689,14 @@ static L7_RC_t pimsmUpStrmSGErrorReturn(
 * @end
 ******************************************************************************/
 static void pimsmSGUpstreamJoinTimerExpiresHandler(void *pParam)
 {
   pimsmUpStrmSGEventInfo_t upStrmSGEventInfo;
   pimsmSGNode_t *pSGNode;
-  pimsmCB_t   * pimsmCb;
-  L7_int32      handle = (L7_int32)pParam;
+  pimsmCB_t     *pimsmCb;
+  L7_uint64      handle = PTR_TO_UINT64(pParam);
   L7_inet_addr_t *pGrpAddr, *pSrcAddr;
   pimsmTimerData_t *pTimerData;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
   {
@@ -752,15 +752,15 @@ void pimsmSGKeepaliveTimerExpiresHandler
   pimsmSGNode_t *pSGNode;
   L7_BOOL        rc;
   L7_RC_t        rc2;
   pimsmPerSGRegisterEventInfo_t perSGRegisterEventInfo;
   pimsmUpStrmSGEventInfo_t upStrmSGEventInfo;
   L7_BOOL joinDesired;
-  L7_int32      handle = (L7_int32)pParam;
+  L7_uint64        handle = PTR_TO_UINT64(pParam);
   pimsmTimerData_t *pTimerData ;
-  pimsmSGEntry_t  *pSGEntry;
+  pimsmSGEntry_t   *pSGEntry;
   pimsmCB_t * pimsmCb;
   L7_inet_addr_t  rpAddr;
   mfcEntry_t mfcEntry;
   L7_inet_addr_t *pGrpAddr, *pSrcAddr;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
@@ -798,13 +798,13 @@ void pimsmSGKeepaliveTimerExpiresHandler
 
   if (mfcIsEntryInUse(&mfcEntry) == L7_TRUE)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G, PIMSM_TRACE_INFO, "MFC Entry is active" );
 
     if (pimsmUtilAppTimerSet (pimsmCb, pimsmSGKeepaliveTimerExpiresHandler,
-                              (void*) pSGNode->pimsmSGEntry.pimsmSGKeepaliveTimerHandle,
+                              UINT_TO_PTR(pSGNode->pimsmSGEntry.pimsmSGKeepaliveTimerHandle),
                               PIMSM_DEFAULT_KEEPALIVE_PERIOD,
                               &(pSGNode->pimsmSGEntry.pimsmSGKeepaliveTimer),
                               "SM-KAT3")
                            != L7_SUCCESS)
     {
       PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G,PIMSM_TRACE_ERROR,"Failed to add (S,G)KeepaliveTimer ");
Index: src/application/ip_mcast/vendor/pimsm/pimsmupstrmsgrptfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmupstrmsgrptfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmupstrmsgrptfsm.c	(working copy)
@@ -499,13 +499,13 @@ static L7_RC_t  pimsmUpStrmSGRptOverride
   inetCopy(&pTimerData->addr1,
         &pSGRptNode->pimsmSGRptEntry.pimsmSGRptSrcAddress);
   inetCopy(&pTimerData->addr2,
         &pSGRptNode->pimsmSGRptEntry.pimsmSGRptGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmUpStrmSGRptOverrideTimerExpiresHandler,
-                            (void*)pSGRptEntry->pimsmSGRptUpstreamOverrideTimerHandle,
+                            UINT_TO_PTR(pSGRptEntry->pimsmSGRptUpstreamOverrideTimerHandle),
                             timeout,
                             &(pSGRptEntry->pimsmSGRptUpstreamOverrideTimer),
                             "SGr-OT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G_RPT,PIMSM_TRACE_ERROR, "Failed to add (S,G,Rpt) upstrm Override timer");
@@ -572,16 +572,16 @@ static L7_RC_t pimsmUpStrmSGRptErrorRetu
 * @end
 ******************************************************************************/
 static void pimsmUpStrmSGRptOverrideTimerExpiresHandler(void *pParam)
 {
   pimsmUpStrmSGRptEventInfo_t upStrmSGRptEventInfo;
   pimsmSGRptNode_t *pSGRptNode;
-  pimsmCB_t * pimsmCb;
-  L7_int32    handle = (L7_int32)pParam;
+  pimsmCB_t        *pimsmCb;
+  L7_uint64        handle = PTR_TO_UINT64(pParam);
   pimsmTimerData_t *pTimerData;
-  L7_inet_addr_t *pGrpAddr, *pSrcAddr;
+  L7_inet_addr_t   *pGrpAddr, *pSrcAddr;
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_S_G_RPT,PIMSM_TRACE_NORMAL, "pTimerData == L7_NULLPTR");
     return ;
   }
Index: src/application/ip_mcast/vendor/pimsm/pimsmupstrmstargfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmupstrmstargfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmupstrmstargfsm.c	(working copy)
@@ -261,13 +261,13 @@ static L7_RC_t  pimsmUpStrmStarGJoinSend
   /*Set Join Timer to t_periodic;*/
   pTimerData = &pStarGEntry->pimsmStarGUpstreamJoinTimerParam;
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr2, &pStarGNode->pimsmStarGEntry.pimsmStarGGrpAddress);
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGUpstreamJoinTimerExpiresHandler,
-                            (void*)pStarGEntry->pimsmStarGUpstreamJoinTimerHandle,
+                            UINT_TO_PTR(pStarGEntry->pimsmStarGUpstreamJoinTimerHandle),
                             jpInterval,
                             &(pStarGEntry->pimsmStarGUpstreamJoinTimer),
                             "xG-JT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_G, PIMSM_TRACE_ERROR, "Failed to add (*,G) upstrm join timer");
@@ -403,13 +403,13 @@ static L7_RC_t  pimsmUpStrmStarGJoinTime
     pTimerData = &pStarGEntry->pimsmStarGUpstreamJoinTimerParam;
     memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
     inetCopy(&pTimerData->addr2, &pStarGNode->pimsmStarGEntry.pimsmStarGGrpAddress);
 
     pTimerData->pimsmCb = pimsmCb;
     if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGUpstreamJoinTimerExpiresHandler,
-                              (void*)pStarGEntry->pimsmStarGUpstreamJoinTimerHandle,
+                              UINT_TO_PTR(pStarGEntry->pimsmStarGUpstreamJoinTimerHandle),
                               joinSuppress,
                               &(pStarGEntry->pimsmStarGUpstreamJoinTimer),
                               "xG-JT2")
                            != L7_SUCCESS)
     {
       PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_G, PIMSM_TRACE_ERROR, "Failed to update (*,G) upstrm join timer");
@@ -462,13 +462,13 @@ static L7_RC_t  pimsmUpStrmStarGJoinTime
     pTimerData = &pStarGEntry->pimsmStarGUpstreamJoinTimerParam;
     memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
     inetCopy(&pTimerData->addr2, &pStarGNode->pimsmStarGEntry.pimsmStarGGrpAddress);
     pTimerData->pimsmCb = pimsmCb;
 
     if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGUpstreamJoinTimerExpiresHandler,
-                              (void*)pStarGEntry->pimsmStarGUpstreamJoinTimerHandle,
+                              UINT_TO_PTR(pStarGEntry->pimsmStarGUpstreamJoinTimerHandle),
                               jpOverrideInterval,
                               &(pStarGEntry->pimsmStarGUpstreamJoinTimer),
                               "xG-JT3")
                            != L7_SUCCESS)
     {
       PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_G, PIMSM_TRACE_ERROR, "Failed to update (*,G) upstrm join timer");
@@ -605,13 +605,13 @@ static L7_RC_t  pimsmUpStrmStarGJoinPrun
   pTimerData = &pStarGEntry->pimsmStarGUpstreamJoinTimerParam;
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr2, &pStarGNode->pimsmStarGEntry.pimsmStarGGrpAddress);
 
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarGUpstreamJoinTimerExpiresHandler,
-                            (void*)pStarGEntry->pimsmStarGUpstreamJoinTimerHandle,
+                            UINT_TO_PTR(pStarGEntry->pimsmStarGUpstreamJoinTimerHandle),
                             jpInterval,
                             &(pStarGEntry->pimsmStarGUpstreamJoinTimer),
                             "xG-JT4")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_G, PIMSM_TRACE_ERROR, "Failed to add (*,G) upstrm join timer");
@@ -656,15 +656,15 @@ static L7_RC_t pimsmUpStrmStarGErrorRetu
 ******************************************************************************/
 static void pimsmStarGUpstreamJoinTimerExpiresHandler(void *pParam)
 {
   pimsmUpStrmStarGEventInfo_t upStrmStarGEventInfo;
   pimsmStarGNode_t *pStarGNode;
   pimsmCB_t * pimsmCb;
-  L7_inet_addr_t *pGrpAddr;
-  L7_int32      handle = (L7_int32)pParam;
-  pimsmTimerData_t *pTimerData;
+  L7_inet_addr_t    *pGrpAddr;
+  L7_uint64         handle = PTR_TO_UINT64(pParam);
+  pimsmTimerData_t  *pTimerData;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_G, PIMSM_TRACE_NORMAL, "pTimerData == L7_NULLPTR");
     return ;
Index: src/application/ip_mcast/vendor/pimsm/pimsmupstrmstarstarrpfsm.c
===================================================================
--- src/application/ip_mcast/vendor/pimsm/pimsmupstrmstarstarrpfsm.c	(revision 7768)
+++ src/application/ip_mcast/vendor/pimsm/pimsmupstrmstarstarrpfsm.c	(working copy)
@@ -266,13 +266,13 @@ static L7_RC_t  pimsmUpStrmPerIntfStarSt
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr1,
     &pStarStarRpNode->pimsmStarStarRpEntry.pimsmStarStarRpRPAddress);
 
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarStarRpUpstreamJoinTimerExpiresHandler,
-                            (void*)pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimerHandle,
+                            UINT_TO_PTR(pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimerHandle),
                             jpInterval,
                             &(pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimer),
                             "xR-JT")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP,  PIMSM_TRACE_ERROR, "Failed to add (*,*,Rp) upstrm join timer");
@@ -404,13 +404,13 @@ static L7_RC_t pimsmUpStrmPerIntfStarSta
     memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
     inetCopy(&pTimerData->addr1,
       &pStarStarRpNode->pimsmStarStarRpEntry.pimsmStarStarRpRPAddress);
 
     pTimerData->pimsmCb = pimsmCb;
     if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarStarRpUpstreamJoinTimerExpiresHandler,
-                              (void*)pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimerHandle,
+                              UINT_TO_PTR(pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimerHandle),
                               joinSuppress,
                               &(pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimer),
                               "xR-JT2")
                            != L7_SUCCESS)
     {
       PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP,  PIMSM_TRACE_ERROR, "Failed to update (*,*,Rp) upstrm join timer");
@@ -468,13 +468,13 @@ static L7_RC_t  pimsmUpStrmPerIntfStarSt
     memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
     inetCopy(&pTimerData->addr1,
       &pStarStarRpNode->pimsmStarStarRpEntry.pimsmStarStarRpRPAddress);
     pTimerData->pimsmCb = pimsmCb;
 
     if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarStarRpUpstreamJoinTimerExpiresHandler,
-                              (void*)pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimerHandle,
+                              UINT_TO_PTR(pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimerHandle),
                               jpOverrideInterval,
                               &(pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimer),
                               "xR-JT3")
                            != L7_SUCCESS)
     {
       PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP,  PIMSM_TRACE_ERROR, "Failed to update (*,*,Rp) upstrm join timer");
@@ -603,13 +603,13 @@ static L7_RC_t  pimsmUpStrmPerIntfStarSt
   memset(pTimerData, 0 , sizeof(pimsmTimerData_t));
   inetCopy(&pTimerData->addr1,
     &pStarStarRpNode->pimsmStarStarRpEntry.pimsmStarStarRpRPAddress);
 
   pTimerData->pimsmCb = pimsmCb;
   if (pimsmUtilAppTimerSet (pimsmCb, pimsmStarStarRpUpstreamJoinTimerExpiresHandler,
-                            (void*)pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimerHandle,
+                            UINT_TO_PTR(pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimerHandle),
                             jpInterval,
                             &(pStarStarRpEntry->pimsmStarStarRpUpstreamJoinTimer),
                             "xR-JT4")
                          != L7_SUCCESS)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP,  PIMSM_TRACE_ERROR, "Failed to add (*,*,Rp) upstrm join timer");;
@@ -656,14 +656,14 @@ static L7_RC_t pimsmUpStrmPerIntfStarSta
 ******************************************************************************/
 static void pimsmStarStarRpUpstreamJoinTimerExpiresHandler(void *pParam)
 {
   pimsmUpStrmStarStarRPEventInfo_t pUpStrmStarStarRpEventInfo;
   pimsmStarStarRpNode_t *pStarStarRpNode;
   pimsmTimerData_t *pTimerData;
-  pimsmCB_t  * pimsmCb;
-  L7_int32      handle = (L7_int32)pParam;
+  pimsmCB_t      *pimsmCb;
+  L7_uint64      handle = PTR_TO_UINT64(pParam);
   L7_inet_addr_t *pRpAddr;
 
   pTimerData = (pimsmTimerData_t*)handleListNodeRetrieve(handle);
   if (pTimerData  == L7_NULLPTR)
   {
     PIMSM_TRACE(PIMSM_DEBUG_BIT_STAR_STAR_RP,  PIMSM_TRACE_NORMAL,
