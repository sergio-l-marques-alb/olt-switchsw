######################################################################
##
## Module: build/make.cfg
##
## Function:  
##      This file, make.cfg, defines the make rules and variables 
##      used to build LVL7 software components from source code.
##      The file is included by all component make files.
##
#######################################################################

#######################################################################
# Build sources: the root directory for the source tree,
#                directories for system-wide include-files,
#                directories for build objects (e.g., *int.o files),
#                major interface library files,
#                system shared library files
#
# Note that the label, FP_BASE, is NOT DEFINED.  You MUST
# define FP_BASE in your environment before executing your make.
 
# Directory containing project include files: header files used by
# multiple components, export files,
#

COMPONENT_INCLDIR = -I$(FP_BASE)/bsp/cpu/common/include \
                    -I$(FP_BASE)/bsp/platform/$(L7_COMPANY)/common/include \
                    -I$(FP_BASE)/bsp/platform/$(L7_COMPANY)/$(L7_CUSTOMER)/$(L7_PLATFORM)/include \
                    -I$(FP_BASE)/bsp/cpu/$(L7_CPU)/linux/customer/$(L7_CUSTOMER)/$(L7_PROJECT)/include \
                    -I$(BUILDIR_LOCAL)/usr/local/include \
                    -I$(BUILDIR)/usr/local/include 

# Directory containing build libraries. Object files made by other 
# components which you link to at build time are archived here.
# E.g., *int.o files for interfaces implemented through function calls.
LIBDIR =-L$(FP_BASE)/bsp/$(L7_CUSTOMER)/$(L7_PLATFORM)/$(L7_TARGETOS)/ipl

# PTin added: libraries directories
LIBDIR += -L$(CCVIEWS_HOME)/$(OUTPATH)/libs-ptin/mgmd \
          -L$(BUILDIR_LOCAL)/usr/local/lib \
          -L$(BUILDIR)/usr/local/lib
# Operating System Version.
#
L7_OS_VERSION=-D_L7_OS_LINUX_
export L7_OS_VERSION

# In order to compile SNMP we need to pass defines in quotes.
#
QUOTE_OPEN=\"
QUOTE_CLOSE=\"
export QUOTE_OPEN QUOTE_CLOSE

# Define gcc flags for compiling any code intended to run on a
# host (not target) platform, such as image construction utilities, etc.
#
GCCFLAGS := -m32
export GCCFLAGS

include $(FP_ROOT)/bsp/cpu/$(L7_CPU)/linux/build/$(L7_CPU).cfg

#######################################################################
## Commonly used Libraries
#######################################################################
#
# OS libraries
#
#######################################################################

# Defaults (libmgmd included in all cards)
OSLIBS = -lpthread -llogger -lrt -lz -llogpcap
OSLIBS_STATIC = -lm -lmgmd
CPPLIBS=-lstdc++

# TA48GE, TG4G
ifeq ($(L7_CPU),e500)
OSLIBS += -lssp -ldl -lrt
endif

# CXO160G (deprecated: CXO640G-e500mc)
ifeq ($(L7_CPU),e500mc)
OSLIBS += -lSaCkpt -lSaEvt -lopensaf_core 
endif

# OLT1T0
ifeq ($(L7_CPU),helixarm)
endif

# OLT1T0F, TT04SXG, AG16GA
ifeq ($(L7_CPU),katanaarm)
OSLIBS += -lSaCkpt -lSaEvt -lopensaf_core 
endif

# TG16GF
ifeq ($(L7_CPU),katanaarmlc)
OSLIBS += -lSaCkpt -lSaEvt -lopensaf_core
endif

# TG16G (deprecated: OLT7-8CH_B, TOLT8G)
ifeq ($(L7_CPU),pq2pro)
endif

# CXO640G (deprecated: CXP360G)
ifeq ($(L7_CPU),pq3)
OSLIBS += -lssp -ldl -lrt
OSLIBS += -lSaCkpt -lSaEvt -lopensaf_core
endif


#######################################################################

ifneq ($(L7_CPU),linuxhost)
        GFLAG=-gstabs
else
        GFLAG=-g
endif

CFLAGSLOCAL=

PRODUCT_TYPE:= -DL7_PRODUCT_ENTERPRISE
optLevel:= -O2

ifeq (1,$(BLD_L7_PRODUCT_SMB))
  PRODUCT_TYPE:= -DL7_PRODUCT_SMB
  optLevel:= -Os
endif  

ifeq (1,$(BLD_L7_PRODUCT_SMARTPATH))
  PRODUCT_TYPE:= -DL7_PRODUCT_SMARTPATH
  optLevel:= -Os
endif  

ifeq (1,$(DEVELOPMENT_BUILD))
  optLevel:= -O0
endif

ifeq (1,$(BLD_L7_PLATFORM_BCM5621X))
  PLATFORM_FLAGS += -DL7_PLATFORM_BCM562XX -DINCLUDE_I2C
endif

export PRODUCT_TYPE

ifeq (1,$(BLD_L7_TOOL_VALGRIND))
  L7_TOOL_FLAG := -DL7_TOOL_VALGRIND
endif  

export L7_TOOL_FLAG


CFLAGS= -Wall -D_GNU_SOURCE $(optLevel) $(OPT) -fno-strict-aliasing \
        -I. $(L7PUBLIC_INCLDIR) $(COMPONENT_INCLDIR) \
        $(L7_OS_VERSION) $(CPU_FLAGS) $(PLATFORM_FLAGS) -D_REENTRANT \
        -DLVL7_FIXUP $(L7_BSP_FLAGS) $(PRODUCT_TYPE) $(L7_TOOL_FLAG)

ifeq ($(L7_TARGETOS_VARIANT),2.4)
        CFLAGS +=-DL7_LINUX_24
else
        CFLAGS +=-DL7_LINUX_26
endif

# set flag if compiler version is 4.x.x or higher
# (can use this to conditionalize certain compiler warning flags, e.g.)
ifneq (,$(strip $(filter "4.%","$(gccver)")))
        CFLAGS +=-Wno-pointer-sign
endif



#CPLUSFLAGS=-fno-volatile


ASMFLAGS= -ansi -nostdinc -fvolatile \
         -fno-for-scope -P -x assembler-with-cpp -I. $(L7PUBLIC_INCLDIR) \
	$(L7_OS_VERSION)

asmcmd     = $(CC) $(ASMFLAGS) $(CFLAGSLOCAL) -c
compcmd    = $(CC) $(CFLAGS) $(CFLAGSLOCAL) -c
cpluscmd   = $(CC) $(CFLAGS) $(CPLUSFLAGS) $(CFLAGSLOCAL) -c
linkcmd    = $(LD)
objcopycmd = $(OBJCOPY)
objdumpcmd = $(OBJDUMP)

AR      = $(CROSS_COMPILE)ar
AS      = $(CROSS_COMPILE)as
CC      = $(CROSS_COMPILE)gcc
LD      = $(CROSS_COMPILE)ld
NM      = $(CROSS_COMPILE)nm
OBJCOPY = $(CROSS_COMPILE)objcopy
OBJDUMP = $(CROSS_COMPILE)objdump
PERL    = perl
RANLIB  = $(CROSS_COMPILE)ranlib
RM      = rm
SED     = sed
SPLINT  = splint
STRIP   = $(CROSS_COMPILE)strip


SLASH = /

ifneq (1,$(KLOCWORK_BUILD))
  OUTFILE = -o $@
endif

MAKE_C_CMD   = $(DBG) $(CC) -Wp,-MD,$(@:.o=.d) $(CFLAGS) $(CFLAGSLOCAL) $(CINCLUDES) -c $< $(OUTFILE)
MAKE_CPP_CMD = $(DBG) $(CC) -Wp,-MD,$(@:.o=.d) $(CFLAGS) $(CPLUSFLAGS) $(CFLAGSLOCAL) $(CINCLUDES) $(CPPINCLUDES) -c $< $(OUTFILE)
MAKE_S_CMD   = $(DBG) $(asmcmd) $< $(OUTFILE)

%.o : %.c
	$(COMPILING_MSG)
	$(MAKE_C_CMD)

%.o : %.cpp
	$(COMPILING_MSG)
	$(MAKE_CPP_CMD)

%.o : %.s
	$(ASSEMBLING_MSG)
	-$(DBG) $(RM) $@
	$(MAKE_S_CMD)

%.o : %.S
	$(ASSEMBLING_MSG)
	-$(DBG) $(RM) $@
	$(MAKE_S_CMD)
