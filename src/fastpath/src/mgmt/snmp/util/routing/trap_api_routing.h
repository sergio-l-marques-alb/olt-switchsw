/*********************************************************************
*
* (C) Copyright Broadcom Corporation 2001-2007
*
**********************************************************************
*
* Name: trap_api_routing.h
*
* Purpose: API interface for SNMP Agent Traps
*
* Created by: Colin Verne 06/07/2001
*
* Component: SNMP
*
*********************************************************************/

#ifndef SNMP_TRAP_API_L3_H
#define SNMP_TRAP_API_L3_H

#include "l7_common.h"

/* Begin Function Prototypes */
/*********************************************************************
*
* @purpose  Signifies that there has been a change in the state of a
*           non-virtual OSPF interface.
*
* @param    ospfRouterId      The originator of the trap
*           ospfIfIpAddress
*           ospfAddressLessIf
*           ospfIfState       New state
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes   This trap should  be  generated when  the interface state
*          regresses (e.g., goes from Dr to Down) or progresses  to  a  terminal
*          state  (i.e.,  Point-to-Point, DR Other, Dr, or Backup).
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfIfStateChangeTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfIfIpAddress, L7_uint32 ospfAddressLessIf, L7_uint32 ospfIfState);

/*********************************************************************
*
* @purpose  Signifies a change in the state of an OSPF virtual interface.
*
* @param  ospfRouterid        The ip address of the router originating the trap.
*         ospfVirtIfAreaId    The area ID of the Virtual Interface to which
*                             this RTO is attached.
*         ospfVirtIfNeighbor  The Neighbor Router ID to which this interface
*                             is connected.
*         ospfVirtIfState     The Virtual Interface Hello protocol State machine state.
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes  This trap is generated when the interface state regresses or
*         progresses to a terminal state.
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfVirtIfStateChangeTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfVirtIfAreaId, L7_uint32 ospfVirtIfNeighbor, L7_uint32 ospfVirtIfState);

/*********************************************************************
*
* @purpose  Signifies a change in the state of a non-virtual OSPF neighbor.
*
* @param    ospfRouterId    The ip address of the router originating the trap.
*           ospfNbrIpAddr   The IP address this neighbor is using as this
*                           IP Source Address.
*           ospfNbrAddressLessIndex  On an interface having and IP Address, "0".
*                                    On an interface without an address, the
*                                    corresponding value of ifIndex for this
*                                    interface in the Internet Standard MIB
*                                    ifTable.  This index is usually used in
*                                    an unnumbered interface as a reference to
*                                    the local router's control application
*                                    interface table.
*           ospfNbrRtrId     A 32-bit integer uniquely indentifying the neighboring
*                            router in the AS (Autonomous System).
*           ospfNbrState     The new NBR state.  NBR states are defined in the
*                            OSPF MIB.(pg. 126)
*
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes  This trap is generated when the neighbor state regresses or
*         progresses to a terminal state.  When a neighbor transitions
*         from or to Full on non-broadcast multi-access and broadcast
*         networks, the trap should be generated by the designated router.
*         A designated router transitioning to Down will be noted by
*         ospfIfStateChange.
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfNbrStateChangeTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfNbrIpAddr, L7_uint32 ospfNbrAddressLessIndex, L7_uint32 ospfNbrRtrId, L7_uint32 ospfNbrState);

/*********************************************************************
*
* @purpose  Signifies that there  has been a change in the state of a
*           virtual OSPF neighbor.
*
* @param    ospfRouterId      The originator of the trap
*           ospfVirtNbrArea
*           ospfVirtNbrRtrId
*           ospfVirtNbrState  The new state
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes   This  trap  should  be generated  when  the  neighbor
*          state regresses (e.g., goes from Attempt or Full
*          to  1-Way  or Down)  or progresses to a terminal
*          state (e.g., 2-Way or Full).  When an  neighbor
*          transitions from  or  to Full on non-broadcast
*          multi-access and broadcast networks, the trap should
*          be generated  by the designated router.  A designated
*          router transitioning to Down will be  noted  by
*          ospfIfStateChange."
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfVirtNbrStateChangeTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfVirtNbrArea, L7_uint32 ospfVirtNbrRtrId, L7_uint32 ospfVirtNbrState);

/*********************************************************************
*
* @purpose  Signifies that a packet has been received on a non-virtual
*           interface from a router whose configuration parameters  conflict
*           with this router's configuration parameters.
*
* @param    ospfRouterId          The originator of the trap.
*           ospfIfIpAddress
*           ospfAddressLessIf
*           ospfPacketSrc         The source IP Address
*           ospfConfigErrorType   Type of error
*           ospfPacketType
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes   Note that the event optionMismatch should cause a trap only
*          if it prevents an adjacency from forming.
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfIfConfigErrorTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfIfIpAddress, L7_uint32 ospfAddressLessIf, L7_uint32 ospfPacketSrc, L7_uint32 ospfConfigErrorType, L7_uint32 ospfPacketType);

/*********************************************************************
*
* @purpose  Signifies that a packet has been received on a virtual
*           interface from a router whose configuration parameters  conflict
*           with this router's configuration parameters.
*
* @param    ospfRouterId        The originator of the Trap
*           ospfVirtIfAreaId
*           ospfVirtIfNeighbor
*           ospfConfigErrorType Type of error
*           ospfPacketType
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes   Note that the event optionMismatch should cause a trap only
*          if it prevents an adjacency from forming.
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfVirtIfConfigErrorTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfVirtIfAreaId, L7_uint32 ospfVirtIfNeighbor, L7_uint32 ospfConfigErrorType, L7_uint32 ospfPacketType);

/*********************************************************************
*
* @purpose Signifies that a packet has been received on a non-virtual
*          interface from a router whose authentication key or
*          authentication type conflicts with this router's
*          authentication key or authentication type.
*
* @param   ospfRouterId         The originator of the trap.
*          ospfIfIpAddress
*          ospfAddressLessIf
*          ospfPacketSrc        The source IP Address
*          ospfConfigErrorType  authType mismatch or auth failure
*          ospfPacketType
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfIfAuthFailureTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfIfIpAddress, L7_uint32 ospfAddressLessIf, L7_uint32 ospfPacketSrc, L7_uint32 ospfConfigErrorType, L7_uint32 ospfPacketType);

/*********************************************************************
*
* @purpose Signifies that a packet has been received on a virtual
*          interface from a router whose authentication key or
*          authentication type conflicts with this router's
*          authentication key or authentication type.
*
* @param   ospfRouterId         The originator of the trap.
*          ospfVirtIfAreaId
*          ospfVirtIfNeighbor
*          ospfConfigErrorType  Auth type mismatch or auth failure
*          ospfPacketType
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfVirtIfAuthFailureTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfVirtIfAreaId, L7_uint32 ospfVirtIfNeighbor, L7_uint32 ospfConfigErrorType, L7_uint32 ospfPacketType);

/*********************************************************************
*
* @purpose  Signifies that an OSPF packet has been received on a
*           non-virtual interface that cannot be parsed.
*
* @param    ospfRouterId        The originator of the Trap
*           ospfIfIpAddress
*           ospfAddressLessIf
*           ospfPacketSrc       The source ip address
*           ospfPacketType
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfIfRxBadPacketTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfIfIpAddress, L7_uint32 ospfAddressLessIf, L7_uint32 ospfPacketSrc, L7_uint32 ospfPacketType);

/*********************************************************************
*
* @purpose  Signifies that an OSPF packet has been received on a
*           virtual interface that cannot be parsed.
*
* @param    ospfRouterId        The originator of the trap
*           ospfVirtIfAreaId
*           ospfVirtIfNeighbor
*           ospfPacketType
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfVirtIfRxBadPacketTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfVirtIfAreaId, L7_uint32 ospfVirtIfNeighbor, L7_uint32 ospfPacketType);

/*********************************************************************
*
* @purpose  Signifies than an OSPF packet has been retransmitted on a
*           non-virtual interface.
*
* @param    ospfRouterId        The originator of the trap
*           ospfIfIpAddress
*           ospfAddressLessIf
*           ospfNbrRtrId        Destination
*           ospfPacketType
*           ospfLsdbType
*           ospfLsdbLsid
*           ospfLsdbRouterId
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes    All packets that may be re-transmitted  are associated
*           with an LSDB entry.  The LS type, LS ID, and Router ID
*           are used to identify the LSDB entry.
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfTxRetransmitTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfIfIpAddress, L7_uint32 ospfAddressLessIf, L7_uint32 ospfNbrRtrId, L7_uint32 ospfPacketType, L7_uint32 ospfLsdbType, L7_uint32 ospfLsdbLsid, L7_uint32 ospfLsdbRouterId);

/*********************************************************************
*
* @purpose  Signifies than an OSPF packet has been retransmitted on a
*           virtual interface.
*
* @param    ospfRouterId        The originator of the trap
*           ospfVirtIfAreaId
*           ospfVirtIfNeighbor
*           ospfPacketType
*           ospfLsdbType
*           ospfLsdbLsid
*           ospfLsdbRouterId
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes    All packets that may be re-transmitted  are associated
*           with an LSDB entry.  The LS type, LS ID, and Router ID
*           are used to identify the LSDB entry.
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfVirtTxRetransmitTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfVirtIfAreaId, L7_uint32 ospfVirtIfNeighbor, L7_uint32 ospfPacketType, L7_uint32 ospfLsdbType, L7_uint32 ospfLsdbLsid, L7_uint32 ospfLsdbRouterId);

/*********************************************************************
*
* @purpose  Signifies that a  new LSA  has  been originated by this router.
*
* @param    ospfRouterId        The originator of the trap.
*           ospfLsdbAreaId      0.0.0.0 for AS Externals
*           ospfLsdbType
*           ospfLsdbLsid
*           ospfLsdbRouterId
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes    This trap should not be invoked for simple refreshes of
*           LSAs  (which happesn every 30 minutes), but
*           instead will only be invoked  when  an  LSA  is
*           (re)originated due to a topology change.  Addi-
*           tionally, this trap does not include LSAs  that
*           are  being  flushed  because  they have reached
*           MaxAge.
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfOriginateLsaTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfLsdbAreaId, L7_uint32 ospfLsdbType, L7_uint32 ospfLsdbLsid, L7_uint32 ospfLsdbRouterId);

/*********************************************************************
*
* @purpose  Signifies that one of the LSA in the router's link-state
*           database has aged to MaxAge.
*
* @param    ospfRouterId         The originator of the trap
*           ospfLsdbAreaId       0.0.0.0 for AS Externals
*           ospfLsdbType
*           ospfLsdbLsid
*           ospfLsdbRouterId
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfMaxAgeLsaTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfLsdbAreaId, L7_uint32 ospfLsdbType, L7_uint32 ospfLsdbLsid, L7_uint32 ospfLsdbRouterId);

/*********************************************************************
*
* @purpose  Signifies that the number of LSAs in the router's link-state
*           data-base has exceeded ospfExtLsdbLimit.
*
* @param    ospfRouterId      The originator of the trap
*           ospfExtLsdbLimit
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfLsdbOverflowTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfExtLsdbLimit);

/*********************************************************************
*
* @purpose  Signifies that  the  number of LSAs in the router's link-
*           state database has exceeded ninety  percent  of
*           ospfExtLsdbLimit.
*
* @param    ospfRouterId      The originator of the trap
*           ospfExtLsdbLimit
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes
*
* @end
*********************************************************************/
L7_RC_t SnmpOspfLsdbApproachingOverflowTrapSend(L7_uint32 ospfRouterId, L7_uint32 ospfExtLsdbLimit);

/*********************************************************************
*
* @purpose  Signifies that the sending agent has transitioned to the
*           'Master' state.
*
* @param    vrrpOperMasterIpAddr   The master router's real (primary) IP address
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes   none
*
* @end
*********************************************************************/
L7_RC_t SnmpVrrpTrapNewMasterTrapSend(L7_uint32 vrrpOperMasterIpAddr);

/*********************************************************************
*
* @purpose  Signifies that a packet has been received from a router
*           whose authentication key or authentication type conflicts
*           with this router's authentication key or authentication type.
*
* @param    vrrpTrapPacketSrc       The address of an inbound VRRP packet
* @param    vrrpTrapAuthErrorType   The type of configuration conflict
*
* @returns  L7_SUCCESS
* @returns  L7_FAILURE
*
* @notes   none
*
* @end
*********************************************************************/
L7_RC_t SnmpVrrpTrapAuthFailureTrapSend(L7_uint32 vrrpTrapPacketSrc, L7_int32 vrrpTrapAuthErrorType);

/* End Function Prototypes */

#endif /* SNMP_TRAP_API_L3_H */
