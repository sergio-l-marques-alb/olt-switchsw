/********************************************************************
 *
 * (C) Copyright Broadcom Corporation 2003-2007
 *
 * *********************************************************************
 *
 * @filename       agingtbl.ext
 *
 * @purpose        Aging Table object
 *
 * @component      Routing Utils Component
 *
 * @comments
 *
 * @create         02/04/23
 *
 * @author         dima
 *
 * @end
 *
 * ********************************************************************/


#ifndef _aging_tbl_ext
#define _aging_tbl_ext

#define AGINGTBL_USERNAME_LEN 8

typedef Bool (*AGING_BROWSEFUNC)
(
	t_Handle userId, 
	byte *value, 
	ulng param
);

typedef e_Err (*F_AgingTickCB)
(
   t_Handle userId,       /* Handle of the user object */
   t_Handle AgingObjId    /* Handle of the aging object */
);


/* ----------- Public API ------------------------ */

/*--------------------------------------------------------------------
 * ROUTINE:    AgingTbl_Init
 *
 * DESCRIPTION:
 *    Creates an AgingTbl object.
 * ARGUMENTS:
 *    userId     - handle of the user object
 *    userThread - handle of user thread
 *    AgingObjId - Address of the variable to store the new handle.
 * RETURNS
 *    AgingObjId - the handle of the created object is returned here
 *
 * RESULTS:
 *    E_OK       - AgingTbl object has been created successfully
 *    E_FAILED   - cannot created an object
 *    E_NOMEMORY - there is no enough memory
 *--------------------------------------------------------------------*/
e_Err AgingTbl_Init(t_Handle userId, t_Handle userThread, t_Handle *AgingObjId);

/*--------------------------------------------------------------------
 * ROUTINE:    AgingTbl_Destroy
 *
 * DESCRIPTION:
 *    Destroys the AgingTbl object.
 * ARGUMENTS:.
 *    AgingObjId - pointer to the handle of an object being destroyed;
 *                 (is set to NULLP after destoying)
 * RESULTS:
 *    E_OK       - AgingTbl object has been destroyed successfully
 *    E_FAILED   - the object is in incorrect state
 *--------------------------------------------------------------------*/
e_Err AgingTbl_Destroy(t_Handle *AgingObjId);

/*--------------------------------------------------------------------
 * ROUTINE:    AgingTbl_Start
 *
 * DESCRIPTION:
 *    Starts the AgingTbl object: 
 *    (allocates aging table and starts the aging timer
 *     for AgingInterval seconds)    
 * ARGUMENTS:.
 *    AgingObjId    - the handle of the object being started;
 *    AgingMaxAge   - maximal age
 *    AgingInterval - time interval
 *    f_AgingTickCB - user callback procedure called 
 *                    each AgingInterval seconds 
 * RESULTS:
 *    E_OK       - AgingTbl object has been started successfully
 *    E_FAILED   - otherwise
 *--------------------------------------------------------------------*/
e_Err AgingTbl_Start(t_Handle *AgingObjId, word AgingMaxAge, word AgingInterval,
                     F_AgingTickCB f_AgingTickCB);

/*--------------------------------------------------------------------
 * ROUTINE:    AgingTbl_StopAndCleanup
 *
 * DESCRIPTION:
 *    Stops the aging timer and deallocates all the aging lists; 
 *    does not delete the timer and does no destroy the object.     
 * ARGUMENTS:.
 *    AgingObjId - the handle of aging object;
 * RESULTS:
 *    E_OK       - AgingTbl object has been stopped successfully
 *    E_FAILED   - otherwise
 *--------------------------------------------------------------------*/
e_Err AgingTbl_StopAndCleanup(t_Handle *AgingObjId);

/*--------------------------------------------------------------------
 * ROUTINE:    AgingTbl_AgeToIndex
 *
 * DESCRIPTION:
 *    Converts the age to aging table index.
 * ARGUMENTS:.
 *    AgingObjId - the handle of aging object;
 *    Age        - the converted age
 *    Index      - pointer to index in aging table
 * RESULTS:
 *    E_OK       - the age has been converted successfully
 *    E_FAILED   - The specified age cannot be converted to index
 *--------------------------------------------------------------------*/
e_Err AgingTbl_AgeToIndex(t_Handle *AgingObjId, word Age, word *Index);

/*--------------------------------------------------------------------
 * ROUTINE:   AgingTbl_AddEntry 
 *     
 * DESCRIPTION:
 *    Adds a new entry with the specified age to the aging object     
 * ARGUMENTS:.
 *    AgingObjId - the handle of aging object;
 *    p_Data     -  data of the entry to be added
 *    Age        -  Age of the entry to be added
 * RETURNS
 *    AgeIndex   - Index of the aging list where the new entry 
 *                 has been added
 * RESULTS:
 *    E_OK       - New entry has been added successfully
 *    E_FAILED   - otherwise
 *--------------------------------------------------------------------*/
e_Err AgingTbl_AddEntry(t_Handle *AgingObjId, void *p_Data, word Age, 
								word *AgeIndex);

/*--------------------------------------------------------------------
 * ROUTINE:  AgingTbl_DeleteEntry 
 *
 * DESCRIPTION:
 *    Deletes entry from specified list of the aging object 
 * ARGUMENTS:.
 *    AgingObjId -  handle of the aging object;
 *    p_Data     -  data of the entry to be deleted
 *    AgeIndex   -  Index of the list containg the entry 
 *                  to be deleted in the Aging Table
 * RESULTS:
 *    E_OK       - entry has been deleted successfully
 *    E_FAILED   - otherwise
 *--------------------------------------------------------------------*/
e_Err AgingTbl_DeleteEntry(t_Handle *AgingObjId, void *p_Data, word AgeIndex);


/*--------------------------------------------------------------------
 * ROUTINE: AgingTbl_Running  
 *
 * DESCRIPTION:
 *    Returns TRUE if the aging object is running.   
 * ARGUMENTS:.
 *    AgingObjId - the handle of aging object;
 * RESULTS:
 *    TRUE    - AgingTbl object is running,
 *    FALSE   - AgingTBK object is stopped
 *--------------------------------------------------------------------*/
Bool AgingTbl_Running(t_Handle AgingObjId);

/*--------------------------------------------------------------------
 * ROUTINE:  AgingTbl_FindNext
 *
 * DESCRIPTION:
 *    Finds the next entry after the current one    
 * ARGUMENTS:.
 *    AgingObjId - the handle of aging object;
 *    AgeIndex   - Index of age list of the current entry
 *    currValue  - current entry
 * RETURNS:
 *    value      - the next value having the same age as the 
 *                 current one   
 * RESULTS:
 *    E_OK       - next entry with the same age as the current
 *                 entry has been found successfully
 *    E_FAILED   - otherwise
 *--------------------------------------------------------------------*/
e_Err AgingTbl_FindNext(t_Handle *AgingObjId, word AgeIndex, 
                        void *currValue, void **value);

/*--------------------------------------------------------------------
 * ROUTINE:
 *    AgingTbl_Browse
 * DESCRIPTION:     
 *    Aging object browse procedure.
 *    Goes over all the entries of the aging table and calls 
 *    the user browse function for each one; 
 *    if the user browse function returned FALSE
 *    deletes this entry.        
 * ARGUMENTS:.
 *    AgingObjId - the handle of aging object;
 *    f_Browse   - the user procedure called for each entry
 *    param      - parameter passed to the user procedure f_Browse  
 * RESULTS:
 *    E_OK       - browsing has been finished OK
 *    E_FAILED   - otherwise
 *--------------------------------------------------------------------*/
e_Err AgingTbl_Browse(t_Handle *AgingObjId, AGING_BROWSEFUNC f_Browse,
                      ulng param);

/*--------------------------------------------------------------------
 * ROUTINE:   
 *     AgingTbl_BrowseAge
 * DESCRIPTION:
 *     One more browse procedure.
 *     Goes over all the entries having the specified age
 *     and calls the user browse function for each one.
 *     If the user browse function returned FALSE. 
 *     deletes this entry.
 *     If the specified age is more than the Maximal age of the
 *     aging object, the browse procedure goes over overaged
 *     list and calls the user browse function for each overaged entry.
 * ARGUMENTS:.
 *    AgingObjId - the handle of aging object;
 * RESULTS:
 *    E_OK       - browsing has been finished OK
 *    E_FAILED   - otherwise
 *--------------------------------------------------------------------*/
e_Err AgingTbl_BrowseAge(t_Handle *AgingObjId, AGING_BROWSEFUNC f_Browse, 
                         word Age, ulng param);

#endif  /* _aging_tbl_ext */
