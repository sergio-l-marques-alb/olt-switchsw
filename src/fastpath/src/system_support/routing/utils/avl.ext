/********************************************************************
 *
 * (C) Copyright Broadcom Corporation 2005-2007
 *
 * *********************************************************************
 *
 * @filename            avl.ext
 *
 * @purpose             Provides external API for the AVL tree object
 *
 * @component           Routing Utils Component
 *
 * @comments
 *
 * @create              03/09/2005
 *
 * @author              Ed Vartanian
 *
 * @end
 *
 * ********************************************************************/
#ifndef _avl_tree_ext
#define _avl_tree_ext

#include "std.h"
#include "local.h"

/******************************************************************************/
/* AVL_Init Flag options                                                      */
/******************************************************************************/

#define  AVL_FREE_ON_DEL   1   /* free the user value when deleting AVL entry */
#define  AVL_KEY_DOUBLE    2   /* key has 2 equal len parts (for IP mask)  */
#define  AVL_KEY_ULNG      4   /* ulng key format, default - network order */
#define  AVL_KEY2_AS_NUM   8   /* the 2nd key is a byte mask len - not a mask */

/******************************************************************************/
/* AVL function types                                                         */
/******************************************************************************/

/* Each balanced AVL tree has a root element, and functions to
 * add and delete elements.
 */
typedef int (*f_AvlCmp)(const byte *, const byte *, unsigned int);

/* Identical browse function definitions are defined in other utilities */
#ifndef BROWSEFUNC_DEFINED
#define BROWSEFUNC_DEFINED
typedef Bool (*BROWSEFUNC)(byte *value, ulng param);
typedef Bool (*BROWSEFUNC2)(void *value, ulng param);
#endif

/******************************************************************************/
/* APIs for AVL                                                               */
/******************************************************************************/

/* Create and initialize a new AVL tree.
 */
e_Err AVL_Init(byte flags,               /* control flags */
               byte keyLen,              /* the key length in bytes */
               word keyOffset,           /* key offset in the node structure */

               /* User defined key compare function.  If NULLP then
                * key compare function will default to byte/word compare.
                * Also see flags to determine how key is compared.
                */
               f_AvlCmp KeyCmp,          /* Key compare function */
               void     *junk,           /* Not used - ignored */
               t_Handle *p_objId);       /* pointer to put AVL object Id */

/* Destroy an AVL tree and remove all its nodes.
 */
e_Err AVL_Destroy(t_Handle *p_objId);    /* pointer to the AVL tree Id */

/* Insert a new node into an AVL tree.
 */
e_Err AVL_Insert(t_Handle objId,         /* AVL tree object Id */
                 byte *key,              /* ptr to key for this entry */
                 void *value);           /* value to be inserted*/

/* Try to Insert a new node into an AVL tree else return found node.
 */
e_Err AVL_InsertFind(t_Handle objId,     /* AVL tree object Id */
                     byte *key,          /* ptr to key for this entry */
                     void *value,        /* value to be inserted*/
                     void **pp_value);   /* ptr to put found handle */

/* Delete a node in an AVL tree.
 */
e_Err AVL_Delete(t_Handle objId,         /* AVL tree object Id */
                 byte *key,              /* ptr to key to find and delete */
                 void **pp_value);       /* addr to put ptr to deleted value */

/* Find an entry in an AVL tree.
 */
e_Err AVL_Find(t_Handle objId,           /* AVL tree object Id */
               Bool bestMatch_flag,      /* find best match flag */
               byte *key,                /* ptr to key to find */
               void **pp_value);         /* addr to put ptr to found value */

/* Find the next (key order) entry after the one specified in the key.
 */
e_Err AVL_FindNext(t_Handle objId,       /* AVL tree object Id */
                   byte *key,            /* ptr to key to find */
                   void **pp_value);     /* addr to put ptr to found value */

/* Change a node's dataptr value.
 */
e_Err AVL_Change(t_Handle objId,         /* AVL tree object Id */
                 byte *key,              /* ptr to key to find */
                 void *value);           /* new value to replace the old one */

/* Remove all nodes in the tree.
 */
void AVL_Cleanup(t_Handle objId,         /* AVL tree object Id */
                 Bool freeEntry);        /* free entry's memory flag */

/* Get the first (key order) node in the tree.
 */
e_Err AVL_GetFirst(t_Handle objId,       /* AVL tree object Id */
                   void **pp_value);     /* addr to put ptr to first value */

/* Get the next (key order) node in the tree from the last "Get".
 */
e_Err AVL_GetNext(t_Handle objId,        /* AVL tree object Id */
                  void **pp_value);      /* addr to put ptr to next value */

/* Get the number of nodes in the AVL tree.
 */
e_Err AVL_GetEntriesNmb(t_Handle objId,    /* AVL tree object Id */
                        ulng *entriesNmb); /* number of entries in tree */

/* Walk the entire AVL tree and call the user's browsefunc for each node.
 */
e_Err AVL_Browse(t_Handle objId,         /* AVL tree object Id */
                BROWSEFUNC browsefunc,   /* user browse function */
                ulng flag);              /* user defined flag/value   */

/******************************************************************************/
/* APIs for AVLH                                                              */
/******************************************************************************/
e_Err AVLH_Init(byte   flags,              /* control flags */
                byte   keyLen,             /* the key length in bytes */
                word   keyOffset,          /* key offset to key in struct */
                f_AvlCmp KeyCmp,           /* User function to compare keys */
                void   *junk,              /* Parameter not used - ignored */
                t_Handle *p_objId);        /* pointer to put AVL tree Id */

e_Err AVLH_Destroy(t_Handle *p_objId);     /* pointer to the AVL tree Id */

e_Err AVLH_Insert(t_Handle objId,          /* AVL tree object Id */
                  byte *key,               /* msb key to search */
                  void *value);            /* value to be inserted*/

e_Err AVLH_Delete(t_Handle objId,          /* AVL tree object Id */
                  byte *key,               /* msb key to search */
                  void **pp_value);        /* pointer to put found handle or NULLP */

e_Err AVLH_Find(t_Handle objId,            /* AVL tree object Id */
                byte *key,                 /* msb key to search */
                void **pp_value,           /* pointer to put handle or NULLP */
                Bool shortKey);            /* use shortKey (first part)  */

e_Err AVLH_Change(t_Handle objId,          /* AVL tree object Id */
                  byte *key,               /* lsb key to find */
                  void *value);            /* new value to replace the old one */

void AVLH_Cleanup(t_Handle objId,          /* AVL tree object Id */
                  Bool freeEntry);         /* free entry's memory flag */

e_Err AVLH_GetFirst(t_Handle objId,        /* AVL tree object Id */
                    void **pp_value);      /* addr to put ptr to first value */


e_Err AVLH_FindNext(t_Handle objId,        /* AVL tree object Id */
                    byte *key,             /* msb key to search */
                    void **pp_value);      /* pointer to put found handle or NULLP */

e_Err AVLH_GetNext(t_Handle objId,         /* AVL tree object Id */
                   void **pp_value,        /* addr to put ptr to next value */
                   void *currValue);       /* current value (from last get) */

e_Err AVLH_GetEntriesNmb(t_Handle objId,    /* AVL tree object Id */
                         ulng *entriesNmb); /* number of entries in tree */

e_Err AVLH_Browse(t_Handle objId,        /* AVL tree object Id */
                  BROWSEFUNC browsefunc, /* user browse function */
                  ulng flag);            /* user defined flag    */

#endif /*_avl_tree_ext*/
