/********************************************************************
 *
 * (C) Copyright Broadcom Corporation 2003-2007
 *
 * *********************************************************************
 *
 * @filename       match.ext
 *
 * @purpose        ATIC Match Table (MT) external definitions
 *
 * @component      Routing Utils Component
 *
 * @comments       
 *
 * @create         01/09/93 
 *
 * @author         Jonathan Masel
 *
 * @end                                                                        
 *
 * ********************************************************************/        
#ifndef _match_ext
#define _match_ext

#include "std.h"
#include "local.h"

/* MT object configuration flags */
#define RETURN_POINTERS 0x8000       /* return pointer to stored value
                                        vs. return stored value */ 
#define KEY_IS_POINTER  0x4000       /* store key by pointer vs.
                                        store key itself */
#define INSERT_INC      0x2000       /* while inserting in ordered way,
                                        store value within list in ascending
                                        (key value) order vs. in descending
                                        (key value) order */

#define M_SMALL_TABLE_SIZE 17        /* default small size MT number of linked lists */
#define M_LARGE_TABLE_SIZE 139       /* default large size MT number of linked lists */

/* CALLBACKs from MT to MT users */

/* HASH FUNCTION - Hash calculation callback */
typedef word (*HASHFUNC)(byte *key);

/* MATCH FUNCTION - Translate stored value to key */
typedef byte *(*MATCHFUNC)(byte *value);

/* BROWSE FUNCTION - Browse Callback - callback from within MT_Browse and MT_FindBrowse
   API calls */

#ifndef BROWSEFUNC_DEFINED
#define BROWSEFUNC_DEFINED
typedef Bool (*BROWSEFUNC)(byte *value, t_HandleAsLong param);
#endif

typedef struct
{
   word      Owner;
   t_Handle  Id;
   void     *p_Match;
} t_MatchTable;

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MATCHK
/* Create MT Object */
e_Err MT_Construct( IN word keyLen,              /* key length in bytes         */
                    IN word valueLen,            /* value length in bytes       */
                    IN word tableSize,           /* number of linked lists      */
                    IN HASHFUNC hashFunc,        /* user defined hash function, 
                                                    if NULLP, then default hash 
                                                    function is used            */
                    IN MATCHFUNC matchFunc,      /* user defined Match function,
                                                    if NULLP, then key is stored along 
                                                    with value (as a pointer to key or key
                                                    itself depending on KEY_IS_POINTER flag */
                    OUT t_Handle *p_mt);          /* pointer to return handle of successfully 
                                                     created MT object      */
/* Delete MT Object */
e_Err MT_Destruct (INOUT t_Handle *p_mt);         /* pointer to handle of MT object
                                                     to be destroyed */
#else
/* Create MT Object */
e_Err _MT_Construct(IN word keyLen,              /* key length in bytes         */
                    IN word valueLen,            /* value length in bytes       */
                    IN word tableSize,           /* number of linked lists      */
                    IN HASHFUNC hashFunc,        /* user defined hash function, 
                                                    if NULLP, then default hash 
                                                    function is used            */
                    IN MATCHFUNC matchFunc,      /* user defined Match function,
                                                    if NULLP, then key is stored along 
                                                    with value (as a pointer to key or key
                                                    itself depending on KEY_IS_POINTER flag */
                    OUT t_Handle *p_mt,          /* pointer to return handle of successfully 
                                                     created MT object      */
                    const char *file, 
                    word line);
#define MT_Construct(keyLen,valueLen,tableSize,hashFunc,matchFunc,p_mt)\
        _MT_Construct(keyLen,valueLen,tableSize,hashFunc,matchFunc,p_mt,__FILE__, (word)__LINE__)        

/* Delete MT Object */
e_Err _MT_Destruct (INOUT t_Handle *p_mt,        /* pointer to handle of MT object
                                                     to be destroyed */
                    const char *file, 
                    word line);
#define MT_Destruct(p_mt) _MT_Destruct (p_mt, __FILE__, (word)__LINE__)

/* Display all match tables currently allocated */
void  MT_DisplayMTs( void );

#endif

/* Put value into MT object in regular (not sorted) way */
e_Err MT_Insert( IN t_Handle mt,                 /* handle of MT object  */
                 IN byte *key,                   /* key */
                 IN byte *value);                /* value */

/* Put value in a sorted way */
e_Err MT_SortedInsert( IN t_Handle mt,           /* handle of MT object  */
                       IN byte *key,             /* key */            
                       IN byte *value);          /* value */

/* Find first entry which hits specified key */
e_Err MT_FindFirst( IN  t_Handle mt,             /* handle of MT object  */
                    IN  byte *key,               /* key                  */
                    OUT byte **value);           /* pointer to return found 
                                                    entry's value */

/* Find entry which hits specified key next after previously 
   found in MT_FindFirst / MT_FindNext loop */
e_Err MT_FindNext( IN  t_Handle mt,             /* handle of MT object    */
                   IN  byte *key,               /* key                    */
                   OUT byte **value,            /* pointer to return found 
                                                   entry's value */
                   IN  byte **lastfound);       /* pointer to entry's value last found 
                                                   in MT_FindFirst / MT_FindNext loop */

/* Delete first found entry which hits specified key,
   if "value" is not NULLP, return entry's value using "value" as pointer */ 
e_Err MT_DeleteFirst( IN  t_Handle mt,          /* handle of MT object     */
                      IN  byte *key,            /* key                     */
                      OUT byte **value);        /* if not NULLP, pointer 
                                                   to copy value to be deleted */

/* Delete entry which hits specified key,
   if "value" is NULLP, 
   delete first found entry (equivalent to MT_DeleteFirst),
   if "value" is not NULLP,
   use "value" as pointer to value of entry to be found an deleted ( for case, when several entries
   have the same key) */
e_Err MT_Delete( IN  t_Handle mt,   /* handle of MT object */
                 IN  byte *key,     /* key */
                 IN  byte **value); /* if NULLP - delete first found value,
                                       otherwise - pointer to value of entry to be deleted */

/* Browse entire MT, calling  browse funcion for every entry,
   if browse funcion for some entry returns FALSE, delete entry from MT    */
e_Err MT_Browse( IN t_Handle mt,           /* handle of MT object         */
                 IN BROWSEFUNC browsefunc, /* pointer to user defined browse function    */
                 IN t_HandleAsLong param); /* parameter to pass to browse function    */

/* Browse entries of MT which hit specified key, calling  browse funcion 
   for every entry,
   if browse funcion for some entry returns FALSE, delete entry from MT    */
e_Err MT_FindBrowse( IN t_Handle mt,           /* handle of MT object      */
                     IN byte *key,             /* key                      */
                     IN BROWSEFUNC browsefunc, /* browse function pointer  */
                     IN t_HandleAsLong param); /* parameter to pass to browse function    */

/* Return number of entries in MT */
e_Err MT_GetEntriesNmb(IN  t_Handle mt,         /* handle of MT object      */
                       OUT word *entriesNmb);   /* pointer to return number of
                                                   entries */

/* Return first entry in match table */
e_Err MT_GetFirst(IN  t_Handle mt,     /* handle of MT object  */
                  OUT byte **value);   /* pointer to return value of first
                                          entry in MT or NULLP */

/* Return entry next to previosly returned
   in MT_GetFirst/ MT_GetNext loop      */
e_Err MT_GetNext(IN  t_Handle mt,                 /* handle of MT object           */
                 OUT byte **value,                /* pointer to return value of next entry 
                                                     or NULLP */
                 IN  byte **lastReturnedValue);   /* pointer to value last returned
                                                  in MT_GetFirst/ MT_GetNext loop */

/* Move entry within MT in accordance with new key       */
e_Err MT_Move(IN  t_Handle mt,          /* handle of MT object  */
              IN  byte *oldKey,         /* old key              */
              IN  byte **value,         /* pointer to value of entry to be found
                                           and moved */
              IN  byte *newKey);        /* new key   */

#ifdef __cplusplus
}
#endif

#endif /*_match_ext*/
