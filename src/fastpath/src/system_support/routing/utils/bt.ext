/********************************************************************
 *
 * (C) Copyright Broadcom Corporation 2003-2007
 *
 * *********************************************************************
 *
 * @filename       bt.ext
 *
 * @purpose        Provides external API for the binary tree object
 *
 * @component      Routing Utils Component
 *
 * @comments
 *
 * @create         02/01/1999
 *
 * @author         Dan Dovolsky
 *
 * @end                                                                        
 *
 * ********************************************************************/       

#ifndef _bin_tree_ext
#define _bin_tree_ext

#include "std.h"
#include "local.h"

#define BT_OWN_LINK     1   /* use BT object memory allocation and linking
                             during the insert routine */
#define BT_KEY_IS_VALUE 2   /* key and value are equal */


#define MAX_BT_COST 0x7FFFFFFF

e_Err BT_Init  (byte flags,                /* control flags */
                byte keyLen,               /* the key length in bytes */
                word keyOffset,            /* key offset in the handle structure */
                int (*f_KeyCompare)        /* user defined key compare function if NULLP then */
                     (void *, void *),     /* key compare function will be define in binary tree */
                byte *(*f_getKey)(void *), /* user defined function to get key via
                                              the handle, if NULLP key is in the handle structure */
                t_Handle *p_objId);        /* pointer to put binary tree Id */

e_Err BT_Destroy ( t_Handle *p_objId);     /* pointer to the binary tree Id */

e_Err BT_Insert( t_Handle objId,           /* binary tree object Id */
                 byte *key,                /* key to search */
                 void *value);             /* value to be inserted*/
e_Err BT_InsertExact( t_Handle objId,           /* binary tree object Id */
                 byte *key,                /* key to search */
                 void *value);             /* value to be inserted*/

e_Err BT_Find   ( t_Handle objId,          /* binary tree object Id */
                    byte *key,             /* key to find */
                    void **value);         /* pointer to put handle or NULLP */

e_Err BT_FindExact ( t_Handle objId,          /* binary tree object Id */
                    byte *key,             /* key to find */
                    void **value);         /* pointer to put handle or NULLP */
e_Err BT_Delete ( t_Handle objId,          /* binary tree object Id */
                    byte    *key,          /* key to find */
                    void **value);         /* pointer to put found handle or NULLP */
e_Err BT_DeleteExact ( t_Handle objId,          /* binary tree object Id */
                    byte    *key,          /* key to find */
                    void **value);         /* pointer to put found handle or NULLP */

e_Err BT_Change( t_Handle objId,           /* binary tree object Id */
                 byte *key,                /* key to search */
                 void *value);             /* the new value to replace the old one */

e_Err BT_GetEntriesNmb(t_Handle objId, word *entriesNmb);

void BT_Cleanup(t_Handle objId,        /* binary tree object Id */
                    Bool freeEntry);   /* free entry's memory flag */

e_Err BT_GetNext(t_Handle objId, void **p_value);
e_Err BT_GetFirst(t_Handle objId, void **p_value);

/* Browse entire binary tree, calling  f_browse for every entry.
   If f_browse returns FALSE,
   delete the entry from binary tree */

/* Browse Callback - callback from within BT_Browse API calls */

#ifndef BROWSEFUNC_DEFINED
#define BROWSEFUNC_DEFINED
typedef Bool (*BROWSEFUNC)(byte *value, ulng param);
typedef Bool (*BROWSEFUNC2)(void *value, ulng param);
#endif

e_Err BT_Browse( t_Handle objId,               /* binary tree object Id */
                BROWSEFUNC browsefunc,         /* user browse function */
                ulng flag);                    /* user defined flag    */

e_Err BT_Interrupt( t_Handle objId);

#endif /*_bin_tree_ext*/
