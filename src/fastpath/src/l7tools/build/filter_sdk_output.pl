#! /usr/bin/perl -w

# This script serves as a substitute for the grep utility, 
# since we need to control both the filtering and the 
# return code.
#
# Note: grep returns a value of 1 if it does not find any
#       output to display.  When used with a pipe to filter
#       the output of a make command, this non-zero rc causes
#       make to fail the command and exit with an error.
#
# Note: Also have the opposite problem where a legitimate 
#       error in the make command is hidden by the return value
#       of this script as a result of the pipe operation, thus
#       preventing make from terminating properly.

use strict;

use constant MAKE_ERROR_CODE => 2;

my $display_mode = $ENV{'CMD_DISPLAY_MODE'};
my $pkgid        = $ENV{'PKGNAME'};


# Main routine, using filtering subroutine to control return value.
#
my $result = &msg_filter();
if ($result != 0) {
   exit $result;
}


sub msg_filter {

   my $make_rc = 0;

   while (<>) {
      chomp;

      # Look for an error message from 'make' or 'gmake'.
      # - Simulate an error code as though generated by make.
      # - Display error message regardless of display mode.
      #
      if (/^(g?make\[\d+\]):.*(Error\s\d+)/i) {
         $make_rc = MAKE_ERROR_CODE;
         print "$_\n";
         next;
      }

      # Suppress all output while in 'terse' display mode.
      if ($display_mode ne "terse") {

         # Always suppress the annoying "Nothing to be done for" messages, even for 'verbose' mode.
         if (/Nothing to be done for/i) {
            next;
         }

         # Only want to show certain messages in 'summary' display mode.
         if ($display_mode eq "summary") {

            # The following messages are displayed verbatim:
            #  - make warnings
            #  - kernel module build warnings
            #  - compiler errors/warnings
            #  - compiler phase info
            #  - specific source file info
            #
            if (/^g?make\[\d+\]:.*[Ww]arning:/ ||
                /^\*+\s[Ww]arning:\s/ ||
                /.*:\d+:\s(error|warning):\s/ ||
                /^cc1:\s/ ||
                /.*\.(c|cpp|s):/
               ) {
               print "$_\n";
               next;
            }

            # The remaining messages are reformatted prior to display.
            #

            my ($cmd, $p1, $p2, $rest) = split;

            if (/^Building/) {
                printf "ARCHIVING....%-12s:  %s\n", "[$pkgid]", $p2;
            }
            elsif (/^Compiling/) {
                printf "COMPILING....%-12s:  %s\n", "[$pkgid]", $p1;
            }
            elsif (/^Generating/) {
                printf "GENERATING...%-12s:  %s\n", "[$pkgid]", $p1;
            }
            elsif (/^Debug:\s(.*)/i) {
                # Display the message without the Debug: keyword.
                print "$1\n";
            }
            else {
                # Everything else in 'summary' mode is discarded.
            }
         }
         else {
            print "$_\n";
         }
      }
   }
   return $make_rc;
}

