##############################################################################
#
# makerules.linkable
#
# Purpose:  
#      Transforms a buildable source tree into a linkable object build tree.
#
# Note:
#      This is a DESTRUCTIVE operation and therefore may only be run once
#      on an original view.  It deletes certain source code directories,
#      overwrites certain make files, and generates the linkable object
#      file in the process.
#
##############################################################################

# Include the make configuration file.
#
include $(FP_ROOT)/src/l7tools/build/make.cfg


# Local source path abbreviations (for convenience).
#
andl_make          := andl/make
base_make          := src/application/base/make
binds_make         := src/binds/make
bsp_common         := bsp/cpu/common
chassis_make       := src/system_support/chassis/make
hapi_brcm          := andl/hapi/broadcom/$(L7_CHIP)
hapi_lvl7          := andl/hapi/lvl7/$(L7_CHIP)
hapi_make          := andl/hapi/$(L7_CHIP)/make
ipstack_vend       := src/ipstack/vendor
src_build          := src/l7tools/build
src_infrastructure := src/system_support/base/infrastructure
vendor_sdk         := vendor/broadcom/esw_sdk


# Define output locations.
#
out_andl      := $(FP_BASE)/$(OUT_ANDL)
out_libs      := $(FP_BASE)/$(OUT_LIBS)
out_objects   := $(FP_BASE)/$(OUT_OBJECTS)
out_target    := $(FP_BASE)/$(OUT_TARGET)


# Name of temp files to hold list of directories and/or files to delete.
#
tempdirs      := _tempdirs
tempfiles     := _tempfiles


# Give indication of what is happening, since this operation is destructive.
#
# Note: Displaying these progress messages even while in 'terse' display mode,
#       since the effects are irreversible.
#
progress_msg1 = @printf "Generating linkable object file %s\n" $(subst $(FP_BASE)/,$(BLANK),$@)
progress_msg2 = @printf "Modifying make files in build tree\n"
progress_msg3 = @printf "Deleting object-only source directories from build tree\n"


.PHONY: all purge_srcdirs modify_makefiles $(FASTPATH_LIB)


all: purge_srcdirs
	$(NOOP)


# Delete all source files and directories for packages that are distributed
# as object-only code.
#
# THIS OPERATION IS DESTRUCTIVE AND CANNOT BE UNDONE!!
#

define find-path
if [[ -d $${tmp} ]] ; \
then \
  find $${tmp} -maxdepth 0 -type d -print >> $(tempdirs) ; \
fi
endef

define find-dirs-cmd
  find $${tmp} -maxdepth 1 -mindepth 1
endef

define find-dirs-write
  -type d -print | sort >> $(tempdirs)
endef

define find-files-cmd
  find $${tmp}
endef

define find-files-write
  -type f -print | sort >> $(tempfiles)
endef


purge_srcdirs: modify_makefiles
	$(progress_msg3)
	-$(DBG) rm -f $(tempdirs) $(tempfiles)
	$(DBG) touch $(tempdirs) $(tempfiles)
  ifeq (0,$(LINKABLE_OBJECT_ANDLSRC))
	$(DBG) tmp=$(FP_BASE)/andl/dapi ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-files-cmd) \
		-type f -path '*/*.h' -prune -o \
		$(find-files-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(hapi_brcm)/base ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-files-cmd) \
		-type f -path '*/*.h' -prune -o \
		$(find-files-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(hapi_brcm) ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/base' -prune -o \
		-type d -path '*/make' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(hapi_lvl7) ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-files-cmd) \
		-type f -path '*/*.h' -prune -o \
		-type f -path '*/make/*' -prune -o \
		$(find-files-write) ; \
	fi
  endif  # not LINKABLE_OBJECT_ANDLSRC
	$(DBG) tmp=$(FP_BASE)/src/application/base ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/make' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/application ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/base' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/binds ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/make' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/dtl ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/src/ipstack ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-files-cmd) \
		-type f -path '*/*.h' -prune -o \
		$(find-files-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(ipstack_vend)/ipcom-vxworks/port/vxworks ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/config' -prune -o \
		-type d -path '*/include' -prune -o \
		-type d -path '*/src' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(ipstack_vend)/ipcom-vxworks/port ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/vxworks' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(ipstack_vend)/ipcom-vxworks ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/config' -prune -o \
		-type d -path '*/include' -prune -o \
		-type d -path '*/port' -prune -o \
		-type d -path '*/src' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(ipstack_vend)/ipnet2-any ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/config' -prune -o \
		-type d -path '*/include' -prune -o \
		-type d -path '*/src' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(ipstack_vend)/ipnet2-ipv6 ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/config' -prune -o \
		-type d -path '*/include' -prune -o \
		-type d -path '*/src' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(ipstack_vend)/iptcp-any ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/config' -prune -o \
		-type d -path '*/include' -prune -o \
		-type d -path '*/src' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/ipstack ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/vendor' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/mgmt/mgmt_support/security ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/$(src_infrastructure)/cnfgr ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/platform' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(src_infrastructure) ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/cnfgr' -prune -o \
		-type d -path '*/clustering' -prune -o \
		-type d -path '*/dim' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/system_support/base/l7util ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/l7utils' -prune -o \
		-type d -path '*/zlib' -prune -o \
		-type d -path '*/zlib_win' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/system_support/base/network ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/xmodem' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/system_support/base/services ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/src/system_support/base/system ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-files-cmd) -maxdepth 1 \
		-type f -name '*' \
		$(find-files-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/system_support/chassis/* ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/alarm_mgr/alarm_mgr_sid' -prune -o \
		-type d -path '*/fanmgr/fanmgr_sid' -prune -o \
		-type d -path '*/make/*' -prune -o \
		-type d -path '*/powermgr/powermgr_sid' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/src/system_support/ipv6 ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/src/system_support/routing ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/src/system_support/security ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/src/system_support/stacking ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/src/system_support/stacking_binds ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/src/usmdb ; $(find-path)
  ifeq (0,$(LINKABLE_OBJECT_ANDLSRC))
	$(DBG) tmp=$(FP_BASE)/$(vendor_sdk)/src/bcmx ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-files-cmd) \
		-type f -path '*/bcmx_int.h' -prune -o \
		$(find-files-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(vendor_sdk)/src ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-files-cmd) \
		-type f -path '*/*.h' -prune -o \
		$(find-files-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(vendor_sdk)/src ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/bcmx' -prune -o \
		$(find-dirs-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(vendor_sdk) ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-files-cmd) -maxdepth 1 \
		-type f -name '*' \
		$(find-files-write) ; \
	fi
	$(DBG) tmp=$(FP_BASE)/$(vendor_sdk) ; \
	if [[ -d $${tmp} ]] ; \
	then \
		$(find-dirs-cmd) \
		-type d -path '*/include' -prune -o \
		-type d -path '*/src' -prune -o \
		$(find-dirs-write) ; \
	fi
  endif  # not LINKABLE_OBJECT_ANDLSRC
	$(DBG) tmp=$(FP_BASE)/vendor/openssh ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/vendor/openssl ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/vendor/netsnmp ; $(find-path)
	$(DBG) tmp=$(FP_BASE)/vendor/broadcom/tr069c ; $(find-path)
      # Remove all of the identified source paths.
	$(DBG) if [[ -s $(tempfiles) ]] ; \
	then \
		cat $(tempfiles) | xargs $(RM) ; \
	fi
	$(DBG) if [[ -s $(tempdirs) ]] ; \
	then \
		cat $(tempdirs) | xargs $(RM) -r ; \
	fi
	-$(DBG) rm -f $(tempdirs) $(tempfiles)


# Alter certain original make files to no longer build the object-only 
# code, since their source directories will be deleted.
#
# THIS OPERATION IS DESTRUCTIVE AND CANNOT BE UNDONE!!
#
# Note: The general pattern used here is to replace file.x from its
#       corresponding file.x.srcdist and to delete any file.y.objdist.
#

define remove-file
if [[ -f $${tmp} ]] ; \
then \
  $(RM) $${tmp} ; \
fi
endef

define replace-srcdist
if [[ -f $${tmp}.srcdist ]] ; \
then \
  cd `dirname $${tmp}` ; mv -f `basename $${tmp}.srcdist` `basename $${tmp}` ; \
fi
endef


modify_makefiles: $(FASTPATH_LIB)
	$(progress_msg2)
  ifeq (0,$(LINKABLE_OBJECT_ANDLSRC))
	$(DBG) tmp=$(FP_BASE)/$(andl_make)/make.pkg.objdist ; $(remove-file)
	$(DBG) tmp=$(FP_BASE)/$(hapi_make)/make.pkg.device.objdist ; $(remove-file)
	$(DBG) tmp=$(FP_BASE)/$(hapi_make)/Makefile.objdist ; $(remove-file)
  endif  # not LINKABLE_OBJECT_ANDLSRC
	$(DBG) tmp=$(FP_BASE)/$(base_make)/make.pkg ; $(replace-srcdist)
	$(DBG) tmp=$(FP_BASE)/$(binds_make)/make.pkg ; $(replace-srcdist)
	$(DBG) tmp=$(FP_BASE)/$(chassis_make)/make.pkg ; $(replace-srcdist)
	$(DBG) tmp=$(FP_BASE)/$(src_build)/make.targets.objdist ; $(remove-file)
	$(DBG) tmp=$(FP_BASE)/$(src_build)/makerules.targets ; $(replace-srcdist)
	$(DBG) tmp=$(FP_BASE)/$(bsp_common)/linux/ipl/make.link.objdist ; $(remove-file)
	$(DBG) tmp=$(FP_BASE)/$(bsp_common)/vxworks/build/make.link.objdist ; $(remove-file)


# Create the linkable object file, which is an archive of .lib and .a files
# representing the FASTPATH functionality that is delivered in object-only 
# form.  Also include any Linux kernel modules (if they exist) since they
# are needed during the final link phase.
#
# Note: The existence of this file is what prevents the 'linkable-object'
#       target from being run more than once.
#

$(FASTPATH_LIB):
	$(progress_msg1)
	+$(DBG) $(MKDIRP) $(dir $@)
	-$(DBG) rm -f $@
	$(DBG) for i in $$(find $(out_libs) -type f -name "$(FP_PREFIX)_*.lib" -print) ; \
	do \
		$(STRIP) -g $$i ; \
		$(AR) -rcs $@ $$i ; \
	done
	$(DBG) for i in $$(find $(out_objects) -type f -name "_$(FP_PREFIX)_*.a" -print) ; \
	do \
		$(STRIP) -g $$i ; \
		$(AR) -rcs $@ $$i ; \
	done
	$(DBG) for i in $(L7_MODULE_LIST) ; \
	do \
		if [[ -f $(out_target)/$$i ]] ; \
		then \
			$(AR) -rcs $@ $(out_target)/$$i ; \
		fi ; \
	done
	-$(DBG) chmod -w $@

