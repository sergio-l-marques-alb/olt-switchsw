/*********************************************************************
*
* (C) Copyright PT Inovação S.A. 2013-2013
*
**********************************************************************
*
* @create    21/10/2013
*
* @author    Daniel Filipe Figueira
* @author    Marcio Daniel Melo
*
**********************************************************************/
#ifndef _PTIN_MGMD_DEFS_H
#define _PTIN_MGMD_DEFS_H

/***************************************
 * Defines/Enums                       *
 ***************************************/
#define PTIN_NULL     0
#define PTIN_NULLPTR  ((void *)0)

#ifndef TRUE
   #define TRUE           1
   #define FALSE          0
   #define BOOL           unsigned char
#endif

#define PTIN_MGMD_AF_INET  1
#define PTIN_MGMD_AF_INET6 2

#ifndef char8
  typedef char               char8;
#endif
#ifndef uchar8
  typedef unsigned char      uchar8;
#endif
#ifndef int8
  typedef signed char        int8;
#endif
#ifndef uint8
  typedef unsigned char      uint8;
#endif
#ifndef short16
  typedef short              short16;
#endif
#ifndef ushort16
  typedef unsigned short     ushort16;
#endif
#ifndef long32
  typedef long               long32;
#endif
#ifndef ulong32
  typedef unsigned long      ulong32;
#endif
#ifndef uint64
  typedef unsigned long long uint64;
#endif
#ifndef int64
  typedef signed long long   int64;
#endif
#ifndef int32
  typedef int                int32;
#endif
#ifndef uint32
  typedef unsigned int       uint32;
#endif
#ifndef int16
  typedef short              int16;
#endif
#ifndef uint16
  typedef unsigned short     uint16;
#endif
#ifndef double64
  typedef double             double64;
#endif

#ifndef min
  #define min(x, y) (((x) < (y)) ? (x) : (y))
#endif
#ifndef max
  #define max(x, y) (((x) < (y)) ? (y) : (x))
#endif

#ifndef _UNUSED_
  #define _UNUSED_(x) (void) (x)
#endif

#define PTIN_MGMD_CTRL_TIMEOUT        @PTIN_MGMD_PLATFORM_CTRL_TIMEOUT@

#define PTIN_MGMD_STACK_SIZE          @PTIN_MGMD_PLATFORM_STACK_SIZE@
#define PTIN_MGMD_MAX_CHANNELS        @PTIN_MGMD_PLATFORM_MAX_CHANNELS@  
#define PTIN_MGMD_MAX_WHITELIST       @PTIN_MGMD_PLATFORM_MAX_WHITELIST@  
#define PTIN_MGMD_MAX_GROUPS          PTIN_MGMD_MAX_CHANNELS  
#define PTIN_MGMD_MAX_SOURCES         PTIN_MGMD_MAX_CHANNELS 
#define PTIN_MGMD_MAX_CLIENTS         @PTIN_MGMD_PLATFORM_MAX_CLIENTS@ 
#define PTIN_MGMD_MAX_PORTS           @PTIN_MGMD_PLATFORM_MAX_PORTS@   
#define PTIN_MGMD_MAX_SERVICES        @PTIN_MGMD_PLATFORM_MAX_SERVICES@    
#define PTIN_MGMD_MAX_SERVICE_ID      @PTIN_MGMD_PLATFORM_MAX_SERVICE_ID@
#define PTIN_MGMD_MAX_FRAME_SIZE      @PTIN_MGMD_PLATFORM_MAX_FRAME_SIZE@

#define PTIN_MGMD_DISABLE 0
#define PTIN_MGMD_ENABLE 1

#define PTIN_MGMD_MAX_CB_INSTANCES 1 //Only IGMP is supported, if MLD is supported set this value to 2

#ifdef PTIN_MGMD_GENERAL_QUERY_PER_INTERFACE  
#define PTIN_MAX_QUERIES       1//For the moment we consider that we have a a Global Query per System and not Query per Interface, therefore 
#endif
#define PTIN_MGMD_MAX_LEAF_PORTS    16/*PON/VDSL/EThernet*/
#define PTIN_MGMD_MAX_ROOT_PORTS    1 /*EThernet*/

/* Number of entries per mask */
#define PTIN_MGMD_CLIENT_MASK_UNIT   (sizeof(uint8) * 8)

#define PTIN_MGMD_CLIENT_BITMAP_SIZE max(((PTIN_MGMD_MAX_CLIENTS-1)/PTIN_MGMD_CLIENT_MASK_UNIT+1),((PTIN_MGMD_MAX_PORTS-1)/PTIN_MGMD_CLIENT_MASK_UNIT+1))  /* Maximum number of clientes per source */

/* Client Mask*/
typedef struct
{
  uchar8   value[PTIN_MGMD_CLIENT_BITMAP_SIZE];
} PTIN_MGMD_CLIENT_MASK_t;

typedef enum
{
  PTIN_MGMD_PORT_TYPE_UNKNOWN=0,
  PTIN_MGMD_PORT_TYPE_LEAF,
  PTIN_MGMD_PORT_TYPE_ROOT,
  PTIN_MGMD_PORT_TYPE_MAX//This field should be the last one. Please do not remove it
} ptin_mgmd_port_type_t;


/* Number of entries per mask byte */
#define PTIN_MGMD_PORT_MASK_UNIT               (sizeof(uchar8) * 8)

/* Number of bytes in mask */
#define PTIN_MGMD_PORT_MASK_INDICES   ((PTIN_MGMD_MAX_PORTS - 1) / PTIN_MGMD_PORT_MASK_UNIT + 1)

/* Port Mask*/
typedef struct
{
  uchar8   value[PTIN_MGMD_PORT_MASK_INDICES];
} PTIN_MGMD_PORT_MASK_t;

//Return Codes
typedef enum
{
  SUCCESS = 0,
  FAILURE,
  ERROR,
  NOT_IMPLEMENTED_YET,
  NOT_SUPPORTED,
  NOT_EXIST,
  ALREADY_CONFIGURED,
  TABLE_IS_FULL,
  TABLE_IS_EMPTY,
  REQUEST_DENIED,
  ASYNCH_RESPONSE,
  ADDR_INUSE,
  NO_VALUE,
  NO_MEMORY,
  DEPENDENCY_NOT_MET,
} RC_t;

#define PTIN_MGMD_CTRL_FILTERMODE_INCLUDE 0
#define PTIN_MGMD_CTRL_FILTERMODE_EXCLUDE 1

#define PTIN_MGMD_CTRL_GROUPTYPE_DYNAMIC 0
#define PTIN_MGMD_CTRL_GROUPTYPE_STATIC  1

#endif //_PTIN_MGMD_DEFS_H
