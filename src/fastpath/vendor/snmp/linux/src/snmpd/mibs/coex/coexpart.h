/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -c coex snmpCommunityTable snmpTrapAddress snmpTrapCommunity -apo -row_status -userpart -separate_type_file 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_COEXPART_H
#define SR_COEXPART_H


#ifdef __cplusplus
extern "C" {
#endif

/* only define name strings if we are not compiling LIGHT */
#ifndef LIGHT
#define STdeclare(name, value) static const char name [] = value;
#else	/* LIGHT */
#define STdeclare(name, value)
#endif	/* LIGHT */

/* define the OID components of the OID call table */

#if defined(N_snmpCommunityMIBObjects)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpCommunityMIBObjects[] = { 1, 3, 6, 1, 6, 3, 18, 1 };
#else
extern const SR_UINT32 IDsnmpCommunityMIBObjects[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCommunityMIBObjects 8
#endif	/* defined(N_snmpCommunityMIBObjects) */







#if defined(I_snmpCommunityName)
#ifdef SNMPPART_DECL
STdeclare(STsnmpCommunityName, "snmpCommunityName")
const SR_UINT32 IDsnmpCommunityName[] = { 1, 3, 6, 1, 6, 3, 18, 1, 1, 1, 2 };
#else
extern const SR_UINT32 IDsnmpCommunityName[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCommunityName 11
#endif	/* defined(I_snmpCommunityName) */


#if defined(I_snmpCommunitySecurityName)
#ifdef SNMPPART_DECL
STdeclare(STsnmpCommunitySecurityName, "snmpCommunitySecurityName")
const SR_UINT32 IDsnmpCommunitySecurityName[] = { 1, 3, 6, 1, 6, 3, 18, 1, 1, 1, 3 };
#else
extern const SR_UINT32 IDsnmpCommunitySecurityName[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCommunitySecurityName 11
#endif	/* defined(I_snmpCommunitySecurityName) */


#if defined(I_snmpCommunityContextEngineID)
#ifdef SNMPPART_DECL
STdeclare(STsnmpCommunityContextEngineID, "snmpCommunityContextEngineID")
const SR_UINT32 IDsnmpCommunityContextEngineID[] = { 1, 3, 6, 1, 6, 3, 18, 1, 1, 1, 4 };
#else
extern const SR_UINT32 IDsnmpCommunityContextEngineID[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCommunityContextEngineID 11
#endif	/* defined(I_snmpCommunityContextEngineID) */


#if defined(I_snmpCommunityContextName)
#ifdef SNMPPART_DECL
STdeclare(STsnmpCommunityContextName, "snmpCommunityContextName")
const SR_UINT32 IDsnmpCommunityContextName[] = { 1, 3, 6, 1, 6, 3, 18, 1, 1, 1, 5 };
#else
extern const SR_UINT32 IDsnmpCommunityContextName[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCommunityContextName 11
#endif	/* defined(I_snmpCommunityContextName) */


#if defined(I_snmpCommunityTransportTag)
#ifdef SNMPPART_DECL
STdeclare(STsnmpCommunityTransportTag, "snmpCommunityTransportTag")
const SR_UINT32 IDsnmpCommunityTransportTag[] = { 1, 3, 6, 1, 6, 3, 18, 1, 1, 1, 6 };
#else
extern const SR_UINT32 IDsnmpCommunityTransportTag[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCommunityTransportTag 11
#endif	/* defined(I_snmpCommunityTransportTag) */


#if defined(I_snmpCommunityStorageType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpCommunityStorageType, "snmpCommunityStorageType")
const SR_UINT32 IDsnmpCommunityStorageType[] = { 1, 3, 6, 1, 6, 3, 18, 1, 1, 1, 7 };
#else
extern const SR_UINT32 IDsnmpCommunityStorageType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCommunityStorageType 11
#endif	/* defined(I_snmpCommunityStorageType) */


#if defined(I_snmpCommunityStatus)
#ifdef SNMPPART_DECL
STdeclare(STsnmpCommunityStatus, "snmpCommunityStatus")
const SR_UINT32 IDsnmpCommunityStatus[] = { 1, 3, 6, 1, 6, 3, 18, 1, 1, 1, 8 };
#else
extern const SR_UINT32 IDsnmpCommunityStatus[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCommunityStatus 11
#endif	/* defined(I_snmpCommunityStatus) */




#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_COEXPART_H */
