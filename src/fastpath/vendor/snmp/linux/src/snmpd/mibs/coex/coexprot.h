/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -c coex snmpCommunityTable snmpTrapAddress snmpTrapCommunity -apo -row_status -userpart -separate_type_file 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_COEXPROT_H
#define SR_COEXPROT_H


#ifdef __cplusplus
extern "C" {
#endif

#include "sr_proto.h"


/*
 * The snmpCommunityMIBObjects family. 
 */

extern VarBind * snmpCommunityMIBObjects_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern snmpCommunityMIBObjects_t *new_k_snmpCommunityMIBObjects_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpCommunityMIBObjects_t *snmpCommunityMIBObjectsData));

extern snmpCommunityMIBObjects_t *k_snmpCommunityMIBObjects_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));



/*
 * The snmpCommunityEntry family. 
 */

extern VarBind * snmpCommunityEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int snmpCommunityEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int snmpCommunityEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int snmpCommunityEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void snmpCommunityEntry_free
    SR_PROTOTYPE((snmpCommunityEntry_t *data));

extern snmpCommunityEntry_t *new_k_snmpCommunityEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpCommunityEntry_t *snmpCommunityEntryData));

extern snmpCommunityEntry_t *k_snmpCommunityEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * snmpCommunityIndex));

extern int k_snmpCommunityEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_snmpCommunityEntry_set
    SR_PROTOTYPE((snmpCommunityEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_snmpCommunityEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int snmpCommunityEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern snmpCommunityEntry_t *Clone_snmpCommunityEntry
    SR_PROTOTYPE((snmpCommunityEntry_t *data));

extern int k_snmpCommunityEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_snmpCommunityEntryCloneUserpartData
    SR_PROTOTYPE((snmpCommunityEntry_t *dst, snmpCommunityEntry_t *src));

extern void k_snmpCommunityEntryFreeUserpartData
    SR_PROTOTYPE((snmpCommunityEntry_t *data));



#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_COEXPROT_H */
