/*
 *
 * Copyright (C) 1992-2006 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -c v3 vacmAccessTable snmpEngine vacmContextTable vacmSecurityToGroupTable snmpMPDStats snmpNotifyTable snmpNotifyFilterProfileTable snmpNotifyFilterTable snmpProxyTable snmpProxyFilterTable snmpTargetObjects snmpTargetAddrTable snmpTargetParamsTable snmpTargetAddrExtTable usmStats usmUser usmUserTable vacmMIBViews vacmViewTreeFamilyTable usmTargetTagTable apoTargetParamsTable -apo -row_statu
s -userpart -separate_type_file
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_V3PROT_H
#define SR_V3PROT_H


#ifdef __cplusplus
extern "C" {
#endif

#include "sr_proto.h"


/*
 * The snmpEngine family. 
 */

extern VarBind * snmpEngine_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern snmpEngine_t *new_k_snmpEngine_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpEngine_t *snmpEngineData));

extern snmpEngine_t *k_snmpEngine_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));



/*
 * The snmpMPDStats family. 
 */

extern VarBind * snmpMPDStats_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern snmpMPDStats_t *new_k_snmpMPDStats_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpMPDStats_t *snmpMPDStatsData));

extern snmpMPDStats_t *k_snmpMPDStats_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));



/*
 * The snmpTargetObjects family. 
 */

extern VarBind * snmpTargetObjects_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int snmpTargetObjects_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int snmpTargetObjects_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int snmpTargetObjects_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void snmpTargetObjects_free
    SR_PROTOTYPE((snmpTargetObjects_t *data));

extern snmpTargetObjects_t *new_k_snmpTargetObjects_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpTargetObjects_t *snmpTargetObjectsData));

extern snmpTargetObjects_t *k_snmpTargetObjects_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_snmpTargetObjects_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_snmpTargetObjects_set
    SR_PROTOTYPE((snmpTargetObjects_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_snmpTargetObjects_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int snmpTargetObjects_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern snmpTargetObjects_t *Clone_snmpTargetObjects
    SR_PROTOTYPE((snmpTargetObjects_t *data));

extern void k_snmpTargetObjectsCloneUserpartData
    SR_PROTOTYPE((snmpTargetObjects_t *dst, snmpTargetObjects_t *src));

extern void k_snmpTargetObjectsFreeUserpartData
    SR_PROTOTYPE((snmpTargetObjects_t *data));



/*
 * The snmpTargetAddrEntry family. 
 */


extern VarBind * snmpTargetAddrEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int snmpTargetAddrEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int snmpTargetAddrEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int snmpTargetAddrEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void snmpTargetAddrEntry_free
    SR_PROTOTYPE((snmpTargetAddrEntry_t *data));

extern snmpTargetAddrEntry_t *new_k_snmpTargetAddrEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpTargetAddrEntry_t *snmpTargetAddrEntryData));

extern snmpTargetAddrEntry_t *k_snmpTargetAddrEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * snmpTargetAddrName));

extern int k_snmpTargetAddrEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_snmpTargetAddrEntry_set
    SR_PROTOTYPE((snmpTargetAddrEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_snmpTargetAddrEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int snmpTargetAddrEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern snmpTargetAddrEntry_t *Clone_snmpTargetAddrEntry
    SR_PROTOTYPE((snmpTargetAddrEntry_t *data));

extern int k_snmpTargetAddrEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_snmpTargetAddrEntryCloneUserpartData
    SR_PROTOTYPE((snmpTargetAddrEntry_t *dst, snmpTargetAddrEntry_t *src));

extern void k_snmpTargetAddrEntryFreeUserpartData
    SR_PROTOTYPE((snmpTargetAddrEntry_t *data));



/*
 * The snmpTargetParamsEntry family. 
 */


extern VarBind * snmpTargetParamsEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int snmpTargetParamsEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int snmpTargetParamsEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int snmpTargetParamsEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void snmpTargetParamsEntry_free
    SR_PROTOTYPE((snmpTargetParamsEntry_t *data));

extern snmpTargetParamsEntry_t *new_k_snmpTargetParamsEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpTargetParamsEntry_t *snmpTargetParamsEntryData));

extern snmpTargetParamsEntry_t *k_snmpTargetParamsEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * snmpTargetParamsName));

extern int k_snmpTargetParamsEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_snmpTargetParamsEntry_set
    SR_PROTOTYPE((snmpTargetParamsEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_snmpTargetParamsEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int snmpTargetParamsEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern snmpTargetParamsEntry_t *Clone_snmpTargetParamsEntry
    SR_PROTOTYPE((snmpTargetParamsEntry_t *data));

extern int k_snmpTargetParamsEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_snmpTargetParamsEntryCloneUserpartData
    SR_PROTOTYPE((snmpTargetParamsEntry_t *dst, snmpTargetParamsEntry_t *src));

extern void k_snmpTargetParamsEntryFreeUserpartData
    SR_PROTOTYPE((snmpTargetParamsEntry_t *data));



/*
 * The snmpNotifyEntry family. 
 */

extern VarBind * snmpNotifyEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int snmpNotifyEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int snmpNotifyEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int snmpNotifyEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void snmpNotifyEntry_free
    SR_PROTOTYPE((snmpNotifyEntry_t *data));

extern snmpNotifyEntry_t *new_k_snmpNotifyEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpNotifyEntry_t *snmpNotifyEntryData));

extern snmpNotifyEntry_t *k_snmpNotifyEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * snmpNotifyName));

extern int k_snmpNotifyEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_snmpNotifyEntry_set
    SR_PROTOTYPE((snmpNotifyEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_snmpNotifyEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int snmpNotifyEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern snmpNotifyEntry_t *Clone_snmpNotifyEntry
    SR_PROTOTYPE((snmpNotifyEntry_t *data));

extern int k_snmpNotifyEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_snmpNotifyEntryCloneUserpartData
    SR_PROTOTYPE((snmpNotifyEntry_t *dst, snmpNotifyEntry_t *src));

extern void k_snmpNotifyEntryFreeUserpartData
    SR_PROTOTYPE((snmpNotifyEntry_t *data));



/*
 * The snmpNotifyFilterProfileEntry family. 
 */

extern VarBind * snmpNotifyFilterProfileEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int snmpNotifyFilterProfileEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int snmpNotifyFilterProfileEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int snmpNotifyFilterProfileEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void snmpNotifyFilterProfileEntry_free
    SR_PROTOTYPE((snmpNotifyFilterProfileEntry_t *data));

extern snmpNotifyFilterProfileEntry_t *new_k_snmpNotifyFilterProfileEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpNotifyFilterProfileEntry_t *snmpNotifyFilterProfileEntryData));

extern snmpNotifyFilterProfileEntry_t *k_snmpNotifyFilterProfileEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * snmpTargetParamsName));

extern int k_snmpNotifyFilterProfileEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_snmpNotifyFilterProfileEntry_set
    SR_PROTOTYPE((snmpNotifyFilterProfileEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_snmpNotifyFilterProfileEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int snmpNotifyFilterProfileEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern snmpNotifyFilterProfileEntry_t *Clone_snmpNotifyFilterProfileEntry
    SR_PROTOTYPE((snmpNotifyFilterProfileEntry_t *data));

extern int k_snmpNotifyFilterProfileEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_snmpNotifyFilterProfileEntryCloneUserpartData
    SR_PROTOTYPE((snmpNotifyFilterProfileEntry_t *dst, snmpNotifyFilterProfileEntry_t *src));

extern void k_snmpNotifyFilterProfileEntryFreeUserpartData
    SR_PROTOTYPE((snmpNotifyFilterProfileEntry_t *data));



/*
 * The snmpNotifyFilterEntry family. 
 */

extern VarBind * snmpNotifyFilterEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int snmpNotifyFilterEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int snmpNotifyFilterEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int snmpNotifyFilterEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void snmpNotifyFilterEntry_free
    SR_PROTOTYPE((snmpNotifyFilterEntry_t *data));

extern snmpNotifyFilterEntry_t *new_k_snmpNotifyFilterEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpNotifyFilterEntry_t *snmpNotifyFilterEntryData));

extern snmpNotifyFilterEntry_t *k_snmpNotifyFilterEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * snmpNotifyFilterProfileName,
                  OID * snmpNotifyFilterSubtree));

extern int k_snmpNotifyFilterEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_snmpNotifyFilterEntry_set
    SR_PROTOTYPE((snmpNotifyFilterEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_snmpNotifyFilterEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int snmpNotifyFilterEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern snmpNotifyFilterEntry_t *Clone_snmpNotifyFilterEntry
    SR_PROTOTYPE((snmpNotifyFilterEntry_t *data));

extern int k_snmpNotifyFilterEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_snmpNotifyFilterEntryCloneUserpartData
    SR_PROTOTYPE((snmpNotifyFilterEntry_t *dst, snmpNotifyFilterEntry_t *src));

extern void k_snmpNotifyFilterEntryFreeUserpartData
    SR_PROTOTYPE((snmpNotifyFilterEntry_t *data));



/*
 * The snmpProxyEntry family. 
 */

extern VarBind * snmpProxyEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int snmpProxyEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int snmpProxyEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int snmpProxyEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void snmpProxyEntry_free
    SR_PROTOTYPE((snmpProxyEntry_t *data));

extern snmpProxyEntry_t *new_k_snmpProxyEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  snmpProxyEntry_t *snmpProxyEntryData));

extern snmpProxyEntry_t *k_snmpProxyEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * snmpProxyName));

extern int k_snmpProxyEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_snmpProxyEntry_set
    SR_PROTOTYPE((snmpProxyEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_snmpProxyEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int snmpProxyEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern snmpProxyEntry_t *Clone_snmpProxyEntry
    SR_PROTOTYPE((snmpProxyEntry_t *data));

extern int k_snmpProxyEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_snmpProxyEntryCloneUserpartData
    SR_PROTOTYPE((snmpProxyEntry_t *dst, snmpProxyEntry_t *src));

extern void k_snmpProxyEntryFreeUserpartData
    SR_PROTOTYPE((snmpProxyEntry_t *data));



/*
 * The usmStats family. 
 */

extern VarBind * usmStats_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern usmStats_t *new_k_usmStats_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  usmStats_t *usmStatsData));

extern usmStats_t *k_usmStats_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));



/*
 * The usmUser family. 
 */

extern VarBind * usmUser_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int usmUser_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int usmUser_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int usmUser_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void usmUser_free
    SR_PROTOTYPE((usmUser_t *data));

extern usmUser_t *new_k_usmUser_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  usmUser_t *usmUserData));

extern usmUser_t *k_usmUser_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_usmUser_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_usmUser_set
    SR_PROTOTYPE((usmUser_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_usmUser_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int usmUser_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern usmUser_t *Clone_usmUser
    SR_PROTOTYPE((usmUser_t *data));

extern void k_usmUserCloneUserpartData
    SR_PROTOTYPE((usmUser_t *dst, usmUser_t *src));

extern void k_usmUserFreeUserpartData
    SR_PROTOTYPE((usmUser_t *data));



/*
 * The usmUserEntry family. 
 */


extern VarBind * usmUserEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int usmUserEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int usmUserEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int usmUserEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void usmUserEntry_free
    SR_PROTOTYPE((usmUserEntry_t *data));

extern usmUserEntry_t *new_k_usmUserEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  usmUserEntry_t *usmUserEntryData));

extern usmUserEntry_t *k_usmUserEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * usmUserEngineID,
                  OctetString * usmUserName));

extern int k_usmUserEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_usmUserEntry_set
    SR_PROTOTYPE((usmUserEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_usmUserEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int usmUserEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern usmUserEntry_t *Clone_usmUserEntry
    SR_PROTOTYPE((usmUserEntry_t *data));

extern int k_usmUserEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_usmUserEntryCloneUserpartData
    SR_PROTOTYPE((usmUserEntry_t *dst, usmUserEntry_t *src));

extern void k_usmUserEntryFreeUserpartData
    SR_PROTOTYPE((usmUserEntry_t *data));



/*
 * The vacmContextEntry family. 
 */

extern VarBind * vacmContextEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern vacmContextEntry_t *new_k_vacmContextEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  vacmContextEntry_t *vacmContextEntryData));

extern vacmContextEntry_t *k_vacmContextEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * vacmContextName));



/*
 * The vacmSecurityToGroupEntry family. 
 */

extern VarBind * vacmSecurityToGroupEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int vacmSecurityToGroupEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int vacmSecurityToGroupEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int vacmSecurityToGroupEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void vacmSecurityToGroupEntry_free
    SR_PROTOTYPE((vacmSecurityToGroupEntry_t *data));

extern vacmSecurityToGroupEntry_t *new_k_vacmSecurityToGroupEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  vacmSecurityToGroupEntry_t *vacmSecurityToGroupEntryData));

extern vacmSecurityToGroupEntry_t *k_vacmSecurityToGroupEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 vacmSecurityModel,
                  OctetString * vacmSecurityName));

extern int k_vacmSecurityToGroupEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_vacmSecurityToGroupEntry_set
    SR_PROTOTYPE((vacmSecurityToGroupEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_vacmSecurityToGroupEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int vacmSecurityToGroupEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern vacmSecurityToGroupEntry_t *Clone_vacmSecurityToGroupEntry
    SR_PROTOTYPE((vacmSecurityToGroupEntry_t *data));

extern int k_vacmSecurityToGroupEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_vacmSecurityToGroupEntryCloneUserpartData
    SR_PROTOTYPE((vacmSecurityToGroupEntry_t *dst, vacmSecurityToGroupEntry_t *src));

extern void k_vacmSecurityToGroupEntryFreeUserpartData
    SR_PROTOTYPE((vacmSecurityToGroupEntry_t *data));



/*
 * The vacmAccessEntry family. 
 */

extern VarBind * vacmAccessEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int vacmAccessEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int vacmAccessEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int vacmAccessEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void vacmAccessEntry_free
    SR_PROTOTYPE((vacmAccessEntry_t *data));

extern vacmAccessEntry_t *new_k_vacmAccessEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  vacmAccessEntry_t *vacmAccessEntryData));

extern vacmAccessEntry_t *k_vacmAccessEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * vacmGroupName,
                  OctetString * vacmAccessContextPrefix,
                  SR_INT32 vacmAccessSecurityModel,
                  SR_INT32 vacmAccessSecurityLevel));

extern int k_vacmAccessEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_vacmAccessEntry_set
    SR_PROTOTYPE((vacmAccessEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_vacmAccessEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int vacmAccessEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern vacmAccessEntry_t *Clone_vacmAccessEntry
    SR_PROTOTYPE((vacmAccessEntry_t *data));

extern int k_vacmAccessEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_vacmAccessEntryCloneUserpartData
    SR_PROTOTYPE((vacmAccessEntry_t *dst, vacmAccessEntry_t *src));

extern void k_vacmAccessEntryFreeUserpartData
    SR_PROTOTYPE((vacmAccessEntry_t *data));



/*
 * The vacmMIBViews family. 
 */

extern VarBind * vacmMIBViews_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int vacmMIBViews_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int vacmMIBViews_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int vacmMIBViews_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void vacmMIBViews_free
    SR_PROTOTYPE((vacmMIBViews_t *data));

extern vacmMIBViews_t *new_k_vacmMIBViews_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  vacmMIBViews_t *vacmMIBViewsData));

extern vacmMIBViews_t *k_vacmMIBViews_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_vacmMIBViews_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_vacmMIBViews_set
    SR_PROTOTYPE((vacmMIBViews_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_vacmMIBViews_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int vacmMIBViews_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern vacmMIBViews_t *Clone_vacmMIBViews
    SR_PROTOTYPE((vacmMIBViews_t *data));

extern void k_vacmMIBViewsCloneUserpartData
    SR_PROTOTYPE((vacmMIBViews_t *dst, vacmMIBViews_t *src));

extern void k_vacmMIBViewsFreeUserpartData
    SR_PROTOTYPE((vacmMIBViews_t *data));



/*
 * The vacmViewTreeFamilyEntry family. 
 */

extern VarBind * vacmViewTreeFamilyEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));


extern int vacmViewTreeFamilyEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));


extern int vacmViewTreeFamilyEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int vacmViewTreeFamilyEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void vacmViewTreeFamilyEntry_free
    SR_PROTOTYPE((vacmViewTreeFamilyEntry_t *data));

extern vacmViewTreeFamilyEntry_t *new_k_vacmViewTreeFamilyEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  vacmViewTreeFamilyEntry_t *vacmViewTreeFamilyEntryData));

extern vacmViewTreeFamilyEntry_t *k_vacmViewTreeFamilyEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  OctetString * vacmViewTreeFamilyViewName,
                  OID * vacmViewTreeFamilySubtree));

extern int k_vacmViewTreeFamilyEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_vacmViewTreeFamilyEntry_set
    SR_PROTOTYPE((vacmViewTreeFamilyEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_vacmViewTreeFamilyEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int vacmViewTreeFamilyEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern vacmViewTreeFamilyEntry_t *Clone_vacmViewTreeFamilyEntry
    SR_PROTOTYPE((vacmViewTreeFamilyEntry_t *data));

extern int k_vacmViewTreeFamilyEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));

extern void k_vacmViewTreeFamilyEntryCloneUserpartData
    SR_PROTOTYPE((vacmViewTreeFamilyEntry_t *dst, vacmViewTreeFamilyEntry_t *src));

extern void k_vacmViewTreeFamilyEntryFreeUserpartData
    SR_PROTOTYPE((vacmViewTreeFamilyEntry_t *data));



#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_V3PROT_H */
