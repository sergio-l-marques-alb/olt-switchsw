/*! \file ha_internal.h
 *
 * HA internal class definition
 *
 */
/*
 * $Copyright: Copyright 2016 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 */

#ifndef __HA_INTERNAL_H__
#define __HA_INTERNAL_H__
#if !defined(__KERNEL__) && defined (LINUX)

#include <bcm/types.h>
#include <soc/types.h>
/* for the mutex type */
#include <sal/core/sync.h>

#define HA_MEM_SIGNATURE           0xa75c9b3e
#define RESIZE_MEMORY_SIZE         0x1000000   /* 16MB */
#define HA_MAX_NUM_OF_MEM_SECTIONS 0x100
#define HA_FILE_NAME_SIZE 256



typedef enum {
    ha_blk_free = 0,
    ha_blk_allocated = 1
} ha_mem_block_state_t;


/*!
 * \brief memory block header type.
 *
 * Every memory block contains the following header structure.
 * The structure contains information required for the memory manager
 * as well as for version upgrade/downgrade
 */
typedef struct {
    /* Every block starts with signature */
    uint32 signature;
    /* unique block ID */
    uint16 blk_id;
    /* application data structure version */
    uint8 version;
    /* block state (allocated/free) */
    uint8 state;
    /* block length including the header */
    uint32 length;
    /* the length of the previous block */
    uint32 prev_offset;
    /* structure signature - generated by the xml parser */ 
    uint32 struct_sig;
    /* the section containing the block */
    uint32 section;
} ha_mem_blk_hdr_t;

/*!
 * \brief section header.
 *
 * Every section of shared memory contains a control block that
 * helps manage the section
 * 
 */
typedef struct {
    /* pointer to the begining of the block */
    ha_mem_blk_hdr_t *mem_start;
    /* out of bounds block */  
    ha_mem_blk_hdr_t *mem_end;
    /* pointer to the free memory block */    
    ha_mem_blk_hdr_t *free_mem;
    /* the section length in bytes */   
    uint32 sect_len;
} ha_mem_section_t;



/*!
 * \brief memory manager struct.
 *
 * This is the memory manager struct. The purpose is that the
 * HA memory manager will be able to menage the allocated shared memory.
 */
typedef struct {
    /* array contains all the HA memory sections */
    ha_mem_section_t mem_sect[HA_MAX_NUM_OF_MEM_SECTIONS];
    /* mem_sect last index */
    int mem_sect_idx;
    /* pointer to the begining of the free block */
    ha_mem_blk_hdr_t *free_mem;
    /* shared file handle associated with the memory block */
    int fh;
    /* Total allocated HA memory (free + allocated) */
    uint32 blk_len;
    /* the HA shared file name - user provided */
    char file_name[HA_FILE_NAME_SIZE];
    /* system page size */
    int sys_page_size;
    /* indicates if created new file or opened existing file */
    uint8 new_file;
    /* protect shared HA memory resource */
    sal_mutex_t mutex;
    /* indicates if mem_init() method was called */
    uint8 initialized;
    /* indicates if we want to use the shm allocation mechanism */
    uint8 enabled;
} ha_mgr_t;


/*
 * auxiliary functions used by the manager
 */

/* find block with specific block ID */
ha_mem_blk_hdr_t *ha_mgr_find_block(int unit, uint16 blk_id);
/* find free block of length min_length */ 
ha_mem_blk_hdr_t *ha_mgr_find_free_block(int unit, uint32 min_length);
/* find the previous block to a block */
ha_mem_blk_hdr_t *ha_mgr_find_prev_block(int unit, ha_mem_blk_hdr_t *start);
/* resizing the section */
ha_mem_blk_hdr_t *ha_mgr_section_resize(int unit, int size);
/* sanity check of the entire HA memory */
uint8 ha_mgr_sanity_check(int unit);
/* create/open shared memory file */
int ha_mgr_open_shared_mem(int unit, uint8 create_new_file);

#endif /* __KERNEL__ */
#endif   /* __HA_INTERNAL_H__  */
