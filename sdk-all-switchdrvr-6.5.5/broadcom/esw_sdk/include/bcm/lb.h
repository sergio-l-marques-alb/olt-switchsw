/*
 * $Id: $
 * 
 * $Copyright: Copyright 2016 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_LB_H__
#define __BCM_LB_H__

#include <bcm/types.h>

/* Link bonding module flags. */
#define BCM_LB_FLAG_GLOBAL      (1 << 0)   /* Global configuration. */
#define BCM_LB_FLAG_UNMAP       (1 << 1)   /* Unmap operation. */

/* LBG ID type */
typedef uint32 bcm_lbg_t;

/* MODEM ID type */
typedef uint32 bcm_modem_t;

/* Link bonding direction type eumerations */
typedef enum bcm_lb_direction_type_e {
    bcmLbDirectionRx = 0,   /* Link bonding in receive side */
    bcmLbDirectionTx = 1,   /* Link bonding in transmit side */
    bcmLbDirectionBoth = 2, /* Link bonding in both receive and transmit side */
    bcmLbDirectionCount = 3 /* Always Last. Not a usable value. */
} bcm_lb_direction_type_t;

/* Link bonding control type */
typedef enum bcm_lb_control_e {
    bcmLbControlSegmentationMode = 0,   /* Global configuration in TX side */
    bcmLbControlPacketCrcEnable = 1,    /* Global configuration in TX side */
    bcmLbControlTimeoutThreshold = 2,   /* Per LBG configuration in RX side */
    bcmLbControlMaxOutOfOrder = 3,      /* Per LBG configuration in RX side */
    bcmLbControlMaxBuffer = 4,          /* Per LBG configuration in RX side */
    bcmLbControlExpectedSequenceNumber = 5, /* Per LBG configuration in RX side */
    bcmLbControlCount = 6               /* Always Last. Not a usable value. */
} bcm_lb_control_t;

/* Link bonding modem control type */
typedef enum bcm_lb_modem_control_e {
    bcmLbModemControlHeaderCompensation = 0, /* Modem configuration in TX side */
    bcmLbModemControlCount = 1          /* Always Last. Not a usable value. */
} bcm_lb_modem_control_t;

/* Link bonding format type */
typedef enum bcm_lb_format_type_e {
    bcmLbFormatTypeBypass = 0,          /* LB bypss */
    bcmLbFormatTypeNonChannelize = 1,   /* LB non channelize */
    bcmLbFormatTypechannelize = 2,      /* LB channelize */
    bcmLbFormatCount = 3                /* Always Last. Not a usable value. */
} bcm_lb_format_type_t;

/* Link bonding status */
typedef enum bcm_lb_status_type_e {
    bcmLbStatusIsInSync = 0,    /* Is expected sequence number in sync state */
    bcmLbStatusIsEmptyFifo = 1, /* LBG FIFOs empty indication */
    bcmLbStatusCount = 2        /* Always Last. Not a usable value. */
} bcm_lb_status_type_t;

/* Link bonding Modem status */
typedef enum bcm_lb_modem_status_type_e {
    bcmLbModemStatusIsEmptyFifo = 0,    /* Modem FIFO empty indication */
    bcmLbModemStatusCount = 1           /* Always Last. Not a usable value. */
} bcm_lb_modem_status_type_t;

/* Link bonding stat */
typedef enum bcm_lb_stat_val_e {
    bcmLbStatsUnicastPkts = 0,          /* Unicast packets */
    bcmLbStatsMulticastPkts = 1,        /* Multicast packets */
    bcmLbStatsBroadcastPkts = 2,        /* Broadcast packets */
    bcmLbStatsPkts64Octets = 3, 
    bcmLbStatsPkts65to127Octets = 4, 
    bcmLbStatsPkts128to255Octets = 5, 
    bcmLbStatsPkts256to511Octets = 6, 
    bcmLbStatsPkts512to1023Octets = 7, 
    bcmLbStatsPkts1024to1518Octets = 8, 
    bcmLbStatsPkts1519Octets = 9, 
    bcmLbStatsPkts = 10, 
    bcmLbStatsOctets = 11, 
    bcmLbStatsDiscardFragments = 12, 
    bcmLbStatsErrorPkts = 13, 
    bcmLbStatsCount = 14                /* Always Last. Not a usable value. */
} bcm_lb_stat_val_t;

/* Link bonding Modem stat */
typedef enum bcm_lb_modem_stat_val_e {
    bcmLbModemStatsPkts = 0, 
    bcmLbModemStatsOctets = 1, 
    bcmLbModemStatsCount = 2    /* Always Last. Not a usable value. */
} bcm_lb_modem_stat_val_t;

/* Link bonding Segment Mode */
typedef enum bcm_lb_segment_mode_e {
    bcmLbSegmentMode128 = 0, 
    bcmLbSegmentMode192 = 1, 
    bcmLbSegmentMode192Enhanced = 2, 
    bcmLbSegmentModeCount = 3           /* Always Last. Not a usable value. */
} bcm_lb_segment_mode_t;

/* Index of mapping traffic to modem */
typedef struct bcm_lb_rx_modem_map_index_s {
    bcm_gport_t port; 
    bcm_vlan_t vlan; 
} bcm_lb_rx_modem_map_index_t;

/* Modem info */
typedef struct bcm_lb_rx_modem_map_config_s {
    bcm_lb_format_type_t lbg_type; 
    bcm_modem_t modem_id; 
} bcm_lb_rx_modem_map_config_t;

/* packet info */
typedef struct bcm_lb_packet_config_s {
    uint16 outer_vlan_tpid; 
    uint16 lbg_tpid; 
} bcm_lb_packet_config_t;

/* packet info */
typedef struct bcm_lb_modem_packet_config_s {
    bcm_lb_format_type_t pkt_format; 
    bcm_mac_t dst_mac; 
    bcm_mac_t src_mac; 
    uint16 vlan; 
    int use_global_priority_map; 
} bcm_lb_modem_packet_config_t;

/* tc dp info */
typedef struct bcm_lb_tc_dp_s {
    uint32 tc; 
    uint32 dp; 
} bcm_lb_tc_dp_t;

/* packet priority info */
typedef struct bcm_lb_pkt_pri_s {
    uint32 pkt_pri; 
    uint32 pkt_cfi; 
    uint32 pkt_dp; 
} bcm_lb_pkt_pri_t;

/* LBG weight info */
typedef struct bcm_lb_lbg_weight_s {
    bcm_lbg_t lbg_id; 
    int lbg_weight; 
} bcm_lb_lbg_weight_t;

/* packet priority info */
typedef struct bcm_lb_modem_shaper_config_s {
    uint32 enable; 
    uint32 rate; 
    uint32 max_burst; 
} bcm_lb_modem_shaper_config_t;

/* Initialize structure bcm_lb_rx_modem_map_index_t */
extern void bcm_lb_rx_modem_map_index_t_init(
    bcm_lb_rx_modem_map_index_t *map_index);

/* Initialize structure bcm_lb_rx_modem_map_config_t */
extern void bcm_lb_rx_modem_map_config_t_init(
    bcm_lb_rx_modem_map_config_t *map_config);

/* Initialize structure bcm_lb_packet_config_t */
extern void bcm_lb_packet_config_t_init(
    bcm_lb_packet_config_t *packet_config);

/* Initialize structure bcm_lb_modem_packet_config_t */
extern void bcm_lb_modem_packet_config_t_init(
    bcm_lb_modem_packet_config_t *packet_config);

/* Initialize structure bcm_lb_tc_dp_t */
extern void bcm_lb_tc_dp_t_init(
    bcm_lb_tc_dp_t *tc_dp);

/* Initialize structure bcm_lb_pkt_pri_t */
extern void bcm_lb_pkt_pri_t_init(
    bcm_lb_pkt_pri_t *pkt_pri);

/* Initialize structure bcm_lb_lbg_weight_t */
extern void bcm_lb_lbg_weight_t_init(
    bcm_lb_lbg_weight_t *lbg_weights);

/* Initialize structure bcm_lb_modem_shaper_config_t */
extern void bcm_lb_modem_shaper_config_t_init(
    bcm_lb_modem_shaper_config_t *shaper);

#ifndef BCM_HIDE_DISPATCHABLE

/* Connect Modem to logic port */
extern int bcm_lb_modem_to_port_map_set(
    int unit, 
    bcm_modem_t modem_id, 
    uint32 flags, 
    bcm_gport_t port);

/* Connect Modem to logic port */
extern int bcm_lb_modem_to_port_map_get(
    int unit, 
    bcm_modem_t modem_id, 
    uint32 flags, 
    bcm_gport_t *port);

/* Enable or disable LBG */
extern int bcm_lb_enable_set(
    int unit, 
    bcm_lbg_t lbg_id, 
    uint32 flags, 
    uint32 enable);

/* Enable or disable LBG */
extern int bcm_lb_enable_get(
    int unit, 
    bcm_lbg_t lbg_id, 
    uint32 flags, 
    uint32 *enable);

/* Connect Modem to LBG */
extern int bcm_lb_modem_to_lbg_map_set(
    int unit, 
    bcm_modem_t modem_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lbg_t lbg_id);

/* Connect Modem to LBG */
extern int bcm_lb_modem_to_lbg_map_get(
    int unit, 
    bcm_modem_t modem_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lbg_t *lbg_id);

/* Set sequence number width */
extern int bcm_lb_sequence_number_width_set(
    int unit, 
    bcm_lbg_t lbg_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    int number_width);

/* Get sequence number width */
extern int bcm_lb_sequence_number_width_get(
    int unit, 
    bcm_lbg_t lbg_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    int *number_width);

/* Set configuration */
extern int bcm_lb_control_set(
    int unit, 
    bcm_lbg_t lbg_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lb_control_t lb_control, 
    int arg);

/* Set configuration */
extern int bcm_lb_control_get(
    int unit, 
    bcm_lbg_t lbg_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lb_control_t lb_control, 
    int *arg);

/* Set configuration */
extern int bcm_lb_modem_control_set(
    int unit, 
    bcm_modem_t modem_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lb_modem_control_t modem_control, 
    int arg);

/* Get configuration */
extern int bcm_lb_modem_control_get(
    int unit, 
    bcm_modem_t modem_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lb_modem_control_t modem_control, 
    int *arg);

/* Get status of LBG or global */
extern int bcm_lb_status_get(
    int unit, 
    bcm_lbg_t lbg_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lb_status_type_t status_type, 
    int *value);

/* Get status of LBG or global */
extern int bcm_lb_modem_status_get(
    int unit, 
    bcm_modem_t modem_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lb_modem_status_type_t status_type, 
    int *value);

/* Get stat of LBG or global */
extern int bcm_lb_stat_get(
    int unit, 
    bcm_lbg_t lbg_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lb_stat_val_t type, 
    uint64 *value);

/* Get stat of Modem */
extern int bcm_lb_modem_stat_get(
    int unit, 
    bcm_modem_t modem_id, 
    bcm_lb_direction_type_t direction, 
    uint32 flags, 
    bcm_lb_modem_stat_val_t type, 
    uint64 *value);

/* Set mapping of port to modem */
extern int bcm_lb_rx_modem_map_set(
    int unit, 
    bcm_lb_rx_modem_map_index_t *map_index, 
    uint32 flags, 
    bcm_lb_rx_modem_map_config_t *map_config);

/* Get mapping of port to modem */
extern int bcm_lb_rx_modem_map_get(
    int unit, 
    bcm_lb_rx_modem_map_index_t *map_index, 
    uint32 flags, 
    bcm_lb_rx_modem_map_config_t *map_config);

/* Set packet configuration */
extern int bcm_lb_packet_config_set(
    int unit, 
    uint32 flags, 
    bcm_lb_packet_config_t *packet_config);

/* Set packet configuration */
extern int bcm_lb_packet_config_get(
    int unit, 
    uint32 flags, 
    bcm_lb_packet_config_t *packet_config);

/* Set packet configuration */
extern int bcm_lb_modem_packet_config_set(
    int unit, 
    bcm_modem_t modem_id, 
    uint32 flags, 
    bcm_lb_modem_packet_config_t *packet_config);

/* Get packet configuration */
extern int bcm_lb_modem_packet_config_get(
    int unit, 
    bcm_modem_t modem_id, 
    uint32 flags, 
    bcm_lb_modem_packet_config_t *packet_config);

/* Set mapping for tc,dp to priority */
extern int bcm_lb_tc_dp_to_priority_config_set(
    int unit, 
    uint32 flags, 
    bcm_lb_tc_dp_t *tc_dp, 
    bcm_lb_pkt_pri_t *pkt_pri);

/* Get mapping for tc,dp to priority */
extern int bcm_lb_tc_dp_to_priority_config_get(
    int unit, 
    uint32 flags, 
    bcm_lb_tc_dp_t *tc_dp, 
    bcm_lb_pkt_pri_t *pkt_pri);

/* Set scheduler between lbg */
extern int bcm_lb_tx_sched_set(
    int unit, 
    uint32 flags, 
    int lbg_count, 
    bcm_lb_lbg_weight_t *lbg_weights);

/* Set scheduler between lbg */
extern int bcm_lb_tx_sched_get(
    int unit, 
    uint32 flags, 
    int max_lbg_count, 
    bcm_lb_lbg_weight_t *lbg_weights, 
    int *lbg_count);

/* Set modem shaper */
extern int bcm_lb_modem_shaper_set(
    int unit, 
    bcm_modem_t modem_id, 
    uint32 flags, 
    bcm_lb_modem_shaper_config_t *shaper);

/* Set modem shaper */
extern int bcm_lb_modem_shaper_get(
    int unit, 
    bcm_modem_t modem_id, 
    uint32 flags, 
    bcm_lb_modem_shaper_config_t *shaper);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_LB_H__ */
