/*
 * $Id: extender.h 1.1 Broadcom SDK $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_EXTENDER_H__
#define __BCM_EXTENDER_H__

#if defined(INCLUDE_L3)

#include <bcm/types.h>

/* BCM_EXTENDER_PORT_* flags. */
#define BCM_EXTENDER_PORT_WITH_ID   0x00000001 /* Create extender port with
                                                  specified ID */
#define BCM_EXTENDER_PORT_REPLACE   0x00000002 /* Replace existing entry */
#define BCM_EXTENDER_PORT_MULTICAST 0x00000004 /* Create multicast type */

/* ETAG PCP and DE fields select. */
typedef enum bcm_extender_pcp_de_select_e {
    BCM_EXTENDER_PCP_DE_SELECT_OUTER_TAG, 
    BCM_EXTENDER_PCP_DE_SELECT_INNER_TAG, 
    BCM_EXTENDER_PCP_DE_SELECT_DEFAULT, 
    BCM_EXTENDER_PCP_DE_SELECT_PHB 
} bcm_extender_pcp_de_select_t;

/* Extender port type. */
typedef struct bcm_extender_port_s {
    uint32 flags;                       /* BCM_EXTENDER_PORT_xxx. */
    bcm_gport_t extender_port_id;       /* GPORT identifier. */
    bcm_gport_t port;                   /* Physical port / trunk */
    uint16 extended_port_vid;           /* Extender port VID. */
    bcm_vlan_t match_vlan;              /* Outer VLAN ID to match. */
    bcm_extender_pcp_de_select_t pcp_de_select; /* Selection of PCP and DE fields for
                                           egress ETAG. */
    uint8 pcp;                          /* Default PCP field of ETAG. */
    uint8 de;                           /* Default DE field of ETAG. */
} bcm_extender_port_t;

/* BCM_EXTENDER_FORWARD_* flags. */
#define BCM_EXTENDER_FORWARD_REPLACE    0x00000001 /* Replace existing entry */
#define BCM_EXTENDER_FORWARD_MULTICAST  0x00000002 /* Create multicast type */

/* Extender forwarding entry type. */
typedef struct bcm_extender_forward_s {
    uint32 flags;                   /* BCM_extender_FORWARD_xxx. */
    uint16 name_space;              /* extender Namespace. */
    uint16 extended_port_vid;       /* Extended port VID. */
    bcm_gport_t dest_port;          /* Destination Gport. */
    bcm_multicast_t dest_multicast; /* Destination Multicast Group. */
} bcm_extender_forward_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize extender module. */
extern int bcm_extender_init(
    int unit);

/* Detach extender module. */
extern int bcm_extender_cleanup(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize the extender port structure. */
extern void bcm_extender_port_t_init(
    bcm_extender_port_t *extender_port);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create extender port */
extern int bcm_extender_port_add(
    int unit, 
    bcm_extender_port_t *extender_port);

/* Delete extender port. */
extern int bcm_extender_port_delete(
    int unit, 
    bcm_gport_t extender_port_id);

/* Delete all extender ports. */
extern int bcm_extender_port_delete_all(
    int unit);

/* Get extender port information */
extern int bcm_extender_port_get(
    int unit, 
    bcm_extender_port_t *extender_port);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Extender port traverse callback. */
typedef int (*bcm_extender_port_traverse_cb)(
    int unit, 
    bcm_extender_port_t *extender_port, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Extender port traverse */
extern int bcm_extender_port_traverse(
    int unit, 
    bcm_extender_port_traverse_cb cb, 
    void *user_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize the extender forwarding entry structure. */
extern void bcm_extender_forward_t_init(
    bcm_extender_forward_t *extender_forward_entry);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create extender forwarding entry */
extern int bcm_extender_forward_add(
    int unit, 
    bcm_extender_forward_t *extender_forward_entry);

/* Delete extender forwarding entry. */
extern int bcm_extender_forward_delete(
    int unit, 
    bcm_extender_forward_t *extender_forward_entry);

/* Delete all extender forwarding entries. */
extern int bcm_extender_forward_delete_all(
    int unit);

/* Get extender forwarding entry information */
extern int bcm_extender_forward_get(
    int unit, 
    bcm_extender_forward_t *extender_forward_entry);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Extender forwarding entry traverse callback. */
typedef int (*bcm_extender_forward_traverse_cb)(
    int unit, 
    bcm_extender_forward_t *extender_forward_entry, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Extender forwarding entry traverse */
extern int bcm_extender_forward_traverse(
    int unit, 
    bcm_extender_forward_traverse_cb cb, 
    void *user_data);

#endif /* defined(INCLUDE_L3) */

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_EXTENDER_H__ */
