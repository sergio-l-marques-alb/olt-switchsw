# This file defines special package-level build rules.
#
# Note: The vendor source files listed here are built into individual archive
#       files which are subsequently included when pre-linking the package 
#       library.
#

# Output location for vendor files.
#
out_vend_sdk := $(OUT_ANDL)/vendor


# Vendor output log file.
#
# Note: Using a Perl script instead of the 'grep' utility to prevent a 
#       command error that occurs when all of the output messages are
#       filtered by grep (thus giving a return value of 1).
#
grep_cmd          := $(PERL) $(FP_BASE)/src/l7tools/build/filter_sdk_output.pl
vend_logging      := $(REDIRERR) | $(grep_cmd)
ifeq (terse,$(CMD_DISPLAY_MODE))
  vend_logging    := $(DEVNULL) $(REDIRERR)
endif


# Location where SDK archives are stored by vendor make system.
#
ifeq (1,$(BLD_L7_TARGETOS_LINUX))
  vend_sdk_arc := $(out_vend_sdk)/unix-user/$(BOARD)-$(L7_CPU)

  ifeq (1,$(BLD_L7_TARGETOS_LINUX_26))
    vend_sdk_arc := $(vend_sdk_arc)-2_6
  endif

  ifeq (1,$(BLD_L7_TARGETOS_LINUX_36))
    vend_sdk_arc := $(vend_sdk_arc)-3_6
  endif

  ifeq (1,$(BLD_L7_TARGETOS_LINUX_3x))
    vend_sdk_arc := $(vend_sdk_arc)-3_x
  endif
endif

ifeq (1,$(BLD_L7_TARGETOS_VXWORKS))
  vend_sdk_arc := $(out_vend_sdk)/$(L7_TARGETOS)-$(L7_CPU)
endif

ifeq (1,$(BLD_L7_TARGETOS_ECOS))
  vend_sdk_arc := $(out_vend_sdk)/$(L7_TARGETOS)-$(L7_CPU)
endif

# Define list of kernel modules to build (if any).
#
ifeq (1,$(BLD_L7_TARGETOS_LINUX))
  krnl_module_list := $(filter %.ko,$(L7_MODULE_LIST))
endif

# A linuxhost 'sim' target trumps the L7_TARGETOS, override the value set above.
#
ifeq (1,$(BLD_L7_CPU_LINUXHOST))
  vend_sdk_arc := $(out_vend_sdk)/unix-$(L7_CPU)
endif

# Temp file names.
#
temp1     := $(FP_BASE)/$(out_vend_sdk)/_templist1_sdk
temp_out1 := $(FP_BASE)/$(out_vend_sdk)/$(sdk_build_file_name).tmp
temp_out2 := $(SDK_FLAGS_TEMP_FILE)


ifneq (,$(COPYING_MSG))
  copying_msg1 = $(patsubst @%,%,$(COPYING_MSG)) "$(SPACE)$$i to $(OUT_TARGET)" ;
endif


.PHONY: clean


# Clean vendor output archives and directories
#
# Note: No need to invoke the vendor make system here, since it is more efficient
#       to simply delete all of the output files directly.
#
clean::
	@echo "Removing vendor archive directories: $(out_vend_sdk)" $(HUSH)
	+$(DBG)[ ! -d $(FP_BASE)/$(out_vend_sdk) ] || $(RM) -r $(FP_BASE)/$(out_vend_sdk)
	$(DBG) for i in $(krnl_module_list) ; \
	do \
		$(RM) $(FP_BASE)/$(OUT_TARGET)/$$i ; \
	done


# Note:  Must ensure all output directories used by the vendor make system exist
#        prior to invoking the vendor make file.
#

$(SDK_BUILD_FILE):
	@echo "============================== THIS IS SDK-ALL-6.5.5 =============================="
	@echo "Building vendor SDK" $(HUSH)
	+$(DBG)[ -d $(FP_BASE)/$(out_vend_sdk) ] || mkdir -p $(FP_BASE)/$(out_vend_sdk)
	+$(DBG)[ -d $(FP_BASE)/$(OUT_TARGET) ] || mkdir -p $(FP_BASE)/$(OUT_TARGET)
    # Invoke vendor SDK make system to build all of its files.
	+$(DBG)$(MAKE) -C $(FP_BASE)/$(BROADCOM_SDK) -f ./make/make.sdk bldlib $(vend_logging)
    # Copy the kernel modules to the desired output location
    # (it's done this way so the modules can be found and re-copied after a 'cleanexe').
	$(DBG) for i in $(krnl_module_list) ; \
	do \
		if ! cmp -s $(FP_BASE)/$(out_vend_sdk)/$$i $(FP_BASE)/$(OUT_TARGET)/$$i ; \
		then \
			$(copying_msg1) \
			cp -f $(FP_BASE)/$(out_vend_sdk)/$$i $(FP_BASE)/$(OUT_TARGET) ; \
		fi ; \
	done
    # Build list of vendor archive files and store results in a temp file.
    # Create dependency list and build rule from content file list.
	-$(DBG) $(RM) $(temp1)
	$(DBG) touch $(temp1)
	$(DBG) echo -n -e "LIBARCS := " > $(temp_out1)
	$(DBG) find $(FP_BASE)/$(vend_sdk_arc) -maxdepth 1 -type f -name "*.a" -fprintf $(temp1) "%p "
	$(DBG) cat $(temp1) >> $(temp_out1)
	-$(DBG) $(RM) $(temp1)
	$(DBG) cp -f $(temp_out1) $@
	-$(DBG) $(RM) $(temp_out1)

$(SDK_FLAGS_FILE):
	@echo "Building SDK flags file" $(HUSH)
	+$(DBG)[ -d $(FP_BASE)/$(out_vend_sdk) ] || mkdir -p $(FP_BASE)/$(out_vend_sdk)
	-$(DBG) $(RM) $(temp_out2)
    # Invoke vendor SDK make system to create CFLAGS_SDK variable in $(SDK_FLAGS_TEMP_FILE).
	+$(DBG)$(MAKE) -C $(FP_BASE)/$(BROADCOM_SDK) -f ./make/make.sdk get_sdk_flags $(vend_logging)
	$(DBG) cp -f $(temp_out2) $@
	-$(DBG) $(RM) $(temp_out2)

