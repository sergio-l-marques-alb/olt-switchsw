/** \file dnx_data_oam.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_OAM_H_
/*{*/
#define _DNX_DATA_OAM_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_oam.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_oam
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_oam_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * general oam constants
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_oam_general_feature_nof
} dnx_data_oam_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_oam_general_feature_get_f) (
    int unit,
    dnx_data_oam_general_feature_e feature);

/**
 * \brief returns define data of oam_nof_non_acc_action_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_non_acc_action_profiles'
 * Number of profiles for non-accelerated OAM endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_non_acc_action_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_non_acc_action_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_acc_action_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_acc_action_profiles'
 * Number of profiles for accelerated OAM endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_acc_action_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_acc_action_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_bits_non_acc_action_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_non_acc_action_profiles'
 * Number of bits needed for profiles for non-accelerated OAM endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_non_acc_action_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_bits_non_acc_action_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_bits_acc_action_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_acc_action_profiles'
 * Number of bits needed for profiles for accelerated OAM endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_acc_action_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_bits_acc_action_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_bits_oam_lif_db_key_base_ingress
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_oam_lif_db_key_base_ingress'
 * Number of bits used in ingress LIF DB and Acc MEP DB tables for LIF ID key
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_oam_lif_db_key_base_ingress - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_bits_oam_lif_db_key_base_ingress_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_bits_oam_lif_db_key_base_egress
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_oam_lif_db_key_base_egress'
 * Number of bits used in egress LIF DB and Acc MEP DB tables for LIF ID key
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_oam_lif_db_key_base_egress - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_bits_oam_lif_db_key_base_egress_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_endpoints
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_endpoints'
 * Number of OAM endpoints that may be allocated
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_endpoints_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_oamp_meps
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_oamp_meps'
 * Number of endpoints that may be defined in the OAMP.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_oamp_meps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_oamp_meps_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_groups
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_groups'
 * Number of oam groups in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_groups - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_groups_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_entries_oam_lif_db
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_entries_oam_lif_db'
 * Number of OAM lifs that may be defined
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_entries_oam_lif_db - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_entries_oam_lif_db_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_bits_counter_base
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_counter_base'
 * Number of bits in counter base field in OAM-LIF-DB payload
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_counter_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_bits_counter_base_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_punt_error_codes
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_punt_error_codes'
 * Number of error codes supported by punt feature
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_punt_error_codes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_punt_error_codes_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_priority_map_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_priority_map_profiles'
 * Number of priority map profiles supported (egress tc to pcp mapping)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_priority_map_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_nof_priority_map_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of oam_force_interface_for_meps_without_counter
 * Module - 'oam', Submodule - 'general', data - 'oam_force_interface_for_meps_without_counter'
 * HW Bug - Egress doesnt support counter_if 3 as invalid. JR2_A0 only!
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_force_interface_for_meps_without_counter - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_general_oam_force_interface_for_meps_without_counter_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_OAM - GENERAL:
 * {
 */
/**
 * \brief Interface for oam general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_oam_general_feature_get_f feature_get;
    /**
     * returns define data of oam_nof_non_acc_action_profiles
     */
    dnx_data_oam_general_oam_nof_non_acc_action_profiles_get_f oam_nof_non_acc_action_profiles_get;
    /**
     * returns define data of oam_nof_acc_action_profiles
     */
    dnx_data_oam_general_oam_nof_acc_action_profiles_get_f oam_nof_acc_action_profiles_get;
    /**
     * returns define data of oam_nof_bits_non_acc_action_profiles
     */
    dnx_data_oam_general_oam_nof_bits_non_acc_action_profiles_get_f oam_nof_bits_non_acc_action_profiles_get;
    /**
     * returns define data of oam_nof_bits_acc_action_profiles
     */
    dnx_data_oam_general_oam_nof_bits_acc_action_profiles_get_f oam_nof_bits_acc_action_profiles_get;
    /**
     * returns define data of oam_nof_bits_oam_lif_db_key_base_ingress
     */
    dnx_data_oam_general_oam_nof_bits_oam_lif_db_key_base_ingress_get_f oam_nof_bits_oam_lif_db_key_base_ingress_get;
    /**
     * returns define data of oam_nof_bits_oam_lif_db_key_base_egress
     */
    dnx_data_oam_general_oam_nof_bits_oam_lif_db_key_base_egress_get_f oam_nof_bits_oam_lif_db_key_base_egress_get;
    /**
     * returns define data of oam_nof_endpoints
     */
    dnx_data_oam_general_oam_nof_endpoints_get_f oam_nof_endpoints_get;
    /**
     * returns define data of oam_nof_oamp_meps
     */
    dnx_data_oam_general_oam_nof_oamp_meps_get_f oam_nof_oamp_meps_get;
    /**
     * returns define data of oam_nof_groups
     */
    dnx_data_oam_general_oam_nof_groups_get_f oam_nof_groups_get;
    /**
     * returns define data of oam_nof_entries_oam_lif_db
     */
    dnx_data_oam_general_oam_nof_entries_oam_lif_db_get_f oam_nof_entries_oam_lif_db_get;
    /**
     * returns define data of oam_nof_bits_counter_base
     */
    dnx_data_oam_general_oam_nof_bits_counter_base_get_f oam_nof_bits_counter_base_get;
    /**
     * returns define data of oam_nof_punt_error_codes
     */
    dnx_data_oam_general_oam_nof_punt_error_codes_get_f oam_nof_punt_error_codes_get;
    /**
     * returns define data of oam_nof_priority_map_profiles
     */
    dnx_data_oam_general_oam_nof_priority_map_profiles_get_f oam_nof_priority_map_profiles_get;
    /**
     * returns define data of oam_force_interface_for_meps_without_counter
     */
    dnx_data_oam_general_oam_force_interface_for_meps_without_counter_get_f oam_force_interface_for_meps_without_counter_get;
} dnx_data_if_oam_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - OAMP:
 * oamp related consts
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_oam_oamp_feature_nof
} dnx_data_oam_oamp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_oam_oamp_feature_get_f) (
    int unit,
    dnx_data_oam_oamp_feature_e feature);

/**
 * \brief returns define data of nof_mep_db_entry_banks
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_entry_banks'
 * Number of entry banks for OAMP MEP DB
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_entry_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_nof_mep_db_entry_banks_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mep_db_entries_per_bank
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_entries_per_bank'
 * Number of entries per bank for OAMP MEP DB
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_entries_per_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_nof_mep_db_entries_per_bank_get_f) (
    int unit);

/**
 * \brief returns define data of scan_rate_bank_exist
 * Module - 'oam', Submodule - 'oamp', data - 'scan_rate_bank_exist'
 * In JER_A0 different scan rate not supported.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     scan_rate_bank_exist - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_scan_rate_bank_exist_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mep_db_entries
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_entries'
 * Total number of entries in OAMP MEP DB
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_nof_mep_db_entries_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_endpoint_id
 * Module - 'oam', Submodule - 'oamp', data - 'max_nof_endpoint_id'
 * Maximal number of endpoints ID that could be created
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_endpoint_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_max_nof_endpoint_id_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_mep_id
 * Module - 'oam', Submodule - 'oamp', data - 'max_nof_mep_id'
 * Maiximal number of possible MEP-ID's(size of MEP_DB table).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_mep_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_max_nof_mep_id_get_f) (
    int unit);

/**
 * \brief returns define data of max_value_of_mep_id
 * Module - 'oam', Submodule - 'oamp', data - 'max_value_of_mep_id'
 * Maximal value of OAM ID (upper limit of table key)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_value_of_mep_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_max_value_of_mep_id_get_f) (
    int unit);

/**
 * \brief returns define data of nof_umc
 * Module - 'oam', Submodule - 'oamp', data - 'nof_umc'
 * Number of maximum Unique MEG-ID Codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_umc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_nof_umc_get_f) (
    int unit);

/**
 * \brief returns define data of mep_id_nof_bits
 * Module - 'oam', Submodule - 'oamp', data - 'mep_id_nof_bits'
 * Number of bits in 'OAM_ID' of an OAM/BFD accelerated endpoint
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_id_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_mep_id_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mep_db_entry_banks_for_endpoints
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_entry_banks_for_endpoints'
 * Number of entry banks in OAMP MEP DB that can contain endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_entry_banks_for_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_nof_mep_db_entry_banks_for_endpoints_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mep_db_endpoint_entries
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_endpoint_entries'
 * Number of entries in OAMP MEP DB that can contain endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_endpoint_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_nof_mep_db_endpoint_entries_get_f) (
    int unit);

/**
 * \brief returns define data of mep_db_da_is_mc_for_short_entries_support
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_da_is_mc_for_short_entries_support'
 * DA_is_MC bug in A0 is fixed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_da_is_mc_for_short_entries_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_mep_db_da_is_mc_for_short_entries_support_get_f) (
    int unit);

/**
 * \brief returns define data of nof_icc_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'nof_icc_profiles'
 * Number of ICC profiles in OAMP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_icc_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_nof_icc_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of local_port_2_system_port_size
 * Module - 'oam', Submodule - 'oamp', data - 'local_port_2_system_port_size'
 * Size of local to system port table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     local_port_2_system_port_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_local_port_2_system_port_size_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_sa_mac_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'oam_nof_sa_mac_profiles'
 * Number of sa mac profiles(33msb)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_sa_mac_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oam_nof_sa_mac_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_da_mac_msb_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'oam_nof_da_mac_msb_profiles'
 * Number of da mac msb profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_da_mac_msb_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oam_nof_da_mac_msb_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_da_mac_lsb_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'oam_nof_da_mac_lsb_profiles'
 * Number of da mac lsb profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_da_mac_lsb_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oam_nof_da_mac_lsb_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of oam_nof_tpid_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'oam_nof_tpid_profiles'
 * Number of tpid profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_tpid_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oam_nof_tpid_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of oamp_pe_default_instruction_index
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_pe_default_instruction_index'
 * index of default instruction
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_pe_default_instruction_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oamp_pe_default_instruction_index_get_f) (
    int unit);

/**
 * \brief returns define data of oamp_pe_max_nof_instructions
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_pe_max_nof_instructions'
 * maximal number of instructions to execute in single program
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_pe_max_nof_instructions - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oamp_pe_max_nof_instructions_get_f) (
    int unit);

/**
 * \brief returns define data of oamp_pe_nof_fem_bits
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_pe_nof_fem_bits'
 * number of bits that each FEM configures
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_pe_nof_fem_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oamp_pe_nof_fem_bits_get_f) (
    int unit);

/**
 * \brief returns define data of mep_db_sub_entry_size
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_sub_entry_size'
 * Number of bits in OAMP MEP DB sub-entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_sub_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_mep_db_sub_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of mep_db_nof_sub_entries
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_nof_sub_entries'
 * Number of sub-entries each full entry in OAMP MEP DB
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_nof_sub_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_mep_db_nof_sub_entries_get_f) (
    int unit);

/**
 * \brief returns define data of mep_db_full_entry_size
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_full_entry_size'
 * Number of bits in OAMP MEP DB full entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_full_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_mep_db_full_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of mep_pe_profile_nof_bits
 * Module - 'oam', Submodule - 'oamp', data - 'mep_pe_profile_nof_bits'
 * Size of MEP PE profile
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_pe_profile_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_mep_pe_profile_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_db_entries_nof_bits
 * Module - 'oam', Submodule - 'oamp', data - 'rmep_db_entries_nof_bits'
 * Number of bits used for remote MEP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_db_entries_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_rmep_db_entries_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_max_self_contained
 * Module - 'oam', Submodule - 'oamp', data - 'rmep_max_self_contained'
 * Number of maximum self contained RMEP's
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_max_self_contained - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_rmep_max_self_contained_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_sys_clocks
 * Module - 'oam', Submodule - 'oamp', data - 'rmep_sys_clocks'
 * Number of system clocks required for single RMEP scan
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_sys_clocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_rmep_sys_clocks_get_f) (
    int unit);

/**
 * \brief returns define data of mep_db_version_limitation
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_version_limitation'
 * HW bug: MEP type field for all short entries is read from sub-index 0. JR2_A0 only!
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_version_limitation - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_mep_db_version_limitation_get_f) (
    int unit);

/**
 * \brief returns define data of oamp_mep_db_threshold_version_limitation
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_mep_db_threshold_version_limitation'
 * HW bug: oamp_mep_db_threshold could be set to 0 or 64k. JR2_A0 only!
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_mep_db_threshold_version_limitation - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oamp_mep_db_threshold_version_limitation_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_db_non_zero_lifetime_units_limitation
 * Module - 'oam', Submodule - 'oamp', data - 'rmep_db_non_zero_lifetime_units_limitation'
 * HW bug: OAMP_RMEP_DB lifetime units cannot be set to non-zero value. JR2_A0 only!
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_db_non_zero_lifetime_units_limitation - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_rmep_db_non_zero_lifetime_units_limitation_get_f) (
    int unit);

/**
 * \brief returns define data of crc_calculation_supported
 * Module - 'oam', Submodule - 'oamp', data - 'crc_calculation_supported'
 * HW bug: CRC calculation fails - JR2_A0 only!  Works for B0 and up
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     crc_calculation_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_crc_calculation_supported_get_f) (
    int unit);

/**
 * \brief returns define data of modified_mep_db_structure
 * Module - 'oam', Submodule - 'oamp', data - 'modified_mep_db_structure'
 * Differntiates betweeen JR2 A0 structure and B0 and up structure
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     modified_mep_db_structure - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_modified_mep_db_structure_get_f) (
    int unit);

/**
 * \brief returns define data of local_port_2_system_port_bits
 * Module - 'oam', Submodule - 'oamp', data - 'local_port_2_system_port_bits'
 * Number of bits in local to system port field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     local_port_2_system_port_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_local_port_2_system_port_bits_get_f) (
    int unit);

/**
 * \brief returns define data of port_core_bits
 * Module - 'oam', Submodule - 'oamp', data - 'port_core_bits'
 * Number of bits in PORT CORE dbal field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_core_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_port_core_bits_get_f) (
    int unit);

/**
 * \brief returns define data of mdb_nof_access_ids
 * Module - 'oam', Submodule - 'oamp', data - 'mdb_nof_access_ids'
 * number of access ids per mdb entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_nof_access_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_mdb_nof_access_ids_get_f) (
    int unit);

/**
 * \brief returns define data of bfd_mpls_short_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'bfd_mpls_short_mdb_reserved_bits'
 * Number of bits in reserved field in mdb bfd over MPLS 1/4 entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_mpls_short_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_bfd_mpls_short_mdb_reserved_bits_get_f) (
    int unit);

/**
 * \brief returns define data of bfd_m_hop_short_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'bfd_m_hop_short_mdb_reserved_bits'
 * Number of bits in reserved field in mdb bfd over multi-hop IPv4 1/4 entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_m_hop_short_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_bfd_m_hop_short_mdb_reserved_bits_get_f) (
    int unit);

/**
 * \brief returns define data of bfd_pwe_short_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'bfd_pwe_short_mdb_reserved_bits'
 * Number of bits in reserved field in mdb bfd over PWE 1/4 entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_pwe_short_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_bfd_pwe_short_mdb_reserved_bits_get_f) (
    int unit);

/**
 * \brief returns define data of ccm_eth_offload_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'ccm_eth_offload_mdb_reserved_bits'
 * Number of bits reserved field in mdb CCM ethernet LM/DM offloaded entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ccm_eth_offload_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_ccm_eth_offload_mdb_reserved_bits_get_f) (
    int unit);

/**
 * \brief returns define data of bfd_1_hop_short_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'bfd_1_hop_short_mdb_reserved_bits'
 * Number of bits in reserved field in mdb bfd over single-hop IPv4 1/4 entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_1_hop_short_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_bfd_1_hop_short_mdb_reserved_bits_get_f) (
    int unit);

/**
 * \brief returns define data of ccm_mpls_tp_pwe_offload_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'ccm_mpls_tp_pwe_offload_mdb_reserved_bits'
 * Number of bits reserved field in mdb CCM over MPLS-TP/PWE LM/DM offloaded entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ccm_mpls_tp_pwe_offload_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_ccm_mpls_tp_pwe_offload_mdb_reserved_bits_get_f) (
    int unit);

/**
 * \brief returns define data of punt_packet_destination_size
 * Module - 'oam', Submodule - 'oamp', data - 'punt_packet_destination_size'
 * Number of bits in the destination fields in the OAMP_CPUPORT register
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     punt_packet_destination_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_punt_packet_destination_size_get_f) (
    int unit);

/**
 * \brief returns define data of punt_packet_pph_ttl_supported
 * Module - 'oam', Submodule - 'oamp', data - 'punt_packet_pph_ttl_supported'
 * HW bug: punt packet pph's ttl calculation is wrong - JR2_A0 only!  Works for B0 and up
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     punt_packet_pph_ttl_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_punt_packet_pph_ttl_supported_get_f) (
    int unit);

/**
 * \brief returns define data of lmm_dmm_supported
 * Module - 'oam', Submodule - 'oamp', data - 'lmm_dmm_supported'
 * HW bug: oamp lmm and dmm don't work - JR2_A0 only!  Works for B0 and up
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lmm_dmm_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_lmm_dmm_supported_get_f) (
    int unit);

/**
 * \brief returns numeric data of oamp_nof_scan_rmep_db_entries
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_nof_scan_rmep_db_entries'
 * Number of remote MEPs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_nof_scan_rmep_db_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oamp_nof_scan_rmep_db_entries_get_f) (
    int unit);

/**
 * \brief returns numeric data of oamp_mep_full_entry_threshold
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_mep_full_entry_threshold'
 * MEP DB Full Entry Threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_mep_full_entry_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oamp_mep_full_entry_threshold_get_f) (
    int unit);

/**
 * \brief returns numeric data of oamp_rmep_full_entry_threshold
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_rmep_full_entry_threshold'
 * RMEP DB Full Entry Threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_rmep_full_entry_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_oamp_oamp_rmep_full_entry_threshold_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_OAM - OAMP:
 * {
 */
/**
 * \brief Interface for oam oamp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_oam_oamp_feature_get_f feature_get;
    /**
     * returns define data of nof_mep_db_entry_banks
     */
    dnx_data_oam_oamp_nof_mep_db_entry_banks_get_f nof_mep_db_entry_banks_get;
    /**
     * returns define data of nof_mep_db_entries_per_bank
     */
    dnx_data_oam_oamp_nof_mep_db_entries_per_bank_get_f nof_mep_db_entries_per_bank_get;
    /**
     * returns define data of scan_rate_bank_exist
     */
    dnx_data_oam_oamp_scan_rate_bank_exist_get_f scan_rate_bank_exist_get;
    /**
     * returns define data of nof_mep_db_entries
     */
    dnx_data_oam_oamp_nof_mep_db_entries_get_f nof_mep_db_entries_get;
    /**
     * returns define data of max_nof_endpoint_id
     */
    dnx_data_oam_oamp_max_nof_endpoint_id_get_f max_nof_endpoint_id_get;
    /**
     * returns define data of max_nof_mep_id
     */
    dnx_data_oam_oamp_max_nof_mep_id_get_f max_nof_mep_id_get;
    /**
     * returns define data of max_value_of_mep_id
     */
    dnx_data_oam_oamp_max_value_of_mep_id_get_f max_value_of_mep_id_get;
    /**
     * returns define data of nof_umc
     */
    dnx_data_oam_oamp_nof_umc_get_f nof_umc_get;
    /**
     * returns define data of mep_id_nof_bits
     */
    dnx_data_oam_oamp_mep_id_nof_bits_get_f mep_id_nof_bits_get;
    /**
     * returns define data of nof_mep_db_entry_banks_for_endpoints
     */
    dnx_data_oam_oamp_nof_mep_db_entry_banks_for_endpoints_get_f nof_mep_db_entry_banks_for_endpoints_get;
    /**
     * returns define data of nof_mep_db_endpoint_entries
     */
    dnx_data_oam_oamp_nof_mep_db_endpoint_entries_get_f nof_mep_db_endpoint_entries_get;
    /**
     * returns define data of mep_db_da_is_mc_for_short_entries_support
     */
    dnx_data_oam_oamp_mep_db_da_is_mc_for_short_entries_support_get_f mep_db_da_is_mc_for_short_entries_support_get;
    /**
     * returns define data of nof_icc_profiles
     */
    dnx_data_oam_oamp_nof_icc_profiles_get_f nof_icc_profiles_get;
    /**
     * returns define data of local_port_2_system_port_size
     */
    dnx_data_oam_oamp_local_port_2_system_port_size_get_f local_port_2_system_port_size_get;
    /**
     * returns define data of oam_nof_sa_mac_profiles
     */
    dnx_data_oam_oamp_oam_nof_sa_mac_profiles_get_f oam_nof_sa_mac_profiles_get;
    /**
     * returns define data of oam_nof_da_mac_msb_profiles
     */
    dnx_data_oam_oamp_oam_nof_da_mac_msb_profiles_get_f oam_nof_da_mac_msb_profiles_get;
    /**
     * returns define data of oam_nof_da_mac_lsb_profiles
     */
    dnx_data_oam_oamp_oam_nof_da_mac_lsb_profiles_get_f oam_nof_da_mac_lsb_profiles_get;
    /**
     * returns define data of oam_nof_tpid_profiles
     */
    dnx_data_oam_oamp_oam_nof_tpid_profiles_get_f oam_nof_tpid_profiles_get;
    /**
     * returns define data of oamp_pe_default_instruction_index
     */
    dnx_data_oam_oamp_oamp_pe_default_instruction_index_get_f oamp_pe_default_instruction_index_get;
    /**
     * returns define data of oamp_pe_max_nof_instructions
     */
    dnx_data_oam_oamp_oamp_pe_max_nof_instructions_get_f oamp_pe_max_nof_instructions_get;
    /**
     * returns define data of oamp_pe_nof_fem_bits
     */
    dnx_data_oam_oamp_oamp_pe_nof_fem_bits_get_f oamp_pe_nof_fem_bits_get;
    /**
     * returns define data of mep_db_sub_entry_size
     */
    dnx_data_oam_oamp_mep_db_sub_entry_size_get_f mep_db_sub_entry_size_get;
    /**
     * returns define data of mep_db_nof_sub_entries
     */
    dnx_data_oam_oamp_mep_db_nof_sub_entries_get_f mep_db_nof_sub_entries_get;
    /**
     * returns define data of mep_db_full_entry_size
     */
    dnx_data_oam_oamp_mep_db_full_entry_size_get_f mep_db_full_entry_size_get;
    /**
     * returns define data of mep_pe_profile_nof_bits
     */
    dnx_data_oam_oamp_mep_pe_profile_nof_bits_get_f mep_pe_profile_nof_bits_get;
    /**
     * returns define data of rmep_db_entries_nof_bits
     */
    dnx_data_oam_oamp_rmep_db_entries_nof_bits_get_f rmep_db_entries_nof_bits_get;
    /**
     * returns define data of rmep_max_self_contained
     */
    dnx_data_oam_oamp_rmep_max_self_contained_get_f rmep_max_self_contained_get;
    /**
     * returns define data of rmep_sys_clocks
     */
    dnx_data_oam_oamp_rmep_sys_clocks_get_f rmep_sys_clocks_get;
    /**
     * returns define data of mep_db_version_limitation
     */
    dnx_data_oam_oamp_mep_db_version_limitation_get_f mep_db_version_limitation_get;
    /**
     * returns define data of oamp_mep_db_threshold_version_limitation
     */
    dnx_data_oam_oamp_oamp_mep_db_threshold_version_limitation_get_f oamp_mep_db_threshold_version_limitation_get;
    /**
     * returns define data of rmep_db_non_zero_lifetime_units_limitation
     */
    dnx_data_oam_oamp_rmep_db_non_zero_lifetime_units_limitation_get_f rmep_db_non_zero_lifetime_units_limitation_get;
    /**
     * returns define data of crc_calculation_supported
     */
    dnx_data_oam_oamp_crc_calculation_supported_get_f crc_calculation_supported_get;
    /**
     * returns define data of modified_mep_db_structure
     */
    dnx_data_oam_oamp_modified_mep_db_structure_get_f modified_mep_db_structure_get;
    /**
     * returns define data of local_port_2_system_port_bits
     */
    dnx_data_oam_oamp_local_port_2_system_port_bits_get_f local_port_2_system_port_bits_get;
    /**
     * returns define data of port_core_bits
     */
    dnx_data_oam_oamp_port_core_bits_get_f port_core_bits_get;
    /**
     * returns define data of mdb_nof_access_ids
     */
    dnx_data_oam_oamp_mdb_nof_access_ids_get_f mdb_nof_access_ids_get;
    /**
     * returns define data of bfd_mpls_short_mdb_reserved_bits
     */
    dnx_data_oam_oamp_bfd_mpls_short_mdb_reserved_bits_get_f bfd_mpls_short_mdb_reserved_bits_get;
    /**
     * returns define data of bfd_m_hop_short_mdb_reserved_bits
     */
    dnx_data_oam_oamp_bfd_m_hop_short_mdb_reserved_bits_get_f bfd_m_hop_short_mdb_reserved_bits_get;
    /**
     * returns define data of bfd_pwe_short_mdb_reserved_bits
     */
    dnx_data_oam_oamp_bfd_pwe_short_mdb_reserved_bits_get_f bfd_pwe_short_mdb_reserved_bits_get;
    /**
     * returns define data of ccm_eth_offload_mdb_reserved_bits
     */
    dnx_data_oam_oamp_ccm_eth_offload_mdb_reserved_bits_get_f ccm_eth_offload_mdb_reserved_bits_get;
    /**
     * returns define data of bfd_1_hop_short_mdb_reserved_bits
     */
    dnx_data_oam_oamp_bfd_1_hop_short_mdb_reserved_bits_get_f bfd_1_hop_short_mdb_reserved_bits_get;
    /**
     * returns define data of ccm_mpls_tp_pwe_offload_mdb_reserved_bits
     */
    dnx_data_oam_oamp_ccm_mpls_tp_pwe_offload_mdb_reserved_bits_get_f ccm_mpls_tp_pwe_offload_mdb_reserved_bits_get;
    /**
     * returns define data of punt_packet_destination_size
     */
    dnx_data_oam_oamp_punt_packet_destination_size_get_f punt_packet_destination_size_get;
    /**
     * returns define data of punt_packet_pph_ttl_supported
     */
    dnx_data_oam_oamp_punt_packet_pph_ttl_supported_get_f punt_packet_pph_ttl_supported_get;
    /**
     * returns define data of lmm_dmm_supported
     */
    dnx_data_oam_oamp_lmm_dmm_supported_get_f lmm_dmm_supported_get;
    /**
     * returns numeric data of oamp_nof_scan_rmep_db_entries
     */
    dnx_data_oam_oamp_oamp_nof_scan_rmep_db_entries_get_f oamp_nof_scan_rmep_db_entries_get;
    /**
     * returns numeric data of oamp_mep_full_entry_threshold
     */
    dnx_data_oam_oamp_oamp_mep_full_entry_threshold_get_f oamp_mep_full_entry_threshold_get;
    /**
     * returns numeric data of oamp_rmep_full_entry_threshold
     */
    dnx_data_oam_oamp_oamp_rmep_full_entry_threshold_get_f oamp_rmep_full_entry_threshold_get;
} dnx_data_if_oam_oamp_t;

/*
 * }
 */

/*
 * SUBMODULE  - PROPERTY:
 * customer soc property
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_oam_property_feature_nof
} dnx_data_oam_property_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_oam_property_feature_get_f) (
    int unit,
    dnx_data_oam_property_feature_e feature);

/**
 * \brief returns numeric data of oam_injected_over_lsp_cnt
 * Module - 'oam', Submodule - 'property', data - 'oam_injected_over_lsp_cnt'
 * Count injected CCM packet over LSP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_injected_over_lsp_cnt - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_property_oam_injected_over_lsp_cnt_get_f) (
    int unit);

/**
 * \brief returns numeric data of oam_multiple_event_count_enable
 * Module - 'oam', Submodule - 'property', data - 'oam_multiple_event_count_enable'
 * Count multiple occurances of same event which exist in SW event hash table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_multiple_event_count_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_oam_property_oam_multiple_event_count_enable_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_OAM - PROPERTY:
 * {
 */
/**
 * \brief Interface for oam property data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_oam_property_feature_get_f feature_get;
    /**
     * returns numeric data of oam_injected_over_lsp_cnt
     */
    dnx_data_oam_property_oam_injected_over_lsp_cnt_get_f oam_injected_over_lsp_cnt_get;
    /**
     * returns numeric data of oam_multiple_event_count_enable
     */
    dnx_data_oam_property_oam_multiple_event_count_enable_get_f oam_multiple_event_count_enable_get;
} dnx_data_if_oam_property_t;

/*
 * }
 */

/*
 * SUBMODULE  - HW_BUG:
 * OAM-related HW bugs
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * HW bug: oam_offset is not used - JER2_A0 only!  Works for B0 and up
     */
    dnx_data_oam_hw_bug_oam_offset_supported,
    /**
     * HW bug: there needs to be a configuration per OAM-Sub-Type to either use the calculated lm_read_index, or set it to NULL. - JER2_A0 only!
     */
    dnx_data_oam_hw_bug_lm_read_index_limitation,
    /**
     * RMEP is unreliable in A0 device
     */
    dnx_data_oam_hw_bug_oamp_scanner_limitation,
    /**
     * HW bug: OAMP transmission rate is not accurate on JER2_A0 device
     */
    dnx_data_oam_hw_bug_oamp_tx_rate_limitation,

    /**
     * Must be last one!
     */
    _dnx_data_oam_hw_bug_feature_nof
} dnx_data_oam_hw_bug_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_oam_hw_bug_feature_get_f) (
    int unit,
    dnx_data_oam_hw_bug_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_OAM - HW_BUG:
 * {
 */
/**
 * \brief Interface for oam hw_bug data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_oam_hw_bug_feature_get_f feature_get;
} dnx_data_if_oam_hw_bug_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_OAM:
 * {
 */
/**
 * \brief Interface for oam data
 */
typedef struct
{
    /**
     * Interface for oam general data
     */
    dnx_data_if_oam_general_t general;
    /**
     * Interface for oam oamp data
     */
    dnx_data_if_oam_oamp_t oamp;
    /**
     * Interface for oam property data
     */
    dnx_data_if_oam_property_t property;
    /**
     * Interface for oam hw_bug data
     */
    dnx_data_if_oam_hw_bug_t hw_bug;
} dnx_data_if_oam_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_oam_t dnx_data_oam;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_OAM_H_*/
/* *INDENT-ON* */
