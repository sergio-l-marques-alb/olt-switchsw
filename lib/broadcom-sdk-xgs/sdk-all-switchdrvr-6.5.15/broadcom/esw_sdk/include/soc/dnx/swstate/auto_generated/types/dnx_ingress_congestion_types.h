/** \file dnx/swstate/auto_generated/types/dnx_ingress_congestion_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_INGRESS_CONGESTION_TYPES_H__
#define __DNX_INGRESS_CONGESTION_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/port/algo_port_mgmt.h>
#include <bcm_int/dnx/cosq/cosq.h>
#include <bcm_int/dnx/cosq/ingress/ingress_congestion.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_device.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_ingr_congestion.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_port.h>
#include <soc/dnxc/swstate/types/sw_state_res_mngr.h>
#include <soc/dnxc/swstate/types/sw_state_template_mngr.h>
/*
 * STRUCTs
 */

typedef struct {
    /**
     * Total VOQ quaranteed per resource type. Value is set in HW granularity.
     */
    uint32 voq_guaranteed[DNX_INGRESS_CONGESTION_RESOURCE_NOF];
    /**
     * Total VSQ quaranteed in HW units per (core, resource type)
     */
    uint32 vsq_guaranteed[DNX_DATA_MAX_DEVICE_GENERAL_MAX_NOF_CORES][DNX_INGRESS_CONGESTION_RESOURCE_NOF];
} dnx_ingress_congestion_guaranteed_t;

typedef struct {
    /**
     * Number of queues pointing to a rate class
     */
    uint32* ref_count;
    /**
     * is rate class created
     */
    uint32* is_created;
} dnx_ingress_congestion_voq_rate_class_info_t;

typedef struct {
    /**
     * Number of PGs in VSQ-F
     */
    uint32 pg_numq;
    /**
     * Source logical port id
     */
    int src_port;
} dnx_ingress_congestion_vsq_f_mapping_info_t;

typedef struct {
    /**
     * Source logical port id
     */
    int src_port;
} dnx_ingress_congestion_vsq_e_mapping_info_t;

typedef struct {
    /**
     * VSQ-E mapping info
     */
    dnx_ingress_congestion_vsq_e_mapping_info_t* vsq_e_mapping;
    /**
     * VSQ-F mapping info
     */
    dnx_ingress_congestion_vsq_f_mapping_info_t* vsq_f_mapping;
    /**
     * pool id of lossless VSQ pool
     */
    int lossless_pool_id;
} dnx_ingress_congestion_pb_vsq_info_t;

typedef struct {
    /**
     * VSQE_ID
     */
    sw_state_algo_res_t* vsqe_id;
    /**
     * VSQF_ID
     */
    sw_state_algo_res_t* vsqf_id;
} dnx_ingress_congestion_res_mngr_t;

typedef struct {
    /**
     * TEMPLATE_VSQ_RATE
     */
    sw_state_algo_template_t vsq_rate_cls_a_c[3];
    /**
     * TEMPLATE_VSQ_RATE
     */
    sw_state_algo_template_t vsq_rate_cls_d;
    /**
     * TEMPLATE_VSQ_RATE
     */
    sw_state_algo_template_t vsq_rate_cls_source_port;
    /**
     * TEMPLATE_VSQ_RATE
     */
    sw_state_algo_template_t vsq_rate_cls_pg;
} dnx_ingress_congestion_rate_class_template_t;

typedef struct {
    /**
     * DRAM bound thresholds, per resorce type (SRAM bytes, buffers, PDs)
     */
    bcm_cosq_fadt_threshold_t dram_bound_thresholds[DNX_INGRESS_CONGESTION_DRAM_BOUND_RESOURCE_NOF];
    /**
     * DRAM recovery fail thresholds, per resorce type (SRAM bytes, buffers, PDs)
     */
    bcm_cosq_fadt_threshold_t dram_recovery_fail_thresholds[DNX_INGRESS_CONGESTION_DRAM_BOUND_RESOURCE_NOF];
    /**
     * queue size threshold in HW granularity words to change VOQ to recovery mode
     */
    uint32 dram_recovery_threshold;
} dnx_cosq_ingress_dram_thresholds_t;

typedef struct {
    /**
     * FADT tail drop thresholds, per DP
     */
    bcm_cosq_fadt_threshold_t dp[DNX_COSQ_NOF_DP];
} dnx_cosq_ingress_fadt_tail_drop_thresholds_per_resource_t;

typedef struct {
    /**
     * FADT tail drop thresholds, per resource type (SRAM bytes, buffers, PDs)
     */
    dnx_cosq_ingress_fadt_tail_drop_thresholds_per_resource_t resource[DNX_INGRESS_CONGESTION_RESOURCE_NOF];
} dnx_cosq_ingress_fadt_tail_drop_thresholds_t;

typedef struct {
    /**
     * mutex to prevent race condition on dram bound access from different threads
     */
    sal_mutex_t dram_bound_mutex;
    /**
     * mutex to prevent race condition on fadt access from different threads
     */
    sal_mutex_t fadt_mutex;
    /**
     * when set, indicates DRAM is in use and threshold values should be written to HW.
     */
    int dram_in_use;
} dnx_cosq_ingress_sync_manager_t;

/**
 * DB for used by ingress congestion
 */
typedef struct {
    /**
     * VOQ rate class info
     */
    dnx_ingress_congestion_voq_rate_class_info_t voq_rate_class;
    /**
     * Guranteed info
     */
    dnx_ingress_congestion_guaranteed_t guaranteed;
    /**
     * VSQ info
     */
    dnx_ingress_congestion_pb_vsq_info_t* port_based_vsq;
    /**
     * SW State VSQ resources
     */
    dnx_ingress_congestion_res_mngr_t algo_res;
    /**
     * VSQ rate class allocation managers
     */
    dnx_ingress_congestion_rate_class_template_t vsq_rate_class;
    /**
     * TEMPLATE_VSQ_PG_TC_MAPPING
     */
    sw_state_algo_template_t vsq_pg_tc_mapping;
    /**
     * dram bound threshold per rate class
     */
    dnx_cosq_ingress_dram_thresholds_t* dram_thresholds;
    /**
     * fadt tail drop threshold per rate class
     */
    dnx_cosq_ingress_fadt_tail_drop_thresholds_t* fadt_tail_drop_thresholds;
    /**
     * manages sync between different threads
     */
    dnx_cosq_ingress_sync_manager_t sync_manager;
} dnx_ingress_congestion_db_t;


#endif /* __DNX_INGRESS_CONGESTION_TYPES_H__ */
