/** \file dnx_data_internal_nif.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_NIF_H_
/*{*/
#define _DNX_DATA_INTERNAL_NIF_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_nif.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_nif_submodule_global,
    dnx_data_nif_submodule_phys,
    dnx_data_nif_submodule_ilkn,
    dnx_data_nif_submodule_eth,
    dnx_data_nif_submodule_prd,
    dnx_data_nif_submodule_portmod,
    dnx_data_nif_submodule_schedulder,

    /**
     * Must be last one!
     */
    _dnx_data_nif_submodule_nof
} dnx_data_nif_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GLOBAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_nif_global_feature_get(
    int unit,
    dnx_data_nif_global_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_nif_global_define_nof_lcplls,
    dnx_data_nif_global_define_start_tx_threshold_global,

    /**
     * Must be last one!
     */
    _dnx_data_nif_global_define_nof
} dnx_data_nif_global_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_lcplls
 * Module - 'nif', Submodule - 'global', data - 'nof_lcplls'
 * number of lcplls supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lcplls - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_global_nof_lcplls_get(
    int unit);

/**
 * \brief returns numeric data of start_tx_threshold_global
 * Module - 'nif', Submodule - 'global', data - 'start_tx_threshold_global'
 * Global start TX threshold. This value overrides TX threshold table values
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     start_tx_threshold_global - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_global_start_tx_threshold_global_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_nif_global_table_pll_phys,
    dnx_data_nif_global_table_start_tx_threshold_table,

    /**
     * Must be last one!
     */
    _dnx_data_nif_global_table_nof
} dnx_data_nif_global_table_e;

/* Get Data */
/**
 * \brief get table pll_phys entry 
 * phys controlled by each lcpll
 * 
 * \param [in] unit - unit #
 * \param [in] lcpll - LCPLL index
 * 
 * \return
 *     pll_phys - returns the relevant entry values grouped in struct - see dnx_data_nif_global_pll_phys_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_global_pll_phys_t * dnx_data_nif_global_pll_phys_get(
    int unit,
    int lcpll);

/**
 * \brief get table start_tx_threshold_table entry 
 * TX threshold table of values per speed
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Entry index
 * 
 * \return
 *     start_tx_threshold_table - returns the relevant entry values grouped in struct - see dnx_data_nif_global_start_tx_threshold_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_global_start_tx_threshold_table_t * dnx_data_nif_global_start_tx_threshold_table_get(
    int unit,
    int idx);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'global', table - 'pll_phys'
 * phys controlled by each lcpll
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_global_pll_phys_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'global', table - 'start_tx_threshold_table'
 * TX threshold table of values per speed
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_global_start_tx_threshold_table_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)pll_phys info
 * phys controlled by each lcpll
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll_phys - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_global_pll_phys_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)start_tx_threshold_table info
 * TX threshold table of values per speed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     start_tx_threshold_table - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_global_start_tx_threshold_table_info_get(
    int unit);

/*
 * SUBMODULE PHYS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_nif_phys_feature_get(
    int unit,
    dnx_data_nif_phys_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_nif_phys_define_nof_phys,
    dnx_data_nif_phys_define_nof_phys_per_core,
    dnx_data_nif_phys_define_nof_pms,
    dnx_data_nif_phys_define_vco_div,

    /**
     * Must be last one!
     */
    _dnx_data_nif_phys_define_nof
} dnx_data_nif_phys_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_phys
 * Module - 'nif', Submodule - 'phys', data - 'nof_phys'
 * number of phys supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phys - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_phys_nof_phys_get(
    int unit);

/**
 * \brief returns define data of nof_phys_per_core
 * Module - 'nif', Submodule - 'phys', data - 'nof_phys_per_core'
 * number of phys per core supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phys_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_phys_nof_phys_per_core_get(
    int unit);

/**
 * \brief returns define data of nof_pms
 * Module - 'nif', Submodule - 'phys', data - 'nof_pms'
 * number of PMs supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pms - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_phys_nof_pms_get(
    int unit);

/**
 * \brief returns define data of vco_div
 * Module - 'nif', Submodule - 'phys', data - 'vco_div'
 * VCO divider
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vco_div - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_phys_vco_div_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_nif_phys_table_general,
    dnx_data_nif_phys_table_polarity,
    dnx_data_nif_phys_table_core_phys_map,

    /**
     * Must be last one!
     */
    _dnx_data_nif_phys_table_nof
} dnx_data_nif_phys_table_e;

/* Get Data */
/**
 * \brief get table general entry 
 * general data about phys
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     general - returns the relevant entry values grouped in struct - see dnx_data_nif_phys_general_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_phys_general_t * dnx_data_nif_phys_general_get(
    int unit);

/**
 * \brief get table polarity entry 
 * rx and tx polarity per lane
 * 
 * \param [in] unit - unit #
 * \param [in] lane_index - lane index (0-based)
 * 
 * \return
 *     polarity - returns the relevant entry values grouped in struct - see dnx_data_nif_phys_polarity_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_phys_polarity_t * dnx_data_nif_phys_polarity_get(
    int unit,
    int lane_index);

/**
 * \brief get table core_phys_map entry 
 * map pipeline core to connected PHYs
 * 
 * \param [in] unit - unit #
 * \param [in] core_index - Core number.
 * 
 * \return
 *     core_phys_map - returns the relevant entry values grouped in struct - see dnx_data_nif_phys_core_phys_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_phys_core_phys_map_t * dnx_data_nif_phys_core_phys_map_get(
    int unit,
    int core_index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'phys', table - 'general'
 * general data about phys
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_phys_general_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'phys', table - 'polarity'
 * rx and tx polarity per lane
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_phys_polarity_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'phys', table - 'core_phys_map'
 * map pipeline core to connected PHYs
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_phys_core_phys_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)general info
 * general data about phys
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     general - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_phys_general_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)polarity info
 * rx and tx polarity per lane
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     polarity - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_phys_polarity_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)core_phys_map info
 * map pipeline core to connected PHYs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_phys_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_phys_core_phys_map_info_get(
    int unit);

/*
 * SUBMODULE ILKN:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_nif_ilkn_feature_get(
    int unit,
    dnx_data_nif_ilkn_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_nif_ilkn_define_ilkn_unit_nof,
    dnx_data_nif_ilkn_define_ilkn_unit_if_nof,
    dnx_data_nif_ilkn_define_ilkn_if_nof,
    dnx_data_nif_ilkn_define_lanes_max_nof,
    dnx_data_nif_ilkn_define_lanes_allowed_nof,
    dnx_data_nif_ilkn_define_ilkn_over_eth_pms_max,
    dnx_data_nif_ilkn_define_segments_max_nof,
    dnx_data_nif_ilkn_define_watermark_high,
    dnx_data_nif_ilkn_define_watermark_low,
    dnx_data_nif_ilkn_define_pms_nof,
    dnx_data_nif_ilkn_define_fmac_bus_size,

    /**
     * Must be last one!
     */
    _dnx_data_nif_ilkn_define_nof
} dnx_data_nif_ilkn_define_e;

/* Get Data */
/**
 * \brief returns define data of ilkn_unit_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_unit_nof'
 * Number of ILKN units in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_unit_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_ilkn_unit_nof_get(
    int unit);

/**
 * \brief returns define data of ilkn_unit_if_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_unit_if_nof'
 * Number of ILKN Interfaces in each ILKN unit
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_unit_if_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_ilkn_unit_if_nof_get(
    int unit);

/**
 * \brief returns define data of ilkn_if_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_if_nof'
 * Number of ILKN Interfaces in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_if_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_ilkn_if_nof_get(
    int unit);

/**
 * \brief returns define data of lanes_max_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'lanes_max_nof'
 * Max number of lanes for ILKN port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lanes_max_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_lanes_max_nof_get(
    int unit);

/**
 * \brief returns define data of lanes_allowed_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'lanes_allowed_nof'
 * The allowed lanes for each ILKN port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lanes_allowed_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_lanes_allowed_nof_get(
    int unit);

/**
 * \brief returns define data of ilkn_over_eth_pms_max
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_over_eth_pms_max'
 * Max number eth pms ilkn lanes is part of
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_over_eth_pms_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_ilkn_over_eth_pms_max_get(
    int unit);

/**
 * \brief returns define data of segments_max_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'segments_max_nof'
 * Max number of segments in ILKN protocol. (Segment is a resource of ILKN which is shared between all ports of the ILKN unit)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     segments_max_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_segments_max_nof_get(
    int unit);

/**
 * \brief returns define data of watermark_high
 * Module - 'nif', Submodule - 'ilkn', data - 'watermark_high'
 * High Watermark value for ILKN
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watermark_high - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_watermark_high_get(
    int unit);

/**
 * \brief returns define data of watermark_low
 * Module - 'nif', Submodule - 'ilkn', data - 'watermark_low'
 * Low Watermark value for ILKN
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watermark_low - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_watermark_low_get(
    int unit);

/**
 * \brief returns define data of pms_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'pms_nof'
 * Number of PMs connectted to the ILKN unit
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pms_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_pms_nof_get(
    int unit);

/**
 * \brief returns define data of fmac_bus_size
 * Module - 'nif', Submodule - 'ilkn', data - 'fmac_bus_size'
 * Fabric MAC bus size [bits], relevant for ILKN over fabric ports
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmac_bus_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_ilkn_fmac_bus_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_nif_ilkn_table_phys,
    dnx_data_nif_ilkn_table_supported_phys,
    dnx_data_nif_ilkn_table_supported_core,
    dnx_data_nif_ilkn_table_properties,
    dnx_data_nif_ilkn_table_nif_pms,
    dnx_data_nif_ilkn_table_fabric_pms,
    dnx_data_nif_ilkn_table_ilkn_pms,

    /**
     * Must be last one!
     */
    _dnx_data_nif_ilkn_table_nof
} dnx_data_nif_ilkn_table_e;

/* Get Data */
/**
 * \brief get table phys entry 
 * phys bitmap for ports added by soc property
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     phys - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_phys_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_ilkn_phys_t * dnx_data_nif_ilkn_phys_get(
    int unit,
    int ilkn_id);

/**
 * \brief get table supported_phys entry 
 * supported phys per ILKN id
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     supported_phys - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_supported_phys_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_ilkn_supported_phys_t * dnx_data_nif_ilkn_supported_phys_get(
    int unit,
    int ilkn_id);

/**
 * \brief get table supported_core entry 
 * supported device core per ILKN id
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     supported_core - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_supported_core_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_ilkn_supported_core_t * dnx_data_nif_ilkn_supported_core_get(
    int unit,
    int ilkn_id);

/**
 * \brief get table properties entry 
 * ILKN properties per ILKN id - added using soc property.
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     properties - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_properties_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_ilkn_properties_t * dnx_data_nif_ilkn_properties_get(
    int unit,
    int ilkn_id);

/**
 * \brief get table nif_pms entry 
 * ILKN PM table over NIF
 * 
 * \param [in] unit - unit #
 * \param [in] pm_id - Port Macro identifier
 * 
 * \return
 *     nif_pms - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_nif_pms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_ilkn_nif_pms_t * dnx_data_nif_ilkn_nif_pms_get(
    int unit,
    int pm_id);

/**
 * \brief get table fabric_pms entry 
 * ILKN PM table over Fabric
 * 
 * \param [in] unit - unit #
 * \param [in] pm_id - Port Macro identifier
 * 
 * \return
 *     fabric_pms - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_fabric_pms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_ilkn_fabric_pms_t * dnx_data_nif_ilkn_fabric_pms_get(
    int unit,
    int pm_id);

/**
 * \brief get table ilkn_pms entry 
 * ILKN PM table per ILKN id
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     ilkn_pms - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_ilkn_pms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_ilkn_ilkn_pms_t * dnx_data_nif_ilkn_ilkn_pms_get(
    int unit,
    int ilkn_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'ilkn', table - 'phys'
 * phys bitmap for ports added by soc property
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_ilkn_phys_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'ilkn', table - 'supported_phys'
 * supported phys per ILKN id
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_ilkn_supported_phys_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'ilkn', table - 'supported_core'
 * supported device core per ILKN id
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_ilkn_supported_core_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'ilkn', table - 'properties'
 * ILKN properties per ILKN id - added using soc property.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_ilkn_properties_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'ilkn', table - 'nif_pms'
 * ILKN PM table over NIF
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_ilkn_nif_pms_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'ilkn', table - 'fabric_pms'
 * ILKN PM table over Fabric
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_ilkn_fabric_pms_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'ilkn', table - 'ilkn_pms'
 * ILKN PM table per ILKN id
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_ilkn_ilkn_pms_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)phys info
 * phys bitmap for ports added by soc property
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phys - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_ilkn_phys_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)supported_phys info
 * supported phys per ILKN id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     supported_phys - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_ilkn_supported_phys_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)supported_core info
 * supported device core per ILKN id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     supported_core - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_ilkn_supported_core_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)properties info
 * ILKN properties per ILKN id - added using soc property.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     properties - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_ilkn_properties_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)nif_pms info
 * ILKN PM table over NIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pms - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_ilkn_nif_pms_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)fabric_pms info
 * ILKN PM table over Fabric
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_pms - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_ilkn_fabric_pms_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)ilkn_pms info
 * ILKN PM table per ILKN id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_pms - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_ilkn_ilkn_pms_info_get(
    int unit);

/*
 * SUBMODULE ETH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_nif_eth_feature_get(
    int unit,
    dnx_data_nif_eth_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_nif_eth_define_cdu_nof,
    dnx_data_nif_eth_define_cdum_nof,
    dnx_data_nif_eth_define_cdu_pms_nof,
    dnx_data_nif_eth_define_cdu_nof_per_core,
    dnx_data_nif_eth_define_cdu_lanes_nof,
    dnx_data_nif_eth_define_cdu_mac_nof,
    dnx_data_nif_eth_define_mac_lanes_nof,
    dnx_data_nif_eth_define_cdu_logical_fifo_nof,
    dnx_data_nif_eth_define_cdu_memory_entries_nof,
    dnx_data_nif_eth_define_priority_group_nof_entries_min,
    dnx_data_nif_eth_define_priority_groups_nof,
    dnx_data_nif_eth_define_pad_size_min,
    dnx_data_nif_eth_define_pad_size_max,
    dnx_data_nif_eth_define_packet_size_max,
    dnx_data_nif_eth_define_an_max_nof_abilities,

    /**
     * Must be last one!
     */
    _dnx_data_nif_eth_define_nof
} dnx_data_nif_eth_define_e;

/* Get Data */
/**
 * \brief returns define data of cdu_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_nof'
 * Number of CDU instances in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_cdu_nof_get(
    int unit);

/**
 * \brief returns define data of cdum_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdum_nof'
 * Number of CDUM instances in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdum_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_cdum_nof_get(
    int unit);

/**
 * \brief returns define data of cdu_pms_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_pms_nof'
 * Number of pms in each CDU in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_pms_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_cdu_pms_nof_get(
    int unit);

/**
 * \brief returns define data of cdu_nof_per_core
 * Module - 'nif', Submodule - 'eth', data - 'cdu_nof_per_core'
 * Number of CDU instances in each device core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_nof_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_cdu_nof_per_core_get(
    int unit);

/**
 * \brief returns define data of cdu_lanes_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_lanes_nof'
 * Number of lanes in each CDU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_lanes_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_cdu_lanes_nof_get(
    int unit);

/**
 * \brief returns define data of cdu_mac_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_mac_nof'
 * Number of MAC units per CDU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_mac_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_cdu_mac_nof_get(
    int unit);

/**
 * \brief returns define data of mac_lanes_nof
 * Module - 'nif', Submodule - 'eth', data - 'mac_lanes_nof'
 * Number of lanes in each MAC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mac_lanes_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_mac_lanes_nof_get(
    int unit);

/**
 * \brief returns define data of cdu_logical_fifo_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_logical_fifo_nof'
 * number of logical fifos in the CDU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_logical_fifo_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_cdu_logical_fifo_nof_get(
    int unit);

/**
 * \brief returns define data of cdu_memory_entries_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_memory_entries_nof'
 * number of entries in the CDU memory, to be shared between all logical FIFOs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_memory_entries_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_cdu_memory_entries_nof_get(
    int unit);

/**
 * \brief returns define data of priority_group_nof_entries_min
 * Module - 'nif', Submodule - 'eth', data - 'priority_group_nof_entries_min'
 * minimum number of entries to allocate to a priority group (priority group = RMC)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority_group_nof_entries_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_priority_group_nof_entries_min_get(
    int unit);

/**
 * \brief returns define data of priority_groups_nof
 * Module - 'nif', Submodule - 'eth', data - 'priority_groups_nof'
 * number of allowed priority groups per port (priority group = RMC)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority_groups_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_priority_groups_nof_get(
    int unit);

/**
 * \brief returns define data of pad_size_min
 * Module - 'nif', Submodule - 'eth', data - 'pad_size_min'
 * min padding size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pad_size_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_pad_size_min_get(
    int unit);

/**
 * \brief returns define data of pad_size_max
 * Module - 'nif', Submodule - 'eth', data - 'pad_size_max'
 * max padding size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pad_size_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_pad_size_max_get(
    int unit);

/**
 * \brief returns define data of packet_size_max
 * Module - 'nif', Submodule - 'eth', data - 'packet_size_max'
 * max packet size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_size_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_packet_size_max_get(
    int unit);

/**
 * \brief returns define data of an_max_nof_abilities
 * Module - 'nif', Submodule - 'eth', data - 'an_max_nof_abilities'
 * max auto-negotiation abilities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     an_max_nof_abilities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_eth_an_max_nof_abilities_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_nif_eth_table_pm_properties,
    dnx_data_nif_eth_table_cdu_pm_map,
    dnx_data_nif_eth_table_max_speed,

    /**
     * Must be last one!
     */
    _dnx_data_nif_eth_table_nof
} dnx_data_nif_eth_table_e;

/* Get Data */
/**
 * \brief get table pm_properties entry 
 * PM properties per PM
 * 
 * \param [in] unit - unit #
 * \param [in] pm_index - PM instance number.
 * 
 * \return
 *     pm_properties - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_pm_properties_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_eth_pm_properties_t * dnx_data_nif_eth_pm_properties_get(
    int unit,
    int pm_index);

/**
 * \brief get table cdu_pm_map entry 
 * map cdu to PM instance
 * 
 * \param [in] unit - unit #
 * \param [in] cdu_index - cdu instance number.
 * 
 * \return
 *     cdu_pm_map - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_cdu_pm_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_eth_cdu_pm_map_t * dnx_data_nif_eth_cdu_pm_map_get(
    int unit,
    int cdu_index);

/**
 * \brief get table max_speed entry 
 * Max speed for each ethernet interface type.
 * 
 * \param [in] unit - unit #
 * \param [in] lane_num - number of lanes for the given interface type.
 * 
 * \return
 *     max_speed - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_max_speed_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_eth_max_speed_t * dnx_data_nif_eth_max_speed_get(
    int unit,
    int lane_num);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'eth', table - 'pm_properties'
 * PM properties per PM
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_eth_pm_properties_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'eth', table - 'cdu_pm_map'
 * map cdu to PM instance
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_eth_cdu_pm_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'eth', table - 'max_speed'
 * Max speed for each ethernet interface type.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_eth_max_speed_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)pm_properties info
 * PM properties per PM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_properties - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_eth_pm_properties_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)cdu_pm_map info
 * map cdu to PM instance
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_pm_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_eth_cdu_pm_map_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)max_speed info
 * Max speed for each ethernet interface type.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_speed - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_eth_max_speed_info_get(
    int unit);

/*
 * SUBMODULE PRD:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_nif_prd_feature_get(
    int unit,
    dnx_data_nif_prd_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_nif_prd_define_nof_control_frames,
    dnx_data_nif_prd_define_nof_ether_type_codes,
    dnx_data_nif_prd_define_nof_tcam_entries,
    dnx_data_nif_prd_define_nof_mpls_special_labels,
    dnx_data_nif_prd_define_nof_priorities,
    dnx_data_nif_prd_define_custom_ether_type_code_min,
    dnx_data_nif_prd_define_custom_ether_type_code_max,

    /**
     * Must be last one!
     */
    _dnx_data_nif_prd_define_nof
} dnx_data_nif_prd_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_control_frames
 * Module - 'nif', Submodule - 'prd', data - 'nof_control_frames'
 * Number of control frame properties to which each packet is compared in order to be recognized as control frame in the PRD parser
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_control_frames - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_prd_nof_control_frames_get(
    int unit);

/**
 * \brief returns define data of nof_ether_type_codes
 * Module - 'nif', Submodule - 'prd', data - 'nof_ether_type_codes'
 * Number of ether types supported by the PRD Parser
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ether_type_codes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_prd_nof_ether_type_codes_get(
    int unit);

/**
 * \brief returns define data of nof_tcam_entries
 * Module - 'nif', Submodule - 'prd', data - 'nof_tcam_entries'
 * Number of entries in PRD Parser soft stage TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_tcam_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_prd_nof_tcam_entries_get(
    int unit);

/**
 * \brief returns define data of nof_mpls_special_labels
 * Module - 'nif', Submodule - 'prd', data - 'nof_mpls_special_labels'
 * Number of MPLS special labels recognized by the PRD parser
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mpls_special_labels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_prd_nof_mpls_special_labels_get(
    int unit);

/**
 * \brief returns define data of nof_priorities
 * Module - 'nif', Submodule - 'prd', data - 'nof_priorities'
 * Number of PRD Priorities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_priorities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_prd_nof_priorities_get(
    int unit);

/**
 * \brief returns define data of custom_ether_type_code_min
 * Module - 'nif', Submodule - 'prd', data - 'custom_ether_type_code_min'
 * Min value of the configurable ether type codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     custom_ether_type_code_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_prd_custom_ether_type_code_min_get(
    int unit);

/**
 * \brief returns define data of custom_ether_type_code_max
 * Module - 'nif', Submodule - 'prd', data - 'custom_ether_type_code_max'
 * Max value of the configurable ether type codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     custom_ether_type_code_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_prd_custom_ether_type_code_max_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_nif_prd_table_ether_type,

    /**
     * Must be last one!
     */
    _dnx_data_nif_prd_table_nof
} dnx_data_nif_prd_table_e;

/* Get Data */
/**
 * \brief get table ether_type entry 
 * Ether type codes and sizes for fixed ether types.
 * 
 * \param [in] unit - unit #
 * \param [in] ether_type_code - Ether type code in PRD parser
 * 
 * \return
 *     ether_type - returns the relevant entry values grouped in struct - see dnx_data_nif_prd_ether_type_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_prd_ether_type_t * dnx_data_nif_prd_ether_type_get(
    int unit,
    int ether_type_code);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'prd', table - 'ether_type'
 * Ether type codes and sizes for fixed ether types.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_prd_ether_type_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)ether_type info
 * Ether type codes and sizes for fixed ether types.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ether_type - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_prd_ether_type_info_get(
    int unit);

/*
 * SUBMODULE PORTMOD:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_nif_portmod_feature_get(
    int unit,
    dnx_data_nif_portmod_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_nif_portmod_define_pm_types_nof,

    /**
     * Must be last one!
     */
    _dnx_data_nif_portmod_define_nof
} dnx_data_nif_portmod_define_e;

/* Get Data */
/**
 * \brief returns define data of pm_types_nof
 * Module - 'nif', Submodule - 'portmod', data - 'pm_types_nof'
 * Number of pm types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_types_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_portmod_pm_types_nof_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_nif_portmod_table_pm_types_and_interfaces,
    dnx_data_nif_portmod_table_pm_supported_features,

    /**
     * Must be last one!
     */
    _dnx_data_nif_portmod_table_nof
} dnx_data_nif_portmod_table_e;

/* Get Data */
/**
 * \brief get table pm_types_and_interfaces entry 
 * fixed types and interfaces per device
 * 
 * \param [in] unit - unit #
 * \param [in] index - pm type index
 * 
 * \return
 *     pm_types_and_interfaces - returns the relevant entry values grouped in struct - see dnx_data_nif_portmod_pm_types_and_interfaces_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_portmod_pm_types_and_interfaces_t * dnx_data_nif_portmod_pm_types_and_interfaces_get(
    int unit,
    int index);

/**
 * \brief get table pm_supported_features entry 
 * supported features per Port Macro
 * 
 * \param [in] unit - unit #
 * \param [in] pm_index - port macro index in the device
 * 
 * \return
 *     pm_supported_features - returns the relevant entry values grouped in struct - see dnx_data_nif_portmod_pm_supported_features_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_nif_portmod_pm_supported_features_t * dnx_data_nif_portmod_pm_supported_features_get(
    int unit,
    int pm_index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'portmod', table - 'pm_types_and_interfaces'
 * fixed types and interfaces per device
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_portmod_pm_types_and_interfaces_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'nif', Submodule - 'portmod', table - 'pm_supported_features'
 * supported features per Port Macro
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_portmod_pm_supported_features_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)pm_types_and_interfaces info
 * fixed types and interfaces per device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_types_and_interfaces - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_portmod_pm_types_and_interfaces_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)pm_supported_features info
 * supported features per Port Macro
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_supported_features - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_nif_portmod_pm_supported_features_info_get(
    int unit);

/*
 * SUBMODULE SCHEDULDER:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_nif_schedulder_feature_get(
    int unit,
    dnx_data_nif_schedulder_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_nif_schedulder_define_rate_per_cdu_bit,
    dnx_data_nif_schedulder_define_rate_per_rmc_bit,
    dnx_data_nif_schedulder_define_nof_cdu_bits,
    dnx_data_nif_schedulder_define_nof_rmc_bits,

    /**
     * Must be last one!
     */
    _dnx_data_nif_schedulder_define_nof
} dnx_data_nif_schedulder_define_e;

/* Get Data */
/**
 * \brief returns define data of rate_per_cdu_bit
 * Module - 'nif', Submodule - 'schedulder', data - 'rate_per_cdu_bit'
 * The Rate equivalent to 1 bit of CDU scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rate_per_cdu_bit - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_schedulder_rate_per_cdu_bit_get(
    int unit);

/**
 * \brief returns define data of rate_per_rmc_bit
 * Module - 'nif', Submodule - 'schedulder', data - 'rate_per_rmc_bit'
 * The Rate equivalent to 1 bit of RMC scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rate_per_rmc_bit - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_schedulder_rate_per_rmc_bit_get(
    int unit);

/**
 * \brief returns define data of nof_cdu_bits
 * Module - 'nif', Submodule - 'schedulder', data - 'nof_cdu_bits'
 * Number of bits in CDU scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cdu_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_schedulder_nof_cdu_bits_get(
    int unit);

/**
 * \brief returns define data of nof_rmc_bits
 * Module - 'nif', Submodule - 'schedulder', data - 'nof_rmc_bits'
 * Number of bits in RMC scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rmc_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_nif_schedulder_nof_rmc_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_nif_schedulder_table_nof
} dnx_data_nif_schedulder_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_nif_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_NIF_H_*/
/* *INDENT-ON* */
