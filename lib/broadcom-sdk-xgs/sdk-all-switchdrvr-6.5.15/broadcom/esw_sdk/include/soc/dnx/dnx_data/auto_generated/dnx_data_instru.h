/** \file dnx_data_instru.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INSTRU_H_
/*{*/
#define _DNX_DATA_INSTRU_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/instru.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_instru.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_instru
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_instru_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - IPT:
 * IPT (tail-edit, INT) module
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ipt table profile_info
 * Table info:
 * per ipt profile information
 */
typedef struct
{
    /**
     * type of the ipt profile
     */
    bcm_instru_ipt_node_type_t type;
} dnx_data_instru_ipt_profile_info_t;

/**
 * \brief Holds values of submodule ipt table metadata
 * Table info:
 * Translate API metadata flag ID to HW values (bit index, size in bytes, etc...)
 */
typedef struct
{
    /**
     * HW bit id
     */
    uint32 bit;
    /**
     * field length in bytes
     */
    uint32 size;
} dnx_data_instru_ipt_metadata_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_ipt_feature_nof
} dnx_data_instru_ipt_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_instru_ipt_feature_get_f) (
    int unit,
    dnx_data_instru_ipt_feature_e feature);

/**
 * \brief get table profile_info entry 
 * per ipt profile information
 * 
 * \param [in] unit - unit #
 * \param [in] profile_id - profile index
 * 
 * \return
 *     profile_info - returns the relevant entry values grouped in struct - see dnx_data_instru_ipt_profile_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_instru_ipt_profile_info_t *(
    *dnx_data_instru_ipt_profile_info_get_f) (
    int unit,
    int profile_id);

/**
 * \brief get table metadata entry 
 * Translate API metadata flag ID to HW values (bit index, size in bytes, etc...)
 * 
 * \param [in] unit - unit #
 * \param [in] flag_id - running index (API flag ID)
 * 
 * \return
 *     metadata - returns the relevant entry values grouped in struct - see dnx_data_instru_ipt_metadata_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_instru_ipt_metadata_t *(
    *dnx_data_instru_ipt_metadata_get_f) (
    int unit,
    int flag_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INSTRU - IPT:
 * {
 */
/**
 * \brief Interface for instru ipt data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_instru_ipt_feature_get_f feature_get;
    /**
     * get table profile_info entry 
     */
    dnx_data_instru_ipt_profile_info_get_f profile_info_get;
    /**
     * get general info table about table (for example key size)profile_info info
     */
    dnxc_data_table_info_get_f profile_info_info_get;
    /**
     * get table metadata entry 
     */
    dnx_data_instru_ipt_metadata_get_f metadata_get;
    /**
     * get general info table about table (for example key size)metadata info
     */
    dnxc_data_table_info_get_f metadata_info_get;
} dnx_data_if_instru_ipt_t;

/*
 * }
 */

/*
 * SUBMODULE  - SFLOW:
 * sFlow module
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_sflow_feature_nof
} dnx_data_instru_sflow_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_instru_sflow_feature_get_f) (
    int unit,
    dnx_data_instru_sflow_feature_e feature);

/**
 * \brief returns define data of max_nof_sflow_encaps
 * Module - 'instru', Submodule - 'sflow', data - 'max_nof_sflow_encaps'
 * Maximum number of possible sFlow encap entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_sflow_encaps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_sflow_max_nof_sflow_encaps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_sflow_raw_entries_per_stack
 * Module - 'instru', Submodule - 'sflow', data - 'nof_sflow_raw_entries_per_stack'
 * Number of RAW entries used per sFlow ETPS stack
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sflow_raw_entries_per_stack - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_sflow_nof_sflow_raw_entries_per_stack_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INSTRU - SFLOW:
 * {
 */
/**
 * \brief Interface for instru sflow data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_instru_sflow_feature_get_f feature_get;
    /**
     * returns define data of max_nof_sflow_encaps
     */
    dnx_data_instru_sflow_max_nof_sflow_encaps_get_f max_nof_sflow_encaps_get;
    /**
     * returns define data of nof_sflow_raw_entries_per_stack
     */
    dnx_data_instru_sflow_nof_sflow_raw_entries_per_stack_get_f nof_sflow_raw_entries_per_stack_get;
} dnx_data_if_instru_sflow_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_INSTRU:
 * {
 */
/**
 * \brief Interface for instru data
 */
typedef struct
{
    /**
     * Interface for instru ipt data
     */
    dnx_data_if_instru_ipt_t ipt;
    /**
     * Interface for instru sflow data
     */
    dnx_data_if_instru_sflow_t sflow;
} dnx_data_if_instru_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_instru_t dnx_data_instru;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INSTRU_H_*/
/* *INDENT-ON* */
