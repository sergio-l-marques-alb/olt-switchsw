/** \file dnx_data_internal_pll.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_PLL_H_
/*{*/
#define _DNX_DATA_INTERNAL_PLL_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_pll.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_pll_submodule_general,

    /**
     * Must be last one!
     */
    _dnx_data_pll_submodule_nof
} dnx_data_pll_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pll_general_feature_get(
    int unit,
    dnx_data_pll_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_pll_general_define_pll1_ts_ch_0_mdiv,
    dnx_data_pll_general_define_pll1_bs_ch_0_mdiv,
    dnx_data_pll_general_define_pll1_ts_refclk_source_sel,
    dnx_data_pll_general_define_pll1_bs_refclk_source_sel,
    dnx_data_pll_general_define_pll1_ndiv_int,
    dnx_data_pll_general_define_pll1_ch_1_mdiv,
    dnx_data_pll_general_define_pll1_pdiv,
    dnx_data_pll_general_define_pll1_output_cml_en,
    dnx_data_pll_general_define_pll1_frefeff,
    dnx_data_pll_general_define_pll3_vco_clock,
    dnx_data_pll_general_define_pll3_kp,
    dnx_data_pll_general_define_pll3_ki,
    dnx_data_pll_general_define_pll3_en_ctrl,
    dnx_data_pll_general_define_pll3_en_ctrl_byp,
    dnx_data_pll_general_define_pll3_route_ctr_byp,
    dnx_data_pll_general_define_pll3_ref_clock_125,
    dnx_data_pll_general_define_pll3_ref_clock_156_25,
    dnx_data_pll_general_define_pll3_ref_clock_312_5,
    dnx_data_pll_general_define_nif_pll_ch_1_mdiv,
    dnx_data_pll_general_define_nif_pll_ch_2_mdiv,
    dnx_data_pll_general_define_nif_pll_ch_3_mdiv,
    dnx_data_pll_general_define_nif_pll_ch_4_mdiv,
    dnx_data_pll_general_define_nif_pll_ch_5_mdiv,
    dnx_data_pll_general_define_fabric_pll_ch_1_mdiv,
    dnx_data_pll_general_define_fabric_pll_ch_2_mdiv,
    dnx_data_pll_general_define_fabric_pll_ch_3_mdiv,
    dnx_data_pll_general_define_fabric_pll_ch_4_mdiv,
    dnx_data_pll_general_define_fabric_pll_ch_5_mdiv,
    dnx_data_pll_general_define_ts_phase_initial_lo,
    dnx_data_pll_general_define_ts_phase_initial_hi,

    /**
     * Must be last one!
     */
    _dnx_data_pll_general_define_nof
} dnx_data_pll_general_define_e;

/* Get Data */
/**
 * \brief returns define data of pll1_ts_ch_0_mdiv
 * Module - 'pll', Submodule - 'general', data - 'pll1_ts_ch_0_mdiv'
 * TymeSync PLL M-divider for channel 0.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll1_ts_ch_0_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll1_ts_ch_0_mdiv_get(
    int unit);

/**
 * \brief returns define data of pll1_bs_ch_0_mdiv
 * Module - 'pll', Submodule - 'general', data - 'pll1_bs_ch_0_mdiv'
 * BroadSync PLL M-divider for channel 0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll1_bs_ch_0_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll1_bs_ch_0_mdiv_get(
    int unit);

/**
 * \brief returns define data of pll1_ts_refclk_source_sel
 * Module - 'pll', Submodule - 'general', data - 'pll1_ts_refclk_source_sel'
 * Reference clock select for TS PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll1_ts_refclk_source_sel - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll1_ts_refclk_source_sel_get(
    int unit);

/**
 * \brief returns define data of pll1_bs_refclk_source_sel
 * Module - 'pll', Submodule - 'general', data - 'pll1_bs_refclk_source_sel'
 * Reference clock select for BS PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll1_bs_refclk_source_sel - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll1_bs_refclk_source_sel_get(
    int unit);

/**
 * \brief returns define data of pll1_ndiv_int
 * Module - 'pll', Submodule - 'general', data - 'pll1_ndiv_int'
 * N divider of PLL1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll1_ndiv_int - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll1_ndiv_int_get(
    int unit);

/**
 * \brief returns define data of pll1_ch_1_mdiv
 * Module - 'pll', Submodule - 'general', data - 'pll1_ch_1_mdiv'
 * M-divider for channel 1 of PLL1.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll1_ch_1_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll1_ch_1_mdiv_get(
    int unit);

/**
 * \brief returns define data of pll1_pdiv
 * Module - 'pll', Submodule - 'general', data - 'pll1_pdiv'
 * Pre divider of PLL1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll1_pdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll1_pdiv_get(
    int unit);

/**
 * \brief returns define data of pll1_output_cml_en
 * Module - 'pll', Submodule - 'general', data - 'pll1_output_cml_en'
 * Enable output output_cml of PLL1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll1_output_cml_en - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll1_output_cml_en_get(
    int unit);

/**
 * \brief returns define data of pll1_frefeff
 * Module - 'pll', Submodule - 'general', data - 'pll1_frefeff'
 * Effective reference frequency of PLL1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll1_frefeff - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll1_frefeff_get(
    int unit);

/**
 * \brief returns define data of pll3_vco_clock
 * Module - 'pll', Submodule - 'general', data - 'pll3_vco_clock'
 * Frequency of the Voltage Control Oscilator of PLL3. Used to calculate Pdiv, Ndiv, Mdiv and the Effective Ferquency
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll3_vco_clock - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll3_vco_clock_get(
    int unit);

/**
 * \brief returns define data of pll3_kp
 * Module - 'pll', Submodule - 'general', data - 'pll3_kp'
 * KP parameter for PLL3 configuration.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll3_kp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll3_kp_get(
    int unit);

/**
 * \brief returns define data of pll3_ki
 * Module - 'pll', Submodule - 'general', data - 'pll3_ki'
 * Ki parameter for PLL3 configuration.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll3_ki - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll3_ki_get(
    int unit);

/**
 * \brief returns define data of pll3_en_ctrl
 * Module - 'pll', Submodule - 'general', data - 'pll3_en_ctrl'
 * Enable control
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll3_en_ctrl - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll3_en_ctrl_get(
    int unit);

/**
 * \brief returns define data of pll3_en_ctrl_byp
 * Module - 'pll', Submodule - 'general', data - 'pll3_en_ctrl_byp'
 * Enable control for bypass mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll3_en_ctrl_byp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll3_en_ctrl_byp_get(
    int unit);

/**
 * \brief returns define data of pll3_route_ctr_byp
 * Module - 'pll', Submodule - 'general', data - 'pll3_route_ctr_byp'
 * Value of route control field when using bypass.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll3_route_ctr_byp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll3_route_ctr_byp_get(
    int unit);

/**
 * \brief returns define data of pll3_ref_clock_125
 * Module - 'pll', Submodule - 'general', data - 'pll3_ref_clock_125'
 * Value for 125MHz reference clock.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll3_ref_clock_125 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll3_ref_clock_125_get(
    int unit);

/**
 * \brief returns define data of pll3_ref_clock_156_25
 * Module - 'pll', Submodule - 'general', data - 'pll3_ref_clock_156_25'
 * Value for 156MHz reference clock.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll3_ref_clock_156_25 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll3_ref_clock_156_25_get(
    int unit);

/**
 * \brief returns define data of pll3_ref_clock_312_5
 * Module - 'pll', Submodule - 'general', data - 'pll3_ref_clock_312_5'
 * Value for 312MHz reference clock.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll3_ref_clock_312_5 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_pll3_ref_clock_312_5_get(
    int unit);

/**
 * \brief returns define data of nif_pll_ch_1_mdiv
 * Module - 'pll', Submodule - 'general', data - 'nif_pll_ch_1_mdiv'
 * M-divider for channel 1 of NIF PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll_ch_1_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_nif_pll_ch_1_mdiv_get(
    int unit);

/**
 * \brief returns define data of nif_pll_ch_2_mdiv
 * Module - 'pll', Submodule - 'general', data - 'nif_pll_ch_2_mdiv'
 * M-divider for channel 2 of NIF PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll_ch_2_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_nif_pll_ch_2_mdiv_get(
    int unit);

/**
 * \brief returns define data of nif_pll_ch_3_mdiv
 * Module - 'pll', Submodule - 'general', data - 'nif_pll_ch_3_mdiv'
 * M-divider for channel 3 of NIF PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll_ch_3_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_nif_pll_ch_3_mdiv_get(
    int unit);

/**
 * \brief returns define data of nif_pll_ch_4_mdiv
 * Module - 'pll', Submodule - 'general', data - 'nif_pll_ch_4_mdiv'
 * M-divider for channel 4 of NIF PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll_ch_4_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_nif_pll_ch_4_mdiv_get(
    int unit);

/**
 * \brief returns define data of nif_pll_ch_5_mdiv
 * Module - 'pll', Submodule - 'general', data - 'nif_pll_ch_5_mdiv'
 * M-divider for channel 5 of NIF PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll_ch_5_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_nif_pll_ch_5_mdiv_get(
    int unit);

/**
 * \brief returns define data of fabric_pll_ch_1_mdiv
 * Module - 'pll', Submodule - 'general', data - 'fabric_pll_ch_1_mdiv'
 * M-divider for channel 1 of FABRIC PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_pll_ch_1_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_fabric_pll_ch_1_mdiv_get(
    int unit);

/**
 * \brief returns define data of fabric_pll_ch_2_mdiv
 * Module - 'pll', Submodule - 'general', data - 'fabric_pll_ch_2_mdiv'
 * M-divider for channel 2 of FABRIC PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_pll_ch_2_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_fabric_pll_ch_2_mdiv_get(
    int unit);

/**
 * \brief returns define data of fabric_pll_ch_3_mdiv
 * Module - 'pll', Submodule - 'general', data - 'fabric_pll_ch_3_mdiv'
 * M-divider for channel 3 of FABRIC PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_pll_ch_3_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_fabric_pll_ch_3_mdiv_get(
    int unit);

/**
 * \brief returns define data of fabric_pll_ch_4_mdiv
 * Module - 'pll', Submodule - 'general', data - 'fabric_pll_ch_4_mdiv'
 * M-divider for channel 4 of FABRIC PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_pll_ch_4_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_fabric_pll_ch_4_mdiv_get(
    int unit);

/**
 * \brief returns define data of fabric_pll_ch_5_mdiv
 * Module - 'pll', Submodule - 'general', data - 'fabric_pll_ch_5_mdiv'
 * M-divider for channel 5 of FABRIC PLL.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_pll_ch_5_mdiv - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_fabric_pll_ch_5_mdiv_get(
    int unit);

/**
 * \brief returns numeric data of ts_phase_initial_lo
 * Module - 'pll', Submodule - 'general', data - 'ts_phase_initial_lo'
 * Initial phase values low 32
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_phase_initial_lo - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_ts_phase_initial_lo_get(
    int unit);

/**
 * \brief returns numeric data of ts_phase_initial_hi
 * Module - 'pll', Submodule - 'general', data - 'ts_phase_initial_hi'
 * Initial phase values high 32
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_phase_initial_hi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_ts_phase_initial_hi_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_pll_general_table_nif_pll_cfg,
    dnx_data_pll_general_table_fabric_pll_cfg,

    /**
     * Must be last one!
     */
    _dnx_data_pll_general_table_nof
} dnx_data_pll_general_table_e;

/* Get Data */
/**
 * \brief get table nif_pll_cfg entry 
 * NIF PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * \param [in] pll_index - Index of NIF PLL (0 or 1)
 * 
 * \return
 *     nif_pll_cfg - returns the relevant entry values grouped in struct - see dnx_data_pll_general_nif_pll_cfg_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pll_general_nif_pll_cfg_t * dnx_data_pll_general_nif_pll_cfg_get(
    int unit,
    int pll_index);

/**
 * \brief get table fabric_pll_cfg entry 
 * Fabric PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * \param [in] pll_index - Index of Fabric PLL (0 or 1)
 * 
 * \return
 *     fabric_pll_cfg - returns the relevant entry values grouped in struct - see dnx_data_pll_general_fabric_pll_cfg_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pll_general_fabric_pll_cfg_t * dnx_data_pll_general_fabric_pll_cfg_get(
    int unit,
    int pll_index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'pll', Submodule - 'general', table - 'nif_pll_cfg'
 * NIF PLL reference and output frequencies
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pll_general_nif_pll_cfg_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'pll', Submodule - 'general', table - 'fabric_pll_cfg'
 * Fabric PLL reference and output frequencies
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pll_general_fabric_pll_cfg_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)nif_pll_cfg info
 * NIF PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll_cfg - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pll_general_nif_pll_cfg_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)fabric_pll_cfg info
 * Fabric PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_pll_cfg - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pll_general_fabric_pll_cfg_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pll_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_PLL_H_*/
/* *INDENT-ON* */
