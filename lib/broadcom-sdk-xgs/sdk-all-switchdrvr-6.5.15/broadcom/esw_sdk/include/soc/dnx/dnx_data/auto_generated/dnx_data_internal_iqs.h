/** \file dnx_data_internal_iqs.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_IQS_H_
/*{*/
#define _DNX_DATA_INTERNAL_IQS_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_iqs.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_iqs_submodule_credit,
    dnx_data_iqs_submodule_deq_default,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_submodule_nof
} dnx_data_iqs_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE CREDIT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_feature_get(
    int unit,
    dnx_data_iqs_credit_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_iqs_credit_define_nof_profiles,
    dnx_data_iqs_credit_define_max_credit_balance_threshold,
    dnx_data_iqs_credit_define_max_credit_balance_resolution,
    dnx_data_iqs_credit_define_max_worth,
    dnx_data_iqs_credit_define_slow_level_resolution,
    dnx_data_iqs_credit_define_satisified_back_min,
    dnx_data_iqs_credit_define_satisified_back_max,
    dnx_data_iqs_credit_define_satisified_empty_min,
    dnx_data_iqs_credit_define_satisified_empty_max,
    dnx_data_iqs_credit_define_hungry_min,
    dnx_data_iqs_credit_define_hungry_max,
    dnx_data_iqs_credit_define_hungry_mult_min,
    dnx_data_iqs_credit_define_hungry_mult_max,
    dnx_data_iqs_credit_define_credit_resolution_up_th,
    dnx_data_iqs_credit_define_nof_bw_levels,
    dnx_data_iqs_credit_define_fmq_credit_fc_on_th,
    dnx_data_iqs_credit_define_fmq_credit_fc_off_th,
    dnx_data_iqs_credit_define_fmq_byte_fc_on_th,
    dnx_data_iqs_credit_define_fmq_byte_fc_off_th,
    dnx_data_iqs_credit_define_fmq_eir_credit_fc_th,
    dnx_data_iqs_credit_define_fmq_eir_byte_fc_th,
    dnx_data_iqs_credit_define_worth,
    dnx_data_iqs_credit_define_fabric_delay,
    dnx_data_iqs_credit_define_fabric_multicast_delay,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_credit_define_nof
} dnx_data_iqs_credit_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_profiles
 * Module - 'iqs', Submodule - 'credit', data - 'nof_profiles'
 * Number of supported profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_nof_profiles_get(
    int unit);

/**
 * \brief returns define data of max_credit_balance_threshold
 * Module - 'iqs', Submodule - 'credit', data - 'max_credit_balance_threshold'
 * max value for thresholds in credit balance resolution units
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_credit_balance_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_max_credit_balance_threshold_get(
    int unit);

/**
 * \brief returns define data of max_credit_balance_resolution
 * Module - 'iqs', Submodule - 'credit', data - 'max_credit_balance_resolution'
 * highest resolution in bytes units
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_credit_balance_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_max_credit_balance_resolution_get(
    int unit);

/**
 * \brief returns define data of max_worth
 * Module - 'iqs', Submodule - 'credit', data - 'max_worth'
 * max credit worth
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_worth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_max_worth_get(
    int unit);

/**
 * \brief returns define data of slow_level_resolution
 * Module - 'iqs', Submodule - 'credit', data - 'slow_level_resolution'
 * resolution of credit request slow levels in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     slow_level_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_slow_level_resolution_get(
    int unit);

/**
 * \brief returns define data of satisified_back_min
 * Module - 'iqs', Submodule - 'credit', data - 'satisified_back_min'
 * min value for satisified back thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     satisified_back_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_satisified_back_min_get(
    int unit);

/**
 * \brief returns define data of satisified_back_max
 * Module - 'iqs', Submodule - 'credit', data - 'satisified_back_max'
 * max value for satisified back thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     satisified_back_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_satisified_back_max_get(
    int unit);

/**
 * \brief returns define data of satisified_empty_min
 * Module - 'iqs', Submodule - 'credit', data - 'satisified_empty_min'
 * min value for satisified empty thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     satisified_empty_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_satisified_empty_min_get(
    int unit);

/**
 * \brief returns define data of satisified_empty_max
 * Module - 'iqs', Submodule - 'credit', data - 'satisified_empty_max'
 * max value for satisified empty thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     satisified_empty_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_satisified_empty_max_get(
    int unit);

/**
 * \brief returns define data of hungry_min
 * Module - 'iqs', Submodule - 'credit', data - 'hungry_min'
 * min value for hungry thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hungry_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_hungry_min_get(
    int unit);

/**
 * \brief returns define data of hungry_max
 * Module - 'iqs', Submodule - 'credit', data - 'hungry_max'
 * max value for hungry thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hungry_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_hungry_max_get(
    int unit);

/**
 * \brief returns define data of hungry_mult_min
 * Module - 'iqs', Submodule - 'credit', data - 'hungry_mult_min'
 * min value for hungry multiply thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hungry_mult_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_hungry_mult_min_get(
    int unit);

/**
 * \brief returns define data of hungry_mult_max
 * Module - 'iqs', Submodule - 'credit', data - 'hungry_mult_max'
 * max value for hungry multiply thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hungry_mult_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_hungry_mult_max_get(
    int unit);

/**
 * \brief returns define data of credit_resolution_up_th
 * Module - 'iqs', Submodule - 'credit', data - 'credit_resolution_up_th'
 * [KB]. ]threshold over the delayed size (fabric_delay * port rate) to move to the higher credit resolutoin
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     credit_resolution_up_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_credit_resolution_up_th_get(
    int unit);

/**
 * \brief returns define data of nof_bw_levels
 * Module - 'iqs', Submodule - 'credit', data - 'nof_bw_levels'
 * number of supported bandwidth levels
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bw_levels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_nof_bw_levels_get(
    int unit);

/**
 * \brief returns define data of fmq_credit_fc_on_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_credit_fc_on_th'
 * default thershold value for FMQ credit FC on
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_credit_fc_on_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_credit_fc_on_th_get(
    int unit);

/**
 * \brief returns define data of fmq_credit_fc_off_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_credit_fc_off_th'
 * default thershold value for FMQ credit FC off
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_credit_fc_off_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_credit_fc_off_th_get(
    int unit);

/**
 * \brief returns define data of fmq_byte_fc_on_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_byte_fc_on_th'
 * default thershold value for FMQ byte FC on
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_byte_fc_on_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_byte_fc_on_th_get(
    int unit);

/**
 * \brief returns define data of fmq_byte_fc_off_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_byte_fc_off_th'
 * default thershold value for FMQ byte FC off
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_byte_fc_off_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_byte_fc_off_th_get(
    int unit);

/**
 * \brief returns define data of fmq_eir_credit_fc_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_eir_credit_fc_th'
 * default thershold value for all credit EIR FMQ FC thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_eir_credit_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_eir_credit_fc_th_get(
    int unit);

/**
 * \brief returns define data of fmq_eir_byte_fc_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_eir_byte_fc_th'
 * default thershold value for all byte EIR FMQ FC thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_eir_byte_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_eir_byte_fc_th_get(
    int unit);

/**
 * \brief returns numeric data of worth
 * Module - 'iqs', Submodule - 'credit', data - 'worth'
 * credit worth in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     worth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_worth_get(
    int unit);

/**
 * \brief returns numeric data of fabric_delay
 * Module - 'iqs', Submodule - 'credit', data - 'fabric_delay'
 * [nano-sec] credit ingress to egress delay
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fabric_delay_get(
    int unit);

/**
 * \brief returns numeric data of fabric_multicast_delay
 * Module - 'iqs', Submodule - 'credit', data - 'fabric_multicast_delay'
 * [nano-sec] credit delay for fmqs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_multicast_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fabric_multicast_delay_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_iqs_credit_table_bw_level_rate,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_credit_table_nof
} dnx_data_iqs_credit_table_e;

/* Get Data */
/**
 * \brief get table bw_level_rate entry 
 * stores the read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * \param [in] bw_level - bandwidth level
 * 
 * \return
 *     bw_level_rate - returns the relevant entry values grouped in struct - see dnx_data_iqs_credit_bw_level_rate_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_credit_bw_level_rate_t * dnx_data_iqs_credit_bw_level_rate_get(
    int unit,
    int bw_level);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'credit', table - 'bw_level_rate'
 * stores the read weight profiles that should configured to HW
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_credit_bw_level_rate_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)bw_level_rate info
 * stores the read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bw_level_rate - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_credit_bw_level_rate_info_get(
    int unit);

/*
 * SUBMODULE DEQ_DEFAULT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_deq_default_feature_get(
    int unit,
    dnx_data_iqs_deq_default_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_iqs_deq_default_define_low_delay_deq_bytes,
    dnx_data_iqs_deq_default_define_credit_balance_max,
    dnx_data_iqs_deq_default_define_credit_balance_resolution,
    dnx_data_iqs_deq_default_define_s2d_credit_balance_max,
    dnx_data_iqs_deq_default_define_s2d_credit_balance_resolution,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_deq_default_define_nof
} dnx_data_iqs_deq_default_define_e;

/* Get Data */
/**
 * \brief returns define data of low_delay_deq_bytes
 * Module - 'iqs', Submodule - 'deq_default', data - 'low_delay_deq_bytes'
 * dequeue low delay thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     low_delay_deq_bytes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_low_delay_deq_bytes_get(
    int unit);

/**
 * \brief returns define data of credit_balance_max
 * Module - 'iqs', Submodule - 'deq_default', data - 'credit_balance_max'
 * max credit balance
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     credit_balance_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_credit_balance_max_get(
    int unit);

/**
 * \brief returns define data of credit_balance_resolution
 * Module - 'iqs', Submodule - 'deq_default', data - 'credit_balance_resolution'
 * credit balance resolution for dequeue parameters configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     credit_balance_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_credit_balance_resolution_get(
    int unit);

/**
 * \brief returns define data of s2d_credit_balance_max
 * Module - 'iqs', Submodule - 'deq_default', data - 's2d_credit_balance_max'
 * max credit balance in sram to dram context
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     s2d_credit_balance_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_s2d_credit_balance_max_get(
    int unit);

/**
 * \brief returns define data of s2d_credit_balance_resolution
 * Module - 'iqs', Submodule - 'deq_default', data - 's2d_credit_balance_resolution'
 * credit balance resolution for dequeue parameters configuration in sram to dram context
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     s2d_credit_balance_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_s2d_credit_balance_resolution_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_iqs_deq_default_table_sqm_read_weight_profiles,
    dnx_data_iqs_deq_default_table_dqm_read_weight_profiles,
    dnx_data_iqs_deq_default_table_params,
    dnx_data_iqs_deq_default_table_dram_params,
    dnx_data_iqs_deq_default_table_max_deq_cmd,
    dnx_data_iqs_deq_default_table_s2d_max_deq_cmd,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_deq_default_table_nof
} dnx_data_iqs_deq_default_table_e;

/* Get Data */
/**
 * \brief get table sqm_read_weight_profiles entry 
 * stores the SQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * \param [in] profile_id - read weight profile id
 * 
 * \return
 *     sqm_read_weight_profiles - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_sqm_read_weight_profiles_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_sqm_read_weight_profiles_t * dnx_data_iqs_deq_default_sqm_read_weight_profiles_get(
    int unit,
    int profile_id);

/**
 * \brief get table dqm_read_weight_profiles entry 
 * stores the DQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * \param [in] profile_id - read weight profile id
 * 
 * \return
 *     dqm_read_weight_profiles - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_dqm_read_weight_profiles_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_dqm_read_weight_profiles_t * dnx_data_iqs_deq_default_dqm_read_weight_profiles_get(
    int unit,
    int profile_id);

/**
 * \brief get table params entry 
 * stores the read weight profiles that should configured to HW for SRAM and S2D
 * 
 * \param [in] unit - unit #
 * \param [in] bw_level - parameters per bandwidth level.
 * 
 * \return
 *     params - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_params_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_params_t * dnx_data_iqs_deq_default_params_get(
    int unit,
    int bw_level);

/**
 * \brief get table dram_params entry 
 * stores the read weight profiles that should configured to HW for DRAM
 * 
 * \param [in] unit - unit #
 * \param [in] index - index to the table
 * 
 * \return
 *     dram_params - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_dram_params_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_dram_params_t * dnx_data_iqs_deq_default_dram_params_get(
    int unit,
    int index);

/**
 * \brief get table max_deq_cmd entry 
 * stores the read weight profiles that should configured to HW (sram/dram to fabric)
 * 
 * \param [in] unit - unit #
 * \param [in] bw_level - parameters per bandwidth level.
 * \param [in] nof_active_queues - see dbal_enum_value_field_iqs_active_queues_e
 * 
 * \return
 *     max_deq_cmd - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_max_deq_cmd_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_max_deq_cmd_t * dnx_data_iqs_deq_default_max_deq_cmd_get(
    int unit,
    int bw_level,
    int nof_active_queues);

/**
 * \brief get table s2d_max_deq_cmd entry 
 * stores the read weight profiles that should configured to HW (sram t0 dram)
 * 
 * \param [in] unit - unit #
 * \param [in] bw_level - parameters per bandwidth level.
 * \param [in] nof_active_queues - see dbal_enum_value_field_iqs_active_queues_e
 * 
 * \return
 *     s2d_max_deq_cmd - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_s2d_max_deq_cmd_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_s2d_max_deq_cmd_t * dnx_data_iqs_deq_default_s2d_max_deq_cmd_get(
    int unit,
    int bw_level,
    int nof_active_queues);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'sqm_read_weight_profiles'
 * stores the SQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_sqm_read_weight_profiles_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'dqm_read_weight_profiles'
 * stores the DQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_dqm_read_weight_profiles_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'params'
 * stores the read weight profiles that should configured to HW for SRAM and S2D
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_params_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'dram_params'
 * stores the read weight profiles that should configured to HW for DRAM
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_dram_params_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'max_deq_cmd'
 * stores the read weight profiles that should configured to HW (sram/dram to fabric)
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_max_deq_cmd_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 's2d_max_deq_cmd'
 * stores the read weight profiles that should configured to HW (sram t0 dram)
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_s2d_max_deq_cmd_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)sqm_read_weight_profiles info
 * stores the SQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sqm_read_weight_profiles - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_sqm_read_weight_profiles_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)dqm_read_weight_profiles info
 * stores the DQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dqm_read_weight_profiles - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_dqm_read_weight_profiles_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)params info
 * stores the read weight profiles that should configured to HW for SRAM and S2D
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     params - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_params_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)dram_params info
 * stores the read weight profiles that should configured to HW for DRAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dram_params - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_dram_params_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)max_deq_cmd info
 * stores the read weight profiles that should configured to HW (sram/dram to fabric)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_deq_cmd - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_max_deq_cmd_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)s2d_max_deq_cmd info
 * stores the read weight profiles that should configured to HW (sram t0 dram)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     s2d_max_deq_cmd - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_s2d_max_deq_cmd_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_IQS_H_*/
/* *INDENT-ON* */
