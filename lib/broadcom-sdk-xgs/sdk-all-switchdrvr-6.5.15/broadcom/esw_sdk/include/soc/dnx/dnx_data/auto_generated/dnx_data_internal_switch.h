/** \file dnx_data_internal_switch.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_SWITCH_H_
/*{*/
#define _DNX_DATA_INTERNAL_SWITCH_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_switch.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_switch_submodule_load_balancing,
    dnx_data_switch_submodule_hw_bug,

    /**
     * Must be last one!
     */
    _dnx_data_switch_submodule_nof
} dnx_data_switch_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE LOAD_BALANCING:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_switch_load_balancing_feature_get(
    int unit,
    dnx_data_switch_load_balancing_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_switch_load_balancing_define_nof_lb_clients,
    dnx_data_switch_load_balancing_define_nof_lb_crc_sel_tcam_entries,
    dnx_data_switch_load_balancing_define_nof_crc_functions,
    dnx_data_switch_load_balancing_define_initial_reserved_label,
    dnx_data_switch_load_balancing_define_initial_reserved_label_force,
    dnx_data_switch_load_balancing_define_initial_reserved_next_label,
    dnx_data_switch_load_balancing_define_initial_reserved_next_label_valid,
    dnx_data_switch_load_balancing_define_num_valid_mpls_protocols,
    dnx_data_switch_load_balancing_define_nof_layer_records_from_parser,
    dnx_data_switch_load_balancing_define_nof_seeds_per_crc_function,

    /**
     * Must be last one!
     */
    _dnx_data_switch_load_balancing_define_nof
} dnx_data_switch_load_balancing_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_lb_clients
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_lb_clients'
 * Number of load balancing clients (users of CRC functions)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lb_clients - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_nof_lb_clients_get(
    int unit);

/**
 * \brief returns define data of nof_lb_crc_sel_tcam_entries
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_lb_crc_sel_tcam_entries'
 * Number of entries on IPPB_LOAD_BALANCING_CRC_SELECTION_CAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lb_crc_sel_tcam_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_nof_lb_crc_sel_tcam_entries_get(
    int unit);

/**
 * \brief returns define data of nof_crc_functions
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_crc_functions'
 * Number of crc functions available for 'load balancing'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_crc_functions - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_nof_crc_functions_get(
    int unit);

/**
 * \brief returns define data of initial_reserved_label
 * Module - 'switch', Submodule - 'load_balancing', data - 'initial_reserved_label'
 * Bitmap. Each bit indicates the corresponding reserved label is to be                         included into load balancing calculation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     initial_reserved_label - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_initial_reserved_label_get(
    int unit);

/**
 * \brief returns define data of initial_reserved_label_force
 * Module - 'switch', Submodule - 'load_balancing', data - 'initial_reserved_label_force'
 * Bitmap. Each bit indicates the corresponding reserved label is to be                         forced into load balancing calculation even if it was terminated
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     initial_reserved_label_force - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_initial_reserved_label_force_get(
    int unit);

/**
 * \brief returns define data of initial_reserved_next_label
 * Module - 'switch', Submodule - 'load_balancing', data - 'initial_reserved_next_label'
 * Bitmap. Each bit indicates whether label following correponding reserved label                         is to be forced into load balancing calculation even if it was terminated
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     initial_reserved_next_label - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_initial_reserved_next_label_get(
    int unit);

/**
 * \brief returns define data of initial_reserved_next_label_valid
 * Module - 'switch', Submodule - 'load_balancing', data - 'initial_reserved_next_label_valid'
 * Bitmap. Currently redundant. Should be equal to 'initial_reserved_next_label' 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     initial_reserved_next_label_valid - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_initial_reserved_next_label_valid_get(
    int unit);

/**
 * \brief returns define data of num_valid_mpls_protocols
 * Module - 'switch', Submodule - 'load_balancing', data - 'num_valid_mpls_protocols'
 * Number of supported MPLS protocols in dbal_enum_value_field_current_protocol_type_e
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_valid_mpls_protocols - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_num_valid_mpls_protocols_get(
    int unit);

/**
 * \brief returns define data of nof_layer_records_from_parser
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_layer_records_from_parser'
 * Number of 32-bits layer records, cretaed by parser, which are used for hashing on load balancing
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_layer_records_from_parser - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_nof_layer_records_from_parser_get(
    int unit);

/**
 * \brief returns define data of nof_seeds_per_crc_function
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_seeds_per_crc_function'
 * Number of crc seeds that may be selected per crc function on load balancing
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_seeds_per_crc_function - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_switch_load_balancing_nof_seeds_per_crc_function_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_switch_load_balancing_table_lb_clients,

    /**
     * Must be last one!
     */
    _dnx_data_switch_load_balancing_table_nof
} dnx_data_switch_load_balancing_table_e;

/* Get Data */
/**
 * \brief get table lb_clients entry 
 * Given hw identifier ('client id') get the corresponding logical client name, from 'bcm_switch_control_t'.
 * 
 * \param [in] unit - unit #
 * \param [in] client_hw_id - Hw identifier of load-balancing client. See table LOAD_BALANCING_CRC_SELECTION_CAM (IPPB_LOAD_BALANCING_CRC_SELECTION_CAM)
 * 
 * \return
 *     lb_clients - returns the relevant entry values grouped in struct - see dnx_data_switch_load_balancing_lb_clients_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_switch_load_balancing_lb_clients_t * dnx_data_switch_load_balancing_lb_clients_get(
    int unit,
    int client_hw_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'switch', Submodule - 'load_balancing', table - 'lb_clients'
 * Given hw identifier ('client id') get the corresponding logical client name, from 'bcm_switch_control_t'.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_switch_load_balancing_lb_clients_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)lb_clients info
 * Given hw identifier ('client id') get the corresponding logical client name, from 'bcm_switch_control_t'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lb_clients - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_switch_load_balancing_lb_clients_info_get(
    int unit);

/*
 * SUBMODULE HW_BUG:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_switch_hw_bug_feature_get(
    int unit,
    dnx_data_switch_hw_bug_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_switch_hw_bug_define_nof
} dnx_data_switch_hw_bug_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_switch_hw_bug_table_nof
} dnx_data_switch_hw_bug_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_switch_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_SWITCH_H_*/
/* *INDENT-ON* */
