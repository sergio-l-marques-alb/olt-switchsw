/** \file dnx_data_max_egr_queuing.h
 * 
 * MODULE DATA MAX - 
 * Maintain max value (of all devices) per define
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MAX_EGR_QUEUING_H_
/*{*/
#define _DNX_DATA_MAX_EGR_QUEUING_H_
/*
 * INCLUDE FILES:
 * {
 */
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MAX DEFINES:
 * {
 */
/**
 * \brief
 * number of bits in 'weight' representation of a TCG. See EPS_DWM_8P
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_TCG_WEIGHT (8)

/**
 * \brief
 * number of bits in 'nof_q_pairs_in_ps' representation. Essentially, log2(nof_q_pairs_in_ps)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_NOF_Q_PAIRS_IN_PS (3)

/**
 * \brief
 * Number of qpairs per one port scheduler
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_Q_PAIRS_IN_PS (8)

/**
 * \brief
 * number of bits in 'queue pair' representation. Essentially, log2(nof_q_pairs)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_Q_PAIR (9)

/**
 * \brief
 * Number of q_pairs per core
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_Q_PAIRS (512)

/**
 * \brief
 * number of bits in 'nof_port_schedulers' representation. Essentially, log2(nof_port_schedulers)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_NOF_PORT_SCHEDULERS (6)

/**
 * \brief
 * Number of port schedulers per core
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_PORT_SCHEDULERS (64)

/**
 * \brief
 * number of bits in 'num. of entries in calendar' representation. Essentially, log2(calendar_size)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_CALENDAR_SIZE (9)

/**
 * \brief
 * number of entries in calendar
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_CALENDAR_SIZE (512)

/**
 * \brief
 * number of bits in 'egr nof_calendars' representation. Essentially, log2(nof_calendars)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_NOF_CALENDARS (6)

/**
 * \brief
 * Number of calendar-pairs per core. Total number of calendars is twice this value.
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_CALENDARS (64)

/**
 * \brief
 * number of bits in 'egr interface' representation. Essentially, log2(nof_egr_interfaces)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_EGR_INTERFACE (6)

/**
 * \brief
 * Number of egr interfaces, per core
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_EGR_INTERFACES (64)

/**
 * \brief
 * reserved interface (used for dummy flow control mapping in LAG SCH)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_RESERVED_IF (63)

/**
 * \brief
 * cpu interface at egr
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_EGR_IF_CPU (0)

/**
 * \brief
 * sat interface at egr
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_EGR_IF_SAT (1)

/**
 * \brief
 * oam interface at egr
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_EGR_IF_OAM (2)

/**
 * \brief
 * olp interface at egr
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_EGR_IF_OLP (3)

/**
 * \brief
 * recycle interface at egr
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_EGR_IF_RCY (4)

/**
 * \brief
 * txi recycle interface at egr
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_EGR_IF_TXI_RCY (6)

/**
 * \brief
 * eventor interface at egr
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_EGR_IF_EVENTOR (5)

/**
 * \brief
 * calendar resolution
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_CAL_RES (32)

/**
 * \brief
 * calendar resolution
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_CAL_BURST_RES (256)

/**
 * \brief
 * Number of bits in representation of cal_cal_len (log2)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_CAL_CAL_LEN (8)

/**
 * \brief
 * calcal calendar length
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_CAL_CAL_LEN (256)

/**
 * \brief
 * Number of bits in representation of nif_cal_len (log2)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_NIF_CAL_LEN (8)

/**
 * \brief
 * nif calendar length
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NIF_CAL_LEN (256)

/**
 * \brief
 * Number of bits in representation of nof_tcg (log2)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_NOF_TCG (3)

/**
 * \brief
 * Number of TC groups supported by this system
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_TCG (8)

/**
 * \brief
 * Number of bits in representation of nof_egr_q_prio (log2)
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_BITS_IN_NOF_EGR_Q_PRIO (3)

/**
 * \brief
 * Number of egress priorities for unscheduled traffic
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_EGR_Q_PRIO (8)

/**
 * \brief
 * minimum number of priorities supported by tcg
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_TCG_MIN_PRIORITIES (4)

/**
 * \brief
 * the maximum number of credits supported
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_MAX_CREDIT_NUMBER (8388607)

/**
 * \brief
 * EGQ Maximum Gb/s rate. This is the upper boundary, it can be lower depending on the credit size
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_MAX_GBPS_RATE_EGQ (2500)

/**
 * \brief
 * Define ready TXQ treshold in PDs for non TDM queues, when Q is above this treshold FQP block relevant interface in EPS
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_TXQ_IREADY_TH (26)

/**
 * \brief
 * Define ready TXQ treshold in PDs for TDM queues, when Q is above this treshold FQP block relevant interface in EPS
 */
#define DNX_DATA_MAX_EGR_QUEUING_PARAMS_TXQ_TDM_IREADY_TH (28)

/*
 * }
 */

/*}*/
#endif /*_DNX_DATA_MAX_EGR_QUEUING_H_*/
/* *INDENT-ON* */
