/** \file dnx/swstate/auto_generated/types/dnx_field_tcam_manager_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_FIELD_TCAM_MANAGER_TYPES_H__
#define __DNX_FIELD_TCAM_MANAGER_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_types.h>
/*
 * ENUMs
 */

/**
 * This enum represents the mode for the TCAM handler, this mode
 * parameter is provided as input when creating a new TCAM
 * handler.
 */
typedef enum {
    DNX_FIELD_TCAM_HANDLER_MODE_INVALID = -1,
    /**
     * Default mode, no same-priority order (LOOSE),
     * lower-value priorites are allocated to lower
     * entries than higher-value priorities, which
     * means that the lower-value priorites have the
     * advantage.
     */
    DNX_FIELD_TCAM_HANDLER_MODE_DEFAULT = 0,
    /**
     * Total number of modes
     */
    DNX_FIELD_TCAM_HANDLER_MODE_NOF_MODES = 1
} dnx_field_tcam_handler_mode_e;

/**
 * This enum represents the handler's state, it's
 * only meant for internal use.
 */
typedef enum {
    DNX_FIELD_TCAM_HANDLER_STATE_INVALID = -1,
    /**
     * State closed, handler is not in use
     */
    DNX_FIELD_TCAM_HANDLER_STATE_CLOSE = 0,
    /**
     * State open, handler is being used
     */
    DNX_FIELD_TCAM_HANDLER_STATE_OPEN = 1,
    /**
     * Total number of states
     */
    DNX_FIELD_TCAM_HANDLER_STATE_NOF_STATES = 2
} dnx_field_tcam_handler_state_e;

/*
 * STRUCTs
 */

/**
 * Contains information about each TCAM handler
 */
typedef struct {
    /**
     * handler's mode
     */
    dnx_field_tcam_handler_mode_e mode;
    /**
     * handler's state
     */
    dnx_field_tcam_handler_state_e state;
} dnx_field_tcam_handler_t;

/**
 * Holds information about all the TCAM handlers in the system
 */
typedef struct {
    /**
     * Array that represents all TCAM handlers in the system
     */
    dnx_field_tcam_handler_t* tcam_handlers;
} dnx_field_tcam_manager_sw_t;


#endif /* __DNX_FIELD_TCAM_MANAGER_TYPES_H__ */
