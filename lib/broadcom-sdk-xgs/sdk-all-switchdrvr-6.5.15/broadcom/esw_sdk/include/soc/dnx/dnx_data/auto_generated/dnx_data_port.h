/** \file dnx_data_port.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_PORT_H_
/*{*/
#define _DNX_DATA_PORT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/port.h>
#include <bcm_int/dnx/algo/port/algo_port_mgmt.h>
#include <soc/dnxc/legacy/dnxc_port.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_port.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_port
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_port_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - STATIC_ADD:
 * adding port statically
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule static_add table ucode_port
 * Table info:
 * static port configuration
 */
typedef struct
{
    /**
     * port interface
     */
    bcm_port_if_t interface;
    /**
     * port number of lanes
     */
    int nof_lanes;
    /**
     * interface offset
     */
    int interface_offset;
    /**
     * core id
     */
    bcm_core_t core;
    /**
     * tm port
     */
    int tm_port;
    /**
     * channel id
     */
    int channel;
    /**
     * true iff it is statistic interface port
     */
    int is_stif;
    /**
     * true iff it is kbp port
     */
    int is_kbp;
    /**
     * tdm mode of a port - see dnx_algo_port_tdm_mode_e
     */
    dnx_algo_port_tdm_mode_e tdm_mode;
    /**
     * number of port priorities
     */
    int num_priorities;
    /**
     * should be used just in case the user need to exlictly pick the base queue pair
     */
    int base_q_pair;
} dnx_data_port_static_add_ucode_port_t;

/**
 * \brief Holds values of submodule static_add table speed
 * Table info:
 * per port speed
 */
typedef struct
{
    /**
     * speed value in mbps
     */
    int val;
} dnx_data_port_static_add_speed_t;

/**
 * \brief Holds values of submodule static_add table ext_stat_speed
 * Table info:
 * per external kbp stat port speed
 */
typedef struct
{
    /**
     * speed value in mbps
     */
    int speed;
    /**
     * port number of lanes
     */
    int nof_lanes;
} dnx_data_port_static_add_ext_stat_speed_t;

/**
 * \brief Holds values of submodule static_add table eth_padding
 * Table info:
 * eth ports padding
 */
typedef struct
{
    /**
     * packets smaller than min size value are padded with this value
     */
    int pad_size;
} dnx_data_port_static_add_eth_padding_t;

/**
 * \brief Holds values of submodule static_add table link_training
 * Table info:
 * per port link training (CL72)
 */
typedef struct
{
    /**
     * Is CL72 is enabled
     */
    int val;
} dnx_data_port_static_add_link_training_t;

/**
 * \brief Holds values of submodule static_add table ext_stat_link_training
 * Table info:
 * per external kbp stat port link training (CL72)
 */
typedef struct
{
    /**
     * Is CL72 is enabled
     */
    int val;
} dnx_data_port_static_add_ext_stat_link_training_t;

/**
 * \brief Holds values of submodule static_add table fec_type
 * Table info:
 * per port FEC type
 */
typedef struct
{
    /**
     * FEC type
     */
    bcm_port_phy_fec_t val;
} dnx_data_port_static_add_fec_type_t;

/**
 * \brief Holds values of submodule static_add table serdes_lane_config
 * Table info:
 * serdes lane configurations, related to firmware
 */
typedef struct
{
    /**
     * dfe filter
     */
    soc_dnxc_port_dfe_mode_t dfe;
    /**
     * media type
     */
    int media_type;
    /**
     * unreliable los
     */
    int unreliable_los;
    /**
     * cl72 auto polarity
     */
    int cl72_auto_polarity_enable;
    /**
     * cl72 restart timeout
     */
    int cl72_restart_timeout_enable;
    /**
     * force nr or force er
     */
    soc_dnxc_port_channel_mode_t channel_mode;
} dnx_data_port_static_add_serdes_lane_config_t;

/**
 * \brief Holds values of submodule static_add table serdes_tx_taps
 * Table info:
 * PHY TX tap configuration
 */
typedef struct
{
    /**
     * Tx fir pre tap
     */
    int pre;
    /**
     * Tx fir main tap
     */
    int main;
    /**
     * Tx fir post tap
     */
    int post;
    /**
     * Tx fir pre2 tap
     */
    int pre2;
    /**
     * Tx fir post2 tap
     */
    int post2;
    /**
     * Tx fir post3 tap
     */
    int post3;
    /**
     * Tx fir tap mode
     */
    bcm_port_phy_tx_tap_mode_t tx_tap_mode;
    /**
     * Signalling Mode, NRZ or PAM4
     */
    bcm_port_phy_signalling_mode_t signalling_mode;
} dnx_data_port_static_add_serdes_tx_taps_t;

/**
 * \brief Holds values of submodule static_add table tx_pam4_precoder
 * Table info:
 * is the precoding enabled on TX side
 */
typedef struct
{
    /**
     * TX PAM4 Precoder
     */
    uint32 val;
} dnx_data_port_static_add_tx_pam4_precoder_t;

/**
 * \brief Holds values of submodule static_add table lp_tx_precoder
 * Table info:
 * has the link partner enabled pre-coding on its TX side. In other words - enable the decoding on my RX side.
 */
typedef struct
{
    /**
     * Link Partner TX Precoder
     */
    uint32 val;
} dnx_data_port_static_add_lp_tx_precoder_t;

/**
 * \brief Holds values of submodule static_add table fabric_quad_info
 * Table info:
 * General fabric quad info
 */
typedef struct
{
    /**
     * Is the quad enabled
     */
    int quad_enable;
} dnx_data_port_static_add_fabric_quad_info_t;

/**
 * \brief Holds values of submodule static_add table header_type
 * Table info:
 * header type information
 */
typedef struct
{
    /**
     * header type per incoming port
     */
    int header_type_in;
    /**
     * header type per outgoing port
     */
    int header_type_out;
    /**
     * header type per incoming/outgoing port
     */
    int header_type;
} dnx_data_port_static_add_header_type_t;

/**
 * \brief Holds values of submodule static_add table erp_exist
 * Table info:
 * Is ERP port defined in config file for the core
 */
typedef struct
{
    /**
     * does epr exist on this core
     */
    int exist;
} dnx_data_port_static_add_erp_exist_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_port_static_add_feature_nof
} dnx_data_port_static_add_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_port_static_add_feature_get_f) (
    int unit,
    dnx_data_port_static_add_feature_e feature);

/**
 * \brief returns define data of default_speed_for_special_if
 * Module - 'port', Submodule - 'static_add', data - 'default_speed_for_special_if'
 * default speed in kbps for special interfaces (tm ports excluding NIF)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_speed_for_special_if - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_static_add_default_speed_for_special_if_get_f) (
    int unit);

/**
 * \brief returns numeric data of fabric_fw_load_method
 * Module - 'port', Submodule - 'static_add', data - 'fabric_fw_load_method'
 * Method of the Fabric firmware load
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_fw_load_method - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_static_add_fabric_fw_load_method_get_f) (
    int unit);

/**
 * \brief returns numeric data of fabric_fw_load_verify
 * Module - 'port', Submodule - 'static_add', data - 'fabric_fw_load_verify'
 * Fabric firmware load verification method
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_fw_load_verify - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_static_add_fabric_fw_load_verify_get_f) (
    int unit);

/**
 * \brief returns numeric data of nif_fw_load_method
 * Module - 'port', Submodule - 'static_add', data - 'nif_fw_load_method'
 * Method of the Nif firmware load
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_fw_load_method - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_static_add_nif_fw_load_method_get_f) (
    int unit);

/**
 * \brief get table ucode_port entry 
 * static port configuration
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port
 * 
 * \return
 *     ucode_port - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_ucode_port_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_ucode_port_t *(
    *dnx_data_port_static_add_ucode_port_get_f) (
    int unit,
    int port);

/**
 * \brief get table speed entry 
 * per port speed
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     speed - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_speed_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_speed_t *(
    *dnx_data_port_static_add_speed_get_f) (
    int unit,
    int port);

/**
 * \brief get table ext_stat_speed entry 
 * per external kbp stat port speed
 * 
 * \param [in] unit - unit #
 * \param [in] ext_stat_port - external device (kbp) statistics port number
 * 
 * \return
 *     ext_stat_speed - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_ext_stat_speed_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_ext_stat_speed_t *(
    *dnx_data_port_static_add_ext_stat_speed_get_f) (
    int unit,
    int ext_stat_port);

/**
 * \brief get table eth_padding entry 
 * eth ports padding
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     eth_padding - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_eth_padding_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_eth_padding_t *(
    *dnx_data_port_static_add_eth_padding_get_f) (
    int unit,
    int port);

/**
 * \brief get table link_training entry 
 * per port link training (CL72)
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     link_training - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_link_training_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_link_training_t *(
    *dnx_data_port_static_add_link_training_get_f) (
    int unit,
    int port);

/**
 * \brief get table ext_stat_link_training entry 
 * per external kbp stat port link training (CL72)
 * 
 * \param [in] unit - unit #
 * \param [in] ext_stat_port - external device (kbp) statistics port number
 * 
 * \return
 *     ext_stat_link_training - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_ext_stat_link_training_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_ext_stat_link_training_t *(
    *dnx_data_port_static_add_ext_stat_link_training_get_f) (
    int unit,
    int ext_stat_port);

/**
 * \brief get table fec_type entry 
 * per port FEC type
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     fec_type - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_fec_type_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_fec_type_t *(
    *dnx_data_port_static_add_fec_type_get_f) (
    int unit,
    int port);

/**
 * \brief get table serdes_lane_config entry 
 * serdes lane configurations, related to firmware
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     serdes_lane_config - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_serdes_lane_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_serdes_lane_config_t *(
    *dnx_data_port_static_add_serdes_lane_config_get_f) (
    int unit,
    int port);

/**
 * \brief get table serdes_tx_taps entry 
 * PHY TX tap configuration
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     serdes_tx_taps - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_serdes_tx_taps_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_serdes_tx_taps_t *(
    *dnx_data_port_static_add_serdes_tx_taps_get_f) (
    int unit,
    int port);

/**
 * \brief get table tx_pam4_precoder entry 
 * is the precoding enabled on TX side
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     tx_pam4_precoder - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_tx_pam4_precoder_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_tx_pam4_precoder_t *(
    *dnx_data_port_static_add_tx_pam4_precoder_get_f) (
    int unit,
    int port);

/**
 * \brief get table lp_tx_precoder entry 
 * has the link partner enabled pre-coding on its TX side. In other words - enable the decoding on my RX side.
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     lp_tx_precoder - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_lp_tx_precoder_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_lp_tx_precoder_t *(
    *dnx_data_port_static_add_lp_tx_precoder_get_f) (
    int unit,
    int port);

/**
 * \brief get table fabric_quad_info entry 
 * General fabric quad info
 * 
 * \param [in] unit - unit #
 * \param [in] quad - Quad ID
 * 
 * \return
 *     fabric_quad_info - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_fabric_quad_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_fabric_quad_info_t *(
    *dnx_data_port_static_add_fabric_quad_info_get_f) (
    int unit,
    int quad);

/**
 * \brief get table header_type entry 
 * header type information
 * 
 * \param [in] unit - unit #
 * \param [in] port - port
 * 
 * \return
 *     header_type - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_header_type_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_header_type_t *(
    *dnx_data_port_static_add_header_type_get_f) (
    int unit,
    int port);

/**
 * \brief get table erp_exist entry 
 * Is ERP port defined in config file for the core
 * 
 * \param [in] unit - unit #
 * \param [in] core - core
 * 
 * \return
 *     erp_exist - returns the relevant entry values grouped in struct - see dnx_data_port_static_add_erp_exist_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_port_static_add_erp_exist_t *(
    *dnx_data_port_static_add_erp_exist_get_f) (
    int unit,
    int core);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PORT - STATIC_ADD:
 * {
 */
/**
 * \brief Interface for port static_add data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_port_static_add_feature_get_f feature_get;
    /**
     * returns define data of default_speed_for_special_if
     */
    dnx_data_port_static_add_default_speed_for_special_if_get_f default_speed_for_special_if_get;
    /**
     * returns numeric data of fabric_fw_load_method
     */
    dnx_data_port_static_add_fabric_fw_load_method_get_f fabric_fw_load_method_get;
    /**
     * returns numeric data of fabric_fw_load_verify
     */
    dnx_data_port_static_add_fabric_fw_load_verify_get_f fabric_fw_load_verify_get;
    /**
     * returns numeric data of nif_fw_load_method
     */
    dnx_data_port_static_add_nif_fw_load_method_get_f nif_fw_load_method_get;
    /**
     * get table ucode_port entry 
     */
    dnx_data_port_static_add_ucode_port_get_f ucode_port_get;
    /**
     * get general info table about table (for example key size)ucode_port info
     */
    dnxc_data_table_info_get_f ucode_port_info_get;
    /**
     * get table speed entry 
     */
    dnx_data_port_static_add_speed_get_f speed_get;
    /**
     * get general info table about table (for example key size)speed info
     */
    dnxc_data_table_info_get_f speed_info_get;
    /**
     * get table ext_stat_speed entry 
     */
    dnx_data_port_static_add_ext_stat_speed_get_f ext_stat_speed_get;
    /**
     * get general info table about table (for example key size)ext_stat_speed info
     */
    dnxc_data_table_info_get_f ext_stat_speed_info_get;
    /**
     * get table eth_padding entry 
     */
    dnx_data_port_static_add_eth_padding_get_f eth_padding_get;
    /**
     * get general info table about table (for example key size)eth_padding info
     */
    dnxc_data_table_info_get_f eth_padding_info_get;
    /**
     * get table link_training entry 
     */
    dnx_data_port_static_add_link_training_get_f link_training_get;
    /**
     * get general info table about table (for example key size)link_training info
     */
    dnxc_data_table_info_get_f link_training_info_get;
    /**
     * get table ext_stat_link_training entry 
     */
    dnx_data_port_static_add_ext_stat_link_training_get_f ext_stat_link_training_get;
    /**
     * get general info table about table (for example key size)ext_stat_link_training info
     */
    dnxc_data_table_info_get_f ext_stat_link_training_info_get;
    /**
     * get table fec_type entry 
     */
    dnx_data_port_static_add_fec_type_get_f fec_type_get;
    /**
     * get general info table about table (for example key size)fec_type info
     */
    dnxc_data_table_info_get_f fec_type_info_get;
    /**
     * get table serdes_lane_config entry 
     */
    dnx_data_port_static_add_serdes_lane_config_get_f serdes_lane_config_get;
    /**
     * get general info table about table (for example key size)serdes_lane_config info
     */
    dnxc_data_table_info_get_f serdes_lane_config_info_get;
    /**
     * get table serdes_tx_taps entry 
     */
    dnx_data_port_static_add_serdes_tx_taps_get_f serdes_tx_taps_get;
    /**
     * get general info table about table (for example key size)serdes_tx_taps info
     */
    dnxc_data_table_info_get_f serdes_tx_taps_info_get;
    /**
     * get table tx_pam4_precoder entry 
     */
    dnx_data_port_static_add_tx_pam4_precoder_get_f tx_pam4_precoder_get;
    /**
     * get general info table about table (for example key size)tx_pam4_precoder info
     */
    dnxc_data_table_info_get_f tx_pam4_precoder_info_get;
    /**
     * get table lp_tx_precoder entry 
     */
    dnx_data_port_static_add_lp_tx_precoder_get_f lp_tx_precoder_get;
    /**
     * get general info table about table (for example key size)lp_tx_precoder info
     */
    dnxc_data_table_info_get_f lp_tx_precoder_info_get;
    /**
     * get table fabric_quad_info entry 
     */
    dnx_data_port_static_add_fabric_quad_info_get_f fabric_quad_info_get;
    /**
     * get general info table about table (for example key size)fabric_quad_info info
     */
    dnxc_data_table_info_get_f fabric_quad_info_info_get;
    /**
     * get table header_type entry 
     */
    dnx_data_port_static_add_header_type_get_f header_type_get;
    /**
     * get general info table about table (for example key size)header_type info
     */
    dnxc_data_table_info_get_f header_type_info_get;
    /**
     * get table erp_exist entry 
     */
    dnx_data_port_static_add_erp_exist_get_f erp_exist_get;
    /**
     * get general info table about table (for example key size)erp_exist info
     */
    dnxc_data_table_info_get_f erp_exist_info_get;
} dnx_data_if_port_static_add_t;

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * general ports data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_port_general_feature_nof
} dnx_data_port_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_port_general_feature_get_f) (
    int unit,
    dnx_data_port_general_feature_e feature);

/**
 * \brief returns define data of nof_tm_ports
 * Module - 'port', Submodule - 'general', data - 'nof_tm_ports'
 * nof tm ports per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_tm_ports - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_nof_tm_ports_get_f) (
    int unit);

/**
 * \brief returns define data of erp_tm_port
 * Module - 'port', Submodule - 'general', data - 'erp_tm_port'
 * tm port reserved for ERP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     erp_tm_port - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_erp_tm_port_get_f) (
    int unit);

/**
 * \brief returns define data of reserved_tm_port
 * Module - 'port', Submodule - 'general', data - 'reserved_tm_port'
 * tm port reserved for redirection of returned credits in LAG SCH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     reserved_tm_port - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_reserved_tm_port_get_f) (
    int unit);

/**
 * \brief returns define data of nof_pp_ports
 * Module - 'port', Submodule - 'general', data - 'nof_pp_ports'
 * nof pp ports per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pp_ports - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_nof_pp_ports_get_f) (
    int unit);

/**
 * \brief returns define data of nof_pms
 * Module - 'port', Submodule - 'general', data - 'nof_pms'
 * Number of port macros overall in the system
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pms - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_nof_pms_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_channels
 * Module - 'port', Submodule - 'general', data - 'max_nof_channels'
 * max nof channel in an interface
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_channels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_max_nof_channels_get_f) (
    int unit);

/**
 * \brief returns define data of fabric_phys_offset
 * Module - 'port', Submodule - 'general', data - 'fabric_phys_offset'
 * Offset for physical fabric ports
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_phys_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_fabric_phys_offset_get_f) (
    int unit);

/**
 * \brief returns define data of tm_port_size
 * Module - 'port', Submodule - 'general', data - 'tm_port_size'
 * define the size of the tm port (in bits)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_port_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_tm_port_size_get_f) (
    int unit);

/**
 * \brief returns define data of pp_port_size
 * Module - 'port', Submodule - 'general', data - 'pp_port_size'
 * define the size of the pp port (in bits)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pp_port_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_pp_port_size_get_f) (
    int unit);

/**
 * \brief returns define data of pp_dsp_size
 * Module - 'port', Submodule - 'general', data - 'pp_dsp_size'
 * define the size of the pp dsp (in bits)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pp_dsp_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_pp_dsp_size_get_f) (
    int unit);

/**
 * \brief returns define data of vlan_domain_size
 * Module - 'port', Submodule - 'general', data - 'vlan_domain_size'
 * define the size of the vlan domain (in bits)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vlan_domain_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_vlan_domain_size_get_f) (
    int unit);

/**
 * \brief returns define data of nof_vlan_membership_if
 * Module - 'port', Submodule - 'general', data - 'nof_vlan_membership_if'
 * number of vlan_membership_if
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_vlan_membership_if - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_nof_vlan_membership_if_get_f) (
    int unit);

/**
 * \brief returns define data of ffc_instruction_size
 * Module - 'port', Submodule - 'general', data - 'ffc_instruction_size'
 * define the size of the ffc instruction (in bits)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ffc_instruction_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_ffc_instruction_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of fabric_port_base
 * Module - 'port', Submodule - 'general', data - 'fabric_port_base'
 * first fabric logical port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_port_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_fabric_port_base_get_f) (
    int unit);

/**
 * \brief returns numeric data of dynamic_port_enable
 * Module - 'port', Submodule - 'general', data - 'dynamic_port_enable'
 * dynamic port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dynamic_port_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_general_dynamic_port_enable_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PORT - GENERAL:
 * {
 */
/**
 * \brief Interface for port general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_port_general_feature_get_f feature_get;
    /**
     * returns define data of nof_tm_ports
     */
    dnx_data_port_general_nof_tm_ports_get_f nof_tm_ports_get;
    /**
     * returns define data of erp_tm_port
     */
    dnx_data_port_general_erp_tm_port_get_f erp_tm_port_get;
    /**
     * returns define data of reserved_tm_port
     */
    dnx_data_port_general_reserved_tm_port_get_f reserved_tm_port_get;
    /**
     * returns define data of nof_pp_ports
     */
    dnx_data_port_general_nof_pp_ports_get_f nof_pp_ports_get;
    /**
     * returns define data of nof_pms
     */
    dnx_data_port_general_nof_pms_get_f nof_pms_get;
    /**
     * returns define data of max_nof_channels
     */
    dnx_data_port_general_max_nof_channels_get_f max_nof_channels_get;
    /**
     * returns define data of fabric_phys_offset
     */
    dnx_data_port_general_fabric_phys_offset_get_f fabric_phys_offset_get;
    /**
     * returns define data of tm_port_size
     */
    dnx_data_port_general_tm_port_size_get_f tm_port_size_get;
    /**
     * returns define data of pp_port_size
     */
    dnx_data_port_general_pp_port_size_get_f pp_port_size_get;
    /**
     * returns define data of pp_dsp_size
     */
    dnx_data_port_general_pp_dsp_size_get_f pp_dsp_size_get;
    /**
     * returns define data of vlan_domain_size
     */
    dnx_data_port_general_vlan_domain_size_get_f vlan_domain_size_get;
    /**
     * returns define data of nof_vlan_membership_if
     */
    dnx_data_port_general_nof_vlan_membership_if_get_f nof_vlan_membership_if_get;
    /**
     * returns define data of ffc_instruction_size
     */
    dnx_data_port_general_ffc_instruction_size_get_f ffc_instruction_size_get;
    /**
     * returns numeric data of fabric_port_base
     */
    dnx_data_port_general_fabric_port_base_get_f fabric_port_base_get;
    /**
     * returns numeric data of dynamic_port_enable
     */
    dnx_data_port_general_dynamic_port_enable_get_f dynamic_port_enable_get;
} dnx_data_if_port_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - EGRESS:
 * egress related data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_port_egress_feature_nof
} dnx_data_port_egress_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_port_egress_feature_get_f) (
    int unit,
    dnx_data_port_egress_feature_e feature);

/**
 * \brief returns define data of nof_ifs
 * Module - 'port', Submodule - 'egress', data - 'nof_ifs'
 * nof egress intrfaces per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ifs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_port_egress_nof_ifs_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PORT - EGRESS:
 * {
 */
/**
 * \brief Interface for port egress data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_port_egress_feature_get_f feature_get;
    /**
     * returns define data of nof_ifs
     */
    dnx_data_port_egress_nof_ifs_get_f nof_ifs_get;
} dnx_data_if_port_egress_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_PORT:
 * {
 */
/**
 * \brief Interface for port data
 */
typedef struct
{
    /**
     * Interface for port static_add data
     */
    dnx_data_if_port_static_add_t static_add;
    /**
     * Interface for port general data
     */
    dnx_data_if_port_general_t general;
    /**
     * Interface for port egress data
     */
    dnx_data_if_port_egress_t egress;
} dnx_data_if_port_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_port_t dnx_data_port;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_PORT_H_*/
/* *INDENT-ON* */
