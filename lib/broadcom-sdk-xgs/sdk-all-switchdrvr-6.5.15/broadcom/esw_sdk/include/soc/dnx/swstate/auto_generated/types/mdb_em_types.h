/** \file dnx/swstate/auto_generated/types/mdb_em_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __MDB_EM_TYPES_H__
#define __MDB_EM_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnx/dbal/dbal_structures.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_mdb.h>
#include <soc/dnxc/swstate/callbacks/sw_state_htb_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/dnxc/swstate/types/sw_state_hash_table.h>
/*
 * MACROs
 */

/**
 * The largest payload size associated with an EM table is 160 bits(LEM)
 */
#define MDB_MAX_EM_KEY_SIZE_IN_UINT32 (5)

/*
 * ENUMs
 */

/**
 * VMV shift of the relevant blocks/tables.
 */
typedef enum {
    /**
     * vmv shift of the FLP
     */
    MDB_EM_SHIFT_VMV_FLP = 0,
    /**
     * vmv shift of the VTT 1
     */
    MDB_EM_SHIFT_VMV_VTT_1 = 1,
    /**
     * vmv shift of the VTT 2 and 3
     */
    MDB_EM_SHIFT_VMV_VTT_2_3 = 2,
    /**
     * vmv shift of the VTT 4 and 5
     */
    MDB_EM_SHIFT_VMV_VTT_4_5 = 3,
    /**
     * vmv shift of the IOAM
     */
    MDB_EM_SHIFT_VMV_IOAM = 4,
    /**
     * vmv shift of the EOAM
     */
    MDB_EM_SHIFT_VMV_EOAM = 5,
    /**
     * vmv shift of the RMEP
     */
    MDB_EM_SHIFT_VMV_RMEP = 6,
    /**
     * vmv shift of the ISEM 1
     */
    MDB_EM_SHIFT_VMV_ESEM_1 = 7,
    /**
     * vmv shift of the ISEM 2
     */
    MDB_EM_SHIFT_VMV_ESEM_2 = 8,
    /**
     * vmv shift of the ISEM 3
     */
    MDB_EM_SHIFT_VMV_ESEM_3 = 9,
    /**
     * NOF VMV stages
     */
    MDB_EM_SHIFT_VMV_STAGES = 10
} mdb_em_vmv_shift_blocks;

/*
 * STRUCTs
 */

typedef struct {
    /**
     * the value of the VMV
     */
    uint8 encoding;
    /**
     * the prefix size of the VMV
     */
    uint8 size;
} vmv_value_parameters_t;

typedef struct {
    /**
     * the value of the VMV
     */
    uint8 value[DNX_DATA_MAX_MDB_EM_NOF_ENCODING_VALUES];
    /**
     * size of the VMV prefix
     */
    uint8 size[DNX_DATA_MAX_MDB_EM_NOF_ENCODING_VALUES];
    /**
     * map between the VMV value into the VMV encoding and size
     */
    vmv_value_parameters_t encoding_map[DNX_DATA_MAX_MDB_EM_VMV_NOF_VALUES];
    /**
     * the app_id size
     */
    uint8 app_id_size[DNX_DATA_MAX_MDB_EM_MAX_NOF_TIDS];
} vmv_info_t;

/**
 * MDB EM (exact match) related sw state
 */
typedef struct {
    /**
     * This shadow database holds all the EM entries that are not supported by a flush machine.
     */
    sw_state_htbl_t shadow_em_db[DBAL_NOF_PHYSICAL_TABLES];
    /**
     * this is a bitmap indicate whice LEM applicaiton is a MACT app.
     */
    SHR_BITDCL is_mact_lem_app[((DNX_DATA_MAX_MDB_EM_MAX_NOF_TIDS)/SHR_BITWID)+1];
    /**
     * holds VMV information
     */
    vmv_info_t vmv_info[DBAL_NOF_PHYSICAL_TABLES];
    /**
     * holds VMV shift information per stage
     */
    dbal_physical_tables_e shift_vmv_mapping[MDB_EM_SHIFT_VMV_STAGES][DNX_DATA_MAX_MDB_EM_SHIFT_VMV_MAX_SIZE];
} mdb_em_sw_state_t;


#endif /* __MDB_EM_TYPES_H__ */
