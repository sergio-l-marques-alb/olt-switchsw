/** \file dnx_data_internal_fabric.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_FABRIC_H_
/*{*/
#define _DNX_DATA_INTERNAL_FABRIC_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_fabric.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_fabric_submodule_general,
    dnx_data_fabric_submodule_links,
    dnx_data_fabric_submodule_blocks,
    dnx_data_fabric_submodule_reachability,
    dnx_data_fabric_submodule_mesh,
    dnx_data_fabric_submodule_thresholds,
    dnx_data_fabric_submodule_cell,
    dnx_data_fabric_submodule_pipes,
    dnx_data_fabric_submodule_debug,
    dnx_data_fabric_submodule_tdm,
    dnx_data_fabric_submodule_cgm,
    dnx_data_fabric_submodule_ilkn,
    dnx_data_fabric_submodule_dbal,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_submodule_nof
} dnx_data_fabric_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_general_feature_get(
    int unit,
    dnx_data_fabric_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_general_define_nof_lcplls,
    dnx_data_fabric_general_define_fmac_clock_khz,
    dnx_data_fabric_general_define_connect_mode,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_general_define_nof
} dnx_data_fabric_general_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_lcplls
 * Module - 'fabric', Submodule - 'general', data - 'nof_lcplls'
 * number of lcplls supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lcplls - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_general_nof_lcplls_get(
    int unit);

/**
 * \brief returns define data of fmac_clock_khz
 * Module - 'fabric', Submodule - 'general', data - 'fmac_clock_khz'
 * FMAC clock frequency [KHz]
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmac_clock_khz - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_general_fmac_clock_khz_get(
    int unit);

/**
 * \brief returns numeric data of connect_mode
 * Module - 'fabric', Submodule - 'general', data - 'connect_mode'
 * Fabric interface connect mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     connect_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_general_connect_mode_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fabric_general_table_fmac_bus_size,
    dnx_data_fabric_general_table_pll_phys,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_general_table_nof
} dnx_data_fabric_general_table_e;

/* Get Data */
/**
 * \brief get table fmac_bus_size entry 
 * Fabric MAC bus size [bits]
 * 
 * \param [in] unit - unit #
 * \param [in] mode - Fabric MAC mode (FEC type)
 * 
 * \return
 *     fmac_bus_size - returns the relevant entry values grouped in struct - see dnx_data_fabric_general_fmac_bus_size_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_general_fmac_bus_size_t * dnx_data_fabric_general_fmac_bus_size_get(
    int unit,
    int mode);

/**
 * \brief get table pll_phys entry 
 * phys controlled by each lcpll
 * 
 * \param [in] unit - unit #
 * \param [in] lcpll - LCPLL index
 * 
 * \return
 *     pll_phys - returns the relevant entry values grouped in struct - see dnx_data_fabric_general_pll_phys_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_general_pll_phys_t * dnx_data_fabric_general_pll_phys_get(
    int unit,
    int lcpll);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'general', table - 'fmac_bus_size'
 * Fabric MAC bus size [bits]
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_general_fmac_bus_size_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'general', table - 'pll_phys'
 * phys controlled by each lcpll
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_general_pll_phys_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)fmac_bus_size info
 * Fabric MAC bus size [bits]
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmac_bus_size - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_general_fmac_bus_size_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)pll_phys info
 * phys controlled by each lcpll
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pll_phys - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_general_pll_phys_info_get(
    int unit);

/*
 * SUBMODULE LINKS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_links_feature_get(
    int unit,
    dnx_data_fabric_links_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_links_define_nof_links,
    dnx_data_fabric_links_define_max_link_id,
    dnx_data_fabric_links_define_max_speed,
    dnx_data_fabric_links_define_core_mapping_mode,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_links_define_nof
} dnx_data_fabric_links_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_links
 * Module - 'fabric', Submodule - 'links', data - 'nof_links'
 * Number of fabric links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_links_nof_links_get(
    int unit);

/**
 * \brief returns define data of max_link_id
 * Module - 'fabric', Submodule - 'links', data - 'max_link_id'
 * Maximum id of a fabric link
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_link_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_links_max_link_id_get(
    int unit);

/**
 * \brief returns define data of max_speed
 * Module - 'fabric', Submodule - 'links', data - 'max_speed'
 * Maximum speed a fabric link can have
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_speed - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_links_max_speed_get(
    int unit);

/**
 * \brief returns numeric data of core_mapping_mode
 * Module - 'fabric', Submodule - 'links', data - 'core_mapping_mode'
 * Fabric link-to-core mapping mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_mapping_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_links_core_mapping_mode_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fabric_links_table_general,
    dnx_data_fabric_links_table_polarity,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_links_table_nof
} dnx_data_fabric_links_table_e;

/* Get Data */
/**
 * \brief get table general entry 
 * general data about links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     general - returns the relevant entry values grouped in struct - see dnx_data_fabric_links_general_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_links_general_t * dnx_data_fabric_links_general_get(
    int unit);

/**
 * \brief get table polarity entry 
 * Polarity of fabric link
 * 
 * \param [in] unit - unit #
 * \param [in] link - fabric link id
 * 
 * \return
 *     polarity - returns the relevant entry values grouped in struct - see dnx_data_fabric_links_polarity_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_links_polarity_t * dnx_data_fabric_links_polarity_get(
    int unit,
    int link);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'links', table - 'general'
 * general data about links
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_links_general_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'links', table - 'polarity'
 * Polarity of fabric link
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_links_polarity_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)general info
 * general data about links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     general - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_links_general_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)polarity info
 * Polarity of fabric link
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     polarity - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_links_polarity_info_get(
    int unit);

/*
 * SUBMODULE BLOCKS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_blocks_feature_get(
    int unit,
    dnx_data_fabric_blocks_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_blocks_define_nof_instances_fmac,
    dnx_data_fabric_blocks_define_nof_links_in_fmac,
    dnx_data_fabric_blocks_define_nof_instances_fsrd,
    dnx_data_fabric_blocks_define_nof_links_in_fsrd,
    dnx_data_fabric_blocks_define_nof_fmacs_in_fsrd,
    dnx_data_fabric_blocks_define_nof_pms,
    dnx_data_fabric_blocks_define_nof_links_in_pm,
    dnx_data_fabric_blocks_define_nof_fmacs_in_pm,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_blocks_define_nof
} dnx_data_fabric_blocks_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_instances_fmac
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_instances_fmac'
 * Number of FMAC instances.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_instances_fmac - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_blocks_nof_instances_fmac_get(
    int unit);

/**
 * \brief returns define data of nof_links_in_fmac
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_links_in_fmac'
 * Number of links for each FMAC block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links_in_fmac - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_blocks_nof_links_in_fmac_get(
    int unit);

/**
 * \brief returns define data of nof_instances_fsrd
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_instances_fsrd'
 * Number of FSRD instances.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_instances_fsrd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_blocks_nof_instances_fsrd_get(
    int unit);

/**
 * \brief returns define data of nof_links_in_fsrd
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_links_in_fsrd'
 * Number of links for each FSRD block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links_in_fsrd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_blocks_nof_links_in_fsrd_get(
    int unit);

/**
 * \brief returns define data of nof_fmacs_in_fsrd
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_fmacs_in_fsrd'
 * Number of FMAC blocks for each FSRD block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fmacs_in_fsrd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_blocks_nof_fmacs_in_fsrd_get(
    int unit);

/**
 * \brief returns define data of nof_pms
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_pms'
 * Number of fabric PMs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pms - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_blocks_nof_pms_get(
    int unit);

/**
 * \brief returns define data of nof_links_in_pm
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_links_in_pm'
 * Number of links for each fabric PM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links_in_pm - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_blocks_nof_links_in_pm_get(
    int unit);

/**
 * \brief returns define data of nof_fmacs_in_pm
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_fmacs_in_pm'
 * Number of FMAC blocks for each fabric PM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fmacs_in_pm - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_blocks_nof_fmacs_in_pm_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fabric_blocks_table_fsrd_sbus_chain,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_blocks_table_nof
} dnx_data_fabric_blocks_table_e;

/* Get Data */
/**
 * \brief get table fsrd_sbus_chain entry 
 * The order of FSRDs in the SBUS chain
 * 
 * \param [in] unit - unit #
 * \param [in] fsrd_id - FSRD ID
 * 
 * \return
 *     fsrd_sbus_chain - returns the relevant entry values grouped in struct - see dnx_data_fabric_blocks_fsrd_sbus_chain_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_blocks_fsrd_sbus_chain_t * dnx_data_fabric_blocks_fsrd_sbus_chain_get(
    int unit,
    int fsrd_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'blocks', table - 'fsrd_sbus_chain'
 * The order of FSRDs in the SBUS chain
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_blocks_fsrd_sbus_chain_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)fsrd_sbus_chain info
 * The order of FSRDs in the SBUS chain
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fsrd_sbus_chain - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_blocks_fsrd_sbus_chain_info_get(
    int unit);

/*
 * SUBMODULE REACHABILITY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_reachability_feature_get(
    int unit,
    dnx_data_fabric_reachability_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_reachability_define_resolution,
    dnx_data_fabric_reachability_define_gen_period,
    dnx_data_fabric_reachability_define_full_cycle_period_usec,
    dnx_data_fabric_reachability_define_watchdog_resolution,
    dnx_data_fabric_reachability_define_watchdog_period_usec,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_reachability_define_nof
} dnx_data_fabric_reachability_define_e;

/* Get Data */
/**
 * \brief returns define data of resolution
 * Module - 'fabric', Submodule - 'reachability', data - 'resolution'
 * Reachability messages resolution.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_reachability_resolution_get(
    int unit);

/**
 * \brief returns define data of gen_period
 * Module - 'fabric', Submodule - 'reachability', data - 'gen_period'
 * Reachability message generation period (in units of chip clocks).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gen_period - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_reachability_gen_period_get(
    int unit);

/**
 * \brief returns define data of full_cycle_period_usec
 * Module - 'fabric', Submodule - 'reachability', data - 'full_cycle_period_usec'
 * Full cycle of reachability cells period (in units of micro-seconds).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     full_cycle_period_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_reachability_full_cycle_period_usec_get(
    int unit);

/**
 * \brief returns define data of watchdog_resolution
 * Module - 'fabric', Submodule - 'reachability', data - 'watchdog_resolution'
 * Reachability message watchdog resolution..
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watchdog_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_reachability_watchdog_resolution_get(
    int unit);

/**
 * \brief returns define data of watchdog_period_usec
 * Module - 'fabric', Submodule - 'reachability', data - 'watchdog_period_usec'
 * Reachability message watchdog period (in units of micto-seconds).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watchdog_period_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_reachability_watchdog_period_usec_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_reachability_table_nof
} dnx_data_fabric_reachability_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE MESH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_mesh_feature_get(
    int unit,
    dnx_data_fabric_mesh_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_mesh_define_max_mc_id,
    dnx_data_fabric_mesh_define_multicast_enable,
    dnx_data_fabric_mesh_define_nof_max_dest,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_mesh_define_nof
} dnx_data_fabric_mesh_define_e;

/* Get Data */
/**
 * \brief returns define data of max_mc_id
 * Module - 'fabric', Submodule - 'mesh', data - 'max_mc_id'
 * Maximum MC ID in MESH mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_mc_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_mesh_max_mc_id_get(
    int unit);

/**
 * \brief returns numeric data of multicast_enable
 * Module - 'fabric', Submodule - 'mesh', data - 'multicast_enable'
 * Detemines whether the MESH system supports MC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     multicast_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_mesh_multicast_enable_get(
    int unit);

/**
 * \brief returns numeric data of nof_max_dest
 * Module - 'fabric', Submodule - 'mesh', data - 'nof_max_dest'
 * Number of maximum FAP destination in MESH mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_max_dest - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_mesh_nof_max_dest_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_mesh_table_nof
} dnx_data_fabric_mesh_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE THRESHOLDS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_thresholds_feature_get(
    int unit,
    dnx_data_fabric_thresholds_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_thresholds_define_default_severity,
    dnx_data_fabric_thresholds_define_default_mode,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_thresholds_define_nof
} dnx_data_fabric_thresholds_define_e;

/* Get Data */
/**
 * \brief returns define data of default_severity
 * Module - 'fabric', Submodule - 'thresholds', data - 'default_severity'
 * default severity for thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_severity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_thresholds_default_severity_get(
    int unit);

/**
 * \brief returns define data of default_mode
 * Module - 'fabric', Submodule - 'thresholds', data - 'default_mode'
 * default mode for thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_thresholds_default_mode_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fabric_thresholds_table_dch_default,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_thresholds_table_nof
} dnx_data_fabric_thresholds_table_e;

/* Get Data */
/**
 * \brief get table dch_default entry 
 * set of threholds
 * 
 * \param [in] unit - unit #
 * \param [in] severity - severity thresholds
 * \param [in] mode - mode of threholds according to fabric pipes
 * 
 * \return
 *     dch_default - returns the relevant entry values grouped in struct - see dnx_data_fabric_thresholds_dch_default_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_thresholds_dch_default_t * dnx_data_fabric_thresholds_dch_default_get(
    int unit,
    int severity,
    int mode);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'thresholds', table - 'dch_default'
 * set of threholds
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_thresholds_dch_default_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)dch_default info
 * set of threholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dch_default - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_thresholds_dch_default_info_get(
    int unit);

/*
 * SUBMODULE CELL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_cell_feature_get(
    int unit,
    dnx_data_fabric_cell_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_cell_define_nof_priorities,
    dnx_data_fabric_cell_define_vsc256_max_size,
    dnx_data_fabric_cell_define_sr_cell_header_offset,
    dnx_data_fabric_cell_define_default_packing_mode,
    dnx_data_fabric_cell_define_pcp_enable,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_cell_define_nof
} dnx_data_fabric_cell_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_priorities
 * Module - 'fabric', Submodule - 'cell', data - 'nof_priorities'
 * nof of supported fabric priorities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_priorities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_cell_nof_priorities_get(
    int unit);

/**
 * \brief returns define data of vsc256_max_size
 * Module - 'fabric', Submodule - 'cell', data - 'vsc256_max_size'
 * Max cell size in VSC256 configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vsc256_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_cell_vsc256_max_size_get(
    int unit);

/**
 * \brief returns define data of sr_cell_header_offset
 * Module - 'fabric', Submodule - 'cell', data - 'sr_cell_header_offset'
 * Offset in the header fields of sr cells (bytes)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sr_cell_header_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_cell_sr_cell_header_offset_get(
    int unit);

/**
 * \brief returns numeric data of default_packing_mode
 * Module - 'fabric', Submodule - 'cell', data - 'default_packing_mode'
 * Default packing mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_packing_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_cell_default_packing_mode_get(
    int unit);

/**
 * \brief returns numeric data of pcp_enable
 * Module - 'fabric', Submodule - 'cell', data - 'pcp_enable'
 * packet cell packing enable
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pcp_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_cell_pcp_enable_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_cell_table_nof
} dnx_data_fabric_cell_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE PIPES:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_pipes_feature_get(
    int unit,
    dnx_data_fabric_pipes_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_pipes_define_max_nof_pipes,
    dnx_data_fabric_pipes_define_nof_pipes,
    dnx_data_fabric_pipes_define_multi_pipe_system,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_pipes_define_nof
} dnx_data_fabric_pipes_define_e;

/* Get Data */
/**
 * \brief returns define data of max_nof_pipes
 * Module - 'fabric', Submodule - 'pipes', data - 'max_nof_pipes'
 * max supported fabric pipes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_pipes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_pipes_max_nof_pipes_get(
    int unit);

/**
 * \brief returns numeric data of nof_pipes
 * Module - 'fabric', Submodule - 'pipes', data - 'nof_pipes'
 * number of actual (configured) pipes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pipes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_pipes_nof_pipes_get(
    int unit);

/**
 * \brief returns numeric data of multi_pipe_system
 * Module - 'fabric', Submodule - 'pipes', data - 'multi_pipe_system'
 * Is there a device in the system in multi pipes mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     multi_pipe_system - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_pipes_multi_pipe_system_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fabric_pipes_table_map,
    dnx_data_fabric_pipes_table_valid_map_config,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_pipes_table_nof
} dnx_data_fabric_pipes_table_e;

/* Get Data */
/**
 * \brief get table map entry 
 * map traffic cast X priority to fabric pipe
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     map - returns the relevant entry values grouped in struct - see dnx_data_fabric_pipes_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_pipes_map_t * dnx_data_fabric_pipes_map_get(
    int unit);

/**
 * \brief get table valid_map_config entry 
 * pipes map valid configurations
 * 
 * \param [in] unit - unit #
 * \param [in] config_id - The configuration running number
 * 
 * \return
 *     valid_map_config - returns the relevant entry values grouped in struct - see dnx_data_fabric_pipes_valid_map_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_pipes_valid_map_config_t * dnx_data_fabric_pipes_valid_map_config_get(
    int unit,
    int config_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'pipes', table - 'map'
 * map traffic cast X priority to fabric pipe
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_pipes_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'pipes', table - 'valid_map_config'
 * pipes map valid configurations
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_pipes_valid_map_config_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)map info
 * map traffic cast X priority to fabric pipe
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_pipes_map_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)valid_map_config info
 * pipes map valid configurations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     valid_map_config - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_pipes_valid_map_config_info_get(
    int unit);

/*
 * SUBMODULE DEBUG:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_debug_feature_get(
    int unit,
    dnx_data_fabric_debug_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_debug_define_mesh_topology_size,
    dnx_data_fabric_debug_define_mesh_topology_fast,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_debug_define_nof
} dnx_data_fabric_debug_define_e;

/* Get Data */
/**
 * \brief returns numeric data of mesh_topology_size
 * Module - 'fabric', Submodule - 'debug', data - 'mesh_topology_size'
 * Size of mesh topology
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mesh_topology_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_debug_mesh_topology_size_get(
    int unit);

/**
 * \brief returns numeric data of mesh_topology_fast
 * Module - 'fabric', Submodule - 'debug', data - 'mesh_topology_fast'
 * Device is in mesh topology fast mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mesh_topology_fast - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_debug_mesh_topology_fast_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_debug_table_nof
} dnx_data_fabric_debug_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE TDM:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_tdm_feature_get(
    int unit,
    dnx_data_fabric_tdm_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_tdm_define_priority,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_tdm_define_nof
} dnx_data_fabric_tdm_define_e;

/* Get Data */
/**
 * \brief returns numeric data of priority
 * Module - 'fabric', Submodule - 'tdm', data - 'priority'
 * The TDM fabric priority
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_tdm_priority_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_tdm_table_nof
} dnx_data_fabric_tdm_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE CGM:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_cgm_feature_get(
    int unit,
    dnx_data_fabric_cgm_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_cgm_define_nof_rci_levels,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_cgm_define_nof
} dnx_data_fabric_cgm_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_rci_levels
 * Module - 'fabric', Submodule - 'cgm', data - 'nof_rci_levels'
 * Number of RCI levels
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rci_levels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_cgm_nof_rci_levels_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fabric_cgm_table_access_map,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_cgm_table_nof
} dnx_data_fabric_cgm_table_e;

/* Get Data */
/**
 * \brief get table access_map entry 
 * DBAL information per threshold type
 * 
 * \param [in] unit - unit #
 * \param [in] control_type - Fabric CGM control type
 * 
 * \return
 *     access_map - returns the relevant entry values grouped in struct - see dnx_data_fabric_cgm_access_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_cgm_access_map_t * dnx_data_fabric_cgm_access_map_get(
    int unit,
    int control_type);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'cgm', table - 'access_map'
 * DBAL information per threshold type
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_cgm_access_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)access_map info
 * DBAL information per threshold type
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     access_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_cgm_access_map_info_get(
    int unit);

/*
 * SUBMODULE ILKN:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_ilkn_feature_get(
    int unit,
    dnx_data_fabric_ilkn_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_ilkn_define_nof
} dnx_data_fabric_ilkn_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fabric_ilkn_table_bypass_info,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_ilkn_table_nof
} dnx_data_fabric_ilkn_table_e;

/* Get Data */
/**
 * \brief get table bypass_info entry 
 * data about bypassed links
 * 
 * \param [in] unit - unit #
 * \param [in] pm_id - Internal Port Macro identifier
 * 
 * \return
 *     bypass_info - returns the relevant entry values grouped in struct - see dnx_data_fabric_ilkn_bypass_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fabric_ilkn_bypass_info_t * dnx_data_fabric_ilkn_bypass_info_get(
    int unit,
    int pm_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fabric', Submodule - 'ilkn', table - 'bypass_info'
 * data about bypassed links
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_ilkn_bypass_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)bypass_info info
 * data about bypassed links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bypass_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fabric_ilkn_bypass_info_info_get(
    int unit);

/*
 * SUBMODULE DBAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fabric_dbal_feature_get(
    int unit,
    dnx_data_fabric_dbal_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fabric_dbal_define_priority_bits_nof,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_dbal_define_nof
} dnx_data_fabric_dbal_define_e;

/* Get Data */
/**
 * \brief returns numeric data of priority_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'priority_bits_nof'
 * Number of bits in FABRIC_PRIORITY field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fabric_dbal_priority_bits_nof_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_dbal_table_nof
} dnx_data_fabric_dbal_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fabric_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_FABRIC_H_*/
/* *INDENT-ON* */
