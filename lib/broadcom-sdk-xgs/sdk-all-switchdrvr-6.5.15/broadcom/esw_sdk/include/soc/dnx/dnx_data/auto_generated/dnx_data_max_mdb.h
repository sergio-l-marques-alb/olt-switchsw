/** \file dnx_data_max_mdb.h
 * 
 * MODULE DATA MAX - 
 * Maintain max value (of all devices) per define
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MAX_MDB_H_
/*{*/
#define _DNX_DATA_MAX_MDB_H_
/*
 * INCLUDE FILES:
 * {
 */
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MAX DEFINES:
 * {
 */
/**
 * \brief
 * The NOF type A macroes in the device
 */
#define DNX_DATA_MAX_MDB_DH_NOF_MACROES_TYPE_A (12)

/**
 * \brief
 * The NOF type B macroes in the device
 */
#define DNX_DATA_MAX_MDB_DH_NOF_MACROES_TYPE_B (8)

/**
 * \brief
 * the total NOF macroes in the device
 */
#define DNX_DATA_MAX_MDB_DH_TOTAL_NOF_MACROES (20)

/**
 * \brief
 * the total NOF macroes in the device plus another place for either the OVF buffer for EM tables or banks for EEDB tables.
 */
#define DNX_DATA_MAX_MDB_DH_TOTAL_NOF_MACROES_PLUS_EM_OVF_OR_EEDB_BANK (21)

/**
 * \brief
 * he total NOF macroes in the device plus another place for the data width.
 */
#define DNX_DATA_MAX_MDB_DH_TOTAL_NOF_MACROES_PLUS_DATA_WIDTH (21)

/**
 * \brief
 * max NOF interfaces that can be associated with a single cluster.
 */
#define DNX_DATA_MAX_MDB_DH_MAX_NOF_CLUSTER_INTERFACES (9)

/**
 * \brief
 * nof clusters in a single macro.
 */
#define DNX_DATA_MAX_MDB_DH_NOF_MACRO_CLUSTERS (8)

/**
 * \brief
 * nof clusters in a a bucket
 */
#define DNX_DATA_MAX_MDB_DH_NOF_BUCKET_CLUSTERS (4)

/**
 * \brief
 * The NOF buckets in a macro
 */
#define DNX_DATA_MAX_MDB_DH_NOF_BUCKETS_IN_MACRO (2)

/**
 * \brief
 * nof clusters in a pair.
 */
#define DNX_DATA_MAX_MDB_DH_NOF_PAIR_CLUSTERS (2)

/**
 * \brief
 * NOF rows in a cluster that is places on a macro of type A.
 */
#define DNX_DATA_MAX_MDB_DH_NOF_ROWS_IN_MACRO_A_CLUSTER (16384)

/**
 * \brief
 * NOF rows in a cluster that is places on a macro of type B.
 */
#define DNX_DATA_MAX_MDB_DH_NOF_ROWS_IN_MACRO_B_CLUSTER (8192)

/**
 * \brief
 * NOF rows in an EEDB bank
 */
#define DNX_DATA_MAX_MDB_DH_NOF_ROWS_IN_EEDB_BANK (2048)

/**
 * \brief
 * How many eedb rows each hitbit row is mapped to
 */
#define DNX_DATA_MAX_MDB_DH_NOF_DATA_ROWS_PER_HITBIT_ROW (4)

/**
 * \brief
 * How many rows in each eedb hitbit bank
 */
#define DNX_DATA_MAX_MDB_DH_NOF_ROWS_IN_EEDB_HITBIT_BANK (512)

/**
 * \brief
 * NOF bits in a single cluster row.
 */
#define DNX_DATA_MAX_MDB_DH_CLUSTER_ROW_WIDTH_BITS (120)

/**
 * \brief
 * NOF DHHA blocks
 */
#define DNX_DATA_MAX_MDB_DH_DHHA_NOF_BLOCKS (2)

/**
 * \brief
 * NOF DHHB blocks
 */
#define DNX_DATA_MAX_MDB_DH_DHHB_NOF_BLOCKS (4)

/**
 * \brief
 * NOF DHC blocks
 */
#define DNX_DATA_MAX_MDB_DH_DHC_NOF_BLOCKS (8)

/**
 * \brief
 * The granularity used for data out.
 */
#define DNX_DATA_MAX_MDB_DH_DATA_OUT_GRANULARITY (30)

/**
 * \brief
 * Max nof different DHs that can be associated with a single interface
 */
#define DNX_DATA_MAX_MDB_PDBS_MAX_NOF_INTERFACE_DHS (11)

/**
 * \brief
 * The FECs tables can have their clusters moved between them dynamically so they need extra initial allocation of clusters to have room for that.
 */
#define DNX_DATA_MAX_MDB_PDBS_FEC_EXTRA_CLUSTER_ALLOCATION (0)

/**
 * \brief
 * NOF KPAS blocks
 */
#define DNX_DATA_MAX_MDB_PDBS_KAPS_NOF_BLOCKS (2)

/**
 * \brief
 * Indicate if the device support mesh mode.
 */
#define DNX_DATA_MAX_MDB_PDBS_MESH_MODE_SUPPORT (1)

/**
 * \brief
 * The largest key size from all the PDBs key sizes.
 */
#define DNX_DATA_MAX_MDB_PDBS_MAX_KEY_SIZE (160)

/**
 * \brief
 * The largest payload size from all the PDBs payloads sizes.
 */
#define DNX_DATA_MAX_MDB_PDBS_MAX_PAYLOAD_SIZE (180)

/**
 * \brief
 * no description.
 */
#define DNX_DATA_MAX_MDB_PDBS_TABLE_MDB_9_MDB_ITEM_1_ARRAY_SIZE (32)

/**
 * \brief
 * no description.
 */
#define DNX_DATA_MAX_MDB_PDBS_TABLE_MDB_9_MDB_ITEM_2_ARRAY_SIZE (32)

/**
 * \brief
 * no description.
 */
#define DNX_DATA_MAX_MDB_PDBS_TABLE_MDB_9_MDB_ITEM_3_ARRAY_SIZE (32)

/**
 * \brief
 * The total number of bits available for the LEM aging.
 */
#define DNX_DATA_MAX_MDB_EM_TOTAL_NOF_LEM_AGING_BITS (5611520)

/**
 * \brief
 * The total number of bits available for the EXEM aging.
 */
#define DNX_DATA_MAX_MDB_EM_TOTAL_NOF_EXEM_AGING_BITS (561152)

/**
 * \brief
 * The number of bits in a single aging memory row
 */
#define DNX_DATA_MAX_MDB_EM_AGE_ROW_SIZE_BITS (128)

/**
 * \brief
 * The number of bits in a single aging ovfcam memory row
 */
#define DNX_DATA_MAX_MDB_EM_AGE_OVFCAM_ROW_SIZE_BITS (32)

/**
 * \brief
 * The number of bits in a single aging memory entry
 */
#define DNX_DATA_MAX_MDB_EM_AGE_ENTRY_SIZE_BITS (4)

/**
 * \brief
 * the MAX size of an OVF CAM.
 */
#define DNX_DATA_MAX_MDB_EM_OVF_CAM_MAX_SIZE (8)

/**
 * \brief
 * Indicate if the aging profiles are supported per entry ratio size.
 */
#define DNX_DATA_MAX_MDB_EM_AGE_SUPPORT_PER_ENTRY_SIZE_RATIO (1)

/**
 * \brief
 * The NOF aging profile avialable in the device.
 */
#define DNX_DATA_MAX_MDB_EM_NOF_AGING_PROFILES (8)

/**
 * \brief
 * The number of bits needed for the NOF aging profiles.
 */
#define DNX_DATA_MAX_MDB_EM_AGING_PROFILES_SIZE_IN_BITS (3)

/**
 * \brief
 * The largest TID size in bits.
 */
#define DNX_DATA_MAX_MDB_EM_MAX_TID_SIZE (6)

/**
 * \brief
 * max NOF of TIDs for a PDB
 */
#define DNX_DATA_MAX_MDB_EM_MAX_NOF_TIDS (64)

/**
 * \brief
 * The max NOF of TIDs an MDB table that support flush machine could have.
 */
#define DNX_DATA_MAX_MDB_EM_FLUSH_SUPPORT_TIDS (64)

/**
 * \brief
 * The largest key size that can be used by the flush machine.
 */
#define DNX_DATA_MAX_MDB_EM_FLUSH_MAX_SUPPORTED_KEY (80)

/**
 * \brief
 * he largest payload size that can be used by the flush machine.
 */
#define DNX_DATA_MAX_MDB_EM_FLUSH_MAX_SUPPORTED_PAYLOAD (64)

/**
 * \brief
 * NOF MACT apps in the LEM.
 */
#define DNX_DATA_MAX_MDB_EM_NOF_LEM_MACT_APPS (2)

/**
 * \brief
 * Number of bits representing a EM DH 120 width cluster encoding value.
 */
#define DNX_DATA_MAX_MDB_EM_DH_120_ENTRY_ENCODING_NOF_BITS (2)

/**
 * \brief
 * Number of bits representing a EM DH 240 width cluster encoding value.
 */
#define DNX_DATA_MAX_MDB_EM_DH_240_ENTRY_ENCODING_NOF_BITS (4)

/**
 * \brief
 * The granularity used for the EM format configuration.
 */
#define DNX_DATA_MAX_MDB_EM_FORMAT_GRANULARITY (30)

/**
 * \brief
 * The number of bits used to represent the vmv, smaller vmv sizes are simply aligned to the MSB and the configuration iterates on all possible values of the LSB.
 */
#define DNX_DATA_MAX_MDB_EM_MAX_NOF_VMV_SIZE (6)

/**
 * \brief
 * NOF values available for the VMV (depends on the nof_vmv_size value)
 */
#define DNX_DATA_MAX_MDB_EM_VMV_NOF_VALUES (64)

/**
 * \brief
 * the nof_vmv_size size in bits.
 */
#define DNX_DATA_MAX_MDB_EM_NOF_VMV_SIZE_NOF_BITS (3)

/**
 * \brief
 * The number of bits used to represent the vmv for ESEM only, smaller vmv sizes are simply aligned to the MSB and the configuration iterates on all possible values of the LSB.
 */
#define DNX_DATA_MAX_MDB_EM_ESEM_NOF_VMV_SIZE (4)

/**
 * \brief
 * The number of bits used to represent the vmv for MACT only, smaller vmv sizes are simply aligned to the MSB and the configuration iterates on all possible values of the LSB;This value is a HW constraint related to MACT LEL, other LEM logical tables can utilize the full MDB_NOF_VMV_BITS
 */
#define DNX_DATA_MAX_MDB_EM_MACT_NOF_VMV_SIZE (3)

/**
 * \brief
 * MACT payload has to be this size or smaller
 */
#define DNX_DATA_MAX_MDB_EM_MACT_MAX_PAYLOAD_SIZE (64)

/**
 * \brief
 * NOF of EM lookup per stage.
 */
#define DNX_DATA_MAX_MDB_EM_SHIFT_VMV_MAX_SIZE (3)

/**
 * \brief
 * HW limitation, if a logical EM table key is smaller, it is padded with zeros to this size.
 */
#define DNX_DATA_MAX_MDB_EM_MIN_KEY_SIZE (20)

/**
 * \brief
 * The minimal number of bits used to represent APP ID.
 */
#define DNX_DATA_MAX_MDB_EM_MIN_NOF_APP_ID_BITS (2)

/**
 * \brief
 * Number of bits taken from the entry key lsbits after hashing to be used as the address, These bits are not part of the entry stored in the cluster.
 */
#define DNX_DATA_MAX_MDB_EM_ENTRY_ADDR_BITS (13)

/**
 * \brief
 * The maximal NOF of SPN sizes options for a single EM PDB.
 */
#define DNX_DATA_MAX_MDB_EM_MAX_NOF_SPN_SIZES (6)

/**
 * \brief
 * The NOF of LFSR sizes options for a single EM PDB.
 */
#define DNX_DATA_MAX_MDB_EM_NOF_LFSR_SIZES (4)

/**
 * \brief
 * The NOF formats which the EM application can used, a format define by the key size and address size and the table address space.
 */
#define DNX_DATA_MAX_MDB_EM_NOF_FORMATS (32)

/**
 * \brief
 * Overflow CAM defrag machine has priority over Host/Ext support.
 */
#define DNX_DATA_MAX_MDB_EM_DEFRAGMENTATION_PRIORITY_SUPPORTED (1)

/**
 * \brief
 * indicate if the device has an option to disable loop detectionin cuckoo processing
 */
#define DNX_DATA_MAX_MDB_EM_DISABLE_CUCKOO_LOOP_DETECTION_SUPPORT (0)

/**
 * \brief
 * indicate if the device has an option to disable cuckoo hit bit handle
 */
#define DNX_DATA_MAX_MDB_EM_DISABLE_CUCKOO_HIT_BIT_SYNC (0)

/**
 * \brief
 * indicate if the device has an age profile per ratio support.
 */
#define DNX_DATA_MAX_MDB_EM_AGE_PROFILE_PER_RATIO_SUPPORT (1)

/**
 * \brief
 * the flex supported in the MAG but not necessarily fully supported 
 */
#define DNX_DATA_MAX_MDB_EM_FLEX_MAG_SUPPORTED (1)

/**
 * \brief
 * flex feature is fully supported (if this is set so does the flex_mag_supported should be).
 */
#define DNX_DATA_MAX_MDB_EM_FLEX_FULLY_SUPPORTED (0)

/**
 * \brief
 * The max NOF rows that a step table can hold.
 */
#define DNX_DATA_MAX_MDB_EM_STEP_TABLE_MAX_SIZE (2048)

/**
 * \brief
 * the NOF encoding values (values that represent the payload size out of row width) in the device
 */
#define DNX_DATA_MAX_MDB_EM_NOF_ENCODING_VALUES (8)

/**
 * \brief
 * The number of DB_ATR_PHYSICAL_ADDRESS_SPACE bits associated with encoding 0.
 */
#define DNX_DATA_MAX_MDB_DIRECT_PHYSICAL_ADDRESS_MAX_BITS (20)

/**
 * \brief
 * The largest address space value which can support 26k granularity for the FEC
 */
#define DNX_DATA_MAX_MDB_DIRECT_PHYSICAL_ADDRESS_MAX_BITS_SUPPORT_26K_GRANULARITY_FEC_ALLOC (19)

/**
 * \brief
 * The VSI number of DB_ATR_PHYSICAL_ADDRESS_SPACE bits associated with encoding 0.
 */
#define DNX_DATA_MAX_MDB_DIRECT_VSI_PHYSICAL_ADDRESS_MAX_BITS (18)

/**
 * \brief
 * The FEC address mapping bits.
 */
#define DNX_DATA_MAX_MDB_DIRECT_FEC_ADDRESS_MAPPING_BITS (5)

/**
 * \brief
 * The FEC relevant mapping bits.
 */
#define DNX_DATA_MAX_MDB_DIRECT_FEC_ADDRESS_MAPPING_BITS_RELEVANT (2)

/**
 * \brief
 * The FEC address relevant mapping bits offset.
 */
#define DNX_DATA_MAX_MDB_DIRECT_FEC_ADDRESS_MAPPING_BITS_OFFSET (14)

/**
 * \brief
 * The maximal NOF cluster that can be associated to two FEC hierarchies.
 */
#define DNX_DATA_MAX_MDB_DIRECT_FEC_MAX_CLUSTER_PAIRS (16)

/**
 * \brief
 * The largest payload size associated with a direct table.
 */
#define DNX_DATA_MAX_MDB_DIRECT_MAX_PAYLOAD_SIZE (180)

/**
 * \brief
 * NOF of FECs contained in a single super FEC.
 */
#define DNX_DATA_MAX_MDB_DIRECT_NOF_FECS_IN_SUPER_FEC (2)

/**
 * \brief
 * NOF of FEC/ECMP hierarchies.
 */
#define DNX_DATA_MAX_MDB_DIRECT_NOF_FEC_ECMP_HIERARCHIES (3)

/**
 * \brief
 * number of msbits used for the phase mapping.
 */
#define DNX_DATA_MAX_MDB_EEDB_PHASE_MAP_BITS (7)

/**
 * \brief
 * Size of phase map array.
 */
#define DNX_DATA_MAX_MDB_EEDB_PHASE_MAP_ARRAY_SIZE (128)

/**
 * \brief
 * the NOF phases each MAGs Is associated with.
 */
#define DNX_DATA_MAX_MDB_EEDB_NOF_PHASE_PER_MAG (2)

/**
 * \brief
 * NOF of EEDB phases.
 */
#define DNX_DATA_MAX_MDB_EEDB_NOF_PHASES (8)

/**
 * \brief
 * NOF of EEDB MAGs
 */
#define DNX_DATA_MAX_MDB_EEDB_NOF_EEDB_MAGS (4)

/**
 * \brief
 * NOF of EEDB banks
 */
#define DNX_DATA_MAX_MDB_EEDB_NOF_EEDB_BANKS (32)

/**
 * \brief
 * Each EEDB bank can be associated with one of this amount of phases
 */
#define DNX_DATA_MAX_MDB_EEDB_NOF_PHASES_PER_EEDB_BANK (3)

/**
 * \brief
 * nof_phases_per_eedb_bank size
 */
#define DNX_DATA_MAX_MDB_EEDB_NOF_PHASES_PER_EEDB_BANK_SIZE (2)

/**
 * \brief
 * the default phase value for a bank.
 */
#define DNX_DATA_MAX_MDB_EEDB_PHASE_BANK_SELECT_DEFAULT (0)

/**
 * \brief
 * Number of MSbits used to determine the payload size in MDB_ENTRY_FORMATr
 */
#define DNX_DATA_MAX_MDB_EEDB_ENTRY_FORMAT_BITS (6)

/**
 * \brief
 * Number of bits used to represent the payload size (30/60/90/120) in MDB_ENTRY_FORMATr
 */
#define DNX_DATA_MAX_MDB_EEDB_ENTRY_FORMAT_ENCODING_BITS (2)

/**
 * \brief
 * Number of bits used for bank_id comparison.
 */
#define DNX_DATA_MAX_MDB_EEDB_BANK_ID_BITS (6)

/**
 * \brief
 * nof small BBs.
 */
#define DNX_DATA_MAX_MDB_KAPS_NOF_SMALL_BBS (16)

/**
 * \brief
 * nof row in a small BB.
 */
#define DNX_DATA_MAX_MDB_KAPS_NOF_ROWS_IN_SMALL_BB (512)

/**
 * \brief
 * nof row in a small RPB hitbits.
 */
#define DNX_DATA_MAX_MDB_KAPS_NOF_ROWS_IN_SMALL_RBP_HITBITS (64)

/**
 * \brief
 * nof bytes in a hitbit database row.
 */
#define DNX_DATA_MAX_MDB_KAPS_NOF_BYTES_IN_HITBIT_ROW (2)

/**
 * \brief
 * RPB input = {key, search_lsn}.
 */
#define DNX_DATA_MAX_MDB_KAPS_KEY_LSN_BITS (4)

/**
 * \brief
 * The KAPS DB prefix length.
 */
#define DNX_DATA_MAX_MDB_KAPS_KEY_PREFIX_LENGTH (6)

/**
 * \brief
 * The maximum number of prefixes in a single KAPS BB row.
 */
#define DNX_DATA_MAX_MDB_KAPS_MAX_PREFIX_IN_BB_ROW (16)

/**
 * \brief
 * The KAPS(LPM) key size.
 */
#define DNX_DATA_MAX_MDB_KAPS_KEY_WIDTH_IN_BITS (160)

/**
 * \brief
 * The KAPS(LPM) payload size.
 */
#define DNX_DATA_MAX_MDB_KAPS_AD_WIDTH_IN_BITS (20)

/**
 * \brief
 * the BB width in bytes
 */
#define DNX_DATA_MAX_MDB_KAPS_BB_BYTE_WIDTH (60)

/**
 * \brief
 * the RPB width in bytes
 */
#define DNX_DATA_MAX_MDB_KAPS_RPB_BYTE_WIDTH (21)

/**
 * \brief
 * the ADS width in bytes
 */
#define DNX_DATA_MAX_MDB_KAPS_ADS_BYTE_WIDTH (16)

/**
 * \brief
 * the RPB valid size in bits
 */
#define DNX_DATA_MAX_MDB_KAPS_RPB_VALID_BITS (2)

/*
 * }
 */

/*}*/
#endif /*_DNX_DATA_MAX_MDB_H_*/
/* *INDENT-ON* */
