/** \file dnx_data_bfd.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_BFD_H_
/*{*/
#define _DNX_DATA_BFD_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_bfd.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_bfd
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_bfd_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * general bfd constants
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * HW bug: single-hop TOS is not configurable - JER2_A0 only!  Works for B0 and up
     */
    dnx_data_bfd_general_configurable_single_hop_tos,

    /**
     * Must be last one!
     */
    _dnx_data_bfd_general_feature_nof
} dnx_data_bfd_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_bfd_general_feature_get_f) (
    int unit,
    dnx_data_bfd_general_feature_e feature);

/**
 * \brief returns define data of nof_bits_bfd_endpoints
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_bfd_endpoints'
 * Number of bits needed for BFD endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_bfd_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_bits_bfd_endpoints_get_f) (
    int unit);

/**
 * \brief returns define data of nof_endpoints
 * Module - 'bfd', Submodule - 'general', data - 'nof_endpoints'
 * Maximum number of BFD endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_endpoints_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dips_for_bfd_multihop
 * Module - 'bfd', Submodule - 'general', data - 'nof_dips_for_bfd_multihop'
 * Number of usable BFD Destination IPs for multi-hop
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dips_for_bfd_multihop - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_dips_for_bfd_multihop_get_f) (
    int unit);

/**
 * \brief returns define data of nof_bits_dips_for_bfd_multihop
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_dips_for_bfd_multihop'
 * Number of bits needed for BFD Destination IPs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_dips_for_bfd_multihop - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_bits_dips_for_bfd_multihop_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_index_db_ipv4_const
 * Module - 'bfd', Submodule - 'general', data - 'rmep_index_db_ipv4_const'
 * RMEP index DB constant for IPv4 MEPs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_index_db_ipv4_const - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_rmep_index_db_ipv4_const_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_index_db_mpls_const
 * Module - 'bfd', Submodule - 'general', data - 'rmep_index_db_mpls_const'
 * RMEP index DB constant for MEPs over MPLS
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_index_db_mpls_const - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_rmep_index_db_mpls_const_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_index_db_pwe_const
 * Module - 'bfd', Submodule - 'general', data - 'rmep_index_db_pwe_const'
 * RMEP index DB constant for MEPs over PWE
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_index_db_pwe_const - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_rmep_index_db_pwe_const_get_f) (
    int unit);

/**
 * \brief returns define data of nof_req_int_profiles
 * Module - 'bfd', Submodule - 'general', data - 'nof_req_int_profiles'
 * Number of entries in required interrupt table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_req_int_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_req_int_profiles_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_BFD - GENERAL:
 * {
 */
/**
 * \brief Interface for bfd general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_bfd_general_feature_get_f feature_get;
    /**
     * returns define data of nof_bits_bfd_endpoints
     */
    dnx_data_bfd_general_nof_bits_bfd_endpoints_get_f nof_bits_bfd_endpoints_get;
    /**
     * returns define data of nof_endpoints
     */
    dnx_data_bfd_general_nof_endpoints_get_f nof_endpoints_get;
    /**
     * returns define data of nof_dips_for_bfd_multihop
     */
    dnx_data_bfd_general_nof_dips_for_bfd_multihop_get_f nof_dips_for_bfd_multihop_get;
    /**
     * returns define data of nof_bits_dips_for_bfd_multihop
     */
    dnx_data_bfd_general_nof_bits_dips_for_bfd_multihop_get_f nof_bits_dips_for_bfd_multihop_get;
    /**
     * returns define data of rmep_index_db_ipv4_const
     */
    dnx_data_bfd_general_rmep_index_db_ipv4_const_get_f rmep_index_db_ipv4_const_get;
    /**
     * returns define data of rmep_index_db_mpls_const
     */
    dnx_data_bfd_general_rmep_index_db_mpls_const_get_f rmep_index_db_mpls_const_get;
    /**
     * returns define data of rmep_index_db_pwe_const
     */
    dnx_data_bfd_general_rmep_index_db_pwe_const_get_f rmep_index_db_pwe_const_get;
    /**
     * returns define data of nof_req_int_profiles
     */
    dnx_data_bfd_general_nof_req_int_profiles_get_f nof_req_int_profiles_get;
} dnx_data_if_bfd_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - HW_BUG:
 * BFD-related HW bugs
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * HW bug: detect_multiplier is not calculated - JER2_A0 only!  Works for B0 and up
     */
    dnx_data_bfd_hw_bug_detect_multiplier_limitation,

    /**
     * Must be last one!
     */
    _dnx_data_bfd_hw_bug_feature_nof
} dnx_data_bfd_hw_bug_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_bfd_hw_bug_feature_get_f) (
    int unit,
    dnx_data_bfd_hw_bug_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_BFD - HW_BUG:
 * {
 */
/**
 * \brief Interface for bfd hw_bug data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_bfd_hw_bug_feature_get_f feature_get;
} dnx_data_if_bfd_hw_bug_t;

/*
 * }
 */

/*
 * SUBMODULE  - PROPERTY:
 * customer soc property
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_bfd_property_feature_nof
} dnx_data_bfd_property_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_bfd_property_feature_get_f) (
    int unit,
    dnx_data_bfd_property_feature_e feature);

/**
 * \brief returns numeric data of discriminator_type_update
 * Module - 'bfd', Submodule - 'property', data - 'discriminator_type_update'
 * Customer feature: MSB of discriminator is MEP type, set by OAMP PE program
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     discriminator_type_update - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_property_discriminator_type_update_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_BFD - PROPERTY:
 * {
 */
/**
 * \brief Interface for bfd property data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_bfd_property_feature_get_f feature_get;
    /**
     * returns numeric data of discriminator_type_update
     */
    dnx_data_bfd_property_discriminator_type_update_get_f discriminator_type_update_get;
} dnx_data_if_bfd_property_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_BFD:
 * {
 */
/**
 * \brief Interface for bfd data
 */
typedef struct
{
    /**
     * Interface for bfd general data
     */
    dnx_data_if_bfd_general_t general;
    /**
     * Interface for bfd hw_bug data
     */
    dnx_data_if_bfd_hw_bug_t hw_bug;
    /**
     * Interface for bfd property data
     */
    dnx_data_if_bfd_property_t property;
} dnx_data_if_bfd_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_bfd_t dnx_data_bfd;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_BFD_H_*/
/* *INDENT-ON* */
