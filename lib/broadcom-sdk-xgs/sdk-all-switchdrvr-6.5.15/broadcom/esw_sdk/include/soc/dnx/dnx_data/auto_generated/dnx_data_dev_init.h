/** \file dnx_data_dev_init.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_DEV_INIT_H_
/*{*/
#define _DNX_DATA_DEV_INIT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm_int/dnx/init/init_mem.h>
#include <soc/dnx/dnx_data/dnx_data_verify.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_dev_init.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_dev_init
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_dev_init_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - TIME:
 * time relevant for init
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_time_feature_nof
} dnx_data_dev_init_time_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_time_feature_get_f) (
    int unit,
    dnx_data_dev_init_time_feature_e feature);

/**
 * \brief returns numeric data of analyze
 * Module - 'dev_init', Submodule - 'time', data - 'analyze'
 * whether to analyze init time
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     analyze - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_time_analyze_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - TIME:
 * {
 */
/**
 * \brief Interface for dev_init time data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_time_feature_get_f feature_get;
    /**
     * returns numeric data of analyze
     */
    dnx_data_dev_init_time_analyze_get_f analyze_get;
} dnx_data_if_dev_init_time_t;

/*
 * }
 */

/*
 * SUBMODULE  - MEM:
 * memory data relevant for init
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule mem table default
 * Table info:
 * default values for memories, any mem that is not mentioned will be set to zero
 */
typedef struct
{
    /**
     * memory
     */
    soc_mem_t mem;
    /**
     * default value will be set according to this mode
     */
    dnx_init_mem_default_mode_e mode;
    /**
     * callback to get the default, used in custom modes
     */
    dnx_init_mem_default_get_f default_get_cb;
    /**
     * If field defined - will set just the specified field (all the reset will be set to zero). not relevant for custom modes
     */
    soc_field_t field;
} dnx_data_dev_init_mem_default_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_mem_feature_nof
} dnx_data_dev_init_mem_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_mem_feature_get_f) (
    int unit,
    dnx_data_dev_init_mem_feature_e feature);

/**
 * \brief returns numeric data of force_zeros
 * Module - 'dev_init', Submodule - 'mem', data - 'force_zeros'
 * if true will force zeroing memories in pcid and emulation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     force_zeros - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_mem_force_zeros_get_f) (
    int unit);

/**
 * \brief returns numeric data of defaults_verify
 * Module - 'dev_init', Submodule - 'mem', data - 'defaults_verify'
 * if true will test memory defaults are as exepected
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     defaults_verify - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_mem_defaults_verify_get_f) (
    int unit);

/**
 * \brief get table default entry 
 * default values for memories, any mem that is not mentioned will be set to zero
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     default - returns the relevant entry values grouped in struct - see dnx_data_dev_init_mem_default_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_mem_default_t *(
    *dnx_data_dev_init_mem_default_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - MEM:
 * {
 */
/**
 * \brief Interface for dev_init mem data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_mem_feature_get_f feature_get;
    /**
     * returns numeric data of force_zeros
     */
    dnx_data_dev_init_mem_force_zeros_get_f force_zeros_get;
    /**
     * returns numeric data of defaults_verify
     */
    dnx_data_dev_init_mem_defaults_verify_get_f defaults_verify_get;
    /**
     * get table default entry 
     */
    dnx_data_dev_init_mem_default_get_f default_get;
    /**
     * get general info table about table (for example key size)default info
     */
    dnxc_data_table_info_get_f default_info_get;
} dnx_data_if_dev_init_mem_t;

/*
 * }
 */

/*
 * SUBMODULE  - PROPERTIES:
 * used to store information related to soc properties
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule properties table unsupported
 * Table info:
 * unsupported soc properties
 */
typedef struct
{
    /**
     * soc property name
     */
    char *property;
    
    char *suffix;
    /**
     * max number of index to check in case using suffix_num method
     */
    int num_max;
    /**
     * 1 if the soc property might be read per port
     */
    int per_port;
    /**
     * detailed error message with instructions what to do instead
     */
    char *err_msg;
} dnx_data_dev_init_properties_unsupported_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_properties_feature_nof
} dnx_data_dev_init_properties_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_properties_feature_get_f) (
    int unit,
    dnx_data_dev_init_properties_feature_e feature);

/**
 * \brief get table unsupported entry 
 * unsupported soc properties
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     unsupported - returns the relevant entry values grouped in struct - see dnx_data_dev_init_properties_unsupported_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_properties_unsupported_t *(
    *dnx_data_dev_init_properties_unsupported_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - PROPERTIES:
 * {
 */
/**
 * \brief Interface for dev_init properties data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_properties_feature_get_f feature_get;
    /**
     * get table unsupported entry 
     */
    dnx_data_dev_init_properties_unsupported_get_f unsupported_get;
    /**
     * get general info table about table (for example key size)unsupported info
     */
    dnxc_data_table_info_get_f unsupported_info_get;
} dnx_data_if_dev_init_properties_t;

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * general values for device init
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * If set, indicates data path HW needs to be set
     */
    dnx_data_dev_init_general_data_path_hw,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_general_feature_nof
} dnx_data_dev_init_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_general_feature_get_f) (
    int unit,
    dnx_data_dev_init_general_feature_e feature);

/**
 * \brief returns numeric data of access_only
 * Module - 'dev_init', Submodule - 'general', data - 'access_only'
 * boot with access only
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     access_only - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_general_access_only_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - GENERAL:
 * {
 */
/**
 * \brief Interface for dev_init general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_general_feature_get_f feature_get;
    /**
     * returns numeric data of access_only
     */
    dnx_data_dev_init_general_access_only_get_f access_only_get;
} dnx_data_if_dev_init_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - HA:
 * values for sw state and high availability init
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_ha_feature_nof
} dnx_data_dev_init_ha_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_ha_feature_get_f) (
    int unit,
    dnx_data_dev_init_ha_feature_e feature);

/**
 * \brief returns numeric data of warmboot_support
 * Module - 'dev_init', Submodule - 'ha', data - 'warmboot_support'
 * specify if unit should support wb
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     warmboot_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_ha_warmboot_support_get_f) (
    int unit);

/**
 * \brief returns numeric data of sw_state_max_size
 * Module - 'dev_init', Submodule - 'ha', data - 'sw_state_max_size'
 * specify the amount of memory (in bytes) preallocated for sw state
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sw_state_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_ha_sw_state_max_size_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - HA:
 * {
 */
/**
 * \brief Interface for dev_init ha data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_ha_feature_get_f feature_get;
    /**
     * returns numeric data of warmboot_support
     */
    dnx_data_dev_init_ha_warmboot_support_get_f warmboot_support_get;
    /**
     * returns numeric data of sw_state_max_size
     */
    dnx_data_dev_init_ha_sw_state_max_size_get_f sw_state_max_size_get;
} dnx_data_if_dev_init_ha_t;

/*
 * }
 */

/*
 * SUBMODULE  - SHADOW:
 * shadow memory for init
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule shadow table uncacheable_mem
 * Table info:
 * uncache memory
 */
typedef struct
{
    /**
     * memory
     */
    soc_mem_t mem;
} dnx_data_dev_init_shadow_uncacheable_mem_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_shadow_feature_nof
} dnx_data_dev_init_shadow_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_shadow_feature_get_f) (
    int unit,
    dnx_data_dev_init_shadow_feature_e feature);

/**
 * \brief returns numeric data of cache_enable_all
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_all'
 * if true shadow all cacheable memory
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_all - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_enable_all_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_enable_ecc
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_ecc'
 * if true shadow all cacheable memory which contain ecc field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_ecc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_enable_ecc_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_enable_parity
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_parity'
 * if true shadow all cacheable memory which contain parity field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_parity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_enable_parity_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_enable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_specific'
 * if true, some specific memory be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_enable_specific_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_disable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_disable_specific'
 * if true, some specific memory won't be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_disable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_disable_specific_get_f) (
    int unit);

/**
 * \brief get table uncacheable_mem entry 
 * uncache memory
 * 
 * \param [in] unit - unit #
 * \param [in] index - uncacheable memory index
 * 
 * \return
 *     uncacheable_mem - returns the relevant entry values grouped in struct - see dnx_data_dev_init_shadow_uncacheable_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_shadow_uncacheable_mem_t *(
    *dnx_data_dev_init_shadow_uncacheable_mem_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - SHADOW:
 * {
 */
/**
 * \brief Interface for dev_init shadow data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_shadow_feature_get_f feature_get;
    /**
     * returns numeric data of cache_enable_all
     */
    dnx_data_dev_init_shadow_cache_enable_all_get_f cache_enable_all_get;
    /**
     * returns numeric data of cache_enable_ecc
     */
    dnx_data_dev_init_shadow_cache_enable_ecc_get_f cache_enable_ecc_get;
    /**
     * returns numeric data of cache_enable_parity
     */
    dnx_data_dev_init_shadow_cache_enable_parity_get_f cache_enable_parity_get;
    /**
     * returns numeric data of cache_enable_specific
     */
    dnx_data_dev_init_shadow_cache_enable_specific_get_f cache_enable_specific_get;
    /**
     * returns numeric data of cache_disable_specific
     */
    dnx_data_dev_init_shadow_cache_disable_specific_get_f cache_disable_specific_get;
    /**
     * get table uncacheable_mem entry 
     */
    dnx_data_dev_init_shadow_uncacheable_mem_get_f uncacheable_mem_get;
    /**
     * get general info table about table (for example key size)uncacheable_mem info
     */
    dnxc_data_table_info_get_f uncacheable_mem_info_get;
} dnx_data_if_dev_init_shadow_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_DEV_INIT:
 * {
 */
/**
 * \brief Interface for dev_init data
 */
typedef struct
{
    /**
     * Interface for dev_init time data
     */
    dnx_data_if_dev_init_time_t time;
    /**
     * Interface for dev_init mem data
     */
    dnx_data_if_dev_init_mem_t mem;
    /**
     * Interface for dev_init properties data
     */
    dnx_data_if_dev_init_properties_t properties;
    /**
     * Interface for dev_init general data
     */
    dnx_data_if_dev_init_general_t general;
    /**
     * Interface for dev_init ha data
     */
    dnx_data_if_dev_init_ha_t ha;
    /**
     * Interface for dev_init shadow data
     */
    dnx_data_if_dev_init_shadow_t shadow;
} dnx_data_if_dev_init_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_dev_init_t dnx_data_dev_init;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_DEV_INIT_H_*/
/* *INDENT-ON* */
