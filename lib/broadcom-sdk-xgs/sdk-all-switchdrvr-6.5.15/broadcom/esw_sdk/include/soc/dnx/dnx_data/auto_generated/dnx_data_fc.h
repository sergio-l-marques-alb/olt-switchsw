/** \file dnx_data_fc.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_FC_H_
/*{*/
#define _DNX_DATA_FC_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/legacy/TMC/tmc_api_flow_control.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_fc.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_fc
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_fc_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - COE:
 * Flow Control COE general configurations.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule coe table calendar_mode
 * Table info:
 * PP COE
 */
typedef struct
{
    /**
     * PP COE Mode
     */
    int mode;
} dnx_data_fc_coe_calendar_mode_t;

/**
 * \brief Holds values of submodule coe table mac_address
 * Table info:
 * MAC address of COE FC
 */
typedef struct
{
    /**
     * Set the mac address of COE FC packet (48 bits)
     */
    uint8 mac[6];
} dnx_data_fc_coe_mac_address_t;

/**
 * \brief Holds values of submodule coe table calender_length
 * Table info:
 * Flow Control COE calender length.
 */
typedef struct
{
    /**
     * Flow Control COE calender length.
     */
    int len;
} dnx_data_fc_coe_calender_length_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fc_coe_feature_nof
} dnx_data_fc_coe_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fc_coe_feature_get_f) (
    int unit,
    dnx_data_fc_coe_feature_e feature);

/**
 * \brief returns define data of nof_coe_cal_instances
 * Module - 'fc', Submodule - 'coe', data - 'nof_coe_cal_instances'
 * Number of PP COE calendar instances
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_coe_cal_instances - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fc_coe_nof_coe_cal_instances_get_f) (
    int unit);

/**
 * \brief returns numeric data of calendar_pause_resolution
 * Module - 'fc', Submodule - 'coe', data - 'calendar_pause_resolution'
 * PP COE Pause counter rate. Unit: usec.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     calendar_pause_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fc_coe_calendar_pause_resolution_get_f) (
    int unit);

/**
 * \brief returns numeric data of data_offset
 * Module - 'fc', Submodule - 'coe', data - 'data_offset'
 * Define offset in bytes from after Ethernet Frame for COE FC data. Valid range = [0-31]
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fc_coe_data_offset_get_f) (
    int unit);

/**
 * \brief returns numeric data of ethertype
 * Module - 'fc', Submodule - 'coe', data - 'ethertype'
 * Set ethertype of COE FC packet.(16bits)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ethertype - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fc_coe_ethertype_get_f) (
    int unit);

/**
 * \brief returns numeric data of control_opcode
 * Module - 'fc', Submodule - 'coe', data - 'control_opcode'
 * Set PP COE Control Opcode used to identify COE.(16bits)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     control_opcode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fc_coe_control_opcode_get_f) (
    int unit);

/**
 * \brief get table calendar_mode entry 
 * PP COE
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     calendar_mode - returns the relevant entry values grouped in struct - see dnx_data_fc_coe_calendar_mode_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fc_coe_calendar_mode_t *(
    *dnx_data_fc_coe_calendar_mode_get_f) (
    int unit);

/**
 * \brief get table mac_address entry 
 * MAC address of COE FC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mac_address - returns the relevant entry values grouped in struct - see dnx_data_fc_coe_mac_address_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fc_coe_mac_address_t *(
    *dnx_data_fc_coe_mac_address_get_f) (
    int unit);

/**
 * \brief get table calender_length entry 
 * Flow Control COE calender length.
 * 
 * \param [in] unit - unit #
 * \param [in] cal_id - Calendar ID
 * 
 * \return
 *     calender_length - returns the relevant entry values grouped in struct - see dnx_data_fc_coe_calender_length_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fc_coe_calender_length_t *(
    *dnx_data_fc_coe_calender_length_get_f) (
    int unit,
    int cal_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FC - COE:
 * {
 */
/**
 * \brief Interface for fc coe data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fc_coe_feature_get_f feature_get;
    /**
     * returns define data of nof_coe_cal_instances
     */
    dnx_data_fc_coe_nof_coe_cal_instances_get_f nof_coe_cal_instances_get;
    /**
     * returns numeric data of calendar_pause_resolution
     */
    dnx_data_fc_coe_calendar_pause_resolution_get_f calendar_pause_resolution_get;
    /**
     * returns numeric data of data_offset
     */
    dnx_data_fc_coe_data_offset_get_f data_offset_get;
    /**
     * returns numeric data of ethertype
     */
    dnx_data_fc_coe_ethertype_get_f ethertype_get;
    /**
     * returns numeric data of control_opcode
     */
    dnx_data_fc_coe_control_opcode_get_f control_opcode_get;
    /**
     * get table calendar_mode entry 
     */
    dnx_data_fc_coe_calendar_mode_get_f calendar_mode_get;
    /**
     * get general info table about table (for example key size)calendar_mode info
     */
    dnxc_data_table_info_get_f calendar_mode_info_get;
    /**
     * get table mac_address entry 
     */
    dnx_data_fc_coe_mac_address_get_f mac_address_get;
    /**
     * get general info table about table (for example key size)mac_address info
     */
    dnxc_data_table_info_get_f mac_address_info_get;
    /**
     * get table calender_length entry 
     */
    dnx_data_fc_coe_calender_length_get_f calender_length_get;
    /**
     * get general info table about table (for example key size)calender_length info
     */
    dnxc_data_table_info_get_f calender_length_info_get;
} dnx_data_if_fc_coe_t;

/*
 * }
 */

/*
 * SUBMODULE  - OOB:
 * Flow Control OOB general configurations.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule oob table calender_rep_count
 * Table info:
 * Flow Control Out-Of-Band repeat count.
 */
typedef struct
{
    /**
     * Flow Control Out-Of-Band TX repeat count.
     */
    int tx;
    /**
     * Flow Control Out-Of-Band RX repeat count.
     */
    int rx;
} dnx_data_fc_oob_calender_rep_count_t;

/**
 * \brief Holds values of submodule oob table calender_length
 * Table info:
 * Flow Control Out-Of-Band calender length.
 */
typedef struct
{
    /**
     * Flow Control Out-Of-Band TX calender length.
     */
    int tx;
    /**
     * Flow Control Out-Of-Band RX calender length.
     */
    int rx;
} dnx_data_fc_oob_calender_length_t;

/**
 * \brief Holds values of submodule oob table tx_freq
 * Table info:
 * Flow Control OOB TX Speed relatively to the Core Clock.
 */
typedef struct
{
    /**
     * Flow Control OOB TX Speed ratio 
     */
    int ratio;
} dnx_data_fc_oob_tx_freq_t;

/**
 * \brief Holds values of submodule oob table port
 * Table info:
 * Flow Control Out-Of-Band port type and port mode.
 */
typedef struct
{
    /**
     * Flow Control Out-Of-Band port type.
     */
    int type;
    /**
     * Flow Control Out-Of-Band port mode.
     */
    int mode;
} dnx_data_fc_oob_port_t;

/**
 * \brief Holds values of submodule oob table indication_invert
 * Table info:
 * his option controls the meaning of '0'/'1' in the of Calendar FC indications per interface.
 */
typedef struct
{
    /**
     * Polarity for OOB-ILKN TX.
     */
    int ilkn_tx;
    /**
     * Polarity for OOB-ILKN RX.
     */
    int ilkn_rx;
    /**
     * Polarity for OOB-SPI.
     */
    int spi;
} dnx_data_fc_oob_indication_invert_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fc_oob_feature_nof
} dnx_data_fc_oob_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fc_oob_feature_get_f) (
    int unit,
    dnx_data_fc_oob_feature_e feature);

/**
 * \brief returns define data of nof_oob_ids
 * Module - 'fc', Submodule - 'oob', data - 'nof_oob_ids'
 * Number of Out of Band interfaces.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_oob_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fc_oob_nof_oob_ids_get_f) (
    int unit);

/**
 * \brief get table calender_rep_count entry 
 * Flow Control Out-Of-Band repeat count.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     calender_rep_count - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_calender_rep_count_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fc_oob_calender_rep_count_t *(
    *dnx_data_fc_oob_calender_rep_count_get_f) (
    int unit,
    int oob_id);

/**
 * \brief get table calender_length entry 
 * Flow Control Out-Of-Band calender length.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     calender_length - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_calender_length_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fc_oob_calender_length_t *(
    *dnx_data_fc_oob_calender_length_get_f) (
    int unit,
    int oob_id);

/**
 * \brief get table tx_freq entry 
 * Flow Control OOB TX Speed relatively to the Core Clock.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     tx_freq - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_tx_freq_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fc_oob_tx_freq_t *(
    *dnx_data_fc_oob_tx_freq_get_f) (
    int unit,
    int oob_id);

/**
 * \brief get table port entry 
 * Flow Control Out-Of-Band port type and port mode.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     port - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_port_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fc_oob_port_t *(
    *dnx_data_fc_oob_port_get_f) (
    int unit,
    int oob_id);

/**
 * \brief get table indication_invert entry 
 * his option controls the meaning of '0'/'1' in the of Calendar FC indications per interface.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     indication_invert - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_indication_invert_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fc_oob_indication_invert_t *(
    *dnx_data_fc_oob_indication_invert_get_f) (
    int unit,
    int oob_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FC - OOB:
 * {
 */
/**
 * \brief Interface for fc oob data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fc_oob_feature_get_f feature_get;
    /**
     * returns define data of nof_oob_ids
     */
    dnx_data_fc_oob_nof_oob_ids_get_f nof_oob_ids_get;
    /**
     * get table calender_rep_count entry 
     */
    dnx_data_fc_oob_calender_rep_count_get_f calender_rep_count_get;
    /**
     * get general info table about table (for example key size)calender_rep_count info
     */
    dnxc_data_table_info_get_f calender_rep_count_info_get;
    /**
     * get table calender_length entry 
     */
    dnx_data_fc_oob_calender_length_get_f calender_length_get;
    /**
     * get general info table about table (for example key size)calender_length info
     */
    dnxc_data_table_info_get_f calender_length_info_get;
    /**
     * get table tx_freq entry 
     */
    dnx_data_fc_oob_tx_freq_get_f tx_freq_get;
    /**
     * get general info table about table (for example key size)tx_freq info
     */
    dnxc_data_table_info_get_f tx_freq_info_get;
    /**
     * get table port entry 
     */
    dnx_data_fc_oob_port_get_f port_get;
    /**
     * get general info table about table (for example key size)port info
     */
    dnxc_data_table_info_get_f port_info_get;
    /**
     * get table indication_invert entry 
     */
    dnx_data_fc_oob_indication_invert_get_f indication_invert_get;
    /**
     * get general info table about table (for example key size)indication_invert info
     */
    dnxc_data_table_info_get_f indication_invert_info_get;
} dnx_data_if_fc_oob_t;

/*
 * }
 */

/*
 * SUBMODULE  - INBAND:
 * Flow Control inband general configurations.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule inband table calender_length
 * Table info:
 * Flow Control In-Band calender length.
 */
typedef struct
{
    /**
     * Flow Control In-Band TX calender length.
     */
    int tx;
    /**
     * Flow Control In-Band RX calender length.
     */
    int rx;
} dnx_data_fc_inband_calender_length_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fc_inband_feature_nof
} dnx_data_fc_inband_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fc_inband_feature_get_f) (
    int unit,
    dnx_data_fc_inband_feature_e feature);

/**
 * \brief returns define data of pfc_rec_cdu_shift
 * Module - 'fc', Submodule - 'inband', data - 'pfc_rec_cdu_shift'
 * The last two CDUs of each core have one bit shift left, which is affecting the reception of PFC - CFC is sending wrong index to EGQ
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pfc_rec_cdu_shift - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fc_inband_pfc_rec_cdu_shift_get_f) (
    int unit);

/**
 * \brief returns define data of pfc_status_regs_double_read
 * Module - 'fc', Submodule - 'inband', data - 'pfc_status_regs_double_read'
 * Registers for EGQ PFC status and NIF PFC status are both 'sticky' and will clear on read only.Changing the STATUS_SEL for each of them will result with an OR between two different ranges of the PFC vector.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pfc_status_regs_double_read - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fc_inband_pfc_status_regs_double_read_get_f) (
    int unit);

/**
 * \brief get table calender_length entry 
 * Flow Control In-Band calender length.
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ILKN ID
 * 
 * \return
 *     calender_length - returns the relevant entry values grouped in struct - see dnx_data_fc_inband_calender_length_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fc_inband_calender_length_t *(
    *dnx_data_fc_inband_calender_length_get_f) (
    int unit,
    int ilkn_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FC - INBAND:
 * {
 */
/**
 * \brief Interface for fc inband data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fc_inband_feature_get_f feature_get;
    /**
     * returns define data of pfc_rec_cdu_shift
     */
    dnx_data_fc_inband_pfc_rec_cdu_shift_get_f pfc_rec_cdu_shift_get;
    /**
     * returns define data of pfc_status_regs_double_read
     */
    dnx_data_fc_inband_pfc_status_regs_double_read_get_f pfc_status_regs_double_read_get;
    /**
     * get table calender_length entry 
     */
    dnx_data_fc_inband_calender_length_get_f calender_length_get;
    /**
     * get general info table about table (for example key size)calender_length info
     */
    dnxc_data_table_info_get_f calender_length_info_get;
} dnx_data_if_fc_inband_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_FC:
 * {
 */
/**
 * \brief Interface for fc data
 */
typedef struct
{
    /**
     * Interface for fc coe data
     */
    dnx_data_if_fc_coe_t coe;
    /**
     * Interface for fc oob data
     */
    dnx_data_if_fc_oob_t oob;
    /**
     * Interface for fc inband data
     */
    dnx_data_if_fc_inband_t inband;
} dnx_data_if_fc_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_fc_t dnx_data_fc;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_FC_H_*/
/* *INDENT-ON* */
