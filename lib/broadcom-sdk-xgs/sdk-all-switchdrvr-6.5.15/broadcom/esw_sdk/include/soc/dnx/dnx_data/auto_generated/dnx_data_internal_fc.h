/** \file dnx_data_internal_fc.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_FC_H_
/*{*/
#define _DNX_DATA_INTERNAL_FC_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_fc.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_fc_submodule_coe,
    dnx_data_fc_submodule_oob,
    dnx_data_fc_submodule_inband,

    /**
     * Must be last one!
     */
    _dnx_data_fc_submodule_nof
} dnx_data_fc_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE COE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fc_coe_feature_get(
    int unit,
    dnx_data_fc_coe_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fc_coe_define_nof_coe_cal_instances,
    dnx_data_fc_coe_define_calendar_pause_resolution,
    dnx_data_fc_coe_define_data_offset,
    dnx_data_fc_coe_define_ethertype,
    dnx_data_fc_coe_define_control_opcode,

    /**
     * Must be last one!
     */
    _dnx_data_fc_coe_define_nof
} dnx_data_fc_coe_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_coe_cal_instances
 * Module - 'fc', Submodule - 'coe', data - 'nof_coe_cal_instances'
 * Number of PP COE calendar instances
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_coe_cal_instances - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fc_coe_nof_coe_cal_instances_get(
    int unit);

/**
 * \brief returns numeric data of calendar_pause_resolution
 * Module - 'fc', Submodule - 'coe', data - 'calendar_pause_resolution'
 * PP COE Pause counter rate. Unit: usec.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     calendar_pause_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fc_coe_calendar_pause_resolution_get(
    int unit);

/**
 * \brief returns numeric data of data_offset
 * Module - 'fc', Submodule - 'coe', data - 'data_offset'
 * Define offset in bytes from after Ethernet Frame for COE FC data. Valid range = [0-31]
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fc_coe_data_offset_get(
    int unit);

/**
 * \brief returns numeric data of ethertype
 * Module - 'fc', Submodule - 'coe', data - 'ethertype'
 * Set ethertype of COE FC packet.(16bits)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ethertype - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fc_coe_ethertype_get(
    int unit);

/**
 * \brief returns numeric data of control_opcode
 * Module - 'fc', Submodule - 'coe', data - 'control_opcode'
 * Set PP COE Control Opcode used to identify COE.(16bits)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     control_opcode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fc_coe_control_opcode_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fc_coe_table_calendar_mode,
    dnx_data_fc_coe_table_mac_address,
    dnx_data_fc_coe_table_calender_length,

    /**
     * Must be last one!
     */
    _dnx_data_fc_coe_table_nof
} dnx_data_fc_coe_table_e;

/* Get Data */
/**
 * \brief get table calendar_mode entry 
 * PP COE
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     calendar_mode - returns the relevant entry values grouped in struct - see dnx_data_fc_coe_calendar_mode_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fc_coe_calendar_mode_t * dnx_data_fc_coe_calendar_mode_get(
    int unit);

/**
 * \brief get table mac_address entry 
 * MAC address of COE FC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mac_address - returns the relevant entry values grouped in struct - see dnx_data_fc_coe_mac_address_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fc_coe_mac_address_t * dnx_data_fc_coe_mac_address_get(
    int unit);

/**
 * \brief get table calender_length entry 
 * Flow Control COE calender length.
 * 
 * \param [in] unit - unit #
 * \param [in] cal_id - Calendar ID
 * 
 * \return
 *     calender_length - returns the relevant entry values grouped in struct - see dnx_data_fc_coe_calender_length_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fc_coe_calender_length_t * dnx_data_fc_coe_calender_length_get(
    int unit,
    int cal_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fc', Submodule - 'coe', table - 'calendar_mode'
 * PP COE
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_coe_calendar_mode_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'fc', Submodule - 'coe', table - 'mac_address'
 * MAC address of COE FC
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_coe_mac_address_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'fc', Submodule - 'coe', table - 'calender_length'
 * Flow Control COE calender length.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_coe_calender_length_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)calendar_mode info
 * PP COE
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     calendar_mode - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fc_coe_calendar_mode_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mac_address info
 * MAC address of COE FC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mac_address - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fc_coe_mac_address_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)calender_length info
 * Flow Control COE calender length.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     calender_length - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fc_coe_calender_length_info_get(
    int unit);

/*
 * SUBMODULE OOB:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fc_oob_feature_get(
    int unit,
    dnx_data_fc_oob_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fc_oob_define_nof_oob_ids,

    /**
     * Must be last one!
     */
    _dnx_data_fc_oob_define_nof
} dnx_data_fc_oob_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_oob_ids
 * Module - 'fc', Submodule - 'oob', data - 'nof_oob_ids'
 * Number of Out of Band interfaces.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_oob_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fc_oob_nof_oob_ids_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fc_oob_table_calender_rep_count,
    dnx_data_fc_oob_table_calender_length,
    dnx_data_fc_oob_table_tx_freq,
    dnx_data_fc_oob_table_port,
    dnx_data_fc_oob_table_indication_invert,

    /**
     * Must be last one!
     */
    _dnx_data_fc_oob_table_nof
} dnx_data_fc_oob_table_e;

/* Get Data */
/**
 * \brief get table calender_rep_count entry 
 * Flow Control Out-Of-Band repeat count.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     calender_rep_count - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_calender_rep_count_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fc_oob_calender_rep_count_t * dnx_data_fc_oob_calender_rep_count_get(
    int unit,
    int oob_id);

/**
 * \brief get table calender_length entry 
 * Flow Control Out-Of-Band calender length.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     calender_length - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_calender_length_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fc_oob_calender_length_t * dnx_data_fc_oob_calender_length_get(
    int unit,
    int oob_id);

/**
 * \brief get table tx_freq entry 
 * Flow Control OOB TX Speed relatively to the Core Clock.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     tx_freq - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_tx_freq_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fc_oob_tx_freq_t * dnx_data_fc_oob_tx_freq_get(
    int unit,
    int oob_id);

/**
 * \brief get table port entry 
 * Flow Control Out-Of-Band port type and port mode.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     port - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_port_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fc_oob_port_t * dnx_data_fc_oob_port_get(
    int unit,
    int oob_id);

/**
 * \brief get table indication_invert entry 
 * his option controls the meaning of '0'/'1' in the of Calendar FC indications per interface.
 * 
 * \param [in] unit - unit #
 * \param [in] oob_id - Out-Of-Band ID
 * 
 * \return
 *     indication_invert - returns the relevant entry values grouped in struct - see dnx_data_fc_oob_indication_invert_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fc_oob_indication_invert_t * dnx_data_fc_oob_indication_invert_get(
    int unit,
    int oob_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fc', Submodule - 'oob', table - 'calender_rep_count'
 * Flow Control Out-Of-Band repeat count.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_oob_calender_rep_count_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'fc', Submodule - 'oob', table - 'calender_length'
 * Flow Control Out-Of-Band calender length.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_oob_calender_length_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'fc', Submodule - 'oob', table - 'tx_freq'
 * Flow Control OOB TX Speed relatively to the Core Clock.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_oob_tx_freq_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'fc', Submodule - 'oob', table - 'port'
 * Flow Control Out-Of-Band port type and port mode.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_oob_port_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'fc', Submodule - 'oob', table - 'indication_invert'
 * his option controls the meaning of '0'/'1' in the of Calendar FC indications per interface.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_oob_indication_invert_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)calender_rep_count info
 * Flow Control Out-Of-Band repeat count.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     calender_rep_count - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fc_oob_calender_rep_count_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)calender_length info
 * Flow Control Out-Of-Band calender length.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     calender_length - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fc_oob_calender_length_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)tx_freq info
 * Flow Control OOB TX Speed relatively to the Core Clock.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tx_freq - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fc_oob_tx_freq_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)port info
 * Flow Control Out-Of-Band port type and port mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fc_oob_port_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)indication_invert info
 * his option controls the meaning of '0'/'1' in the of Calendar FC indications per interface.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     indication_invert - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fc_oob_indication_invert_info_get(
    int unit);

/*
 * SUBMODULE INBAND:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fc_inband_feature_get(
    int unit,
    dnx_data_fc_inband_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fc_inband_define_pfc_rec_cdu_shift,
    dnx_data_fc_inband_define_pfc_status_regs_double_read,

    /**
     * Must be last one!
     */
    _dnx_data_fc_inband_define_nof
} dnx_data_fc_inband_define_e;

/* Get Data */
/**
 * \brief returns define data of pfc_rec_cdu_shift
 * Module - 'fc', Submodule - 'inband', data - 'pfc_rec_cdu_shift'
 * The last two CDUs of each core have one bit shift left, which is affecting the reception of PFC - CFC is sending wrong index to EGQ
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pfc_rec_cdu_shift - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fc_inband_pfc_rec_cdu_shift_get(
    int unit);

/**
 * \brief returns define data of pfc_status_regs_double_read
 * Module - 'fc', Submodule - 'inband', data - 'pfc_status_regs_double_read'
 * Registers for EGQ PFC status and NIF PFC status are both 'sticky' and will clear on read only.Changing the STATUS_SEL for each of them will result with an OR between two different ranges of the PFC vector.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pfc_status_regs_double_read - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fc_inband_pfc_status_regs_double_read_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fc_inband_table_calender_length,

    /**
     * Must be last one!
     */
    _dnx_data_fc_inband_table_nof
} dnx_data_fc_inband_table_e;

/* Get Data */
/**
 * \brief get table calender_length entry 
 * Flow Control In-Band calender length.
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ILKN ID
 * 
 * \return
 *     calender_length - returns the relevant entry values grouped in struct - see dnx_data_fc_inband_calender_length_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fc_inband_calender_length_t * dnx_data_fc_inband_calender_length_get(
    int unit,
    int ilkn_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fc', Submodule - 'inband', table - 'calender_length'
 * Flow Control In-Band calender length.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_inband_calender_length_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)calender_length info
 * Flow Control In-Band calender length.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     calender_length - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fc_inband_calender_length_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fc_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_FC_H_*/
/* *INDENT-ON* */
