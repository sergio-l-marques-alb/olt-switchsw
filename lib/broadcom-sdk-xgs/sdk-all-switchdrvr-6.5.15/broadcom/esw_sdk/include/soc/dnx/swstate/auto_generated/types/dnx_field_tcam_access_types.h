/** \file dnx/swstate/auto_generated/types/dnx_field_tcam_access_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_FIELD_TCAM_ACCESS_TYPES_H__
#define __DNX_FIELD_TCAM_ACCESS_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnxc/swstate/callbacks/sw_state_htb_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_hash_table.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_types.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_tcam_manager_types.h>
/*
 * ENUMs
 */

/**
 * TCAM stages enum
 */
typedef enum {
    /**
     * Invalid Field Stage
     */
    DNX_FIELD_TCAM_STAGE_INVALID = -1,
    DNX_FIELD_TCAM_STAGE_FIRST = 0,
    /**
     * Ingress PMF 1 (Pass 0 of PMF-A)
     */
    DNX_FIELD_TCAM_STAGE_IPMF1 = DNX_FIELD_STAGE_FIRST,
    /**
     * Ingress PMF 2 (Pass 1 of PMF-A)
     */
    DNX_FIELD_TCAM_STAGE_IPMF2,
    /**
     * Ingress PMF 3 (Rename of PMF-B)
     */
    DNX_FIELD_TCAM_STAGE_IPMF3,
    /**
     * Egress PMF - single one at egress.
     */
    DNX_FIELD_TCAM_STAGE_EPMF,
    /**
     * VTT1 stage
     */
    DNX_FIELD_TCAM_STAGE_VTT1,
    /**
     * VTT2 stage
     */
    DNX_FIELD_TCAM_STAGE_VTT2,
    /**
     * VTT3 stage
     */
    DNX_FIELD_TCAM_STAGE_VTT3,
    /**
     * VTT4 stage
     */
    DNX_FIELD_TCAM_STAGE_VTT4,
    /**
     * VTT5 stage
     */
    DNX_FIELD_TCAM_STAGE_VTT5,
    /**
     * FWD1 stage
     */
    DNX_FIELD_TCAM_STAGE_FWD1,
    /**
     * FWD2 stage
     */
    DNX_FIELD_TCAM_STAGE_FWD2,
    /**
     * Number of types in dnx_field_tcam_stage_e
     */
    DNX_FIELD_TCAM_STAGE_NOF
} dnx_field_tcam_stage_e;

/**
 * Allocation Mode Enum:
 * Specifies TCAM handler's allocation mode.                                                                 Each TCAM handler can specify between various TCAM banks allocation modes,                                                                 The allocation mode defines the way that the handler allocates TCAM banks in.
 */
typedef enum {
    DNX_FIELD_TCAM_BANK_ALLOCATION_MODE_INVALID = -1,
    DNX_FIELD_TCAM_BANK_ALLOCATION_MODE_FIRST = 0,
    /**
     * Auto TCAM bank allocation mode: Starts with no banks and allocates banks
     * on demand (When a request for entry add fails finding available space).
     * When a TCAM handler is associated with this allocation mode, user has no
     * explicit way to request a specific bank to be allocated for the handler.
     * 
     * This mode can only allocate banks with OPEN mode or with no mode set.
     * When a TCAM handler with this mode allocates a certain bank with no mode,
     * bank mode is changed to OPEN.
     */
    DNX_FIELD_TCAM_BANK_ALLOCATION_MODE_AUTO = DNX_FIELD_TCAM_BANK_ALLOCATION_MODE_FIRST,
    /**
     * Select TCAM bank allocation mode: For TCAM handlers with this type of allocation
     * mode, user may supply an additional array at creation time for specific bank ids
     * to be allocated for the handler. In this mode, banks are not automatically
     * allocated on demand, instead, an error is returned in case no space is lef to add
     * an entry for this handler. If user still wants to allocate a new bank for the
     * handler after creating it, he needs to call bcm_field_tcam_bank_add() function
     * in order to do so.
     * 
     * This mode can only allocate banks with RESTRICTED/RESTRICTED_DT modes or with no
     * mode set.
     * When a TCAM handler with this mode allocates a certain bank with no mode,
     * bank mode is changed to RESTRICTED or RESTRICTED_DT according to case.
     */
    DNX_FIELD_TCAM_BANK_ALLOCATION_MODE_SELECT,
    /**
     * Number of bank allocation modes
     */
    DNX_FIELD_TCAM_BANK_ALLOCATION_MODE_NOF
} dnx_field_tcam_bank_allocation_mode_e;

/**
 * TCAM entry sizes
 */
typedef enum {
    /**
     * Invalid entry size
     */
    DNX_FIELD_TCAM_ENTRY_SIZE_INVALID = -1,
    /**
     * First entry (used for iteration)
     */
    DNX_FIELD_TCAM_ENTRY_SIZE_FIRST = 0,
    /**
     * Entry size half
     */
    DNX_FIELD_TCAM_ENTRY_SIZE_HALF = DNX_FIELD_TCAM_ENTRY_SIZE_FIRST,
    /**
     * Entry size single
     */
    DNX_FIELD_TCAM_ENTRY_SIZE_SINGLE = 1,
    /**
     * Entry size double
     */
    DNX_FIELD_TCAM_ENTRY_SIZE_DOUBLE = 2,
    /**
     * Number of entry sizes
     */
    DNX_FIELD_TCAM_ENTRY_SIZE_COUNT = 3
} dnx_field_tcam_entry_size_e;

/**
 * The core to install entry on (encoded in entry access ID)
 */
typedef enum {
    /**
     * Invalid entry
     */
    DNX_FIELD_TCAM_CORE_INVALID = -1,
    /**
     * First core
     */
    DNX_FIELD_TCAM_CORE_FIRST = 0,
    /**
     * Core 0
     */
    DNX_FIELD_TCAM_CORE_0 = DNX_FIELD_TCAM_CORE_FIRST,
    /**
     * Core 1
     */
    DNX_FIELD_TCAM_CORE_1 = 1,
    /**
     * Core 0/1
     */
    DNX_FIELD_TCAM_CORE_ALL = 2,
    /**
     * Number of cores
     */
    DNX_FIELD_TCAM_CORE_COUNT = DNX_DATA_MAX_DEVICE_GENERAL_MAX_NOF_CORES
} dnx_field_tcam_core_e;

/*
 * STRUCTs
 */

/**
 * This struct holds specific information about each installed field group
 * that are meant to be used by TCAM Access module in order to install entries in TCAM
 */
typedef struct {
    /**
     * The key size of this field group
     */
    uint32 key_size;
    /**
     * The action size of this field group in bits
     */
    uint32 action_size;
    /**
     * The actual number of bits used in action
     */
    uint32 actual_action_size;
    /**
     * The stage of this field group
     */
    dnx_field_tcam_stage_e stage;
    /**
     * Size of prefix
     */
    uint32 prefix_size;
    /**
     * Value of prefix
     */
    uint32 prefix_value;
    /**
     * Flag for direct table groups
     */
    uint8 direct_table;
    /**
     * Bank id for DT FG
     */
    int dt_bank_id;
    /**
     * Bank Allocation Mode for the FG (see dnx_field_bank_allocation_mode_e
     */
    dnx_field_tcam_bank_allocation_mode_e bank_allocation_mode;
} dnx_field_tcam_access_fg_params_t;

/**
 * Contains information about each entry handler (access id)
 * and where should it be mapped to
 */
typedef struct {
    /**
     * Hash for mapping entry id to entry location inside TCAM
     */
    sw_state_htbl_t* entry_location_hash;
    /**
     * Array that maps field group id to its related parameters
     */
    dnx_field_tcam_access_fg_params_t* fg_params;
} dnx_field_tcam_access_t;


#endif /* __DNX_FIELD_TCAM_ACCESS_TYPES_H__ */
