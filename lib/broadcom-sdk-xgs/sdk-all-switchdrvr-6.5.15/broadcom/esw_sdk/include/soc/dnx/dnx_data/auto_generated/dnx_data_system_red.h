/** \file dnx_data_system_red.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_SYSTEM_RED_H_
/*{*/
#define _DNX_DATA_SYSTEM_RED_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_system_red.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_system_red
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_system_red_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - CONFIG:
 * system red configuration
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_system_red_config_feature_nof
} dnx_data_system_red_config_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_system_red_config_feature_get_f) (
    int unit,
    dnx_data_system_red_config_feature_e feature);

/**
 * \brief returns numeric data of enable
 * Module - 'system_red', Submodule - 'config', data - 'enable'
 * system RED enable configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_system_red_config_enable_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SYSTEM_RED - CONFIG:
 * {
 */
/**
 * \brief Interface for system_red config data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_system_red_config_feature_get_f feature_get;
    /**
     * returns numeric data of enable
     */
    dnx_data_system_red_config_enable_get_f enable_get;
} dnx_data_if_system_red_config_t;

/*
 * }
 */

/*
 * SUBMODULE  - INFO:
 * system red related info
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule info table resource
 * Table info:
 * system red tracked resources
 */
typedef struct
{
    /**
     * Maximal resource size
     */
    uint32 max;
    /**
     * Maximal resource size in HW granularity
     */
    uint32 hw_resolution_max;
    /**
     * Maximal nof bits to describe resource size in HW granularity
     */
    uint32 hw_resolution_nof_bits;
} dnx_data_system_red_info_resource_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_system_red_info_feature_nof
} dnx_data_system_red_info_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_system_red_info_feature_get_f) (
    int unit,
    dnx_data_system_red_info_feature_e feature);

/**
 * \brief returns define data of nof_red_q_size
 * Module - 'system_red', Submodule - 'info', data - 'nof_red_q_size'
 * number of system red RED-Q-Size values.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_red_q_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_system_red_info_nof_red_q_size_get_f) (
    int unit);

/**
 * \brief returns define data of max_red_q_size
 * Module - 'system_red', Submodule - 'info', data - 'max_red_q_size'
 * max value for system red RED-Q-Size. this is the value used to determoine system level congestion level
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_red_q_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_system_red_info_max_red_q_size_get_f) (
    int unit);

/**
 * \brief returns define data of max_ing_aging_period
 * Module - 'system_red', Submodule - 'info', data - 'max_ing_aging_period'
 * max supported aging period on ingress side in msec
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_ing_aging_period - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_system_red_info_max_ing_aging_period_get_f) (
    int unit);

/**
 * \brief returns define data of max_sch_aging_period
 * Module - 'system_red', Submodule - 'info', data - 'max_sch_aging_period'
 * max supported aging period on scheduler side in msec
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_sch_aging_period - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_system_red_info_max_sch_aging_period_get_f) (
    int unit);

/**
 * \brief returns define data of sch_aging_period_factor
 * Module - 'system_red', Submodule - 'info', data - 'sch_aging_period_factor'
 * factor (in clocks) for sch aging period calculation: aging_period = nof_ports * factor * hw_value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sch_aging_period_factor - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_system_red_info_sch_aging_period_factor_get_f) (
    int unit);

/**
 * \brief returns define data of max_free_res_thr_range
 * Module - 'system_red', Submodule - 'info', data - 'max_free_res_thr_range'
 * max range id for system RED free resources thresholds.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_free_res_thr_range - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_system_red_info_max_free_res_thr_range_get_f) (
    int unit);

/**
 * \brief get table resource entry 
 * system red tracked resources
 * 
 * \param [in] unit - unit #
 * \param [in] type - resource type
 * 
 * \return
 *     resource - returns the relevant entry values grouped in struct - see dnx_data_system_red_info_resource_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_system_red_info_resource_t *(
    *dnx_data_system_red_info_resource_get_f) (
    int unit,
    int type);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SYSTEM_RED - INFO:
 * {
 */
/**
 * \brief Interface for system_red info data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_system_red_info_feature_get_f feature_get;
    /**
     * returns define data of nof_red_q_size
     */
    dnx_data_system_red_info_nof_red_q_size_get_f nof_red_q_size_get;
    /**
     * returns define data of max_red_q_size
     */
    dnx_data_system_red_info_max_red_q_size_get_f max_red_q_size_get;
    /**
     * returns define data of max_ing_aging_period
     */
    dnx_data_system_red_info_max_ing_aging_period_get_f max_ing_aging_period_get;
    /**
     * returns define data of max_sch_aging_period
     */
    dnx_data_system_red_info_max_sch_aging_period_get_f max_sch_aging_period_get;
    /**
     * returns define data of sch_aging_period_factor
     */
    dnx_data_system_red_info_sch_aging_period_factor_get_f sch_aging_period_factor_get;
    /**
     * returns define data of max_free_res_thr_range
     */
    dnx_data_system_red_info_max_free_res_thr_range_get_f max_free_res_thr_range_get;
    /**
     * get table resource entry 
     */
    dnx_data_system_red_info_resource_get_f resource_get;
    /**
     * get general info table about table (for example key size)resource info
     */
    dnxc_data_table_info_get_f resource_info_get;
} dnx_data_if_system_red_info_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_SYSTEM_RED:
 * {
 */
/**
 * \brief Interface for system_red data
 */
typedef struct
{
    /**
     * Interface for system_red config data
     */
    dnx_data_if_system_red_config_t config;
    /**
     * Interface for system_red info data
     */
    dnx_data_if_system_red_info_t info;
} dnx_data_if_system_red_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_system_red_t dnx_data_system_red;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_SYSTEM_RED_H_*/
/* *INDENT-ON* */
