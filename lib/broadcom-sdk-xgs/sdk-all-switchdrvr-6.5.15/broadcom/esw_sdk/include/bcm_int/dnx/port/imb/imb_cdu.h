
/*
 *         
 * $Id:$
 * 
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *         
 *     
 * DO NOT EDIT THIS FILE!
 *
 */

#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX family only!"
#endif /* BCM_DNX_SUPPORT */

#ifndef _IMB_CDU_H__H_
#define _IMB_CDU_H__H_

#include <soc/portmod/portmod.h>
#include <bcm/port.h>
#include <bcm/cosq.h>
#include <bcm_int/dnx/port/imb/imb_diag.h>
#include <soc/dnxc/legacy/dnxc_port.h>
/*initialize an IMB.*/
int imb_cdu_init(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*De-initialize an existing IMB.*/
int imb_cdu_deinit(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*Add new IMB (Interface Management Block) port*/
int imb_cdu_port_attach(
    int unit,
    bcm_port_t port,
    uint32 flags);

/*Remove an existing IMB (Interface Management Block) port*/
int imb_cdu_port_detach(
    int unit,
    bcm_port_t port);

/*Enable / disable a port*/
int imb_cdu_port_enable_set(
    int unit,
    bcm_port_t port,
    int enable);
int imb_cdu_port_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Enable / disable loopback on a port*/
int imb_cdu_port_loopback_set(
    int unit,
    bcm_port_t port,
    int loopback);
int imb_cdu_port_loopback_get(
    int unit,
    bcm_port_t port,
    int *loopback);

/*Get port link state*/
int imb_cdu_port_link_state_get(
    int unit,
    bcm_port_t port,
    int clear_status,
    bcm_port_link_state_t * link_state);

/*Enable / disable EEE for a port*/
int imb_cdu_port_eee_enable_set(
    int unit,
    bcm_port_t port,
    int enable);
int imb_cdu_port_eee_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Set / get priority configuration for the port*/
int imb_cdu_port_priority_config_set(
    int unit,
    bcm_port_t port,
    const bcm_port_prio_config_t * priority_config);
int imb_cdu_port_priority_config_get(
    int unit,
    bcm_port_t port,
    bcm_port_prio_config_t * priority_config);

/*local fault enable set/get*/
int imb_cdu_port_local_fault_enable_set(
    int unit,
    bcm_port_t port,
    int enable);
int imb_cdu_port_local_fault_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*remote fault enable set/get*/
int imb_cdu_port_remote_fault_enable_set(
    int unit,
    bcm_port_t port,
    int enable);
int imb_cdu_port_remote_fault_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Get the Bandwidth for the CDU.*/
int imb_cdu_bandwidth_get(
    int unit,
    bcm_port_t port,
    int is_port_include,
    int *bandwidth);

/*Set the Start TX threshold for the CDU.*/
int imb_cdu_port_tx_start_thr_set(
    int unit,
    bcm_port_t port,
    int speed);

/*Set/get the PRD Enable mode.*/
int imb_cdu_prd_enable_set(
    int unit,
    bcm_port_t port,
    int enable_mode);
int imb_cdu_prd_enable_get(
    int unit,
    bcm_port_t port,
    int *enable_mode);

/*Set/get PRD Properties.*/
int imb_cdu_prd_properties_set(
    int unit,
    bcm_port_t port,
    imb_prd_properties_t property,
    uint32 val);
int imb_cdu_prd_properties_get(
    int unit,
    bcm_port_t port,
    imb_prd_properties_t property,
    uint32 *val);

/*Configure PRD priority maps.*/
int imb_cdu_prd_map_set(
    int unit,
    bcm_port_t port,
    bcm_cosq_ingress_port_drop_map_t map,
    uint32 key,
    uint32 priority);
int imb_cdu_prd_map_get(
    int unit,
    bcm_port_t port,
    bcm_cosq_ingress_port_drop_map_t map,
    uint32 key,
    uint32 *priority);

/*Configure PRD thresholds.*/
int imb_cdu_prd_threshold_set(
    int unit,
    bcm_port_t port,
    uint32 priority,
    uint32 threshold);
int imb_cdu_prd_threshold_get(
    int unit,
    bcm_port_t port,
    uint32 priority,
    uint32 *threshold);

/*Configure PRD TPIDs per port.*/
int imb_cdu_prd_tpid_set(
    int unit,
    bcm_port_t port,
    uint32 tpid_index,
    uint32 tpid_value);
int imb_cdu_prd_tpid_get(
    int unit,
    bcm_port_t port,
    uint32 tpid_index,
    uint32 *tpid_value);

/*Get PRD counter for the corresponding FIFO (RMC).*/
int imb_cdu_prd_drop_count_get(
    int unit,
    bcm_port_t port,
    bcm_port_nif_scheduler_t sch_priority,
    uint64 *count);

/*Set/Get PRD Configurable Ether types.*/
int imb_cdu_prd_custom_ether_type_set(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 ether_type_val);
int imb_cdu_prd_custom_ether_type_get(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 *ether_type_val);

/*Set/Get PRD TCAM entries (for the soft stage).*/
int imb_cdu_prd_flex_key_entry_set(
    int unit,
    bcm_port_t port,
    uint32 key_index,
    const bcm_cosq_ingress_drop_flex_key_entry_t * flex_key_info);
int imb_cdu_prd_flex_key_entry_get(
    int unit,
    bcm_port_t port,
    uint32 key_index,
    bcm_cosq_ingress_drop_flex_key_entry_t * flex_key_info);

/*Set/Get PRD TCAM key per Ether type (for the soft stage).*/
int imb_cdu_prd_flex_key_construct_set(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    const bcm_cosq_ingress_drop_flex_key_construct_t * flex_key_config);
int imb_cdu_prd_flex_key_construct_get(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    bcm_cosq_ingress_drop_flex_key_construct_t * flex_key_config);

/*Set/Get PRD Control Frame proeprties. if a packet is identified as control frame, it will automatically get the highest priority.*/
int imb_cdu_prd_control_frame_set(
    int unit,
    bcm_port_t port,
    uint32 control_frame_index,
    const bcm_cosq_ingress_drop_control_frame_config_t * control_frame_config);
int imb_cdu_prd_control_frame_get(
    int unit,
    bcm_port_t port,
    uint32 control_frame_index,
    bcm_cosq_ingress_drop_control_frame_config_t * control_frame_config);

/*Set/Get PRD MPLS special label proeprties. if a packet is identified as MPLS special label and the label value matches to one of the saved special labels, the priority and TDM indication will be taken from the label properties.*/
int imb_cdu_prd_mpls_special_label_set(
    int unit,
    bcm_port_t port,
    uint32 label_index,
    const bcm_cosq_ingress_port_drop_mpls_special_label_config_t * label_config);
int imb_cdu_prd_mpls_special_label_get(
    int unit,
    bcm_port_t port,
    uint32 label_index,
    bcm_cosq_ingress_port_drop_mpls_special_label_config_t * label_config);

/*Get indication whether the ether type code is configurable by the user or not*/
int imb_cdu_prd_is_custom_ether_type_get(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 *is_custom_ether_type);

/*Get rx fifo status*/
int imb_cdu_port_rx_fifo_status_get(
    int unit,
    bcm_port_t port,
    bcm_port_nif_scheduler_t sch_priority,
    uint32 *max_occupancy,
    uint32 *fifo_level);

/*Get tx fifo status*/
int imb_cdu_port_tx_fifo_status_get(
    int unit,
    bcm_port_t port,
    uint32 *max_occupancy,
    uint32 *fifo_level,
    uint32 *pm_credits);

/*Set/Get port advertise abilities*/
int imb_cdu_port_autoneg_ability_advert_set(
    int unit,
    bcm_port_t port,
    int num_ability,
    const bcm_port_speed_ability_t * abilities);
int imb_cdu_port_autoneg_ability_advert_get(
    int unit,
    bcm_port_t port,
    int max_num_ability,
    bcm_port_speed_ability_t * abilities,
    int *actual_num_ability);

/*Get the local speed abilities*/
int imb_cdu_port_speed_ability_local_get(
    int unit,
    bcm_port_t port,
    int max_num_ability,
    bcm_port_speed_ability_t * abilities,
    int *actual_num_ability);

/*Get the remote abilities*/
int imb_cdu_port_autoneg_ability_remote_get(
    int unit,
    bcm_port_t port,
    int max_num_ability,
    bcm_port_speed_ability_t * abilities,
    int *actual_num_ability);

/*Set port scheduler*/
int imb_cdu_port_scheduler_config_set(
    int unit,
    bcm_port_t port,
    int enable);

/*Get port's default resource configurations*/
int imb_cdu_port_resource_default_get(
    int unit,
    bcm_port_t port,
    uint32 flags,
    bcm_port_resource_t * resource);

/*Map STIF instance ID with given port.*/
int imb_cdu_port_to_stif_instance_map_set(
    int unit,
    bcm_port_t port,
    int instace_id,
    int instace_core,
    int connect);

/*Get phys associated with imb instance*/
int imb_cdu_phys_get(
    int unit,
    int imb_id,
    bcm_pbmp_t * phys);

/*Reset pms*/
int imb_cdu_pms_reset_set(
    int unit,
    int imb_id,
    uint32 in_reset);
int imb_cdu_pms_reset_get(
    int unit,
    int imb_id,
    uint32 *in_reset);

/*Enable / disable a port's RMCs to produce PFC for the specified priority*/
int imb_cdu_port_gen_pfc_from_rmc_enable_set(
    int unit,
    bcm_port_t port,
    uint32 priority,
    uint32 enable);
int imb_cdu_port_gen_pfc_from_rmc_enable_get(
    int unit,
    bcm_port_t port,
    uint32 priority,
    uint32 *enable);

/*Enable / disable port's RMCs(all lanes) to generate LLFC*/
int imb_cdu_port_gen_llfc_from_rmc_enable_set(
    int unit,
    bcm_port_t port,
    uint32 enable);

/*Enable / disable PM to stop TX on all of a port's lanes according to a LLFC signal from CFC*/
int imb_cdu_port_stop_pm_from_cfc_llfc_enable_set(
    int unit,
    bcm_port_t port,
    uint32 enable);

/*Set / get a port's Rx Quad MAC Lane FIFO (QMLF) Flow Control generation thresholds.*/
int imb_cdu_port_fc_rx_qmlf_threshold_set(
    int unit,
    bcm_port_t port,
    uint32 flags,
    uint32 threshold);
int imb_cdu_port_fc_rx_qmlf_threshold_get(
    int unit,
    bcm_port_t port,
    uint32 flags,
    uint32 *threshold);

/*Set the Flow Control Interface in/out of reset for a specified CDU.*/
int imb_cdu_fc_reset_set(
    int unit,
    const imb_create_info_t * imb_info,
    uint32 in_reset);

/*Enable / disable the generation of a LLFC based on a signal from Global Resources thresholds for a specified CDU*/
int imb_cdu_llfc_from_glb_rsc_enable_set(
    int unit,
    const imb_create_info_t * imb_info,
    uint32 enable);

/*Per CDU map the received PFC - each priority received by NIF should be mapped to a priority that will be sent to EGQ in order to stop a Q-pair*/
int imb_cdu_pfc_rec_priority_map(
    int unit,
    int imb_id,
    uint32 nif_priority,
    uint32 egq_priority);

/*Per CDU unmap all priorities of the received PFC*/
int imb_cdu_pfc_rec_priority_unmap(
    int unit,
    int imb_id);

#endif /*_IMB_CDU_H_*/
