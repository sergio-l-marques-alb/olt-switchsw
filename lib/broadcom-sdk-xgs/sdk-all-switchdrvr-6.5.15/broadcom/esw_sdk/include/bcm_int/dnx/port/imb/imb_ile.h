
/*
 *         
 * $Id:$
 * 
 * $Copyright: (c) 2018 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *         
 *     
 * DO NOT EDIT THIS FILE!
 *
 */

#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX family only!"
#endif /* BCM_DNX_SUPPORT */

#ifndef _IMB_ILE_H__H_
#define _IMB_ILE_H__H_

#include <soc/portmod/portmod.h>
#include <bcm/port.h>
#include <bcm/cosq.h>
#include <bcm_int/dnx/port/imb/imb_diag.h>
#include <soc/dnxc/legacy/dnxc_port.h>
/*initialize an IMB.*/
int imb_ile_init(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*De-initialize an existing IMB.*/
int imb_ile_deinit(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*Add new IMB (Interface Management Block) port*/
int imb_ile_port_attach(
    int unit,
    bcm_port_t port,
    uint32 flags);

/*Enable / disable a port*/
int imb_ile_port_enable_set(
    int unit,
    bcm_port_t port,
    int enable);
int imb_ile_port_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Enable / disable port RX*/
int imb_ile_port_rx_data_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*Enable / disable loopback on a port*/
int imb_ile_port_loopback_set(
    int unit,
    bcm_port_t port,
    int loopback);
int imb_ile_port_loopback_get(
    int unit,
    bcm_port_t port,
    int *loopback);

/*Get port link state*/
int imb_ile_port_link_state_get(
    int unit,
    bcm_port_t port,
    int clear_status,
    bcm_port_link_state_t * link_state);

/*We can't measure the serdes freq directly, but we can measure the sync_eth counter, 
            and reconstruct the serdes freq from it by multiplying it with the blocks dividers. 
            In PML and PMH GSMII the dividers are:
            VCO                                                   Sync_eth counter
              _        --> PM synce_div --> NBIL/H synce div -->         _
            _| |_                                                      _| |_
            So 
            VCO = Fsynce * PMH_40_PML_20 * PM_1_7_11
            and we need to do:
            SerDes_rate = VCO/Oversample = Fsynce * PMH_40_PML_20 * PM_1_7_11 / Oversample

            In PMH which is not GSMII the dividers are:
            Serdes freq                                            Sync_eth counter
              _         --> PM synce_div --> NBIL/H synce div -->        _
            _| |_                                                      _| |_
            So we need to do:
            SerDes_rate = Fsynce * PMH_40_PML_20 * PM_1_7_11 */
int imb_ile_port_phy_measure_get(
    int unit,
    bcm_port_t port,
    int is_rx,
    soc_dnxc_port_phy_measure_t * phy_measure);

/*Get ilkn counter*/
int imb_ile_port_ilkn_counter_get(
    int unit,
    bcm_port_t port,
    int counter_type,
    uint64 *counter_val);

/*Clear ilkn counter*/
int imb_ile_port_ilkn_counter_clear(
    int unit,
    bcm_port_t port);

/*Get port's default resource configurations*/
int imb_ile_port_resource_default_get(
    int unit,
    bcm_port_t port,
    uint32 flags,
    bcm_port_resource_t * resource);

#endif /*_IMB_ILE_H_*/
