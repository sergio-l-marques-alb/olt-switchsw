<?xml version="1.0"?>
<device_data lib="dnx_data" module="module_testing" bsl_flag="BSL_LS_BCMDNX_COMMON">
    <includes>
        <include>bcm/fabric.h</include>
    </includes>
    
    <sub_module name="unsupported" doc="submodule used to make sure that unsupporrted data will return the expected values">
        
        <features>
            <feature name="supported_feature" labels="test, feature" doc="supported feature expected to return 1"></feature>
            <feature name="unsupported_feature" labels="try, label" doc="usupported feature expected to return 0"></feature>
        </features>
        
        <defines>
            <define name="supported_def" labels="test, define" doc="supported define expected to return value"></define>
            <define name="unsupported_def" labels="try" doc="unsupported feature expected to return NULL"></define>
        </defines>
        
        <tables>
            <table name="supported_table" labels="test, table" doc="supported table expected to return the required struct">
                <value name="num" type="uint32" doc="generic number"></value>
            </table>
            
            <table name="unsupported_table" labels="try" doc="usupported table expected to return NULL">
                <value name="num" type="uint32" doc="generic number"></value>
            </table>
        </tables>
    </sub_module>
    
    
    <sub_module name="types" doc="test different data types">
        <defines>
            <define name="def_signed" signed="1" doc="signed define"></define>
            <define name="def_unsigned" doc="unsigned define"></define>
        </defines>
        <numerics>
            <numeric name="num_signed" signed="1" doc="signed numeric"></numeric>
            <numeric name="num_unsigned" doc="unsigned numeric"></numeric>
        </numerics>
        <tables>
            <table name="all" doc="test all supported types">
                <value name="intval" type="int" doc="test int"></value>
                <value name="uint8val" type="uint8" doc="test uint8"></value>
                <value name="charval" type="char" doc="test char"></value>
                <value name="uint16val" type="uint16" doc="test uint16"></value>
                <value name="enumval" type="bcm_fabric_device_type_t" doc="test enum"></value>
                <value name="arrval" type="uint32[10]" doc="test array"></value>
                <value name="pbmpval" type="bcm_pbmp_t" doc="test pbmp"></value>
                <value name="strval" type="char *" doc="test string"></value>
                <value name="bufferval" type="char[100]" doc="test buffer"></value>
            </table>
        </tables>
    </sub_module>
    
    <sub_module name="property_methods" doc="test different data types">
        <features>
            <feature name="feature_enable" labels="test" doc="test feature enable method"></feature>
            <feature name="feature_disable" doc="test feature enable method with default disabled"></feature>
        </features>

        <numerics>
            <numeric name="numeric_range" labels="test, try" doc="test numeric range method"></numeric>
        </numerics>


        <tables>
            <table name="enable" labels="try" doc="test all supported types">
                <value name="val" type="uint32" doc="test enable method"></value>
            </table>
            <table name="port_enable" doc="test all supported types">
                <key name="port" doc="logical port"></key>
                <value name="val" type="uint32" doc="test port enable method"></value>
            </table>
            <table name="suffix_enable" doc="test all supported types">
                <key name="link" doc="link id"></key>
                <value name="val" type="uint32" doc="test suffix enable method"></value>
            </table>
            <table name="range" doc="test prop range method types">
                <value name="val" type="uint32" doc="see table"></value>
            </table>
            <table name="port_range" doc="test prop port range method types">
                <key name="port" doc="logical port"></key>
                <value name="val" type="uint32" doc="see table"></value>
            </table>
            <table name="suffix_range" doc="test prop suffix range method types">
                <key name="link" doc="link id"></key>
                <value name="val" type="uint32" doc="see table"></value>
            </table>
            <table name="direct_map" doc="test prop direct map method types">
                <value name="val" type="uint32" doc="see table"></value>
            </table>
            <table name="port_direct_map" doc="test prop port direct map method types">
                <key name="port" doc="logical port"></key>
                <value name="val" type="uint32" doc="see table"></value>
            </table>
            <table name="suffix_direct_map" doc="test prop suffix direct map method types">
                <key name="link" doc="link id"></key>
                <value name="val" type="uint32" doc="see table"></value>
            </table>
            <table name="custom" doc="test prop custom method types">
                <key name="link" doc="link id"></key>
                <key name="pipe" doc="pipe id"></key>
                <value name="val" type="uint32" doc="see table"></value>
            </table>
            <table name="pbmp" doc="test pbmp property moethod">
                <value name="val" type="bcm_pbmp_t" doc="see table"></value>
            </table>
            <table name="port_pbmp" doc="test port pbmp property moethod">
                <key name="port" doc="logical port number"></key>
                <value name="val" type="bcm_pbmp_t" doc="see table"></value>
            </table>
            <table name="suffix_pbmp" doc="test suffix pbmp property moethod">
                <key name="index" doc="index to test"></key>
                <value name="val" type="bcm_pbmp_t" doc="see table"></value>
            </table>
            <table name="str" doc="test str property method">
                <value name="val" type="char *" doc="see table"></value>
            </table>
            <table name="port_str" doc="test port str property moethod">
                <key name="port" doc="logical port number"></key>
                <value name="val" type="char *" doc="see table"></value>
            </table>
            <table name="suffix_str" doc="test suffix str property moethod">
                <key name="index" doc="index to test"></key>
                <value name="val" type="char *" doc="see table"></value>
            </table>
            
        </tables>
    </sub_module>

    <sub_module name="data_pointers" doc="test pointers to dnx data and arithmetic operations">
        
        <defines>
            <define name="cores" doc="equal to num of cores"></define>
            <define name="add_cores" doc="equal to num of cores + 1"></define>
            <define name="mul_cores" doc="equal to num of cores * 3"></define>
            <define name="div_cores" doc="equal to num of cores / 2"></define>
            <define name="op_cores" doc="equal to num of cores * 3 + 2 / 2 "></define>
        </defines>

        <numerics>
            <numeric name="num_cores" doc="equal to num of cores"></numeric>
            <numeric name="num_add_cores" doc="equal to num of cores + 1"></numeric>
            <numeric name="num_mul_cores" doc="equal to num of cores * 3"></numeric>
            <numeric name="num_div_cores" doc="equal to num of cores / 2"></numeric>
            <numeric name="num_op_cores" doc="equal to num of cores * 3 + 2 / 2 "></numeric>
            <numeric name="num_last_cores" doc="equal to num of cores"></numeric>
            <numeric name="num_table_cores" doc="pointer to a table entry"></numeric>
        </numerics>
        
        <tables>
            <table name="table_pointers" doc="test key using data pointer">
                <key name="index" doc="size of cores"></key>
                <value name="num_cores" type="uint32" doc="dummy"></value>
            </table>
        </tables>
    </sub_module>
        
    <sub_module name="dbal" doc="test dbal db init procedure">
        
    <defines>
        <define name="vrf_field_size" doc="field size test"></define>
        <define name="field_define_example" doc="field define example"></define>
        <define name="res_max_val" doc="usage example"></define>
        <define name="res_field_size" doc="usage example"></define>
    </defines>

    <tables>
        <table name="all" doc="test all supported types">
            <value name="vlan_id_in_ingress" type="uint32" doc="field in table size test"></value>
            <value name="fid_in_mact" type="uint32" doc="field in table valid test"></value>
            <value name="key_max_val" type="uint32" doc="usage example"></value>
            <value name="key_field_size" type="uint32" doc="usage example"></value>
        </table>
    </tables>
    </sub_module>

</device_data>




