Index: src/soc/phy/chip/koi/merlin_koi_src/merlin_koi_functions.c
===================================================================
--- src/soc/phy/chip/koi/merlin_koi_src/merlin_koi_functions.c	(revision 2076)
+++ src/soc/phy/chip/koi/merlin_koi_src/merlin_koi_functions.c	(revision 2077)
@@ -278,13 +278,13 @@ err_code_t merlin_koi_display_eye_scan_s
         return(_error(ERR_CODE_BAD_PTR_OR_INVALID_INPUT));
     }
 
     EFUN_PRINTF(("%6dmV : ",level));
 
     for (x=-31;x<32;x++) {
-      for (i=0;i<7;i++) {
+        for (i=0;i<7;i++) {
             if (buffer[x+31]>=limits[i]) {
                 EFUN_PRINTF(("%c", '0'+i+1));
                 break;
             }
         }
         if (i==7) {
Index: src/shared/libxml/SAX2.c
===================================================================
--- src/shared/libxml/SAX2.c	(revision 2076)
+++ src/shared/libxml/SAX2.c	(revision 2077)
@@ -420,14 +420,15 @@ xmlSAX2ExternalSubset(void *ctx, const x
 	    ctxt->charset = oldcharset;
 	    return;
 	}
 	ctxt->inputNr = 0;
 	ctxt->inputMax = 5;
 	ctxt->input = NULL;
-    if (xmlPushInput(ctxt, input) < 0)
-        return;
+        if (xmlPushInput(ctxt, input) < 0) {
+            return;
+        }
 
 	/*
 	 * On the fly encoding conversion if needed
 	 */
 	if (ctxt->input->length >= 4) {
 	    enc = xmlDetectCharEncoding(ctxt->input->cur, 4);
Index: src/shared/libxml/parser.c
===================================================================
--- src/shared/libxml/parser.c	(revision 2076)
+++ src/shared/libxml/parser.c	(revision 2077)
@@ -244,27 +244,27 @@ xmlErrAttributeDup(xmlParserCtxtPtr ctxt
 {
     if(ctxt == NULL)
         return;
 
     if ((ctxt->disableSAX != 0) && (ctxt->instate == XML_PARSER_EOF))
         return;
-	ctxt->errNo = XML_ERR_ATTRIBUTE_REDEFINED;
+    ctxt->errNo = XML_ERR_ATTRIBUTE_REDEFINED;
     if (prefix == NULL)
         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,
                         ctxt->errNo, XML_ERR_FATAL, NULL, 0,
                         (const char *) localname, NULL, NULL, 0, 0,
                         "Attribute %s redefined\n", localname);
     else
         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,
                         ctxt->errNo, XML_ERR_FATAL, NULL, 0,
                         (const char *) prefix, (const char *) localname,
                         NULL, 0, 0, "Attribute %s:%s redefined\n", prefix,
                         localname);
-	ctxt->wellFormed = 0;
-	if (ctxt->recovery == 0)
-	    ctxt->disableSAX = 1;
+    ctxt->wellFormed = 0;
+    if (ctxt->recovery == 0)
+        ctxt->disableSAX = 1;
 }
 
 /**
  * xmlFatalErr:
  * @ctxt:  an XML parser context
  * @error:  the error number
@@ -546,22 +546,22 @@ xmlValidityError(xmlParserCtxtPtr ctxt,
 
     if(ctxt == NULL)
         return;
 
     if ((ctxt->disableSAX != 0) && (ctxt->instate == XML_PARSER_EOF))
         return;
-	ctxt->errNo = error;
-	if ((ctxt->sax != NULL) && (ctxt->sax->initialized == XML_SAX2_MAGIC))
-	    schannel = ctxt->sax->serror;
+    ctxt->errNo = error;
+    if ((ctxt->sax != NULL) && (ctxt->sax->initialized == XML_SAX2_MAGIC))
+        schannel = ctxt->sax->serror;
     __xmlRaiseError(schannel,
                     ctxt->vctxt.error, ctxt->vctxt.userData,
                     ctxt, NULL, XML_FROM_DTD, error,
                     XML_ERR_ERROR, NULL, 0, (const char *) str1,
 		    (const char *) str2, NULL, 0, 0,
 		    msg, (const char *) str1, (const char *) str2);
-	ctxt->valid = 0;
+    ctxt->valid = 0;
 }
 
 /**
  * xmlFatalErrMsgInt:
  * @ctxt:  an XML parser context
  * @error:  the error number
Index: src/shared/libxml/tree.c
===================================================================
--- src/shared/libxml/tree.c	(revision 2076)
+++ src/shared/libxml/tree.c	(revision 2077)
@@ -4422,14 +4422,14 @@ xmlGetNodePath(xmlNodePtr node)
 		    occur++;
                 tmp = tmp->prev;
             }
             if (occur == 0) {
                 tmp = cur->next;
                 while (tmp != NULL && occur == 0) {
-		  if (tmp->type == XML_COMMENT_NODE)
-		    occur++;
+                   if (tmp->type == XML_COMMENT_NODE)
+                       occur++;
                     tmp = tmp->next;
                 }
                 if (occur != 0)
                     occur = 1;
             } else
                 occur++;
@@ -9388,16 +9388,16 @@ leave_node:
 	    * Process parent --> next;
 	    */
 	    cur = cur->parent;
 	    goto leave_node;
 	} else {
 	    /* This is for attributes only. */
-        if (clone != NULL)
-	    clone = clone->parent;
-        if (clone != NULL)
-	    parentClone = clone->parent;
+            if (clone != NULL)
+               clone = clone->parent;
+            if (clone != NULL)
+               parentClone = clone->parent;
 	    /*
 	    * Process parent-element --> children.
 	    */
 	    cur = cur->parent;
 	    goto into_content;
 	}
Index: src/appl/diag/infix.c
===================================================================
--- src/appl/diag/infix.c	(revision 2076)
+++ src/appl/diag/infix.c	(revision 2077)
@@ -136,15 +136,17 @@ static void infix_doop(infix_data_t *id,
     switch (op) {
     case OP_BNOT:    v = ~v;                break;
     case OP_UNEG:    v = 0 - v;            break;
     case OP_CNOT:    v = ! v;            break;
     case OP_MUL:    v = infix_pop(id) * v;        break;
     case OP_DIV:    if (v == 0) { id->err = 1; }
-                else { v = infix_pop(id) / v; }  break;
+                    else { v = infix_pop(id) / v; }
+                    break;
     case OP_MOD:    if (v == 0) { id->err = 1; }
-                else { v = infix_pop(id) % v; }  break;
+                    else { v = infix_pop(id) % v; }
+                    break;
     case OP_ADD:    v = infix_pop(id) + v;        break;
     case OP_SUB:    v = infix_pop(id) - v;        break;
     case OP_LSH:    v = infix_pop(id) << v;        break;
     case OP_RSH:    v = infix_pop(id) >> v;        break;
     case OP_BAND:    v = infix_pop(id) & v;        break;
     case OP_BXOR:    v = infix_pop(id) ^ v;        break;
