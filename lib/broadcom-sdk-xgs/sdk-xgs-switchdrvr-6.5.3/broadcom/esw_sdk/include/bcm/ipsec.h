/*
 * $Id: $
 * 
 * $Copyright: Copyright 2016 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_IPSEC_H__
#define __BCM_IPSEC_H__

#include <bcm/types.h>

typedef struct bcm_ipsec_config_s {
    uint32 num_of_ipsec_channels; 
    uint32 num_of_bfd_channels; 
} bcm_ipsec_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* configure the IPSEC feature. */
extern int bcm_ipsec_config_set(
    int unit, 
    bcm_ipsec_config_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef struct bcm_ipsec_tunnel_info_s {
    uint32 context_id;          /* VRF ID */
    bcm_ip_addr_t local_ip;     /* Local tunnel endpoint; IPV4 or IPV6 */
    bcm_ip_addr_t remote_ip;    /* Remote tunnel endpoint; IPV4 or IPV6 */
} bcm_ipsec_tunnel_info_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* This API will be used to add an IPSEC Tunnel from BRCM data plane. */
extern int bcm_ipsec_tunnel_add(
    int unit, 
    uint32 flags, 
    uint32 *tunnel_id, 
    bcm_ipsec_tunnel_info_t tunnel_info);

/* This API will be used to delete an IPSEC Tunnel from BRCM data plane. */
extern int bcm_ipsec_tunnel_delete(
    int unit, 
    uint32 flags, 
    uint32 tunnel_id);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef enum bcm_ipsec_algo_type_e {
    bcmAES128 = 0, 
    bcmAES192 = 1, 
    bcmAES256 = 2 
} bcm_ipsec_algo_type_t;

typedef enum bcm_ipsec_auth_type_e {
    bcmSHA1 = 0, 
    bcmSHA224 = 1, 
    bcmSHA256 = 2, 
    bcmAES = 3 
} bcm_ipsec_auth_type_t;

typedef enum bcm_ipsec_direction_e {
    bcmENCRYPTION = 0, 
    bcmDECRYPTION = 1 
} bcm_ipsec_direction_t;

typedef struct bcm_ipsec_sa_info_s {
    uint32 initial_seq_num; 
    uint32 mtu; 
    uint8 fragmentation_enable; 
    bcm_ip_addr_t dest_addr;            /* IPV4 or IPV6 */
    bcm_ip_addr_t src_addr;             /* IPV4 or IPV6 */
    bcm_ipsec_algo_type_t auth_algo; 
    bcm_ipsec_auth_type_t encrypt_algo; 
    uint16 auth_key_length; 
    uint16 enc_key_length; 
    uint16 aes_enc_key_length; 
    uint8 encap_mode; 
    bcm_ipsec_direction_t sa_direction; 
} bcm_ipsec_sa_info_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * This API will be used to add an IPSEC SA (In SA or Out SA) to BRCM
 * data plane and to associate the SA to the IPSEC program in PRGE.
 */
extern int bcm_ipsec_sa_create(
    int unit, 
    uint32 flags, 
    uint32 *spi_id, 
    bcm_ipsec_sa_info_t *sa);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_IPSEC_MAX_ENCR_KEY_LEN  256        

#define BCM_IPSEC_MAX_AUTH_KEY_LEN  256        

typedef struct bcm_ipsec_sa_keys_s {
    uint8 enc_key[BCM_IPSEC_MAX_ENCR_KEY_LEN]; 
    uint8 auth_key[BCM_IPSEC_MAX_AUTH_KEY_LEN]; 
} bcm_ipsec_sa_keys_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* This API will be used to update keys for the IPSEC SA. */
extern int bcm_ipsec_sa_update_key(
    int unit, 
    uint32 flags, 
    uint32 spi_id, 
    bcm_ipsec_sa_keys_t *sa);

/* This API will be used to delete an IPSEC SA from BRCM data plane. */
extern int bcm_ipsec_sa_delete(
    int unit, 
    uint32 flags, 
    uint32 spi_id);

/* This API will be map the sa to policy. */
extern int bcm_ipsec_sa_to_tunnel_map_set(
    int unit, 
    uint32 tunnel_id, 
    uint32 spi_id);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_IPSEC_H__ */
