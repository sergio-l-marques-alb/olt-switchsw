#
# $Id: dnx.soc,v 1.90 Broadcom SDK $
#
# $Copyright: (c) 2016 Broadcom.
# Broadcom Proprietary and Confidential. All rights reserved.$
#

debug info
debug appl rcload warn
debug appl symtab warn
debug bcm rx,tx,link,attach warn
debug soc tests warn
debug soc rx,phy,schan,reg,socmem,dma,mem,miim,mii,intr,counter,ddr warn
debug soc common err
debug sys verinet warn
debug soc physim warn
debug socdnx DbalDnx warn
debug socdnx DiagDbalDnx warn
debug socdnx DbalAccessDnx warn

#
# For DBAL trace export
#
if $?dbal_severity_override \
       'debug socdnx DbalDnx $dbal_severity_override '



if $?BCM88690_A0 \
   'local JERTWO 1'

#
# For Jericho-2:
# This will have to change when we have bcm88690_board.soc
#
if $?JERTWO \
    'rcload bcm88680_board.soc'


debug appl shell =
set RCError=on

set RCError=off
rcload combo28_dram.soc
set RCError=on

#Set fabric connect mode as FE for multi FAP system
if $?diag_chassis " \
   config add fabric_connect_mode.BCM8869X=FE"

##set default nof devices for chassis system
#if chassis system then default number of devices is 2 (unless stated otherwise)
if $?diag_chassis " \
  local nof_devices 2" \
else "\
  local nof_devices 1"
if !$?appl_param_nof_devices " \
  config add appl_param_nof_devices.BCM8869X=$nof_devices"

# Set modid:
# If diag_chassis is enabled (two line cards), and 'slot' is defined (slot is defined only when
# working without a management card - set modid to be 'slot'
# Otherwise (single line card, or management card), set modid to be 0 for unit 0, and 1 for unit != 0
if $?diag_chassis && $?slot "\
  local modid $slot" \
else "\
  local modid $unit"
expr $modid+0 == 1; if $? "local modid 2"

if !$?appl_param_module_id " \
  config add appl_param_module_id.BCM8869X=$modid"

#Counters unavailable in cmodel
if $?cmodel " \
  config add counter_engine_sampling_interval.BCM8869X=0;"

INIT_DNX

#
#Load a unique Jer2 configuration file.
# {
#

# Prevent printing of application socmem, or else a lot of spam will be printed.
debug appl socmem -

#Load the config file.
if $?BCM88690_A0 \
   'rcload db/jericho_2/arr/arr_config.soc'

#Load the config file of context-enablers and context-selections
if $?BCM88690_A0 \
   'rcload db/jericho_2/context/context.soc'

#Restore shell command print to its previous level (should be info).
debug appl socmem info
#
# }
#


#LED support section start
#Program of LED0
local ledcode_0 '02 05 67 2D 02 01 67 2D 02 11 67 2D 02 09 67 2D\
 02 15 67 2D 02 0D 67 2D 86 E0 3A 06 28 32 00 32\
 01 B7 97 75 3E 16 E0 CA 06 70 3E 77 3A 67 33 75\
 3A 77 1C 12 A0 F8 15 1A 00 57 32 0E 87 57 32 0F\
 87 57' #sdk88670.hex

#Program of LED1
local ledcode_1 '02 1D 67 2D 02 2D 67 2D 02 05 67 2D 02 0D 67 2D\
 02 09 67 2D 02 01 67 2D 86 E0 3A 06 28 32 00 32\
 01 B7 97 75 3E 16 E0 CA 06 70 3E 77 3A 67 33 75\
 3A 77 1C 12 A0 F8 15 1A 00 57 32 0E 87 57 32 0F\
 87 57' #sdk88670.hex


#Program of LED2
local ledcode_2 '02 01 67 2D 02 09 67 2D 02 0D 67 2D 02 05 67 2D\
 02 2D 67 2D 02 1D 67 2D 86 E0 3A 06 28 32 00 32\
 01 B7 97 75 3E 16 E0 CA 06 70 3E 77 3A 67 33 75\
 3A 77 1C 12 A0 F8 15 1A 00 57 32 0E 87 57 32 0F\
 87 57' #sdk88670.hex

# Download LED code into LED processors and enable (if applicable).
if $?feature_led_proc && !$?simulator \
    "led 0 prog $ledcode_0; \
     led 1 prog $ledcode_1; \
     led 2 prog $ledcode_2; \
     led auto on; \
     led 0 start; \
     led 1 start; \
     led 2 start"


echo "dnx.soc: Done............................."


