/** \file src/soc/dnx/pemladrv/pemladrv_meminfo_init.h
 *
 * sw state functions definitions
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
/* *INDENT-OFF* */
#ifndef _PEMLADRV_MEMINFO_INIT_H_
#define _PEMLADRV_MEMINFO_INIT_H_

#include "pemladrv_logical_access.h"
/*
 * The following function read (and parse) data-bases memory definition.
 * This memory definition is one of the PEM-compiler outputs.
 *
 * This function MUST be called prior to any db access.
 */


#define START_COMMENT              "/*"
#define END_COMMENT                "*/"
#define COMMENT_MARK_SIZE          2


/**********************************************
 *         Database initial information
 **********************************************/



#define KEYWORD_DB                                             "DB"
#define KEYWORD_DB_SIZE                                        sizeof("DB") - 1
#define KEYWORD_KEY                                            "KEY"
#define KEYWORD_KEY_SIZE                                       sizeof("KEY") - 1
#define KEYWORD_RESULT                                         "RES"
#define KEYWORD_RESULT_SIZE                                    sizeof("RES") - 1
#define KEYWORD_PEM_VER                                        "VER"
#define KEYWORD_PEM_VER_SIZE                                    sizeof("VER") - 1
#define KEYWORD_VIRTUAL_REGISTER_MAPPING                       "REGISTER_MAPPING"
#define KEYWORD_REGISTER_INFO_SIZE                             sizeof("REGISTER_MAPPING") - 1
#define KEYWORD_VIRTUAL_REGISTER_NOF_FIELDS                    "REGISTER_FIELDS"
#define KEYWORD_VIRTUAL_REGISTER_NOF_FIELDS_SIZE               sizeof("REGISTER_FIELDS") - 1
#define KEYWORD_VIRTUAL_REGISTER_FIELD_NOF_MAPPINGS            "REGISTER_FIELD_MAPPINGS"
#define KEYWORD_VIRTUAL_REGISTER_FIELD_NOF_MAPPINGS_SIZE       sizeof("REGISTER_FIELD_MAPPINGS") - 1
#define KEYWORD_PEM_APPLET_REG                                 "APPLET_REG_INFO"
#define KEYWORD_PEM_APPLET_REG_SIZE                            sizeof(KEYWORD_PEM_APPLET_REG) - 1
#define KEYWORD_PEM_APPLET_MEM                                 "APPLET_MEM_INFO"
#define KEYWORD_PEM_APPLET_MEM_SIZE                            sizeof(KEYWORD_PEM_APPLET_MEM) - 1
#define KEYWORD_GENERAL_INFO_FOR_APPLET                        "GENERAL_INFO_FOR_APPLET"
#define KEYWORD_GENERAL_INFO_FOR_APPLET_SIZE                   sizeof(KEYWORD_GENERAL_INFO_FOR_APPLET) - 1
#define KEYWORD_MEMINFO_FOR_APPLET                             "MEMINFO_FOR_APPLET"
#define KEYWORD_MEMINFO_FOR_APPLET_SIZE                        sizeof(KEYWORD_MEMINFO_FOR_APPLET) - 1
#define KEYWORD_DB_DIRECT_INFO                                 "DIRECT_MAPPING"
#define KEYWORD_DB_DIRECT_INFO_SIZE                            sizeof("DIRECT_MAPPING") - 1
#define KEYWORD_DB_TCAM_KEY_INFO                               "TCAM_KEY_MAPPING"
#define KEYWORD_DB_TCAM_KEY_INFO_SIZE                          sizeof("TCAM_KEY_MAPPING") - 1
#define KEYWORD_DB_TCAM_RESULT_INFO                            "TCAM_RESULT_MAPPING"
#define KEYWORD_DB_TCAM_RESULT_INFO_SIZE                       sizeof("TCAM_RESULT_MAPPING") - 1
#define KEYWORD_DB_EXACT_MATCH_KEY_INFO                        "EM_KEY_MAPPING"
#define KEYWORD_DB_EXACT_MATCH_KEY_INFO_SIZE                   sizeof("EM_KEY_MAPPING") - 1
#define KEYWORD_DB_EXACT_MATCH_RESULT_INFO                     "EM_RESULT_MAPPING"
#define KEYWORD_DB_EXACT_MATCH_RESULT_INFO_SIZE                sizeof("EM_RESULT_MAPPING") - 1
#define KEYWORD_DB_LONGEST_PERFIX_MATCH_KEY_INFO               "LPM_KEY_MAPPING"
#define KEYWORD_DB_LONGEST_PERFIX_MATCH_KEY_INFO_SIZE          sizeof("LPM_KEY_MAPPING") - 1
#define KEYWORD_REG_AND_DBS_NUM_INFO                           "NOF_DBS"
#define KEYWORD_REG_AND_DBS_NUM_INFO_SIZE                      sizeof("NOF_DBS") - 1
#define KEYWORD_DB_LONGEST_PERFIX_MATCH_RESULT_INFO            "LPM_RESULT_MAPPING"
#define KEYWORD_DB_LONGEST_PERFIX_MATCH_RESULT_INFO_SIZE       sizeof("LPM_RESULT_MAPPING") - 1


#define KEYWORD_DB_SINGLE_CHUNCK_INFO                          "SINGLE_CHUNK_INFO"
#define KEYWORD_DB_SINGLE_CHUNCK_INFO_SIZE                     sizeof("SINGLE_CHUNK_INFO") - 1
#define KEYWORD_DB_DIRECT                                      "DIRECT"
#define KEYWORD_DB_DIRECT_SIZE                                 sizeof("DIRECT") - 1
#define KEYWORD_DB_TCAM                                        "TCAM"
#define KEYWORD_DB_TCAM_SIZE                                   sizeof("TCAM") - 1
#define KEYWORD_DB_EM                                          "EM"
#define KEYWORD_DB_EM_SIZE                                     sizeof("EM") - 1
#define KEYWORD_DB_LPM                                         "LPM"
#define KEYWORD_DB_LPM_SIZE                                    sizeof("LPM") - 1

#define DBS_WRITE_COMMNADS_FILE                                "lab_commands.txt"
#define KEYWORD_DB_DIRECT_WRITE_COMMAND                        "DB_DIRECT_WRITE_COMMAND"
#define KEYWORD_DB_DIRECT_WRITE_COMMAND_SIZE                    sizeof(KEYWORD_DB_DIRECT_WRITE_COMMAND) - 1
#define KEYWORD_DB_TCAM_WRITE_COMMAND                          "DB_TCAM_WRITE_COMMAND"
#define KEYWORD_DB_TCAM_WRITE_COMMAND_SIZE                      sizeof(KEYWORD_DB_TCAM_WRITE_COMMAND) - 1
#define KEYWORD_DB_LPM_WRITE_COMMAND                            "DB_LPM_WRITE_COMMAND"
#define KEYWORD_DB_LPM_WRITE_COMMAND_SIZE                       sizeof(KEYWORD_DB_LPM_WRITE_COMMAND) - 1
#define KEYWORD_DB_EM_WRITE_COMMAND                             "DB_EM_WRITE_COMMAND"
#define KEYWORD_DB_EM_WRITE_COMMAND_SIZE                        sizeof(KEYWORD_DB_EM_WRITE_COMMAND) - 1
#define KEYWORD_REG_WRITE_COMMAND                               "REG_WRITE_COMMAND"
#define KEYWORD_REG_WRITE_COMMAND_SIZE                          sizeof(KEYWORD_REG_WRITE_COMMAND) - 1
#define KEYWORD_PROGRAM_SELECT_CONFIG_WRITE_COMMAND             "PROGRAM_SELECT_CONFIG_WRITE_COMMAND"
#define KEYWORD_PROGRAM_SELECT_CONFIG_WRITE_COMMAND_SIZE        sizeof(KEYWORD_PROGRAM_SELECT_CONFIG_WRITE_COMMAND) - 1


#define KEYWORD_UCODE_DUMP_NOF_VIRTUAL_WIRES                     "NOF_VIRTUAL_WIRES"
#define KEYWORD_UCODE_DUMP_NOF_VIRTUAL_WIRES_SIZE                sizeof(KEYWORD_UCODE_DUMP_NOF_VIRTUAL_WIRES)-1
#define KEYWORD_UCODE_VIRTUAL_WIRE_MAPPING_INFO                  "VIRTUAL_WIRE_INFO"
#define KEYWORD_UCODE_VIRTUAL_WIRE_MAPPING_INFO_SIZE             sizeof(KEYWORD_UCODE_VIRTUAL_WIRE_MAPPING_INFO)-1
#define KEYWORD_UCODE_DUMP_SINGLE_VIRTUAL_WIRE_MAPPING           "VIRTUAL_WIRE_MAPPING"
#define KEYWORD_UCODE_DUMP_SINGLE_VIRTUAL_WIRE_MAPPING_SIZE      sizeof(KEYWORD_UCODE_DUMP_SINGLE_VIRTUAL_WIRE_MAPPING)-1





/* DB_DIRECT_MAPPING_INFO - line format
 *
 * KEYWORD_DB_DIRECT_INFO
 * <virtual-mem-name for debug>
 * <db_id>
 * <field-name for debug>
 * <field_id>
 * <result_field_width_for_debug>
 * <mem-dimensions for debug>     (3 tokens 'rows' 'x' 'columns)
 * <vc_st_row:vc_end_row>         (3 tokens 'vc_st_col' ':' 'vc_end_row')
 * <vc_st_col:vc_end_col>         (3 tokens 'vc_st_col' ':' 'vc_end_col')
 * {MAP|CAM}                      pe-type keyword
 * <pe_matrix_col>
 * <phy_mem_index>
 * <pem_mem_name>
 * <pem_mem_address>              ( "40'hxxxx" where the first byte contains the block-id and the 32 LSb are the address )
 * <mem_st_row>
 * <mem_st_col>
 * <mem_width_in_bits>
 * <implementation_index>
 */
#define   PEM_NOF_DB_DIRECT_INFO_TOKEN  24

/* KEYWORD_DB - line format
 *
 * DB
 * <db_type>
 * <Database-name>
 * <db_id>
 * <nof_entries>
 * <key-width>
 * <result-width>
 *<key_field_num>
 * <result_field_num>
 *
 */
#define   PEM_NOF_DB_TOKEN   9


/* KEYWORD_KEY_INFO - line format
 *
 * KEY_INFO
 * <Database-name for debug>
 * <db_type>
 * <db id>
 * <key-field-name for debug>
 * <key-field-id>
 * <lsb_bit>
 * <msb_bit>
 */
#define   PEM_NOF_KEY_FIELD_TOKEN  8


/* KEYWORD_RESULT_INFO - line format
 *
 * RESULT_FIELD
 * <Database-name for debug>
 * <db_type>
 * <db id>
 * <result-field-name for debug>
 * <result-field-id>
 * <lsb_bit>
 * <msb_bit>
 */
#define   PEM_NOF_RESULT_FIELD_TOKEN  8


/* KEYWORD_VIRTUAL_REGISTER_MAPPING - line format
 *
 * VIRTUAL_REGISTER_MAPPING
 * <Register-name for debug>
 * <reg-id>
 * <mapping_id>
 * <register field name for debug>
 * <register-field-id>
 * <register-total-width>
 * <register-field-msb:register-field-lsb>   (3 tokens 'register-field-msb' ':' 'register-field-lsb')
 * <pem-type>
 * <pe-matrix-col>
 * <program-mem-index>
 * <program-mem-name>
 * <pem_mem_addr>                             ( "40'hxxxx" where the first byte contains the block-id and the 32 LSb are the address )
 * <prog_mem_line>
 * <pem_mem_offset>
 * <pem_mem_width_in_bits>
 */
#define   PEM_NOF_REGISTER_INFO_TOKEN  17


/* KEYWORD_VIRTUAL_REGISTER_NOF_FIELDS - line format
 *
 * KEYWORD_VIRTUAL_REGISTER_NOF_FIELDS
 * <reg_id>
 * <nof_fields>
 */
#define   VIRTUAL_REGISTER_NOF_FIELDS_TOKEN   5


/* KEYWORD_VIRTUAL_REGISTER_FIELD_NOF_MAPPINGS - line format
 *
 * KEYWORD_VIRTUAL_REGISTER_FIELD_NOF_MAPPINGS
 * <reg_id>
 * <field_id>
 * <nof_mappings>
 */
#define   VIRTUAL_REGISTER_FIELD_NOF_MAPPINGS_TOKEN  6


/* DB_TCAM_KEY_MAPPING_INFO   - line format
 *
 * DB_TCAM_KEY_MAPPING_INFO
 * <virtual-mem-name for debug>
 * <db_id>
 * <key-name for debug>
 * <virt_KEY_mem-total-dimensions for debug>  (3 tokens 'rows' 'x' 'columns')
 * <vc_end_row:vc_st_row>                     (3 tokens 'end-rows' ':' 'start-rows')
 * <vc_valid_col>
 * <vc_mask_end_col: vc_mask_st_col >         (3 tokens 'mask-end-col' ':' 'mask-st-col')
 * <vc_key_end_col: vc_key_st_col >           (3 tokens 'key-end-col' ':' 'key-st-col')
 * <pe_type>
 * <pe_matrix_col>
 * <phy_mem_ndx>
 * <pem_mem_name>
 * <pem_mem_addr>                             ( "40'hxxxx" where the first byte contains the block-id and the 32 LSb are the address )
 * <mem_st_row>
 * <mem_valid_col>
 * <mem_mask_st_col>
 * <mem_key_st_col>
 * <mem_width_in_bits>
 * <implementation_index>
 */
#define   PEM_NOF_DB_CAM_KEY_MAPPING_INFO_TOKEN  28

/* DB_TCAM_RESULT_MAPPING_INFO    - line format
 *
 * DB_TCAM_RESULT_MAPPING_INFO
 * <virtual-mem-name for debug>
 * <db_id>
 * <result-name for debug>
 * <virt_RESULT_mem-dimensions for debug>      (3 tokens 'rows' 'x' 'columns')
 * <vc_end_row:vc_st_row>                      (3 tokens 'end-rows' ':' 'st-rows')
 * <vc_end_col: vc_st_col >                    (3 tokens 'end-columns' ':' 'st-columns')
 * <pe_type>
 * <pe_matrix_col>
 * <phy_total_width_in_bits>
 * <phy_mem_ndx>
 * <pem_mem_name>
 * <pem_mem_addr>                             ( "40'hxxxx" where the first byte contains the block-id and the 32 LSb are the address )
 * <mem_st_row>
 * <mem_st_col>
 * <implementation_index>
 *
 */
#define   PEM_NOF_DB_CAM_RESULT_MAPPING_INFO_TOKEN  22


/* DB_SINGLE_VIRT_DB_MAP_INFO               -line format
*
* DB_SINGLE_VIRT_DB_MAP_INFO
* <db_id>
* <nof_chunk_rows>
* <nof_chunk_cols>
* <nof_implementations>
*
*/
#define   DB_SINGLE_CHUNCK_INFO_DIRECT_TOKEN 5


/* DB_SINGLE_VIRT_DB_MAP                    -line format
*
* DB_SINGLE_VIRT_DB_MAP_INFO
* <db_id>
* <nof_key_chunk_rows>
* <nof_key_chunk_cols>
* <nof_result_chunk_rows>
* <nof_result_chunk_cols>
* <nof_implementations>S
*
*/
#define   DB_SINGLE_CHUNCK_INFO_MAP_TOKEN 7

/* VIRTUAL_WIRE_INFO_NOF_FIELDS_TOKEN - line format
*
* KEYWORD_VIRTUAL_REGISTER_NOF_FIELDS
* <virtual-wire id>
* <virtual-wire name>
* <virtual-wire-width>
* <virtual-wire nof_mappings>
* <virtual-wire start-stage>
* <virtual-wire end-stage>
*/
#define   VIRTUAL_WIRE_INFO_NOF_FIELDS_TOKEN   7

/* VIRTUAL_WIRE_MAPPING_NOF_FIELDS_TOKEN - line format
*
* KEYWORD_UCODE_VIRTUAL_WIRE_MAPPING_INFO
* <virtual - wire id>
* <mapping -id>
* <virtual - wire - msb>
* <virtual - wire - lsb>
* <physical - wire - name>
* <physical - wire - lsb>
*/
#define   VIRTUAL_WIRE_MAPPING_NOF_FIELDS_TOKEN   7










/**********************************************
 *         uCode definition
 **********************************************/

#define KEYWORD_UCODE_PEM_START                   "PEM_START"
#define KEYWORD_UCODE_PEM_START_SIZE              sizeof("PEM_START") - 1
#define KEYWORD_UCODE_PEM_END                     "PEM_END"
#define KEYWORD_UCODE_PEM_END_SIZE                sizeof("PEM_END") - 1
#define KEYWORD_UCODE_REG_WRITE_INFO              "REG_WRITE"
#define KEYWORD_UCODE_REG_WRITE_INFO_SIZE         sizeof("REG_WRITE") - 1
#define KEYWORD_UCODE_REG_LINE_END                "REG_LINE_END"
#define KEYWORD_UCODE_REG_LINE_END_SIZE           sizeof("REG_LINE_END") - 1
#define KEYWORD_UCODE_FIELD_INFO                  "FIELD"
#define KEYWORD_UCODE_FIELD_INFO_SIZE             sizeof("FIELD") - 1
#define KEYWORD_UCODE_MEM_WRITE_INFO              "MEM_WRITE"
#define KEYWORD_UCODE_MEM_WRITE_INFO_SIZE         sizeof("MEM_WRITE") - 1
#define KEYWORD_UCODE_MEM_LINE_END                "MEM_LINE_END"
#define KEYWORD_UCODE_MEM_LINE_END_SIZE           sizeof("MEM_LINE_END") - 1

/* PEM_START - line format
 *
 * PEM_START
 * <pe_type_name>
 * <pem_row>
 * <pem_col>
 */

#define PEM_NOF_PEM_START_TOKEN 4

/* PEM_END - line format
 *
 * PEM_END
 */
#define PEM_NOF_PEM_END_TOKEN 1

/* REG_WRITE - line format
 *
 * REG_WRITE
 * <reg_name>
 * <reg_addr>                     ( "40'hxxxx" where the first byte contains the block-id and the 32 LSb are the address )
 * <reg_val>                      ( "n'hxxxxxxx" format )
 */

#define PEM_NOF_REG_WRITE_TOKEN 6  /*changed from 9*/

/* REG_LINE_END - line format
 *
 * REG_LINE_END
 */
#define PEM_NOF_REG_LINE_END_TOKEN 1

/* FIELD - line format
 *
 * FIELD
 * <field_id_0>
 * <field_name_0>
 * <field_val_0>             ( "n'hxxxxxxx" format )
 */
#define PEM_NOF_FIELD_TOKEN 4

/* MEM_WRITE - line format
 *
 * MEM_WRITE
 * <pem_mem_name>
 * <pem_mem_addr>                     ( "40'hxxxx" where the first byte contains the block-id and the 32 LSb are the address )
 * <prog_mem_address>
 * <all_line_bits_val>                ( "n'hxxxxxxx" format )
 */
#define PEM_NOF_MEM_WRITE_TOKEN 7

/* MEM_LINE_END - line format
 *
 * MEM_LINE_END
 */
#define PEM_NOF_MEM_LINE_END_TOKEN 1



#define phy_mem_len 6    /* 7 = pe_type (1 bit, MAP or CAM) + pe_index (4 bits, max of 16 PEs) + sram_index (2 bits, max of 4 SRAM) */
#define phy_mem2mem_index(phy_mem)  (phy_mem & (0xFFFFFFFF >> (32 - phy_mem_len)))
#define build_mem_index(db_type, pe_index, sram_index) (db_type | (pe_index << 1) | (sram_index << 5))

/*Initialize api_info struct*/
void init_api_info(const int unit);
/*Free all prior alocated memory in api_info*/
void free_api_info(const int unit);
/*free all direct container*/
void free_db_direct_container(const int unit);
/*free all tcam container*/
void free_db_tcam_container(const int unit);
/*free all lpmcontainer*/
void free_db_lpm_container(const int unit);
/*free all em container*/
void free_db_em_container(const int unit);
/*free all vw container*/
void free_vw_container(const int unit);
/*free all reg container*/
void free_reg_container(const int unit);
/*free all version info*/
void free_version_info(const int unit);
/*free logical direct info*/
void free_logical_direct_info(LogicalDirectInfo* logical_direct_info);
/*free logical tcam info*/
void free_logical_tcam_info(LogicalTcamInfo* logical_tcam_info);
/*free logical lpm info*/
void free_logical_lpm_info(LogicalLpmInfo* logical_lpm_info);
/*free logical em info*/
void free_logical_em_info(LogicalEmInfo* logical_em_info);
/*free vw mapping info*/
void free_vw_mapping_info(VirtualWireInfo* vw_info_arr);
/*free logical reg info*/
void free_logical_reg_info(LogicalRegInfo* logical_reg_info);
/*free reg field info*/
void free_reg_field_info(LogicalRegFieldInfo* reg_field_info);
/*free chunk mapper matrix*/
void free_chunk_mapper_matrix(const int nof_implamentations, LogicalDbChunkMapperMatrix* chunk_mapper_matrix);
/*free lpm cache*/
void free_lpm_cache(LpmDbCache* lpm_cache);
/*free em cache*/
void free_em_cache(EmDbCache* em_cache);

/*parse and write memory entry*/
void dnx_pemladrv_mem_line_write(int unit, const char* line);
/*parse and write register*/
void dnx_pemladrv_reg_line_write(int unit, const char* line);

/* Inserts info of Db by ID*/
void dnx_pemladrv_db_info_insert(const int unit, const char* line);
/* Insert msb/lsb mapping*/
void dnx_pemladrv_db_field_info_insert(const int unit, const char* line);
/* Insert msb/lsb mapping to logical_key_fields_location*/
void db_key_field_info_insert(const int unit, const char* db_type, const int db_id, const int field_id, const int lsb_bit, const int msb_bit);
/* Insert msb/lsb mapping to logical_result_fields_location*/
void db_result_field_info_insert(const int unit, const char* db_type, const int db_id, const int field_id, const int lsb_bit, const int msb_bit);
/* Updates is_mapped per each field in key or result. Writes 1 if field was mapped to physical and 0 else.*/
void is_field_mapped_update(const int num_of_fields, FieldBitRange* field_bit_range_arr , DbChunkMapper*const chunk_info_ptr);

/* Insert one chunk into LogicalDirectMapper*/
void dnx_pemladrv_direct_result_chunk_insert(const int unit, const char* line);
/* Insert one CAM based key chunk into api_info.db_tcam_container.db_tcam_info_arr*/
void dnx_pemladrv_tcam_key_chunk_insert(const int unit, const char* line);
/* Insert one CAM based result chunk into api_info.db_tcam_container.db_tcam_info_arr*/
void dnx_pemladrv_tcam_result_chunk_insert(const int unit, const char* line);
/*Insert one key chunk of EM database into api_info.db_em_container.db_em_info_arr*/
void dnx_pemladrv_em_key_chunk_insert(const int unit, const char* line);
/*Insert one key chunk of EM database into api_info.db_em_container.db_em_info_arr*/
void dnx_pemladrv_em_result_chunk_insert(const int unit, const char* line);
/*Insert one key chunk of EM database into api_info.db_lpm_container.db_lpm_info_arr*/
void dnx_pemladrv_lpm_key_chunk_insert(const int unit, const char* line);
/*Insert one key chunk of EM database into api_info.db_lpm_container.db_lpm_info_arr*/
void dnx_pemladrv_lpm_result_chunk_insert(const int unit, const char* line);

/*Insert register*/
void dnx_pemladrv_register_insert(const int unit, const char* line);

/* Build result chunk of DIRECT db. Modifies chunk_info_ptr and returns db_id*/
unsigned int build_direct_chunk_from_ucode(const int unit, const char* line, DbChunkMapper* chunk_info_ptr);
/* Build key chunk of CAM based db. Modifies chunk_info_ptr and returns db_id*/
unsigned int build_cam_key_chunk_from_ucode(const int unit, const char* line, DbChunkMapper* chunk_info_ptr);
/* Build result chunk of CAM based db. Modifies chunk_info_ptr and returns db_id*/
unsigned int build_cam_result_chunk_from_ucode(const int unit, const char* line, DbChunkMapper* chunk_info_ptr);

/* Insert the chunk into right place in the list*/
void db_chunk_insert(LogicalDbChunkMapperMatrix* logical_db_mapper, DbChunkMapper*const chunk_info_ptr);

/* Gets size of each DB from line and initialize it*/
void dnx_pemladrv_dnx_init_all_db_arr_by_size(const int unit, const char* line);
/* Init DbChunkMapper for a single Db_id*/
void dnx_pemladrv_init_logical_db_chunk_mapper(const int unit, const char* line);
/* Init LogicalDbChunkMapperMatrix mattrix*/
void init_logical_db_mapper_matrix(LogicalDbChunkMapperMatrix** logical_db_mapper_matrix_ptr, const int nof_chunk_rows, const int nof_chunk_cols, const int nof_implementations);
/* Realloc LogicalDbChunkMapperMatrix mattrix*/
void realloc_logical_db_mapper_matrix(LogicalDbChunkMapperMatrix** logical_db_mapper_matrix_ptr, const int nof_chunk_cols_to_add, const int nof_implementations);
/* Init msb/lsb bits mattrix*/
void init_logical_fields_location(FieldBitRange** field_bit_range_arr, const int nof_fields);
/* Init Logical_Reg_Field_Info*/
void dnx_pemladrv_init_reg_field_info(const int unit, const char* line);
/* Init Reg_Field_Mapper*/
void dnx_pemladrv_init_reg_field_mapper(const int unit, const char* line);
/* Init all chuck compiler and device versions*/
void init_pem_version_control(const int unit, const char* line);
/* Init pem applet regs and mems*/
void init_pem_applet_reg(const int unit, const char* line);
void init_pem_applet_mem(const int unit, const char* line);
void init_meminfo_array_for_applets(const int unit, const char* line);
void insert_meminfo_to_array_for_applets(const int unit, const char* line);
/* Init EM cache members*/
void init_em_cache(int unit, EmDbCache* em_cache_info);
/* Init LPM cache members*/
void init_lpm_cache(int unit, LpmDbCache* lpm_cache_info);

/*init virtual wire mapping to physical wire*/
void dnx_pemladrv_vw_mapping_insert(const int unit, const char* line);
/*init a single virtual wire info*/
void dnx_pemladrv_init_vw_info(const int unit, const char* line);
/*allocate virtual wires info array*/
void dnx_pemladrv_init_vw_arr_by_size(const int unit, const char* line);


/* Init DBs content from write_commands file*/
int init_dbs_content_and_program_selection_tcams_from_write_commands_file(
    int unit,
    const char* write_commands_file_name);

unsigned int hexstr2addr(char *str, unsigned int *block_id);

int parse_meminfo_definition_file(int unit, int restore_after_reset, uint32 use_file, const char *rel_file_path, const char *file_name);



#endif /* _PEMLADRV_MEMINFO_INIT_H_ */
/* *INDENT-ON* */
