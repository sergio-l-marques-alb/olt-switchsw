/** \file dnx_data_internal_mpls.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_MPLS_H_
/*{*/
#define _DNX_DATA_INTERNAL_MPLS_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_mpls.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_mpls_submodule_general,

    /**
     * Must be last one!
     */
    _dnx_data_mpls_submodule_nof
} dnx_data_mpls_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_mpls_general_feature_get(
    int unit,
    dnx_data_mpls_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_mpls_general_define_nof_mpls_termination_profiles,
    dnx_data_mpls_general_define_nof_mpls_push_profiles,
    dnx_data_mpls_general_define_nof_bits_mpls_label,
    dnx_data_mpls_general_define_log_nof_mpls_range_elements,
    dnx_data_mpls_general_define_nof_mpls_range_elements,
    dnx_data_mpls_general_define_mpls_special_label_encap_handling,
    dnx_data_mpls_general_define_mpls_control_word_supported,
    dnx_data_mpls_general_define_mpls_second_stage_parser_handling,
    dnx_data_mpls_general_define_mpls_control_word_flag_bits_lsb,
    dnx_data_mpls_general_define_fhei_mps_type_nof_bits,
    dnx_data_mpls_general_define_mpls_speculative_learning_handling,
    dnx_data_mpls_general_define_gach_with_flow_label_supported,
    dnx_data_mpls_general_define_max_nof_mpls_term_stages,
    dnx_data_mpls_general_define_nof_php_gport_lif,

    /**
     * Must be last one!
     */
    _dnx_data_mpls_general_define_nof
} dnx_data_mpls_general_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_mpls_termination_profiles
 * Module - 'mpls', Submodule - 'general', data - 'nof_mpls_termination_profiles'
 * Number of MPLS Termination Profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mpls_termination_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_nof_mpls_termination_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_mpls_push_profiles
 * Module - 'mpls', Submodule - 'general', data - 'nof_mpls_push_profiles'
 * JR mode Number of MPLS Push Profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mpls_push_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_nof_mpls_push_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_bits_mpls_label
 * Module - 'mpls', Submodule - 'general', data - 'nof_bits_mpls_label'
 * Specifies number of bits used to represent an MPLS label
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_mpls_label - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_nof_bits_mpls_label_get(
    int unit);

/**
 * \brief returns define data of log_nof_mpls_range_elements
 * Module - 'mpls', Submodule - 'general', data - 'log_nof_mpls_range_elements'
 * Specifies number of bits used to represent number of available elements on any of mpls-range tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     log_nof_mpls_range_elements - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_log_nof_mpls_range_elements_get(
    int unit);

/**
 * \brief returns define data of nof_mpls_range_elements
 * Module - 'mpls', Submodule - 'general', data - 'nof_mpls_range_elements'
 * Specifies number of available elements on any of mpls-range tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mpls_range_elements - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_nof_mpls_range_elements_get(
    int unit);

/**
 * \brief returns define data of mpls_special_label_encap_handling
 * Module - 'mpls', Submodule - 'general', data - 'mpls_special_label_encap_handling'
 * Indicates whether special labels should be handled separatly
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_special_label_encap_handling - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_mpls_special_label_encap_handling_get(
    int unit);

/**
 * \brief returns define data of mpls_control_word_supported
 * Module - 'mpls', Submodule - 'general', data - 'mpls_control_word_supported'
 * Indicates whether control word non-zero values supported.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_control_word_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_mpls_control_word_supported_get(
    int unit);

/**
 * \brief returns define data of mpls_second_stage_parser_handling
 * Module - 'mpls', Submodule - 'general', data - 'mpls_second_stage_parser_handling'
 * Indicates whether 2nd stage parser supported properly.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_second_stage_parser_handling - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_mpls_second_stage_parser_handling_get(
    int unit);

/**
 * \brief returns define data of mpls_control_word_flag_bits_lsb
 * Module - 'mpls', Submodule - 'general', data - 'mpls_control_word_flag_bits_lsb'
 * Indicates the control word flag bits location.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_control_word_flag_bits_lsb - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_mpls_control_word_flag_bits_lsb_get(
    int unit);

/**
 * \brief returns define data of fhei_mps_type_nof_bits
 * Module - 'mpls', Submodule - 'general', data - 'fhei_mps_type_nof_bits'
 * Indicates the number of mpls fhei type bits.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_mps_type_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_fhei_mps_type_nof_bits_get(
    int unit);

/**
 * \brief returns define data of mpls_speculative_learning_handling
 * Module - 'mpls', Submodule - 'general', data - 'mpls_speculative_learning_handling'
 * Indicates whether learning informatino from PWE is handled correctly,  in respect to speculative parsing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_speculative_learning_handling - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_mpls_speculative_learning_handling_get(
    int unit);

/**
 * \brief returns define data of gach_with_flow_label_supported
 * Module - 'mpls', Submodule - 'general', data - 'gach_with_flow_label_supported'
 * Indicates whether G-ACH with Flow label simultaneously supported.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gach_with_flow_label_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_gach_with_flow_label_supported_get(
    int unit);

/**
 * \brief returns define data of max_nof_mpls_term_stages
 * Module - 'mpls', Submodule - 'general', data - 'max_nof_mpls_term_stages'
 * Maximal number of possible stages for MPLS termination
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_mpls_term_stages - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_max_nof_mpls_term_stages_get(
    int unit);

/**
 * \brief returns numeric data of nof_php_gport_lif
 * Module - 'mpls', Submodule - 'general', data - 'nof_php_gport_lif'
 * Indicates the LIF number used for PHP, JR1 mode only.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_php_gport_lif - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mpls_general_nof_php_gport_lif_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_mpls_general_table_fwd1_trap_destination,

    /**
     * Must be last one!
     */
    _dnx_data_mpls_general_table_nof
} dnx_data_mpls_general_table_e;

/* Get Data */
/**
 * \brief get table fwd1_trap_destination entry 
 * 
 * \param [in] unit - unit #
 * \param [in] index - 
 * 
 * \return
 *     fwd1_trap_destination - returns the relevant entry values grouped in struct - see dnx_data_mpls_general_fwd1_trap_destination_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mpls_general_fwd1_trap_destination_t * dnx_data_mpls_general_fwd1_trap_destination_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'mpls', Submodule - 'general', table - 'fwd1_trap_destination'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mpls_general_fwd1_trap_destination_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)fwd1_trap_destination info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fwd1_trap_destination - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mpls_general_fwd1_trap_destination_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mpls_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_MPLS_H_*/
/* *INDENT-ON* */
