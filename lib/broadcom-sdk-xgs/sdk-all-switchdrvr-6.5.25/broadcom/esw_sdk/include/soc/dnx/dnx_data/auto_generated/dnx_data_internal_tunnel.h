/** \file dnx_data_internal_tunnel.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_TUNNEL_H_
/*{*/
#define _DNX_DATA_INTERNAL_TUNNEL_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_tunnel.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_tunnel_submodule_udp,
    dnx_data_tunnel_submodule_tunnel_type,
    dnx_data_tunnel_submodule_tcam_table,

    /**
     * Must be last one!
     */
    _dnx_data_tunnel_submodule_nof
} dnx_data_tunnel_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE UDP:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_tunnel_udp_feature_get(
    int unit,
    dnx_data_tunnel_udp_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_tunnel_udp_define_nof_udp_ports_profiles,
    dnx_data_tunnel_udp_define_first_udp_ports_profile,

    /**
     * Must be last one!
     */
    _dnx_data_tunnel_udp_define_nof
} dnx_data_tunnel_udp_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_udp_ports_profiles
 * Module - 'tunnel', Submodule - 'udp', data - 'nof_udp_ports_profiles'
 * Number of udp ports profiles in the additional header profiles table.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_udp_ports_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tunnel_udp_nof_udp_ports_profiles_get(
    int unit);

/**
 * \brief returns define data of first_udp_ports_profile
 * Module - 'tunnel', Submodule - 'udp', data - 'first_udp_ports_profile'
 * Lowest udp ports profiles in the additional header profiles table that's not the default profile.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     first_udp_ports_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tunnel_udp_first_udp_ports_profile_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_tunnel_udp_table_nof
} dnx_data_tunnel_udp_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE TUNNEL_TYPE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_tunnel_tunnel_type_feature_get(
    int unit,
    dnx_data_tunnel_tunnel_type_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_tunnel_tunnel_type_define_udp_tunnel_type,

    /**
     * Must be last one!
     */
    _dnx_data_tunnel_tunnel_type_define_nof
} dnx_data_tunnel_tunnel_type_define_e;

/* Get Data */
/**
 * \brief returns define data of udp_tunnel_type
 * Module - 'tunnel', Submodule - 'tunnel_type', data - 'udp_tunnel_type'
 * udp tunnel type is used by udp p2p/mp tunnel term tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     udp_tunnel_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tunnel_tunnel_type_udp_tunnel_type_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_tunnel_tunnel_type_table_nof
} dnx_data_tunnel_tunnel_type_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE TCAM_TABLE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_tunnel_tcam_table_feature_get(
    int unit,
    dnx_data_tunnel_tcam_table_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_tunnel_tcam_table_define_has_raw_udp_tunnel_type_is_2nd_pass_key_fields,

    /**
     * Must be last one!
     */
    _dnx_data_tunnel_tcam_table_define_nof
} dnx_data_tunnel_tcam_table_define_e;

/* Get Data */
/**
 * \brief returns define data of has_raw_udp_tunnel_type_is_2nd_pass_key_fields
 * Module - 'tunnel', Submodule - 'tcam_table', data - 'has_raw_udp_tunnel_type_is_2nd_pass_key_fields'
 * indiate if the tcam table has is_raw, udp_tunnel_type and 2nd_pass key fields
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     has_raw_udp_tunnel_type_is_2nd_pass_key_fields - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tunnel_tcam_table_has_raw_udp_tunnel_type_is_2nd_pass_key_fields_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_tunnel_tcam_table_table_nof
} dnx_data_tunnel_tcam_table_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_tunnel_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_TUNNEL_H_*/
/* *INDENT-ON* */
