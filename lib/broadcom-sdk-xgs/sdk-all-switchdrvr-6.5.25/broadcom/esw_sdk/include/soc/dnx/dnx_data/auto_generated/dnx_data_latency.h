/** \file dnx_data_latency.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_LATENCY_H_
/*{*/
#define _DNX_DATA_LATENCY_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_latency.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_latency
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_latency_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - FEATURES:
 * latency stat id definitions
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * should user add a flag to the latency profile create API in order to set valid bit and enable latency to be measured per pp flow profile
     */
    dnx_data_latency_features_valid_flow_profile_flag,
    /**
     * can end to end aqm profile be created 
     */
    dnx_data_latency_features_valid_end_to_end_aqm_profile,
    /**
     * is the probibalistic mark cni mechanism supported for ingress
     */
    dnx_data_latency_features_probabilistic_legacy_mechanism_support,
    /**
     * is the probibalistic mark cni mechanism supported for ingress
     */
    dnx_data_latency_features_egress_ecn_probabilistic_mechanism_support,
    /**
     * is the probibalistic mark cni mechanism supported for egress
     */
    dnx_data_latency_features_ingress_ecn_probabilistic_mechanism_support,
    /**
     * is the probibalistic drop mechanism supported
     */
    dnx_data_latency_features_drop_probabilistic_mechanism_support,
    /**
     * is the probibalistic mark cni/drop mechanism supported fore coupled mode
     */
    dnx_data_latency_features_coupled_mode_support,
    /**
     * indicate if latency can be measured correctly
     */
    dnx_data_latency_features_latency_measurement_support,
    /**
     * indicate if track expansion is valid
     */
    dnx_data_latency_features_valid_track_expansion,
    /**
     * indicate if egress latency track is supported
     */
    dnx_data_latency_features_egress_latency_track_support,
    /**
     * Is latency based admission supported
     */
    dnx_data_latency_features_ingress_based_admission,

    /**
     * Must be last one!
     */
    _dnx_data_latency_features_feature_nof
} dnx_data_latency_features_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_latency_features_feature_get_f) (
    int unit,
    dnx_data_latency_features_feature_e feature);

/**
 * \brief returns define data of latency_bins
 * Module - 'latency', Submodule - 'features', data - 'latency_bins'
 * number of latency bins ranges
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     latency_bins - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_latency_features_latency_bins_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_LATENCY - FEATURES:
 * {
 */
/**
 * \brief Interface for latency features data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_latency_features_feature_get_f feature_get;
    /**
     * returns define data of latency_bins
     */
    dnx_data_latency_features_latency_bins_get_f latency_bins_get;
} dnx_data_if_latency_features_t;

/*
 * }
 */

/*
 * SUBMODULE  - PROFILE:
 * latency profile definitions
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_latency_profile_feature_nof
} dnx_data_latency_profile_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_latency_profile_feature_get_f) (
    int unit,
    dnx_data_latency_profile_feature_e feature);

/**
 * \brief returns define data of egress_nof
 * Module - 'latency', Submodule - 'profile', data - 'egress_nof'
 * Number of egress (end-to-end) latency profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_latency_profile_egress_nof_get_f) (
    int unit);

/**
 * \brief returns define data of ingress_nof
 * Module - 'latency', Submodule - 'profile', data - 'ingress_nof'
 * Number of ingress latency profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ingress_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_latency_profile_ingress_nof_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_LATENCY - PROFILE:
 * {
 */
/**
 * \brief Interface for latency profile data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_latency_profile_feature_get_f feature_get;
    /**
     * returns define data of egress_nof
     */
    dnx_data_latency_profile_egress_nof_get_f egress_nof_get;
    /**
     * returns define data of ingress_nof
     */
    dnx_data_latency_profile_ingress_nof_get_f ingress_nof_get;
} dnx_data_if_latency_profile_t;

/*
 * }
 */

/*
 * SUBMODULE  - BASED_ADMISSION:
 * End-to-end Active Queue Managenemt definitions
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Is there cgm eco to be enabled in order to use voq-profiles(32) instead of being limited to only 16 flow-profiles
     */
    dnx_data_latency_based_admission_cgm_extended_profiles_enable,

    /**
     * Must be last one!
     */
    _dnx_data_latency_based_admission_feature_nof
} dnx_data_latency_based_admission_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_latency_based_admission_feature_get_f) (
    int unit,
    dnx_data_latency_based_admission_feature_e feature);

/**
 * \brief returns define data of reject_flow_profile_value
 * Module - 'latency', Submodule - 'based_admission', data - 'reject_flow_profile_value'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     reject_flow_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_latency_based_admission_reject_flow_profile_value_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_extended_profiles_enable_value
 * Module - 'latency', Submodule - 'based_admission', data - 'cgm_extended_profiles_enable_value'
 * If there is cgm eco to be enabled for latency based admissions profiles - set this value to the spare register
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_extended_profiles_enable_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_latency_based_admission_cgm_extended_profiles_enable_value_get_f) (
    int unit);

/**
 * \brief returns define data of max_supported_profile
 * Module - 'latency', Submodule - 'based_admission', data - 'max_supported_profile'
 * For latency based admission not all latency profiles are supported to be used
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_supported_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_latency_based_admission_max_supported_profile_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_LATENCY - BASED_ADMISSION:
 * {
 */
/**
 * \brief Interface for latency based_admission data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_latency_based_admission_feature_get_f feature_get;
    /**
     * returns define data of reject_flow_profile_value
     */
    dnx_data_latency_based_admission_reject_flow_profile_value_get_f reject_flow_profile_value_get;
    /**
     * returns define data of cgm_extended_profiles_enable_value
     */
    dnx_data_latency_based_admission_cgm_extended_profiles_enable_value_get_f cgm_extended_profiles_enable_value_get;
    /**
     * returns define data of max_supported_profile
     */
    dnx_data_latency_based_admission_max_supported_profile_get_f max_supported_profile_get;
} dnx_data_if_latency_based_admission_t;

/*
 * }
 */

/*
 * SUBMODULE  - INGRESS:
 * Ingress Latency definitions
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_latency_ingress_feature_nof
} dnx_data_latency_ingress_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_latency_ingress_feature_get_f) (
    int unit,
    dnx_data_latency_ingress_feature_e feature);

/**
 * \brief returns define data of jr_mode_latency_timestamp_left_shift
 * Module - 'latency', Submodule - 'ingress', data - 'jr_mode_latency_timestamp_left_shift'
 * The time value taken from the OAM TS header is shifted left by this amount of bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     jr_mode_latency_timestamp_left_shift - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_latency_ingress_jr_mode_latency_timestamp_left_shift_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_LATENCY - INGRESS:
 * {
 */
/**
 * \brief Interface for latency ingress data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_latency_ingress_feature_get_f feature_get;
    /**
     * returns define data of jr_mode_latency_timestamp_left_shift
     */
    dnx_data_latency_ingress_jr_mode_latency_timestamp_left_shift_get_f jr_mode_latency_timestamp_left_shift_get;
} dnx_data_if_latency_ingress_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_LATENCY:
 * {
 */
/**
 * \brief Interface for latency data
 */
typedef struct
{
    /**
     * Interface for latency features data
     */
    dnx_data_if_latency_features_t features;
    /**
     * Interface for latency profile data
     */
    dnx_data_if_latency_profile_t profile;
    /**
     * Interface for latency based_admission data
     */
    dnx_data_if_latency_based_admission_t based_admission;
    /**
     * Interface for latency ingress data
     */
    dnx_data_if_latency_ingress_t ingress;
} dnx_data_if_latency_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_latency_t dnx_data_latency;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_LATENCY_H_*/
/* *INDENT-ON* */
