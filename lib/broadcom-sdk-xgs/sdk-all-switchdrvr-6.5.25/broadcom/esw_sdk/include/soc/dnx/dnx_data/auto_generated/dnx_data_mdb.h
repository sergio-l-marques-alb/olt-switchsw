/** \file dnx_data_mdb.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MDB_H_
/*{*/
#define _DNX_DATA_MDB_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dbal/dbal.h>
#include <soc/dnx/dbal/auto_generated/dbal_defines_tables.h>
#include <soc/dnx/mdb_global.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_mdb.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_mdb
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_mdb_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GLOBAL:
 * 
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_mdb_global_hitbit_support,
    dnx_data_mdb_global_capacity_support,
    dnx_data_mdb_global_init_enable,
    dnx_data_mdb_global_block_id_fixed_mdb_value,
    dnx_data_mdb_global_lpm_acl_enable,
    dnx_data_mdb_global_isem1a_support,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_global_feature_nof
} dnx_data_mdb_global_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_mdb_global_feature_get_f) (
    int unit,
    dnx_data_mdb_global_feature_e feature);

/**
 * \brief returns define data of utilization_api_nof_dbs
 * Module - 'mdb', Submodule - 'global', data - 'utilization_api_nof_dbs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     utilization_api_nof_dbs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_global_utilization_api_nof_dbs_get_f) (
    int unit);

/**
 * \brief returns numeric data of adapter_stub_enable
 * Module - 'mdb', Submodule - 'global', data - 'adapter_stub_enable'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     adapter_stub_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_global_adapter_stub_enable_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MDB - GLOBAL:
 * {
 */
/**
 * \brief Interface for mdb global data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_mdb_global_feature_get_f feature_get;
    /**
     * returns define data of utilization_api_nof_dbs
     */
    dnx_data_mdb_global_utilization_api_nof_dbs_get_f utilization_api_nof_dbs_get;
    /**
     * returns numeric data of adapter_stub_enable
     */
    dnx_data_mdb_global_adapter_stub_enable_get_f adapter_stub_enable_get;
} dnx_data_if_mdb_global_t;

/*
 * }
 */

/*
 * SUBMODULE  - DH:
 * 
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule dh table dh_info
 */
typedef struct
{
    uint32 table_macro_interface_mapping[DNX_DATA_MAX_MDB_DH_TOTAL_NOF_MACROES_PLUS_EM_OVF_OR_EEDB_BANK];
    uint32 cluster_if_offsets_values[DNX_DATA_MAX_MDB_DH_TOTAL_NOF_MACROES_PLUS_DATA_WIDTH];
    uint32 if_cluster_offsets_values[DNX_DATA_MAX_MDB_DH_TOTAL_NOF_MACROES_PLUS_DATA_WIDTH];
    uint32 macro_mapping[DNX_DATA_MAX_MDB_DH_TOTAL_NOF_MACROES_PLUS_DATA_WIDTH];
    uint32 dh_in_width;
    uint32 dh_out_width;
    uint32 two_ways_connectivity_bm;
} dnx_data_mdb_dh_dh_info_t;

/**
 * \brief Holds values of submodule dh table block_info
 */
typedef struct
{
    dbal_enum_value_field_mdb_block_types_e block_type;
    int block_index;
} dnx_data_mdb_dh_block_info_t;

/**
 * \brief Holds values of submodule dh table logical_macro_info
 */
typedef struct
{
    mdb_macro_types_e macro_type;
    int macro_index;
} dnx_data_mdb_dh_logical_macro_info_t;

/**
 * \brief Holds values of submodule dh table macro_type_info
 */
typedef struct
{
    uint8 nof_macros;
    uint8 nof_clusters;
    uint32 nof_rows;
    uint8 nof_address_bits;
    uint8 global_start_index;
    char *xml_str;
    char *name;
    uint8 hitbit_support;
} dnx_data_mdb_dh_macro_type_info_t;

/**
 * \brief Holds values of submodule dh table mdb_75_macro_halved
 */
typedef struct
{
    uint8 macro_halved;
} dnx_data_mdb_dh_mdb_75_macro_halved_t;

/**
 * \brief Holds values of submodule dh table entry_banks_info
 */
typedef struct
{
    soc_mem_t entry_bank;
    soc_reg_t overflow_reg;
    soc_mem_t abk_bank_a;
    soc_mem_t abk_bank_b;
} dnx_data_mdb_dh_entry_banks_info_t;

/**
 * \brief Holds values of submodule dh table mdb_1_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_1_field_size;
    uint32 mdb_item_2_array_size;
    uint32 mdb_item_3_field_size;
} dnx_data_mdb_dh_mdb_1_info_t;

/**
 * \brief Holds values of submodule dh table mdb_2_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_1_field_size;
} dnx_data_mdb_dh_mdb_2_info_t;

/**
 * \brief Holds values of submodule dh table mdb_3_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_0_array_size;
} dnx_data_mdb_dh_mdb_3_info_t;

/**
 * \brief Holds values of submodule dh table mdb_fec_macro_types_info
 */
typedef struct
{
    mdb_macro_types_e macro_types[DNX_DATA_MAX_MDB_DH_NOF_FEC_MACRO_TYPES];
} dnx_data_mdb_dh_mdb_fec_macro_types_info_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_mdb_dh_macro_A_half_nof_clusters_enable,
    dnx_data_mdb_dh_macro_A_75_nof_clusters_enable,
    dnx_data_mdb_dh_bpu_setup_extended_support,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_dh_feature_nof
} dnx_data_mdb_dh_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_mdb_dh_feature_get_f) (
    int unit,
    dnx_data_mdb_dh_feature_e feature);

/**
 * \brief returns define data of total_nof_macroes
 * Module - 'mdb', Submodule - 'dh', data - 'total_nof_macroes'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_macroes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_total_nof_macroes_get_f) (
    int unit);

/**
 * \brief returns define data of total_nof_macroes_plus_em_ovf_or_eedb_bank
 * Module - 'mdb', Submodule - 'dh', data - 'total_nof_macroes_plus_em_ovf_or_eedb_bank'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_macroes_plus_em_ovf_or_eedb_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_total_nof_macroes_plus_em_ovf_or_eedb_bank_get_f) (
    int unit);

/**
 * \brief returns define data of total_nof_macroes_plus_data_width
 * Module - 'mdb', Submodule - 'dh', data - 'total_nof_macroes_plus_data_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_macroes_plus_data_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_total_nof_macroes_plus_data_width_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_cluster_interfaces
 * Module - 'mdb', Submodule - 'dh', data - 'max_nof_cluster_interfaces'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_cluster_interfaces - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_max_nof_cluster_interfaces_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_clusters
 * Module - 'mdb', Submodule - 'dh', data - 'max_nof_clusters'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_clusters - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_max_nof_clusters_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_db_clusters
 * Module - 'mdb', Submodule - 'dh', data - 'max_nof_db_clusters'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_db_clusters - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_max_nof_db_clusters_get_f) (
    int unit);

/**
 * \brief returns define data of nof_bucket_clusters
 * Module - 'mdb', Submodule - 'dh', data - 'nof_bucket_clusters'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bucket_clusters - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_bucket_clusters_get_f) (
    int unit);

/**
 * \brief returns define data of nof_buckets_in_macro
 * Module - 'mdb', Submodule - 'dh', data - 'nof_buckets_in_macro'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_buckets_in_macro - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_buckets_in_macro_get_f) (
    int unit);

/**
 * \brief returns define data of nof_pair_clusters
 * Module - 'mdb', Submodule - 'dh', data - 'nof_pair_clusters'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pair_clusters - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_pair_clusters_get_f) (
    int unit);

/**
 * \brief returns define data of nof_data_rows_per_hitbit_row
 * Module - 'mdb', Submodule - 'dh', data - 'nof_data_rows_per_hitbit_row'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_data_rows_per_hitbit_row - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_data_rows_per_hitbit_row_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ddha_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_ddha_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ddha_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_ddha_blocks_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ddhb_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_ddhb_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ddhb_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_ddhb_blocks_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dhc_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_dhc_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dhc_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_dhc_blocks_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ddhc_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_ddhc_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ddhc_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_ddhc_blocks_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ddhx_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_ddhx_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ddhx_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_ddhx_blocks_get_f) (
    int unit);

/**
 * \brief returns define data of cluster_row_width_bits
 * Module - 'mdb', Submodule - 'dh', data - 'cluster_row_width_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cluster_row_width_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_cluster_row_width_bits_get_f) (
    int unit);

/**
 * \brief returns define data of cluster_row_width_uint32
 * Module - 'mdb', Submodule - 'dh', data - 'cluster_row_width_uint32'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cluster_row_width_uint32 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_cluster_row_width_uint32_get_f) (
    int unit);

/**
 * \brief returns define data of data_out_granularity
 * Module - 'mdb', Submodule - 'dh', data - 'data_out_granularity'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_out_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_data_out_granularity_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_bb_connected
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_bb_connected'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_bb_connected - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_bb_connected_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_size_120_240_120
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_120_240_120'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_120_240_120 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_size_120_240_120_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_size_480_odd
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_480_odd'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_480_odd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_size_480_odd_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_size_480
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_480'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_480 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_size_480_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_size_360_120
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_360_120'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_360_120 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_size_360_120_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_size_120_360
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_120_360'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_120_360 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_size_120_360_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_size_240_240
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_240_240'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_240_240 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_size_240_240_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_size_120_120_240
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_120_120_240'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_120_120_240 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_size_120_120_240_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_size_240_120_120
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_240_120_120'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_240_120_120 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_size_240_120_120_get_f) (
    int unit);

/**
 * \brief returns define data of bpu_setup_size_120_120_120_120
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_120_120_120_120'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_120_120_120_120 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_bpu_setup_size_120_120_120_120_get_f) (
    int unit);

/**
 * \brief returns define data of ddha_dynamic_memory_access_dpc
 * Module - 'mdb', Submodule - 'dh', data - 'ddha_dynamic_memory_access_dpc'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ddha_dynamic_memory_access_dpc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_ddha_dynamic_memory_access_dpc_get_f) (
    int unit);

/**
 * \brief returns define data of nof_fec_macro_types
 * Module - 'mdb', Submodule - 'dh', data - 'nof_fec_macro_types'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fec_macro_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_dh_nof_fec_macro_types_get_f) (
    int unit);

/**
 * \brief get table dh_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     dh_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_dh_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_dh_info_t *(
    *dnx_data_mdb_dh_dh_info_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table block_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     block_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_block_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_block_info_t *(
    *dnx_data_mdb_dh_block_info_get_f) (
    int unit,
    int global_macro_index);

/**
 * \brief get table logical_macro_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     logical_macro_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_logical_macro_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_logical_macro_info_t *(
    *dnx_data_mdb_dh_logical_macro_info_get_f) (
    int unit,
    int global_macro_index);

/**
 * \brief get table macro_type_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] macro_type - 
 * 
 * \return
 *     macro_type_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_macro_type_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_macro_type_info_t *(
    *dnx_data_mdb_dh_macro_type_info_get_f) (
    int unit,
    int macro_type);

/**
 * \brief get table mdb_75_macro_halved entry 
 * 
 * \param [in] unit - unit #
 * \param [in] macro_index - 
 * 
 * \return
 *     mdb_75_macro_halved - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_75_macro_halved_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_mdb_75_macro_halved_t *(
    *dnx_data_mdb_dh_mdb_75_macro_halved_get_f) (
    int unit,
    int macro_index);

/**
 * \brief get table entry_banks_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     entry_banks_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_entry_banks_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_entry_banks_info_t *(
    *dnx_data_mdb_dh_entry_banks_info_get_f) (
    int unit,
    int global_macro_index);

/**
 * \brief get table mdb_1_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     mdb_1_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_1_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_mdb_1_info_t *(
    *dnx_data_mdb_dh_mdb_1_info_get_f) (
    int unit,
    int global_macro_index);

/**
 * \brief get table mdb_2_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     mdb_2_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_2_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_mdb_2_info_t *(
    *dnx_data_mdb_dh_mdb_2_info_get_f) (
    int unit,
    int global_macro_index);

/**
 * \brief get table mdb_3_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     mdb_3_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_3_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_mdb_3_info_t *(
    *dnx_data_mdb_dh_mdb_3_info_get_f) (
    int unit,
    int global_macro_index);

/**
 * \brief get table mdb_fec_macro_types_info entry 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_fec_macro_types_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_fec_macro_types_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_dh_mdb_fec_macro_types_info_t *(
    *dnx_data_mdb_dh_mdb_fec_macro_types_info_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MDB - DH:
 * {
 */
/**
 * \brief Interface for mdb dh data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_mdb_dh_feature_get_f feature_get;
    /**
     * returns define data of total_nof_macroes
     */
    dnx_data_mdb_dh_total_nof_macroes_get_f total_nof_macroes_get;
    /**
     * returns define data of total_nof_macroes_plus_em_ovf_or_eedb_bank
     */
    dnx_data_mdb_dh_total_nof_macroes_plus_em_ovf_or_eedb_bank_get_f total_nof_macroes_plus_em_ovf_or_eedb_bank_get;
    /**
     * returns define data of total_nof_macroes_plus_data_width
     */
    dnx_data_mdb_dh_total_nof_macroes_plus_data_width_get_f total_nof_macroes_plus_data_width_get;
    /**
     * returns define data of max_nof_cluster_interfaces
     */
    dnx_data_mdb_dh_max_nof_cluster_interfaces_get_f max_nof_cluster_interfaces_get;
    /**
     * returns define data of max_nof_clusters
     */
    dnx_data_mdb_dh_max_nof_clusters_get_f max_nof_clusters_get;
    /**
     * returns define data of max_nof_db_clusters
     */
    dnx_data_mdb_dh_max_nof_db_clusters_get_f max_nof_db_clusters_get;
    /**
     * returns define data of nof_bucket_clusters
     */
    dnx_data_mdb_dh_nof_bucket_clusters_get_f nof_bucket_clusters_get;
    /**
     * returns define data of nof_buckets_in_macro
     */
    dnx_data_mdb_dh_nof_buckets_in_macro_get_f nof_buckets_in_macro_get;
    /**
     * returns define data of nof_pair_clusters
     */
    dnx_data_mdb_dh_nof_pair_clusters_get_f nof_pair_clusters_get;
    /**
     * returns define data of nof_data_rows_per_hitbit_row
     */
    dnx_data_mdb_dh_nof_data_rows_per_hitbit_row_get_f nof_data_rows_per_hitbit_row_get;
    /**
     * returns define data of nof_ddha_blocks
     */
    dnx_data_mdb_dh_nof_ddha_blocks_get_f nof_ddha_blocks_get;
    /**
     * returns define data of nof_ddhb_blocks
     */
    dnx_data_mdb_dh_nof_ddhb_blocks_get_f nof_ddhb_blocks_get;
    /**
     * returns define data of nof_dhc_blocks
     */
    dnx_data_mdb_dh_nof_dhc_blocks_get_f nof_dhc_blocks_get;
    /**
     * returns define data of nof_ddhc_blocks
     */
    dnx_data_mdb_dh_nof_ddhc_blocks_get_f nof_ddhc_blocks_get;
    /**
     * returns define data of nof_ddhx_blocks
     */
    dnx_data_mdb_dh_nof_ddhx_blocks_get_f nof_ddhx_blocks_get;
    /**
     * returns define data of cluster_row_width_bits
     */
    dnx_data_mdb_dh_cluster_row_width_bits_get_f cluster_row_width_bits_get;
    /**
     * returns define data of cluster_row_width_uint32
     */
    dnx_data_mdb_dh_cluster_row_width_uint32_get_f cluster_row_width_uint32_get;
    /**
     * returns define data of data_out_granularity
     */
    dnx_data_mdb_dh_data_out_granularity_get_f data_out_granularity_get;
    /**
     * returns define data of bpu_setup_bb_connected
     */
    dnx_data_mdb_dh_bpu_setup_bb_connected_get_f bpu_setup_bb_connected_get;
    /**
     * returns define data of bpu_setup_size_120_240_120
     */
    dnx_data_mdb_dh_bpu_setup_size_120_240_120_get_f bpu_setup_size_120_240_120_get;
    /**
     * returns define data of bpu_setup_size_480_odd
     */
    dnx_data_mdb_dh_bpu_setup_size_480_odd_get_f bpu_setup_size_480_odd_get;
    /**
     * returns define data of bpu_setup_size_480
     */
    dnx_data_mdb_dh_bpu_setup_size_480_get_f bpu_setup_size_480_get;
    /**
     * returns define data of bpu_setup_size_360_120
     */
    dnx_data_mdb_dh_bpu_setup_size_360_120_get_f bpu_setup_size_360_120_get;
    /**
     * returns define data of bpu_setup_size_120_360
     */
    dnx_data_mdb_dh_bpu_setup_size_120_360_get_f bpu_setup_size_120_360_get;
    /**
     * returns define data of bpu_setup_size_240_240
     */
    dnx_data_mdb_dh_bpu_setup_size_240_240_get_f bpu_setup_size_240_240_get;
    /**
     * returns define data of bpu_setup_size_120_120_240
     */
    dnx_data_mdb_dh_bpu_setup_size_120_120_240_get_f bpu_setup_size_120_120_240_get;
    /**
     * returns define data of bpu_setup_size_240_120_120
     */
    dnx_data_mdb_dh_bpu_setup_size_240_120_120_get_f bpu_setup_size_240_120_120_get;
    /**
     * returns define data of bpu_setup_size_120_120_120_120
     */
    dnx_data_mdb_dh_bpu_setup_size_120_120_120_120_get_f bpu_setup_size_120_120_120_120_get;
    /**
     * returns define data of ddha_dynamic_memory_access_dpc
     */
    dnx_data_mdb_dh_ddha_dynamic_memory_access_dpc_get_f ddha_dynamic_memory_access_dpc_get;
    /**
     * returns define data of nof_fec_macro_types
     */
    dnx_data_mdb_dh_nof_fec_macro_types_get_f nof_fec_macro_types_get;
    /**
     * get table dh_info entry 
     */
    dnx_data_mdb_dh_dh_info_get_f dh_info_get;
    /**
     * get general info table about table (for example key size)dh_info info
     */
    dnxc_data_table_info_get_f dh_info_info_get;
    /**
     * get table block_info entry 
     */
    dnx_data_mdb_dh_block_info_get_f block_info_get;
    /**
     * get general info table about table (for example key size)block_info info
     */
    dnxc_data_table_info_get_f block_info_info_get;
    /**
     * get table logical_macro_info entry 
     */
    dnx_data_mdb_dh_logical_macro_info_get_f logical_macro_info_get;
    /**
     * get general info table about table (for example key size)logical_macro_info info
     */
    dnxc_data_table_info_get_f logical_macro_info_info_get;
    /**
     * get table macro_type_info entry 
     */
    dnx_data_mdb_dh_macro_type_info_get_f macro_type_info_get;
    /**
     * get general info table about table (for example key size)macro_type_info info
     */
    dnxc_data_table_info_get_f macro_type_info_info_get;
    /**
     * get table mdb_75_macro_halved entry 
     */
    dnx_data_mdb_dh_mdb_75_macro_halved_get_f mdb_75_macro_halved_get;
    /**
     * get general info table about table (for example key size)mdb_75_macro_halved info
     */
    dnxc_data_table_info_get_f mdb_75_macro_halved_info_get;
    /**
     * get table entry_banks_info entry 
     */
    dnx_data_mdb_dh_entry_banks_info_get_f entry_banks_info_get;
    /**
     * get general info table about table (for example key size)entry_banks_info info
     */
    dnxc_data_table_info_get_f entry_banks_info_info_get;
    /**
     * get table mdb_1_info entry 
     */
    dnx_data_mdb_dh_mdb_1_info_get_f mdb_1_info_get;
    /**
     * get general info table about table (for example key size)mdb_1_info info
     */
    dnxc_data_table_info_get_f mdb_1_info_info_get;
    /**
     * get table mdb_2_info entry 
     */
    dnx_data_mdb_dh_mdb_2_info_get_f mdb_2_info_get;
    /**
     * get general info table about table (for example key size)mdb_2_info info
     */
    dnxc_data_table_info_get_f mdb_2_info_info_get;
    /**
     * get table mdb_3_info entry 
     */
    dnx_data_mdb_dh_mdb_3_info_get_f mdb_3_info_get;
    /**
     * get general info table about table (for example key size)mdb_3_info info
     */
    dnxc_data_table_info_get_f mdb_3_info_info_get;
    /**
     * get table mdb_fec_macro_types_info entry 
     */
    dnx_data_mdb_dh_mdb_fec_macro_types_info_get_f mdb_fec_macro_types_info_get;
    /**
     * get general info table about table (for example key size)mdb_fec_macro_types_info info
     */
    dnxc_data_table_info_get_f mdb_fec_macro_types_info_info_get;
} dnx_data_if_mdb_dh_t;

/*
 * }
 */

/*
 * SUBMODULE  - PDBS:
 * 
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule pdbs table mdb_profile
 */
typedef struct
{
    char *profile;
} dnx_data_mdb_pdbs_mdb_profile_t;

/**
 * \brief Holds values of submodule pdbs table mdb_profiles_info
 */
typedef struct
{
    uint8 supported;
    char *name;
} dnx_data_mdb_pdbs_mdb_profiles_info_t;

/**
 * \brief Holds values of submodule pdbs table mdb_profile_kaps_cfg
 */
typedef struct
{
    uint32 val;
} dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_t;

/**
 * \brief Holds values of submodule pdbs table mdb_profile_table_str_mapping
 */
typedef struct
{
    uint8 valid;
    char *xml_name;
} dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_t;

/**
 * \brief Holds values of submodule pdbs table dbal_vmv_str_mapping
 */
typedef struct
{
    uint8 valid;
    char *xml_name;
    uint8 vmv_xml_chain;
} dnx_data_mdb_pdbs_dbal_vmv_str_mapping_t;

/**
 * \brief Holds values of submodule pdbs table mdb_pdb_info
 */
typedef struct
{
    dbal_physical_tables_e physical_to_logical;
    dbal_enum_value_field_mdb_db_type_e db_type;
    uint8 db_subtype;
    char *name;
    uint32 row_width;
    mdb_macro_types_e macro_granularity;
    dbal_enum_value_field_direct_payload_sizes_e direct_payload_type;
    dbal_enum_value_field_direct_payload_sizes_e direct_max_payload_type;
} dnx_data_mdb_pdbs_mdb_pdb_info_t;

/**
 * \brief Holds values of submodule pdbs table dbal_pdb_info
 */
typedef struct
{
    mdb_physical_table_e logical_to_physical;
    dbal_enum_value_field_mdb_db_type_e db_type;
    uint8 db_subtype;
    char *name;
    char *dbal_str;
    dbal_core_mode_e core_mode;
    uint32 row_width;
    uint32 max_key_size;
    uint32 max_payload_size;
} dnx_data_mdb_pdbs_dbal_pdb_info_t;

/**
 * \brief Holds values of submodule pdbs table mdb_adapter_mapping
 */
typedef struct
{
    uint8 mdb_type;
    uint8 memory_id;
    int capacity;
} dnx_data_mdb_pdbs_mdb_adapter_mapping_t;

/**
 * \brief Holds values of submodule pdbs table fec_physical_dbs_alloc_info
 */
typedef struct
{
    uint8 bank_alloc_resolution;
    mdb_macro_types_e base_macro_type;
} dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_t;

/**
 * \brief Holds values of submodule pdbs table mdb_51_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
} dnx_data_mdb_pdbs_mdb_51_info_t;

/**
 * \brief Holds values of submodule pdbs table mdb_53_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
} dnx_data_mdb_pdbs_mdb_53_info_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_mdb_pdbs_feature_nof
} dnx_data_mdb_pdbs_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_mdb_pdbs_feature_get_f) (
    int unit,
    dnx_data_mdb_pdbs_feature_e feature);

/**
 * \brief returns define data of max_nof_interface_dhs
 * Module - 'mdb', Submodule - 'pdbs', data - 'max_nof_interface_dhs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_interface_dhs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_max_nof_interface_dhs_get_f) (
    int unit);

/**
 * \brief returns define data of mesh_mode_support
 * Module - 'mdb', Submodule - 'pdbs', data - 'mesh_mode_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mesh_mode_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_mesh_mode_support_get_f) (
    int unit);

/**
 * \brief returns define data of max_key_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'max_key_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_key_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_max_key_size_get_f) (
    int unit);

/**
 * \brief returns define data of max_payload_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'max_payload_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_payload_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_max_payload_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_9_mdb_item_1_array_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_9_mdb_item_1_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_9_mdb_item_1_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_9_mdb_item_1_array_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_9_mdb_item_2_array_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_9_mdb_item_2_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_9_mdb_item_2_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_9_mdb_item_2_array_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_9_mdb_item_3_array_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_9_mdb_item_3_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_9_mdb_item_3_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_9_mdb_item_3_array_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_40_mdb_item_0_array_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_40_mdb_item_0_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_40_mdb_item_0_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_40_mdb_item_0_array_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_dynamic_memory_access_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_dynamic_memory_access_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_dynamic_memory_access_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_dynamic_memory_access_memory_access_field_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_mact_dynamic_memory_access_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_mact_dynamic_memory_access_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_mact_dynamic_memory_access_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_mact_dynamic_memory_access_memory_access_field_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size_get_f) (
    int unit);

/**
 * \brief returns define data of table_mdb_ddhb_dynamic_memory_access_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_ddhb_dynamic_memory_access_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_ddhb_dynamic_memory_access_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_table_mdb_ddhb_dynamic_memory_access_memory_access_field_size_get_f) (
    int unit);

/**
 * \brief returns define data of mdb_nof_profiles
 * Module - 'mdb', Submodule - 'pdbs', data - 'mdb_nof_profiles'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_mdb_nof_profiles_get_f) (
    int unit);

/**
 * \brief returns numeric data of adapter_mapping_crps_id
 * Module - 'mdb', Submodule - 'pdbs', data - 'adapter_mapping_crps_id'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     adapter_mapping_crps_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_pdbs_adapter_mapping_crps_id_get_f) (
    int unit);

/**
 * \brief get table mdb_profile entry 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_profile - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_profile_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_mdb_profile_t *(
    *dnx_data_mdb_pdbs_mdb_profile_get_f) (
    int unit);

/**
 * \brief get table mdb_profiles_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_profile_index - 
 * 
 * \return
 *     mdb_profiles_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_profiles_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_mdb_profiles_info_t *(
    *dnx_data_mdb_pdbs_mdb_profiles_info_get_f) (
    int unit,
    int mdb_profile_index);

/**
 * \brief get table mdb_profile_kaps_cfg entry 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_profile_kaps_cfg - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_t *(
    *dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_get_f) (
    int unit);

/**
 * \brief get table mdb_profile_table_str_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_profile_table_str_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_t *(
    *dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table dbal_vmv_str_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_table_id - 
 * 
 * \return
 *     dbal_vmv_str_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_dbal_vmv_str_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_dbal_vmv_str_mapping_t *(
    *dnx_data_mdb_pdbs_dbal_vmv_str_mapping_get_f) (
    int unit,
    int dbal_table_id);

/**
 * \brief get table mdb_pdb_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_pdb_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_pdb_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_mdb_pdb_info_t *(
    *dnx_data_mdb_pdbs_mdb_pdb_info_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table dbal_pdb_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     dbal_pdb_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_dbal_pdb_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_dbal_pdb_info_t *(
    *dnx_data_mdb_pdbs_dbal_pdb_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_adapter_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_adapter_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_adapter_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_mdb_adapter_mapping_t *(
    *dnx_data_mdb_pdbs_mdb_adapter_mapping_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table fec_physical_dbs_alloc_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] fec_physical_db - 
 * 
 * \return
 *     fec_physical_dbs_alloc_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_t *(
    *dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_get_f) (
    int unit,
    int fec_physical_db);

/**
 * \brief get table mdb_51_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_51_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_51_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_mdb_51_info_t *(
    *dnx_data_mdb_pdbs_mdb_51_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_53_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table - 
 * 
 * \return
 *     mdb_53_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_53_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_pdbs_mdb_53_info_t *(
    *dnx_data_mdb_pdbs_mdb_53_info_get_f) (
    int unit,
    int mdb_table);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MDB - PDBS:
 * {
 */
/**
 * \brief Interface for mdb pdbs data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_mdb_pdbs_feature_get_f feature_get;
    /**
     * returns define data of max_nof_interface_dhs
     */
    dnx_data_mdb_pdbs_max_nof_interface_dhs_get_f max_nof_interface_dhs_get;
    /**
     * returns define data of mesh_mode_support
     */
    dnx_data_mdb_pdbs_mesh_mode_support_get_f mesh_mode_support_get;
    /**
     * returns define data of max_key_size
     */
    dnx_data_mdb_pdbs_max_key_size_get_f max_key_size_get;
    /**
     * returns define data of max_payload_size
     */
    dnx_data_mdb_pdbs_max_payload_size_get_f max_payload_size_get;
    /**
     * returns define data of table_mdb_9_mdb_item_1_array_size
     */
    dnx_data_mdb_pdbs_table_mdb_9_mdb_item_1_array_size_get_f table_mdb_9_mdb_item_1_array_size_get;
    /**
     * returns define data of table_mdb_9_mdb_item_2_array_size
     */
    dnx_data_mdb_pdbs_table_mdb_9_mdb_item_2_array_size_get_f table_mdb_9_mdb_item_2_array_size_get;
    /**
     * returns define data of table_mdb_9_mdb_item_3_array_size
     */
    dnx_data_mdb_pdbs_table_mdb_9_mdb_item_3_array_size_get_f table_mdb_9_mdb_item_3_array_size_get;
    /**
     * returns define data of table_mdb_40_mdb_item_0_array_size
     */
    dnx_data_mdb_pdbs_table_mdb_40_mdb_item_0_array_size_get_f table_mdb_40_mdb_item_0_array_size_get;
    /**
     * returns define data of table_mdb_dynamic_memory_access_memory_access_field_size
     */
    dnx_data_mdb_pdbs_table_mdb_dynamic_memory_access_memory_access_field_size_get_f table_mdb_dynamic_memory_access_memory_access_field_size_get;
    /**
     * returns define data of table_mdb_mact_dynamic_memory_access_memory_access_field_size
     */
    dnx_data_mdb_pdbs_table_mdb_mact_dynamic_memory_access_memory_access_field_size_get_f table_mdb_mact_dynamic_memory_access_memory_access_field_size_get;
    /**
     * returns define data of table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size
     */
    dnx_data_mdb_pdbs_table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size_get_f table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size_get;
    /**
     * returns define data of table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size
     */
    dnx_data_mdb_pdbs_table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size_get_f table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size_get;
    /**
     * returns define data of table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size
     */
    dnx_data_mdb_pdbs_table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size_get_f table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size_get;
    /**
     * returns define data of table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size
     */
    dnx_data_mdb_pdbs_table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size_get_f table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size_get;
    /**
     * returns define data of table_mdb_ddhb_dynamic_memory_access_memory_access_field_size
     */
    dnx_data_mdb_pdbs_table_mdb_ddhb_dynamic_memory_access_memory_access_field_size_get_f table_mdb_ddhb_dynamic_memory_access_memory_access_field_size_get;
    /**
     * returns define data of mdb_nof_profiles
     */
    dnx_data_mdb_pdbs_mdb_nof_profiles_get_f mdb_nof_profiles_get;
    /**
     * returns numeric data of adapter_mapping_crps_id
     */
    dnx_data_mdb_pdbs_adapter_mapping_crps_id_get_f adapter_mapping_crps_id_get;
    /**
     * get table mdb_profile entry 
     */
    dnx_data_mdb_pdbs_mdb_profile_get_f mdb_profile_get;
    /**
     * get general info table about table (for example key size)mdb_profile info
     */
    dnxc_data_table_info_get_f mdb_profile_info_get;
    /**
     * get table mdb_profiles_info entry 
     */
    dnx_data_mdb_pdbs_mdb_profiles_info_get_f mdb_profiles_info_get;
    /**
     * get general info table about table (for example key size)mdb_profiles_info info
     */
    dnxc_data_table_info_get_f mdb_profiles_info_info_get;
    /**
     * get table mdb_profile_kaps_cfg entry 
     */
    dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_get_f mdb_profile_kaps_cfg_get;
    /**
     * get general info table about table (for example key size)mdb_profile_kaps_cfg info
     */
    dnxc_data_table_info_get_f mdb_profile_kaps_cfg_info_get;
    /**
     * get table mdb_profile_table_str_mapping entry 
     */
    dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_get_f mdb_profile_table_str_mapping_get;
    /**
     * get general info table about table (for example key size)mdb_profile_table_str_mapping info
     */
    dnxc_data_table_info_get_f mdb_profile_table_str_mapping_info_get;
    /**
     * get table dbal_vmv_str_mapping entry 
     */
    dnx_data_mdb_pdbs_dbal_vmv_str_mapping_get_f dbal_vmv_str_mapping_get;
    /**
     * get general info table about table (for example key size)dbal_vmv_str_mapping info
     */
    dnxc_data_table_info_get_f dbal_vmv_str_mapping_info_get;
    /**
     * get table mdb_pdb_info entry 
     */
    dnx_data_mdb_pdbs_mdb_pdb_info_get_f mdb_pdb_info_get;
    /**
     * get general info table about table (for example key size)mdb_pdb_info info
     */
    dnxc_data_table_info_get_f mdb_pdb_info_info_get;
    /**
     * get table dbal_pdb_info entry 
     */
    dnx_data_mdb_pdbs_dbal_pdb_info_get_f dbal_pdb_info_get;
    /**
     * get general info table about table (for example key size)dbal_pdb_info info
     */
    dnxc_data_table_info_get_f dbal_pdb_info_info_get;
    /**
     * get table mdb_adapter_mapping entry 
     */
    dnx_data_mdb_pdbs_mdb_adapter_mapping_get_f mdb_adapter_mapping_get;
    /**
     * get general info table about table (for example key size)mdb_adapter_mapping info
     */
    dnxc_data_table_info_get_f mdb_adapter_mapping_info_get;
    /**
     * get table fec_physical_dbs_alloc_info entry 
     */
    dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_get_f fec_physical_dbs_alloc_info_get;
    /**
     * get general info table about table (for example key size)fec_physical_dbs_alloc_info info
     */
    dnxc_data_table_info_get_f fec_physical_dbs_alloc_info_info_get;
    /**
     * get table mdb_51_info entry 
     */
    dnx_data_mdb_pdbs_mdb_51_info_get_f mdb_51_info_get;
    /**
     * get general info table about table (for example key size)mdb_51_info info
     */
    dnxc_data_table_info_get_f mdb_51_info_info_get;
    /**
     * get table mdb_53_info entry 
     */
    dnx_data_mdb_pdbs_mdb_53_info_get_f mdb_53_info_get;
    /**
     * get general info table about table (for example key size)mdb_53_info info
     */
    dnxc_data_table_info_get_f mdb_53_info_info_get;
} dnx_data_if_mdb_pdbs_t;

/*
 * }
 */

/*
 * SUBMODULE  - EM:
 * 
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule em table em_utilization_api_db_translation
 */
typedef struct
{
    uint8 dbal_id;
} dnx_data_mdb_em_em_utilization_api_db_translation_t;

/**
 * \brief Holds values of submodule em table spn
 */
typedef struct
{
    uint8 nof_spn_size;
    uint8 spn_array[DNX_DATA_MAX_MDB_EM_MAX_NOF_SPN_SIZES];
} dnx_data_mdb_em_spn_t;

/**
 * \brief Holds values of submodule em table lfsr
 */
typedef struct
{
    int lfsr_size;
} dnx_data_mdb_em_lfsr_t;

/**
 * \brief Holds values of submodule em table emp_index_table_mapping
 */
typedef struct
{
    dbal_physical_tables_e dbal_id;
} dnx_data_mdb_em_emp_index_table_mapping_t;

/**
 * \brief Holds values of submodule em table em_aging_info
 */
typedef struct
{
    uint8 max_nof_age_entry_bits;
    uint8 rbd_size;
    uint32 nof_age_banks;
    uint32 total_nof_aging_bits;
} dnx_data_mdb_em_em_aging_info_t;

/**
 * \brief Holds values of submodule em table em_aging_cfg
 */
typedef struct
{
    uint8 init_value;
    uint8 global_value;
    uint8 global_mask;
    uint8 external_profile;
    uint8 aging_disable;
    uint8 elephant_disable;
    uint8 elephant_values;
    uint8 mouse_values;
    uint8 age_max_values;
    uint8 increment_values;
    uint8 decrement_values;
    uint8 out_values;
    dbal_enum_value_field_mdb_em_aging_hit_bit_e hit_bit_mode;
} dnx_data_mdb_em_em_aging_cfg_t;

/**
 * \brief Holds values of submodule em table em_info
 */
typedef struct
{
    uint32 tid_size;
    soc_mem_t em_interface;
    uint32 entry_size;
    soc_reg_t status_reg;
    uint32 step_table_size;
    uint32 ovf_cam_size;
} dnx_data_mdb_em_em_info_t;

/**
 * \brief Holds values of submodule em table em_interrupt
 */
typedef struct
{
    int instance;
    soc_reg_t interrupt_register;
    soc_field_t interrupt_field;
} dnx_data_mdb_em_em_interrupt_t;

/**
 * \brief Holds values of submodule em table step_table_pdb_max_depth
 */
typedef struct
{
    uint32 max_depth;
} dnx_data_mdb_em_step_table_pdb_max_depth_t;

/**
 * \brief Holds values of submodule em table step_table_max_depth_possible
 */
typedef struct
{
    uint32 max_depth;
} dnx_data_mdb_em_step_table_max_depth_possible_t;

/**
 * \brief Holds values of submodule em table step_table_max_depth_nof_ways_ar
 */
typedef struct
{
    uint32 max_depth;
} dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_t;

/**
 * \brief Holds values of submodule em table mdb_15_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_5_field_size;
} dnx_data_mdb_em_mdb_15_info_t;

/**
 * \brief Holds values of submodule em table mdb_16_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_0_field_size;
} dnx_data_mdb_em_mdb_16_info_t;

/**
 * \brief Holds values of submodule em table mdb_21_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_0_field_size;
} dnx_data_mdb_em_mdb_21_info_t;

/**
 * \brief Holds values of submodule em table mdb_23_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_0_field_size;
    uint32 mdb_item_1_field_size;
} dnx_data_mdb_em_mdb_23_info_t;

/**
 * \brief Holds values of submodule em table mdb_24_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_0_array_size;
    uint32 mdb_item_1_array_size;
    uint32 mdb_item_1_field_size;
} dnx_data_mdb_em_mdb_24_info_t;

/**
 * \brief Holds values of submodule em table mdb_29_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_0_array_size;
    uint32 mdb_item_1_array_size;
} dnx_data_mdb_em_mdb_29_info_t;

/**
 * \brief Holds values of submodule em table mdb_31_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 array_size;
    uint32 mdb_item_0_field_size;
} dnx_data_mdb_em_mdb_31_info_t;

/**
 * \brief Holds values of submodule em table mdb_32_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_0_field_size;
} dnx_data_mdb_em_mdb_32_info_t;

/**
 * \brief Holds values of submodule em table mdb_41_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 array_size;
    uint32 mdb_item_2_field_size;
    uint32 mdb_item_3_field_size;
} dnx_data_mdb_em_mdb_41_info_t;

/**
 * \brief Holds values of submodule em table mdb_45_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 array_size;
    uint32 mdb_item_3_field_size;
    uint32 mdb_item_7_field_size;
} dnx_data_mdb_em_mdb_45_info_t;

/**
 * \brief Holds values of submodule em table mdb_emp_tables_mapping
 */
typedef struct
{
    dbal_tables_e emp_age_cfg_table;
    dbal_tables_e mdb_22_table;
} dnx_data_mdb_em_mdb_emp_tables_mapping_t;

/**
 * \brief Holds values of submodule em table mdb_em_shift_vmv_regs
 */
typedef struct
{
    uint8 nof_valid_regs;
    dbal_tables_e table_name_arr[DNX_DATA_MAX_MDB_EM_SHIFT_VMV_MAX_REGS_PER_TABLE];
    dbal_fields_e field_name_arr[DNX_DATA_MAX_MDB_EM_SHIFT_VMV_MAX_REGS_PER_TABLE];
    dbal_fields_e key_name_arr[DNX_DATA_MAX_MDB_EM_SHIFT_VMV_MAX_REGS_PER_TABLE];
    uint8 stage_index_arr[DNX_DATA_MAX_MDB_EM_SHIFT_VMV_MAX_REGS_PER_TABLE];
    uint8 esem_cmd_indication[DNX_DATA_MAX_MDB_EM_SHIFT_VMV_MAX_REGS_PER_TABLE];
} dnx_data_mdb_em_mdb_em_shift_vmv_regs_t;

/**
 * \brief Holds values of submodule em table em_emp
 */
typedef struct
{
    soc_mem_t age_mem;
    soc_mem_t age_ovf_cam_mem;
    soc_field_t emp_scan_status_field;
    soc_mem_t emp_age_cfg_reg;
    soc_mem_t global_value;
    soc_mem_t global_masks;
    soc_mem_t external_profile;
    soc_mem_t age_disable;
    soc_mem_t elephant_disable;
    soc_mem_t initial_values;
} dnx_data_mdb_em_em_emp_t;

/**
 * \brief Holds values of submodule em table mdb_step_table_map
 */
typedef struct
{
    dbal_tables_e dbal_table;
} dnx_data_mdb_em_mdb_step_table_map_t;

/**
 * \brief Holds values of submodule em table mdb_em_dbal_phy_tables_info
 */
typedef struct
{
    dbal_tables_e mdb_13_table;
    dbal_tables_e mdb_14_table;
    dbal_tables_e mdb_17_table;
    dbal_tables_e mdb_18_table;
    dbal_tables_e mdb_33_table;
    dbal_tables_e mdb_34_table;
    dbal_tables_e mdb_46_table;
    dbal_tables_e mdb_52_table;
} dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_t;

/**
 * \brief Holds values of submodule em table filter_rules
 */
typedef struct
{
    uint32 table_name;
    uint32 valid;
    uint32 entry_mask;
    uint32 entry_filter;
    uint32 src_mask;
    uint32 src_filter;
    uint32 appdb_id_mask;
    uint32 appdb_id_filter;
    uint32 accessed_mask;
    uint32 accessed_filter;
} dnx_data_mdb_em_filter_rules_t;

/**
 * \brief Holds values of submodule em table data_rules
 */
typedef struct
{
    uint32 table_name;
    uint32 command;
    uint32 payload_mask;
    uint32 payload;
} dnx_data_mdb_em_data_rules_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_mdb_em_entry_counter_decrease_support,
    dnx_data_mdb_em_entry_type_parser,
    dnx_data_mdb_em_step_table_any_cmds_support,
    dnx_data_mdb_em_multi_interface_blocks,
    dnx_data_mdb_em_is_isem_dpc_in_vtt5,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_em_feature_nof
} dnx_data_mdb_em_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_mdb_em_feature_get_f) (
    int unit,
    dnx_data_mdb_em_feature_e feature);

/**
 * \brief returns define data of age_row_size_bits
 * Module - 'mdb', Submodule - 'em', data - 'age_row_size_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age_row_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_age_row_size_bits_get_f) (
    int unit);

/**
 * \brief returns define data of age_ovfcam_row_size_bits
 * Module - 'mdb', Submodule - 'em', data - 'age_ovfcam_row_size_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age_ovfcam_row_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_age_ovfcam_row_size_bits_get_f) (
    int unit);

/**
 * \brief returns define data of ovf_cam_max_size
 * Module - 'mdb', Submodule - 'em', data - 'ovf_cam_max_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ovf_cam_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_ovf_cam_max_size_get_f) (
    int unit);

/**
 * \brief returns define data of age_support_per_entry_size_ratio
 * Module - 'mdb', Submodule - 'em', data - 'age_support_per_entry_size_ratio'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age_support_per_entry_size_ratio - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_age_support_per_entry_size_ratio_get_f) (
    int unit);

/**
 * \brief returns define data of flush_tcam_rule_counter_support
 * Module - 'mdb', Submodule - 'em', data - 'flush_tcam_rule_counter_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_tcam_rule_counter_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_flush_tcam_rule_counter_support_get_f) (
    int unit);

/**
 * \brief returns define data of nof_aging_profiles
 * Module - 'mdb', Submodule - 'em', data - 'nof_aging_profiles'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_aging_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_nof_aging_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of aging_profiles_size_in_bits
 * Module - 'mdb', Submodule - 'em', data - 'aging_profiles_size_in_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     aging_profiles_size_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_aging_profiles_size_in_bits_get_f) (
    int unit);

/**
 * \brief returns define data of max_tid_size
 * Module - 'mdb', Submodule - 'em', data - 'max_tid_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_tid_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_max_tid_size_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_tids
 * Module - 'mdb', Submodule - 'em', data - 'max_nof_tids'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_tids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_max_nof_tids_get_f) (
    int unit);

/**
 * \brief returns define data of flush_support_tids
 * Module - 'mdb', Submodule - 'em', data - 'flush_support_tids'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_support_tids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_flush_support_tids_get_f) (
    int unit);

/**
 * \brief returns define data of flush_max_supported_key
 * Module - 'mdb', Submodule - 'em', data - 'flush_max_supported_key'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_max_supported_key - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_flush_max_supported_key_get_f) (
    int unit);

/**
 * \brief returns define data of flush_max_supported_key_plus_payload
 * Module - 'mdb', Submodule - 'em', data - 'flush_max_supported_key_plus_payload'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_max_supported_key_plus_payload - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_flush_max_supported_key_plus_payload_get_f) (
    int unit);

/**
 * \brief returns define data of dh_120_entry_encoding_nof_bits
 * Module - 'mdb', Submodule - 'em', data - 'dh_120_entry_encoding_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dh_120_entry_encoding_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_dh_120_entry_encoding_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of dh_240_entry_encoding_nof_bits
 * Module - 'mdb', Submodule - 'em', data - 'dh_240_entry_encoding_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dh_240_entry_encoding_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_dh_240_entry_encoding_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of format_granularity
 * Module - 'mdb', Submodule - 'em', data - 'format_granularity'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     format_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_format_granularity_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_vmv_size
 * Module - 'mdb', Submodule - 'em', data - 'max_nof_vmv_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_vmv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_max_nof_vmv_size_get_f) (
    int unit);

/**
 * \brief returns define data of vmv_nof_values
 * Module - 'mdb', Submodule - 'em', data - 'vmv_nof_values'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vmv_nof_values - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_vmv_nof_values_get_f) (
    int unit);

/**
 * \brief returns define data of nof_vmv_size_nof_bits
 * Module - 'mdb', Submodule - 'em', data - 'nof_vmv_size_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_vmv_size_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_nof_vmv_size_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of esem_nof_vmv_size
 * Module - 'mdb', Submodule - 'em', data - 'esem_nof_vmv_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     esem_nof_vmv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_esem_nof_vmv_size_get_f) (
    int unit);

/**
 * \brief returns define data of glem_nof_vmv_size
 * Module - 'mdb', Submodule - 'em', data - 'glem_nof_vmv_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     glem_nof_vmv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_glem_nof_vmv_size_get_f) (
    int unit);

/**
 * \brief returns define data of mact_nof_vmv_size
 * Module - 'mdb', Submodule - 'em', data - 'mact_nof_vmv_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mact_nof_vmv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_mact_nof_vmv_size_get_f) (
    int unit);

/**
 * \brief returns define data of mact_max_payload_size
 * Module - 'mdb', Submodule - 'em', data - 'mact_max_payload_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mact_max_payload_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_mact_max_payload_size_get_f) (
    int unit);

/**
 * \brief returns define data of shift_vmv_max_size
 * Module - 'mdb', Submodule - 'em', data - 'shift_vmv_max_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     shift_vmv_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_shift_vmv_max_size_get_f) (
    int unit);

/**
 * \brief returns define data of shift_vmv_max_regs_per_table
 * Module - 'mdb', Submodule - 'em', data - 'shift_vmv_max_regs_per_table'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     shift_vmv_max_regs_per_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_shift_vmv_max_regs_per_table_get_f) (
    int unit);

/**
 * \brief returns define data of min_nof_app_id_bits
 * Module - 'mdb', Submodule - 'em', data - 'min_nof_app_id_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_nof_app_id_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_min_nof_app_id_bits_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_spn_sizes
 * Module - 'mdb', Submodule - 'em', data - 'max_nof_spn_sizes'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_spn_sizes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_max_nof_spn_sizes_get_f) (
    int unit);

/**
 * \brief returns define data of nof_lfsr_sizes
 * Module - 'mdb', Submodule - 'em', data - 'nof_lfsr_sizes'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lfsr_sizes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_nof_lfsr_sizes_get_f) (
    int unit);

/**
 * \brief returns define data of nof_formats
 * Module - 'mdb', Submodule - 'em', data - 'nof_formats'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_formats - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_nof_formats_get_f) (
    int unit);

/**
 * \brief returns define data of defragmentation_priority_supported
 * Module - 'mdb', Submodule - 'em', data - 'defragmentation_priority_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     defragmentation_priority_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_defragmentation_priority_supported_get_f) (
    int unit);

/**
 * \brief returns define data of disable_cuckoo_loop_detection_support
 * Module - 'mdb', Submodule - 'em', data - 'disable_cuckoo_loop_detection_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     disable_cuckoo_loop_detection_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_disable_cuckoo_loop_detection_support_get_f) (
    int unit);

/**
 * \brief returns define data of disable_cuckoo_hit_bit_sync
 * Module - 'mdb', Submodule - 'em', data - 'disable_cuckoo_hit_bit_sync'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     disable_cuckoo_hit_bit_sync - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_disable_cuckoo_hit_bit_sync_get_f) (
    int unit);

/**
 * \brief returns define data of age_profile_per_ratio_support
 * Module - 'mdb', Submodule - 'em', data - 'age_profile_per_ratio_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age_profile_per_ratio_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_age_profile_per_ratio_support_get_f) (
    int unit);

/**
 * \brief returns define data of flex_mag_supported
 * Module - 'mdb', Submodule - 'em', data - 'flex_mag_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flex_mag_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_flex_mag_supported_get_f) (
    int unit);

/**
 * \brief returns define data of flex_fully_supported
 * Module - 'mdb', Submodule - 'em', data - 'flex_fully_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flex_fully_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_flex_fully_supported_get_f) (
    int unit);

/**
 * \brief returns define data of step_table_max_size
 * Module - 'mdb', Submodule - 'em', data - 'step_table_max_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     step_table_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_step_table_max_size_get_f) (
    int unit);

/**
 * \brief returns define data of nof_encoding_values
 * Module - 'mdb', Submodule - 'em', data - 'nof_encoding_values'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_encoding_values - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_nof_encoding_values_get_f) (
    int unit);

/**
 * \brief returns define data of nof_encoding_types
 * Module - 'mdb', Submodule - 'em', data - 'nof_encoding_types'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_encoding_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_nof_encoding_types_get_f) (
    int unit);

/**
 * \brief returns define data of extra_vmv_shift_registers
 * Module - 'mdb', Submodule - 'em', data - 'extra_vmv_shift_registers'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     extra_vmv_shift_registers - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_extra_vmv_shift_registers_get_f) (
    int unit);

/**
 * \brief returns define data of scan_bank_participate_in_cuckoo_support
 * Module - 'mdb', Submodule - 'em', data - 'scan_bank_participate_in_cuckoo_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     scan_bank_participate_in_cuckoo_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_scan_bank_participate_in_cuckoo_support_get_f) (
    int unit);

/**
 * \brief returns define data of scan_bank_participate_in_cuckoo_partial_support
 * Module - 'mdb', Submodule - 'em', data - 'scan_bank_participate_in_cuckoo_partial_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     scan_bank_participate_in_cuckoo_partial_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_scan_bank_participate_in_cuckoo_partial_support_get_f) (
    int unit);

/**
 * \brief returns define data of sbus_error_code_support
 * Module - 'mdb', Submodule - 'em', data - 'sbus_error_code_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sbus_error_code_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_sbus_error_code_support_get_f) (
    int unit);

/**
 * \brief returns define data of nof_emp_tables
 * Module - 'mdb', Submodule - 'em', data - 'nof_emp_tables'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_emp_tables - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_nof_emp_tables_get_f) (
    int unit);

/**
 * \brief returns define data of defrag_interrupt_support
 * Module - 'mdb', Submodule - 'em', data - 'defrag_interrupt_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     defrag_interrupt_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_defrag_interrupt_support_get_f) (
    int unit);

/**
 * \brief returns define data of glem_bypass_option_support
 * Module - 'mdb', Submodule - 'em', data - 'glem_bypass_option_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     glem_bypass_option_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_glem_bypass_option_support_get_f) (
    int unit);

/**
 * \brief returns numeric data of flush_max_supported_payload
 * Module - 'mdb', Submodule - 'em', data - 'flush_max_supported_payload'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_max_supported_payload - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_flush_max_supported_payload_get_f) (
    int unit);

/**
 * \brief returns numeric data of flush_payload_max_bus
 * Module - 'mdb', Submodule - 'em', data - 'flush_payload_max_bus'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_payload_max_bus - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_flush_payload_max_bus_get_f) (
    int unit);

/**
 * \brief returns numeric data of my_mac_ippa_em_dbal_id
 * Module - 'mdb', Submodule - 'em', data - 'my_mac_ippa_em_dbal_id'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     my_mac_ippa_em_dbal_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_my_mac_ippa_em_dbal_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of my_mac_ippf_em_dbal_id
 * Module - 'mdb', Submodule - 'em', data - 'my_mac_ippf_em_dbal_id'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     my_mac_ippf_em_dbal_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_my_mac_ippf_em_dbal_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of mact_dbal_id
 * Module - 'mdb', Submodule - 'em', data - 'mact_dbal_id'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mact_dbal_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_em_mact_dbal_id_get_f) (
    int unit);

/**
 * \brief get table em_utilization_api_db_translation entry 
 * 
 * \param [in] unit - unit #
 * \param [in] resource_id - 
 * 
 * \return
 *     em_utilization_api_db_translation - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_utilization_api_db_translation_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_em_utilization_api_db_translation_t *(
    *dnx_data_mdb_em_em_utilization_api_db_translation_get_f) (
    int unit,
    int resource_id);

/**
 * \brief get table spn entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     spn - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_spn_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_spn_t *(
    *dnx_data_mdb_em_spn_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table lfsr entry 
 * 
 * \param [in] unit - unit #
 * \param [in] lfsr_index - 
 * 
 * \return
 *     lfsr - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_lfsr_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_lfsr_t *(
    *dnx_data_mdb_em_lfsr_get_f) (
    int unit,
    int lfsr_index);

/**
 * \brief get table emp_index_table_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] emp_table_idx - 
 * 
 * \return
 *     emp_index_table_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_emp_index_table_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_emp_index_table_mapping_t *(
    *dnx_data_mdb_em_emp_index_table_mapping_get_f) (
    int unit,
    int emp_table_idx);

/**
 * \brief get table em_aging_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_aging_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_aging_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_em_aging_info_t *(
    *dnx_data_mdb_em_em_aging_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table em_aging_cfg entry 
 * 
 * \param [in] unit - unit #
 * \param [in] profile - 
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_aging_cfg - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_aging_cfg_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_em_aging_cfg_t *(
    *dnx_data_mdb_em_em_aging_cfg_get_f) (
    int unit,
    int profile,
    int dbal_id);

/**
 * \brief get table em_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_em_info_t *(
    *dnx_data_mdb_em_em_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table em_interrupt entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_interrupt - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_interrupt_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_em_interrupt_t *(
    *dnx_data_mdb_em_em_interrupt_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table step_table_pdb_max_depth entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     step_table_pdb_max_depth - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_step_table_pdb_max_depth_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_step_table_pdb_max_depth_t *(
    *dnx_data_mdb_em_step_table_pdb_max_depth_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table step_table_max_depth_possible entry 
 * 
 * \param [in] unit - unit #
 * \param [in] step_table_size_indication - 
 * \param [in] aspect_ratio_combination - 
 * 
 * \return
 *     step_table_max_depth_possible - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_step_table_max_depth_possible_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_step_table_max_depth_possible_t *(
    *dnx_data_mdb_em_step_table_max_depth_possible_get_f) (
    int unit,
    int step_table_size_indication,
    int aspect_ratio_combination);

/**
 * \brief get table step_table_max_depth_nof_ways_ar entry 
 * 
 * \param [in] unit - unit #
 * \param [in] aspect_ratio - 
 * \param [in] nof_ways - 
 * 
 * \return
 *     step_table_max_depth_nof_ways_ar - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_t *(
    *dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_get_f) (
    int unit,
    int aspect_ratio,
    int nof_ways);

/**
 * \brief get table mdb_15_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_15_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_15_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_15_info_t *(
    *dnx_data_mdb_em_mdb_15_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_16_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_16_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_16_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_16_info_t *(
    *dnx_data_mdb_em_mdb_16_info_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_21_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_21_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_21_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_21_info_t *(
    *dnx_data_mdb_em_mdb_21_info_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_23_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_23_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_23_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_23_info_t *(
    *dnx_data_mdb_em_mdb_23_info_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_24_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_24_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_24_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_24_info_t *(
    *dnx_data_mdb_em_mdb_24_info_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_29_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_29_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_29_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_29_info_t *(
    *dnx_data_mdb_em_mdb_29_info_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_31_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_31_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_31_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_31_info_t *(
    *dnx_data_mdb_em_mdb_31_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_32_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_32_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_32_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_32_info_t *(
    *dnx_data_mdb_em_mdb_32_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_41_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_41_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_41_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_41_info_t *(
    *dnx_data_mdb_em_mdb_41_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_45_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_45_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_45_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_45_info_t *(
    *dnx_data_mdb_em_mdb_45_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_emp_tables_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table - 
 * 
 * \return
 *     mdb_emp_tables_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_emp_tables_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_emp_tables_mapping_t *(
    *dnx_data_mdb_em_mdb_emp_tables_mapping_get_f) (
    int unit,
    int mdb_table);

/**
 * \brief get table mdb_em_shift_vmv_regs entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_em_shift_vmv_regs - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_em_shift_vmv_regs_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_em_shift_vmv_regs_t *(
    *dnx_data_mdb_em_mdb_em_shift_vmv_regs_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table em_emp entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_emp - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_emp_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_em_emp_t *(
    *dnx_data_mdb_em_em_emp_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_step_table_map entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table - 
 * 
 * \return
 *     mdb_step_table_map - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_step_table_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_step_table_map_t *(
    *dnx_data_mdb_em_mdb_step_table_map_get_f) (
    int unit,
    int mdb_table);

/**
 * \brief get table mdb_em_dbal_phy_tables_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_em_dbal_phy_tables_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_t *(
    *dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table filter_rules entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     filter_rules - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_filter_rules_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_filter_rules_t *(
    *dnx_data_mdb_em_filter_rules_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table data_rules entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     data_rules - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_data_rules_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_em_data_rules_t *(
    *dnx_data_mdb_em_data_rules_get_f) (
    int unit,
    int dbal_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MDB - EM:
 * {
 */
/**
 * \brief Interface for mdb em data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_mdb_em_feature_get_f feature_get;
    /**
     * returns define data of age_row_size_bits
     */
    dnx_data_mdb_em_age_row_size_bits_get_f age_row_size_bits_get;
    /**
     * returns define data of age_ovfcam_row_size_bits
     */
    dnx_data_mdb_em_age_ovfcam_row_size_bits_get_f age_ovfcam_row_size_bits_get;
    /**
     * returns define data of ovf_cam_max_size
     */
    dnx_data_mdb_em_ovf_cam_max_size_get_f ovf_cam_max_size_get;
    /**
     * returns define data of age_support_per_entry_size_ratio
     */
    dnx_data_mdb_em_age_support_per_entry_size_ratio_get_f age_support_per_entry_size_ratio_get;
    /**
     * returns define data of flush_tcam_rule_counter_support
     */
    dnx_data_mdb_em_flush_tcam_rule_counter_support_get_f flush_tcam_rule_counter_support_get;
    /**
     * returns define data of nof_aging_profiles
     */
    dnx_data_mdb_em_nof_aging_profiles_get_f nof_aging_profiles_get;
    /**
     * returns define data of aging_profiles_size_in_bits
     */
    dnx_data_mdb_em_aging_profiles_size_in_bits_get_f aging_profiles_size_in_bits_get;
    /**
     * returns define data of max_tid_size
     */
    dnx_data_mdb_em_max_tid_size_get_f max_tid_size_get;
    /**
     * returns define data of max_nof_tids
     */
    dnx_data_mdb_em_max_nof_tids_get_f max_nof_tids_get;
    /**
     * returns define data of flush_support_tids
     */
    dnx_data_mdb_em_flush_support_tids_get_f flush_support_tids_get;
    /**
     * returns define data of flush_max_supported_key
     */
    dnx_data_mdb_em_flush_max_supported_key_get_f flush_max_supported_key_get;
    /**
     * returns define data of flush_max_supported_key_plus_payload
     */
    dnx_data_mdb_em_flush_max_supported_key_plus_payload_get_f flush_max_supported_key_plus_payload_get;
    /**
     * returns define data of dh_120_entry_encoding_nof_bits
     */
    dnx_data_mdb_em_dh_120_entry_encoding_nof_bits_get_f dh_120_entry_encoding_nof_bits_get;
    /**
     * returns define data of dh_240_entry_encoding_nof_bits
     */
    dnx_data_mdb_em_dh_240_entry_encoding_nof_bits_get_f dh_240_entry_encoding_nof_bits_get;
    /**
     * returns define data of format_granularity
     */
    dnx_data_mdb_em_format_granularity_get_f format_granularity_get;
    /**
     * returns define data of max_nof_vmv_size
     */
    dnx_data_mdb_em_max_nof_vmv_size_get_f max_nof_vmv_size_get;
    /**
     * returns define data of vmv_nof_values
     */
    dnx_data_mdb_em_vmv_nof_values_get_f vmv_nof_values_get;
    /**
     * returns define data of nof_vmv_size_nof_bits
     */
    dnx_data_mdb_em_nof_vmv_size_nof_bits_get_f nof_vmv_size_nof_bits_get;
    /**
     * returns define data of esem_nof_vmv_size
     */
    dnx_data_mdb_em_esem_nof_vmv_size_get_f esem_nof_vmv_size_get;
    /**
     * returns define data of glem_nof_vmv_size
     */
    dnx_data_mdb_em_glem_nof_vmv_size_get_f glem_nof_vmv_size_get;
    /**
     * returns define data of mact_nof_vmv_size
     */
    dnx_data_mdb_em_mact_nof_vmv_size_get_f mact_nof_vmv_size_get;
    /**
     * returns define data of mact_max_payload_size
     */
    dnx_data_mdb_em_mact_max_payload_size_get_f mact_max_payload_size_get;
    /**
     * returns define data of shift_vmv_max_size
     */
    dnx_data_mdb_em_shift_vmv_max_size_get_f shift_vmv_max_size_get;
    /**
     * returns define data of shift_vmv_max_regs_per_table
     */
    dnx_data_mdb_em_shift_vmv_max_regs_per_table_get_f shift_vmv_max_regs_per_table_get;
    /**
     * returns define data of min_nof_app_id_bits
     */
    dnx_data_mdb_em_min_nof_app_id_bits_get_f min_nof_app_id_bits_get;
    /**
     * returns define data of max_nof_spn_sizes
     */
    dnx_data_mdb_em_max_nof_spn_sizes_get_f max_nof_spn_sizes_get;
    /**
     * returns define data of nof_lfsr_sizes
     */
    dnx_data_mdb_em_nof_lfsr_sizes_get_f nof_lfsr_sizes_get;
    /**
     * returns define data of nof_formats
     */
    dnx_data_mdb_em_nof_formats_get_f nof_formats_get;
    /**
     * returns define data of defragmentation_priority_supported
     */
    dnx_data_mdb_em_defragmentation_priority_supported_get_f defragmentation_priority_supported_get;
    /**
     * returns define data of disable_cuckoo_loop_detection_support
     */
    dnx_data_mdb_em_disable_cuckoo_loop_detection_support_get_f disable_cuckoo_loop_detection_support_get;
    /**
     * returns define data of disable_cuckoo_hit_bit_sync
     */
    dnx_data_mdb_em_disable_cuckoo_hit_bit_sync_get_f disable_cuckoo_hit_bit_sync_get;
    /**
     * returns define data of age_profile_per_ratio_support
     */
    dnx_data_mdb_em_age_profile_per_ratio_support_get_f age_profile_per_ratio_support_get;
    /**
     * returns define data of flex_mag_supported
     */
    dnx_data_mdb_em_flex_mag_supported_get_f flex_mag_supported_get;
    /**
     * returns define data of flex_fully_supported
     */
    dnx_data_mdb_em_flex_fully_supported_get_f flex_fully_supported_get;
    /**
     * returns define data of step_table_max_size
     */
    dnx_data_mdb_em_step_table_max_size_get_f step_table_max_size_get;
    /**
     * returns define data of nof_encoding_values
     */
    dnx_data_mdb_em_nof_encoding_values_get_f nof_encoding_values_get;
    /**
     * returns define data of nof_encoding_types
     */
    dnx_data_mdb_em_nof_encoding_types_get_f nof_encoding_types_get;
    /**
     * returns define data of extra_vmv_shift_registers
     */
    dnx_data_mdb_em_extra_vmv_shift_registers_get_f extra_vmv_shift_registers_get;
    /**
     * returns define data of scan_bank_participate_in_cuckoo_support
     */
    dnx_data_mdb_em_scan_bank_participate_in_cuckoo_support_get_f scan_bank_participate_in_cuckoo_support_get;
    /**
     * returns define data of scan_bank_participate_in_cuckoo_partial_support
     */
    dnx_data_mdb_em_scan_bank_participate_in_cuckoo_partial_support_get_f scan_bank_participate_in_cuckoo_partial_support_get;
    /**
     * returns define data of sbus_error_code_support
     */
    dnx_data_mdb_em_sbus_error_code_support_get_f sbus_error_code_support_get;
    /**
     * returns define data of nof_emp_tables
     */
    dnx_data_mdb_em_nof_emp_tables_get_f nof_emp_tables_get;
    /**
     * returns define data of defrag_interrupt_support
     */
    dnx_data_mdb_em_defrag_interrupt_support_get_f defrag_interrupt_support_get;
    /**
     * returns define data of glem_bypass_option_support
     */
    dnx_data_mdb_em_glem_bypass_option_support_get_f glem_bypass_option_support_get;
    /**
     * returns numeric data of flush_max_supported_payload
     */
    dnx_data_mdb_em_flush_max_supported_payload_get_f flush_max_supported_payload_get;
    /**
     * returns numeric data of flush_payload_max_bus
     */
    dnx_data_mdb_em_flush_payload_max_bus_get_f flush_payload_max_bus_get;
    /**
     * returns numeric data of my_mac_ippa_em_dbal_id
     */
    dnx_data_mdb_em_my_mac_ippa_em_dbal_id_get_f my_mac_ippa_em_dbal_id_get;
    /**
     * returns numeric data of my_mac_ippf_em_dbal_id
     */
    dnx_data_mdb_em_my_mac_ippf_em_dbal_id_get_f my_mac_ippf_em_dbal_id_get;
    /**
     * returns numeric data of mact_dbal_id
     */
    dnx_data_mdb_em_mact_dbal_id_get_f mact_dbal_id_get;
    /**
     * get table em_utilization_api_db_translation entry 
     */
    dnx_data_mdb_em_em_utilization_api_db_translation_get_f em_utilization_api_db_translation_get;
    /**
     * get general info table about table (for example key size)em_utilization_api_db_translation info
     */
    dnxc_data_table_info_get_f em_utilization_api_db_translation_info_get;
    /**
     * get table spn entry 
     */
    dnx_data_mdb_em_spn_get_f spn_get;
    /**
     * get general info table about table (for example key size)spn info
     */
    dnxc_data_table_info_get_f spn_info_get;
    /**
     * get table lfsr entry 
     */
    dnx_data_mdb_em_lfsr_get_f lfsr_get;
    /**
     * get general info table about table (for example key size)lfsr info
     */
    dnxc_data_table_info_get_f lfsr_info_get;
    /**
     * get table emp_index_table_mapping entry 
     */
    dnx_data_mdb_em_emp_index_table_mapping_get_f emp_index_table_mapping_get;
    /**
     * get general info table about table (for example key size)emp_index_table_mapping info
     */
    dnxc_data_table_info_get_f emp_index_table_mapping_info_get;
    /**
     * get table em_aging_info entry 
     */
    dnx_data_mdb_em_em_aging_info_get_f em_aging_info_get;
    /**
     * get general info table about table (for example key size)em_aging_info info
     */
    dnxc_data_table_info_get_f em_aging_info_info_get;
    /**
     * get table em_aging_cfg entry 
     */
    dnx_data_mdb_em_em_aging_cfg_get_f em_aging_cfg_get;
    /**
     * get general info table about table (for example key size)em_aging_cfg info
     */
    dnxc_data_table_info_get_f em_aging_cfg_info_get;
    /**
     * get table em_info entry 
     */
    dnx_data_mdb_em_em_info_get_f em_info_get;
    /**
     * get general info table about table (for example key size)em_info info
     */
    dnxc_data_table_info_get_f em_info_info_get;
    /**
     * get table em_interrupt entry 
     */
    dnx_data_mdb_em_em_interrupt_get_f em_interrupt_get;
    /**
     * get general info table about table (for example key size)em_interrupt info
     */
    dnxc_data_table_info_get_f em_interrupt_info_get;
    /**
     * get table step_table_pdb_max_depth entry 
     */
    dnx_data_mdb_em_step_table_pdb_max_depth_get_f step_table_pdb_max_depth_get;
    /**
     * get general info table about table (for example key size)step_table_pdb_max_depth info
     */
    dnxc_data_table_info_get_f step_table_pdb_max_depth_info_get;
    /**
     * get table step_table_max_depth_possible entry 
     */
    dnx_data_mdb_em_step_table_max_depth_possible_get_f step_table_max_depth_possible_get;
    /**
     * get general info table about table (for example key size)step_table_max_depth_possible info
     */
    dnxc_data_table_info_get_f step_table_max_depth_possible_info_get;
    /**
     * get table step_table_max_depth_nof_ways_ar entry 
     */
    dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_get_f step_table_max_depth_nof_ways_ar_get;
    /**
     * get general info table about table (for example key size)step_table_max_depth_nof_ways_ar info
     */
    dnxc_data_table_info_get_f step_table_max_depth_nof_ways_ar_info_get;
    /**
     * get table mdb_15_info entry 
     */
    dnx_data_mdb_em_mdb_15_info_get_f mdb_15_info_get;
    /**
     * get general info table about table (for example key size)mdb_15_info info
     */
    dnxc_data_table_info_get_f mdb_15_info_info_get;
    /**
     * get table mdb_16_info entry 
     */
    dnx_data_mdb_em_mdb_16_info_get_f mdb_16_info_get;
    /**
     * get general info table about table (for example key size)mdb_16_info info
     */
    dnxc_data_table_info_get_f mdb_16_info_info_get;
    /**
     * get table mdb_21_info entry 
     */
    dnx_data_mdb_em_mdb_21_info_get_f mdb_21_info_get;
    /**
     * get general info table about table (for example key size)mdb_21_info info
     */
    dnxc_data_table_info_get_f mdb_21_info_info_get;
    /**
     * get table mdb_23_info entry 
     */
    dnx_data_mdb_em_mdb_23_info_get_f mdb_23_info_get;
    /**
     * get general info table about table (for example key size)mdb_23_info info
     */
    dnxc_data_table_info_get_f mdb_23_info_info_get;
    /**
     * get table mdb_24_info entry 
     */
    dnx_data_mdb_em_mdb_24_info_get_f mdb_24_info_get;
    /**
     * get general info table about table (for example key size)mdb_24_info info
     */
    dnxc_data_table_info_get_f mdb_24_info_info_get;
    /**
     * get table mdb_29_info entry 
     */
    dnx_data_mdb_em_mdb_29_info_get_f mdb_29_info_get;
    /**
     * get general info table about table (for example key size)mdb_29_info info
     */
    dnxc_data_table_info_get_f mdb_29_info_info_get;
    /**
     * get table mdb_31_info entry 
     */
    dnx_data_mdb_em_mdb_31_info_get_f mdb_31_info_get;
    /**
     * get general info table about table (for example key size)mdb_31_info info
     */
    dnxc_data_table_info_get_f mdb_31_info_info_get;
    /**
     * get table mdb_32_info entry 
     */
    dnx_data_mdb_em_mdb_32_info_get_f mdb_32_info_get;
    /**
     * get general info table about table (for example key size)mdb_32_info info
     */
    dnxc_data_table_info_get_f mdb_32_info_info_get;
    /**
     * get table mdb_41_info entry 
     */
    dnx_data_mdb_em_mdb_41_info_get_f mdb_41_info_get;
    /**
     * get general info table about table (for example key size)mdb_41_info info
     */
    dnxc_data_table_info_get_f mdb_41_info_info_get;
    /**
     * get table mdb_45_info entry 
     */
    dnx_data_mdb_em_mdb_45_info_get_f mdb_45_info_get;
    /**
     * get general info table about table (for example key size)mdb_45_info info
     */
    dnxc_data_table_info_get_f mdb_45_info_info_get;
    /**
     * get table mdb_emp_tables_mapping entry 
     */
    dnx_data_mdb_em_mdb_emp_tables_mapping_get_f mdb_emp_tables_mapping_get;
    /**
     * get general info table about table (for example key size)mdb_emp_tables_mapping info
     */
    dnxc_data_table_info_get_f mdb_emp_tables_mapping_info_get;
    /**
     * get table mdb_em_shift_vmv_regs entry 
     */
    dnx_data_mdb_em_mdb_em_shift_vmv_regs_get_f mdb_em_shift_vmv_regs_get;
    /**
     * get general info table about table (for example key size)mdb_em_shift_vmv_regs info
     */
    dnxc_data_table_info_get_f mdb_em_shift_vmv_regs_info_get;
    /**
     * get table em_emp entry 
     */
    dnx_data_mdb_em_em_emp_get_f em_emp_get;
    /**
     * get general info table about table (for example key size)em_emp info
     */
    dnxc_data_table_info_get_f em_emp_info_get;
    /**
     * get table mdb_step_table_map entry 
     */
    dnx_data_mdb_em_mdb_step_table_map_get_f mdb_step_table_map_get;
    /**
     * get general info table about table (for example key size)mdb_step_table_map info
     */
    dnxc_data_table_info_get_f mdb_step_table_map_info_get;
    /**
     * get table mdb_em_dbal_phy_tables_info entry 
     */
    dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_get_f mdb_em_dbal_phy_tables_info_get;
    /**
     * get general info table about table (for example key size)mdb_em_dbal_phy_tables_info info
     */
    dnxc_data_table_info_get_f mdb_em_dbal_phy_tables_info_info_get;
    /**
     * get table filter_rules entry 
     */
    dnx_data_mdb_em_filter_rules_get_f filter_rules_get;
    /**
     * get general info table about table (for example key size)filter_rules info
     */
    dnxc_data_table_info_get_f filter_rules_info_get;
    /**
     * get table data_rules entry 
     */
    dnx_data_mdb_em_data_rules_get_f data_rules_get;
    /**
     * get general info table about table (for example key size)data_rules info
     */
    dnxc_data_table_info_get_f data_rules_info_get;
} dnx_data_if_mdb_em_t;

/*
 * }
 */

/*
 * SUBMODULE  - DIRECT:
 * 
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule direct table vsi_payload_type_per_range
 */
typedef struct
{
    uint32 payload_type;
} dnx_data_mdb_direct_vsi_payload_type_per_range_t;

/**
 * \brief Holds values of submodule direct table direct_utilization_api_db_translation
 */
typedef struct
{
    uint8 dbal_id;
} dnx_data_mdb_direct_direct_utilization_api_db_translation_t;

/**
 * \brief Holds values of submodule direct table direct_info
 */
typedef struct
{
    dbal_enum_value_field_direct_payload_sizes_e payload_type;
} dnx_data_mdb_direct_direct_info_t;

/**
 * \brief Holds values of submodule direct table hit_bit_pos_in_abk
 */
typedef struct
{
    uint8 hit_bit_position;
} dnx_data_mdb_direct_hit_bit_pos_in_abk_t;

/**
 * \brief Holds values of submodule direct table mdb_11_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_0_array_size;
    uint32 mdb_item_0_field_size;
    uint32 mdb_item_1_field_size;
    uint32 mdb_item_3_array_size;
    uint32 mdb_item_3_field_size;
    uint32 mdb_item_4_array_size;
    uint32 mdb_item_4_field_size;
} dnx_data_mdb_direct_mdb_11_info_t;

/**
 * \brief Holds values of submodule direct table mdb_26_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
    uint32 mdb_item_0_field_size;
    uint32 mdb_item_1_field_size;
} dnx_data_mdb_direct_mdb_26_info_t;

/**
 * \brief Holds values of submodule direct table mdb_direct_mdb_phy_tables_info
 */
typedef struct
{
    dbal_tables_e mdb_12_table;
    dbal_tables_e mdb_42_table;
} dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_mdb_direct_fec_abk_mapping,
    dnx_data_mdb_direct_fec_abk_macro_mapping,
    dnx_data_mdb_direct_vsi_config_size,
    dnx_data_mdb_direct_fec_address_remap,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_direct_feature_nof
} dnx_data_mdb_direct_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_mdb_direct_feature_get_f) (
    int unit,
    dnx_data_mdb_direct_feature_e feature);

/**
 * \brief returns define data of physical_address_max_bits
 * Module - 'mdb', Submodule - 'direct', data - 'physical_address_max_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     physical_address_max_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_physical_address_max_bits_get_f) (
    int unit);

/**
 * \brief returns define data of physical_address_max_bits_support_single_macro_b_granularity_fec_alloc
 * Module - 'mdb', Submodule - 'direct', data - 'physical_address_max_bits_support_single_macro_b_granularity_fec_alloc'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     physical_address_max_bits_support_single_macro_b_granularity_fec_alloc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_physical_address_max_bits_support_single_macro_b_granularity_fec_alloc_get_f) (
    int unit);

/**
 * \brief returns define data of vsi_physical_address_max_bits
 * Module - 'mdb', Submodule - 'direct', data - 'vsi_physical_address_max_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vsi_physical_address_max_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_vsi_physical_address_max_bits_get_f) (
    int unit);

/**
 * \brief returns define data of fec_row_width
 * Module - 'mdb', Submodule - 'direct', data - 'fec_row_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_row_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_fec_row_width_get_f) (
    int unit);

/**
 * \brief returns define data of fec_address_mapping_bits
 * Module - 'mdb', Submodule - 'direct', data - 'fec_address_mapping_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_address_mapping_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_fec_address_mapping_bits_get_f) (
    int unit);

/**
 * \brief returns define data of fec_address_mapping_bits_relevant
 * Module - 'mdb', Submodule - 'direct', data - 'fec_address_mapping_bits_relevant'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_address_mapping_bits_relevant - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_fec_address_mapping_bits_relevant_get_f) (
    int unit);

/**
 * \brief returns define data of fec_max_cluster_pairs
 * Module - 'mdb', Submodule - 'direct', data - 'fec_max_cluster_pairs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_max_cluster_pairs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_fec_max_cluster_pairs_get_f) (
    int unit);

/**
 * \brief returns define data of max_payload_size
 * Module - 'mdb', Submodule - 'direct', data - 'max_payload_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_payload_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_max_payload_size_get_f) (
    int unit);

/**
 * \brief returns define data of nof_fecs_in_super_fec
 * Module - 'mdb', Submodule - 'direct', data - 'nof_fecs_in_super_fec'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fecs_in_super_fec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_nof_fecs_in_super_fec_get_f) (
    int unit);

/**
 * \brief returns define data of nof_fec_ecmp_hierarchies
 * Module - 'mdb', Submodule - 'direct', data - 'nof_fec_ecmp_hierarchies'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fec_ecmp_hierarchies - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_nof_fec_ecmp_hierarchies_get_f) (
    int unit);

/**
 * \brief returns define data of physical_address_ovf_enable_val
 * Module - 'mdb', Submodule - 'direct', data - 'physical_address_ovf_enable_val'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     physical_address_ovf_enable_val - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_physical_address_ovf_enable_val_get_f) (
    int unit);

/**
 * \brief returns define data of nof_fec_dbs
 * Module - 'mdb', Submodule - 'direct', data - 'nof_fec_dbs'
 * The NOF of FEC DBs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fec_dbs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_nof_fec_dbs_get_f) (
    int unit);

/**
 * \brief returns numeric data of map_payload_size_enum
 * Module - 'mdb', Submodule - 'direct', data - 'map_payload_size_enum'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     map_payload_size_enum - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_map_payload_size_enum_get_f) (
    int unit);

/**
 * \brief returns numeric data of map_payload_size
 * Module - 'mdb', Submodule - 'direct', data - 'map_payload_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     map_payload_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_map_payload_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of fec_allocation_base_macro_type
 * Module - 'mdb', Submodule - 'direct', data - 'fec_allocation_base_macro_type'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_allocation_base_macro_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_direct_fec_allocation_base_macro_type_get_f) (
    int unit);

/**
 * \brief get table vsi_payload_type_per_range entry 
 * 
 * \param [in] unit - unit #
 * \param [in] range_idx - 
 * 
 * \return
 *     vsi_payload_type_per_range - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_vsi_payload_type_per_range_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_direct_vsi_payload_type_per_range_t *(
    *dnx_data_mdb_direct_vsi_payload_type_per_range_get_f) (
    int unit,
    int range_idx);

/**
 * \brief get table direct_utilization_api_db_translation entry 
 * 
 * \param [in] unit - unit #
 * \param [in] resource_id - 
 * 
 * \return
 *     direct_utilization_api_db_translation - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_direct_utilization_api_db_translation_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_direct_direct_utilization_api_db_translation_t *(
    *dnx_data_mdb_direct_direct_utilization_api_db_translation_get_f) (
    int unit,
    int resource_id);

/**
 * \brief get table direct_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     direct_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_direct_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_direct_direct_info_t *(
    *dnx_data_mdb_direct_direct_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table hit_bit_pos_in_abk entry 
 * 
 * \param [in] unit - unit #
 * \param [in] hit_bit_index - 
 * 
 * \return
 *     hit_bit_pos_in_abk - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_hit_bit_pos_in_abk_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_direct_hit_bit_pos_in_abk_t *(
    *dnx_data_mdb_direct_hit_bit_pos_in_abk_get_f) (
    int unit,
    int hit_bit_index);

/**
 * \brief get table mdb_11_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_11_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_mdb_11_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_direct_mdb_11_info_t *(
    *dnx_data_mdb_direct_mdb_11_info_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_26_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_26_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_mdb_26_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_direct_mdb_26_info_t *(
    *dnx_data_mdb_direct_mdb_26_info_get_f) (
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_direct_mdb_phy_tables_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_direct_mdb_phy_tables_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_t *(
    *dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_get_f) (
    int unit,
    int mdb_table_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MDB - DIRECT:
 * {
 */
/**
 * \brief Interface for mdb direct data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_mdb_direct_feature_get_f feature_get;
    /**
     * returns define data of physical_address_max_bits
     */
    dnx_data_mdb_direct_physical_address_max_bits_get_f physical_address_max_bits_get;
    /**
     * returns define data of physical_address_max_bits_support_single_macro_b_granularity_fec_alloc
     */
    dnx_data_mdb_direct_physical_address_max_bits_support_single_macro_b_granularity_fec_alloc_get_f physical_address_max_bits_support_single_macro_b_granularity_fec_alloc_get;
    /**
     * returns define data of vsi_physical_address_max_bits
     */
    dnx_data_mdb_direct_vsi_physical_address_max_bits_get_f vsi_physical_address_max_bits_get;
    /**
     * returns define data of fec_row_width
     */
    dnx_data_mdb_direct_fec_row_width_get_f fec_row_width_get;
    /**
     * returns define data of fec_address_mapping_bits
     */
    dnx_data_mdb_direct_fec_address_mapping_bits_get_f fec_address_mapping_bits_get;
    /**
     * returns define data of fec_address_mapping_bits_relevant
     */
    dnx_data_mdb_direct_fec_address_mapping_bits_relevant_get_f fec_address_mapping_bits_relevant_get;
    /**
     * returns define data of fec_max_cluster_pairs
     */
    dnx_data_mdb_direct_fec_max_cluster_pairs_get_f fec_max_cluster_pairs_get;
    /**
     * returns define data of max_payload_size
     */
    dnx_data_mdb_direct_max_payload_size_get_f max_payload_size_get;
    /**
     * returns define data of nof_fecs_in_super_fec
     */
    dnx_data_mdb_direct_nof_fecs_in_super_fec_get_f nof_fecs_in_super_fec_get;
    /**
     * returns define data of nof_fec_ecmp_hierarchies
     */
    dnx_data_mdb_direct_nof_fec_ecmp_hierarchies_get_f nof_fec_ecmp_hierarchies_get;
    /**
     * returns define data of physical_address_ovf_enable_val
     */
    dnx_data_mdb_direct_physical_address_ovf_enable_val_get_f physical_address_ovf_enable_val_get;
    /**
     * returns define data of nof_fec_dbs
     */
    dnx_data_mdb_direct_nof_fec_dbs_get_f nof_fec_dbs_get;
    /**
     * returns numeric data of map_payload_size_enum
     */
    dnx_data_mdb_direct_map_payload_size_enum_get_f map_payload_size_enum_get;
    /**
     * returns numeric data of map_payload_size
     */
    dnx_data_mdb_direct_map_payload_size_get_f map_payload_size_get;
    /**
     * returns numeric data of fec_allocation_base_macro_type
     */
    dnx_data_mdb_direct_fec_allocation_base_macro_type_get_f fec_allocation_base_macro_type_get;
    /**
     * get table vsi_payload_type_per_range entry 
     */
    dnx_data_mdb_direct_vsi_payload_type_per_range_get_f vsi_payload_type_per_range_get;
    /**
     * get general info table about table (for example key size)vsi_payload_type_per_range info
     */
    dnxc_data_table_info_get_f vsi_payload_type_per_range_info_get;
    /**
     * get table direct_utilization_api_db_translation entry 
     */
    dnx_data_mdb_direct_direct_utilization_api_db_translation_get_f direct_utilization_api_db_translation_get;
    /**
     * get general info table about table (for example key size)direct_utilization_api_db_translation info
     */
    dnxc_data_table_info_get_f direct_utilization_api_db_translation_info_get;
    /**
     * get table direct_info entry 
     */
    dnx_data_mdb_direct_direct_info_get_f direct_info_get;
    /**
     * get general info table about table (for example key size)direct_info info
     */
    dnxc_data_table_info_get_f direct_info_info_get;
    /**
     * get table hit_bit_pos_in_abk entry 
     */
    dnx_data_mdb_direct_hit_bit_pos_in_abk_get_f hit_bit_pos_in_abk_get;
    /**
     * get general info table about table (for example key size)hit_bit_pos_in_abk info
     */
    dnxc_data_table_info_get_f hit_bit_pos_in_abk_info_get;
    /**
     * get table mdb_11_info entry 
     */
    dnx_data_mdb_direct_mdb_11_info_get_f mdb_11_info_get;
    /**
     * get general info table about table (for example key size)mdb_11_info info
     */
    dnxc_data_table_info_get_f mdb_11_info_info_get;
    /**
     * get table mdb_26_info entry 
     */
    dnx_data_mdb_direct_mdb_26_info_get_f mdb_26_info_get;
    /**
     * get general info table about table (for example key size)mdb_26_info info
     */
    dnxc_data_table_info_get_f mdb_26_info_info_get;
    /**
     * get table mdb_direct_mdb_phy_tables_info entry 
     */
    dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_get_f mdb_direct_mdb_phy_tables_info_get;
    /**
     * get general info table about table (for example key size)mdb_direct_mdb_phy_tables_info info
     */
    dnxc_data_table_info_get_f mdb_direct_mdb_phy_tables_info_info_get;
} dnx_data_if_mdb_direct_t;

/*
 * }
 */

/*
 * SUBMODULE  - EEDB:
 * 
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule eedb table phase_info
 */
typedef struct
{
    uint32 nof_available_banks;
} dnx_data_mdb_eedb_phase_info_t;

/**
 * \brief Holds values of submodule eedb table phase_ll_bucket_enable
 */
typedef struct
{
    dbal_tables_e bucket_enable_dbal_table;
} dnx_data_mdb_eedb_phase_ll_bucket_enable_t;

/**
 * \brief Holds values of submodule eedb table phase_to_table
 */
typedef struct
{
    mdb_physical_table_e mdb_physical_table_id;
} dnx_data_mdb_eedb_phase_to_table_t;

/**
 * \brief Holds values of submodule eedb table outlif_physical_phase_granularity
 */
typedef struct
{
    uint32 data_granularity;
} dnx_data_mdb_eedb_outlif_physical_phase_granularity_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_mdb_eedb_eedb_bank_hitbit_masked_clear,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_eedb_feature_nof
} dnx_data_mdb_eedb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_mdb_eedb_feature_get_f) (
    int unit,
    dnx_data_mdb_eedb_feature_e feature);

/**
 * \brief returns define data of phase_map_bits
 * Module - 'mdb', Submodule - 'eedb', data - 'phase_map_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_map_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_phase_map_bits_get_f) (
    int unit);

/**
 * \brief returns define data of phase_map_array_size
 * Module - 'mdb', Submodule - 'eedb', data - 'phase_map_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_map_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_phase_map_array_size_get_f) (
    int unit);

/**
 * \brief returns define data of nof_phase_per_mag
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_phase_per_mag'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phase_per_mag - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_nof_phase_per_mag_get_f) (
    int unit);

/**
 * \brief returns define data of nof_phases
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_phases'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phases - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_nof_phases_get_f) (
    int unit);

/**
 * \brief returns define data of nof_eedb_mags
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_eedb_mags'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_eedb_mags - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_nof_eedb_mags_get_f) (
    int unit);

/**
 * \brief returns define data of nof_eedb_banks
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_eedb_banks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_eedb_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_nof_eedb_banks_get_f) (
    int unit);

/**
 * \brief returns define data of nof_phases_per_eedb_bank
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_phases_per_eedb_bank'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phases_per_eedb_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_nof_phases_per_eedb_bank_get_f) (
    int unit);

/**
 * \brief returns define data of nof_phases_per_eedb_bank_size
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_phases_per_eedb_bank_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phases_per_eedb_bank_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_nof_phases_per_eedb_bank_size_get_f) (
    int unit);

/**
 * \brief returns define data of phase_bank_select_default
 * Module - 'mdb', Submodule - 'eedb', data - 'phase_bank_select_default'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_bank_select_default - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_phase_bank_select_default_get_f) (
    int unit);

/**
 * \brief returns define data of entry_format_bits
 * Module - 'mdb', Submodule - 'eedb', data - 'entry_format_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     entry_format_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_entry_format_bits_get_f) (
    int unit);

/**
 * \brief returns define data of entry_format_encoding_bits
 * Module - 'mdb', Submodule - 'eedb', data - 'entry_format_encoding_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     entry_format_encoding_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_entry_format_encoding_bits_get_f) (
    int unit);

/**
 * \brief returns define data of bank_id_bits
 * Module - 'mdb', Submodule - 'eedb', data - 'bank_id_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bank_id_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_bank_id_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of entry_bank
 * Module - 'mdb', Submodule - 'eedb', data - 'entry_bank'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     entry_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_entry_bank_get_f) (
    int unit);

/**
 * \brief returns numeric data of abk_bank
 * Module - 'mdb', Submodule - 'eedb', data - 'abk_bank'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     abk_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_eedb_abk_bank_get_f) (
    int unit);

/**
 * \brief get table phase_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] phase_number - 
 * 
 * \return
 *     phase_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_eedb_phase_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_eedb_phase_info_t *(
    *dnx_data_mdb_eedb_phase_info_get_f) (
    int unit,
    int phase_number);

/**
 * \brief get table phase_ll_bucket_enable entry 
 * 
 * \param [in] unit - unit #
 * \param [in] phase_number - 
 * 
 * \return
 *     phase_ll_bucket_enable - returns the relevant entry values grouped in struct - see dnx_data_mdb_eedb_phase_ll_bucket_enable_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_eedb_phase_ll_bucket_enable_t *(
    *dnx_data_mdb_eedb_phase_ll_bucket_enable_get_f) (
    int unit,
    int phase_number);

/**
 * \brief get table phase_to_table entry 
 * 
 * \param [in] unit - unit #
 * \param [in] eedb_mem_type - 
 * \param [in] phase_number - 
 * 
 * \return
 *     phase_to_table - returns the relevant entry values grouped in struct - see dnx_data_mdb_eedb_phase_to_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_eedb_phase_to_table_t *(
    *dnx_data_mdb_eedb_phase_to_table_get_f) (
    int unit,
    int eedb_mem_type,
    int phase_number);

/**
 * \brief get table outlif_physical_phase_granularity entry 
 * 
 * \param [in] unit - unit #
 * \param [in] outlif_physical_phase - 
 * 
 * \return
 *     outlif_physical_phase_granularity - returns the relevant entry values grouped in struct - see dnx_data_mdb_eedb_outlif_physical_phase_granularity_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_eedb_outlif_physical_phase_granularity_t *(
    *dnx_data_mdb_eedb_outlif_physical_phase_granularity_get_f) (
    int unit,
    int outlif_physical_phase);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MDB - EEDB:
 * {
 */
/**
 * \brief Interface for mdb eedb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_mdb_eedb_feature_get_f feature_get;
    /**
     * returns define data of phase_map_bits
     */
    dnx_data_mdb_eedb_phase_map_bits_get_f phase_map_bits_get;
    /**
     * returns define data of phase_map_array_size
     */
    dnx_data_mdb_eedb_phase_map_array_size_get_f phase_map_array_size_get;
    /**
     * returns define data of nof_phase_per_mag
     */
    dnx_data_mdb_eedb_nof_phase_per_mag_get_f nof_phase_per_mag_get;
    /**
     * returns define data of nof_phases
     */
    dnx_data_mdb_eedb_nof_phases_get_f nof_phases_get;
    /**
     * returns define data of nof_eedb_mags
     */
    dnx_data_mdb_eedb_nof_eedb_mags_get_f nof_eedb_mags_get;
    /**
     * returns define data of nof_eedb_banks
     */
    dnx_data_mdb_eedb_nof_eedb_banks_get_f nof_eedb_banks_get;
    /**
     * returns define data of nof_phases_per_eedb_bank
     */
    dnx_data_mdb_eedb_nof_phases_per_eedb_bank_get_f nof_phases_per_eedb_bank_get;
    /**
     * returns define data of nof_phases_per_eedb_bank_size
     */
    dnx_data_mdb_eedb_nof_phases_per_eedb_bank_size_get_f nof_phases_per_eedb_bank_size_get;
    /**
     * returns define data of phase_bank_select_default
     */
    dnx_data_mdb_eedb_phase_bank_select_default_get_f phase_bank_select_default_get;
    /**
     * returns define data of entry_format_bits
     */
    dnx_data_mdb_eedb_entry_format_bits_get_f entry_format_bits_get;
    /**
     * returns define data of entry_format_encoding_bits
     */
    dnx_data_mdb_eedb_entry_format_encoding_bits_get_f entry_format_encoding_bits_get;
    /**
     * returns define data of bank_id_bits
     */
    dnx_data_mdb_eedb_bank_id_bits_get_f bank_id_bits_get;
    /**
     * returns numeric data of entry_bank
     */
    dnx_data_mdb_eedb_entry_bank_get_f entry_bank_get;
    /**
     * returns numeric data of abk_bank
     */
    dnx_data_mdb_eedb_abk_bank_get_f abk_bank_get;
    /**
     * get table phase_info entry 
     */
    dnx_data_mdb_eedb_phase_info_get_f phase_info_get;
    /**
     * get general info table about table (for example key size)phase_info info
     */
    dnxc_data_table_info_get_f phase_info_info_get;
    /**
     * get table phase_ll_bucket_enable entry 
     */
    dnx_data_mdb_eedb_phase_ll_bucket_enable_get_f phase_ll_bucket_enable_get;
    /**
     * get general info table about table (for example key size)phase_ll_bucket_enable info
     */
    dnxc_data_table_info_get_f phase_ll_bucket_enable_info_get;
    /**
     * get table phase_to_table entry 
     */
    dnx_data_mdb_eedb_phase_to_table_get_f phase_to_table_get;
    /**
     * get general info table about table (for example key size)phase_to_table info
     */
    dnxc_data_table_info_get_f phase_to_table_info_get;
    /**
     * get table outlif_physical_phase_granularity entry 
     */
    dnx_data_mdb_eedb_outlif_physical_phase_granularity_get_f outlif_physical_phase_granularity_get;
    /**
     * get general info table about table (for example key size)outlif_physical_phase_granularity info
     */
    dnxc_data_table_info_get_f outlif_physical_phase_granularity_info_get;
} dnx_data_if_mdb_eedb_t;

/*
 * }
 */

/*
 * SUBMODULE  - KAPS:
 * 
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule kaps table big_bb_blk_id_mapping
 */
typedef struct
{
    uint32 global_macro_index;
} dnx_data_mdb_kaps_big_bb_blk_id_mapping_t;

/**
 * \brief Holds values of submodule kaps table db_info
 */
typedef struct
{
    dbal_physical_tables_e dbal_id;
    mdb_physical_table_e mdb_bb_id;
    mdb_physical_table_e mdb_ads_id;
    mdb_physical_table_e mdb_direct_id;
    char *name;
    dbal_tables_e dbal_table_db_atr;
    int nof_rows_in_rpb;
    int nof_rows_in_small_ads;
    int nof_rows_in_small_bb;
    int nof_rows_in_small_rpb_hitbits;
    int nof_connected_big_bbs;
    int nof_result_types;
} dnx_data_mdb_kaps_db_info_t;

/**
 * \brief Holds values of submodule kaps table db_supported_ad_sizes
 */
typedef struct
{
    uint8 is_supported;
} dnx_data_mdb_kaps_db_supported_ad_sizes_t;

/**
 * \brief Holds values of submodule kaps table db_access_info
 */
typedef struct
{
    soc_reg_t rpb_global_cfg_reg;
    soc_reg_t tcam_scan_cfg_reg;
    soc_reg_t bb_global_cfg_reg;
    soc_field_t bb_global_cfg_rpb_sel_field;
    soc_mem_t tcam_cmd_mem;
    soc_mem_t small_ads_mem;
    soc_mem_t small_bb_mem;
    soc_mem_t search_cmd_mem;
} dnx_data_mdb_kaps_db_access_info_t;

/**
 * \brief Holds values of submodule kaps table mdb_28_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
} dnx_data_mdb_kaps_mdb_28_info_t;

/**
 * \brief Holds values of submodule kaps table mdb_53_info
 */
typedef struct
{
    dbal_tables_e dbal_table;
} dnx_data_mdb_kaps_mdb_53_info_t;

/**
 * \brief Holds values of submodule kaps table kaps_lookup_result
 */
typedef struct
{
    uint32 lookup_result;
} dnx_data_mdb_kaps_kaps_lookup_result_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_mdb_kaps_flex_bb_row,
    dnx_data_mdb_kaps_tcam_read_valid_bits_lsbits,
    dnx_data_mdb_kaps_hitbit_support,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_kaps_feature_nof
} dnx_data_mdb_kaps_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_mdb_kaps_feature_get_f) (
    int unit,
    dnx_data_mdb_kaps_feature_e feature);

/**
 * \brief returns define data of nof_dbs
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_dbs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dbs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_nof_dbs_get_f) (
    int unit);

/**
 * \brief returns define data of nof_small_bbs
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_small_bbs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_small_bbs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_nof_small_bbs_get_f) (
    int unit);

/**
 * \brief returns define data of nof_rows_in_rpb_max
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_rows_in_rpb_max'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rows_in_rpb_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_nof_rows_in_rpb_max_get_f) (
    int unit);

/**
 * \brief returns define data of nof_rows_in_small_ads_max
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_rows_in_small_ads_max'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rows_in_small_ads_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_nof_rows_in_small_ads_max_get_f) (
    int unit);

/**
 * \brief returns define data of nof_rows_in_small_bb_max
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_rows_in_small_bb_max'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rows_in_small_bb_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_nof_rows_in_small_bb_max_get_f) (
    int unit);

/**
 * \brief returns define data of nof_rows_in_small_rpb_hitbits_max
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_rows_in_small_rpb_hitbits_max'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rows_in_small_rpb_hitbits_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_nof_rows_in_small_rpb_hitbits_max_get_f) (
    int unit);

/**
 * \brief returns define data of nof_big_bbs_blk_ids
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_big_bbs_blk_ids'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_big_bbs_blk_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_nof_big_bbs_blk_ids_get_f) (
    int unit);

/**
 * \brief returns define data of nof_bytes_in_hitbit_row
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_bytes_in_hitbit_row'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bytes_in_hitbit_row - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_nof_bytes_in_hitbit_row_get_f) (
    int unit);

/**
 * \brief returns define data of key_lsn_bits
 * Module - 'mdb', Submodule - 'kaps', data - 'key_lsn_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     key_lsn_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_key_lsn_bits_get_f) (
    int unit);

/**
 * \brief returns define data of key_prefix_length
 * Module - 'mdb', Submodule - 'kaps', data - 'key_prefix_length'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     key_prefix_length - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_key_prefix_length_get_f) (
    int unit);

/**
 * \brief returns define data of max_prefix_in_bb_row
 * Module - 'mdb', Submodule - 'kaps', data - 'max_prefix_in_bb_row'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_prefix_in_bb_row - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_max_prefix_in_bb_row_get_f) (
    int unit);

/**
 * \brief returns define data of key_width_in_bits
 * Module - 'mdb', Submodule - 'kaps', data - 'key_width_in_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     key_width_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_key_width_in_bits_get_f) (
    int unit);

/**
 * \brief returns define data of bb_byte_width
 * Module - 'mdb', Submodule - 'kaps', data - 'bb_byte_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bb_byte_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_bb_byte_width_get_f) (
    int unit);

/**
 * \brief returns define data of rpb_byte_width
 * Module - 'mdb', Submodule - 'kaps', data - 'rpb_byte_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rpb_byte_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_rpb_byte_width_get_f) (
    int unit);

/**
 * \brief returns define data of ads_byte_width
 * Module - 'mdb', Submodule - 'kaps', data - 'ads_byte_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ads_byte_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_ads_byte_width_get_f) (
    int unit);

/**
 * \brief returns define data of direct_byte_width
 * Module - 'mdb', Submodule - 'kaps', data - 'direct_byte_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     direct_byte_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_direct_byte_width_get_f) (
    int unit);

/**
 * \brief returns define data of rpb_valid_bits
 * Module - 'mdb', Submodule - 'kaps', data - 'rpb_valid_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rpb_valid_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_rpb_valid_bits_get_f) (
    int unit);

/**
 * \brief returns define data of dynamic_memory_access_dpc
 * Module - 'mdb', Submodule - 'kaps', data - 'dynamic_memory_access_dpc'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dynamic_memory_access_dpc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_dynamic_memory_access_dpc_get_f) (
    int unit);

/**
 * \brief returns define data of max_fmt
 * Module - 'mdb', Submodule - 'kaps', data - 'max_fmt'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_fmt - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_max_fmt_get_f) (
    int unit);

/**
 * \brief returns define data of nof_app_ids
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_app_ids'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_app_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_nof_app_ids_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_result_types
 * Module - 'mdb', Submodule - 'kaps', data - 'max_nof_result_types'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_result_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_max_nof_result_types_get_f) (
    int unit);

/**
 * \brief returns numeric data of rpb_field
 * Module - 'mdb', Submodule - 'kaps', data - 'rpb_field'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rpb_field - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_rpb_field_get_f) (
    int unit);

/**
 * \brief returns numeric data of big_kaps_revision_val
 * Module - 'mdb', Submodule - 'kaps', data - 'big_kaps_revision_val'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     big_kaps_revision_val - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_big_kaps_revision_val_get_f) (
    int unit);

/**
 * \brief returns numeric data of small_kaps_ad_size_e
 * Module - 'mdb', Submodule - 'kaps', data - 'small_kaps_ad_size_e'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     small_kaps_ad_size_e - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mdb_kaps_small_kaps_ad_size_e_get_f) (
    int unit);

/**
 * \brief get table big_bb_blk_id_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] pair_id - 
 * \param [in] blk_id - 
 * 
 * \return
 *     big_bb_blk_id_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_big_bb_blk_id_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_kaps_big_bb_blk_id_mapping_t *(
    *dnx_data_mdb_kaps_big_bb_blk_id_mapping_get_f) (
    int unit,
    int pair_id,
    int blk_id);

/**
 * \brief get table db_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] db_idx - 
 * 
 * \return
 *     db_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_db_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_kaps_db_info_t *(
    *dnx_data_mdb_kaps_db_info_get_f) (
    int unit,
    int db_idx);

/**
 * \brief get table db_supported_ad_sizes entry 
 * 
 * \param [in] unit - unit #
 * \param [in] db_idx - 
 * \param [in] ad_size - 
 * 
 * \return
 *     db_supported_ad_sizes - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_db_supported_ad_sizes_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_kaps_db_supported_ad_sizes_t *(
    *dnx_data_mdb_kaps_db_supported_ad_sizes_get_f) (
    int unit,
    int db_idx,
    int ad_size);

/**
 * \brief get table db_access_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] db_idx - 
 * 
 * \return
 *     db_access_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_db_access_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_kaps_db_access_info_t *(
    *dnx_data_mdb_kaps_db_access_info_get_f) (
    int unit,
    int db_idx);

/**
 * \brief get table mdb_28_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table - 
 * 
 * \return
 *     mdb_28_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_mdb_28_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_kaps_mdb_28_info_t *(
    *dnx_data_mdb_kaps_mdb_28_info_get_f) (
    int unit,
    int mdb_table);

/**
 * \brief get table mdb_53_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_53_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_mdb_53_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_kaps_mdb_53_info_t *(
    *dnx_data_mdb_kaps_mdb_53_info_get_f) (
    int unit,
    int dbal_id);

/**
 * \brief get table kaps_lookup_result entry 
 * 
 * \param [in] unit - unit #
 * \param [in] db_idx - 
 * \param [in] core - 
 * 
 * \return
 *     kaps_lookup_result - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_kaps_lookup_result_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mdb_kaps_kaps_lookup_result_t *(
    *dnx_data_mdb_kaps_kaps_lookup_result_get_f) (
    int unit,
    int db_idx,
    int core);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MDB - KAPS:
 * {
 */
/**
 * \brief Interface for mdb kaps data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_mdb_kaps_feature_get_f feature_get;
    /**
     * returns define data of nof_dbs
     */
    dnx_data_mdb_kaps_nof_dbs_get_f nof_dbs_get;
    /**
     * returns define data of nof_small_bbs
     */
    dnx_data_mdb_kaps_nof_small_bbs_get_f nof_small_bbs_get;
    /**
     * returns define data of nof_rows_in_rpb_max
     */
    dnx_data_mdb_kaps_nof_rows_in_rpb_max_get_f nof_rows_in_rpb_max_get;
    /**
     * returns define data of nof_rows_in_small_ads_max
     */
    dnx_data_mdb_kaps_nof_rows_in_small_ads_max_get_f nof_rows_in_small_ads_max_get;
    /**
     * returns define data of nof_rows_in_small_bb_max
     */
    dnx_data_mdb_kaps_nof_rows_in_small_bb_max_get_f nof_rows_in_small_bb_max_get;
    /**
     * returns define data of nof_rows_in_small_rpb_hitbits_max
     */
    dnx_data_mdb_kaps_nof_rows_in_small_rpb_hitbits_max_get_f nof_rows_in_small_rpb_hitbits_max_get;
    /**
     * returns define data of nof_big_bbs_blk_ids
     */
    dnx_data_mdb_kaps_nof_big_bbs_blk_ids_get_f nof_big_bbs_blk_ids_get;
    /**
     * returns define data of nof_bytes_in_hitbit_row
     */
    dnx_data_mdb_kaps_nof_bytes_in_hitbit_row_get_f nof_bytes_in_hitbit_row_get;
    /**
     * returns define data of key_lsn_bits
     */
    dnx_data_mdb_kaps_key_lsn_bits_get_f key_lsn_bits_get;
    /**
     * returns define data of key_prefix_length
     */
    dnx_data_mdb_kaps_key_prefix_length_get_f key_prefix_length_get;
    /**
     * returns define data of max_prefix_in_bb_row
     */
    dnx_data_mdb_kaps_max_prefix_in_bb_row_get_f max_prefix_in_bb_row_get;
    /**
     * returns define data of key_width_in_bits
     */
    dnx_data_mdb_kaps_key_width_in_bits_get_f key_width_in_bits_get;
    /**
     * returns define data of bb_byte_width
     */
    dnx_data_mdb_kaps_bb_byte_width_get_f bb_byte_width_get;
    /**
     * returns define data of rpb_byte_width
     */
    dnx_data_mdb_kaps_rpb_byte_width_get_f rpb_byte_width_get;
    /**
     * returns define data of ads_byte_width
     */
    dnx_data_mdb_kaps_ads_byte_width_get_f ads_byte_width_get;
    /**
     * returns define data of direct_byte_width
     */
    dnx_data_mdb_kaps_direct_byte_width_get_f direct_byte_width_get;
    /**
     * returns define data of rpb_valid_bits
     */
    dnx_data_mdb_kaps_rpb_valid_bits_get_f rpb_valid_bits_get;
    /**
     * returns define data of dynamic_memory_access_dpc
     */
    dnx_data_mdb_kaps_dynamic_memory_access_dpc_get_f dynamic_memory_access_dpc_get;
    /**
     * returns define data of max_fmt
     */
    dnx_data_mdb_kaps_max_fmt_get_f max_fmt_get;
    /**
     * returns define data of nof_app_ids
     */
    dnx_data_mdb_kaps_nof_app_ids_get_f nof_app_ids_get;
    /**
     * returns define data of max_nof_result_types
     */
    dnx_data_mdb_kaps_max_nof_result_types_get_f max_nof_result_types_get;
    /**
     * returns numeric data of rpb_field
     */
    dnx_data_mdb_kaps_rpb_field_get_f rpb_field_get;
    /**
     * returns numeric data of big_kaps_revision_val
     */
    dnx_data_mdb_kaps_big_kaps_revision_val_get_f big_kaps_revision_val_get;
    /**
     * returns numeric data of small_kaps_ad_size_e
     */
    dnx_data_mdb_kaps_small_kaps_ad_size_e_get_f small_kaps_ad_size_e_get;
    /**
     * get table big_bb_blk_id_mapping entry 
     */
    dnx_data_mdb_kaps_big_bb_blk_id_mapping_get_f big_bb_blk_id_mapping_get;
    /**
     * get general info table about table (for example key size)big_bb_blk_id_mapping info
     */
    dnxc_data_table_info_get_f big_bb_blk_id_mapping_info_get;
    /**
     * get table db_info entry 
     */
    dnx_data_mdb_kaps_db_info_get_f db_info_get;
    /**
     * get general info table about table (for example key size)db_info info
     */
    dnxc_data_table_info_get_f db_info_info_get;
    /**
     * get table db_supported_ad_sizes entry 
     */
    dnx_data_mdb_kaps_db_supported_ad_sizes_get_f db_supported_ad_sizes_get;
    /**
     * get general info table about table (for example key size)db_supported_ad_sizes info
     */
    dnxc_data_table_info_get_f db_supported_ad_sizes_info_get;
    /**
     * get table db_access_info entry 
     */
    dnx_data_mdb_kaps_db_access_info_get_f db_access_info_get;
    /**
     * get general info table about table (for example key size)db_access_info info
     */
    dnxc_data_table_info_get_f db_access_info_info_get;
    /**
     * get table mdb_28_info entry 
     */
    dnx_data_mdb_kaps_mdb_28_info_get_f mdb_28_info_get;
    /**
     * get general info table about table (for example key size)mdb_28_info info
     */
    dnxc_data_table_info_get_f mdb_28_info_info_get;
    /**
     * get table mdb_53_info entry 
     */
    dnx_data_mdb_kaps_mdb_53_info_get_f mdb_53_info_get;
    /**
     * get general info table about table (for example key size)mdb_53_info info
     */
    dnxc_data_table_info_get_f mdb_53_info_info_get;
    /**
     * get table kaps_lookup_result entry 
     */
    dnx_data_mdb_kaps_kaps_lookup_result_get_f kaps_lookup_result_get;
    /**
     * get general info table about table (for example key size)kaps_lookup_result info
     */
    dnxc_data_table_info_get_f kaps_lookup_result_info_get;
} dnx_data_if_mdb_kaps_t;

/*
 * }
 */

/*
 * SUBMODULE  - FEATURE:
 * 
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_mdb_feature_step_table_supports_mix_ar_algo,
    dnx_data_mdb_feature_eedb_bank_traffic_lock,
    dnx_data_mdb_feature_em_dfg_ovf_cam_disabled,
    dnx_data_mdb_feature_em_mact_transplant_no_reply,
    dnx_data_mdb_feature_em_mact_use_refresh_on_insert,
    dnx_data_mdb_feature_em_mact_delete_transplant_no_reply,
    dnx_data_mdb_feature_em_mact_insert_flush_drop_on_exceed_limit,
    dnx_data_mdb_feature_em_sbus_interface_shutdown,
    dnx_data_mdb_feature_em_ecc_simple_command_deadlock,
    dnx_data_mdb_feature_em_compare_init,
    dnx_data_mdb_feature_bubble_pulse_width_too_short,
    dnx_data_mdb_feature_kaps_rpb_ecc_valid_shared,
    dnx_data_mdb_feature_kaps_rpb_bubble_not_synced,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_feature_feature_nof
} dnx_data_mdb_feature_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_mdb_feature_feature_get_f) (
    int unit,
    dnx_data_mdb_feature_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MDB - FEATURE:
 * {
 */
/**
 * \brief Interface for mdb feature data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_mdb_feature_feature_get_f feature_get;
} dnx_data_if_mdb_feature_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_MDB:
 * {
 */
/**
 * \brief Interface for mdb data
 */
typedef struct
{
    /**
     * Interface for mdb global data
     */
    dnx_data_if_mdb_global_t global;
    /**
     * Interface for mdb dh data
     */
    dnx_data_if_mdb_dh_t dh;
    /**
     * Interface for mdb pdbs data
     */
    dnx_data_if_mdb_pdbs_t pdbs;
    /**
     * Interface for mdb em data
     */
    dnx_data_if_mdb_em_t em;
    /**
     * Interface for mdb direct data
     */
    dnx_data_if_mdb_direct_t direct;
    /**
     * Interface for mdb eedb data
     */
    dnx_data_if_mdb_eedb_t eedb;
    /**
     * Interface for mdb kaps data
     */
    dnx_data_if_mdb_kaps_t kaps;
    /**
     * Interface for mdb feature data
     */
    dnx_data_if_mdb_feature_t feature;
} dnx_data_if_mdb_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_mdb_t dnx_data_mdb;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_MDB_H_*/
/* *INDENT-ON* */
