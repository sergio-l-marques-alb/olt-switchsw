/** \file dnx_data_internal_device.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_DEVICE_H_
/*{*/
#define _DNX_DATA_INTERNAL_DEVICE_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_device.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_device_submodule_general,
    dnx_data_device_submodule_regression,
    dnx_data_device_submodule_emulation,

    /**
     * Must be last one!
     */
    _dnx_data_device_submodule_nof
} dnx_data_device_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_device_general_feature_get(
    int unit,
    dnx_data_device_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_device_general_define_max_nof_system_ports,
    dnx_data_device_general_define_invalid_system_port,
    dnx_data_device_general_define_fmq_system_port,
    dnx_data_device_general_define_invalid_fap_id,
    dnx_data_device_general_define_fap_ids_per_core_bits,
    dnx_data_device_general_define_nof_cores,
    dnx_data_device_general_define_valid_cores_bitmap,
    dnx_data_device_general_define_nof_cores_for_traffic,
    dnx_data_device_general_define_max_nof_layer_protocols,
    dnx_data_device_general_define_core_max_nof_bits,
    dnx_data_device_general_define_max_nof_fap_ids_per_core,
    dnx_data_device_general_define_max_nof_fap_ids_per_device,
    dnx_data_device_general_define_core_clock_khz,
    dnx_data_device_general_define_system_ref_core_clock_khz,
    dnx_data_device_general_define_ref_core_clock_mhz,
    dnx_data_device_general_define_core_clock_ndiv_size,
    dnx_data_device_general_define_core_clock_mdiv_size,
    dnx_data_device_general_define_core_clock_ndiv_offset,
    dnx_data_device_general_define_core_clock_mdiv_offset,
    dnx_data_device_general_define_bus_size_in_bits,
    dnx_data_device_general_define_maximal_core_bandwidth_mbps,
    dnx_data_device_general_define_enforce_maximal_core_bandwidth,
    dnx_data_device_general_define_max_mpps,
    dnx_data_device_general_define_packet_per_clock,
    dnx_data_device_general_define_nof_faps,
    dnx_data_device_general_define_device_id,
    dnx_data_device_general_define_nof_sku_bits,
    dnx_data_device_general_define_bist_enable,
    dnx_data_device_general_define_nof_bits_for_nof_cores,

    /**
     * Must be last one!
     */
    _dnx_data_device_general_define_nof
} dnx_data_device_general_define_e;

/* Get Data */
/**
 * \brief returns define data of max_nof_system_ports
 * Module - 'device', Submodule - 'general', data - 'max_nof_system_ports'
 * Max number of system ports, may use software to indicate invalid system port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_system_ports - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_max_nof_system_ports_get(
    int unit);

/**
 * \brief returns define data of invalid_system_port
 * Module - 'device', Submodule - 'general', data - 'invalid_system_port'
 * invalid system port - defined as the last system port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     invalid_system_port - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_invalid_system_port_get(
    int unit);

/**
 * \brief returns define data of fmq_system_port
 * Module - 'device', Submodule - 'general', data - 'fmq_system_port'
 * FMQ reserved system port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_system_port - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_fmq_system_port_get(
    int unit);

/**
 * \brief returns define data of invalid_fap_id
 * Module - 'device', Submodule - 'general', data - 'invalid_fap_id'
 * invalid FAP id - defined as the last FAP id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     invalid_fap_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_invalid_fap_id_get(
    int unit);

/**
 * \brief returns define data of fap_ids_per_core_bits
 * Module - 'device', Submodule - 'general', data - 'fap_ids_per_core_bits'
 * number of bits in FAP IDs per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fap_ids_per_core_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_fap_ids_per_core_bits_get(
    int unit);

/**
 * \brief returns define data of nof_cores
 * Module - 'device', Submodule - 'general', data - 'nof_cores'
 * Number of cores in the device.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_nof_cores_get(
    int unit);

/**
 * \brief returns define data of valid_cores_bitmap
 * Module - 'device', Submodule - 'general', data - 'valid_cores_bitmap'
 * Bitmap of valid cores.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     valid_cores_bitmap - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_valid_cores_bitmap_get(
    int unit);

/**
 * \brief returns define data of nof_cores_for_traffic
 * Module - 'device', Submodule - 'general', data - 'nof_cores_for_traffic'
 * Number of cores in the device used for traffic.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cores_for_traffic - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_nof_cores_for_traffic_get(
    int unit);

/**
 * \brief returns define data of max_nof_layer_protocols
 * Module - 'device', Submodule - 'general', data - 'max_nof_layer_protocols'
 * Max number of layer protocols.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_layer_protocols - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_max_nof_layer_protocols_get(
    int unit);

/**
 * \brief returns numeric data of core_max_nof_bits
 * Module - 'device', Submodule - 'general', data - 'core_max_nof_bits'
 * Max number of cores bits to represent core. should be log2(nof_cores)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_max_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_core_max_nof_bits_get(
    int unit);

/**
 * \brief returns numeric data of max_nof_fap_ids_per_core
 * Module - 'device', Submodule - 'general', data - 'max_nof_fap_ids_per_core'
 * maximal number of FAP IDs per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_fap_ids_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_max_nof_fap_ids_per_core_get(
    int unit);

/**
 * \brief returns numeric data of max_nof_fap_ids_per_device
 * Module - 'device', Submodule - 'general', data - 'max_nof_fap_ids_per_device'
 * maximal number of FAP IDs per device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_fap_ids_per_device - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_max_nof_fap_ids_per_device_get(
    int unit);

/**
 * \brief returns numeric data of core_clock_khz
 * Module - 'device', Submodule - 'general', data - 'core_clock_khz'
 * Core clock frequency [KHZ]
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_clock_khz - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_core_clock_khz_get(
    int unit);

/**
 * \brief returns numeric data of system_ref_core_clock_khz
 * Module - 'device', Submodule - 'general', data - 'system_ref_core_clock_khz'
 * Specifies system reference clock speed in kHz.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     system_ref_core_clock_khz - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_system_ref_core_clock_khz_get(
    int unit);

/**
 * \brief returns numeric data of ref_core_clock_mhz
 * Module - 'device', Submodule - 'general', data - 'ref_core_clock_mhz'
 * Reference clock comes from the board
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ref_core_clock_mhz - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_ref_core_clock_mhz_get(
    int unit);

/**
 * \brief returns numeric data of core_clock_ndiv_size
 * Module - 'device', Submodule - 'general', data - 'core_clock_ndiv_size'
 * Size in bits of the NDIV of Core Clock PLL in the power-up configuration register, as sampled from the external pins
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_clock_ndiv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_core_clock_ndiv_size_get(
    int unit);

/**
 * \brief returns numeric data of core_clock_mdiv_size
 * Module - 'device', Submodule - 'general', data - 'core_clock_mdiv_size'
 * Size in bits of the MDIV of Core Clock PLL in the power-up configuration register, as sampled from the external pins
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_clock_mdiv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_core_clock_mdiv_size_get(
    int unit);

/**
 * \brief returns numeric data of core_clock_ndiv_offset
 * Module - 'device', Submodule - 'general', data - 'core_clock_ndiv_offset'
 * Offset in bits of the NDIV of Core Clock PLL in the power-up configuration register, as sampled from the external pins
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_clock_ndiv_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_core_clock_ndiv_offset_get(
    int unit);

/**
 * \brief returns numeric data of core_clock_mdiv_offset
 * Module - 'device', Submodule - 'general', data - 'core_clock_mdiv_offset'
 * Offset in bits of the MDIV of Core Clock PLL in the power-up configuration register, as sampled from the external pins
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_clock_mdiv_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_core_clock_mdiv_offset_get(
    int unit);

/**
 * \brief returns numeric data of bus_size_in_bits
 * Module - 'device', Submodule - 'general', data - 'bus_size_in_bits'
 * Core bus size in bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bus_size_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_bus_size_in_bits_get(
    int unit);

/**
 * \brief returns numeric data of maximal_core_bandwidth_mbps
 * Module - 'device', Submodule - 'general', data - 'maximal_core_bandwidth_mbps'
 * Maximal core bandwidth in Mbits per second
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     maximal_core_bandwidth_mbps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_maximal_core_bandwidth_mbps_get(
    int unit);

/**
 * \brief returns numeric data of enforce_maximal_core_bandwidth
 * Module - 'device', Submodule - 'general', data - 'enforce_maximal_core_bandwidth'
 * When set to 0, SDK will not return an error when user tries to configure ports with total speed that exceeds the max bandiwdth limit
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     enforce_maximal_core_bandwidth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_enforce_maximal_core_bandwidth_get(
    int unit);

/**
 * \brief returns numeric data of max_mpps
 * Module - 'device', Submodule - 'general', data - 'max_mpps'
 * maximal supported device bandwidth in MPPS
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_mpps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_max_mpps_get(
    int unit);

/**
 * \brief returns numeric data of packet_per_clock
 * Module - 'device', Submodule - 'general', data - 'packet_per_clock'
 * Core packets per clock
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_per_clock - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_packet_per_clock_get(
    int unit);

/**
 * \brief returns numeric data of nof_faps
 * Module - 'device', Submodule - 'general', data - 'nof_faps'
 * Number of supported faps in the system.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_faps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_nof_faps_get(
    int unit);

/**
 * \brief returns numeric data of device_id
 * Module - 'device', Submodule - 'general', data - 'device_id'
 * BCM Device ID (8XXX)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     device_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_device_id_get(
    int unit);

/**
 * \brief returns numeric data of nof_sku_bits
 * Module - 'device', Submodule - 'general', data - 'nof_sku_bits'
 * nof LSB bits of device_is dedicated for SKU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sku_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_nof_sku_bits_get(
    int unit);

/**
 * \brief returns numeric data of bist_enable
 * Module - 'device', Submodule - 'general', data - 'bist_enable'
 * Determines if to run Memory Built-In Self-Test (MBIST) of internal memories (tables) during startup.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bist_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_bist_enable_get(
    int unit);

/**
 * \brief returns numeric data of nof_bits_for_nof_cores
 * Module - 'device', Submodule - 'general', data - 'nof_bits_for_nof_cores'
 * Number of bits to represent core.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_for_nof_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_general_nof_bits_for_nof_cores_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_device_general_table_ecc_err_masking,
    dnx_data_device_general_table_ctest_full_file_indentifier,

    /**
     * Must be last one!
     */
    _dnx_data_device_general_table_nof
} dnx_data_device_general_table_e;

/* Get Data */
/**
 * \brief get table ecc_err_masking entry 
 * Table containing all registers and fields that need their ECC errors to be masked due to issues when reading
 * 
 * \param [in] unit - unit #
 * \param [in] block_type - HW Block type
 * 
 * \return
 *     ecc_err_masking - returns the relevant entry values grouped in struct - see dnx_data_device_general_ecc_err_masking_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_device_general_ecc_err_masking_t * dnx_data_device_general_ecc_err_masking_get(
    int unit,
    int block_type);

/**
 * \brief get table ctest_full_file_indentifier entry 
 * Indicates what is the suffix of tcl/tlist files generated by ctest export full command.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ctest_full_file_indentifier - returns the relevant entry values grouped in struct - see dnx_data_device_general_ctest_full_file_indentifier_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_device_general_ctest_full_file_indentifier_t * dnx_data_device_general_ctest_full_file_indentifier_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'device', Submodule - 'general', table - 'ecc_err_masking'
 * Table containing all registers and fields that need their ECC errors to be masked due to issues when reading
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_device_general_ecc_err_masking_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'device', Submodule - 'general', table - 'ctest_full_file_indentifier'
 * Indicates what is the suffix of tcl/tlist files generated by ctest export full command.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_device_general_ctest_full_file_indentifier_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)ecc_err_masking info
 * Table containing all registers and fields that need their ECC errors to be masked due to issues when reading
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecc_err_masking - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_device_general_ecc_err_masking_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)ctest_full_file_indentifier info
 * Indicates what is the suffix of tcl/tlist files generated by ctest export full command.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ctest_full_file_indentifier - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_device_general_ctest_full_file_indentifier_info_get(
    int unit);

/*
 * SUBMODULE REGRESSION:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_device_regression_feature_get(
    int unit,
    dnx_data_device_regression_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_device_regression_define_nof
} dnx_data_device_regression_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_device_regression_table_regression_parms,

    /**
     * Must be last one!
     */
    _dnx_data_device_regression_table_nof
} dnx_data_device_regression_table_e;

/* Get Data */
/**
 * \brief get table regression_parms entry 
 * system mode SoC property
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     regression_parms - returns the relevant entry values grouped in struct - see dnx_data_device_regression_regression_parms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_device_regression_regression_parms_t * dnx_data_device_regression_regression_parms_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'device', Submodule - 'regression', table - 'regression_parms'
 * system mode SoC property
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_device_regression_regression_parms_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)regression_parms info
 * system mode SoC property
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     regression_parms - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_device_regression_regression_parms_info_get(
    int unit);

/*
 * SUBMODULE EMULATION:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_device_emulation_feature_get(
    int unit,
    dnx_data_device_emulation_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_device_emulation_define_emulation_system,

    /**
     * Must be last one!
     */
    _dnx_data_device_emulation_define_nof
} dnx_data_device_emulation_define_e;

/* Get Data */
/**
 * \brief returns numeric data of emulation_system
 * Module - 'device', Submodule - 'emulation', data - 'emulation_system'
 * Checking if the device is ran on emulation.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     emulation_system - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_device_emulation_emulation_system_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_device_emulation_table_nof
} dnx_data_device_emulation_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_device_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_DEVICE_H_*/
/* *INDENT-ON* */
