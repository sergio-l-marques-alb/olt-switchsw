/** \file dnx_data_trunk.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_TRUNK_H_
/*{*/
#define _DNX_DATA_TRUNK_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_trunk.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_trunk
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_trunk_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - PARAMETERS:
 * Trunk parameters and defines
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule parameters table pool_info
 * Table info:
 * this table contains the information per pool of trunks
 */
typedef struct
{
    /**
     * maxmimal number of members in a group in this pool
     */
    uint32 max_nof_members_in_group;
    /**
     * maximal number of groups in this pool
     */
    uint32 max_nof_groups_in_pool;
    /**
     * mapping to the actual value the HW needs to get to represent given pool mode
     */
    int pool_hw_mode;
} dnx_data_trunk_parameters_pool_info_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * device is supporting backup destinations for trunk members
     */
    dnx_data_trunk_parameters_backup_destination,

    /**
     * Must be last one!
     */
    _dnx_data_trunk_parameters_feature_nof
} dnx_data_trunk_parameters_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trunk_parameters_feature_get_f) (
    int unit,
    dnx_data_trunk_parameters_feature_e feature);

/**
 * \brief returns define data of nof_pools
 * Module - 'trunk', Submodule - 'parameters', data - 'nof_pools'
 * trunk module might be represented with pools in certain architectures, this number represents the number of pools currently supported for this device. each pool has a constant amount of members.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pools - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_parameters_nof_pools_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_members_in_pool
 * Module - 'trunk', Submodule - 'parameters', data - 'max_nof_members_in_pool'
 * the maximal amount of members that a pool can contain.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_members_in_pool - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_parameters_max_nof_members_in_pool_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_groups_in_pool
 * Module - 'trunk', Submodule - 'parameters', data - 'max_nof_groups_in_pool'
 * the maximal amount of groups that a pool can contain.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_groups_in_pool - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_parameters_max_nof_groups_in_pool_get_f) (
    int unit);

/**
 * \brief returns define data of spa_pool_shift
 * Module - 'trunk', Submodule - 'parameters', data - 'spa_pool_shift'
 * bit shifts to describe the pool of a trunk in a System Port Aggregate
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     spa_pool_shift - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_parameters_spa_pool_shift_get_f) (
    int unit);

/**
 * \brief returns define data of spa_type_shift
 * Module - 'trunk', Submodule - 'parameters', data - 'spa_type_shift'
 * bit shifts to describe trunk type in a System Port Aggregate
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     spa_type_shift - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_parameters_spa_type_shift_get_f) (
    int unit);

/**
 * \brief get table pool_info entry 
 * this table contains the information per pool of trunks
 * 
 * \param [in] unit - unit #
 * \param [in] pool_index - pool index
 * 
 * \return
 *     pool_info - returns the relevant entry values grouped in struct - see dnx_data_trunk_parameters_pool_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_trunk_parameters_pool_info_t *(
    *dnx_data_trunk_parameters_pool_info_get_f) (
    int unit,
    int pool_index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRUNK - PARAMETERS:
 * {
 */
/**
 * \brief Interface for trunk parameters data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trunk_parameters_feature_get_f feature_get;
    /**
     * returns define data of nof_pools
     */
    dnx_data_trunk_parameters_nof_pools_get_f nof_pools_get;
    /**
     * returns define data of max_nof_members_in_pool
     */
    dnx_data_trunk_parameters_max_nof_members_in_pool_get_f max_nof_members_in_pool_get;
    /**
     * returns define data of max_nof_groups_in_pool
     */
    dnx_data_trunk_parameters_max_nof_groups_in_pool_get_f max_nof_groups_in_pool_get;
    /**
     * returns define data of spa_pool_shift
     */
    dnx_data_trunk_parameters_spa_pool_shift_get_f spa_pool_shift_get;
    /**
     * returns define data of spa_type_shift
     */
    dnx_data_trunk_parameters_spa_type_shift_get_f spa_type_shift_get;
    /**
     * get table pool_info entry 
     */
    dnx_data_trunk_parameters_pool_info_get_f pool_info_get;
    /**
     * get general info table about table (for example key size)pool_info info
     */
    dnxc_data_table_info_get_f pool_info_info_get;
} dnx_data_if_trunk_parameters_t;

/*
 * }
 */

/*
 * SUBMODULE  - PSC:
 * Trunk Port Selection Criteria (PSC) Data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * is Multiply and Divide PSC supported
     */
    dnx_data_trunk_psc_multiply_and_divide,
    /**
     * is Smooth Division PSC supported
     */
    dnx_data_trunk_psc_smooth_division,
    /**
     * is Consistant Hashing PSC supported
     */
    dnx_data_trunk_psc_consistant_hashing,
    /**
     * is Consistant Hashing PSC supported the max group size or max group size minus 1
     */
    dnx_data_trunk_psc_consistant_hashing_max_group,

    /**
     * Must be last one!
     */
    _dnx_data_trunk_psc_feature_nof
} dnx_data_trunk_psc_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trunk_psc_feature_get_f) (
    int unit,
    dnx_data_trunk_psc_feature_e feature);

/**
 * \brief returns numeric data of consistant_hashing_nof_resources
 * Module - 'trunk', Submodule - 'psc', data - 'consistant_hashing_nof_resources'
 * nof resources that CHM needs to manage - those are the reduced resources
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     consistant_hashing_nof_resources - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_psc_consistant_hashing_nof_resources_get_f) (
    int unit);

/**
 * \brief returns numeric data of consistant_hashing_resource_to_entries_ratio
 * Module - 'trunk', Submodule - 'psc', data - 'consistant_hashing_resource_to_entries_ratio'
 * defines how many HW entries each resource represents
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     consistant_hashing_resource_to_entries_ratio - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_psc_consistant_hashing_resource_to_entries_ratio_get_f) (
    int unit);

/**
 * \brief returns define data of consistant_hashing_small_group_size_in_bits
 * Module - 'trunk', Submodule - 'psc', data - 'consistant_hashing_small_group_size_in_bits'
 * size in bits of small groups in c-lag
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     consistant_hashing_small_group_size_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_psc_consistant_hashing_small_group_size_in_bits_get_f) (
    int unit);

/**
 * \brief returns define data of smooth_division_max_nof_member
 * Module - 'trunk', Submodule - 'psc', data - 'smooth_division_max_nof_member'
 * max number of member is trunk group with smooth division as PSC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     smooth_division_max_nof_member - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_psc_smooth_division_max_nof_member_get_f) (
    int unit);

/**
 * \brief returns define data of smooth_division_entries_per_profile
 * Module - 'trunk', Submodule - 'psc', data - 'smooth_division_entries_per_profile'
 * logical number of entries dedicated in the HW per SMD profile
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     smooth_division_entries_per_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_psc_smooth_division_entries_per_profile_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRUNK - PSC:
 * {
 */
/**
 * \brief Interface for trunk psc data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trunk_psc_feature_get_f feature_get;
    /**
     * returns numeric data of consistant_hashing_nof_resources
     */
    dnx_data_trunk_psc_consistant_hashing_nof_resources_get_f consistant_hashing_nof_resources_get;
    /**
     * returns numeric data of consistant_hashing_resource_to_entries_ratio
     */
    dnx_data_trunk_psc_consistant_hashing_resource_to_entries_ratio_get_f consistant_hashing_resource_to_entries_ratio_get;
    /**
     * returns define data of consistant_hashing_small_group_size_in_bits
     */
    dnx_data_trunk_psc_consistant_hashing_small_group_size_in_bits_get_f consistant_hashing_small_group_size_in_bits_get;
    /**
     * returns define data of smooth_division_max_nof_member
     */
    dnx_data_trunk_psc_smooth_division_max_nof_member_get_f smooth_division_max_nof_member_get;
    /**
     * returns define data of smooth_division_entries_per_profile
     */
    dnx_data_trunk_psc_smooth_division_entries_per_profile_get_f smooth_division_entries_per_profile_get;
} dnx_data_if_trunk_psc_t;

/*
 * }
 */

/*
 * SUBMODULE  - EGRESS_TRUNK:
 * Egress Trunks - for egress MC
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * device is supporting egress trunks
     */
    dnx_data_trunk_egress_trunk_is_supported,
    /**
     * device is supporting multiple modes for sizes of egress lags
     */
    dnx_data_trunk_egress_trunk_multiple_egress_trunk_sizes,

    /**
     * Must be last one!
     */
    _dnx_data_trunk_egress_trunk_feature_nof
} dnx_data_trunk_egress_trunk_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trunk_egress_trunk_feature_get_f) (
    int unit,
    dnx_data_trunk_egress_trunk_feature_e feature);

/**
 * \brief returns numeric data of nof
 * Module - 'trunk', Submodule - 'egress_trunk', data - 'nof'
 * number of egress trunks
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_egress_trunk_nof_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_lb_keys_per_profile
 * Module - 'trunk', Submodule - 'egress_trunk', data - 'nof_lb_keys_per_profile'
 * number of lb keys per Egress trunk
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lb_keys_per_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_egress_trunk_nof_lb_keys_per_profile_get_f) (
    int unit);

/**
 * \brief returns numeric data of dbal_egress_trunk_index_multiplier
 * Module - 'trunk', Submodule - 'egress_trunk', data - 'dbal_egress_trunk_index_multiplier'
 * multiplier size for mapping dbal key EGRESS_TRUNK_INDEX in dbal table TRUNK_EGRESS_MC_RESOLUTION
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dbal_egress_trunk_index_multiplier - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_egress_trunk_dbal_egress_trunk_index_multiplier_get_f) (
    int unit);

/**
 * \brief returns numeric data of dbal_entry_index_divider
 * Module - 'trunk', Submodule - 'egress_trunk', data - 'dbal_entry_index_divider'
 * divider size for mapping dbal key ENTRY_INDEX in dbal table TRUNK_EGRESS_MC_RESOLUTION
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dbal_entry_index_divider - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_egress_trunk_dbal_entry_index_divider_get_f) (
    int unit);

/**
 * \brief returns numeric data of dbal_entry_index_msb_multiplier
 * Module - 'trunk', Submodule - 'egress_trunk', data - 'dbal_entry_index_msb_multiplier'
 * multiplier size for mapping dbal key ENTRY_INDEX msb in dbal table TRUNK_EGRESS_MC_RESOLUTION
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dbal_entry_index_msb_multiplier - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_egress_trunk_dbal_entry_index_msb_multiplier_get_f) (
    int unit);

/**
 * \brief returns numeric data of size_mode
 * Module - 'trunk', Submodule - 'egress_trunk', data - 'size_mode'
 * HW mode relevant for group size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     size_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_egress_trunk_size_mode_get_f) (
    int unit);

/**
 * \brief returns numeric data of invalid_pp_dsp
 * Module - 'trunk', Submodule - 'egress_trunk', data - 'invalid_pp_dsp'
 * invalid pp dsp that should be connected to invalid out port for egress trunk
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     invalid_pp_dsp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_egress_trunk_invalid_pp_dsp_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRUNK - EGRESS_TRUNK:
 * {
 */
/**
 * \brief Interface for trunk egress_trunk data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trunk_egress_trunk_feature_get_f feature_get;
    /**
     * returns numeric data of nof
     */
    dnx_data_trunk_egress_trunk_nof_get_f nof_get;
    /**
     * returns numeric data of nof_lb_keys_per_profile
     */
    dnx_data_trunk_egress_trunk_nof_lb_keys_per_profile_get_f nof_lb_keys_per_profile_get;
    /**
     * returns numeric data of dbal_egress_trunk_index_multiplier
     */
    dnx_data_trunk_egress_trunk_dbal_egress_trunk_index_multiplier_get_f dbal_egress_trunk_index_multiplier_get;
    /**
     * returns numeric data of dbal_entry_index_divider
     */
    dnx_data_trunk_egress_trunk_dbal_entry_index_divider_get_f dbal_entry_index_divider_get;
    /**
     * returns numeric data of dbal_entry_index_msb_multiplier
     */
    dnx_data_trunk_egress_trunk_dbal_entry_index_msb_multiplier_get_f dbal_entry_index_msb_multiplier_get;
    /**
     * returns numeric data of size_mode
     */
    dnx_data_trunk_egress_trunk_size_mode_get_f size_mode_get;
    /**
     * returns numeric data of invalid_pp_dsp
     */
    dnx_data_trunk_egress_trunk_invalid_pp_dsp_get_f invalid_pp_dsp_get;
} dnx_data_if_trunk_egress_trunk_t;

/*
 * }
 */

/*
 * SUBMODULE  - GRACEFUL:
 * data regarding graceful modification of trunks
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * allow changing lag in an atomic action in the device's local scope
     */
    dnx_data_trunk_graceful_allow,

    /**
     * Must be last one!
     */
    _dnx_data_trunk_graceful_feature_nof
} dnx_data_trunk_graceful_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trunk_graceful_feature_get_f) (
    int unit,
    dnx_data_trunk_graceful_feature_e feature);

/**
 * \brief returns define data of first_hw_configuration
 * Module - 'trunk', Submodule - 'graceful', data - 'first_hw_configuration'
 * hw value to indicate first configuration is currently used
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     first_hw_configuration - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_graceful_first_hw_configuration_get_f) (
    int unit);

/**
 * \brief returns define data of second_hw_configuration
 * Module - 'trunk', Submodule - 'graceful', data - 'second_hw_configuration'
 * hw value to indicate second configuration is currently used
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     second_hw_configuration - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_graceful_second_hw_configuration_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRUNK - GRACEFUL:
 * {
 */
/**
 * \brief Interface for trunk graceful data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trunk_graceful_feature_get_f feature_get;
    /**
     * returns define data of first_hw_configuration
     */
    dnx_data_trunk_graceful_first_hw_configuration_get_f first_hw_configuration_get;
    /**
     * returns define data of second_hw_configuration
     */
    dnx_data_trunk_graceful_second_hw_configuration_get_f second_hw_configuration_get;
} dnx_data_if_trunk_graceful_t;

/*
 * }
 */

/*
 * SUBMODULE  - FLOW_AGG:
 * data regarding flow aggregation
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_trunk_flow_agg_feature_nof
} dnx_data_trunk_flow_agg_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trunk_flow_agg_feature_get_f) (
    int unit,
    dnx_data_trunk_flow_agg_feature_e feature);

/**
 * \brief returns numeric data of flow_aggs_in_bundle
 * Module - 'trunk', Submodule - 'flow_agg', data - 'flow_aggs_in_bundle'
 * how many flow aggregates are in a single bundle
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_aggs_in_bundle - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_flow_agg_flow_aggs_in_bundle_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_flow_aggs
 * Module - 'trunk', Submodule - 'flow_agg', data - 'nof_flow_aggs'
 * total number of flow aggregates
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_flow_aggs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_flow_agg_nof_flow_aggs_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_flow_agg_bundles
 * Module - 'trunk', Submodule - 'flow_agg', data - 'nof_flow_agg_bundles'
 * total number of flow aggregate bundles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_flow_agg_bundles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_flow_agg_nof_flow_agg_bundles_get_f) (
    int unit);

/**
 * \brief returns numeric data of first_flow_agg_id
 * Module - 'trunk', Submodule - 'flow_agg', data - 'first_flow_agg_id'
 * first flow aggregate id, when presented as a general flow
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     first_flow_agg_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trunk_flow_agg_first_flow_agg_id_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRUNK - FLOW_AGG:
 * {
 */
/**
 * \brief Interface for trunk flow_agg data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trunk_flow_agg_feature_get_f feature_get;
    /**
     * returns numeric data of flow_aggs_in_bundle
     */
    dnx_data_trunk_flow_agg_flow_aggs_in_bundle_get_f flow_aggs_in_bundle_get;
    /**
     * returns numeric data of nof_flow_aggs
     */
    dnx_data_trunk_flow_agg_nof_flow_aggs_get_f nof_flow_aggs_get;
    /**
     * returns numeric data of nof_flow_agg_bundles
     */
    dnx_data_trunk_flow_agg_nof_flow_agg_bundles_get_f nof_flow_agg_bundles_get;
    /**
     * returns numeric data of first_flow_agg_id
     */
    dnx_data_trunk_flow_agg_first_flow_agg_id_get_f first_flow_agg_id_get;
} dnx_data_if_trunk_flow_agg_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_TRUNK:
 * {
 */
/**
 * \brief Interface for trunk data
 */
typedef struct
{
    /**
     * Interface for trunk parameters data
     */
    dnx_data_if_trunk_parameters_t parameters;
    /**
     * Interface for trunk psc data
     */
    dnx_data_if_trunk_psc_t psc;
    /**
     * Interface for trunk egress_trunk data
     */
    dnx_data_if_trunk_egress_trunk_t egress_trunk;
    /**
     * Interface for trunk graceful data
     */
    dnx_data_if_trunk_graceful_t graceful;
    /**
     * Interface for trunk flow_agg data
     */
    dnx_data_if_trunk_flow_agg_t flow_agg;
} dnx_data_if_trunk_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_trunk_t dnx_data_trunk;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_TRUNK_H_*/
/* *INDENT-ON* */
