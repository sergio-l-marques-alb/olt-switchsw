/** \file dnx_data_ppmc.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_PPMC_H_
/*{*/
#define _DNX_DATA_PPMC_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_ppmc.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_ppmc
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_ppmc_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - PARAM:
 * default values for the PPMC table actions
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Indicates if ppmc valid index range is configurable
     */
    dnx_data_ppmc_param_configurable_ppmc_range,

    /**
     * Must be last one!
     */
    _dnx_data_ppmc_param_feature_nof
} dnx_data_ppmc_param_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_ppmc_param_feature_get_f) (
    int unit,
    dnx_data_ppmc_param_feature_e feature);

/**
 * \brief returns define data of max_mc_replication_id
 * Module - 'ppmc', Submodule - 'param', data - 'max_mc_replication_id'
 * Maximum value of multicast replication in the PPMC table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_mc_replication_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_ppmc_param_max_mc_replication_id_get_f) (
    int unit);

/**
 * \brief returns define data of min_mc_replication_id
 * Module - 'ppmc', Submodule - 'param', data - 'min_mc_replication_id'
 * Minimum value of multicast replication in the PPMC table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_mc_replication_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_ppmc_param_min_mc_replication_id_get_f) (
    int unit);

/**
 * \brief returns define data of mc_replication_id_offset
 * Module - 'ppmc', Submodule - 'param', data - 'mc_replication_id_offset'
 * multicast replication index range offset in the PPMC table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mc_replication_id_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_ppmc_param_mc_replication_id_offset_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PPMC - PARAM:
 * {
 */
/**
 * \brief Interface for ppmc param data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_ppmc_param_feature_get_f feature_get;
    /**
     * returns define data of max_mc_replication_id
     */
    dnx_data_ppmc_param_max_mc_replication_id_get_f max_mc_replication_id_get;
    /**
     * returns define data of min_mc_replication_id
     */
    dnx_data_ppmc_param_min_mc_replication_id_get_f min_mc_replication_id_get;
    /**
     * returns define data of mc_replication_id_offset
     */
    dnx_data_ppmc_param_mc_replication_id_offset_get_f mc_replication_id_offset_get;
} dnx_data_if_ppmc_param_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_PPMC:
 * {
 */
/**
 * \brief Interface for ppmc data
 */
typedef struct
{
    /**
     * Interface for ppmc param data
     */
    dnx_data_if_ppmc_param_t param;
} dnx_data_if_ppmc_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_ppmc_t dnx_data_ppmc;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_PPMC_H_*/
/* *INDENT-ON* */
