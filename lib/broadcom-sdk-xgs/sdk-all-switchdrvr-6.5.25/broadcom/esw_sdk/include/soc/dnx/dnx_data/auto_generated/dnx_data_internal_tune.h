/** \file dnx_data_internal_tune.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_TUNE_H_
/*{*/
#define _DNX_DATA_INTERNAL_TUNE_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_tune.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_tune_submodule_ecgm,
    dnx_data_tune_submodule_iqs,
    dnx_data_tune_submodule_fabric,

    /**
     * Must be last one!
     */
    _dnx_data_tune_submodule_nof
} dnx_data_tune_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE ECGM:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_tune_ecgm_feature_get(
    int unit,
    dnx_data_tune_ecgm_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_tune_ecgm_define_core_flow_control_percentage_ratio,
    dnx_data_tune_ecgm_define_port_queue_uc_flow_control_min_thresh,

    /**
     * Must be last one!
     */
    _dnx_data_tune_ecgm_define_nof
} dnx_data_tune_ecgm_define_e;

/* Get Data */
/**
 * \brief returns define data of core_flow_control_percentage_ratio
 * Module - 'tune', Submodule - 'ecgm', data - 'core_flow_control_percentage_ratio'
 * ratio used for core/interface resources flow control thresholds calculations. (percentage units)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_flow_control_percentage_ratio - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_ecgm_core_flow_control_percentage_ratio_get(
    int unit);

/**
 * \brief returns define data of port_queue_uc_flow_control_min_thresh
 * Module - 'tune', Submodule - 'ecgm', data - 'port_queue_uc_flow_control_min_thresh'
 * Minimum threshold for ESGM UC FC Data Buffers and Packet Descriptors per port and per queue.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_queue_uc_flow_control_min_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_ecgm_port_queue_uc_flow_control_min_thresh_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_tune_ecgm_table_port_dp_ratio,

    /**
     * Must be last one!
     */
    _dnx_data_tune_ecgm_table_nof
} dnx_data_tune_ecgm_table_e;

/* Get Data */
/**
 * \brief get table port_dp_ratio entry 
 * ration per dp used for thresholds calculations
 * 
 * \param [in] unit - unit #
 * \param [in] dp - table index
 * 
 * \return
 *     port_dp_ratio - returns the relevant entry values grouped in struct - see dnx_data_tune_ecgm_port_dp_ratio_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_tune_ecgm_port_dp_ratio_t * dnx_data_tune_ecgm_port_dp_ratio_get(
    int unit,
    int dp);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'tune', Submodule - 'ecgm', table - 'port_dp_ratio'
 * ration per dp used for thresholds calculations
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_tune_ecgm_port_dp_ratio_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)port_dp_ratio info
 * ration per dp used for thresholds calculations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_dp_ratio - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_tune_ecgm_port_dp_ratio_info_get(
    int unit);

/*
 * SUBMODULE IQS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_tune_iqs_feature_get(
    int unit,
    dnx_data_tune_iqs_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_tune_iqs_define_credit_resolution_up_th,
    dnx_data_tune_iqs_define_fabric_delay,
    dnx_data_tune_iqs_define_fabric_multicast_delay,
    dnx_data_tune_iqs_define_fmq_max_rate,

    /**
     * Must be last one!
     */
    _dnx_data_tune_iqs_define_nof
} dnx_data_tune_iqs_define_e;

/* Get Data */
/**
 * \brief returns define data of credit_resolution_up_th
 * Module - 'tune', Submodule - 'iqs', data - 'credit_resolution_up_th'
 * [Byte]. threshold over the delayed size (2 * fabric_delay * port rate) to move to the higher credit resolution
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     credit_resolution_up_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_iqs_credit_resolution_up_th_get(
    int unit);

/**
 * \brief returns numeric data of fabric_delay
 * Module - 'tune', Submodule - 'iqs', data - 'fabric_delay'
 * [nano-sec] credit ingress to egress delay
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_iqs_fabric_delay_get(
    int unit);

/**
 * \brief returns numeric data of fabric_multicast_delay
 * Module - 'tune', Submodule - 'iqs', data - 'fabric_multicast_delay'
 * [nano-sec] credit delay for fmqs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_multicast_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_iqs_fabric_multicast_delay_get(
    int unit);

/**
 * \brief returns numeric data of fmq_max_rate
 * Module - 'tune', Submodule - 'iqs', data - 'fmq_max_rate'
 * [Gbps] fmq credit generator rate
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_max_rate - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_iqs_fmq_max_rate_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_tune_iqs_table_bw_level_rate,

    /**
     * Must be last one!
     */
    _dnx_data_tune_iqs_table_nof
} dnx_data_tune_iqs_table_e;

/* Get Data */
/**
 * \brief get table bw_level_rate entry 
 * stores the read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * \param [in] bw_level - bandwidth level
 * 
 * \return
 *     bw_level_rate - returns the relevant entry values grouped in struct - see dnx_data_tune_iqs_bw_level_rate_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_tune_iqs_bw_level_rate_t * dnx_data_tune_iqs_bw_level_rate_get(
    int unit,
    int bw_level);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'tune', Submodule - 'iqs', table - 'bw_level_rate'
 * stores the read weight profiles that should configured to HW
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_tune_iqs_bw_level_rate_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)bw_level_rate info
 * stores the read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bw_level_rate - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_tune_iqs_bw_level_rate_info_get(
    int unit);

/*
 * SUBMODULE FABRIC:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_tune_fabric_feature_get(
    int unit,
    dnx_data_tune_fabric_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_tune_fabric_define_cgm_llfc_pipe_th,
    dnx_data_tune_fabric_define_cgm_drop_fabric_class_th,
    dnx_data_tune_fabric_define_cgm_rci_high_sev_min_links_param,
    dnx_data_tune_fabric_define_cgm_rci_egress_pipe_level_th_base,
    dnx_data_tune_fabric_define_cgm_rci_egress_pipe_level_th_offset,
    dnx_data_tune_fabric_define_cgm_rci_total_egress_pipe_level_th_base,
    dnx_data_tune_fabric_define_cgm_rci_total_egress_pipe_level_th_offset,

    /**
     * Must be last one!
     */
    _dnx_data_tune_fabric_define_nof
} dnx_data_tune_fabric_define_e;

/* Get Data */
/**
 * \brief returns define data of cgm_llfc_pipe_th
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_llfc_pipe_th'
 * threshold for bcmFabricCgmLlfcPipeTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_llfc_pipe_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_fabric_cgm_llfc_pipe_th_get(
    int unit);

/**
 * \brief returns define data of cgm_drop_fabric_class_th
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_drop_fabric_class_th'
 * threshold for bcmFabricCgmDropFabricClassTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_drop_fabric_class_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_fabric_cgm_drop_fabric_class_th_get(
    int unit);

/**
 * \brief returns define data of cgm_rci_high_sev_min_links_param
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_high_sev_min_links_param'
 * threshold for bcmFabricCgmRciHighSeverityMinLinksParam
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_high_sev_min_links_param - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_fabric_cgm_rci_high_sev_min_links_param_get(
    int unit);

/**
 * \brief returns define data of cgm_rci_egress_pipe_level_th_base
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_egress_pipe_level_th_base'
 * base threshold for bcmFabricCgmRciEgressPipeLevelTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_egress_pipe_level_th_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_fabric_cgm_rci_egress_pipe_level_th_base_get(
    int unit);

/**
 * \brief returns define data of cgm_rci_egress_pipe_level_th_offset
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_egress_pipe_level_th_offset'
 * offset threshold for bcmFabricCgmRciEgressPipeLevelTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_egress_pipe_level_th_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_fabric_cgm_rci_egress_pipe_level_th_offset_get(
    int unit);

/**
 * \brief returns define data of cgm_rci_total_egress_pipe_level_th_base
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_total_egress_pipe_level_th_base'
 * base threshold for bcmFabricCgmRciTotalEgressPipeLevelTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_total_egress_pipe_level_th_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_fabric_cgm_rci_total_egress_pipe_level_th_base_get(
    int unit);

/**
 * \brief returns define data of cgm_rci_total_egress_pipe_level_th_offset
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_total_egress_pipe_level_th_offset'
 * offset threshold for bcmFabricCgmRciTotalEgressPipeLevelTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_total_egress_pipe_level_th_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tune_fabric_cgm_rci_total_egress_pipe_level_th_offset_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_tune_fabric_table_cgm_drop_fabric_multicast_th,
    dnx_data_tune_fabric_table_cgm_rci_egress_level_factor,

    /**
     * Must be last one!
     */
    _dnx_data_tune_fabric_table_nof
} dnx_data_tune_fabric_table_e;

/* Get Data */
/**
 * \brief get table cgm_drop_fabric_multicast_th entry 
 * Stores the thresholds for all priorities on MC.
 * 
 * \param [in] unit - unit #
 * \param [in] priority - Fabric priority
 * 
 * \return
 *     cgm_drop_fabric_multicast_th - returns the relevant entry values grouped in struct - see dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_t * dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_get(
    int unit,
    int priority);

/**
 * \brief get table cgm_rci_egress_level_factor entry 
 * Stores the scores for all levels [0-2].
 * 
 * \param [in] unit - unit #
 * \param [in] level - Fabric level
 * 
 * \return
 *     cgm_rci_egress_level_factor - returns the relevant entry values grouped in struct - see dnx_data_tune_fabric_cgm_rci_egress_level_factor_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_tune_fabric_cgm_rci_egress_level_factor_t * dnx_data_tune_fabric_cgm_rci_egress_level_factor_get(
    int unit,
    int level);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'tune', Submodule - 'fabric', table - 'cgm_drop_fabric_multicast_th'
 * Stores the thresholds for all priorities on MC.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'tune', Submodule - 'fabric', table - 'cgm_rci_egress_level_factor'
 * Stores the scores for all levels [0-2].
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_tune_fabric_cgm_rci_egress_level_factor_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)cgm_drop_fabric_multicast_th info
 * Stores the thresholds for all priorities on MC.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_drop_fabric_multicast_th - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)cgm_rci_egress_level_factor info
 * Stores the scores for all levels [0-2].
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_egress_level_factor - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_tune_fabric_cgm_rci_egress_level_factor_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_tune_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_TUNE_H_*/
/* *INDENT-ON* */
