/** \file dnx_data_internal_oam.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_OAM_H_
/*{*/
#define _DNX_DATA_INTERNAL_OAM_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_oam.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_oam_submodule_general,
    dnx_data_oam_submodule_oamp,
    dnx_data_oam_submodule_property,
    dnx_data_oam_submodule_feature,

    /**
     * Must be last one!
     */
    _dnx_data_oam_submodule_nof
} dnx_data_oam_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_oam_general_feature_get(
    int unit,
    dnx_data_oam_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_oam_general_define_oam_nof_non_acc_action_profiles,
    dnx_data_oam_general_define_oam_nof_acc_action_profiles,
    dnx_data_oam_general_define_oam_nof_reserved_egr_acc_action_profiles,
    dnx_data_oam_general_define_oam_egr_acc_action_profile_id_for_inject_mpls,
    dnx_data_oam_general_define_oam_nof_bits_non_acc_action_profiles,
    dnx_data_oam_general_define_oam_nof_bits_acc_action_profiles,
    dnx_data_oam_general_define_oam_nof_bits_oam_lif_db_key_base_ingress,
    dnx_data_oam_general_define_oam_nof_bits_oam_lif_db_key_base_egress,
    dnx_data_oam_general_define_oam_nof_endpoints,
    dnx_data_oam_general_define_oam_nof_oamp_meps,
    dnx_data_oam_general_define_oam_nof_groups,
    dnx_data_oam_general_define_oam_nof_entries_oam_lif_db,
    dnx_data_oam_general_define_oam_nof_bits_counter_base,
    dnx_data_oam_general_define_oam_nof_punt_error_codes,
    dnx_data_oam_general_define_oam_nof_priority_map_profiles,
    dnx_data_oam_general_define_oam_force_interface_for_meps_without_counter,
    dnx_data_oam_general_define_oam_my_cfm_mac_by_range,
    dnx_data_oam_general_define_oam_nof_pemla_channel_types,
    dnx_data_oam_general_define_oam_mdb_rmep_db_profile_limitation,
    dnx_data_oam_general_define_oam_lm_read_index_field_exists,
    dnx_data_oam_general_define_oam_lm_read_per_sub_enable_field_exists,
    dnx_data_oam_general_define_oam_lm_read_per_sub_disable_field_exists,
    dnx_data_oam_general_define_oam_identification_appdb_1_field_exists,
    dnx_data_oam_general_define_oam_ntp_freq_control_word,
    dnx_data_oam_general_define_oam_ntp_time_freq_control,
    dnx_data_oam_general_define_oam_IEEE_1588_time_freq_control,
    dnx_data_oam_general_define_oam_nse_nco_freq_control,
    dnx_data_oam_general_define_oam_nof_labels_for_sd_on_p_node,
    dnx_data_oam_general_define_oam_tod_config_in_eci,
    dnx_data_oam_general_define_oam_tod_config_in_ns,
    dnx_data_oam_general_define_oam_local_outlif_msb_bit_index,
    dnx_data_oam_general_define_oam_mpls_tp_or_bfd_enable_map_exists,
    dnx_data_oam_general_define_oam_nof_counter_interfaces,
    dnx_data_oam_general_define_oam_sub_type_v2,
    dnx_data_oam_general_define_oam_nof_server_device_profile,
    dnx_data_oam_general_define_oam_app_id_init,

    /**
     * Must be last one!
     */
    _dnx_data_oam_general_define_nof
} dnx_data_oam_general_define_e;

/* Get Data */
/**
 * \brief returns define data of oam_nof_non_acc_action_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_non_acc_action_profiles'
 * Number of profiles for non-accelerated OAM endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_non_acc_action_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_non_acc_action_profiles_get(
    int unit);

/**
 * \brief returns define data of oam_nof_acc_action_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_acc_action_profiles'
 * Number of profiles for accelerated OAM endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_acc_action_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_acc_action_profiles_get(
    int unit);

/**
 * \brief returns define data of oam_nof_reserved_egr_acc_action_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_reserved_egr_acc_action_profiles'
 * Number of reserved egress profiles for accelerated OAM endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_reserved_egr_acc_action_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_reserved_egr_acc_action_profiles_get(
    int unit);

/**
 * \brief returns define data of oam_egr_acc_action_profile_id_for_inject_mpls
 * Module - 'oam', Submodule - 'general', data - 'oam_egr_acc_action_profile_id_for_inject_mpls'
 * ID of Egress acc egress profile for injected mpls oam. -1 indicates invalid profile
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_egr_acc_action_profile_id_for_inject_mpls - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_egr_acc_action_profile_id_for_inject_mpls_get(
    int unit);

/**
 * \brief returns define data of oam_nof_bits_non_acc_action_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_non_acc_action_profiles'
 * Number of bits needed for profiles for non-accelerated OAM endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_non_acc_action_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_bits_non_acc_action_profiles_get(
    int unit);

/**
 * \brief returns define data of oam_nof_bits_acc_action_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_acc_action_profiles'
 * Number of bits needed for profiles for accelerated OAM endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_acc_action_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_bits_acc_action_profiles_get(
    int unit);

/**
 * \brief returns define data of oam_nof_bits_oam_lif_db_key_base_ingress
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_oam_lif_db_key_base_ingress'
 * Number of bits used in ingress LIF DB and Acc MEP DB tables for LIF ID key
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_oam_lif_db_key_base_ingress - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_bits_oam_lif_db_key_base_ingress_get(
    int unit);

/**
 * \brief returns define data of oam_nof_bits_oam_lif_db_key_base_egress
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_oam_lif_db_key_base_egress'
 * Number of bits used in egress LIF DB and Acc MEP DB tables for LIF ID key
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_oam_lif_db_key_base_egress - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_bits_oam_lif_db_key_base_egress_get(
    int unit);

/**
 * \brief returns define data of oam_nof_endpoints
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_endpoints'
 * Number of OAM endpoints that may be allocated
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_endpoints_get(
    int unit);

/**
 * \brief returns define data of oam_nof_oamp_meps
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_oamp_meps'
 * Number of endpoints that may be defined in the OAMP.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_oamp_meps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_oamp_meps_get(
    int unit);

/**
 * \brief returns define data of oam_nof_groups
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_groups'
 * Number of oam groups in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_groups - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_groups_get(
    int unit);

/**
 * \brief returns define data of oam_nof_entries_oam_lif_db
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_entries_oam_lif_db'
 * Number of OAM lifs that may be defined
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_entries_oam_lif_db - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_entries_oam_lif_db_get(
    int unit);

/**
 * \brief returns define data of oam_nof_bits_counter_base
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_bits_counter_base'
 * Number of bits in counter base field in OAM-LIF-DB payload
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_bits_counter_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_bits_counter_base_get(
    int unit);

/**
 * \brief returns define data of oam_nof_punt_error_codes
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_punt_error_codes'
 * Number of error codes supported by punt feature
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_punt_error_codes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_punt_error_codes_get(
    int unit);

/**
 * \brief returns define data of oam_nof_priority_map_profiles
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_priority_map_profiles'
 * Number of priority map profiles supported (egress tc to pcp mapping)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_priority_map_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_priority_map_profiles_get(
    int unit);

/**
 * \brief returns define data of oam_force_interface_for_meps_without_counter
 * Module - 'oam', Submodule - 'general', data - 'oam_force_interface_for_meps_without_counter'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_force_interface_for_meps_without_counter - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_force_interface_for_meps_without_counter_get(
    int unit);

/**
 * \brief returns define data of oam_my_cfm_mac_by_range
 * Module - 'oam', Submodule - 'general', data - 'oam_my_cfm_mac_by_range'
 * My CFM MAC defined by range rather than bitmap
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_my_cfm_mac_by_range - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_my_cfm_mac_by_range_get(
    int unit);

/**
 * \brief returns define data of oam_nof_pemla_channel_types
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_pemla_channel_types'
 * number of channel types in PEMLA OAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_pemla_channel_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_pemla_channel_types_get(
    int unit);

/**
 * \brief returns define data of oam_mdb_rmep_db_profile_limitation
 * Module - 'oam', Submodule - 'general', data - 'oam_mdb_rmep_db_profile_limitation'
 * Minimum capacity for RMEP_DB in MDB profile 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_mdb_rmep_db_profile_limitation - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_mdb_rmep_db_profile_limitation_get(
    int unit);

/**
 * \brief returns define data of oam_lm_read_index_field_exists
 * Module - 'oam', Submodule - 'general', data - 'oam_lm_read_index_field_exists'
 * 1 if current device has this field; 0 if it does not have it
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_lm_read_index_field_exists - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_lm_read_index_field_exists_get(
    int unit);

/**
 * \brief returns define data of oam_lm_read_per_sub_enable_field_exists
 * Module - 'oam', Submodule - 'general', data - 'oam_lm_read_per_sub_enable_field_exists'
 * 1 if current device has this field; 0 if it does not have it
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_lm_read_per_sub_enable_field_exists - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_lm_read_per_sub_enable_field_exists_get(
    int unit);

/**
 * \brief returns define data of oam_lm_read_per_sub_disable_field_exists
 * Module - 'oam', Submodule - 'general', data - 'oam_lm_read_per_sub_disable_field_exists'
 * 1 if current device has this field; 0 if it does not have it
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_lm_read_per_sub_disable_field_exists - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_lm_read_per_sub_disable_field_exists_get(
    int unit);

/**
 * \brief returns define data of oam_identification_appdb_1_field_exists
 * Module - 'oam', Submodule - 'general', data - 'oam_identification_appdb_1_field_exists'
 * 1 if current device has this field; 0 if it does not have it
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_identification_appdb_1_field_exists - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_identification_appdb_1_field_exists_get(
    int unit);

/**
 * \brief returns define data of oam_ntp_freq_control_word
 * Module - 'oam', Submodule - 'general', data - 'oam_ntp_freq_control_word'
 * NTP Frequency control word
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_ntp_freq_control_word - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_ntp_freq_control_word_get(
    int unit);

/**
 * \brief returns define data of oam_ntp_time_freq_control
 * Module - 'oam', Submodule - 'general', data - 'oam_ntp_time_freq_control'
 * Frequency value added to the 32 bit accumulator
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_ntp_time_freq_control - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_ntp_time_freq_control_get(
    int unit);

/**
 * \brief returns define data of oam_IEEE_1588_time_freq_control
 * Module - 'oam', Submodule - 'general', data - 'oam_IEEE_1588_time_freq_control'
 * Frequency value added to the 32 bit accumulator
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_IEEE_1588_time_freq_control - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_IEEE_1588_time_freq_control_get(
    int unit);

/**
 * \brief returns define data of oam_nse_nco_freq_control
 * Module - 'oam', Submodule - 'general', data - 'oam_nse_nco_freq_control'
 * Determines whether the NCO Frequency stepping control is from a register or DPLL
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nse_nco_freq_control - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nse_nco_freq_control_get(
    int unit);

/**
 * \brief returns define data of oam_nof_labels_for_sd_on_p_node
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_labels_for_sd_on_p_node'
 * Numbers of MPLS labels for transmit CCM SD P-node flow with.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_labels_for_sd_on_p_node - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_labels_for_sd_on_p_node_get(
    int unit);

/**
 * \brief returns define data of oam_tod_config_in_eci
 * Module - 'oam', Submodule - 'general', data - 'oam_tod_config_in_eci'
 * Determines whether the ToD Configuration is done through ECI registers
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_tod_config_in_eci - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_tod_config_in_eci_get(
    int unit);

/**
 * \brief returns define data of oam_tod_config_in_ns
 * Module - 'oam', Submodule - 'general', data - 'oam_tod_config_in_ns'
 * Determines whether the ToD Configuration is done through NS registers
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_tod_config_in_ns - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_tod_config_in_ns_get(
    int unit);

/**
 * \brief returns define data of oam_local_outlif_msb_bit_index
 * Module - 'oam', Submodule - 'general', data - 'oam_local_outlif_msb_bit_index'
 * Indicates msb bit index of the local out lif value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_local_outlif_msb_bit_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_local_outlif_msb_bit_index_get(
    int unit);

/**
 * \brief returns define data of oam_mpls_tp_or_bfd_enable_map_exists
 * Module - 'oam', Submodule - 'general', data - 'oam_mpls_tp_or_bfd_enable_map_exists'
 * Indicates existence of mapping service type into mpls tp or bfd identification
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_mpls_tp_or_bfd_enable_map_exists - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_mpls_tp_or_bfd_enable_map_exists_get(
    int unit);

/**
 * \brief returns define data of oam_nof_counter_interfaces
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_counter_interfaces'
 * Number of counter interfaces
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_counter_interfaces - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_counter_interfaces_get(
    int unit);

/**
 * \brief returns define data of oam_sub_type_v2
 * Module - 'oam', Submodule - 'general', data - 'oam_sub_type_v2'
 * Indicate if sub_type v2 is supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_sub_type_v2 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_sub_type_v2_get(
    int unit);

/**
 * \brief returns define data of oam_nof_server_device_profile
 * Module - 'oam', Submodule - 'general', data - 'oam_nof_server_device_profile'
 * Number of profiles for oam server device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_server_device_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_nof_server_device_profile_get(
    int unit);

/**
 * \brief returns define data of oam_app_id_init
 * Module - 'oam', Submodule - 'general', data - 'oam_app_id_init'
 * Indicate app id initialization required
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_app_id_init - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_general_oam_app_id_init_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_oam_general_table_nof
} dnx_data_oam_general_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE OAMP:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_oam_oamp_feature_get(
    int unit,
    dnx_data_oam_oamp_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_oam_oamp_define_nof_mep_db_entry_banks,
    dnx_data_oam_oamp_define_nof_mep_db_entries_per_bank,
    dnx_data_oam_oamp_define_scan_rate_bank_exist,
    dnx_data_oam_oamp_define_nof_mep_db_entries,
    dnx_data_oam_oamp_define_max_nof_endpoint_id,
    dnx_data_oam_oamp_define_max_nof_mep_id,
    dnx_data_oam_oamp_define_max_value_of_mep_id,
    dnx_data_oam_oamp_define_nof_umc,
    dnx_data_oam_oamp_define_mep_id_nof_bits,
    dnx_data_oam_oamp_define_nof_mep_db_entry_banks_for_endpoints,
    dnx_data_oam_oamp_define_nof_mep_db_endpoint_entries,
    dnx_data_oam_oamp_define_mep_db_da_is_mc_for_short_entries_support,
    dnx_data_oam_oamp_define_nof_icc_profiles,
    dnx_data_oam_oamp_define_local_port_2_system_port_size,
    dnx_data_oam_oamp_define_oam_nof_sa_mac_profiles,
    dnx_data_oam_oamp_define_oam_nof_da_mac_msb_profiles,
    dnx_data_oam_oamp_define_oam_nof_da_mac_lsb_profiles,
    dnx_data_oam_oamp_define_oam_nof_tpid_profiles,
    dnx_data_oam_oamp_define_oamp_pe_default_instruction_index,
    dnx_data_oam_oamp_define_oamp_pe_max_nof_instructions,
    dnx_data_oam_oamp_define_oamp_pe_nof_fem_bits,
    dnx_data_oam_oamp_define_mep_db_sub_entry_size,
    dnx_data_oam_oamp_define_mep_db_nof_sub_entries,
    dnx_data_oam_oamp_define_mep_db_full_entry_size,
    dnx_data_oam_oamp_define_mep_pe_profile_nof_bits,
    dnx_data_oam_oamp_define_rmep_db_entries_nof_bits,
    dnx_data_oam_oamp_define_rmep_db_rmep_index_nof_bits,
    dnx_data_oam_oamp_define_rmep_max_self_contained,
    dnx_data_oam_oamp_define_rmep_pair_sys_clocks,
    dnx_data_oam_oamp_define_mep_sys_clocks,
    dnx_data_oam_oamp_define_num_clocks_scan_nof_bits,
    dnx_data_oam_oamp_define_mep_db_version_limitation,
    dnx_data_oam_oamp_define_oamp_mep_db_threshold_version_limitation,
    dnx_data_oam_oamp_define_rmep_db_non_zero_lifetime_units_limitation,
    dnx_data_oam_oamp_define_crc_calculation_supported,
    dnx_data_oam_oamp_define_modified_mep_db_structure,
    dnx_data_oam_oamp_define_local_port_2_system_port_bits,
    dnx_data_oam_oamp_define_mdb_nof_access_ids,
    dnx_data_oam_oamp_define_bfd_mpls_short_mdb_reserved_bits,
    dnx_data_oam_oamp_define_bfd_m_hop_short_mdb_reserved_bits,
    dnx_data_oam_oamp_define_bfd_pwe_short_mdb_reserved_bits,
    dnx_data_oam_oamp_define_ccm_eth_offload_mdb_reserved_bits,
    dnx_data_oam_oamp_define_bfd_1_hop_short_mdb_reserved_bits,
    dnx_data_oam_oamp_define_ccm_mpls_tp_pwe_offload_mdb_reserved_bits,
    dnx_data_oam_oamp_define_punt_packet_destination_size,
    dnx_data_oam_oamp_define_punt_packet_itmh_destination_full_encoding_supported,
    dnx_data_oam_oamp_define_core_nof_bits,
    dnx_data_oam_oamp_define_punt_packet_pph_ttl_supported,
    dnx_data_oam_oamp_define_lmm_dmm_supported,
    dnx_data_oam_oamp_define_slm_supported,
    dnx_data_oam_oamp_define_oamp_sat_rxi_enable_support,
    dnx_data_oam_oamp_define_mdb_tx_rate_lsb_field_present,
    dnx_data_oam_oamp_define_nof_jumbo_dm_tlv_entries,
    dnx_data_oam_oamp_define_mdb_reserved_field_size_calculation,
    dnx_data_oam_oamp_define_event_fifo_slicing_size_offset,
    dnx_data_oam_oamp_define_ccm_piggyback_per_priority_with_crc_supported,
    dnx_data_oam_oamp_define_nof_write_complete_checks,
    dnx_data_oam_oamp_define_oam_nof_trap_code_tcam,
    dnx_data_oam_oamp_define_mep_rmep_db_access_regs,
    dnx_data_oam_oamp_define_dev_type_for_server_tests,
    dnx_data_oam_oamp_define_protection_packet_max_header_size,
    dnx_data_oam_oamp_define_protection_packet_max_len_size,
    dnx_data_oam_oamp_define_max_number_of_events,
    dnx_data_oam_oamp_define_nof_generic_memory_entries,
    dnx_data_oam_oamp_define_oamp_nof_scan_rmep_db_entries,
    dnx_data_oam_oamp_define_oamp_mep_full_entry_threshold,
    dnx_data_oam_oamp_define_oamp_rmep_full_entry_threshold,
    dnx_data_oam_oamp_define_mep_db_jr1_mode,
    dnx_data_oam_oamp_define_oamp_fifo_dma_event_interface_enable,
    dnx_data_oam_oamp_define_oamp_fifo_dma_event_interface_buffer_size,
    dnx_data_oam_oamp_define_oamp_fifo_dma_event_interface_timeout,
    dnx_data_oam_oamp_define_oamp_fifo_dma_event_interface_threshold,
    dnx_data_oam_oamp_define_oamp_fifo_dma_event_thread_priority,
    dnx_data_oam_oamp_define_oamp_fifo_dma_report_interface_enable,
    dnx_data_oam_oamp_define_oamp_fifo_dma_report_interface_buffer_size,
    dnx_data_oam_oamp_define_oamp_fifo_dma_report_interface_timeout,
    dnx_data_oam_oamp_define_oamp_fifo_dma_report_interface_threshold,
    dnx_data_oam_oamp_define_up_mep_tod_recycle_port_core_0,
    dnx_data_oam_oamp_define_up_mep_tod_recycle_port_core_1,
    dnx_data_oam_oamp_define_server_destination_msb_bits,
    dnx_data_oam_oamp_define_server_destination_lsb_bits,
    dnx_data_oam_oamp_define_intr_oamp_pending_event,
    dnx_data_oam_oamp_define_intr_oamp_stat_pending_event,

    /**
     * Must be last one!
     */
    _dnx_data_oam_oamp_define_nof
} dnx_data_oam_oamp_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_mep_db_entry_banks
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_entry_banks'
 * Number of entry banks for OAMP MEP DB
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_entry_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_mep_db_entry_banks_get(
    int unit);

/**
 * \brief returns define data of nof_mep_db_entries_per_bank
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_entries_per_bank'
 * Number of entries per bank for OAMP MEP DB
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_entries_per_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_mep_db_entries_per_bank_get(
    int unit);

/**
 * \brief returns define data of scan_rate_bank_exist
 * Module - 'oam', Submodule - 'oamp', data - 'scan_rate_bank_exist'
 * In JER_A0 different scan rate not supported.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     scan_rate_bank_exist - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_scan_rate_bank_exist_get(
    int unit);

/**
 * \brief returns define data of nof_mep_db_entries
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_entries'
 * Total number of entries in OAMP MEP DB
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_mep_db_entries_get(
    int unit);

/**
 * \brief returns define data of max_nof_endpoint_id
 * Module - 'oam', Submodule - 'oamp', data - 'max_nof_endpoint_id'
 * Maximal number of endpoints ID that could be created
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_endpoint_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_max_nof_endpoint_id_get(
    int unit);

/**
 * \brief returns define data of max_nof_mep_id
 * Module - 'oam', Submodule - 'oamp', data - 'max_nof_mep_id'
 * Maiximal number of possible MEP-ID's(size of MEP_DB table).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_mep_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_max_nof_mep_id_get(
    int unit);

/**
 * \brief returns define data of max_value_of_mep_id
 * Module - 'oam', Submodule - 'oamp', data - 'max_value_of_mep_id'
 * Maximal value of OAM ID (upper limit of table key)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_value_of_mep_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_max_value_of_mep_id_get(
    int unit);

/**
 * \brief returns define data of nof_umc
 * Module - 'oam', Submodule - 'oamp', data - 'nof_umc'
 * Number of maximum Unique MEG-ID Codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_umc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_umc_get(
    int unit);

/**
 * \brief returns define data of mep_id_nof_bits
 * Module - 'oam', Submodule - 'oamp', data - 'mep_id_nof_bits'
 * Number of bits in 'OAM_ID' of an OAM/BFD accelerated endpoint
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_id_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_id_nof_bits_get(
    int unit);

/**
 * \brief returns define data of nof_mep_db_entry_banks_for_endpoints
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_entry_banks_for_endpoints'
 * Number of entry banks in OAMP MEP DB that can contain endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_entry_banks_for_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_mep_db_entry_banks_for_endpoints_get(
    int unit);

/**
 * \brief returns define data of nof_mep_db_endpoint_entries
 * Module - 'oam', Submodule - 'oamp', data - 'nof_mep_db_endpoint_entries'
 * Number of entries in OAMP MEP DB that can contain endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mep_db_endpoint_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_mep_db_endpoint_entries_get(
    int unit);

/**
 * \brief returns define data of mep_db_da_is_mc_for_short_entries_support
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_da_is_mc_for_short_entries_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_da_is_mc_for_short_entries_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_db_da_is_mc_for_short_entries_support_get(
    int unit);

/**
 * \brief returns define data of nof_icc_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'nof_icc_profiles'
 * Number of ICC profiles in OAMP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_icc_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_icc_profiles_get(
    int unit);

/**
 * \brief returns define data of local_port_2_system_port_size
 * Module - 'oam', Submodule - 'oamp', data - 'local_port_2_system_port_size'
 * Size of local to system port table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     local_port_2_system_port_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_local_port_2_system_port_size_get(
    int unit);

/**
 * \brief returns define data of oam_nof_sa_mac_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'oam_nof_sa_mac_profiles'
 * Number of sa mac profiles(33msb)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_sa_mac_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oam_nof_sa_mac_profiles_get(
    int unit);

/**
 * \brief returns define data of oam_nof_da_mac_msb_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'oam_nof_da_mac_msb_profiles'
 * Number of da mac msb profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_da_mac_msb_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oam_nof_da_mac_msb_profiles_get(
    int unit);

/**
 * \brief returns define data of oam_nof_da_mac_lsb_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'oam_nof_da_mac_lsb_profiles'
 * Number of da mac lsb profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_da_mac_lsb_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oam_nof_da_mac_lsb_profiles_get(
    int unit);

/**
 * \brief returns define data of oam_nof_tpid_profiles
 * Module - 'oam', Submodule - 'oamp', data - 'oam_nof_tpid_profiles'
 * Number of tpid profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_tpid_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oam_nof_tpid_profiles_get(
    int unit);

/**
 * \brief returns define data of oamp_pe_default_instruction_index
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_pe_default_instruction_index'
 * index of default instruction
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_pe_default_instruction_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_pe_default_instruction_index_get(
    int unit);

/**
 * \brief returns define data of oamp_pe_max_nof_instructions
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_pe_max_nof_instructions'
 * maximal number of instructions to execute in single program
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_pe_max_nof_instructions - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_pe_max_nof_instructions_get(
    int unit);

/**
 * \brief returns define data of oamp_pe_nof_fem_bits
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_pe_nof_fem_bits'
 * number of bits that each FEM configures
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_pe_nof_fem_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_pe_nof_fem_bits_get(
    int unit);

/**
 * \brief returns define data of mep_db_sub_entry_size
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_sub_entry_size'
 * Number of bits in OAMP MEP DB sub-entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_sub_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_db_sub_entry_size_get(
    int unit);

/**
 * \brief returns define data of mep_db_nof_sub_entries
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_nof_sub_entries'
 * Number of sub-entries each full entry in OAMP MEP DB
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_nof_sub_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_db_nof_sub_entries_get(
    int unit);

/**
 * \brief returns define data of mep_db_full_entry_size
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_full_entry_size'
 * Number of bits in OAMP MEP DB full entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_full_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_db_full_entry_size_get(
    int unit);

/**
 * \brief returns define data of mep_pe_profile_nof_bits
 * Module - 'oam', Submodule - 'oamp', data - 'mep_pe_profile_nof_bits'
 * Size of MEP PE profile
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_pe_profile_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_pe_profile_nof_bits_get(
    int unit);

/**
 * \brief returns define data of rmep_db_entries_nof_bits
 * Module - 'oam', Submodule - 'oamp', data - 'rmep_db_entries_nof_bits'
 * Number of bits used for remote MEP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_db_entries_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_rmep_db_entries_nof_bits_get(
    int unit);

/**
 * \brief returns define data of rmep_db_rmep_index_nof_bits
 * Module - 'oam', Submodule - 'oamp', data - 'rmep_db_rmep_index_nof_bits'
 * Number of bits used for RMEP index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_db_rmep_index_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_rmep_db_rmep_index_nof_bits_get(
    int unit);

/**
 * \brief returns define data of rmep_max_self_contained
 * Module - 'oam', Submodule - 'oamp', data - 'rmep_max_self_contained'
 * Number of maximum self contained RMEP's
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_max_self_contained - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_rmep_max_self_contained_get(
    int unit);

/**
 * \brief returns define data of rmep_pair_sys_clocks
 * Module - 'oam', Submodule - 'oamp', data - 'rmep_pair_sys_clocks'
 * Number of system clocks required for a pair of RMEPs scan
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_pair_sys_clocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_rmep_pair_sys_clocks_get(
    int unit);

/**
 * \brief returns define data of mep_sys_clocks
 * Module - 'oam', Submodule - 'oamp', data - 'mep_sys_clocks'
 * Number of system clocks required for single MEP scan
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_sys_clocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_sys_clocks_get(
    int unit);

/**
 * \brief returns define data of num_clocks_scan_nof_bits
 * Module - 'oam', Submodule - 'oamp', data - 'num_clocks_scan_nof_bits'
 * Number of bits in number of clocks scan
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_clocks_scan_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_num_clocks_scan_nof_bits_get(
    int unit);

/**
 * \brief returns define data of mep_db_version_limitation
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_version_limitation'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_version_limitation - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_db_version_limitation_get(
    int unit);

/**
 * \brief returns define data of oamp_mep_db_threshold_version_limitation
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_mep_db_threshold_version_limitation'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_mep_db_threshold_version_limitation - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_mep_db_threshold_version_limitation_get(
    int unit);

/**
 * \brief returns define data of rmep_db_non_zero_lifetime_units_limitation
 * Module - 'oam', Submodule - 'oamp', data - 'rmep_db_non_zero_lifetime_units_limitation'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_db_non_zero_lifetime_units_limitation - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_rmep_db_non_zero_lifetime_units_limitation_get(
    int unit);

/**
 * \brief returns define data of crc_calculation_supported
 * Module - 'oam', Submodule - 'oamp', data - 'crc_calculation_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     crc_calculation_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_crc_calculation_supported_get(
    int unit);

/**
 * \brief returns define data of modified_mep_db_structure
 * Module - 'oam', Submodule - 'oamp', data - 'modified_mep_db_structure'
 * Differntiates betweeen JR2 A0 structure and B0 and up structure
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     modified_mep_db_structure - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_modified_mep_db_structure_get(
    int unit);

/**
 * \brief returns define data of local_port_2_system_port_bits
 * Module - 'oam', Submodule - 'oamp', data - 'local_port_2_system_port_bits'
 * Number of bits in local to system port field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     local_port_2_system_port_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_local_port_2_system_port_bits_get(
    int unit);

/**
 * \brief returns define data of mdb_nof_access_ids
 * Module - 'oam', Submodule - 'oamp', data - 'mdb_nof_access_ids'
 * number of access ids per mdb entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_nof_access_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mdb_nof_access_ids_get(
    int unit);

/**
 * \brief returns define data of bfd_mpls_short_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'bfd_mpls_short_mdb_reserved_bits'
 * Number of bits in reserved field in mdb bfd over MPLS 1/4 entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_mpls_short_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_bfd_mpls_short_mdb_reserved_bits_get(
    int unit);

/**
 * \brief returns define data of bfd_m_hop_short_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'bfd_m_hop_short_mdb_reserved_bits'
 * Number of bits in reserved field in mdb bfd over multi-hop IPv4 1/4 entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_m_hop_short_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_bfd_m_hop_short_mdb_reserved_bits_get(
    int unit);

/**
 * \brief returns define data of bfd_pwe_short_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'bfd_pwe_short_mdb_reserved_bits'
 * Number of bits in reserved field in mdb bfd over PWE 1/4 entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_pwe_short_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_bfd_pwe_short_mdb_reserved_bits_get(
    int unit);

/**
 * \brief returns define data of ccm_eth_offload_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'ccm_eth_offload_mdb_reserved_bits'
 * Number of bits reserved field in mdb CCM ethernet LM/DM offloaded entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ccm_eth_offload_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_ccm_eth_offload_mdb_reserved_bits_get(
    int unit);

/**
 * \brief returns define data of bfd_1_hop_short_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'bfd_1_hop_short_mdb_reserved_bits'
 * Number of bits in reserved field in mdb bfd over single-hop IPv4 1/4 entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_1_hop_short_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_bfd_1_hop_short_mdb_reserved_bits_get(
    int unit);

/**
 * \brief returns define data of ccm_mpls_tp_pwe_offload_mdb_reserved_bits
 * Module - 'oam', Submodule - 'oamp', data - 'ccm_mpls_tp_pwe_offload_mdb_reserved_bits'
 * Number of bits reserved field in mdb CCM over MPLS-TP/PWE LM/DM offloaded entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ccm_mpls_tp_pwe_offload_mdb_reserved_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_ccm_mpls_tp_pwe_offload_mdb_reserved_bits_get(
    int unit);

/**
 * \brief returns define data of punt_packet_destination_size
 * Module - 'oam', Submodule - 'oamp', data - 'punt_packet_destination_size'
 * Number of bits in the destination fields in the OAMP_CPUPORT register
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     punt_packet_destination_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_punt_packet_destination_size_get(
    int unit);

/**
 * \brief returns define data of punt_packet_itmh_destination_full_encoding_supported
 * Module - 'oam', Submodule - 'oamp', data - 'punt_packet_itmh_destination_full_encoding_supported'
 * Due to HW issue less encodings are avaliable in JER_A0/B0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     punt_packet_itmh_destination_full_encoding_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_punt_packet_itmh_destination_full_encoding_supported_get(
    int unit);

/**
 * \brief returns define data of core_nof_bits
 * Module - 'oam', Submodule - 'oamp', data - 'core_nof_bits'
 * Number of core bits in dbal field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_core_nof_bits_get(
    int unit);

/**
 * \brief returns define data of punt_packet_pph_ttl_supported
 * Module - 'oam', Submodule - 'oamp', data - 'punt_packet_pph_ttl_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     punt_packet_pph_ttl_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_punt_packet_pph_ttl_supported_get(
    int unit);

/**
 * \brief returns define data of lmm_dmm_supported
 * Module - 'oam', Submodule - 'oamp', data - 'lmm_dmm_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lmm_dmm_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_lmm_dmm_supported_get(
    int unit);

/**
 * \brief returns define data of slm_supported
 * Module - 'oam', Submodule - 'oamp', data - 'slm_supported'
 * SLM has new mechanism in JR2_B0 and above!
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     slm_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_slm_supported_get(
    int unit);

/**
 * \brief returns define data of oamp_sat_rxi_enable_support
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_sat_rxi_enable_support'
 * Support for RXI control over SAT and OAMP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_sat_rxi_enable_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_sat_rxi_enable_support_get(
    int unit);

/**
 * \brief returns define data of mdb_tx_rate_lsb_field_present
 * Module - 'oam', Submodule - 'oamp', data - 'mdb_tx_rate_lsb_field_present'
 * Indicates if tx rate least significant bit is part of the MDB entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_tx_rate_lsb_field_present - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mdb_tx_rate_lsb_field_present_get(
    int unit);

/**
 * \brief returns define data of nof_jumbo_dm_tlv_entries
 * Module - 'oam', Submodule - 'oamp', data - 'nof_jumbo_dm_tlv_entries'
 * The max number of dm tlv entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_jumbo_dm_tlv_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_jumbo_dm_tlv_entries_get(
    int unit);

/**
 * \brief returns define data of mdb_reserved_field_size_calculation
 * Module - 'oam', Submodule - 'oamp', data - 'mdb_reserved_field_size_calculation'
 * Used in calculation of reservevd field size for MDB entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_reserved_field_size_calculation - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mdb_reserved_field_size_calculation_get(
    int unit);

/**
 * \brief returns define data of event_fifo_slicing_size_offset
 * Module - 'oam', Submodule - 'oamp', data - 'event_fifo_slicing_size_offset'
 * Determines the slice offset of the invalid MSBs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     event_fifo_slicing_size_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_event_fifo_slicing_size_offset_get(
    int unit);

/**
 * \brief returns define data of ccm_piggyback_per_priority_with_crc_supported
 * Module - 'oam', Submodule - 'oamp', data - 'ccm_piggyback_per_priority_with_crc_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ccm_piggyback_per_priority_with_crc_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_ccm_piggyback_per_priority_with_crc_supported_get(
    int unit);

/**
 * \brief returns define data of nof_write_complete_checks
 * Module - 'oam', Submodule - 'oamp', data - 'nof_write_complete_checks'
 * Max number of time to checks MEP/RMEP write is done.  Checked every 100 usecs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_write_complete_checks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_write_complete_checks_get(
    int unit);

/**
 * \brief returns define data of oam_nof_trap_code_tcam
 * Module - 'oam', Submodule - 'oamp', data - 'oam_nof_trap_code_tcam'
 * number of tcam entries in trap_code tcam
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_nof_trap_code_tcam - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oam_nof_trap_code_tcam_get(
    int unit);

/**
 * \brief returns define data of mep_rmep_db_access_regs
 * Module - 'oam', Submodule - 'oamp', data - 'mep_rmep_db_access_regs'
 * OAMP_MEP_DB and OAMP_RMEP_DB written using access registers
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_rmep_db_access_regs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_rmep_db_access_regs_get(
    int unit);

/**
 * \brief returns define data of dev_type_for_server_tests
 * Module - 'oam', Submodule - 'oamp', data - 'dev_type_for_server_tests'
 * Number used to determine if mgmt negev has different devices
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dev_type_for_server_tests - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_dev_type_for_server_tests_get(
    int unit);

/**
 * \brief returns define data of protection_packet_max_header_size
 * Module - 'oam', Submodule - 'oamp', data - 'protection_packet_max_header_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     protection_packet_max_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_protection_packet_max_header_size_get(
    int unit);

/**
 * \brief returns define data of protection_packet_max_len_size
 * Module - 'oam', Submodule - 'oamp', data - 'protection_packet_max_len_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     protection_packet_max_len_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_protection_packet_max_len_size_get(
    int unit);

/**
 * \brief returns define data of max_number_of_events
 * Module - 'oam', Submodule - 'oamp', data - 'max_number_of_events'
 * Max number of events in interrupt
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_number_of_events - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_max_number_of_events_get(
    int unit);

/**
 * \brief returns define data of nof_generic_memory_entries
 * Module - 'oam', Submodule - 'oamp', data - 'nof_generic_memory_entries'
 * Number of generic memory entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_generic_memory_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_nof_generic_memory_entries_get(
    int unit);

/**
 * \brief returns numeric data of oamp_nof_scan_rmep_db_entries
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_nof_scan_rmep_db_entries'
 * Number of remote MEPs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_nof_scan_rmep_db_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_nof_scan_rmep_db_entries_get(
    int unit);

/**
 * \brief returns numeric data of oamp_mep_full_entry_threshold
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_mep_full_entry_threshold'
 * MEP DB Full Entry Threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_mep_full_entry_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_mep_full_entry_threshold_get(
    int unit);

/**
 * \brief returns numeric data of oamp_rmep_full_entry_threshold
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_rmep_full_entry_threshold'
 * RMEP DB Full Entry Threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_rmep_full_entry_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_rmep_full_entry_threshold_get(
    int unit);

/**
 * \brief returns numeric data of mep_db_jr1_mode
 * Module - 'oam', Submodule - 'oamp', data - 'mep_db_jr1_mode'
 * MEP_DB mode(Inter-op)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_db_jr1_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_mep_db_jr1_mode_get(
    int unit);

/**
 * \brief returns numeric data of oamp_fifo_dma_event_interface_enable
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_fifo_dma_event_interface_enable'
 * Enables OAMP DMA event interrupts interface
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_fifo_dma_event_interface_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_fifo_dma_event_interface_enable_get(
    int unit);

/**
 * \brief returns numeric data of oamp_fifo_dma_event_interface_buffer_size
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_fifo_dma_event_interface_buffer_size'
 * OAMP fifo DMA host memory buffer size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_fifo_dma_event_interface_buffer_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_fifo_dma_event_interface_buffer_size_get(
    int unit);

/**
 * \brief returns numeric data of oamp_fifo_dma_event_interface_timeout
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_fifo_dma_event_interface_timeout'
 * OAMP fifo dma timeout in microseconds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_fifo_dma_event_interface_timeout - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_fifo_dma_event_interface_timeout_get(
    int unit);

/**
 * \brief returns numeric data of oamp_fifo_dma_event_interface_threshold
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_fifo_dma_event_interface_threshold'
 * OAMP fifo dma threshold to raise an interrupt.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_fifo_dma_event_interface_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_fifo_dma_event_interface_threshold_get(
    int unit);

/**
 * \brief returns numeric data of oamp_fifo_dma_event_thread_priority
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_fifo_dma_event_thread_priority'
 * OAMP fifo dma event thread priority to handle an interrupt.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_fifo_dma_event_thread_priority - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_fifo_dma_event_thread_priority_get(
    int unit);

/**
 * \brief returns numeric data of oamp_fifo_dma_report_interface_enable
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_fifo_dma_report_interface_enable'
 * Enables OAMP DMA statistic interrupts interface
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_fifo_dma_report_interface_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_fifo_dma_report_interface_enable_get(
    int unit);

/**
 * \brief returns numeric data of oamp_fifo_dma_report_interface_buffer_size
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_fifo_dma_report_interface_buffer_size'
 * OAMP fifo DMA statistic host memory buffer size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_fifo_dma_report_interface_buffer_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_fifo_dma_report_interface_buffer_size_get(
    int unit);

/**
 * \brief returns numeric data of oamp_fifo_dma_report_interface_timeout
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_fifo_dma_report_interface_timeout'
 * OAMP fifo dma statistic timeout in microseconds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_fifo_dma_report_interface_timeout - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_fifo_dma_report_interface_timeout_get(
    int unit);

/**
 * \brief returns numeric data of oamp_fifo_dma_report_interface_threshold
 * Module - 'oam', Submodule - 'oamp', data - 'oamp_fifo_dma_report_interface_threshold'
 * OAMP fifo dma statistic threshold to raise an interrupt.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_fifo_dma_report_interface_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_oamp_fifo_dma_report_interface_threshold_get(
    int unit);

/**
 * \brief returns numeric data of up_mep_tod_recycle_port_core_0
 * Module - 'oam', Submodule - 'oamp', data - 'up_mep_tod_recycle_port_core_0'
 * define up mep tod recycle port for core 0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     up_mep_tod_recycle_port_core_0 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_up_mep_tod_recycle_port_core_0_get(
    int unit);

/**
 * \brief returns numeric data of up_mep_tod_recycle_port_core_1
 * Module - 'oam', Submodule - 'oamp', data - 'up_mep_tod_recycle_port_core_1'
 * define up mep tod recycle port for core 1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     up_mep_tod_recycle_port_core_1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_up_mep_tod_recycle_port_core_1_get(
    int unit);

/**
 * \brief returns numeric data of server_destination_msb_bits
 * Module - 'oam', Submodule - 'oamp', data - 'server_destination_msb_bits'
 * Server destinaion: number of bits stored in MSB part
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     server_destination_msb_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_server_destination_msb_bits_get(
    int unit);

/**
 * \brief returns numeric data of server_destination_lsb_bits
 * Module - 'oam', Submodule - 'oamp', data - 'server_destination_lsb_bits'
 * Server destinaion: number of bits stored in LSB part
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     server_destination_lsb_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_server_destination_lsb_bits_get(
    int unit);

/**
 * \brief returns numeric data of intr_oamp_pending_event
 * Module - 'oam', Submodule - 'oamp', data - 'intr_oamp_pending_event'
 * interrupt index - oamp pending event
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     intr_oamp_pending_event - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_intr_oamp_pending_event_get(
    int unit);

/**
 * \brief returns numeric data of intr_oamp_stat_pending_event
 * Module - 'oam', Submodule - 'oamp', data - 'intr_oamp_stat_pending_event'
 * interrupt index - oamp stat pending event
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     intr_oamp_stat_pending_event - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_oamp_intr_oamp_stat_pending_event_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_oam_oamp_table_nof
} dnx_data_oam_oamp_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE PROPERTY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_oam_property_feature_get(
    int unit,
    dnx_data_oam_property_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_oam_property_define_oam_injected_over_lsp_cnt,
    dnx_data_oam_property_define_lm_dm_per_priority_enable,

    /**
     * Must be last one!
     */
    _dnx_data_oam_property_define_nof
} dnx_data_oam_property_define_e;

/* Get Data */
/**
 * \brief returns numeric data of oam_injected_over_lsp_cnt
 * Module - 'oam', Submodule - 'property', data - 'oam_injected_over_lsp_cnt'
 * Count injected CCM packet over LSP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_injected_over_lsp_cnt - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_property_oam_injected_over_lsp_cnt_get(
    int unit);

/**
 * \brief returns numeric data of lm_dm_per_priority_enable
 * Module - 'oam', Submodule - 'property', data - 'lm_dm_per_priority_enable'
 * Used for enable lm/dm per priority
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lm_dm_per_priority_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_oam_property_lm_dm_per_priority_enable_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_oam_property_table_nof
} dnx_data_oam_property_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE FEATURE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_oam_feature_feature_get(
    int unit,
    dnx_data_oam_feature_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_oam_feature_define_nof
} dnx_data_oam_feature_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_oam_feature_table_nof
} dnx_data_oam_feature_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_oam_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_OAM_H_*/
/* *INDENT-ON* */
