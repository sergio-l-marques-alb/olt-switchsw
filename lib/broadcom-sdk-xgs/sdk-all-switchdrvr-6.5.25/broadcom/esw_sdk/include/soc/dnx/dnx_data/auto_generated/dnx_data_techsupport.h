/** \file dnx_data_techsupport.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_TECHSUPPORT_H_
/*{*/
#define _DNX_DATA_TECHSUPPORT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <appl/diag/dnx/diag_dnx_techsupport.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_techsupport.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_techsupport
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_techsupport_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - TM:
 * techsupport tm/all.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule tm table tm_block
 * Table info:
 * tm block information
 */
typedef struct
{
    /**
     * block name
     */
    char *block_name;
    /**
     *  EID#8021 before performing cpu access read, is it need to disable ecc protection
     */
    uint32 is_mask_ecc;
    /**
     * number of words proctected by ecc 
     */
    uint32 ecc_mask_words;
} dnx_data_techsupport_tm_tm_block_t;

/**
 * \brief Holds values of submodule tm table tm_command
 * Table info:
 * tm command information
 */
typedef struct
{
    /**
     * excute command
     */
    char *command;
} dnx_data_techsupport_tm_tm_command_t;

/**
 * \brief Holds values of submodule tm table tm_mem
 * Table info:
 * tm memory table information
 */
typedef struct
{
    /**
     * table name
     */
    char *name;
} dnx_data_techsupport_tm_tm_mem_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_techsupport_tm_feature_nof
} dnx_data_techsupport_tm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_techsupport_tm_feature_get_f) (
    int unit,
    dnx_data_techsupport_tm_feature_e feature);

/**
 * \brief returns define data of num_of_tables_per_block
 * Module - 'techsupport', Submodule - 'tm', data - 'num_of_tables_per_block'
 * number of tables per block
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_of_tables_per_block - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_techsupport_tm_num_of_tables_per_block_get_f) (
    int unit);

/**
 * \brief returns define data of num_of_tm_command
 * Module - 'techsupport', Submodule - 'tm', data - 'num_of_tm_command'
 * number of tm command
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_of_tm_command - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_techsupport_tm_num_of_tm_command_get_f) (
    int unit);

/**
 * \brief get table tm_block entry 
 * tm block information
 * 
 * \param [in] unit - unit #
 * \param [in] block - block information
 * 
 * \return
 *     tm_block - returns the relevant entry values grouped in struct - see dnx_data_techsupport_tm_tm_block_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_techsupport_tm_tm_block_t *(
    *dnx_data_techsupport_tm_tm_block_get_f) (
    int unit,
    int block);

/**
 * \brief get table tm_command entry 
 * tm command information
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     tm_command - returns the relevant entry values grouped in struct - see dnx_data_techsupport_tm_tm_command_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_techsupport_tm_tm_command_t *(
    *dnx_data_techsupport_tm_tm_command_get_f) (
    int unit,
    int index);

/**
 * \brief get table tm_mem entry 
 * tm memory table information
 * 
 * \param [in] unit - unit #
 * \param [in] block - block information
 * \param [in] index - index in block
 * 
 * \return
 *     tm_mem - returns the relevant entry values grouped in struct - see dnx_data_techsupport_tm_tm_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_techsupport_tm_tm_mem_t *(
    *dnx_data_techsupport_tm_tm_mem_get_f) (
    int unit,
    int block,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TECHSUPPORT - TM:
 * {
 */
/**
 * \brief Interface for techsupport tm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_techsupport_tm_feature_get_f feature_get;
    /**
     * returns define data of num_of_tables_per_block
     */
    dnx_data_techsupport_tm_num_of_tables_per_block_get_f num_of_tables_per_block_get;
    /**
     * returns define data of num_of_tm_command
     */
    dnx_data_techsupport_tm_num_of_tm_command_get_f num_of_tm_command_get;
    /**
     * get table tm_block entry 
     */
    dnx_data_techsupport_tm_tm_block_get_f tm_block_get;
    /**
     * get general info table about table (for example key size)tm_block info
     */
    dnxc_data_table_info_get_f tm_block_info_get;
    /**
     * get table tm_command entry 
     */
    dnx_data_techsupport_tm_tm_command_get_f tm_command_get;
    /**
     * get general info table about table (for example key size)tm_command info
     */
    dnxc_data_table_info_get_f tm_command_info_get;
    /**
     * get table tm_mem entry 
     */
    dnx_data_techsupport_tm_tm_mem_get_f tm_mem_get;
    /**
     * get general info table about table (for example key size)tm_mem info
     */
    dnxc_data_table_info_get_f tm_mem_info_get;
} dnx_data_if_techsupport_tm_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_TECHSUPPORT:
 * {
 */
/**
 * \brief Interface for techsupport data
 */
typedef struct
{
    /**
     * Interface for techsupport tm data
     */
    dnx_data_if_techsupport_tm_t tm;
} dnx_data_if_techsupport_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_techsupport_t dnx_data_techsupport;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_TECHSUPPORT_H_*/
/* *INDENT-ON* */
