/** \file dnx_data_mpls.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MPLS_H_
/*{*/
#define _DNX_DATA_MPLS_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dbal/dbal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_mpls.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_mpls
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_mpls_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * general mpls constants
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule general table fwd1_trap_destination
 */
typedef struct
{
    dbal_fields_e context;
} dnx_data_mpls_general_fwd1_trap_destination_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * If current label is not BOS, terminate it and the subsequent one else terminate it only in case of label-to-terminate is 3.
     */
    dnx_data_mpls_general_mpls_term_1_or_2_labels,
    /**
     * Terminate the MPLS labels till BOS. Note the maximum number of labels to terminate by the feature is 3.
     */
    dnx_data_mpls_general_mpls_term_till_bos,
    /**
     * IOAM stamping feature support
     */
    dnx_data_mpls_general_mpls_ioam_d_flag_stamping,
    /**
     * mpls stack termination indication
     */
    dnx_data_mpls_general_stack_termination_indication,
    /**
     * indicates if the current step in mpls_module_init is supported
     */
    dnx_data_mpls_general_mpls_module_init_enabled,
    /**
     * indicates if the per port ILM lookup is supported
     */
    dnx_data_mpls_general_per_port_ilm_lookup_supported,
    /**
     * indicates if AHP is supported for implicit_null entry im enc2 stage
     */
    dnx_data_mpls_general_enc2_implicit_null_w_ahp_supported,
    /**
     * defines whether FHEI to EES translation is configurable
     */
    dnx_data_mpls_general_configurable_fhei_supported,
    /**
     * defines whether handling MPLS_RAW in VTT is supported
     */
    dnx_data_mpls_general_mpls_raw_vtt_handling_supported,
    /**
     * Indicates if force commit in mpls port/evpn terminator is supported
     */
    dnx_data_mpls_general_mpls_terminator_force_commit,
    /**
     * Indicates if MPLS label with previous interface lookup is supported
     */
    dnx_data_mpls_general_per_intf_lookup_supported,
    /**
     * Indicates if 2 MPLS labels lookup is supported
     */
    dnx_data_mpls_general_coupling_label_lookup_supported,
    /**
     * Indicates if same MPLS entry can be handled as TOS and TOS+1 in encap stage
     */
    dnx_data_mpls_general_tandem_supported,
    /**
     * Indicates if EVPN supports BCM_MPLS_EGRESS_LABEL_FLAGS2_NO_TPID_CLASS flag
     */
    dnx_data_mpls_general_evpn_no_tpid_supported,
    /**
     * Indicates if EVPN supports BCM_MPLS_EGRESS_LABEL_VIRTUAL_EGRESS_POINTED flag
     */
    dnx_data_mpls_general_mpls_egress_pointed_supported,

    /**
     * Must be last one!
     */
    _dnx_data_mpls_general_feature_nof
} dnx_data_mpls_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_mpls_general_feature_get_f) (
    int unit,
    dnx_data_mpls_general_feature_e feature);

/**
 * \brief returns define data of nof_mpls_termination_profiles
 * Module - 'mpls', Submodule - 'general', data - 'nof_mpls_termination_profiles'
 * Number of MPLS Termination Profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mpls_termination_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_nof_mpls_termination_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mpls_push_profiles
 * Module - 'mpls', Submodule - 'general', data - 'nof_mpls_push_profiles'
 * JR mode Number of MPLS Push Profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mpls_push_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_nof_mpls_push_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_bits_mpls_label
 * Module - 'mpls', Submodule - 'general', data - 'nof_bits_mpls_label'
 * Specifies number of bits used to represent an MPLS label
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_mpls_label - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_nof_bits_mpls_label_get_f) (
    int unit);

/**
 * \brief returns define data of log_nof_mpls_range_elements
 * Module - 'mpls', Submodule - 'general', data - 'log_nof_mpls_range_elements'
 * Specifies number of bits used to represent number of available elements on any of mpls-range tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     log_nof_mpls_range_elements - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_log_nof_mpls_range_elements_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mpls_range_elements
 * Module - 'mpls', Submodule - 'general', data - 'nof_mpls_range_elements'
 * Specifies number of available elements on any of mpls-range tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mpls_range_elements - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_nof_mpls_range_elements_get_f) (
    int unit);

/**
 * \brief returns define data of mpls_special_label_encap_handling
 * Module - 'mpls', Submodule - 'general', data - 'mpls_special_label_encap_handling'
 * Indicates whether special labels should be handled separatly
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_special_label_encap_handling - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_mpls_special_label_encap_handling_get_f) (
    int unit);

/**
 * \brief returns define data of mpls_control_word_supported
 * Module - 'mpls', Submodule - 'general', data - 'mpls_control_word_supported'
 * Indicates whether control word non-zero values supported.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_control_word_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_mpls_control_word_supported_get_f) (
    int unit);

/**
 * \brief returns define data of mpls_second_stage_parser_handling
 * Module - 'mpls', Submodule - 'general', data - 'mpls_second_stage_parser_handling'
 * Indicates whether 2nd stage parser supported properly.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_second_stage_parser_handling - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_mpls_second_stage_parser_handling_get_f) (
    int unit);

/**
 * \brief returns define data of mpls_control_word_flag_bits_lsb
 * Module - 'mpls', Submodule - 'general', data - 'mpls_control_word_flag_bits_lsb'
 * Indicates the control word flag bits location.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_control_word_flag_bits_lsb - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_mpls_control_word_flag_bits_lsb_get_f) (
    int unit);

/**
 * \brief returns define data of fhei_mps_type_nof_bits
 * Module - 'mpls', Submodule - 'general', data - 'fhei_mps_type_nof_bits'
 * Indicates the number of mpls fhei type bits.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_mps_type_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_fhei_mps_type_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of mpls_speculative_learning_handling
 * Module - 'mpls', Submodule - 'general', data - 'mpls_speculative_learning_handling'
 * Indicates whether learning informatino from PWE is handled correctly,  in respect to speculative parsing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_speculative_learning_handling - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_mpls_speculative_learning_handling_get_f) (
    int unit);

/**
 * \brief returns define data of gach_with_flow_label_supported
 * Module - 'mpls', Submodule - 'general', data - 'gach_with_flow_label_supported'
 * Indicates whether G-ACH with Flow label simultaneously supported.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gach_with_flow_label_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_gach_with_flow_label_supported_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_mpls_term_stages
 * Module - 'mpls', Submodule - 'general', data - 'max_nof_mpls_term_stages'
 * Maximal number of possible stages for MPLS termination
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_mpls_term_stages - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_max_nof_mpls_term_stages_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_php_gport_lif
 * Module - 'mpls', Submodule - 'general', data - 'nof_php_gport_lif'
 * Indicates the LIF number used for PHP, JR1 mode only.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_php_gport_lif - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_mpls_general_nof_php_gport_lif_get_f) (
    int unit);

/**
 * \brief get table fwd1_trap_destination entry 
 * 
 * \param [in] unit - unit #
 * \param [in] index - 
 * 
 * \return
 *     fwd1_trap_destination - returns the relevant entry values grouped in struct - see dnx_data_mpls_general_fwd1_trap_destination_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_mpls_general_fwd1_trap_destination_t *(
    *dnx_data_mpls_general_fwd1_trap_destination_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MPLS - GENERAL:
 * {
 */
/**
 * \brief Interface for mpls general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_mpls_general_feature_get_f feature_get;
    /**
     * returns define data of nof_mpls_termination_profiles
     */
    dnx_data_mpls_general_nof_mpls_termination_profiles_get_f nof_mpls_termination_profiles_get;
    /**
     * returns define data of nof_mpls_push_profiles
     */
    dnx_data_mpls_general_nof_mpls_push_profiles_get_f nof_mpls_push_profiles_get;
    /**
     * returns define data of nof_bits_mpls_label
     */
    dnx_data_mpls_general_nof_bits_mpls_label_get_f nof_bits_mpls_label_get;
    /**
     * returns define data of log_nof_mpls_range_elements
     */
    dnx_data_mpls_general_log_nof_mpls_range_elements_get_f log_nof_mpls_range_elements_get;
    /**
     * returns define data of nof_mpls_range_elements
     */
    dnx_data_mpls_general_nof_mpls_range_elements_get_f nof_mpls_range_elements_get;
    /**
     * returns define data of mpls_special_label_encap_handling
     */
    dnx_data_mpls_general_mpls_special_label_encap_handling_get_f mpls_special_label_encap_handling_get;
    /**
     * returns define data of mpls_control_word_supported
     */
    dnx_data_mpls_general_mpls_control_word_supported_get_f mpls_control_word_supported_get;
    /**
     * returns define data of mpls_second_stage_parser_handling
     */
    dnx_data_mpls_general_mpls_second_stage_parser_handling_get_f mpls_second_stage_parser_handling_get;
    /**
     * returns define data of mpls_control_word_flag_bits_lsb
     */
    dnx_data_mpls_general_mpls_control_word_flag_bits_lsb_get_f mpls_control_word_flag_bits_lsb_get;
    /**
     * returns define data of fhei_mps_type_nof_bits
     */
    dnx_data_mpls_general_fhei_mps_type_nof_bits_get_f fhei_mps_type_nof_bits_get;
    /**
     * returns define data of mpls_speculative_learning_handling
     */
    dnx_data_mpls_general_mpls_speculative_learning_handling_get_f mpls_speculative_learning_handling_get;
    /**
     * returns define data of gach_with_flow_label_supported
     */
    dnx_data_mpls_general_gach_with_flow_label_supported_get_f gach_with_flow_label_supported_get;
    /**
     * returns define data of max_nof_mpls_term_stages
     */
    dnx_data_mpls_general_max_nof_mpls_term_stages_get_f max_nof_mpls_term_stages_get;
    /**
     * returns numeric data of nof_php_gport_lif
     */
    dnx_data_mpls_general_nof_php_gport_lif_get_f nof_php_gport_lif_get;
    /**
     * get table fwd1_trap_destination entry 
     */
    dnx_data_mpls_general_fwd1_trap_destination_get_f fwd1_trap_destination_get;
    /**
     * get general info table about table (for example key size)fwd1_trap_destination info
     */
    dnxc_data_table_info_get_f fwd1_trap_destination_info_get;
} dnx_data_if_mpls_general_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_MPLS:
 * {
 */
/**
 * \brief Interface for mpls data
 */
typedef struct
{
    /**
     * Interface for mpls general data
     */
    dnx_data_if_mpls_general_t general;
} dnx_data_if_mpls_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_mpls_t dnx_data_mpls;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_MPLS_H_*/
/* *INDENT-ON* */
