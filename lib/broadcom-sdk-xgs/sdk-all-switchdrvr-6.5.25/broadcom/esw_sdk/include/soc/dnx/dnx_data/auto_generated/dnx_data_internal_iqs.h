/** \file dnx_data_internal_iqs.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_IQS_H_
/*{*/
#define _DNX_DATA_INTERNAL_IQS_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_iqs.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_iqs_submodule_credit,
    dnx_data_iqs_submodule_deq_default,
    dnx_data_iqs_submodule_dqcq,
    dnx_data_iqs_submodule_dbal,
    dnx_data_iqs_submodule_flush,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_submodule_nof
} dnx_data_iqs_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE CREDIT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_feature_get(
    int unit,
    dnx_data_iqs_credit_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_iqs_credit_define_max_credit_balance_threshold,
    dnx_data_iqs_credit_define_max_worth,
    dnx_data_iqs_credit_define_satisified_back_min,
    dnx_data_iqs_credit_define_satisified_back_max,
    dnx_data_iqs_credit_define_satisified_empty_min,
    dnx_data_iqs_credit_define_satisified_empty_max,
    dnx_data_iqs_credit_define_hungry_min,
    dnx_data_iqs_credit_define_hungry_max,
    dnx_data_iqs_credit_define_hungry_mult_min,
    dnx_data_iqs_credit_define_hungry_mult_max,
    dnx_data_iqs_credit_define_nof_bw_levels,
    dnx_data_iqs_credit_define_fmq_credit_fc_on_th,
    dnx_data_iqs_credit_define_fmq_credit_fc_off_th,
    dnx_data_iqs_credit_define_fmq_byte_fc_on_th,
    dnx_data_iqs_credit_define_fmq_byte_fc_off_th,
    dnx_data_iqs_credit_define_fmq_eir_credit_fc_th,
    dnx_data_iqs_credit_define_fmq_eir_byte_fc_th,
    dnx_data_iqs_credit_define_fmq_nof_be_classes,
    dnx_data_iqs_credit_define_fmq_max_be_weight,
    dnx_data_iqs_credit_define_fmq_max_burst_max,
    dnx_data_iqs_credit_define_fmq_shp_crdt_rate_mltp,
    dnx_data_iqs_credit_define_fmq_shp_crdt_rate_delta,
    dnx_data_iqs_credit_define_max_rate_profile_preset_gbps,
    dnx_data_iqs_credit_define_nof_profiles,
    dnx_data_iqs_credit_define_profile_nof_bits,
    dnx_data_iqs_credit_define_worth,
    dnx_data_iqs_credit_define_fmq_shp_rate_max,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_credit_define_nof
} dnx_data_iqs_credit_define_e;

/* Get Data */
/**
 * \brief returns define data of max_credit_balance_threshold
 * Module - 'iqs', Submodule - 'credit', data - 'max_credit_balance_threshold'
 * max value for thresholds in credit balance resolution units
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_credit_balance_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_max_credit_balance_threshold_get(
    int unit);

/**
 * \brief returns define data of max_worth
 * Module - 'iqs', Submodule - 'credit', data - 'max_worth'
 * max credit worth
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_worth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_max_worth_get(
    int unit);

/**
 * \brief returns define data of satisified_back_min
 * Module - 'iqs', Submodule - 'credit', data - 'satisified_back_min'
 * min value for satisified back thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     satisified_back_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_satisified_back_min_get(
    int unit);

/**
 * \brief returns define data of satisified_back_max
 * Module - 'iqs', Submodule - 'credit', data - 'satisified_back_max'
 * max value for satisified back thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     satisified_back_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_satisified_back_max_get(
    int unit);

/**
 * \brief returns define data of satisified_empty_min
 * Module - 'iqs', Submodule - 'credit', data - 'satisified_empty_min'
 * min value for satisified empty thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     satisified_empty_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_satisified_empty_min_get(
    int unit);

/**
 * \brief returns define data of satisified_empty_max
 * Module - 'iqs', Submodule - 'credit', data - 'satisified_empty_max'
 * max value for satisified empty thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     satisified_empty_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_satisified_empty_max_get(
    int unit);

/**
 * \brief returns define data of hungry_min
 * Module - 'iqs', Submodule - 'credit', data - 'hungry_min'
 * min value for hungry thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hungry_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_hungry_min_get(
    int unit);

/**
 * \brief returns define data of hungry_max
 * Module - 'iqs', Submodule - 'credit', data - 'hungry_max'
 * max value for hungry thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hungry_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_hungry_max_get(
    int unit);

/**
 * \brief returns define data of hungry_mult_min
 * Module - 'iqs', Submodule - 'credit', data - 'hungry_mult_min'
 * min value for hungry multiply thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hungry_mult_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_hungry_mult_min_get(
    int unit);

/**
 * \brief returns define data of hungry_mult_max
 * Module - 'iqs', Submodule - 'credit', data - 'hungry_mult_max'
 * max value for hungry multiply thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hungry_mult_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_credit_hungry_mult_max_get(
    int unit);

/**
 * \brief returns define data of nof_bw_levels
 * Module - 'iqs', Submodule - 'credit', data - 'nof_bw_levels'
 * number of supported bandwidth levels
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bw_levels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_nof_bw_levels_get(
    int unit);

/**
 * \brief returns define data of fmq_credit_fc_on_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_credit_fc_on_th'
 * default thershold value for FMQ credit FC on
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_credit_fc_on_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_credit_fc_on_th_get(
    int unit);

/**
 * \brief returns define data of fmq_credit_fc_off_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_credit_fc_off_th'
 * default thershold value for FMQ credit FC off
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_credit_fc_off_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_credit_fc_off_th_get(
    int unit);

/**
 * \brief returns define data of fmq_byte_fc_on_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_byte_fc_on_th'
 * default thershold value for FMQ byte FC on
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_byte_fc_on_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_byte_fc_on_th_get(
    int unit);

/**
 * \brief returns define data of fmq_byte_fc_off_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_byte_fc_off_th'
 * default thershold value for FMQ byte FC off
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_byte_fc_off_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_byte_fc_off_th_get(
    int unit);

/**
 * \brief returns define data of fmq_eir_credit_fc_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_eir_credit_fc_th'
 * default thershold value for all credit EIR FMQ FC thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_eir_credit_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_eir_credit_fc_th_get(
    int unit);

/**
 * \brief returns define data of fmq_eir_byte_fc_th
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_eir_byte_fc_th'
 * default thershold value for all byte EIR FMQ FC thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_eir_byte_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_eir_byte_fc_th_get(
    int unit);

/**
 * \brief returns define data of fmq_nof_be_classes
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_nof_be_classes'
 * nof best-effort FMQ classes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_nof_be_classes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_nof_be_classes_get(
    int unit);

/**
 * \brief returns define data of fmq_max_be_weight
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_max_be_weight'
 * max weight for best-effort FMQ classes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_max_be_weight - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_max_be_weight_get(
    int unit);

/**
 * \brief returns define data of fmq_max_burst_max
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_max_burst_max'
 * FMQ max burst maximum value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_max_burst_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_max_burst_max_get(
    int unit);

/**
 * \brief returns define data of fmq_shp_crdt_rate_mltp
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_shp_crdt_rate_mltp'
 * multiplier for clock resolution of the FMQ shapers credit rate
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_shp_crdt_rate_mltp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_shp_crdt_rate_mltp_get(
    int unit);

/**
 * \brief returns define data of fmq_shp_crdt_rate_delta
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_shp_crdt_rate_delta'
 * numeric correction used in FMQ shapers rate calculation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_shp_crdt_rate_delta - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_shp_crdt_rate_delta_get(
    int unit);

/**
 * \brief returns define data of max_rate_profile_preset_gbps
 * Module - 'iqs', Submodule - 'credit', data - 'max_rate_profile_preset_gbps'
 * maximal rate for credit request profile preset get (Gpbs)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_rate_profile_preset_gbps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_max_rate_profile_preset_gbps_get(
    int unit);

/**
 * \brief returns numeric data of nof_profiles
 * Module - 'iqs', Submodule - 'credit', data - 'nof_profiles'
 * Number of supported profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_nof_profiles_get(
    int unit);

/**
 * \brief returns numeric data of profile_nof_bits
 * Module - 'iqs', Submodule - 'credit', data - 'profile_nof_bits'
 * nof bits of supported profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     profile_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_profile_nof_bits_get(
    int unit);

/**
 * \brief returns numeric data of worth
 * Module - 'iqs', Submodule - 'credit', data - 'worth'
 * credit worth in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     worth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_worth_get(
    int unit);

/**
 * \brief returns numeric data of fmq_shp_rate_max
 * Module - 'iqs', Submodule - 'credit', data - 'fmq_shp_rate_max'
 * max value for FMQ shaper rate in Mbps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_shp_rate_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_credit_fmq_shp_rate_max_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_iqs_credit_table_nof
} dnx_data_iqs_credit_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE DEQ_DEFAULT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_deq_default_feature_get(
    int unit,
    dnx_data_iqs_deq_default_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_iqs_deq_default_define_low_delay_deq_bytes,
    dnx_data_iqs_deq_default_define_credit_balance_max,
    dnx_data_iqs_deq_default_define_credit_balance_resolution,
    dnx_data_iqs_deq_default_define_s2d_credit_balance_max,
    dnx_data_iqs_deq_default_define_s2d_credit_balance_resolution,
    dnx_data_iqs_deq_default_define_sram_to_fabric_credit_lfsr_thr,
    dnx_data_iqs_deq_default_define_sram_to_fabric_credit_lfsr_mask,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_deq_default_define_nof
} dnx_data_iqs_deq_default_define_e;

/* Get Data */
/**
 * \brief returns define data of low_delay_deq_bytes
 * Module - 'iqs', Submodule - 'deq_default', data - 'low_delay_deq_bytes'
 * dequeue low delay thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     low_delay_deq_bytes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_low_delay_deq_bytes_get(
    int unit);

/**
 * \brief returns define data of credit_balance_max
 * Module - 'iqs', Submodule - 'deq_default', data - 'credit_balance_max'
 * max credit balance
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     credit_balance_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_credit_balance_max_get(
    int unit);

/**
 * \brief returns define data of credit_balance_resolution
 * Module - 'iqs', Submodule - 'deq_default', data - 'credit_balance_resolution'
 * credit balance resolution for dequeue parameters configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     credit_balance_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_credit_balance_resolution_get(
    int unit);

/**
 * \brief returns define data of s2d_credit_balance_max
 * Module - 'iqs', Submodule - 'deq_default', data - 's2d_credit_balance_max'
 * max credit balance in sram to dram context
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     s2d_credit_balance_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_s2d_credit_balance_max_get(
    int unit);

/**
 * \brief returns define data of s2d_credit_balance_resolution
 * Module - 'iqs', Submodule - 'deq_default', data - 's2d_credit_balance_resolution'
 * credit balance resolution for dequeue parameters configuration in sram to dram context
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     s2d_credit_balance_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_s2d_credit_balance_resolution_get(
    int unit);

/**
 * \brief returns define data of sram_to_fabric_credit_lfsr_thr
 * Module - 'iqs', Submodule - 'deq_default', data - 'sram_to_fabric_credit_lfsr_thr'
 * default lfsr threshold on credits for deq from sram to fabric
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_to_fabric_credit_lfsr_thr - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_sram_to_fabric_credit_lfsr_thr_get(
    int unit);

/**
 * \brief returns define data of sram_to_fabric_credit_lfsr_mask
 * Module - 'iqs', Submodule - 'deq_default', data - 'sram_to_fabric_credit_lfsr_mask'
 * default lfsr mask on credits for deq from sram to fabric
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_to_fabric_credit_lfsr_mask - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_deq_default_sram_to_fabric_credit_lfsr_mask_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_iqs_deq_default_table_sqm_read_weight_profiles,
    dnx_data_iqs_deq_default_table_dqm_read_weight_profiles,
    dnx_data_iqs_deq_default_table_params,
    dnx_data_iqs_deq_default_table_dram_params,
    dnx_data_iqs_deq_default_table_max_deq_cmd,
    dnx_data_iqs_deq_default_table_s2d_max_deq_cmd,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_deq_default_table_nof
} dnx_data_iqs_deq_default_table_e;

/* Get Data */
/**
 * \brief get table sqm_read_weight_profiles entry 
 * stores the SQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * \param [in] profile_id - read weight profile id
 * 
 * \return
 *     sqm_read_weight_profiles - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_sqm_read_weight_profiles_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_sqm_read_weight_profiles_t * dnx_data_iqs_deq_default_sqm_read_weight_profiles_get(
    int unit,
    int profile_id);

/**
 * \brief get table dqm_read_weight_profiles entry 
 * stores the DQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * \param [in] profile_id - read weight profile id
 * 
 * \return
 *     dqm_read_weight_profiles - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_dqm_read_weight_profiles_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_dqm_read_weight_profiles_t * dnx_data_iqs_deq_default_dqm_read_weight_profiles_get(
    int unit,
    int profile_id);

/**
 * \brief get table params entry 
 * stores the read weight profiles that should configured to HW for SRAM and S2D
 * 
 * \param [in] unit - unit #
 * \param [in] bw_level - parameters per bandwidth level.
 * 
 * \return
 *     params - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_params_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_params_t * dnx_data_iqs_deq_default_params_get(
    int unit,
    int bw_level);

/**
 * \brief get table dram_params entry 
 * stores the read weight profiles that should configured to HW for DRAM
 * 
 * \param [in] unit - unit #
 * \param [in] index - index to the table
 * 
 * \return
 *     dram_params - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_dram_params_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_dram_params_t * dnx_data_iqs_deq_default_dram_params_get(
    int unit,
    int index);

/**
 * \brief get table max_deq_cmd entry 
 * stores the read weight profiles that should configured to HW (sram/dram to fabric)
 * 
 * \param [in] unit - unit #
 * \param [in] bw_level - parameters per bandwidth level.
 * \param [in] nof_active_queues - see dbal_enum_value_field_iqs_active_queues_e
 * 
 * \return
 *     max_deq_cmd - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_max_deq_cmd_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_max_deq_cmd_t * dnx_data_iqs_deq_default_max_deq_cmd_get(
    int unit,
    int bw_level,
    int nof_active_queues);

/**
 * \brief get table s2d_max_deq_cmd entry 
 * stores the read weight profiles that should configured to HW (sram t0 dram)
 * 
 * \param [in] unit - unit #
 * \param [in] bw_level - parameters per bandwidth level.
 * \param [in] nof_active_queues - see dbal_enum_value_field_iqs_active_queues_e
 * 
 * \return
 *     s2d_max_deq_cmd - returns the relevant entry values grouped in struct - see dnx_data_iqs_deq_default_s2d_max_deq_cmd_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_iqs_deq_default_s2d_max_deq_cmd_t * dnx_data_iqs_deq_default_s2d_max_deq_cmd_get(
    int unit,
    int bw_level,
    int nof_active_queues);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'sqm_read_weight_profiles'
 * stores the SQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_sqm_read_weight_profiles_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'dqm_read_weight_profiles'
 * stores the DQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_dqm_read_weight_profiles_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'params'
 * stores the read weight profiles that should configured to HW for SRAM and S2D
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_params_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'dram_params'
 * stores the read weight profiles that should configured to HW for DRAM
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_dram_params_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 'max_deq_cmd'
 * stores the read weight profiles that should configured to HW (sram/dram to fabric)
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_max_deq_cmd_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'iqs', Submodule - 'deq_default', table - 's2d_max_deq_cmd'
 * stores the read weight profiles that should configured to HW (sram t0 dram)
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_deq_default_s2d_max_deq_cmd_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)sqm_read_weight_profiles info
 * stores the SQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sqm_read_weight_profiles - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_sqm_read_weight_profiles_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)dqm_read_weight_profiles info
 * stores the DQM read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dqm_read_weight_profiles - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_dqm_read_weight_profiles_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)params info
 * stores the read weight profiles that should configured to HW for SRAM and S2D
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     params - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_params_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)dram_params info
 * stores the read weight profiles that should configured to HW for DRAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dram_params - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_dram_params_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)max_deq_cmd info
 * stores the read weight profiles that should configured to HW (sram/dram to fabric)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_deq_cmd - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_max_deq_cmd_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)s2d_max_deq_cmd info
 * stores the read weight profiles that should configured to HW (sram t0 dram)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     s2d_max_deq_cmd - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_iqs_deq_default_s2d_max_deq_cmd_info_get(
    int unit);

/*
 * SUBMODULE DQCQ:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_dqcq_feature_get(
    int unit,
    dnx_data_iqs_dqcq_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_iqs_dqcq_define_max_nof_contexts,
    dnx_data_iqs_dqcq_define_nof_priorities,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_dqcq_define_nof
} dnx_data_iqs_dqcq_define_e;

/* Get Data */
/**
 * \brief returns define data of max_nof_contexts
 * Module - 'iqs', Submodule - 'dqcq', data - 'max_nof_contexts'
 * max number of DQCQ contexts
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_contexts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_dqcq_max_nof_contexts_get(
    int unit);

/**
 * \brief returns define data of nof_priorities
 * Module - 'iqs', Submodule - 'dqcq', data - 'nof_priorities'
 * number of DQCQ priorities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_priorities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_dqcq_nof_priorities_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_iqs_dqcq_table_nof
} dnx_data_iqs_dqcq_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE DBAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_dbal_feature_get(
    int unit,
    dnx_data_iqs_dbal_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_iqs_dbal_define_ipt_counters_nof_bits,
    dnx_data_iqs_dbal_define_credit_worth_nof_bits,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_dbal_define_nof
} dnx_data_iqs_dbal_define_e;

/* Get Data */
/**
 * \brief returns define data of ipt_counters_nof_bits
 * Module - 'iqs', Submodule - 'dbal', data - 'ipt_counters_nof_bits'
 * nof bits in IPT counters from IPS/GCM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipt_counters_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_dbal_ipt_counters_nof_bits_get(
    int unit);

/**
 * \brief returns numeric data of credit_worth_nof_bits
 * Module - 'iqs', Submodule - 'dbal', data - 'credit_worth_nof_bits'
 * nof bits for credit received from different devices
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     credit_worth_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_dbal_credit_worth_nof_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_iqs_dbal_table_nof
} dnx_data_iqs_dbal_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE FLUSH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_iqs_flush_feature_get(
    int unit,
    dnx_data_iqs_flush_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_iqs_flush_define_bytes_units_to_send,

    /**
     * Must be last one!
     */
    _dnx_data_iqs_flush_define_nof
} dnx_data_iqs_flush_define_e;

/* Get Data */
/**
 * \brief returns define data of bytes_units_to_send
 * Module - 'iqs', Submodule - 'flush', data - 'bytes_units_to_send'
 * Number of bytes to send from the queue in flush process (64B units)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bytes_units_to_send - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_iqs_flush_bytes_units_to_send_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_iqs_flush_table_nof
} dnx_data_iqs_flush_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_iqs_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_IQS_H_*/
/* *INDENT-ON* */
