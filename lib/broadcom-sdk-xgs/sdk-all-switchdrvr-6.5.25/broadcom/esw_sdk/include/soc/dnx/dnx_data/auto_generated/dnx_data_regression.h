/** \file dnx_data_regression.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_REGRESSION_H_
/*{*/
#define _DNX_DATA_REGRESSION_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/port.h>
#include <soc/portmod/portmod.h>
#include <soc/dnxc/dnxc_port.h>
#include <bcm_int/dnx/port/imb/imb.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_regression.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_regression
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_regression_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - DVAPI_TOPOLOGY:
 * topologies of dvapi
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule dvapi_topology table pm_ext_loops
 * Table info:
 * port macros have external loopback
 */
typedef struct
{
    /**
     * external loopback is enabled on this pm
     */
    uint32 pm_id;
} dnx_data_regression_dvapi_topology_pm_ext_loops_t;

/**
 * \brief Holds values of submodule dvapi_topology table pm_p2p_links
 * Table info:
 * port macros have p2p links
 */
typedef struct
{
    /**
     * pm_id id
     */
    uint32 pm_id;
    /**
     * peer pm connected with pm_id
     */
    uint32 peer_pm_id;
} dnx_data_regression_dvapi_topology_pm_p2p_links_t;

/**
 * \brief Holds values of submodule dvapi_topology table pm_test_limitations
 * Table info:
 * Table of PMs with limitations. Used for testing.
 */
typedef struct
{
    /**
     * Max speed allowed per PM. Limitation is due to SPF connectors used on board.
     */
    int max_speed;
} dnx_data_regression_dvapi_topology_pm_test_limitations_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_regression_dvapi_topology_feature_nof
} dnx_data_regression_dvapi_topology_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_regression_dvapi_topology_feature_get_f) (
    int unit,
    dnx_data_regression_dvapi_topology_feature_e feature);

/**
 * \brief returns define data of nof_pm_ext_loops
 * Module - 'regression', Submodule - 'dvapi_topology', data - 'nof_pm_ext_loops'
 * number of exp loopbacks
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pm_ext_loops - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_dvapi_topology_nof_pm_ext_loops_get_f) (
    int unit);

/**
 * \brief returns define data of nof_pm_p2p_links
 * Module - 'regression', Submodule - 'dvapi_topology', data - 'nof_pm_p2p_links'
 * number of p2p links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pm_p2p_links - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_dvapi_topology_nof_pm_p2p_links_get_f) (
    int unit);

/**
 * \brief get table pm_ext_loops entry 
 * port macros have external loopback
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     pm_ext_loops - returns the relevant entry values grouped in struct - see dnx_data_regression_dvapi_topology_pm_ext_loops_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_dvapi_topology_pm_ext_loops_t *(
    *dnx_data_regression_dvapi_topology_pm_ext_loops_get_f) (
    int unit,
    int index);

/**
 * \brief get table pm_p2p_links entry 
 * port macros have p2p links
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     pm_p2p_links - returns the relevant entry values grouped in struct - see dnx_data_regression_dvapi_topology_pm_p2p_links_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_dvapi_topology_pm_p2p_links_t *(
    *dnx_data_regression_dvapi_topology_pm_p2p_links_get_f) (
    int unit,
    int index);

/**
 * \brief get table pm_test_limitations entry 
 * Table of PMs with limitations. Used for testing.
 * 
 * \param [in] unit - unit #
 * \param [in] pm_index - PM instance number.
 * 
 * \return
 *     pm_test_limitations - returns the relevant entry values grouped in struct - see dnx_data_regression_dvapi_topology_pm_test_limitations_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_dvapi_topology_pm_test_limitations_t *(
    *dnx_data_regression_dvapi_topology_pm_test_limitations_get_f) (
    int unit,
    int pm_index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_REGRESSION - DVAPI_TOPOLOGY:
 * {
 */
/**
 * \brief Interface for regression dvapi_topology data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_regression_dvapi_topology_feature_get_f feature_get;
    /**
     * returns define data of nof_pm_ext_loops
     */
    dnx_data_regression_dvapi_topology_nof_pm_ext_loops_get_f nof_pm_ext_loops_get;
    /**
     * returns define data of nof_pm_p2p_links
     */
    dnx_data_regression_dvapi_topology_nof_pm_p2p_links_get_f nof_pm_p2p_links_get;
    /**
     * get table pm_ext_loops entry 
     */
    dnx_data_regression_dvapi_topology_pm_ext_loops_get_f pm_ext_loops_get;
    /**
     * get general info table about table (for example key size)pm_ext_loops info
     */
    dnxc_data_table_info_get_f pm_ext_loops_info_get;
    /**
     * get table pm_p2p_links entry 
     */
    dnx_data_regression_dvapi_topology_pm_p2p_links_get_f pm_p2p_links_get;
    /**
     * get general info table about table (for example key size)pm_p2p_links info
     */
    dnxc_data_table_info_get_f pm_p2p_links_info_get;
    /**
     * get table pm_test_limitations entry 
     */
    dnx_data_regression_dvapi_topology_pm_test_limitations_get_f pm_test_limitations_get;
    /**
     * get general info table about table (for example key size)pm_test_limitations info
     */
    dnxc_data_table_info_get_f pm_test_limitations_info_get;
} dnx_data_if_regression_dvapi_topology_t;

/*
 * }
 */

/*
 * SUBMODULE  - SER_PARAMETERS:
 * Entry idx used for ser dvapi
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ser_parameters table cgm_ipp_map
 * Table info:
 * entry index used for ser testing.
 */
typedef struct
{
    /**
     * entry index for ser testing.
     */
    int entry_index;
} dnx_data_regression_ser_parameters_cgm_ipp_map_t;

/**
 * \brief Holds values of submodule ser_parameters table cgm_voq_dram_bound_prms
 * Table info:
 * entry index used for ser testing.
 */
typedef struct
{
    /**
     * entry index for ser testing.
     */
    int entry_index;
} dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_t;

/**
 * \brief Holds values of submodule ser_parameters table cgm_voq_dram_bound_prms_2
 * Table info:
 * entry index used for ser testing of special sku.
 */
typedef struct
{
    /**
     * entry index for ser testing.
     */
    int entry_index;
} dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_t;

/**
 * \brief Holds values of submodule ser_parameters table cgm_voq_dram_recovery_prms
 * Table info:
 * entry index used for ser testing.
 */
typedef struct
{
    /**
     * entry index for ser testing.
     */
    int entry_index;
} dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_t;

/**
 * \brief Holds values of submodule ser_parameters table cgm_voq_dram_recovery_prms_2
 * Table info:
 * entry index used for ser testing of special sku.
 */
typedef struct
{
    /**
     * entry index for ser testing.
     */
    int entry_index;
} dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_regression_ser_parameters_feature_nof
} dnx_data_regression_ser_parameters_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_regression_ser_parameters_feature_get_f) (
    int unit,
    dnx_data_regression_ser_parameters_feature_e feature);

/**
 * \brief returns define data of cgm_voq_profiles
 * Module - 'regression', Submodule - 'ser_parameters', data - 'cgm_voq_profiles'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_voq_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_cgm_voq_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of ecgm_qqst_table
 * Module - 'regression', Submodule - 'ser_parameters', data - 'ecgm_qqst_table'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecgm_qqst_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_ecgm_qqst_table_get_f) (
    int unit);

/**
 * \brief returns define data of ecgm_qdct_table
 * Module - 'regression', Submodule - 'ser_parameters', data - 'ecgm_qdct_table'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecgm_qdct_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_ecgm_qdct_table_get_f) (
    int unit);

/**
 * \brief returns define data of erpp_per_pp_port_table
 * Module - 'regression', Submodule - 'ser_parameters', data - 'erpp_per_pp_port_table'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     erpp_per_pp_port_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_erpp_per_pp_port_table_get_f) (
    int unit);

/**
 * \brief returns define data of erpp_per_pp_port_table_2
 * Module - 'regression', Submodule - 'ser_parameters', data - 'erpp_per_pp_port_table_2'
 * entry index of the table. Used for testing of special sku.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     erpp_per_pp_port_table_2 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_erpp_per_pp_port_table_2_get_f) (
    int unit);

/**
 * \brief returns define data of mdb_ivsi
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_ivsi'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_ivsi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_mdb_ivsi_get_f) (
    int unit);

/**
 * \brief returns define data of mdb_evsi
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_evsi'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_evsi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_mdb_evsi_get_f) (
    int unit);

/**
 * \brief returns define data of mdb_glem
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_glem'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_glem - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_mdb_glem_get_f) (
    int unit);

/**
 * \brief returns define data of mdb_exem_1
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_exem_1'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_exem_1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_mdb_exem_1_get_f) (
    int unit);

/**
 * \brief returns define data of mdb_fec_1
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_fec_1'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_fec_1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_ser_parameters_mdb_fec_1_get_f) (
    int unit);

/**
 * \brief get table cgm_ipp_map entry 
 * entry index used for ser testing.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_ipp_map - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_ipp_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_ser_parameters_cgm_ipp_map_t *(
    *dnx_data_regression_ser_parameters_cgm_ipp_map_get_f) (
    int unit,
    int index);

/**
 * \brief get table cgm_voq_dram_bound_prms entry 
 * entry index used for ser testing.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_voq_dram_bound_prms - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_t *(
    *dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_get_f) (
    int unit,
    int index);

/**
 * \brief get table cgm_voq_dram_bound_prms_2 entry 
 * entry index used for ser testing of special sku.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_voq_dram_bound_prms_2 - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_t *(
    *dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_get_f) (
    int unit,
    int index);

/**
 * \brief get table cgm_voq_dram_recovery_prms entry 
 * entry index used for ser testing.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_voq_dram_recovery_prms - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_t *(
    *dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_get_f) (
    int unit,
    int index);

/**
 * \brief get table cgm_voq_dram_recovery_prms_2 entry 
 * entry index used for ser testing of special sku.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_voq_dram_recovery_prms_2 - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_t *(
    *dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_REGRESSION - SER_PARAMETERS:
 * {
 */
/**
 * \brief Interface for regression ser_parameters data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_regression_ser_parameters_feature_get_f feature_get;
    /**
     * returns define data of cgm_voq_profiles
     */
    dnx_data_regression_ser_parameters_cgm_voq_profiles_get_f cgm_voq_profiles_get;
    /**
     * returns define data of ecgm_qqst_table
     */
    dnx_data_regression_ser_parameters_ecgm_qqst_table_get_f ecgm_qqst_table_get;
    /**
     * returns define data of ecgm_qdct_table
     */
    dnx_data_regression_ser_parameters_ecgm_qdct_table_get_f ecgm_qdct_table_get;
    /**
     * returns define data of erpp_per_pp_port_table
     */
    dnx_data_regression_ser_parameters_erpp_per_pp_port_table_get_f erpp_per_pp_port_table_get;
    /**
     * returns define data of erpp_per_pp_port_table_2
     */
    dnx_data_regression_ser_parameters_erpp_per_pp_port_table_2_get_f erpp_per_pp_port_table_2_get;
    /**
     * returns define data of mdb_ivsi
     */
    dnx_data_regression_ser_parameters_mdb_ivsi_get_f mdb_ivsi_get;
    /**
     * returns define data of mdb_evsi
     */
    dnx_data_regression_ser_parameters_mdb_evsi_get_f mdb_evsi_get;
    /**
     * returns define data of mdb_glem
     */
    dnx_data_regression_ser_parameters_mdb_glem_get_f mdb_glem_get;
    /**
     * returns define data of mdb_exem_1
     */
    dnx_data_regression_ser_parameters_mdb_exem_1_get_f mdb_exem_1_get;
    /**
     * returns define data of mdb_fec_1
     */
    dnx_data_regression_ser_parameters_mdb_fec_1_get_f mdb_fec_1_get;
    /**
     * get table cgm_ipp_map entry 
     */
    dnx_data_regression_ser_parameters_cgm_ipp_map_get_f cgm_ipp_map_get;
    /**
     * get general info table about table (for example key size)cgm_ipp_map info
     */
    dnxc_data_table_info_get_f cgm_ipp_map_info_get;
    /**
     * get table cgm_voq_dram_bound_prms entry 
     */
    dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_get_f cgm_voq_dram_bound_prms_get;
    /**
     * get general info table about table (for example key size)cgm_voq_dram_bound_prms info
     */
    dnxc_data_table_info_get_f cgm_voq_dram_bound_prms_info_get;
    /**
     * get table cgm_voq_dram_bound_prms_2 entry 
     */
    dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_get_f cgm_voq_dram_bound_prms_2_get;
    /**
     * get general info table about table (for example key size)cgm_voq_dram_bound_prms_2 info
     */
    dnxc_data_table_info_get_f cgm_voq_dram_bound_prms_2_info_get;
    /**
     * get table cgm_voq_dram_recovery_prms entry 
     */
    dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_get_f cgm_voq_dram_recovery_prms_get;
    /**
     * get general info table about table (for example key size)cgm_voq_dram_recovery_prms info
     */
    dnxc_data_table_info_get_f cgm_voq_dram_recovery_prms_info_get;
    /**
     * get table cgm_voq_dram_recovery_prms_2 entry 
     */
    dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_get_f cgm_voq_dram_recovery_prms_2_get;
    /**
     * get general info table about table (for example key size)cgm_voq_dram_recovery_prms_2 info
     */
    dnxc_data_table_info_get_f cgm_voq_dram_recovery_prms_2_info_get;
} dnx_data_if_regression_ser_parameters_t;

/*
 * }
 */

/*
 * SUBMODULE  - ACCESS:
 * access for dvapi
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_regression_access_feature_nof
} dnx_data_regression_access_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_regression_access_feature_get_f) (
    int unit,
    dnx_data_regression_access_feature_e feature);

/**
 * \brief returns numeric data of access_mode
 * Module - 'regression', Submodule - 'access', data - 'access_mode'
 * Checking the device access mode for access dvapi.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     access_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_access_access_mode_get_f) (
    int unit);

/**
 * \brief returns numeric data of severity_miss_check
 * Module - 'regression', Submodule - 'access', data - 'severity_miss_check'
 * if memories severity check for access dvapi.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     severity_miss_check - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_access_severity_miss_check_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_REGRESSION - ACCESS:
 * {
 */
/**
 * \brief Interface for regression access data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_regression_access_feature_get_f feature_get;
    /**
     * returns numeric data of access_mode
     */
    dnx_data_regression_access_access_mode_get_f access_mode_get;
    /**
     * returns numeric data of severity_miss_check
     */
    dnx_data_regression_access_severity_miss_check_get_f severity_miss_check_get;
} dnx_data_if_regression_access_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_REGRESSION:
 * {
 */
/**
 * \brief Interface for regression data
 */
typedef struct
{
    /**
     * Interface for regression dvapi_topology data
     */
    dnx_data_if_regression_dvapi_topology_t dvapi_topology;
    /**
     * Interface for regression ser_parameters data
     */
    dnx_data_if_regression_ser_parameters_t ser_parameters;
    /**
     * Interface for regression access data
     */
    dnx_data_if_regression_access_t access;
} dnx_data_if_regression_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_regression_t dnx_data_regression;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_REGRESSION_H_*/
/* *INDENT-ON* */
