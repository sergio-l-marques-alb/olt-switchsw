/** \file dnx_data_instru.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INSTRU_H_
/*{*/
#define _DNX_DATA_INSTRU_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/instru.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_instru.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_instru
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_instru_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - IPT:
 * IPT (tail-edit, INT) module
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ipt table profile_info
 * Table info:
 * per ipt profile information
 */
typedef struct
{
    /**
     * type of the ipt profile
     */
    bcm_instru_ipt_node_type_t type;
} dnx_data_instru_ipt_profile_info_t;

/**
 * \brief Holds values of submodule ipt table metadata
 * Table info:
 * Translate API metadata flag ID to HW values (bit index, size in bytes, etc...)
 */
typedef struct
{
    /**
     * HW bit id
     */
    uint32 bit;
    /**
     * field length in bytes
     */
    uint32 size;
} dnx_data_instru_ipt_metadata_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Advanced IPT
     */
    dnx_data_instru_ipt_advanced_ipt,
    /**
     * Encapsulation size estimation is used in Egress
     */
    dnx_data_instru_ipt_estimated_encap_size,

    /**
     * Must be last one!
     */
    _dnx_data_instru_ipt_feature_nof
} dnx_data_instru_ipt_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_instru_ipt_feature_get_f) (
    int unit,
    dnx_data_instru_ipt_feature_e feature);

/**
 * \brief returns define data of profile_size
 * Module - 'instru', Submodule - 'ipt', data - 'profile_size'
 * IPT profile size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     profile_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_ipt_profile_size_get_f) (
    int unit);

/**
 * \brief returns define data of metadata_bitmap_size
 * Module - 'instru', Submodule - 'ipt', data - 'metadata_bitmap_size'
 * metadata bitmap size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     metadata_bitmap_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_ipt_metadata_bitmap_size_get_f) (
    int unit);

/**
 * \brief returns define data of metadata_edit_size
 * Module - 'instru', Submodule - 'ipt', data - 'metadata_edit_size'
 * metadata edit size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     metadata_edit_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_ipt_metadata_edit_size_get_f) (
    int unit);

/**
 * \brief returns define data of node_id_padding_size
 * Module - 'instru', Submodule - 'ipt', data - 'node_id_padding_size'
 * prefix size of node id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     node_id_padding_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_ipt_node_id_padding_size_get_f) (
    int unit);

/**
 * \brief returns define data of telemetry_queue_occ_check
 * Module - 'instru', Submodule - 'ipt', data - 'telemetry_queue_occ_check'
 * maximum telemtry queue occupancy need verifcation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     telemetry_queue_occ_check - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_ipt_telemetry_queue_occ_check_get_f) (
    int unit);

/**
 * \brief returns define data of telemetry_queue_occ_max
 * Module - 'instru', Submodule - 'ipt', data - 'telemetry_queue_occ_max'
 * maximum telemtry queue occupancy expected value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     telemetry_queue_occ_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_ipt_telemetry_queue_occ_max_get_f) (
    int unit);

/**
 * \brief get table profile_info entry 
 * per ipt profile information
 * 
 * \param [in] unit - unit #
 * \param [in] profile_id - profile index
 * 
 * \return
 *     profile_info - returns the relevant entry values grouped in struct - see dnx_data_instru_ipt_profile_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_instru_ipt_profile_info_t *(
    *dnx_data_instru_ipt_profile_info_get_f) (
    int unit,
    int profile_id);

/**
 * \brief get table metadata entry 
 * Translate API metadata flag ID to HW values (bit index, size in bytes, etc...)
 * 
 * \param [in] unit - unit #
 * \param [in] flag_id - running index (API flag ID)
 * 
 * \return
 *     metadata - returns the relevant entry values grouped in struct - see dnx_data_instru_ipt_metadata_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_instru_ipt_metadata_t *(
    *dnx_data_instru_ipt_metadata_get_f) (
    int unit,
    int flag_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INSTRU - IPT:
 * {
 */
/**
 * \brief Interface for instru ipt data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_instru_ipt_feature_get_f feature_get;
    /**
     * returns define data of profile_size
     */
    dnx_data_instru_ipt_profile_size_get_f profile_size_get;
    /**
     * returns define data of metadata_bitmap_size
     */
    dnx_data_instru_ipt_metadata_bitmap_size_get_f metadata_bitmap_size_get;
    /**
     * returns define data of metadata_edit_size
     */
    dnx_data_instru_ipt_metadata_edit_size_get_f metadata_edit_size_get;
    /**
     * returns define data of node_id_padding_size
     */
    dnx_data_instru_ipt_node_id_padding_size_get_f node_id_padding_size_get;
    /**
     * returns define data of telemetry_queue_occ_check
     */
    dnx_data_instru_ipt_telemetry_queue_occ_check_get_f telemetry_queue_occ_check_get;
    /**
     * returns define data of telemetry_queue_occ_max
     */
    dnx_data_instru_ipt_telemetry_queue_occ_max_get_f telemetry_queue_occ_max_get;
    /**
     * get table profile_info entry 
     */
    dnx_data_instru_ipt_profile_info_get_f profile_info_get;
    /**
     * get general info table about table (for example key size)profile_info info
     */
    dnxc_data_table_info_get_f profile_info_info_get;
    /**
     * get table metadata entry 
     */
    dnx_data_instru_ipt_metadata_get_f metadata_get;
    /**
     * get general info table about table (for example key size)metadata info
     */
    dnxc_data_table_info_get_f metadata_info_get;
} dnx_data_if_instru_ipt_t;

/*
 * }
 */

/*
 * SUBMODULE  - SFLOW:
 * sFlow module
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_sflow_feature_nof
} dnx_data_instru_sflow_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_instru_sflow_feature_get_f) (
    int unit,
    dnx_data_instru_sflow_feature_e feature);

/**
 * \brief returns define data of max_nof_sflow_encaps
 * Module - 'instru', Submodule - 'sflow', data - 'max_nof_sflow_encaps'
 * Maximum number of possible sFlow encap entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_sflow_encaps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_sflow_max_nof_sflow_encaps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_sflow_raw_entries_per_stack
 * Module - 'instru', Submodule - 'sflow', data - 'nof_sflow_raw_entries_per_stack'
 * Number of RAW entries used per sFlow ETPS stack
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sflow_raw_entries_per_stack - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_sflow_nof_sflow_raw_entries_per_stack_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INSTRU - SFLOW:
 * {
 */
/**
 * \brief Interface for instru sflow data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_instru_sflow_feature_get_f feature_get;
    /**
     * returns define data of max_nof_sflow_encaps
     */
    dnx_data_instru_sflow_max_nof_sflow_encaps_get_f max_nof_sflow_encaps_get;
    /**
     * returns define data of nof_sflow_raw_entries_per_stack
     */
    dnx_data_instru_sflow_nof_sflow_raw_entries_per_stack_get_f nof_sflow_raw_entries_per_stack_get;
} dnx_data_if_instru_sflow_t;

/*
 * }
 */

/*
 * SUBMODULE  - IFA:
 * ifa module
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_ifa_feature_nof
} dnx_data_instru_ifa_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_instru_ifa_feature_get_f) (
    int unit,
    dnx_data_instru_ifa_feature_e feature);

/**
 * \brief returns define data of ingress_tod_feature
 * Module - 'instru', Submodule - 'ifa', data - 'ingress_tod_feature'
 * ingress tod is shifted right by 2 bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ingress_tod_feature - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_ifa_ingress_tod_feature_get_f) (
    int unit);

/**
 * \brief returns define data of max_lenght_check_for_ifa2
 * Module - 'instru', Submodule - 'ifa', data - 'max_lenght_check_for_ifa2'
 * Set for maximum metadata length check
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_lenght_check_for_ifa2 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_ifa_max_lenght_check_for_ifa2_get_f) (
    int unit);

/**
 * \brief returns define data of ifa2_is_in_hl
 * Module - 'instru', Submodule - 'ifa', data - 'ifa2_is_in_hl'
 * IFA2 is implemented in HL
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ifa2_is_in_hl - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_ifa_ifa2_is_in_hl_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INSTRU - IFA:
 * {
 */
/**
 * \brief Interface for instru ifa data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_instru_ifa_feature_get_f feature_get;
    /**
     * returns define data of ingress_tod_feature
     */
    dnx_data_instru_ifa_ingress_tod_feature_get_f ingress_tod_feature_get;
    /**
     * returns define data of max_lenght_check_for_ifa2
     */
    dnx_data_instru_ifa_max_lenght_check_for_ifa2_get_f max_lenght_check_for_ifa2_get;
    /**
     * returns define data of ifa2_is_in_hl
     */
    dnx_data_instru_ifa_ifa2_is_in_hl_get_f ifa2_is_in_hl_get;
} dnx_data_if_instru_ifa_t;

/*
 * }
 */

/*
 * SUBMODULE  - EVENTOR:
 * Eventor module
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * eventor is supported indication
     */
    dnx_data_instru_eventor_is_supported,
    /**
     * eventor periodic events is supported indication
     */
    dnx_data_instru_eventor_is_periodic_events_supported,

    /**
     * Must be last one!
     */
    _dnx_data_instru_eventor_feature_nof
} dnx_data_instru_eventor_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_instru_eventor_feature_get_f) (
    int unit,
    dnx_data_instru_eventor_feature_e feature);

/**
 * \brief returns define data of rx_evpck_header_size
 * Module - 'instru', Submodule - 'eventor', data - 'rx_evpck_header_size'
 * rx packet eventor header size in bytes (generated by PP)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_evpck_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_rx_evpck_header_size_get_f) (
    int unit);

/**
 * \brief returns define data of tx_builder_max_header_size
 * Module - 'instru', Submodule - 'eventor', data - 'tx_builder_max_header_size'
 * Eventor Transmit header MAX size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tx_builder_max_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_tx_builder_max_header_size_get_f) (
    int unit);

/**
 * \brief returns define data of nof_contexts
 * Module - 'instru', Submodule - 'eventor', data - 'nof_contexts'
 * rx channels, tx contexts
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_contexts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_nof_contexts_get_f) (
    int unit);

/**
 * \brief returns define data of nof_contexts_bits
 * Module - 'instru', Submodule - 'eventor', data - 'nof_contexts_bits'
 * nof bits in nof_contexts
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_contexts_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_nof_contexts_bits_get_f) (
    int unit);

/**
 * \brief returns define data of nof_builders
 * Module - 'instru', Submodule - 'eventor', data - 'nof_builders'
 * packet generators (builders)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_builders - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_nof_builders_get_f) (
    int unit);

/**
 * \brief returns define data of nof_builders_bits
 * Module - 'instru', Submodule - 'eventor', data - 'nof_builders_bits'
 * nof bits in packet generators (builders)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_builders_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_nof_builders_bits_get_f) (
    int unit);

/**
 * \brief returns define data of nof_sram_banks
 * Module - 'instru', Submodule - 'eventor', data - 'nof_sram_banks'
 * Number of SRAM banks
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sram_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_nof_sram_banks_get_f) (
    int unit);

/**
 * \brief returns define data of sram_bank_bits
 * Module - 'instru', Submodule - 'eventor', data - 'sram_bank_bits'
 * Number of bits in sram bank
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_bank_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_sram_bank_bits_get_f) (
    int unit);

/**
 * \brief returns define data of sram_banks_full_size
 * Module - 'instru', Submodule - 'eventor', data - 'sram_banks_full_size'
 * sram size in bytes including ECC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_banks_full_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_sram_banks_full_size_get_f) (
    int unit);

/**
 * \brief returns define data of sram_banks_net_size
 * Module - 'instru', Submodule - 'eventor', data - 'sram_banks_net_size'
 * sram size in bytes excluding ECC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_banks_net_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_sram_banks_net_size_get_f) (
    int unit);

/**
 * \brief returns define data of builder_max_buffer_size
 * Module - 'instru', Submodule - 'eventor', data - 'builder_max_buffer_size'
 * builder max buffer size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     builder_max_buffer_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_builder_max_buffer_size_get_f) (
    int unit);

/**
 * \brief returns define data of rx_max_buffer_size
 * Module - 'instru', Submodule - 'eventor', data - 'rx_max_buffer_size'
 * builder max buffer size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_max_buffer_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_rx_max_buffer_size_get_f) (
    int unit);

/**
 * \brief returns define data of axi_sram_offset
 * Module - 'instru', Submodule - 'eventor', data - 'axi_sram_offset'
 * axi address of eventor sram
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     axi_sram_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_axi_sram_offset_get_f) (
    int unit);

/**
 * \brief returns define data of is_extra_words_copy
 * Module - 'instru', Submodule - 'eventor', data - 'is_extra_words_copy'
 * extra words are copy due to alignment
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_extra_words_copy - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_is_extra_words_copy_get_f) (
    int unit);

/**
 * \brief returns define data of is_rx_en
 * Module - 'instru', Submodule - 'eventor', data - 'is_rx_en'
 * in this device need to enable eventor rx
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_rx_en - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_is_rx_en_get_f) (
    int unit);

/**
 * \brief returns define data of tx_builder_limitation_1
 * Module - 'instru', Submodule - 'eventor', data - 'tx_builder_limitation_1'
 * builder threshold size must be a full multiplication of event size or zero, if 0 no limitation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tx_builder_limitation_1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_tx_builder_limitation_1_get_f) (
    int unit);

/**
 * \brief returns numeric data of builder_max_timeout_ms
 * Module - 'instru', Submodule - 'eventor', data - 'builder_max_timeout_ms'
 * builder max timeout in micro seconds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     builder_max_timeout_ms - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_builder_max_timeout_ms_get_f) (
    int unit);

/**
 * \brief returns numeric data of sram_bank_mask
 * Module - 'instru', Submodule - 'eventor', data - 'sram_bank_mask'
 * Mask of sram bank
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_bank_mask - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_eventor_sram_bank_mask_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INSTRU - EVENTOR:
 * {
 */
/**
 * \brief Interface for instru eventor data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_instru_eventor_feature_get_f feature_get;
    /**
     * returns define data of rx_evpck_header_size
     */
    dnx_data_instru_eventor_rx_evpck_header_size_get_f rx_evpck_header_size_get;
    /**
     * returns define data of tx_builder_max_header_size
     */
    dnx_data_instru_eventor_tx_builder_max_header_size_get_f tx_builder_max_header_size_get;
    /**
     * returns define data of nof_contexts
     */
    dnx_data_instru_eventor_nof_contexts_get_f nof_contexts_get;
    /**
     * returns define data of nof_contexts_bits
     */
    dnx_data_instru_eventor_nof_contexts_bits_get_f nof_contexts_bits_get;
    /**
     * returns define data of nof_builders
     */
    dnx_data_instru_eventor_nof_builders_get_f nof_builders_get;
    /**
     * returns define data of nof_builders_bits
     */
    dnx_data_instru_eventor_nof_builders_bits_get_f nof_builders_bits_get;
    /**
     * returns define data of nof_sram_banks
     */
    dnx_data_instru_eventor_nof_sram_banks_get_f nof_sram_banks_get;
    /**
     * returns define data of sram_bank_bits
     */
    dnx_data_instru_eventor_sram_bank_bits_get_f sram_bank_bits_get;
    /**
     * returns define data of sram_banks_full_size
     */
    dnx_data_instru_eventor_sram_banks_full_size_get_f sram_banks_full_size_get;
    /**
     * returns define data of sram_banks_net_size
     */
    dnx_data_instru_eventor_sram_banks_net_size_get_f sram_banks_net_size_get;
    /**
     * returns define data of builder_max_buffer_size
     */
    dnx_data_instru_eventor_builder_max_buffer_size_get_f builder_max_buffer_size_get;
    /**
     * returns define data of rx_max_buffer_size
     */
    dnx_data_instru_eventor_rx_max_buffer_size_get_f rx_max_buffer_size_get;
    /**
     * returns define data of axi_sram_offset
     */
    dnx_data_instru_eventor_axi_sram_offset_get_f axi_sram_offset_get;
    /**
     * returns define data of is_extra_words_copy
     */
    dnx_data_instru_eventor_is_extra_words_copy_get_f is_extra_words_copy_get;
    /**
     * returns define data of is_rx_en
     */
    dnx_data_instru_eventor_is_rx_en_get_f is_rx_en_get;
    /**
     * returns define data of tx_builder_limitation_1
     */
    dnx_data_instru_eventor_tx_builder_limitation_1_get_f tx_builder_limitation_1_get;
    /**
     * returns numeric data of builder_max_timeout_ms
     */
    dnx_data_instru_eventor_builder_max_timeout_ms_get_f builder_max_timeout_ms_get;
    /**
     * returns numeric data of sram_bank_mask
     */
    dnx_data_instru_eventor_sram_bank_mask_get_f sram_bank_mask_get;
} dnx_data_if_instru_eventor_t;

/*
 * }
 */

/*
 * SUBMODULE  - SYNCED_TRIGGERS:
 * Synchronous triggers Mechanism
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_synced_triggers_feature_nof
} dnx_data_instru_synced_triggers_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_instru_synced_triggers_feature_get_f) (
    int unit,
    dnx_data_instru_synced_triggers_feature_e feature);

/**
 * \brief returns define data of synced_trigger_version
 * Module - 'instru', Submodule - 'synced_triggers', data - 'synced_trigger_version'
 * synced trigger version. 0 - J2, J2C, Q2A, 1 - J2P,J2X, 2 - future devices
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     synced_trigger_version - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_triggers_synced_trigger_version_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INSTRU - SYNCED_TRIGGERS:
 * {
 */
/**
 * \brief Interface for instru synced_triggers data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_instru_synced_triggers_feature_get_f feature_get;
    /**
     * returns define data of synced_trigger_version
     */
    dnx_data_instru_synced_triggers_synced_trigger_version_get_f synced_trigger_version_get;
} dnx_data_if_instru_synced_triggers_t;

/*
 * }
 */

/*
 * SUBMODULE  - SYNCED_COUNTERS:
 * Synchronous Counters Mechanism
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule synced_counters table counters_info
 * Table info:
 * The information on how to get the synchronized counters from HW.
 */
typedef struct
{
    /**
     * Whether the entry is in use.
     */
    int valid;
    /**
     * The enum ID of the relevat counter. Different enums for different source types.
     */
    int bcm_counter_type;
    /**
     * Some counter types are relevant for multiple counters, wiht the index indicating which.
     */
    int counter_index;
    /**
     * The DBAL field of the counter for collecting the information.
     */
    int dbal_field;
    /**
     * If we need to convert the value returned from DBAL from words to bytes.
     */
    int words_to_bytes_conv_needed;
} dnx_data_instru_synced_counters_counters_info_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_synced_counters_feature_nof
} dnx_data_instru_synced_counters_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_instru_synced_counters_feature_get_f) (
    int unit,
    dnx_data_instru_synced_counters_feature_e feature);

/**
 * \brief returns numeric data of icgm_type
 * Module - 'instru', Submodule - 'synced_counters', data - 'icgm_type'
 * Synced counters source type ICGM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     icgm_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_icgm_type_get_f) (
    int unit);

/**
 * \brief returns numeric data of nif_type
 * Module - 'instru', Submodule - 'synced_counters', data - 'nif_type'
 * Synced counters source type NIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_nif_type_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_types
 * Module - 'instru', Submodule - 'synced_counters', data - 'nof_types'
 * Number of Synced Counters source types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_nof_types_get_f) (
    int unit);

/**
 * \brief returns define data of period_adjusted_to_ns_through_time_ratio
 * Module - 'instru', Submodule - 'synced_counters', data - 'period_adjusted_to_ns_through_time_ratio'
 * Indicated whether we use ECI_TIME_RATIO to adjust the period to being ns according to clock frequency.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     period_adjusted_to_ns_through_time_ratio - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_period_adjusted_to_ns_through_time_ratio_get_f) (
    int unit);

/**
 * \brief returns define data of period_adjusting_clk_bits
 * Module - 'instru', Submodule - 'synced_counters', data - 'period_adjusting_clk_bits'
 * number of bits for TIME_RATIO_NOF_CLK in ECI_TIME_RATIO.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     period_adjusting_clk_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_period_adjusting_clk_bits_get_f) (
    int unit);

/**
 * \brief returns define data of period_adjusting_ns_bits
 * Module - 'instru', Submodule - 'synced_counters', data - 'period_adjusting_ns_bits'
 * number of bits for TIME_RATIO_NOF_NS in ECI_TIME_RATIO.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     period_adjusting_ns_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_period_adjusting_ns_bits_get_f) (
    int unit);

/**
 * \brief returns define data of interval_period_size_hw
 * Module - 'instru', Submodule - 'synced_counters', data - 'interval_period_size_hw'
 * Size in bits of the period between two pulses in the pulse generator, as written to HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     interval_period_size_hw - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_interval_period_size_hw_get_f) (
    int unit);

/**
 * \brief returns define data of max_interval_period_size
 * Module - 'instru', Submodule - 'synced_counters', data - 'max_interval_period_size'
 * Size in bits of the period between two pulses in the pulse generator, maximum usable bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_interval_period_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_max_interval_period_size_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_max_nof_intervals
 * Module - 'instru', Submodule - 'synced_counters', data - 'cgm_max_nof_intervals'
 * The number of intervals in one round of the Synced counters instrumentation logic for CGM.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_max_nof_intervals - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_cgm_max_nof_intervals_get_f) (
    int unit);

/**
 * \brief returns define data of nif_max_nof_intervals
 * Module - 'instru', Submodule - 'synced_counters', data - 'nif_max_nof_intervals'
 * The number of intervals in one round of the Synced counters instrumentation logic for NIF.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_max_nof_intervals - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_nif_max_nof_intervals_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_write_counter_wrap_around
 * Module - 'instru', Submodule - 'synced_counters', data - 'cgm_write_counter_wrap_around'
 * The number of intervals that will cause the interval counter to wrap arounhd.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_write_counter_wrap_around - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_cgm_write_counter_wrap_around_get_f) (
    int unit);

/**
 * \brief returns define data of bytes_in_word
 * Module - 'instru', Submodule - 'synced_counters', data - 'bytes_in_word'
 * How many bytes are in a word in the synchronized counters.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bytes_in_word - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_instru_synced_counters_bytes_in_word_get_f) (
    int unit);

/**
 * \brief get table counters_info entry 
 * The information on how to get the synchronized counters from HW.
 * 
 * \param [in] unit - unit #
 * \param [in] entry_index - The counter's position in the array provided to the user.
 * \param [in] source_type - The source of the synchronized counters.
 * 
 * \return
 *     counters_info - returns the relevant entry values grouped in struct - see dnx_data_instru_synced_counters_counters_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_instru_synced_counters_counters_info_t *(
    *dnx_data_instru_synced_counters_counters_info_get_f) (
    int unit,
    int entry_index,
    int source_type);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INSTRU - SYNCED_COUNTERS:
 * {
 */
/**
 * \brief Interface for instru synced_counters data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_instru_synced_counters_feature_get_f feature_get;
    /**
     * returns numeric data of icgm_type
     */
    dnx_data_instru_synced_counters_icgm_type_get_f icgm_type_get;
    /**
     * returns numeric data of nif_type
     */
    dnx_data_instru_synced_counters_nif_type_get_f nif_type_get;
    /**
     * returns numeric data of nof_types
     */
    dnx_data_instru_synced_counters_nof_types_get_f nof_types_get;
    /**
     * returns define data of period_adjusted_to_ns_through_time_ratio
     */
    dnx_data_instru_synced_counters_period_adjusted_to_ns_through_time_ratio_get_f period_adjusted_to_ns_through_time_ratio_get;
    /**
     * returns define data of period_adjusting_clk_bits
     */
    dnx_data_instru_synced_counters_period_adjusting_clk_bits_get_f period_adjusting_clk_bits_get;
    /**
     * returns define data of period_adjusting_ns_bits
     */
    dnx_data_instru_synced_counters_period_adjusting_ns_bits_get_f period_adjusting_ns_bits_get;
    /**
     * returns define data of interval_period_size_hw
     */
    dnx_data_instru_synced_counters_interval_period_size_hw_get_f interval_period_size_hw_get;
    /**
     * returns define data of max_interval_period_size
     */
    dnx_data_instru_synced_counters_max_interval_period_size_get_f max_interval_period_size_get;
    /**
     * returns define data of cgm_max_nof_intervals
     */
    dnx_data_instru_synced_counters_cgm_max_nof_intervals_get_f cgm_max_nof_intervals_get;
    /**
     * returns define data of nif_max_nof_intervals
     */
    dnx_data_instru_synced_counters_nif_max_nof_intervals_get_f nif_max_nof_intervals_get;
    /**
     * returns define data of cgm_write_counter_wrap_around
     */
    dnx_data_instru_synced_counters_cgm_write_counter_wrap_around_get_f cgm_write_counter_wrap_around_get;
    /**
     * returns define data of bytes_in_word
     */
    dnx_data_instru_synced_counters_bytes_in_word_get_f bytes_in_word_get;
    /**
     * get table counters_info entry 
     */
    dnx_data_instru_synced_counters_counters_info_get_f counters_info_get;
    /**
     * get general info table about table (for example key size)counters_info info
     */
    dnxc_data_table_info_get_f counters_info_info_get;
} dnx_data_if_instru_synced_counters_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_INSTRU:
 * {
 */
/**
 * \brief Interface for instru data
 */
typedef struct
{
    /**
     * Interface for instru ipt data
     */
    dnx_data_if_instru_ipt_t ipt;
    /**
     * Interface for instru sflow data
     */
    dnx_data_if_instru_sflow_t sflow;
    /**
     * Interface for instru ifa data
     */
    dnx_data_if_instru_ifa_t ifa;
    /**
     * Interface for instru eventor data
     */
    dnx_data_if_instru_eventor_t eventor;
    /**
     * Interface for instru synced_triggers data
     */
    dnx_data_if_instru_synced_triggers_t synced_triggers;
    /**
     * Interface for instru synced_counters data
     */
    dnx_data_if_instru_synced_counters_t synced_counters;
} dnx_data_if_instru_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_instru_t dnx_data_instru;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INSTRU_H_*/
/* *INDENT-ON* */
