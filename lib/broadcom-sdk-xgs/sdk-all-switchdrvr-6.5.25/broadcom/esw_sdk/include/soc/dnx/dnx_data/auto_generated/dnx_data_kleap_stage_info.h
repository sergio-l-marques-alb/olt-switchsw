/** \file dnx_data_kleap_stage_info.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_KLEAP_STAGE_INFO_H_
/*{*/
#define _DNX_DATA_KLEAP_STAGE_INFO_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <src/appl/diag/dnx/pp/kleap/diag_dnx_ikleap.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_kleap_stage_info.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_kleap_stage_info
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_kleap_stage_info_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - KLEAP_STAGE_INFO:
 * .
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule kleap_stage_info table info_per_stage
 * Table info:
 * Info per stage
 */
typedef struct
{
    /**
     * Stage name
     */
    char *stage_name;
    /**
     * Single, Double, Invalid
     */
    int type;
    /**
     * Single=1, Double=2, Invalid=0
     */
    int nof_sub_stages;
    /**
     * nof KBRs
     */
    int nof_kbrs;
    /**
     * nof FFC
     */
    int nof_ffc;
    /**
     * nof FFC Group
     */
    int nof_ffc_g;
    /**
     * nof PD
     */
    int nof_pd;
    /**
     * dbal_table_resource_mapping
     */
    int dbal_table_resource_mapping;
    /**
     * dbal_table_kbr_info
     */
    int dbal_table_kbr_info;
    /**
     * dbal_table_ffc_instruction
     */
    int dbal_table_ffc_instruction;
    /**
     * dbal_table_ffc_quad_is_acl
     */
    int dbal_table_ffc_quad_is_acl;
    /**
     * dbal_table_pd_info
     */
    int dbal_table_pd_info;
    /**
     * dbal_kbr_idx_field_per_stage
     */
    int dbal_kbr_idx_field_per_stage;
    /**
     * dbal_context_profile_field_per_stage
     */
    int dbal_context_profile_field_per_stage;
    /**
     * dbal_ffc_instruction_field_per_stage
     */
    int dbal_ffc_instruction_field_per_stage;
    /**
     * dbal_litrally_instruction_field_per_stage
     */
    int dbal_litrally_instruction_field_per_stage;
    /**
     * dbal_relative_header_instruction_field_per_stage
     */
    int dbal_relative_header_instruction_field_per_stage;
    /**
     * dbal_header_instruction_field_per_stage
     */
    int dbal_header_instruction_field_per_stage;
    /**
     * dbal_record_instruction_field_per_stage
     */
    int dbal_record_instruction_field_per_stage;
} dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_t;

/**
 * \brief Holds values of submodule kleap_stage_info table info_per_stage_per_kbr
 */
typedef struct
{
    /**
     * nof KBRs
     */
    int nof_kbrs;
    int kbr2physical[19];
    int kbr2key_sig[19];
} dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_kbr_t;

/**
 * \brief Holds values of submodule kleap_stage_info table info_per_stage_per_pd
 */
typedef struct
{
    int pd_mapping_type;
    char *pd_mapping_name;
} dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_pd_t;

/**
 * \brief Holds values of submodule kleap_stage_info table info_per_stage_per_sub_stage
 */
typedef struct
{
    char *kleap_sub_stage_name;
    int stage_index_in_pipe;
    int dbal_context_enum;
    int dbal_stage_context_id;
    int dbal_stage_context_properties;
    char *literally_signal_structure_name;
} dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_sub_stage_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_kleap_stage_info_kleap_stage_info_feature_nof
} dnx_data_kleap_stage_info_kleap_stage_info_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_kleap_stage_info_kleap_stage_info_feature_get_f) (
    int unit,
    dnx_data_kleap_stage_info_kleap_stage_info_feature_e feature);

/**
 * \brief returns numeric data of nof_kleap_stages
 * Module - 'kleap_stage_info', Submodule - 'kleap_stage_info', data - 'nof_kleap_stages'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_kleap_stages - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_kleap_stage_info_kleap_stage_info_nof_kleap_stages_get_f) (
    int unit);

/**
 * \brief get table info_per_stage entry 
 * Info per stage
 * 
 * \param [in] unit - unit #
 * \param [in] stage_index - Stage index
 * 
 * \return
 *     info_per_stage - returns the relevant entry values grouped in struct - see dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_t *(
    *dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_get_f) (
    int unit,
    int stage_index);

/**
 * \brief get table info_per_stage_per_kbr entry 
 * 
 * \param [in] unit - unit #
 * \param [in] stage_index - stage index
 * 
 * \return
 *     info_per_stage_per_kbr - returns the relevant entry values grouped in struct - see dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_kbr_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_kbr_t *(
    *dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_kbr_get_f) (
    int unit,
    int stage_index);

/**
 * \brief get table info_per_stage_per_pd entry 
 * 
 * \param [in] unit - unit #
 * \param [in] stage_index - stage index
 * \param [in] pd_index - pd index
 * 
 * \return
 *     info_per_stage_per_pd - returns the relevant entry values grouped in struct - see dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_pd_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_pd_t *(
    *dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_pd_get_f) (
    int unit,
    int stage_index,
    int pd_index);

/**
 * \brief get table info_per_stage_per_sub_stage entry 
 * 
 * \param [in] unit - unit #
 * \param [in] stage_index - stage index
 * \param [in] sub_stage_index - sub stage index
 * 
 * \return
 *     info_per_stage_per_sub_stage - returns the relevant entry values grouped in struct - see dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_sub_stage_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_sub_stage_t *(
    *dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_sub_stage_get_f) (
    int unit,
    int stage_index,
    int sub_stage_index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_KLEAP_STAGE_INFO - KLEAP_STAGE_INFO:
 * {
 */
/**
 * \brief Interface for kleap_stage_info kleap_stage_info data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_kleap_stage_info_kleap_stage_info_feature_get_f feature_get;
    /**
     * returns numeric data of nof_kleap_stages
     */
    dnx_data_kleap_stage_info_kleap_stage_info_nof_kleap_stages_get_f nof_kleap_stages_get;
    /**
     * get table info_per_stage entry 
     */
    dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_get_f info_per_stage_get;
    /**
     * get general info table about table (for example key size)info_per_stage info
     */
    dnxc_data_table_info_get_f info_per_stage_info_get;
    /**
     * get table info_per_stage_per_kbr entry 
     */
    dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_kbr_get_f info_per_stage_per_kbr_get;
    /**
     * get general info table about table (for example key size)info_per_stage_per_kbr info
     */
    dnxc_data_table_info_get_f info_per_stage_per_kbr_info_get;
    /**
     * get table info_per_stage_per_pd entry 
     */
    dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_pd_get_f info_per_stage_per_pd_get;
    /**
     * get general info table about table (for example key size)info_per_stage_per_pd info
     */
    dnxc_data_table_info_get_f info_per_stage_per_pd_info_get;
    /**
     * get table info_per_stage_per_sub_stage entry 
     */
    dnx_data_kleap_stage_info_kleap_stage_info_info_per_stage_per_sub_stage_get_f info_per_stage_per_sub_stage_get;
    /**
     * get general info table about table (for example key size)info_per_stage_per_sub_stage info
     */
    dnxc_data_table_info_get_f info_per_stage_per_sub_stage_info_get;
} dnx_data_if_kleap_stage_info_kleap_stage_info_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_KLEAP_STAGE_INFO:
 * {
 */
/**
 * \brief Interface for kleap_stage_info data
 */
typedef struct
{
    /**
     * Interface for kleap_stage_info kleap_stage_info data
     */
    dnx_data_if_kleap_stage_info_kleap_stage_info_t kleap_stage_info;
} dnx_data_if_kleap_stage_info_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_kleap_stage_info_t dnx_data_kleap_stage_info;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_KLEAP_STAGE_INFO_H_*/
/* *INDENT-ON* */
