/** \file dnx_data_property.h
 * 
 * MODULE DATA CUSTOME PROPRTY - 
 * Includes all custom functions signatures
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_PROPERTY_H_
/*{*/
#define _DNX_DATA_PROPERTY_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE: PORT:
 * {
 */
/*
 * submodule static_add
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', table - 'ucode_port'
 * static port configuration
 * 
 * \param [in] unit - Unit #
 * \param [in] port - logical port
 * \param [out] ucode_port - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_ucode_port_read(
    int unit,
    int port,
    dnx_data_port_static_add_ucode_port_t *ucode_port);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', table - 'ext_stat_speed'
 * per external kbp stat port speed
 * 
 * \param [in] unit - Unit #
 * \param [in] ext_stat_port - external device (kbp) statistics port number
 * \param [out] ext_stat_speed - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_ext_stat_speed_read(
    int unit,
    int ext_stat_port,
    dnx_data_port_static_add_ext_stat_speed_t *ext_stat_speed);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', table - 'serdes_tx_taps'
 * PHY TX tap configuration
 * 
 * \param [in] unit - Unit #
 * \param [in] port - logical port number
 * \param [out] serdes_tx_taps - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_serdes_tx_taps_read(
    int unit,
    int port,
    dnx_data_port_static_add_serdes_tx_taps_t *serdes_tx_taps);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', table - 'ext_stat_global_serdes_tx_taps'
 * PHY TX tap configuration
 * 
 * \param [in] unit - Unit #
 * \param [out] ext_stat_global_serdes_tx_taps - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_ext_stat_global_serdes_tx_taps_read(
    int unit,
    dnx_data_port_static_add_ext_stat_global_serdes_tx_taps_t *ext_stat_global_serdes_tx_taps);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', table - 'ext_stat_lane_serdes_tx_taps'
 * PHY TX tap configuration
 * 
 * \param [in] unit - Unit #
 * \param [in] lane - physical lane id
 * \param [out] ext_stat_lane_serdes_tx_taps - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_ext_stat_lane_serdes_tx_taps_read(
    int unit,
    int lane,
    dnx_data_port_static_add_ext_stat_lane_serdes_tx_taps_t *ext_stat_lane_serdes_tx_taps);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', table - 'fabric_quad_info'
 * General fabric quad info
 * 
 * \param [in] unit - Unit #
 * \param [in] quad - Quad ID
 * \param [out] quad_enable - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_fabric_quad_info_quad_enable_read(
    int unit,
    int quad,
    int *quad_enable);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', table - 'erp_exist'
 * Is ERP port defined in config file for the core
 * 
 * \param [in] unit - Unit #
 * \param [in] core - core
 * \param [out] erp_exist - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_erp_exist_read(
    int unit,
    int core,
    dnx_data_port_static_add_erp_exist_t *erp_exist);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', table - 'flr_config'
 * Fast link recovery configuration
 * 
 * \param [in] unit - Unit #
 * \param [in] port - logical port number
 * \param [out] flr_config - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_flr_config_read(
    int unit,
    int port,
    dnx_data_port_static_add_flr_config_t *flr_config);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', data - 'fabric_fw_load_method'
 * Method of the Fabric firmware load
 * 
 * \param [in] unit - Unit #
 * \param [out] fabric_fw_load_method - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_fabric_fw_load_method_read(
    int unit,
    uint32 *fabric_fw_load_method);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', data - 'fabric_fw_crc_check'
 * Enable fabric firmware CRC check.
 * 
 * \param [in] unit - Unit #
 * \param [out] fabric_fw_crc_check - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_fabric_fw_crc_check_read(
    int unit,
    uint32 *fabric_fw_crc_check);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', data - 'fabric_fw_load_verify'
 * Enable fabric firmware load verification.
 * 
 * \param [in] unit - Unit #
 * \param [out] fabric_fw_load_verify - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_fabric_fw_load_verify_read(
    int unit,
    uint32 *fabric_fw_load_verify);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', data - 'nif_fw_load_method'
 * Method of the Nif firmware load
 * 
 * \param [in] unit - Unit #
 * \param [out] nif_fw_load_method - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_nif_fw_load_method_read(
    int unit,
    uint32 *nif_fw_load_method);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', data - 'nif_fw_crc_check'
 * Enable NIF firmware CRC check.
 * 
 * \param [in] unit - Unit #
 * \param [out] nif_fw_crc_check - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_nif_fw_crc_check_read(
    int unit,
    uint32 *nif_fw_crc_check);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'static_add', data - 'nif_fw_load_verify'
 * Enable NIF firmware load verification.
 * 
 * \param [in] unit - Unit #
 * \param [out] nif_fw_load_verify - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_static_add_nif_fw_load_verify_read(
    int unit,
    uint32 *nif_fw_load_verify);

/*
 * submodule general
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'port', Submodule - 'general', data - 'fabric_port_base'
 * first fabric logical port
 * 
 * \param [in] unit - Unit #
 * \param [out] fabric_port_base - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_port_general_fabric_port_base_read(
    int unit,
    uint32 *fabric_port_base);

/*
 * submodule egress
 */
/*
 * submodule imb
 */
/*
 * }
 */

/*
 * MODULE: ACCESS:
 * {
 */
/*
 * submodule mdio
 */
/*
 * submodule rcpu
 */
/*
 * submodule blocks
 */
/*
 * }
 */

/*
 * MODULE: ADAPTER:
 * {
 */
/*
 * submodule tx
 */
/*
 * submodule rx
 */
/*
 * submodule general
 */
/*
 * submodule reg_mem_access
 */
/*
 * submodule mdb
 */
/*
 * }
 */

/*
 * MODULE: BFD:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: BIER:
 * {
 */
/*
 * submodule params
 */
/*
 * }
 */

/*
 * MODULE: CONSISTENT_HASHING:
 * {
 */
/*
 * submodule calendar
 */
/*
 * }
 */

/*
 * MODULE: COSQ_AQM:
 * {
 */
/*
 * submodule general
 */
/*
 * }
 */

/*
 * MODULE: INGR_CONGESTION:
 * {
 */
/*
 * submodule config
 */
/*
 * submodule info
 */
/*
 * submodule fadt_tail_drop
 */
/*
 * submodule dram_bound
 */
/*
 * submodule voq
 */
/*
 * submodule vsq
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'ingr_congestion', Submodule - 'vsq', data - 'vsq_f_default'
 * Default mapping of VSQ-F
 * 
 * \param [in] unit - Unit #
 * \param [out] vsq_f_default - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_ingr_congestion_vsq_vsq_f_default_read(
    int unit,
    uint32 *vsq_f_default);

/*
 * submodule init
 */
/*
 * submodule dbal
 */
/*
 * submodule mirror_on_drop
 */
/*
 * submodule sram_buffer
 */
/*
 * }
 */

/*
 * MODULE: CRPS:
 * {
 */
/*
 * submodule engine
 */
/*
 * submodule eviction
 */
/*
 * submodule expansion
 */
/*
 * submodule src_interface
 */
/*
 * submodule latency
 */
/*
 * }
 */

/*
 * MODULE: DBAL:
 * {
 */
/*
 * submodule diag
 */
/*
 * submodule db_init
 */
/*
 * submodule table
 */
/*
 * submodule hw_ent
 */
/*
 * }
 */

/*
 * MODULE: DEBUG:
 * {
 */
/*
 * submodule mem
 */
/*
 * submodule feature
 */
/*
 * submodule kleap
 */
/*
 * submodule general
 */
/*
 * submodule nif
 */
/*
 * }
 */

/*
 * MODULE: DEV_INIT:
 * {
 */
/*
 * submodule time
 */
/*
 * submodule mem
 */
/*
 * submodule properties
 */
/*
 * submodule general
 */
/*
 * submodule context
 */
/*
 * submodule ha
 */
/*
 * submodule shadow
 */
/*
 * submodule cmc
 */
/*
 * submodule rx
 */
/*
 * }
 */

/*
 * MODULE: DEVICE:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule regression
 */
/*
 * submodule emulation
 */
/*
 * }
 */

/*
 * MODULE: DRAM:
 * {
 */
/*
 * submodule hbm
 */
/*
 * submodule gddr6
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'gddr6', table - 'refresh_intervals'
 * refresh intervals timing parameters
 * 
 * \param [in] unit - Unit #
 * \param [out] trefiab - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_gddr6_refresh_intervals_trefiab_read(
    int unit,
    uint32 *trefiab);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'gddr6', table - 'refresh_intervals'
 * refresh intervals timing parameters
 * 
 * \param [in] unit - Unit #
 * \param [out] trefisb - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_gddr6_refresh_intervals_trefisb_read(
    int unit,
    uint32 *trefisb);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'gddr6', table - 'dq_map'
 * DQ swap mapping on boards
 * 
 * \param [in] unit - Unit #
 * \param [in] dram_index - dram index
 * \param [in] byte - bit on dram
 * \param [out] dq_map - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_gddr6_dq_map_read(
    int unit,
    int dram_index,
    int byte,
    dnx_data_dram_gddr6_dq_map_t *dq_map);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'gddr6', table - 'dq_channel_swap'
 * DQ channel swap mapping on boards
 * 
 * \param [in] unit - Unit #
 * \param [in] dram_index - dram index
 * \param [out] dq_channel_swap - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_gddr6_dq_channel_swap_read(
    int unit,
    int dram_index,
    dnx_data_dram_gddr6_dq_channel_swap_t *dq_channel_swap);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'gddr6', table - 'dq_byte_map'
 * DQ bytes swap mapping on boards
 * 
 * \param [in] unit - Unit #
 * \param [in] dram_index - dram index
 * \param [in] byte - byte on dram
 * \param [out] dq_byte_map - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_gddr6_dq_byte_map_read(
    int unit,
    int dram_index,
    int byte,
    dnx_data_dram_gddr6_dq_byte_map_t *dq_byte_map);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'gddr6', table - 'ca_map'
 * command address bit swap mapping on boards
 * 
 * \param [in] unit - Unit #
 * \param [in] dram_index - dram index
 * \param [in] channel - command address bit
 * \param [out] ca_map - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_gddr6_ca_map_read(
    int unit,
    int dram_index,
    int channel,
    dnx_data_dram_gddr6_ca_map_t *ca_map);

/*
 * submodule general_info
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'general_info', table - 'timing_params'
 * timing parameters
 * 
 * \param [in] unit - Unit #
 * \param [out] timing_params - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_general_info_timing_params_read(
    int unit,
    dnx_data_dram_general_info_timing_params_t *timing_params);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'general_info', data - 'write_latency'
 * write latency
 * 
 * \param [in] unit - Unit #
 * \param [out] write_latency - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_general_info_write_latency_read(
    int unit,
    uint32 *write_latency);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'general_info', data - 'read_latency'
 * read latency
 * 
 * \param [in] unit - Unit #
 * \param [out] read_latency - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_general_info_read_latency_read(
    int unit,
    uint32 *read_latency);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'general_info', data - 'crc_write_latency'
 * crc write latency
 * 
 * \param [in] unit - Unit #
 * \param [out] crc_write_latency - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_general_info_crc_write_latency_read(
    int unit,
    uint32 *crc_write_latency);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'general_info', data - 'crc_read_latency'
 * crc read latency
 * 
 * \param [in] unit - Unit #
 * \param [out] crc_read_latency - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_general_info_crc_read_latency_read(
    int unit,
    uint32 *crc_read_latency);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'dram', Submodule - 'general_info', data - 'dram_bitmap_internal'
 * bitmap of currently available drams
 * 
 * \param [in] unit - Unit #
 * \param [out] dram_bitmap_internal - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_dram_general_info_dram_bitmap_internal_read(
    int unit,
    uint32 *dram_bitmap_internal);

/*
 * submodule address_translation
 */
/*
 * submodule buffers
 */
/*
 * submodule dram_block
 */
/*
 * submodule dbal
 */
/*
 * submodule firmware
 */
/*
 * submodule apd_phy
 */
/*
 * submodule ctests
 */
/*
 * }
 */

/*
 * MODULE: ECGM:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule core_resources
 */
/*
 * submodule port_resources
 */
/*
 * submodule delete_fifo
 */
/*
 * submodule info
 */
/*
 * submodule pool_db_size
 */
/*
 * }
 */

/*
 * MODULE: EGR_QUEUING:
 * {
 */
/*
 * submodule params
 */
/*
 * submodule common_max_val
 */
/*
 * submodule rate_measurement
 */
/*
 * submodule phantom_queues
 */
/*
 * submodule reassembly
 */
/*
 * }
 */

/*
 * MODULE: EGR_QUEUING_V1:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule egress_interfaces
 */
/*
 * submodule egress_queues
 */
/*
 * submodule scheduling
 */
/*
 * submodule shaping
 */
/*
 * }
 */

/*
 * MODULE: ELK:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule application
 */
/*
 * submodule connectivity
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'elk', Submodule - 'connectivity', table - 'topology'
 * KBP to Jericho connection topology.
 * 
 * \param [in] unit - Unit #
 * \param [out] topology - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_elk_connectivity_topology_read(
    int unit,
    dnx_data_elk_connectivity_topology_t *topology);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'elk', Submodule - 'connectivity', table - 'kbp_serdes_tx_taps'
 * PHY TX tap configuration on KBP side per device
 * 
 * \param [in] unit - Unit #
 * \param [in] kbp_inst - max kbp device per unit
 * \param [out] kbp_serdes_tx_taps - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_elk_connectivity_kbp_serdes_tx_taps_read(
    int unit,
    int kbp_inst,
    dnx_data_elk_connectivity_kbp_serdes_tx_taps_t *kbp_serdes_tx_taps);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'elk', Submodule - 'connectivity', table - 'kbp_lane_serdes_tx_taps'
 * PHY TX tap configuration on KBP side per lane
 * 
 * \param [in] unit - Unit #
 * \param [in] lane_id - lane id on KBP side
 * \param [out] kbp_lane_serdes_tx_taps - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_elk_connectivity_kbp_lane_serdes_tx_taps_read(
    int unit,
    int lane_id,
    dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_t *kbp_lane_serdes_tx_taps);

/*
 * submodule recovery
 */
/*
 * }
 */

/*
 * MODULE: ESB:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule dbal
 */
/*
 * }
 */

/*
 * MODULE: ESEM:
 * {
 */
/*
 * submodule access_cmd
 */
/*
 * submodule default_result_profile
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: FABRIC:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule links
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fabric', Submodule - 'links', table - 'polarity'
 * Polarity of fabric link
 * 
 * \param [in] unit - Unit #
 * \param [in] link - fabric link id
 * \param [out] tx_polarity - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fabric_links_polarity_tx_polarity_read(
    int unit,
    int link,
    uint32 *tx_polarity);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fabric', Submodule - 'links', table - 'polarity'
 * Polarity of fabric link
 * 
 * \param [in] unit - Unit #
 * \param [in] link - fabric link id
 * \param [out] rx_polarity - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fabric_links_polarity_rx_polarity_read(
    int unit,
    int link,
    uint32 *rx_polarity);

/*
 * submodule blocks
 */
/*
 * submodule reachability
 */
/*
 * submodule mesh
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fabric', Submodule - 'mesh', data - 'multicast_enable'
 * Detemines whether the MESH system supports MC
 * 
 * \param [in] unit - Unit #
 * \param [out] multicast_enable - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fabric_mesh_multicast_enable_read(
    int unit,
    uint32 *multicast_enable);

/*
 * submodule cell
 */
/*
 * submodule pipes
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fabric', Submodule - 'pipes', table - 'map'
 * map traffic cast X priority to fabric pipe
 * 
 * \param [in] unit - Unit #
 * \param [out] map - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fabric_pipes_map_read(
    int unit,
    dnx_data_fabric_pipes_map_t *map);

/*
 * submodule debug
 */
/*
 * submodule mesh_topology
 */
/*
 * submodule tdm
 */
/*
 * submodule cgm
 */
/*
 * submodule dtqs
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fabric', Submodule - 'dtqs', data - 'nof_active_dtqs'
 * Number of active DTQs
 * 
 * \param [in] unit - Unit #
 * \param [out] nof_active_dtqs - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fabric_dtqs_nof_active_dtqs_read(
    int unit,
    uint32 *nof_active_dtqs);

/*
 * submodule ilkn
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fabric', Submodule - 'ilkn', table - 'bypass_info'
 * data about bypassed links
 * 
 * \param [in] unit - Unit #
 * \param [in] pm_id - Internal Port Macro identifier
 * \param [out] links - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fabric_ilkn_bypass_info_links_read(
    int unit,
    int pm_id,
    uint32 *links);

/*
 * submodule dbal
 */
/*
 * submodule mesh_mc
 */
/*
 * submodule transmit
 */
/*
 * submodule system_upgrade
 */
/*
 * submodule regression
 */
/*
 * }
 */

/*
 * MODULE: FAILOVER:
 * {
 */
/*
 * submodule path_select
 */
/*
 * submodule facility
 */
/*
 * }
 */

/*
 * MODULE: FC:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule calendar_common
 */
/*
 * submodule coe
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fc', Submodule - 'coe', table - 'mac_address'
 * MAC address of COE FC
 * 
 * \param [in] unit - Unit #
 * \param [out] mac_address - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fc_coe_mac_address_read(
    int unit,
    dnx_data_fc_coe_mac_address_t *mac_address);

/*
 * submodule oob
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fc', Submodule - 'oob', table - 'calender_length'
 * Flow Control Out-Of-Band calender length.
 * 
 * \param [in] unit - Unit #
 * \param [in] oob_id - Out-Of-Band ID
 * \param [out] calender_length - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fc_oob_calender_length_read(
    int unit,
    int oob_id,
    dnx_data_fc_oob_calender_length_t *calender_length);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fc', Submodule - 'oob', table - 'calender_rep_count'
 * Flow Control Out-Of-Band repeat count.
 * 
 * \param [in] unit - Unit #
 * \param [in] oob_id - Out-Of-Band ID
 * \param [out] calender_rep_count - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fc_oob_calender_rep_count_read(
    int unit,
    int oob_id,
    dnx_data_fc_oob_calender_rep_count_t *calender_rep_count);

/*
 * submodule inband
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'fc', Submodule - 'inband', table - 'calender_length'
 * Flow Control In-Band calender length.
 * 
 * \param [in] unit - Unit #
 * \param [in] ilkn_id - ILKN ID
 * \param [out] calender_length - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_fc_inband_calender_length_read(
    int unit,
    int ilkn_id,
    dnx_data_fc_inband_calender_length_t *calender_length);

/*
 * submodule pfc_deadlock
 */
/*
 * }
 */

/*
 * MODULE: FIELD:
 * {
 */
/*
 * submodule base_ipmf1
 */
/*
 * submodule base_ipmf2
 */
/*
 * submodule base_ipmf3
 */
/*
 * submodule base_epmf
 */
/*
 * submodule base_ifwd2
 */
/*
 * submodule stage
 */
/*
 * submodule external_tcam
 */
/*
 * submodule tcam
 */
/*
 * submodule group
 */
/*
 * submodule efes
 */
/*
 * submodule fem
 */
/*
 * submodule context
 */
/*
 * submodule preselector
 */
/*
 * submodule qual
 */
/*
 * submodule action
 */
/*
 * submodule virtual_wire
 */
/*
 * submodule profile_bits
 */
/*
 * submodule dir_ext
 */
/*
 * submodule state_table
 */
/*
 * submodule mdb_dt
 */
/*
 * submodule hash
 */
/*
 * submodule udh
 */
/*
 * submodule system_headers
 */
/*
 * submodule exem
 */
/*
 * submodule exem_learn_flush_machine
 */
/*
 * submodule ace
 */
/*
 * submodule entry
 */
/*
 * submodule L4_Ops
 */
/*
 * submodule encoded_qual_actions_offset
 */
/*
 * submodule compare
 */
/*
 * submodule diag
 */
/*
 * submodule general_data_qualifiers
 */
/*
 * submodule common_max_val
 */
/*
 * submodule init
 */
/*
 * submodule features
 */
/*
 * submodule signal_sizes
 */
/*
 * submodule dnx_data_internal
 */
/*
 * submodule tests
 */
/*
 * }
 */

/*
 * MODULE: FIELD_MAP:
 * {
 */
/*
 * submodule action
 */
/*
 * submodule qual
 */
/*
 * }
 */

/*
 * MODULE: FIFODMA:
 * {
 */
/*
 * submodule general
 */
/*
 * }
 */

/*
 * MODULE: FLOW:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule ipv4
 */
/*
 * submodule srv6
 */
/*
 * submodule in_lif
 */
/*
 * submodule mpls
 */
/*
 * submodule mpls_port
 */
/*
 * submodule arp
 */
/*
 * submodule vlan_port
 */
/*
 * submodule algo_gpm
 */
/*
 * submodule wide_data
 */
/*
 * submodule stat_pp
 */
/*
 * submodule rch
 */
/*
 * submodule trap
 */
/*
 * submodule reflector
 */
/*
 * }
 */

/*
 * MODULE: GLOBAL_VOQ:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule dbal
 */
/*
 * }
 */

/*
 * MODULE: GRAPHICAL:
 * {
 */
/*
 * submodule diag
 */
/*
 * }
 */

/*
 * MODULE: GTIMER:
 * {
 */
/*
 * submodule rtp
 */
/*
 * submodule fdt
 */
/*
 * submodule fdtl
 */
/*
 * submodule pem
 */
/*
 * submodule dhc
 */
/*
 * submodule cdu
 */
/*
 * submodule esb
 */
/*
 * submodule cdum
 */
/*
 * submodule mesh_topology
 */
/*
 * submodule bdm
 */
/*
 * submodule hbc
 */
/*
 * submodule ecgm
 */
/*
 * submodule cfc
 */
/*
 * submodule cgm
 */
/*
 * submodule crps
 */
/*
 * submodule ddha
 */
/*
 * submodule ddp
 */
/*
 * submodule dqm
 */
/*
 * submodule edb
 */
/*
 * submodule epni
 */
/*
 * submodule epre
 */
/*
 * submodule eps
 */
/*
 * submodule erpp
 */
/*
 * submodule etppa
 */
/*
 * submodule etppb
 */
/*
 * submodule etppc
 */
/*
 * submodule fqp
 */
/*
 * submodule ile
 */
/*
 * submodule ippa
 */
/*
 * submodule ippb
 */
/*
 * submodule ippc
 */
/*
 * submodule ippd
 */
/*
 * submodule ippe
 */
/*
 * submodule ippf
 */
/*
 * submodule ips
 */
/*
 * submodule ipt
 */
/*
 * submodule iqm
 */
/*
 * submodule ire
 */
/*
 * submodule itpp
 */
/*
 * submodule itppd
 */
/*
 * submodule kaps
 */
/*
 * submodule mcp
 */
/*
 * submodule mrps
 */
/*
 * submodule nmg
 */
/*
 * submodule ocb
 */
/*
 * submodule pdm
 */
/*
 * submodule pqp
 */
/*
 * submodule rqp
 */
/*
 * submodule sch
 */
/*
 * submodule sif
 */
/*
 * submodule spb
 */
/*
 * submodule sqm
 */
/*
 * submodule tcam
 */
/*
 * submodule tdu
 */
/*
 * submodule dcc
 */
/*
 * submodule cdb
 */
/*
 * submodule cdbm
 */
/*
 * submodule cdpm
 */
/*
 * submodule ocbm
 */
/*
 * submodule mss
 */
/*
 * submodule msd
 */
/*
 * }
 */

/*
 * MODULE: HEADERS:
 * {
 */
/*
 * submodule ftmh
 */
/*
 * submodule tsh
 */
/*
 * submodule otsh
 */
/*
 * submodule optimized_ftmh
 */
/*
 * submodule internal
 */
/*
 * submodule internal_legacy
 */
/*
 * submodule fhei_sz1_trap_sniff
 */
/*
 * submodule fhei_trap_sniff_legacy
 */
/*
 * submodule udh
 */
/*
 * submodule ftmh_legacy
 */
/*
 * submodule otsh_legacy
 */
/*
 * submodule system_headers
 */
/*
 * submodule otmh
 */
/*
 * submodule pph
 */
/*
 * submodule general
 */
/*
 * submodule layer_records
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: INGRESS_CS:
 * {
 */
/*
 * submodule properties
 */
/*
 * submodule features
 */
/*
 * submodule parser
 */
/*
 * }
 */

/*
 * MODULE: INSTRU:
 * {
 */
/*
 * submodule ipt
 */
/*
 * submodule sflow
 */
/*
 * submodule ifa
 */
/*
 * submodule eventor
 */
/*
 * submodule synced_triggers
 */
/*
 * submodule synced_counters
 */
/*
 * }
 */

/*
 * MODULE: INTR:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule ser
 */
/*
 * }
 */

/*
 * MODULE: IPQ:
 * {
 */
/*
 * submodule queues
 */
/*
 * submodule regions
 */
/*
 * submodule tc_map
 */
/*
 * }
 */

/*
 * MODULE: IQS:
 * {
 */
/*
 * submodule credit
 */
/*
 * submodule deq_default
 */
/*
 * submodule dqcq
 */
/*
 * submodule dbal
 */
/*
 * submodule flush
 */
/*
 * }
 */

/*
 * MODULE: KAPS:
 * {
 */
/*
 * submodule flist
 */
/*
 * }
 */

/*
 * MODULE: KLEAP_STAGE_INFO:
 * {
 */
/*
 * submodule kleap_stage_info
 */
/*
 * }
 */

/*
 * MODULE: L2:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule feature
 */
/*
 * submodule vsi
 */
/*
 * submodule vlan_domain
 */
/*
 * submodule dma
 */
/*
 * submodule age_and_flush_machine
 */
/*
 * submodule olp
 */
/*
 * }
 */

/*
 * MODULE: L3:
 * {
 */
/*
 * submodule egr_pointed
 */
/*
 * submodule fec
 */
/*
 * submodule fer
 */
/*
 * submodule source_address
 */
/*
 * submodule vrf
 */
/*
 * submodule routing_enablers
 */
/*
 * submodule rif
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'l3', Submodule - 'rif', data - 'nof_rifs'
 * Number of rifs available in the system.
 * 
 * \param [in] unit - Unit #
 * \param [out] nof_rifs - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_l3_rif_nof_rifs_read(
    int unit,
    uint32 *nof_rifs);

/*
 * submodule fwd
 */
/*
 * submodule ecmp
 */
/*
 * submodule vip_ecmp
 */
/*
 * submodule wcmp
 */
/*
 * submodule source_address_ethernet
 */
/*
 * submodule vrrp
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: LANE_MAP:
 * {
 */
/*
 * submodule nif
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'lane_map', Submodule - 'nif', table - 'mapping'
 * lane to serdes mapping info for NIF ports
 * 
 * \param [in] unit - Unit #
 * \param [in] lane_id - logical lane id
 * \param [out] mapping - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_lane_map_nif_mapping_read(
    int unit,
    int lane_id,
    dnx_data_lane_map_nif_mapping_t *mapping);

/*
 * submodule fabric
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'lane_map', Submodule - 'fabric', table - 'mapping'
 * lane to serdes mapping info for Fabric links
 * 
 * \param [in] unit - Unit #
 * \param [in] lane_id - logical lane id
 * \param [out] mapping - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_lane_map_fabric_mapping_read(
    int unit,
    int lane_id,
    dnx_data_lane_map_fabric_mapping_t *mapping);

/*
 * submodule ilkn
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'lane_map', Submodule - 'ilkn', table - 'remapping'
 * Ilkn remapping info
 * 
 * \param [in] unit - Unit #
 * \param [in] lane_id - logical lane id
 * \param [in] ilkn_id - ILKN port ID
 * \param [out] remapping - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_lane_map_ilkn_remapping_read(
    int unit,
    int lane_id,
    int ilkn_id,
    dnx_data_lane_map_ilkn_remapping_t *remapping);

/*
 * }
 */

/*
 * MODULE: LATENCY:
 * {
 */
/*
 * submodule features
 */
/*
 * submodule profile
 */
/*
 * submodule based_admission
 */
/*
 * submodule ingress
 */
/*
 * }
 */

/*
 * MODULE: LIF:
 * {
 */
/*
 * submodule global_lif
 */
/*
 * submodule in_lif
 */
/*
 * submodule out_lif
 */
/*
 * submodule lif_table_manager
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: LINKSCAN:
 * {
 */
/*
 * submodule general
 */
/*
 * }
 */

/*
 * MODULE: MACSEC:
 * {
 */
/*
 * submodule general
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'macsec', Submodule - 'general', data - 'is_macsec_enabled'
 * 
 * \param [in] unit - Unit #
 * \param [out] is_macsec_enabled - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_macsec_general_is_macsec_enabled_read(
    int unit,
    uint32 *is_macsec_enabled);

/*
 * submodule ingress
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'macsec', Submodule - 'ingress', data - 'sa_per_sc_nof'
 * 
 * \param [in] unit - Unit #
 * \param [out] sa_per_sc_nof - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_macsec_ingress_sa_per_sc_nof_read(
    int unit,
    uint32 *sa_per_sc_nof);

/*
 * submodule egress
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'macsec', Submodule - 'egress', data - 'sa_per_sc_nof'
 * 
 * \param [in] unit - Unit #
 * \param [out] sa_per_sc_nof - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_macsec_egress_sa_per_sc_nof_read(
    int unit,
    uint32 *sa_per_sc_nof);

/*
 * submodule wrapper
 */
/*
 * }
 */

/*
 * MODULE: MDB:
 * {
 */
/*
 * submodule global
 */
/*
 * submodule dh
 */
/*
 * submodule pdbs
 */
/*
 * submodule em
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'mdb', Submodule - 'em', data - 'flush_max_supported_payload'
 * 
 * \param [in] unit - Unit #
 * \param [out] flush_max_supported_payload - data already set to default and should be modifeid according to property
 * 
 * \return
 *     err - see shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_mdb_em_flush_max_supported_payload_read(
    int unit,
    uint32 *flush_max_supported_payload);

/*
 * submodule direct
 */
/*
 * submodule eedb
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'mdb', Submodule - 'eedb', table - 'outlif_physical_phase_granularity'
 * 
 * \param [in] unit - Unit #
 * \param [in] outlif_physical_phase - 
 * \param [out] data_granularity - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_mdb_eedb_outlif_physical_phase_granularity_data_granularity_read(
    int unit,
    int outlif_physical_phase,
    uint32 *data_granularity);

/*
 * submodule kaps
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: METER:
 * {
 */
/*
 * submodule profile
 */
/*
 * submodule diag
 */
/*
 * submodule meter_db
 */
/*
 * submodule mem_mgmt
 */
/*
 * submodule compensation
 */
/*
 * submodule expansion
 */
/*
 * }
 */

/*
 * MODULE: MIB:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule controlled_counters
 */
/*
 * }
 */

/*
 * MODULE: MODULE_TESTING:
 * {
 */
/*
 * submodule unsupported
 */
/*
 * submodule standard_submodule
 */
/*
 * submodule types
 */
/*
 * submodule property_methods
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'module_testing', Submodule - 'property_methods', table - 'custom'
 * test prop custom method types
 * 
 * \param [in] unit - Unit #
 * \param [in] link - link id
 * \param [in] pipe - pipe id
 * \param [out] custom - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_module_testing_property_methods_custom_read(
    int unit,
    int link,
    int pipe,
    dnx_data_module_testing_property_methods_custom_t *custom);

/*
 * submodule data_pointers
 */
/*
 * submodule dbal
 */
/*
 * submodule example_tests
 */
#ifdef BCM_DNX2_SUPPORT
/*{*/
/*
 * submodule submodule_family_dnx2
 */
/*}*/
#endif /*BCM_DNX2_SUPPORT*/
/*
 * submodule compileflags_submodule_standard
 */
#ifdef INCLUDE_XFLOW_MACSEC
/*{*/
/*
 * submodule compileflags_submodule_flags
 */
/*}*/
#endif /*INCLUDE_XFLOW_MACSEC*/
/*
 * }
 */

/*
 * MODULE: MPLS:
 * {
 */
/*
 * submodule general
 */
/*
 * }
 */

/*
 * MODULE: MULTICAST:
 * {
 */
/*
 * submodule params
 */
/*
 * submodule mcdb_hash_table
 */
/*
 * }
 */

/*
 * MODULE: NIF:
 * {
 */
/*
 * submodule global
 */
/*
 * submodule phys
 */
/*
 * submodule ilkn
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'nif', Submodule - 'ilkn', table - 'phys'
 * phys bitmap for ports added by soc property
 * 
 * \param [in] unit - Unit #
 * \param [in] ilkn_id - ilkn if id
 * \param [out] phys - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_nif_ilkn_phys_read(
    int unit,
    int ilkn_id,
    dnx_data_nif_ilkn_phys_t *phys);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'nif', Submodule - 'ilkn', table - 'properties'
 * ILKN properties per ILKN id - added using soc property.
 * 
 * \param [in] unit - Unit #
 * \param [in] ilkn_id - ilkn if id
 * \param [out] is_over_fabric - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_nif_ilkn_properties_is_over_fabric_read(
    int unit,
    int ilkn_id,
    uint32 *is_over_fabric);

/*
 * submodule eth
 */
/*
 * submodule simulator
 */
/*
 * submodule flexe
 */
/*
 * submodule prd
 */
/*
 * submodule portmod
 */
/*
 * submodule scheduler
 */
/*
 * submodule dbal
 */
/*
 * submodule features
 */
/*
 * submodule arb
 */
/*
 * submodule ofr
 */
/*
 * submodule oft
 */
/*
 * }
 */

/*
 * MODULE: OAM:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule oamp
 */
/*
 * submodule property
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: PLL:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule pll1
 */
/*
 * submodule pll3
 */
/*
 * submodule pll4
 */
/*
 * submodule synce_pll
 */
/*
 * }
 */

/*
 * MODULE: INGR_REASSEMBLY:
 * {
 */
/*
 * submodule context
 */
/*
 * submodule ilkn
 */
/*
 * submodule priority
 */
/*
 * submodule dbal
 */
/*
 * }
 */

/*
 * MODULE: PORT_PP:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule filters
 */
/*
 * }
 */

/*
 * MODULE: PP:
 * {
 */
/*
 * submodule stages
 */
/*
 * submodule PEM
 */
/*
 * submodule application
 */
/*
 * submodule ETPP
 */
/*
 * submodule debug
 */
/*
 * }
 */

/*
 * MODULE: PPMC:
 * {
 */
/*
 * submodule param
 */
/*
 * }
 */

/*
 * MODULE: PTP:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule ptp_firmware
 */
/*
 * }
 */

/*
 * MODULE: PVT:
 * {
 */
/*
 * submodule general
 */
/*
 * }
 */

/*
 * MODULE: QOS:
 * {
 */
/*
 * submodule qos
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: REGRESSION:
 * {
 */
/*
 * submodule dvapi_topology
 */
/*
 * submodule ser_parameters
 */
/*
 * submodule access
 */
/*
 * }
 */

/*
 * MODULE: SAT:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule generator
 */
/*
 * submodule collector
 */
/*
 * submodule rx_flow_param
 */
/*
 * submodule tx_flow_param
 */
/*
 * }
 */

/*
 * MODULE: SBUSDMA_DESC:
 * {
 */
/*
 * submodule global
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'sbusdma_desc', Submodule - 'global', table - 'enable_module_desc_dma'
 * Enable descriptor DMA per module
 * 
 * \param [in] unit - Unit #
 * \param [in] module_enum_val - The module name.
 * \param [out] enable - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_sbusdma_desc_global_enable_module_desc_dma_enable_read(
    int unit,
    int module_enum_val,
    uint32 *enable);

/*
 * }
 */

/*
 * MODULE: SCH:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule ps
 */
/*
 * submodule flow
 */
/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'sch', Submodule - 'flow', table - 'region_type'
 * flow region type
 * 
 * \param [in] unit - Unit #
 * \param [in] core - see table doc
 * \param [in] region - see table doc
 * \param [out] region_type - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_sch_flow_region_type_read(
    int unit,
    int core,
    int region,
    dnx_data_sch_flow_region_type_t *region_type);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'sch', Submodule - 'flow', table - 'nof_remote_cores'
 * flow region type
 * 
 * \param [in] unit - Unit #
 * \param [in] core - see table doc
 * \param [in] region - see table doc
 * \param [out] nof_remote_cores - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_sch_flow_nof_remote_cores_read(
    int unit,
    int core,
    int region,
    dnx_data_sch_flow_nof_remote_cores_t *nof_remote_cores);

/**
 * \brief Function which read the SoC property and modify the data to the required value
 * Module - 'sch', Submodule - 'flow', table - 'quartet_type'
 * quartet type per group
 * 
 * \param [in] unit - Unit #
 * \param [in] core - see table doc
 * \param [in] group - see table doc
 * \param [out] quartet_type - data type already set to default and should be modified according to property
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_property_sch_flow_quartet_type_read(
    int unit,
    int core,
    int group,
    dnx_data_sch_flow_quartet_type_t *quartet_type);

/*
 * submodule se
 */
/*
 * submodule interface
 */
/*
 * submodule device
 */
/*
 * submodule sch_alloc
 */
/*
 * submodule dbal
 */
/*
 * submodule features
 */
/*
 * submodule fc
 */
/*
 * }
 */

/*
 * MODULE: SNIF:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule ingress
 */
/*
 * submodule egress
 */
/*
 * }
 */

/*
 * MODULE: SPB:
 * {
 */
/*
 * submodule ocb
 */
/*
 * }
 */

/*
 * MODULE: SRV6:
 * {
 */
/*
 * submodule general
 */
/*
 * submodule termination
 */
/*
 * submodule encapsulation
 */
/*
 * submodule endpoint
 */
/*
 * }
 */

/*
 * MODULE: STACK:
 * {
 */
/*
 * submodule general
 */
/*
 * }
 */

/*
 * MODULE: STAT:
 * {
 */
/*
 * submodule stat_pp
 */
/*
 * submodule diag_counter
 */
/*
 * submodule drop_reasons
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: STG:
 * {
 */
/*
 * submodule stg
 */
/*
 * }
 */

/*
 * MODULE: STIF:
 * {
 */
/*
 * submodule config
 */
/*
 * submodule port
 */
/*
 * submodule report
 */
/*
 * submodule flow_control
 */
/*
 * submodule regression
 */
/*
 * }
 */

/*
 * MODULE: SWITCH:
 * {
 */
/*
 * submodule load_balancing
 */
/*
 * submodule load_balancing_sim
 */
/*
 * submodule svtag
 */
/*
 * submodule feature
 */
/*
 * }
 */

/*
 * MODULE: SYNCE:
 * {
 */
/*
 * submodule general
 */
/*
 * }
 */

/*
 * MODULE: SYSTEM_RED:
 * {
 */
/*
 * submodule config
 */
/*
 * submodule info
 */
/*
 * }
 */

/*
 * MODULE: TDM:
 * {
 */
/*
 * submodule params
 */
/*
 * }
 */

/*
 * MODULE: TECHSUPPORT:
 * {
 */
/*
 * submodule tm
 */
/*
 * }
 */

/*
 * MODULE: TIME:
 * {
 */
/*
 * submodule timesync
 */
/*
 * }
 */

/*
 * MODULE: TRAP:
 * {
 */
/*
 * submodule ingress
 */
/*
 * submodule erpp
 */
/*
 * submodule etpp
 */
/*
 * submodule egress
 */
/*
 * submodule strength
 */
/*
 * submodule register_name_changes
 */
/*
 * }
 */

/*
 * MODULE: TRUNK:
 * {
 */
/*
 * submodule parameters
 */
/*
 * submodule psc
 */
/*
 * submodule egress_trunk
 */
/*
 * submodule graceful
 */
/*
 * submodule flow_agg
 */
/*
 * }
 */

/*
 * MODULE: TUNE:
 * {
 */
/*
 * submodule ecgm
 */
/*
 * submodule iqs
 */
/*
 * submodule fabric
 */
/*
 * }
 */

/*
 * MODULE: TUNNEL:
 * {
 */
/*
 * submodule udp
 */
/*
 * submodule tunnel_type
 */
/*
 * submodule tcam_table
 */
/*
 * }
 */

/*
 * MODULE: UTILEX:
 * {
 */
/*
 * submodule common
 */
/*
 * }
 */

/*
 * MODULE: VLAN:
 * {
 */
/*
 * submodule vlan_translate
 */
/*
 * submodule llvp
 */
/*
 * }
 */

#ifdef BCM_DNX2_SUPPORT
/*{*/
/*
 * MODULE: DNX2_AOD:
 * {
 */
/*
 * submodule tables
 */
/*
 * }
 */

/*}*/
#endif /*BCM_DNX2_SUPPORT*/
#ifdef BCM_DNX2_SUPPORT
/*{*/
/*
 * MODULE: DNX2_AOD_SIZES:
 * {
 */
/*
 * submodule AOD
 */
/*
 * submodule dynamic_AOD
 */
/*
 * }
 */

/*}*/
#endif /*BCM_DNX2_SUPPORT*/
#ifdef BCM_DNX2_SUPPORT
/*{*/
/*
 * MODULE: DNX2_ARR:
 * {
 */
/*
 * submodule prefix
 */
/*
 * submodule max_nof_entries
 */
/*
 * submodule formats
 */
/*
 * }
 */

/*}*/
#endif /*BCM_DNX2_SUPPORT*/
#ifdef BCM_DNX2_SUPPORT
/*{*/
/*
 * MODULE: DNX2_MDB_APP_DB:
 * {
 */
/*
 * submodule fields
 */
/*
 * }
 */

/*}*/
#endif /*BCM_DNX2_SUPPORT*/
#ifdef BCM_DNX2_SUPPORT
/*{*/
/*
 * MODULE: DNX2_PEMLA_SOC:
 * {
 */
/*
 * submodule soc
 */
/*
 * }
 */

/*}*/
#endif /*BCM_DNX2_SUPPORT*/
/*}*/
#endif /*_DNX_DATA_PROPERTY_H_*/
/* *INDENT-ON* */
