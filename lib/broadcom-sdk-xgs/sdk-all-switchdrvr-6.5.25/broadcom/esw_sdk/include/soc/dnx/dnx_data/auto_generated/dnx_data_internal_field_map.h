/** \file dnx_data_internal_field_map.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_FIELD_MAP_H_
/*{*/
#define _DNX_DATA_INTERNAL_FIELD_MAP_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_field_map.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_field_map_submodule_action,
    dnx_data_field_map_submodule_qual,

    /**
     * Must be last one!
     */
    _dnx_data_field_map_submodule_nof
} dnx_data_field_map_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE ACTION:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_field_map_action_feature_get(
    int unit,
    dnx_data_field_map_action_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_field_map_action_define_nof
} dnx_data_field_map_action_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_field_map_action_table_params,

    /**
     * Must be last one!
     */
    _dnx_data_field_map_action_table_nof
} dnx_data_field_map_action_table_e;

/* Get Data */
/**
 * \brief get table params entry 
 * Per stage Per action properties
 * 
 * \param [in] unit - unit #
 * \param [in] stage - stage enum
 * \param [in] action - dnx action
 * 
 * \return
 *     params - returns the relevant entry values grouped in struct - see dnx_data_field_map_action_params_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_field_map_action_params_t * dnx_data_field_map_action_params_get(
    int unit,
    int stage,
    int action);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'field_map', Submodule - 'action', table - 'params'
 * Per stage Per action properties
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_field_map_action_params_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)params info
 * Per stage Per action properties
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     params - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_field_map_action_params_info_get(
    int unit);

/*
 * SUBMODULE QUAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_field_map_qual_feature_get(
    int unit,
    dnx_data_field_map_qual_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_field_map_qual_define_nof
} dnx_data_field_map_qual_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_field_map_qual_table_params,
    dnx_data_field_map_qual_table_special_metadata_qual,
    dnx_data_field_map_qual_table_layer_record_info_ingress,
    dnx_data_field_map_qual_table_layer_record_info_egress,

    /**
     * Must be last one!
     */
    _dnx_data_field_map_qual_table_nof
} dnx_data_field_map_qual_table_e;

/* Get Data */
/**
 * \brief get table params entry 
 * Per stage Per qualifier properties
 * 
 * \param [in] unit - unit #
 * \param [in] stage - stage enum
 * \param [in] qual - dnx qualifier
 * 
 * \return
 *     params - returns the relevant entry values grouped in struct - see dnx_data_field_map_qual_params_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_field_map_qual_params_t * dnx_data_field_map_qual_params_get(
    int unit,
    int stage,
    int qual);

/**
 * \brief get table special_metadata_qual entry 
 * Per stage Per qualifier special metadata qualifiers
 * 
 * \param [in] unit - unit #
 * \param [in] stage - stage enum
 * \param [in] qual - dnx qualifier
 * 
 * \return
 *     special_metadata_qual - returns the relevant entry values grouped in struct - see dnx_data_field_map_qual_special_metadata_qual_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_field_map_qual_special_metadata_qual_t * dnx_data_field_map_qual_special_metadata_qual_get(
    int unit,
    int stage,
    int qual);

/**
 * \brief get table layer_record_info_ingress entry 
 * Information about layer record qualifiers in the ingress
 * 
 * \param [in] unit - unit #
 * \param [in] layer_record - layer record enum
 * 
 * \return
 *     layer_record_info_ingress - returns the relevant entry values grouped in struct - see dnx_data_field_map_qual_layer_record_info_ingress_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_field_map_qual_layer_record_info_ingress_t * dnx_data_field_map_qual_layer_record_info_ingress_get(
    int unit,
    int layer_record);

/**
 * \brief get table layer_record_info_egress entry 
 * Information about layer record qualifiers in the egress
 * 
 * \param [in] unit - unit #
 * \param [in] layer_record - layer record enum
 * 
 * \return
 *     layer_record_info_egress - returns the relevant entry values grouped in struct - see dnx_data_field_map_qual_layer_record_info_egress_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_field_map_qual_layer_record_info_egress_t * dnx_data_field_map_qual_layer_record_info_egress_get(
    int unit,
    int layer_record);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'field_map', Submodule - 'qual', table - 'params'
 * Per stage Per qualifier properties
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_field_map_qual_params_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'field_map', Submodule - 'qual', table - 'special_metadata_qual'
 * Per stage Per qualifier special metadata qualifiers
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_field_map_qual_special_metadata_qual_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'field_map', Submodule - 'qual', table - 'layer_record_info_ingress'
 * Information about layer record qualifiers in the ingress
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_field_map_qual_layer_record_info_ingress_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'field_map', Submodule - 'qual', table - 'layer_record_info_egress'
 * Information about layer record qualifiers in the egress
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_field_map_qual_layer_record_info_egress_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)params info
 * Per stage Per qualifier properties
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     params - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_field_map_qual_params_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)special_metadata_qual info
 * Per stage Per qualifier special metadata qualifiers
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     special_metadata_qual - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_field_map_qual_special_metadata_qual_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)layer_record_info_ingress info
 * Information about layer record qualifiers in the ingress
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     layer_record_info_ingress - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_field_map_qual_layer_record_info_ingress_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)layer_record_info_egress info
 * Information about layer record qualifiers in the egress
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     layer_record_info_egress - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_field_map_qual_layer_record_info_egress_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_field_map_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_FIELD_MAP_H_*/
/* *INDENT-ON* */
