/** \file dnx_data_intr.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTR_H_
/*{*/
#define _DNX_DATA_INTR_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnxc/intr.h>
#include <soc/dnx/intr/dnx_intr.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_intr.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_intr
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_intr_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * General interrupt information.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule general table active_on_init
 * Table info:
 * interrupt active on init
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
} dnx_data_intr_general_active_on_init_t;

/**
 * \brief Holds values of submodule general table disable_on_init
 * Table info:
 * interrupt disabled on init
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
} dnx_data_intr_general_disable_on_init_t;

/**
 * \brief Holds values of submodule general table disable_print_on_init
 * Table info:
 * interrupt disable print on init
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
} dnx_data_intr_general_disable_print_on_init_t;

/**
 * \brief Holds values of submodule general table block_intr_field_mapping
 * Table info:
 * block to intr field mapping
 */
typedef struct
{
    /**
     * intr field
     */
    uint32 intr;
} dnx_data_intr_general_block_intr_field_mapping_t;

/**
 * \brief Holds values of submodule general table skip_clear_on_init
 * Table info:
 * interrupts skipped clear on init sequence
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
} dnx_data_intr_general_skip_clear_on_init_t;

/**
 * \brief Holds values of submodule general table force_unmask_on_init
 * Table info:
 * interrupts unmasked on init sequence
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
} dnx_data_intr_general_force_unmask_on_init_t;

/**
 * \brief Holds values of submodule general table skip_clear_on_regress
 * Table info:
 * interrupts skipped clear test on regress
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
} dnx_data_intr_general_skip_clear_on_regress_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_intr_general_feature_nof
} dnx_data_intr_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_intr_general_feature_get_f) (
    int unit,
    dnx_data_intr_general_feature_e feature);

/**
 * \brief returns numeric data of nof_interrupts
 * Module - 'intr', Submodule - 'general', data - 'nof_interrupts'
 * Number of interrupts in the device.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_interrupts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_nof_interrupts_get_f) (
    int unit);

/**
 * \brief returns numeric data of polled_irq_mode
 * Module - 'intr', Submodule - 'general', data - 'polled_irq_mode'
 * Are interrupts supported polling mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     polled_irq_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_polled_irq_mode_get_f) (
    int unit);

/**
 * \brief returns numeric data of polled_irq_priority
 * Module - 'intr', Submodule - 'general', data - 'polled_irq_priority'
 * The priority of IRQ polling thread.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     polled_irq_priority - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_intr_general_polled_irq_priority_get_f) (
    int unit);

/**
 * \brief returns numeric data of polled_irq_delay
 * Module - 'intr', Submodule - 'general', data - 'polled_irq_delay'
 * The minimum delay between IRQ polls.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     polled_irq_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_polled_irq_delay_get_f) (
    int unit);

/**
 * \brief returns numeric data of epni_ebd_interrupt_assert_enable
 * Module - 'intr', Submodule - 'general', data - 'epni_ebd_interrupt_assert_enable'
 * enable assert when epni ebd interrupt is rasied
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     epni_ebd_interrupt_assert_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_epni_ebd_interrupt_assert_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of table_dma_enable
 * Module - 'intr', Submodule - 'general', data - 'table_dma_enable'
 * Enable/disable table DMA operations.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_dma_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_table_dma_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of tdma_timeout_usec
 * Module - 'intr', Submodule - 'general', data - 'tdma_timeout_usec'
 * Table DMA operation timeout.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tdma_timeout_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_tdma_timeout_usec_get_f) (
    int unit);

/**
 * \brief returns numeric data of tdma_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'tdma_intr_enable'
 * Table DMA done is interrupt driven or by polling.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tdma_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_tdma_intr_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of tslam_dma_enable
 * Module - 'intr', Submodule - 'general', data - 'tslam_dma_enable'
 * Enable/disable tslam DMA operations.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tslam_dma_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_tslam_dma_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of tslam_timeout_usec
 * Module - 'intr', Submodule - 'general', data - 'tslam_timeout_usec'
 * Tslam DMA operation timeout.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tslam_timeout_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_tslam_timeout_usec_get_f) (
    int unit);

/**
 * \brief returns numeric data of tslam_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'tslam_intr_enable'
 * Tslam DMA done is interrupt driven or by polling.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tslam_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_tslam_intr_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of schan_timeout_usec
 * Module - 'intr', Submodule - 'general', data - 'schan_timeout_usec'
 * Schan operation timeout.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     schan_timeout_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_schan_timeout_usec_get_f) (
    int unit);

/**
 * \brief returns numeric data of schan_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'schan_intr_enable'
 * Schan operation done is interrupt driven or by polling.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     schan_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_schan_intr_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of miim_timeout_usec
 * Module - 'intr', Submodule - 'general', data - 'miim_timeout_usec'
 * MIM operation timeout.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     miim_timeout_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_miim_timeout_usec_get_f) (
    int unit);

/**
 * \brief returns numeric data of miim_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'miim_intr_enable'
 * MIM operation done is interrupt driver or by polling.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     miim_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_miim_intr_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of sbus_dma_interval
 * Module - 'intr', Submodule - 'general', data - 'sbus_dma_interval'
 * sbus DMA operation interval.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sbus_dma_interval - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_sbus_dma_interval_get_f) (
    int unit);

/**
 * \brief returns numeric data of sbus_dma_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'sbus_dma_intr_enable'
 * sbus DMA interrupt enable.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sbus_dma_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_sbus_dma_intr_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of mem_clear_chunk_size
 * Module - 'intr', Submodule - 'general', data - 'mem_clear_chunk_size'
 * sbus DMA chunk size.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mem_clear_chunk_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_mem_clear_chunk_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of ser_event_generate_support
 * Module - 'intr', Submodule - 'general', data - 'ser_event_generate_support'
 * If support ser interrupt event.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ser_event_generate_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_general_ser_event_generate_support_get_f) (
    int unit);

/**
 * \brief get table active_on_init entry 
 * interrupt active on init
 * 
 * \param [in] unit - unit #
 * \param [in] offset - active interrupt offset
 * 
 * \return
 *     active_on_init - returns the relevant entry values grouped in struct - see dnx_data_intr_general_active_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_general_active_on_init_t *(
    *dnx_data_intr_general_active_on_init_get_f) (
    int unit,
    int offset);

/**
 * \brief get table disable_on_init entry 
 * interrupt disabled on init
 * 
 * \param [in] unit - unit #
 * \param [in] offset - disable interrupt offset
 * 
 * \return
 *     disable_on_init - returns the relevant entry values grouped in struct - see dnx_data_intr_general_disable_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_general_disable_on_init_t *(
    *dnx_data_intr_general_disable_on_init_get_f) (
    int unit,
    int offset);

/**
 * \brief get table disable_print_on_init entry 
 * interrupt disable print on init
 * 
 * \param [in] unit - unit #
 * \param [in] offset - disable print on init offset
 * 
 * \return
 *     disable_print_on_init - returns the relevant entry values grouped in struct - see dnx_data_intr_general_disable_print_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_general_disable_print_on_init_t *(
    *dnx_data_intr_general_disable_print_on_init_get_f) (
    int unit,
    int offset);

/**
 * \brief get table block_intr_field_mapping entry 
 * block to intr field mapping
 * 
 * \param [in] unit - unit #
 * \param [in] offset - block to intr field mapping
 * 
 * \return
 *     block_intr_field_mapping - returns the relevant entry values grouped in struct - see dnx_data_intr_general_block_intr_field_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_general_block_intr_field_mapping_t *(
    *dnx_data_intr_general_block_intr_field_mapping_get_f) (
    int unit,
    int offset);

/**
 * \brief get table skip_clear_on_init entry 
 * interrupts skipped clear on init sequence
 * 
 * \param [in] unit - unit #
 * \param [in] offset - skip clear interrupt offset
 * 
 * \return
 *     skip_clear_on_init - returns the relevant entry values grouped in struct - see dnx_data_intr_general_skip_clear_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_general_skip_clear_on_init_t *(
    *dnx_data_intr_general_skip_clear_on_init_get_f) (
    int unit,
    int offset);

/**
 * \brief get table force_unmask_on_init entry 
 * interrupts unmasked on init sequence
 * 
 * \param [in] unit - unit #
 * \param [in] offset - unmasked interrupt offset
 * 
 * \return
 *     force_unmask_on_init - returns the relevant entry values grouped in struct - see dnx_data_intr_general_force_unmask_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_general_force_unmask_on_init_t *(
    *dnx_data_intr_general_force_unmask_on_init_get_f) (
    int unit,
    int offset);

/**
 * \brief get table skip_clear_on_regress entry 
 * interrupts skipped clear test on regress
 * 
 * \param [in] unit - unit #
 * \param [in] offset - unmasked interrupt offset
 * 
 * \return
 *     skip_clear_on_regress - returns the relevant entry values grouped in struct - see dnx_data_intr_general_skip_clear_on_regress_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_general_skip_clear_on_regress_t *(
    *dnx_data_intr_general_skip_clear_on_regress_get_f) (
    int unit,
    int offset);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INTR - GENERAL:
 * {
 */
/**
 * \brief Interface for intr general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_intr_general_feature_get_f feature_get;
    /**
     * returns numeric data of nof_interrupts
     */
    dnx_data_intr_general_nof_interrupts_get_f nof_interrupts_get;
    /**
     * returns numeric data of polled_irq_mode
     */
    dnx_data_intr_general_polled_irq_mode_get_f polled_irq_mode_get;
    /**
     * returns numeric data of polled_irq_priority
     */
    dnx_data_intr_general_polled_irq_priority_get_f polled_irq_priority_get;
    /**
     * returns numeric data of polled_irq_delay
     */
    dnx_data_intr_general_polled_irq_delay_get_f polled_irq_delay_get;
    /**
     * returns numeric data of epni_ebd_interrupt_assert_enable
     */
    dnx_data_intr_general_epni_ebd_interrupt_assert_enable_get_f epni_ebd_interrupt_assert_enable_get;
    /**
     * returns numeric data of table_dma_enable
     */
    dnx_data_intr_general_table_dma_enable_get_f table_dma_enable_get;
    /**
     * returns numeric data of tdma_timeout_usec
     */
    dnx_data_intr_general_tdma_timeout_usec_get_f tdma_timeout_usec_get;
    /**
     * returns numeric data of tdma_intr_enable
     */
    dnx_data_intr_general_tdma_intr_enable_get_f tdma_intr_enable_get;
    /**
     * returns numeric data of tslam_dma_enable
     */
    dnx_data_intr_general_tslam_dma_enable_get_f tslam_dma_enable_get;
    /**
     * returns numeric data of tslam_timeout_usec
     */
    dnx_data_intr_general_tslam_timeout_usec_get_f tslam_timeout_usec_get;
    /**
     * returns numeric data of tslam_intr_enable
     */
    dnx_data_intr_general_tslam_intr_enable_get_f tslam_intr_enable_get;
    /**
     * returns numeric data of schan_timeout_usec
     */
    dnx_data_intr_general_schan_timeout_usec_get_f schan_timeout_usec_get;
    /**
     * returns numeric data of schan_intr_enable
     */
    dnx_data_intr_general_schan_intr_enable_get_f schan_intr_enable_get;
    /**
     * returns numeric data of miim_timeout_usec
     */
    dnx_data_intr_general_miim_timeout_usec_get_f miim_timeout_usec_get;
    /**
     * returns numeric data of miim_intr_enable
     */
    dnx_data_intr_general_miim_intr_enable_get_f miim_intr_enable_get;
    /**
     * returns numeric data of sbus_dma_interval
     */
    dnx_data_intr_general_sbus_dma_interval_get_f sbus_dma_interval_get;
    /**
     * returns numeric data of sbus_dma_intr_enable
     */
    dnx_data_intr_general_sbus_dma_intr_enable_get_f sbus_dma_intr_enable_get;
    /**
     * returns numeric data of mem_clear_chunk_size
     */
    dnx_data_intr_general_mem_clear_chunk_size_get_f mem_clear_chunk_size_get;
    /**
     * returns numeric data of ser_event_generate_support
     */
    dnx_data_intr_general_ser_event_generate_support_get_f ser_event_generate_support_get;
    /**
     * get table active_on_init entry 
     */
    dnx_data_intr_general_active_on_init_get_f active_on_init_get;
    /**
     * get general info table about table (for example key size)active_on_init info
     */
    dnxc_data_table_info_get_f active_on_init_info_get;
    /**
     * get table disable_on_init entry 
     */
    dnx_data_intr_general_disable_on_init_get_f disable_on_init_get;
    /**
     * get general info table about table (for example key size)disable_on_init info
     */
    dnxc_data_table_info_get_f disable_on_init_info_get;
    /**
     * get table disable_print_on_init entry 
     */
    dnx_data_intr_general_disable_print_on_init_get_f disable_print_on_init_get;
    /**
     * get general info table about table (for example key size)disable_print_on_init info
     */
    dnxc_data_table_info_get_f disable_print_on_init_info_get;
    /**
     * get table block_intr_field_mapping entry 
     */
    dnx_data_intr_general_block_intr_field_mapping_get_f block_intr_field_mapping_get;
    /**
     * get general info table about table (for example key size)block_intr_field_mapping info
     */
    dnxc_data_table_info_get_f block_intr_field_mapping_info_get;
    /**
     * get table skip_clear_on_init entry 
     */
    dnx_data_intr_general_skip_clear_on_init_get_f skip_clear_on_init_get;
    /**
     * get general info table about table (for example key size)skip_clear_on_init info
     */
    dnxc_data_table_info_get_f skip_clear_on_init_info_get;
    /**
     * get table force_unmask_on_init entry 
     */
    dnx_data_intr_general_force_unmask_on_init_get_f force_unmask_on_init_get;
    /**
     * get general info table about table (for example key size)force_unmask_on_init info
     */
    dnxc_data_table_info_get_f force_unmask_on_init_info_get;
    /**
     * get table skip_clear_on_regress entry 
     */
    dnx_data_intr_general_skip_clear_on_regress_get_f skip_clear_on_regress_get;
    /**
     * get general info table about table (for example key size)skip_clear_on_regress info
     */
    dnxc_data_table_info_get_f skip_clear_on_regress_info_get;
} dnx_data_if_intr_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - SER:
 * SER handle information.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ser table mem_mask
 * Table info:
 * memory need masked
 */
typedef struct
{
    /**
     * register name for  memory mask
     */
    soc_reg_t reg;
    /**
     * If field defined - will set just the specified field
     */
    soc_field_t field;
    /**
     * Register field should be set value, 0 or 1
     */
    dnxc_mem_mask_mode_e mode;
} dnx_data_intr_ser_mem_mask_t;

/**
 * \brief Holds values of submodule ser table xor_mem
 * Table info:
 * XOR memory information
 */
typedef struct
{
    /**
     * xor memory name
     */
    soc_mem_t mem;
    /**
     * SRAM bank wide bits
     */
    int sram_banks_bits;
    /**
     * Entry number address wide for each bank
     */
    int entry_used_bits;
    /**
     * xor memory flags
     */
    int flags;
} dnx_data_intr_ser_xor_mem_t;

/**
 * \brief Holds values of submodule ser table intr_exception
 * Table info:
 * interrupt exceptional
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
    /**
     * callback to get if it is exceptional interrupt
     */
    dnx_intr_exceptional_get_f exception_get_cb;
} dnx_data_intr_ser_intr_exception_t;

/**
 * \brief Holds values of submodule ser table static_mem
 * Table info:
 * static memory
 */
typedef struct
{
    /**
     * memory
     */
    soc_mem_t mem;
} dnx_data_intr_ser_static_mem_t;

/**
 * \brief Holds values of submodule ser table dynamic_mem
 * Table info:
 * dynamic memory
 */
typedef struct
{
    /**
     * dynamic memory
     */
    soc_mem_t mem;
} dnx_data_intr_ser_dynamic_mem_t;

/**
 * \brief Holds values of submodule ser table mdb_mem_map
 * Table info:
 * mdb memory mapping
 */
typedef struct
{
    /**
     * acc_mem
     */
    soc_mem_t acc_mem;
    /**
     * phy_mem
     */
    soc_mem_t phy_mem;
} dnx_data_intr_ser_mdb_mem_map_t;

/**
 * \brief Holds values of submodule ser table kaps_tcam_scan
 * Table info:
 * kaps tcam scan parameter
 */
typedef struct
{
    /**
     * Kaps tcam scan window count size
     */
    uint32 scan_window;
    /**
     * If pause scan machine
     */
    uint32 scan_pause;
    /**
     * action performed on uncorrectable entries
     */
    uint32 uncorrectable_action;
    /**
     * action performed on correctable entries
     */
    uint32 correctable_action;
} dnx_data_intr_ser_kaps_tcam_scan_t;

/**
 * \brief Holds values of submodule ser table severity_mem
 * Table info:
 * severity memory
 */
typedef struct
{
    /**
     * memory name
     */
    soc_mem_t mem;
    /**
     * memory severity
     */
    int severity;
} dnx_data_intr_ser_severity_mem_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_intr_ser_feature_nof
} dnx_data_intr_ser_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_intr_ser_feature_get_f) (
    int unit,
    dnx_data_intr_ser_feature_e feature);

/**
 * \brief returns define data of tcam_protection_issue
 * Module - 'intr', Submodule - 'ser', data - 'tcam_protection_issue'
 * If there are tcam protect machine issue at device\n
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tcam_protection_issue - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_intr_ser_tcam_protection_issue_get_f) (
    int unit);

/**
 * \brief get table mem_mask entry 
 * memory need masked
 * 
 * \param [in] unit - unit #
 * \param [in] index - memory masked index
 * 
 * \return
 *     mem_mask - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_mem_mask_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_ser_mem_mask_t *(
    *dnx_data_intr_ser_mem_mask_get_f) (
    int unit,
    int index);

/**
 * \brief get table xor_mem entry 
 * XOR memory information
 * 
 * \param [in] unit - unit #
 * \param [in] index - XOR memory index
 * 
 * \return
 *     xor_mem - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_xor_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_ser_xor_mem_t *(
    *dnx_data_intr_ser_xor_mem_get_f) (
    int unit,
    int index);

/**
 * \brief get table intr_exception entry 
 * interrupt exceptional
 * 
 * \param [in] unit - unit #
 * \param [in] index - exceptional_intr index
 * 
 * \return
 *     intr_exception - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_intr_exception_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_ser_intr_exception_t *(
    *dnx_data_intr_ser_intr_exception_get_f) (
    int unit,
    int index);

/**
 * \brief get table static_mem entry 
 * static memory
 * 
 * \param [in] unit - unit #
 * \param [in] index - static memory index
 * 
 * \return
 *     static_mem - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_static_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_ser_static_mem_t *(
    *dnx_data_intr_ser_static_mem_get_f) (
    int unit,
    int index);

/**
 * \brief get table dynamic_mem entry 
 * dynamic memory
 * 
 * \param [in] unit - unit #
 * \param [in] index - dynamic memory index
 * 
 * \return
 *     dynamic_mem - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_dynamic_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_ser_dynamic_mem_t *(
    *dnx_data_intr_ser_dynamic_mem_get_f) (
    int unit,
    int index);

/**
 * \brief get table mdb_mem_map entry 
 * mdb memory mapping
 * 
 * \param [in] unit - unit #
 * \param [in] index - mdb memory index
 * 
 * \return
 *     mdb_mem_map - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_mdb_mem_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_ser_mdb_mem_map_t *(
    *dnx_data_intr_ser_mdb_mem_map_get_f) (
    int unit,
    int index);

/**
 * \brief get table kaps_tcam_scan entry 
 * kaps tcam scan parameter
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     kaps_tcam_scan - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_kaps_tcam_scan_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_ser_kaps_tcam_scan_t *(
    *dnx_data_intr_ser_kaps_tcam_scan_get_f) (
    int unit);

/**
 * \brief get table severity_mem entry 
 * severity memory
 * 
 * \param [in] unit - unit #
 * \param [in] index - severity memory index
 * 
 * \return
 *     severity_mem - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_severity_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_intr_ser_severity_mem_t *(
    *dnx_data_intr_ser_severity_mem_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_INTR - SER:
 * {
 */
/**
 * \brief Interface for intr ser data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_intr_ser_feature_get_f feature_get;
    /**
     * returns define data of tcam_protection_issue
     */
    dnx_data_intr_ser_tcam_protection_issue_get_f tcam_protection_issue_get;
    /**
     * get table mem_mask entry 
     */
    dnx_data_intr_ser_mem_mask_get_f mem_mask_get;
    /**
     * get general info table about table (for example key size)mem_mask info
     */
    dnxc_data_table_info_get_f mem_mask_info_get;
    /**
     * get table xor_mem entry 
     */
    dnx_data_intr_ser_xor_mem_get_f xor_mem_get;
    /**
     * get general info table about table (for example key size)xor_mem info
     */
    dnxc_data_table_info_get_f xor_mem_info_get;
    /**
     * get table intr_exception entry 
     */
    dnx_data_intr_ser_intr_exception_get_f intr_exception_get;
    /**
     * get general info table about table (for example key size)intr_exception info
     */
    dnxc_data_table_info_get_f intr_exception_info_get;
    /**
     * get table static_mem entry 
     */
    dnx_data_intr_ser_static_mem_get_f static_mem_get;
    /**
     * get general info table about table (for example key size)static_mem info
     */
    dnxc_data_table_info_get_f static_mem_info_get;
    /**
     * get table dynamic_mem entry 
     */
    dnx_data_intr_ser_dynamic_mem_get_f dynamic_mem_get;
    /**
     * get general info table about table (for example key size)dynamic_mem info
     */
    dnxc_data_table_info_get_f dynamic_mem_info_get;
    /**
     * get table mdb_mem_map entry 
     */
    dnx_data_intr_ser_mdb_mem_map_get_f mdb_mem_map_get;
    /**
     * get general info table about table (for example key size)mdb_mem_map info
     */
    dnxc_data_table_info_get_f mdb_mem_map_info_get;
    /**
     * get table kaps_tcam_scan entry 
     */
    dnx_data_intr_ser_kaps_tcam_scan_get_f kaps_tcam_scan_get;
    /**
     * get general info table about table (for example key size)kaps_tcam_scan info
     */
    dnxc_data_table_info_get_f kaps_tcam_scan_info_get;
    /**
     * get table severity_mem entry 
     */
    dnx_data_intr_ser_severity_mem_get_f severity_mem_get;
    /**
     * get general info table about table (for example key size)severity_mem info
     */
    dnxc_data_table_info_get_f severity_mem_info_get;
} dnx_data_if_intr_ser_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_INTR:
 * {
 */
/**
 * \brief Interface for intr data
 */
typedef struct
{
    /**
     * Interface for intr general data
     */
    dnx_data_if_intr_general_t general;
    /**
     * Interface for intr ser data
     */
    dnx_data_if_intr_ser_t ser;
} dnx_data_if_intr_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_intr_t dnx_data_intr;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTR_H_*/
/* *INDENT-ON* */
