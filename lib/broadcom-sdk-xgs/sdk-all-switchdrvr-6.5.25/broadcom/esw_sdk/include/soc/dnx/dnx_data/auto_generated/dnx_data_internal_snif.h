/** \file dnx_data_internal_snif.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_SNIF_H_
/*{*/
#define _DNX_DATA_INTERNAL_SNIF_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_snif.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_snif_submodule_general,
    dnx_data_snif_submodule_ingress,
    dnx_data_snif_submodule_egress,

    /**
     * Must be last one!
     */
    _dnx_data_snif_submodule_nof
} dnx_data_snif_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_snif_general_feature_get(
    int unit,
    dnx_data_snif_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_snif_general_define_cud_type_standard,
    dnx_data_snif_general_define_cud_type_sflow,
    dnx_data_snif_general_define_cud_type_mirror_on_drop,

    /**
     * Must be last one!
     */
    _dnx_data_snif_general_define_nof
} dnx_data_snif_general_define_e;

/* Get Data */
/**
 * \brief returns define data of cud_type_standard
 * Module - 'snif', Submodule - 'general', data - 'cud_type_standard'
 * Sniff CUD type standard
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cud_type_standard - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_general_cud_type_standard_get(
    int unit);

/**
 * \brief returns define data of cud_type_sflow
 * Module - 'snif', Submodule - 'general', data - 'cud_type_sflow'
 * Sniff CUD type sflow
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cud_type_sflow - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_general_cud_type_sflow_get(
    int unit);

/**
 * \brief returns define data of cud_type_mirror_on_drop
 * Module - 'snif', Submodule - 'general', data - 'cud_type_mirror_on_drop'
 * Sniff CUD type mirror on drop
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cud_type_mirror_on_drop - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_general_cud_type_mirror_on_drop_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_snif_general_table_nof
} dnx_data_snif_general_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE INGRESS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_snif_ingress_feature_get(
    int unit,
    dnx_data_snif_ingress_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_snif_ingress_define_nof_profiles,
    dnx_data_snif_ingress_define_mirror_nof_profiles,
    dnx_data_snif_ingress_define_nof_mirror_on_drop_profiles,
    dnx_data_snif_ingress_define_mirror_nof_vlan_profiles,
    dnx_data_snif_ingress_define_mirror_default_tagged_profile,
    dnx_data_snif_ingress_define_mirror_untagged_profiles,
    dnx_data_snif_ingress_define_prob_max_val,
    dnx_data_snif_ingress_define_crop_size,
    dnx_data_snif_ingress_define_keep_orig_dest_on_dsp_ext,

    /**
     * Must be last one!
     */
    _dnx_data_snif_ingress_define_nof
} dnx_data_snif_ingress_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'nof_profiles'
 * Number of SNIF profiles supported by ingress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_ingress_nof_profiles_get(
    int unit);

/**
 * \brief returns define data of mirror_nof_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'mirror_nof_profiles'
 * Number of Mirror/Snoop profiles supported by ingress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_ingress_mirror_nof_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_mirror_on_drop_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'nof_mirror_on_drop_profiles'
 * Number of Mirror on drop profiles supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mirror_on_drop_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_ingress_nof_mirror_on_drop_profiles_get(
    int unit);

/**
 * \brief returns define data of mirror_nof_vlan_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'mirror_nof_vlan_profiles'
 * Number of mirror vlan profiles supported by ingress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_nof_vlan_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_ingress_mirror_nof_vlan_profiles_get(
    int unit);

/**
 * \brief returns define data of mirror_default_tagged_profile
 * Module - 'snif', Submodule - 'ingress', data - 'mirror_default_tagged_profile'
 * The ingress default vlan profile for tagged packets
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_default_tagged_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_ingress_mirror_default_tagged_profile_get(
    int unit);

/**
 * \brief returns define data of mirror_untagged_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'mirror_untagged_profiles'
 * The ingress vlan profile for untagged packets
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_untagged_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_ingress_mirror_untagged_profiles_get(
    int unit);

/**
 * \brief returns define data of prob_max_val
 * Module - 'snif', Submodule - 'ingress', data - 'prob_max_val'
 * Probability max value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     prob_max_val - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_ingress_prob_max_val_get(
    int unit);

/**
 * \brief returns define data of crop_size
 * Module - 'snif', Submodule - 'ingress', data - 'crop_size'
 * crop size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     crop_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_ingress_crop_size_get(
    int unit);

/**
 * \brief returns numeric data of keep_orig_dest_on_dsp_ext
 * Module - 'snif', Submodule - 'ingress', data - 'keep_orig_dest_on_dsp_ext'
 * stamping destination on FTM dsp extension
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     keep_orig_dest_on_dsp_ext - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_ingress_keep_orig_dest_on_dsp_ext_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_snif_ingress_table_nof
} dnx_data_snif_ingress_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE EGRESS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_snif_egress_feature_get(
    int unit,
    dnx_data_snif_egress_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_snif_egress_define_mirror_nof_profiles,
    dnx_data_snif_egress_define_snoop_nof_profiles,
    dnx_data_snif_egress_define_mirror_nof_vlan_profiles,
    dnx_data_snif_egress_define_mirror_default_profile,
    dnx_data_snif_egress_define_prob_max_val,
    dnx_data_snif_egress_define_prob_nof_bits,
    dnx_data_snif_egress_define_probability_nof_profiles,
    dnx_data_snif_egress_define_crop_size_nof_profiles,
    dnx_data_snif_egress_define_crop_size_granularity,

    /**
     * Must be last one!
     */
    _dnx_data_snif_egress_define_nof
} dnx_data_snif_egress_define_e;

/* Get Data */
/**
 * \brief returns define data of mirror_nof_profiles
 * Module - 'snif', Submodule - 'egress', data - 'mirror_nof_profiles'
 * Number of mirror profiles supported by egress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_egress_mirror_nof_profiles_get(
    int unit);

/**
 * \brief returns define data of snoop_nof_profiles
 * Module - 'snif', Submodule - 'egress', data - 'snoop_nof_profiles'
 * Number of snoop profiles supported by egress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     snoop_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_egress_snoop_nof_profiles_get(
    int unit);

/**
 * \brief returns define data of mirror_nof_vlan_profiles
 * Module - 'snif', Submodule - 'egress', data - 'mirror_nof_vlan_profiles'
 * Number of mirror vlan profiles supported by egress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_nof_vlan_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_egress_mirror_nof_vlan_profiles_get(
    int unit);

/**
 * \brief returns define data of mirror_default_profile
 * Module - 'snif', Submodule - 'egress', data - 'mirror_default_profile'
 * The egress default vlan profile for tagged packets
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_default_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_egress_mirror_default_profile_get(
    int unit);

/**
 * \brief returns define data of prob_max_val
 * Module - 'snif', Submodule - 'egress', data - 'prob_max_val'
 * Probability max value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     prob_max_val - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_egress_prob_max_val_get(
    int unit);

/**
 * \brief returns define data of prob_nof_bits
 * Module - 'snif', Submodule - 'egress', data - 'prob_nof_bits'
 * Probabiltiy number of bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     prob_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_egress_prob_nof_bits_get(
    int unit);

/**
 * \brief returns define data of probability_nof_profiles
 * Module - 'snif', Submodule - 'egress', data - 'probability_nof_profiles'
 * number of probability profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     probability_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_egress_probability_nof_profiles_get(
    int unit);

/**
 * \brief returns define data of crop_size_nof_profiles
 * Module - 'snif', Submodule - 'egress', data - 'crop_size_nof_profiles'
 * number of crop size profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     crop_size_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_egress_crop_size_nof_profiles_get(
    int unit);

/**
 * \brief returns define data of crop_size_granularity
 * Module - 'snif', Submodule - 'egress', data - 'crop_size_granularity'
 * crop size granularity in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     crop_size_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_snif_egress_crop_size_granularity_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_snif_egress_table_rcy_mirror_to_forward_port_map,

    /**
     * Must be last one!
     */
    _dnx_data_snif_egress_table_nof
} dnx_data_snif_egress_table_e;

/* Get Data */
/**
 * \brief get table rcy_mirror_to_forward_port_map entry 
 * Mapping between recycle mirror port to forward port
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port
 * 
 * \return
 *     rcy_mirror_to_forward_port_map - returns the relevant entry values grouped in struct - see dnx_data_snif_egress_rcy_mirror_to_forward_port_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_snif_egress_rcy_mirror_to_forward_port_map_t * dnx_data_snif_egress_rcy_mirror_to_forward_port_map_get(
    int unit,
    int port);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'snif', Submodule - 'egress', table - 'rcy_mirror_to_forward_port_map'
 * Mapping between recycle mirror port to forward port
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_snif_egress_rcy_mirror_to_forward_port_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)rcy_mirror_to_forward_port_map info
 * Mapping between recycle mirror port to forward port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rcy_mirror_to_forward_port_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_snif_egress_rcy_mirror_to_forward_port_map_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_snif_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_SNIF_H_*/
/* *INDENT-ON* */
