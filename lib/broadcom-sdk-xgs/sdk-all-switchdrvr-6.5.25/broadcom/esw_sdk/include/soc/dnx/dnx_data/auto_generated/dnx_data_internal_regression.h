/** \file dnx_data_internal_regression.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_REGRESSION_H_
/*{*/
#define _DNX_DATA_INTERNAL_REGRESSION_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_regression.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_regression_submodule_dvapi_topology,
    dnx_data_regression_submodule_ser_parameters,
    dnx_data_regression_submodule_access,

    /**
     * Must be last one!
     */
    _dnx_data_regression_submodule_nof
} dnx_data_regression_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE DVAPI_TOPOLOGY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_regression_dvapi_topology_feature_get(
    int unit,
    dnx_data_regression_dvapi_topology_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_regression_dvapi_topology_define_nof_pm_ext_loops,
    dnx_data_regression_dvapi_topology_define_nof_pm_p2p_links,

    /**
     * Must be last one!
     */
    _dnx_data_regression_dvapi_topology_define_nof
} dnx_data_regression_dvapi_topology_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_pm_ext_loops
 * Module - 'regression', Submodule - 'dvapi_topology', data - 'nof_pm_ext_loops'
 * number of exp loopbacks
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pm_ext_loops - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_dvapi_topology_nof_pm_ext_loops_get(
    int unit);

/**
 * \brief returns define data of nof_pm_p2p_links
 * Module - 'regression', Submodule - 'dvapi_topology', data - 'nof_pm_p2p_links'
 * number of p2p links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pm_p2p_links - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_dvapi_topology_nof_pm_p2p_links_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_regression_dvapi_topology_table_pm_ext_loops,
    dnx_data_regression_dvapi_topology_table_pm_p2p_links,
    dnx_data_regression_dvapi_topology_table_pm_test_limitations,

    /**
     * Must be last one!
     */
    _dnx_data_regression_dvapi_topology_table_nof
} dnx_data_regression_dvapi_topology_table_e;

/* Get Data */
/**
 * \brief get table pm_ext_loops entry 
 * port macros have external loopback
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     pm_ext_loops - returns the relevant entry values grouped in struct - see dnx_data_regression_dvapi_topology_pm_ext_loops_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_regression_dvapi_topology_pm_ext_loops_t * dnx_data_regression_dvapi_topology_pm_ext_loops_get(
    int unit,
    int index);

/**
 * \brief get table pm_p2p_links entry 
 * port macros have p2p links
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     pm_p2p_links - returns the relevant entry values grouped in struct - see dnx_data_regression_dvapi_topology_pm_p2p_links_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_regression_dvapi_topology_pm_p2p_links_t * dnx_data_regression_dvapi_topology_pm_p2p_links_get(
    int unit,
    int index);

/**
 * \brief get table pm_test_limitations entry 
 * Table of PMs with limitations. Used for testing.
 * 
 * \param [in] unit - unit #
 * \param [in] pm_index - PM instance number.
 * 
 * \return
 *     pm_test_limitations - returns the relevant entry values grouped in struct - see dnx_data_regression_dvapi_topology_pm_test_limitations_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_regression_dvapi_topology_pm_test_limitations_t * dnx_data_regression_dvapi_topology_pm_test_limitations_get(
    int unit,
    int pm_index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'regression', Submodule - 'dvapi_topology', table - 'pm_ext_loops'
 * port macros have external loopback
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_regression_dvapi_topology_pm_ext_loops_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'regression', Submodule - 'dvapi_topology', table - 'pm_p2p_links'
 * port macros have p2p links
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_regression_dvapi_topology_pm_p2p_links_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'regression', Submodule - 'dvapi_topology', table - 'pm_test_limitations'
 * Table of PMs with limitations. Used for testing.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_regression_dvapi_topology_pm_test_limitations_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)pm_ext_loops info
 * port macros have external loopback
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_ext_loops - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_regression_dvapi_topology_pm_ext_loops_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)pm_p2p_links info
 * port macros have p2p links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_p2p_links - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_regression_dvapi_topology_pm_p2p_links_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)pm_test_limitations info
 * Table of PMs with limitations. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_test_limitations - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_regression_dvapi_topology_pm_test_limitations_info_get(
    int unit);

/*
 * SUBMODULE SER_PARAMETERS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_regression_ser_parameters_feature_get(
    int unit,
    dnx_data_regression_ser_parameters_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_regression_ser_parameters_define_cgm_voq_profiles,
    dnx_data_regression_ser_parameters_define_ecgm_qqst_table,
    dnx_data_regression_ser_parameters_define_ecgm_qdct_table,
    dnx_data_regression_ser_parameters_define_erpp_per_pp_port_table,
    dnx_data_regression_ser_parameters_define_erpp_per_pp_port_table_2,
    dnx_data_regression_ser_parameters_define_mdb_ivsi,
    dnx_data_regression_ser_parameters_define_mdb_evsi,
    dnx_data_regression_ser_parameters_define_mdb_glem,
    dnx_data_regression_ser_parameters_define_mdb_exem_1,
    dnx_data_regression_ser_parameters_define_mdb_fec_1,

    /**
     * Must be last one!
     */
    _dnx_data_regression_ser_parameters_define_nof
} dnx_data_regression_ser_parameters_define_e;

/* Get Data */
/**
 * \brief returns define data of cgm_voq_profiles
 * Module - 'regression', Submodule - 'ser_parameters', data - 'cgm_voq_profiles'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_voq_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_cgm_voq_profiles_get(
    int unit);

/**
 * \brief returns define data of ecgm_qqst_table
 * Module - 'regression', Submodule - 'ser_parameters', data - 'ecgm_qqst_table'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecgm_qqst_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_ecgm_qqst_table_get(
    int unit);

/**
 * \brief returns define data of ecgm_qdct_table
 * Module - 'regression', Submodule - 'ser_parameters', data - 'ecgm_qdct_table'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecgm_qdct_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_ecgm_qdct_table_get(
    int unit);

/**
 * \brief returns define data of erpp_per_pp_port_table
 * Module - 'regression', Submodule - 'ser_parameters', data - 'erpp_per_pp_port_table'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     erpp_per_pp_port_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_erpp_per_pp_port_table_get(
    int unit);

/**
 * \brief returns define data of erpp_per_pp_port_table_2
 * Module - 'regression', Submodule - 'ser_parameters', data - 'erpp_per_pp_port_table_2'
 * entry index of the table. Used for testing of special sku.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     erpp_per_pp_port_table_2 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_erpp_per_pp_port_table_2_get(
    int unit);

/**
 * \brief returns define data of mdb_ivsi
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_ivsi'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_ivsi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_mdb_ivsi_get(
    int unit);

/**
 * \brief returns define data of mdb_evsi
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_evsi'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_evsi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_mdb_evsi_get(
    int unit);

/**
 * \brief returns define data of mdb_glem
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_glem'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_glem - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_mdb_glem_get(
    int unit);

/**
 * \brief returns define data of mdb_exem_1
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_exem_1'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_exem_1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_mdb_exem_1_get(
    int unit);

/**
 * \brief returns define data of mdb_fec_1
 * Module - 'regression', Submodule - 'ser_parameters', data - 'mdb_fec_1'
 * entry index of the table. Used for testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_fec_1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_ser_parameters_mdb_fec_1_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_regression_ser_parameters_table_cgm_ipp_map,
    dnx_data_regression_ser_parameters_table_cgm_voq_dram_bound_prms,
    dnx_data_regression_ser_parameters_table_cgm_voq_dram_bound_prms_2,
    dnx_data_regression_ser_parameters_table_cgm_voq_dram_recovery_prms,
    dnx_data_regression_ser_parameters_table_cgm_voq_dram_recovery_prms_2,

    /**
     * Must be last one!
     */
    _dnx_data_regression_ser_parameters_table_nof
} dnx_data_regression_ser_parameters_table_e;

/* Get Data */
/**
 * \brief get table cgm_ipp_map entry 
 * entry index used for ser testing.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_ipp_map - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_ipp_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_regression_ser_parameters_cgm_ipp_map_t * dnx_data_regression_ser_parameters_cgm_ipp_map_get(
    int unit,
    int index);

/**
 * \brief get table cgm_voq_dram_bound_prms entry 
 * entry index used for ser testing.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_voq_dram_bound_prms - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_t * dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_get(
    int unit,
    int index);

/**
 * \brief get table cgm_voq_dram_bound_prms_2 entry 
 * entry index used for ser testing of special sku.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_voq_dram_bound_prms_2 - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_t * dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_get(
    int unit,
    int index);

/**
 * \brief get table cgm_voq_dram_recovery_prms entry 
 * entry index used for ser testing.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_voq_dram_recovery_prms - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_t * dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_get(
    int unit,
    int index);

/**
 * \brief get table cgm_voq_dram_recovery_prms_2 entry 
 * entry index used for ser testing of special sku.
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     cgm_voq_dram_recovery_prms_2 - returns the relevant entry values grouped in struct - see dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_t * dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'regression', Submodule - 'ser_parameters', table - 'cgm_ipp_map'
 * entry index used for ser testing.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_regression_ser_parameters_cgm_ipp_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'regression', Submodule - 'ser_parameters', table - 'cgm_voq_dram_bound_prms'
 * entry index used for ser testing.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'regression', Submodule - 'ser_parameters', table - 'cgm_voq_dram_bound_prms_2'
 * entry index used for ser testing of special sku.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'regression', Submodule - 'ser_parameters', table - 'cgm_voq_dram_recovery_prms'
 * entry index used for ser testing.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'regression', Submodule - 'ser_parameters', table - 'cgm_voq_dram_recovery_prms_2'
 * entry index used for ser testing of special sku.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)cgm_ipp_map info
 * entry index used for ser testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_ipp_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_regression_ser_parameters_cgm_ipp_map_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)cgm_voq_dram_bound_prms info
 * entry index used for ser testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_voq_dram_bound_prms - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)cgm_voq_dram_bound_prms_2 info
 * entry index used for ser testing of special sku.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_voq_dram_bound_prms_2 - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_regression_ser_parameters_cgm_voq_dram_bound_prms_2_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)cgm_voq_dram_recovery_prms info
 * entry index used for ser testing.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_voq_dram_recovery_prms - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)cgm_voq_dram_recovery_prms_2 info
 * entry index used for ser testing of special sku.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_voq_dram_recovery_prms_2 - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_regression_ser_parameters_cgm_voq_dram_recovery_prms_2_info_get(
    int unit);

/*
 * SUBMODULE ACCESS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_regression_access_feature_get(
    int unit,
    dnx_data_regression_access_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_regression_access_define_access_mode,
    dnx_data_regression_access_define_severity_miss_check,

    /**
     * Must be last one!
     */
    _dnx_data_regression_access_define_nof
} dnx_data_regression_access_define_e;

/* Get Data */
/**
 * \brief returns numeric data of access_mode
 * Module - 'regression', Submodule - 'access', data - 'access_mode'
 * Checking the device access mode for access dvapi.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     access_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_access_access_mode_get(
    int unit);

/**
 * \brief returns numeric data of severity_miss_check
 * Module - 'regression', Submodule - 'access', data - 'severity_miss_check'
 * if memories severity check for access dvapi.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     severity_miss_check - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_regression_access_severity_miss_check_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_regression_access_table_nof
} dnx_data_regression_access_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_regression_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_REGRESSION_H_*/
/* *INDENT-ON* */
