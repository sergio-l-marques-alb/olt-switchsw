/** \file dnx_data_snif.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_SNIF_H_
/*{*/
#define _DNX_DATA_SNIF_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_snif.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_snif
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_snif_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * SNIF general data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * is destination OW can be omited
     */
    dnx_data_snif_general_original_destination_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_snif_general_feature_nof
} dnx_data_snif_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_snif_general_feature_get_f) (
    int unit,
    dnx_data_snif_general_feature_e feature);

/**
 * \brief returns define data of cud_type_standard
 * Module - 'snif', Submodule - 'general', data - 'cud_type_standard'
 * Sniff CUD type standard
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cud_type_standard - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_general_cud_type_standard_get_f) (
    int unit);

/**
 * \brief returns define data of cud_type_sflow
 * Module - 'snif', Submodule - 'general', data - 'cud_type_sflow'
 * Sniff CUD type sflow
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cud_type_sflow - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_general_cud_type_sflow_get_f) (
    int unit);

/**
 * \brief returns define data of cud_type_mirror_on_drop
 * Module - 'snif', Submodule - 'general', data - 'cud_type_mirror_on_drop'
 * Sniff CUD type mirror on drop
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cud_type_mirror_on_drop - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_general_cud_type_mirror_on_drop_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SNIF - GENERAL:
 * {
 */
/**
 * \brief Interface for snif general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_snif_general_feature_get_f feature_get;
    /**
     * returns define data of cud_type_standard
     */
    dnx_data_snif_general_cud_type_standard_get_f cud_type_standard_get;
    /**
     * returns define data of cud_type_sflow
     */
    dnx_data_snif_general_cud_type_sflow_get_f cud_type_sflow_get;
    /**
     * returns define data of cud_type_mirror_on_drop
     */
    dnx_data_snif_general_cud_type_mirror_on_drop_get_f cud_type_mirror_on_drop_get;
} dnx_data_if_snif_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - INGRESS:
 * SNIF ingress profiles data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Crop size is configurable (not predefined size)
     */
    dnx_data_snif_ingress_crop_size_config_is_supported,
    /**
     * Mirror admit profiles are configurd per admit profile
     */
    dnx_data_snif_ingress_mirror_on_drop_admit_profile_supported,
    /**
     * External stat counters dedicated confiugrations are supported
     */
    dnx_data_snif_ingress_ext_stat_dedicated_config,
    /**
     * ITPP delta supported
     */
    dnx_data_snif_ingress_itpp_delta_supported,

    /**
     * Must be last one!
     */
    _dnx_data_snif_ingress_feature_nof
} dnx_data_snif_ingress_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_snif_ingress_feature_get_f) (
    int unit,
    dnx_data_snif_ingress_feature_e feature);

/**
 * \brief returns define data of nof_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'nof_profiles'
 * Number of SNIF profiles supported by ingress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_ingress_nof_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of mirror_nof_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'mirror_nof_profiles'
 * Number of Mirror/Snoop profiles supported by ingress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_ingress_mirror_nof_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mirror_on_drop_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'nof_mirror_on_drop_profiles'
 * Number of Mirror on drop profiles supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mirror_on_drop_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_ingress_nof_mirror_on_drop_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of mirror_nof_vlan_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'mirror_nof_vlan_profiles'
 * Number of mirror vlan profiles supported by ingress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_nof_vlan_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_ingress_mirror_nof_vlan_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of mirror_default_tagged_profile
 * Module - 'snif', Submodule - 'ingress', data - 'mirror_default_tagged_profile'
 * The ingress default vlan profile for tagged packets
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_default_tagged_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_ingress_mirror_default_tagged_profile_get_f) (
    int unit);

/**
 * \brief returns define data of mirror_untagged_profiles
 * Module - 'snif', Submodule - 'ingress', data - 'mirror_untagged_profiles'
 * The ingress vlan profile for untagged packets
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_untagged_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_ingress_mirror_untagged_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of prob_max_val
 * Module - 'snif', Submodule - 'ingress', data - 'prob_max_val'
 * Probability max value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     prob_max_val - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_ingress_prob_max_val_get_f) (
    int unit);

/**
 * \brief returns define data of crop_size
 * Module - 'snif', Submodule - 'ingress', data - 'crop_size'
 * crop size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     crop_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_ingress_crop_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of keep_orig_dest_on_dsp_ext
 * Module - 'snif', Submodule - 'ingress', data - 'keep_orig_dest_on_dsp_ext'
 * stamping destination on FTM dsp extension
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     keep_orig_dest_on_dsp_ext - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_ingress_keep_orig_dest_on_dsp_ext_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SNIF - INGRESS:
 * {
 */
/**
 * \brief Interface for snif ingress data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_snif_ingress_feature_get_f feature_get;
    /**
     * returns define data of nof_profiles
     */
    dnx_data_snif_ingress_nof_profiles_get_f nof_profiles_get;
    /**
     * returns define data of mirror_nof_profiles
     */
    dnx_data_snif_ingress_mirror_nof_profiles_get_f mirror_nof_profiles_get;
    /**
     * returns define data of nof_mirror_on_drop_profiles
     */
    dnx_data_snif_ingress_nof_mirror_on_drop_profiles_get_f nof_mirror_on_drop_profiles_get;
    /**
     * returns define data of mirror_nof_vlan_profiles
     */
    dnx_data_snif_ingress_mirror_nof_vlan_profiles_get_f mirror_nof_vlan_profiles_get;
    /**
     * returns define data of mirror_default_tagged_profile
     */
    dnx_data_snif_ingress_mirror_default_tagged_profile_get_f mirror_default_tagged_profile_get;
    /**
     * returns define data of mirror_untagged_profiles
     */
    dnx_data_snif_ingress_mirror_untagged_profiles_get_f mirror_untagged_profiles_get;
    /**
     * returns define data of prob_max_val
     */
    dnx_data_snif_ingress_prob_max_val_get_f prob_max_val_get;
    /**
     * returns define data of crop_size
     */
    dnx_data_snif_ingress_crop_size_get_f crop_size_get;
    /**
     * returns numeric data of keep_orig_dest_on_dsp_ext
     */
    dnx_data_snif_ingress_keep_orig_dest_on_dsp_ext_get_f keep_orig_dest_on_dsp_ext_get;
} dnx_data_if_snif_ingress_t;

/*
 * }
 */

/*
 * SUBMODULE  - EGRESS:
 * SNIF egress profiles data
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule egress table rcy_mirror_to_forward_port_map
 * Table info:
 * Mapping between recycle mirror port to forward port
 */
typedef struct
{
    /**
     * forward port to map
     */
    int forward_port;
} dnx_data_snif_egress_rcy_mirror_to_forward_port_map_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * egress mirror supports probability sampling
     */
    dnx_data_snif_egress_probability_sample,
    /**
     * Egress null profile used as disable profile
     */
    dnx_data_snif_egress_egress_null_profile,
    /**
     * Egress sniffing has probability profiles
     */
    dnx_data_snif_egress_probability_profiles,
    /**
     * Egress sniffing has crop size profiles
     */
    dnx_data_snif_egress_crop_size_profiles,
    /**
     * Egress mirror mode
     */
    dnx_data_snif_egress_egress_mirror_mode,

    /**
     * Must be last one!
     */
    _dnx_data_snif_egress_feature_nof
} dnx_data_snif_egress_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_snif_egress_feature_get_f) (
    int unit,
    dnx_data_snif_egress_feature_e feature);

/**
 * \brief returns define data of mirror_nof_profiles
 * Module - 'snif', Submodule - 'egress', data - 'mirror_nof_profiles'
 * Number of mirror profiles supported by egress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_egress_mirror_nof_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of snoop_nof_profiles
 * Module - 'snif', Submodule - 'egress', data - 'snoop_nof_profiles'
 * Number of snoop profiles supported by egress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     snoop_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_egress_snoop_nof_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of mirror_nof_vlan_profiles
 * Module - 'snif', Submodule - 'egress', data - 'mirror_nof_vlan_profiles'
 * Number of mirror vlan profiles supported by egress SNIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_nof_vlan_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_egress_mirror_nof_vlan_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of mirror_default_profile
 * Module - 'snif', Submodule - 'egress', data - 'mirror_default_profile'
 * The egress default vlan profile for tagged packets
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_default_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_egress_mirror_default_profile_get_f) (
    int unit);

/**
 * \brief returns define data of prob_max_val
 * Module - 'snif', Submodule - 'egress', data - 'prob_max_val'
 * Probability max value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     prob_max_val - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_egress_prob_max_val_get_f) (
    int unit);

/**
 * \brief returns define data of prob_nof_bits
 * Module - 'snif', Submodule - 'egress', data - 'prob_nof_bits'
 * Probabiltiy number of bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     prob_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_egress_prob_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of probability_nof_profiles
 * Module - 'snif', Submodule - 'egress', data - 'probability_nof_profiles'
 * number of probability profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     probability_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_egress_probability_nof_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of crop_size_nof_profiles
 * Module - 'snif', Submodule - 'egress', data - 'crop_size_nof_profiles'
 * number of crop size profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     crop_size_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_egress_crop_size_nof_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of crop_size_granularity
 * Module - 'snif', Submodule - 'egress', data - 'crop_size_granularity'
 * crop size granularity in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     crop_size_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_snif_egress_crop_size_granularity_get_f) (
    int unit);

/**
 * \brief get table rcy_mirror_to_forward_port_map entry 
 * Mapping between recycle mirror port to forward port
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port
 * 
 * \return
 *     rcy_mirror_to_forward_port_map - returns the relevant entry values grouped in struct - see dnx_data_snif_egress_rcy_mirror_to_forward_port_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_snif_egress_rcy_mirror_to_forward_port_map_t *(
    *dnx_data_snif_egress_rcy_mirror_to_forward_port_map_get_f) (
    int unit,
    int port);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SNIF - EGRESS:
 * {
 */
/**
 * \brief Interface for snif egress data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_snif_egress_feature_get_f feature_get;
    /**
     * returns define data of mirror_nof_profiles
     */
    dnx_data_snif_egress_mirror_nof_profiles_get_f mirror_nof_profiles_get;
    /**
     * returns define data of snoop_nof_profiles
     */
    dnx_data_snif_egress_snoop_nof_profiles_get_f snoop_nof_profiles_get;
    /**
     * returns define data of mirror_nof_vlan_profiles
     */
    dnx_data_snif_egress_mirror_nof_vlan_profiles_get_f mirror_nof_vlan_profiles_get;
    /**
     * returns define data of mirror_default_profile
     */
    dnx_data_snif_egress_mirror_default_profile_get_f mirror_default_profile_get;
    /**
     * returns define data of prob_max_val
     */
    dnx_data_snif_egress_prob_max_val_get_f prob_max_val_get;
    /**
     * returns define data of prob_nof_bits
     */
    dnx_data_snif_egress_prob_nof_bits_get_f prob_nof_bits_get;
    /**
     * returns define data of probability_nof_profiles
     */
    dnx_data_snif_egress_probability_nof_profiles_get_f probability_nof_profiles_get;
    /**
     * returns define data of crop_size_nof_profiles
     */
    dnx_data_snif_egress_crop_size_nof_profiles_get_f crop_size_nof_profiles_get;
    /**
     * returns define data of crop_size_granularity
     */
    dnx_data_snif_egress_crop_size_granularity_get_f crop_size_granularity_get;
    /**
     * get table rcy_mirror_to_forward_port_map entry 
     */
    dnx_data_snif_egress_rcy_mirror_to_forward_port_map_get_f rcy_mirror_to_forward_port_map_get;
    /**
     * get general info table about table (for example key size)rcy_mirror_to_forward_port_map info
     */
    dnxc_data_table_info_get_f rcy_mirror_to_forward_port_map_info_get;
} dnx_data_if_snif_egress_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_SNIF:
 * {
 */
/**
 * \brief Interface for snif data
 */
typedef struct
{
    /**
     * Interface for snif general data
     */
    dnx_data_if_snif_general_t general;
    /**
     * Interface for snif ingress data
     */
    dnx_data_if_snif_ingress_t ingress;
    /**
     * Interface for snif egress data
     */
    dnx_data_if_snif_egress_t egress;
} dnx_data_if_snif_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_snif_t dnx_data_snif;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_SNIF_H_*/
/* *INDENT-ON* */
