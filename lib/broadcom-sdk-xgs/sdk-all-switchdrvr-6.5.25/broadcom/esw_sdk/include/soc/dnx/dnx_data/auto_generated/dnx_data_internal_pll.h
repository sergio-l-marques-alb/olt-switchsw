/** \file dnx_data_internal_pll.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_PLL_H_
/*{*/
#define _DNX_DATA_INTERNAL_PLL_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_pll.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_pll_submodule_general,
    dnx_data_pll_submodule_pll1,
    dnx_data_pll_submodule_pll3,
    dnx_data_pll_submodule_pll4,
    dnx_data_pll_submodule_synce_pll,

    /**
     * Must be last one!
     */
    _dnx_data_pll_submodule_nof
} dnx_data_pll_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pll_general_feature_get(
    int unit,
    dnx_data_pll_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_pll_general_define_ts_phase_initial_lo,
    dnx_data_pll_general_define_ts_phase_initial_hi,
    dnx_data_pll_general_define_ts_nof_bits_hi,
    dnx_data_pll_general_define_ts_nof_bits_right_shift_ns,
    dnx_data_pll_general_define_ts_ptp_fref,

    /**
     * Must be last one!
     */
    _dnx_data_pll_general_define_nof
} dnx_data_pll_general_define_e;

/* Get Data */
/**
 * \brief returns numeric data of ts_phase_initial_lo
 * Module - 'pll', Submodule - 'general', data - 'ts_phase_initial_lo'
 * Initial phase values low 32
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_phase_initial_lo - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_ts_phase_initial_lo_get(
    int unit);

/**
 * \brief returns numeric data of ts_phase_initial_hi
 * Module - 'pll', Submodule - 'general', data - 'ts_phase_initial_hi'
 * Initial phase values high 32
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_phase_initial_hi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_ts_phase_initial_hi_get(
    int unit);

/**
 * \brief returns numeric data of ts_nof_bits_hi
 * Module - 'pll', Submodule - 'general', data - 'ts_nof_bits_hi'
 * Number of high bits for presenting phase values
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_nof_bits_hi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_ts_nof_bits_hi_get(
    int unit);

/**
 * \brief returns numeric data of ts_nof_bits_right_shift_ns
 * Module - 'pll', Submodule - 'general', data - 'ts_nof_bits_right_shift_ns'
 * Number of bits to right shift to get nanoseconds.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_nof_bits_right_shift_ns - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_ts_nof_bits_right_shift_ns_get(
    int unit);

/**
 * \brief returns numeric data of ts_ptp_fref
 * Module - 'pll', Submodule - 'general', data - 'ts_ptp_fref'
 * PTP Timestamping PLL value for fref parameter
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_ptp_fref - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_general_ts_ptp_fref_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_pll_general_table_nif_pll,
    dnx_data_pll_general_table_fabric_pll,

    /**
     * Must be last one!
     */
    _dnx_data_pll_general_table_nof
} dnx_data_pll_general_table_e;

/* Get Data */
/**
 * \brief get table nif_pll entry 
 * NIF PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * \param [in] pll_index - Index of NIF PLL (0 or 1)
 * 
 * \return
 *     nif_pll - returns the relevant entry values grouped in struct - see dnx_data_pll_general_nif_pll_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pll_general_nif_pll_t * dnx_data_pll_general_nif_pll_get(
    int unit,
    int pll_index);

/**
 * \brief get table fabric_pll entry 
 * Fabric PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * \param [in] pll_index - Index of Fabric PLL (0 or 1)
 * 
 * \return
 *     fabric_pll - returns the relevant entry values grouped in struct - see dnx_data_pll_general_fabric_pll_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pll_general_fabric_pll_t * dnx_data_pll_general_fabric_pll_get(
    int unit,
    int pll_index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'pll', Submodule - 'general', table - 'nif_pll'
 * NIF PLL reference and output frequencies
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pll_general_nif_pll_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'pll', Submodule - 'general', table - 'fabric_pll'
 * Fabric PLL reference and output frequencies
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pll_general_fabric_pll_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)nif_pll info
 * NIF PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pll_general_nif_pll_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)fabric_pll info
 * Fabric PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_pll - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pll_general_fabric_pll_info_get(
    int unit);

/*
 * SUBMODULE PLL1:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pll_pll1_feature_get(
    int unit,
    dnx_data_pll_pll1_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_pll_pll1_define_nof_pll1,
    dnx_data_pll_pll1_define_ts_pll1_id,
    dnx_data_pll_pll1_define_bs_pll1_id,
    dnx_data_pll_pll1_define_fab_pll1_id,
    dnx_data_pll_pll1_define_nif_pll1_id,
    dnx_data_pll_pll1_define_flexe_pll1_id,

    /**
     * Must be last one!
     */
    _dnx_data_pll_pll1_define_nof
} dnx_data_pll_pll1_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_pll1
 * Module - 'pll', Submodule - 'pll1', data - 'nof_pll1'
 * Number of PLL1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pll1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll1_nof_pll1_get(
    int unit);

/**
 * \brief returns numeric data of ts_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'ts_pll1_id'
 * Index of the TS PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll1_ts_pll1_id_get(
    int unit);

/**
 * \brief returns numeric data of bs_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'bs_pll1_id'
 * Index of the BS PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bs_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll1_bs_pll1_id_get(
    int unit);

/**
 * \brief returns numeric data of fab_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'fab_pll1_id'
 * Index of the FAB PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fab_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll1_fab_pll1_id_get(
    int unit);

/**
 * \brief returns numeric data of nif_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'nif_pll1_id'
 * Index of the NIF PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll1_nif_pll1_id_get(
    int unit);

/**
 * \brief returns numeric data of flexe_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'flexe_pll1_id'
 * Index of the FLEXE PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flexe_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll1_flexe_pll1_id_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_pll_pll1_table_config,

    /**
     * Must be last one!
     */
    _dnx_data_pll_pll1_table_nof
} dnx_data_pll_pll1_table_e;

/* Get Data */
/**
 * \brief get table config entry 
 * PLL1 configuration parameters
 * 
 * \param [in] unit - unit #
 * \param [in] pll1_type - Type of PLL1 according to DNX_PLL1_TYPE enumerator
 * 
 * \return
 *     config - returns the relevant entry values grouped in struct - see dnx_data_pll_pll1_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pll_pll1_config_t * dnx_data_pll_pll1_config_get(
    int unit,
    int pll1_type);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'pll', Submodule - 'pll1', table - 'config'
 * PLL1 configuration parameters
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pll_pll1_config_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)config info
 * PLL1 configuration parameters
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     config - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pll_pll1_config_info_get(
    int unit);

/*
 * SUBMODULE PLL3:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pll_pll3_feature_get(
    int unit,
    dnx_data_pll_pll3_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_pll_pll3_define_nof_pll3,
    dnx_data_pll_pll3_define_vco_clock,
    dnx_data_pll_pll3_define_kp,
    dnx_data_pll_pll3_define_ki,
    dnx_data_pll_pll3_define_en_ctrl,
    dnx_data_pll_pll3_define_en_ctrl_byp,
    dnx_data_pll_pll3_define_route_ctr_byp,
    dnx_data_pll_pll3_define_ref_clock_125,
    dnx_data_pll_pll3_define_ref_clock_156_25,
    dnx_data_pll_pll3_define_ref_clock_312_5,
    dnx_data_pll_pll3_define_nif0_pll3_id,
    dnx_data_pll_pll3_define_nif1_pll3_id,
    dnx_data_pll_pll3_define_mas0_pll3_id,
    dnx_data_pll_pll3_define_mas1_pll3_id,

    /**
     * Must be last one!
     */
    _dnx_data_pll_pll3_define_nof
} dnx_data_pll_pll3_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_pll3
 * Module - 'pll', Submodule - 'pll3', data - 'nof_pll3'
 * Number of PLL3
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pll3 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_nof_pll3_get(
    int unit);

/**
 * \brief returns define data of vco_clock
 * Module - 'pll', Submodule - 'pll3', data - 'vco_clock'
 * Frequency of the Voltage Control Oscilator of PLL3. Used to calculate Pdiv, Ndiv, Mdiv and the Effective Ferquency
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vco_clock - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_vco_clock_get(
    int unit);

/**
 * \brief returns define data of kp
 * Module - 'pll', Submodule - 'pll3', data - 'kp'
 * KP parameter for PLL3 configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     kp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_kp_get(
    int unit);

/**
 * \brief returns define data of ki
 * Module - 'pll', Submodule - 'pll3', data - 'ki'
 * Ki parameter for PLL3 configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ki - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_ki_get(
    int unit);

/**
 * \brief returns define data of en_ctrl
 * Module - 'pll', Submodule - 'pll3', data - 'en_ctrl'
 * Enable control
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     en_ctrl - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_en_ctrl_get(
    int unit);

/**
 * \brief returns define data of en_ctrl_byp
 * Module - 'pll', Submodule - 'pll3', data - 'en_ctrl_byp'
 * Enable control for bypass mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     en_ctrl_byp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_en_ctrl_byp_get(
    int unit);

/**
 * \brief returns define data of route_ctr_byp
 * Module - 'pll', Submodule - 'pll3', data - 'route_ctr_byp'
 * Value of route control field when using bypass
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     route_ctr_byp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_route_ctr_byp_get(
    int unit);

/**
 * \brief returns define data of ref_clock_125
 * Module - 'pll', Submodule - 'pll3', data - 'ref_clock_125'
 * Value for 125MHz reference clock
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ref_clock_125 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_ref_clock_125_get(
    int unit);

/**
 * \brief returns define data of ref_clock_156_25
 * Module - 'pll', Submodule - 'pll3', data - 'ref_clock_156_25'
 * Value for 156.25MHz reference clock.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ref_clock_156_25 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_ref_clock_156_25_get(
    int unit);

/**
 * \brief returns define data of ref_clock_312_5
 * Module - 'pll', Submodule - 'pll3', data - 'ref_clock_312_5'
 * Value for 312.5MHz reference clock.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ref_clock_312_5 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_ref_clock_312_5_get(
    int unit);

/**
 * \brief returns numeric data of nif0_pll3_id
 * Module - 'pll', Submodule - 'pll3', data - 'nif0_pll3_id'
 * Index of the NIF0 PLL3, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif0_pll3_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_nif0_pll3_id_get(
    int unit);

/**
 * \brief returns numeric data of nif1_pll3_id
 * Module - 'pll', Submodule - 'pll3', data - 'nif1_pll3_id'
 * Index of the NIF1 PLL3, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif1_pll3_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_nif1_pll3_id_get(
    int unit);

/**
 * \brief returns numeric data of mas0_pll3_id
 * Module - 'pll', Submodule - 'pll3', data - 'mas0_pll3_id'
 * Index of the MAS0 PLL3, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mas0_pll3_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_mas0_pll3_id_get(
    int unit);

/**
 * \brief returns numeric data of mas1_pll3_id
 * Module - 'pll', Submodule - 'pll3', data - 'mas1_pll3_id'
 * Index of the MAS1 PLL3, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mas1_pll3_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll3_mas1_pll3_id_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_pll_pll3_table_config,

    /**
     * Must be last one!
     */
    _dnx_data_pll_pll3_table_nof
} dnx_data_pll_pll3_table_e;

/* Get Data */
/**
 * \brief get table config entry 
 * PLL3 configuration parameters
 * 
 * \param [in] unit - unit #
 * \param [in] pll3_type - Type of PLL1 according to DNX_PLL1_TYPE enumerator
 * 
 * \return
 *     config - returns the relevant entry values grouped in struct - see dnx_data_pll_pll3_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pll_pll3_config_t * dnx_data_pll_pll3_config_get(
    int unit,
    int pll3_type);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'pll', Submodule - 'pll3', table - 'config'
 * PLL3 configuration parameters
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pll_pll3_config_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)config info
 * PLL3 configuration parameters
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     config - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pll_pll3_config_info_get(
    int unit);

/*
 * SUBMODULE PLL4:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pll_pll4_feature_get(
    int unit,
    dnx_data_pll_pll4_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_pll_pll4_define_nof_pll4,
    dnx_data_pll_pll4_define_ts_pll4_id,
    dnx_data_pll_pll4_define_bs_pll4_id,
    dnx_data_pll_pll4_define_nif_pll4_id,
    dnx_data_pll_pll4_define_fab_pll4_id,
    dnx_data_pll_pll4_define_nif_tsc_pll4_id,
    dnx_data_pll_pll4_define_framer_pll4_id,
    dnx_data_pll_pll4_define_sar_pll4_id,

    /**
     * Must be last one!
     */
    _dnx_data_pll_pll4_define_nof
} dnx_data_pll_pll4_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_pll4
 * Module - 'pll', Submodule - 'pll4', data - 'nof_pll4'
 * Number of PLL4
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pll4 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll4_nof_pll4_get(
    int unit);

/**
 * \brief returns numeric data of ts_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'ts_pll4_id'
 * Index of the TS PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll4_ts_pll4_id_get(
    int unit);

/**
 * \brief returns numeric data of bs_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'bs_pll4_id'
 * Index of the BS PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bs_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll4_bs_pll4_id_get(
    int unit);

/**
 * \brief returns numeric data of nif_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'nif_pll4_id'
 * Index of the NIF PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll4_nif_pll4_id_get(
    int unit);

/**
 * \brief returns numeric data of fab_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'fab_pll4_id'
 * Index of the FSRD PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fab_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll4_fab_pll4_id_get(
    int unit);

/**
 * \brief returns numeric data of nif_tsc_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'nif_tsc_pll4_id'
 * Index of the NIF TSC PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_tsc_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll4_nif_tsc_pll4_id_get(
    int unit);

/**
 * \brief returns numeric data of framer_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'framer_pll4_id'
 * Index of the Framer PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     framer_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll4_framer_pll4_id_get(
    int unit);

/**
 * \brief returns numeric data of sar_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'sar_pll4_id'
 * Index of the SAR PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sar_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pll_pll4_sar_pll4_id_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_pll_pll4_table_config,

    /**
     * Must be last one!
     */
    _dnx_data_pll_pll4_table_nof
} dnx_data_pll_pll4_table_e;

/* Get Data */
/**
 * \brief get table config entry 
 * PLL4 configuration parameters
 * 
 * \param [in] unit - unit #
 * \param [in] pll4_type - Type of PLL4 according to DNX_PLL4_TYPE enumerator
 * 
 * \return
 *     config - returns the relevant entry values grouped in struct - see dnx_data_pll_pll4_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pll_pll4_config_t * dnx_data_pll_pll4_config_get(
    int unit,
    int pll4_type);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'pll', Submodule - 'pll4', table - 'config'
 * PLL4 configuration parameters
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pll_pll4_config_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)config info
 * PLL4 configuration parameters
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     config - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pll_pll4_config_info_get(
    int unit);

/*
 * SUBMODULE SYNCE_PLL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pll_synce_pll_feature_get(
    int unit,
    dnx_data_pll_synce_pll_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pll_synce_pll_define_nof
} dnx_data_pll_synce_pll_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pll_synce_pll_table_nof
} dnx_data_pll_synce_pll_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pll_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_PLL_H_*/
/* *INDENT-ON* */
