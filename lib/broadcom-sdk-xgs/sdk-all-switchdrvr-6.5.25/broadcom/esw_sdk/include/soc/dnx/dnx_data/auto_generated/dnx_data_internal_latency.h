/** \file dnx_data_internal_latency.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_LATENCY_H_
/*{*/
#define _DNX_DATA_INTERNAL_LATENCY_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_latency.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_latency_submodule_features,
    dnx_data_latency_submodule_profile,
    dnx_data_latency_submodule_based_admission,
    dnx_data_latency_submodule_ingress,

    /**
     * Must be last one!
     */
    _dnx_data_latency_submodule_nof
} dnx_data_latency_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE FEATURES:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_latency_features_feature_get(
    int unit,
    dnx_data_latency_features_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_latency_features_define_latency_bins,

    /**
     * Must be last one!
     */
    _dnx_data_latency_features_define_nof
} dnx_data_latency_features_define_e;

/* Get Data */
/**
 * \brief returns define data of latency_bins
 * Module - 'latency', Submodule - 'features', data - 'latency_bins'
 * number of latency bins ranges
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     latency_bins - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_latency_features_latency_bins_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_latency_features_table_nof
} dnx_data_latency_features_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE PROFILE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_latency_profile_feature_get(
    int unit,
    dnx_data_latency_profile_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_latency_profile_define_egress_nof,
    dnx_data_latency_profile_define_ingress_nof,

    /**
     * Must be last one!
     */
    _dnx_data_latency_profile_define_nof
} dnx_data_latency_profile_define_e;

/* Get Data */
/**
 * \brief returns define data of egress_nof
 * Module - 'latency', Submodule - 'profile', data - 'egress_nof'
 * Number of egress (end-to-end) latency profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_latency_profile_egress_nof_get(
    int unit);

/**
 * \brief returns define data of ingress_nof
 * Module - 'latency', Submodule - 'profile', data - 'ingress_nof'
 * Number of ingress latency profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ingress_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_latency_profile_ingress_nof_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_latency_profile_table_nof
} dnx_data_latency_profile_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE BASED_ADMISSION:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_latency_based_admission_feature_get(
    int unit,
    dnx_data_latency_based_admission_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_latency_based_admission_define_reject_flow_profile_value,
    dnx_data_latency_based_admission_define_cgm_extended_profiles_enable_value,
    dnx_data_latency_based_admission_define_max_supported_profile,

    /**
     * Must be last one!
     */
    _dnx_data_latency_based_admission_define_nof
} dnx_data_latency_based_admission_define_e;

/* Get Data */
/**
 * \brief returns define data of reject_flow_profile_value
 * Module - 'latency', Submodule - 'based_admission', data - 'reject_flow_profile_value'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     reject_flow_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_latency_based_admission_reject_flow_profile_value_get(
    int unit);

/**
 * \brief returns define data of cgm_extended_profiles_enable_value
 * Module - 'latency', Submodule - 'based_admission', data - 'cgm_extended_profiles_enable_value'
 * If there is cgm eco to be enabled for latency based admissions profiles - set this value to the spare register
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_extended_profiles_enable_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_latency_based_admission_cgm_extended_profiles_enable_value_get(
    int unit);

/**
 * \brief returns define data of max_supported_profile
 * Module - 'latency', Submodule - 'based_admission', data - 'max_supported_profile'
 * For latency based admission not all latency profiles are supported to be used
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_supported_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_latency_based_admission_max_supported_profile_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_latency_based_admission_table_nof
} dnx_data_latency_based_admission_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE INGRESS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_latency_ingress_feature_get(
    int unit,
    dnx_data_latency_ingress_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_latency_ingress_define_jr_mode_latency_timestamp_left_shift,

    /**
     * Must be last one!
     */
    _dnx_data_latency_ingress_define_nof
} dnx_data_latency_ingress_define_e;

/* Get Data */
/**
 * \brief returns define data of jr_mode_latency_timestamp_left_shift
 * Module - 'latency', Submodule - 'ingress', data - 'jr_mode_latency_timestamp_left_shift'
 * The time value taken from the OAM TS header is shifted left by this amount of bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     jr_mode_latency_timestamp_left_shift - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_latency_ingress_jr_mode_latency_timestamp_left_shift_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_latency_ingress_table_nof
} dnx_data_latency_ingress_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_latency_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_LATENCY_H_*/
/* *INDENT-ON* */
