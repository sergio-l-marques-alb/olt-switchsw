/** \file dnx_data_adapter.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_ADAPTER_H_
/*{*/
#define _DNX_DATA_ADAPTER_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/access.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_adapter.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_adapter
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_adapter_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - TX:
 * adapter tx
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_adapter_tx_feature_nof
} dnx_data_adapter_tx_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_adapter_tx_feature_get_f) (
    int unit,
    dnx_data_adapter_tx_feature_e feature);

/**
 * \brief returns numeric data of loopback_enable
 * Module - 'adapter', Submodule - 'tx', data - 'loopback_enable'
 * Use loopback in the adapter server instead of go through the pipe when receiving tx packets
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     loopback_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_adapter_tx_loopback_enable_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ADAPTER - TX:
 * {
 */
/**
 * \brief Interface for adapter tx data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_adapter_tx_feature_get_f feature_get;
    /**
     * returns numeric data of loopback_enable
     */
    dnx_data_adapter_tx_loopback_enable_get_f loopback_enable_get;
} dnx_data_if_adapter_tx_t;

/*
 * }
 */

/*
 * SUBMODULE  - RX:
 * adapter rx
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_adapter_rx_feature_nof
} dnx_data_adapter_rx_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_adapter_rx_feature_get_f) (
    int unit,
    dnx_data_adapter_rx_feature_e feature);

/**
 * \brief returns numeric data of constant_header_size
 * Module - 'adapter', Submodule - 'rx', data - 'constant_header_size'
 * Number of bytes in the constant header of a rx packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     constant_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_adapter_rx_constant_header_size_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ADAPTER - RX:
 * {
 */
/**
 * \brief Interface for adapter rx data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_adapter_rx_feature_get_f feature_get;
    /**
     * returns numeric data of constant_header_size
     */
    dnx_data_adapter_rx_constant_header_size_get_f constant_header_size_get;
} dnx_data_if_adapter_rx_t;

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * adapter general configurations
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule general table Injection
 * Table info:
 * Injection Packet information
 */
typedef struct
{
    /**
     * Injected packet name
     */
    char *Injected_packet_name;
} dnx_data_adapter_general_Injection_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_adapter_general_feature_nof
} dnx_data_adapter_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_adapter_general_feature_get_f) (
    int unit,
    dnx_data_adapter_general_feature_e feature);

/**
 * \brief returns define data of nof_sub_units
 * Module - 'adapter', Submodule - 'general', data - 'nof_sub_units'
 * Number of sub units in the adapter device.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sub_units - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_adapter_general_nof_sub_units_get_f) (
    int unit);

/**
 * \brief returns numeric data of lib_ver
 * Module - 'adapter', Submodule - 'general', data - 'lib_ver'
 * Adapter library version
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lib_ver - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_adapter_general_lib_ver_get_f) (
    int unit);

/**
 * \brief returns numeric data of oamp_ms_id
 * Module - 'adapter', Submodule - 'general', data - 'oamp_ms_id'
 * MS Id for OAMP injection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_ms_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_adapter_general_oamp_ms_id_get_f) (
    int unit);

/**
 * \brief get table Injection entry 
 * Injection Packet information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     Injection - returns the relevant entry values grouped in struct - see dnx_data_adapter_general_Injection_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_adapter_general_Injection_t *(
    *dnx_data_adapter_general_Injection_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ADAPTER - GENERAL:
 * {
 */
/**
 * \brief Interface for adapter general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_adapter_general_feature_get_f feature_get;
    /**
     * returns define data of nof_sub_units
     */
    dnx_data_adapter_general_nof_sub_units_get_f nof_sub_units_get;
    /**
     * returns numeric data of lib_ver
     */
    dnx_data_adapter_general_lib_ver_get_f lib_ver_get;
    /**
     * returns numeric data of oamp_ms_id
     */
    dnx_data_adapter_general_oamp_ms_id_get_f oamp_ms_id_get;
    /**
     * get table Injection entry 
     */
    dnx_data_adapter_general_Injection_get_f Injection_get;
    /**
     * get general info table about table (for example key size)Injection info
     */
    dnxc_data_table_info_get_f Injection_info_get;
} dnx_data_if_adapter_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - REG_MEM_ACCESS:
 * adapter reg/mem access
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule reg_mem_access table swap_core_ignore_map
 * Table info:
 * ignore swap core feature, for blocks in this map. the key is enum type soc_block_type_e
 */
typedef struct
{
    /**
     * ignore swap core
     */
    int ignore;
} dnx_data_adapter_reg_mem_access_swap_core_ignore_map_t;

/**
 * \brief Holds values of submodule reg_mem_access table swap_core_ignore_map_by_global_block_ids_enum
 * Table info:
 * ignore swap core feature, for blocks in this map. same as swap_core_ignore_map, just different enum key type
 */
typedef struct
{
    /**
     * ignore swap core
     */
    int ignore;
} dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_t;

/**
 * \brief Holds values of submodule reg_mem_access table clear_on_read_mems
 * Table info:
 * memories which will be  operated in mode clear on read in adapter
 */
typedef struct
{
    /**
     * memory
     */
    soc_mem_t mem;
} dnx_data_adapter_reg_mem_access_clear_on_read_mems_t;

/**
 * \brief Holds values of submodule reg_mem_access table clear_on_read_regs
 * Table info:
 * registers which will be  operated in mode clear on read in adapter
 */
typedef struct
{
    /**
     * register
     */
    soc_reg_t reg;
} dnx_data_adapter_reg_mem_access_clear_on_read_regs_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_adapter_reg_mem_access_feature_nof
} dnx_data_adapter_reg_mem_access_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_adapter_reg_mem_access_feature_get_f) (
    int unit,
    dnx_data_adapter_reg_mem_access_feature_e feature);

/**
 * \brief returns numeric data of do_collect_enable
 * Module - 'adapter', Submodule - 'reg_mem_access', data - 'do_collect_enable'
 * Use do_collect in adapter in order to collect writes into one bulk write.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     do_collect_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_adapter_reg_mem_access_do_collect_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of cmic_block_index
 * Module - 'adapter', Submodule - 'reg_mem_access', data - 'cmic_block_index'
 * CMIC Block index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmic_block_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_adapter_reg_mem_access_cmic_block_index_get_f) (
    int unit);

/**
 * \brief returns numeric data of iproc_block_index
 * Module - 'adapter', Submodule - 'reg_mem_access', data - 'iproc_block_index'
 * IPROC Block index for Adapter Access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     iproc_block_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_adapter_reg_mem_access_iproc_block_index_get_f) (
    int unit);

/**
 * \brief returns numeric data of swap_core_index_zero_with_core_index
 * Module - 'adapter', Submodule - 'reg_mem_access', data - 'swap_core_index_zero_with_core_index'
 * swap core zero with other core index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     swap_core_index_zero_with_core_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_adapter_reg_mem_access_swap_core_index_zero_with_core_index_get_f) (
    int unit);

/**
 * \brief get table swap_core_ignore_map entry 
 * ignore swap core feature, for blocks in this map. the key is enum type soc_block_type_e
 * 
 * \param [in] unit - unit #
 * \param [in] block_type - HW block type
 * 
 * \return
 *     swap_core_ignore_map - returns the relevant entry values grouped in struct - see dnx_data_adapter_reg_mem_access_swap_core_ignore_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_adapter_reg_mem_access_swap_core_ignore_map_t *(
    *dnx_data_adapter_reg_mem_access_swap_core_ignore_map_get_f) (
    int unit,
    int block_type);

/**
 * \brief get table swap_core_ignore_map_by_global_block_ids_enum entry 
 * ignore swap core feature, for blocks in this map. same as swap_core_ignore_map, just different enum key type
 * 
 * \param [in] unit - unit #
 * \param [in] block_type - HW block type
 * 
 * \return
 *     swap_core_ignore_map_by_global_block_ids_enum - returns the relevant entry values grouped in struct - see dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_t *(
    *dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_get_f) (
    int unit,
    int block_type);

/**
 * \brief get table clear_on_read_mems entry 
 * memories which will be  operated in mode clear on read in adapter
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     clear_on_read_mems - returns the relevant entry values grouped in struct - see dnx_data_adapter_reg_mem_access_clear_on_read_mems_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_adapter_reg_mem_access_clear_on_read_mems_t *(
    *dnx_data_adapter_reg_mem_access_clear_on_read_mems_get_f) (
    int unit,
    int index);

/**
 * \brief get table clear_on_read_regs entry 
 * registers which will be  operated in mode clear on read in adapter
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     clear_on_read_regs - returns the relevant entry values grouped in struct - see dnx_data_adapter_reg_mem_access_clear_on_read_regs_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_adapter_reg_mem_access_clear_on_read_regs_t *(
    *dnx_data_adapter_reg_mem_access_clear_on_read_regs_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ADAPTER - REG_MEM_ACCESS:
 * {
 */
/**
 * \brief Interface for adapter reg_mem_access data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_adapter_reg_mem_access_feature_get_f feature_get;
    /**
     * returns numeric data of do_collect_enable
     */
    dnx_data_adapter_reg_mem_access_do_collect_enable_get_f do_collect_enable_get;
    /**
     * returns numeric data of cmic_block_index
     */
    dnx_data_adapter_reg_mem_access_cmic_block_index_get_f cmic_block_index_get;
    /**
     * returns numeric data of iproc_block_index
     */
    dnx_data_adapter_reg_mem_access_iproc_block_index_get_f iproc_block_index_get;
    /**
     * returns numeric data of swap_core_index_zero_with_core_index
     */
    dnx_data_adapter_reg_mem_access_swap_core_index_zero_with_core_index_get_f swap_core_index_zero_with_core_index_get;
    /**
     * get table swap_core_ignore_map entry 
     */
    dnx_data_adapter_reg_mem_access_swap_core_ignore_map_get_f swap_core_ignore_map_get;
    /**
     * get general info table about table (for example key size)swap_core_ignore_map info
     */
    dnxc_data_table_info_get_f swap_core_ignore_map_info_get;
    /**
     * get table swap_core_ignore_map_by_global_block_ids_enum entry 
     */
    dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_get_f swap_core_ignore_map_by_global_block_ids_enum_get;
    /**
     * get general info table about table (for example key size)swap_core_ignore_map_by_global_block_ids_enum info
     */
    dnxc_data_table_info_get_f swap_core_ignore_map_by_global_block_ids_enum_info_get;
    /**
     * get table clear_on_read_mems entry 
     */
    dnx_data_adapter_reg_mem_access_clear_on_read_mems_get_f clear_on_read_mems_get;
    /**
     * get general info table about table (for example key size)clear_on_read_mems info
     */
    dnxc_data_table_info_get_f clear_on_read_mems_info_get;
    /**
     * get table clear_on_read_regs entry 
     */
    dnx_data_adapter_reg_mem_access_clear_on_read_regs_get_f clear_on_read_regs_get;
    /**
     * get general info table about table (for example key size)clear_on_read_regs info
     */
    dnxc_data_table_info_get_f clear_on_read_regs_info_get;
} dnx_data_if_adapter_reg_mem_access_t;

/*
 * }
 */

/*
 * SUBMODULE  - MDB:
 * Adapter mdb info
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule mdb table lookup_caller_id_mapping
 */
typedef struct
{
    int stage;
    int mdb;
    char *interface;
} dnx_data_adapter_mdb_lookup_caller_id_mapping_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_adapter_mdb_feature_nof
} dnx_data_adapter_mdb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_adapter_mdb_feature_get_f) (
    int unit,
    dnx_data_adapter_mdb_feature_e feature);

/**
 * \brief get table lookup_caller_id_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] caller_id - 
 * \param [in] stage_mdb_key - 
 * 
 * \return
 *     lookup_caller_id_mapping - returns the relevant entry values grouped in struct - see dnx_data_adapter_mdb_lookup_caller_id_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_adapter_mdb_lookup_caller_id_mapping_t *(
    *dnx_data_adapter_mdb_lookup_caller_id_mapping_get_f) (
    int unit,
    int caller_id,
    int stage_mdb_key);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ADAPTER - MDB:
 * {
 */
/**
 * \brief Interface for adapter mdb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_adapter_mdb_feature_get_f feature_get;
    /**
     * get table lookup_caller_id_mapping entry 
     */
    dnx_data_adapter_mdb_lookup_caller_id_mapping_get_f lookup_caller_id_mapping_get;
    /**
     * get general info table about table (for example key size)lookup_caller_id_mapping info
     */
    dnxc_data_table_info_get_f lookup_caller_id_mapping_info_get;
} dnx_data_if_adapter_mdb_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_ADAPTER:
 * {
 */
/**
 * \brief Interface for adapter data
 */
typedef struct
{
    /**
     * Interface for adapter tx data
     */
    dnx_data_if_adapter_tx_t tx;
    /**
     * Interface for adapter rx data
     */
    dnx_data_if_adapter_rx_t rx;
    /**
     * Interface for adapter general data
     */
    dnx_data_if_adapter_general_t general;
    /**
     * Interface for adapter reg_mem_access data
     */
    dnx_data_if_adapter_reg_mem_access_t reg_mem_access;
    /**
     * Interface for adapter mdb data
     */
    dnx_data_if_adapter_mdb_t mdb;
} dnx_data_if_adapter_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_adapter_t dnx_data_adapter;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_ADAPTER_H_*/
/* *INDENT-ON* */
