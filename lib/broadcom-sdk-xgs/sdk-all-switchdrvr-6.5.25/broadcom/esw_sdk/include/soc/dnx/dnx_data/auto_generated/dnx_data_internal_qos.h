/** \file dnx_data_internal_qos.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_QOS_H_
/*{*/
#define _DNX_DATA_INTERNAL_QOS_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_qos.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_qos_submodule_qos,
    dnx_data_qos_submodule_feature,

    /**
     * Must be last one!
     */
    _dnx_data_qos_submodule_nof
} dnx_data_qos_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE QOS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_qos_qos_feature_get(
    int unit,
    dnx_data_qos_qos_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_qos_qos_define_nof_ingress_profiles,
    dnx_data_qos_qos_define_nof_ingress_opcode_profiles,
    dnx_data_qos_qos_define_nof_ingress_ecn_profiles,
    dnx_data_qos_qos_define_nof_ingress_policer_profiles,
    dnx_data_qos_qos_define_nof_ingress_vlan_pcp_profiles,
    dnx_data_qos_qos_define_nof_egress_profiles,
    dnx_data_qos_qos_define_nof_egress_policer_profiles,
    dnx_data_qos_qos_define_nof_egress_mpls_php_profiles,
    dnx_data_qos_qos_define_nof_egress_opcode_profiles,
    dnx_data_qos_qos_define_nof_egress_php_opcode_profiles,
    dnx_data_qos_qos_define_nof_egress_ttl_pipe_profiles,
    dnx_data_qos_qos_define_nof_ingress_propagation_profiles,
    dnx_data_qos_qos_define_nof_ingress_ecn_opcode_profiles,
    dnx_data_qos_qos_define_nof_egress_network_qos_pipe_profiles,
    dnx_data_qos_qos_define_nof_egress_cos_profiles,
    dnx_data_qos_qos_define_packet_max_priority,
    dnx_data_qos_qos_define_packet_max_exp,
    dnx_data_qos_qos_define_packet_max_dscp,
    dnx_data_qos_qos_define_packet_max_cfi,
    dnx_data_qos_qos_define_packet_max_tc,
    dnx_data_qos_qos_define_packet_max_dp,
    dnx_data_qos_qos_define_packet_max_ecn,
    dnx_data_qos_qos_define_packet_max_egress_policer_offset,
    dnx_data_qos_qos_define_max_int_map_id,
    dnx_data_qos_qos_define_max_egress_var,
    dnx_data_qos_qos_define_ecn_bits_width,
    dnx_data_qos_qos_define_eei_mpls_ttl_profile,
    dnx_data_qos_qos_define_routing_dscp_preserve_mode,

    /**
     * Must be last one!
     */
    _dnx_data_qos_qos_define_nof
} dnx_data_qos_qos_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_ingress_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_profiles'
 * Number of ingress qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_ingress_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_ingress_opcode_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_opcode_profiles'
 * Number of ingress opcode qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_opcode_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_ingress_opcode_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_ingress_ecn_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_ecn_profiles'
 * Number of ingress ecn qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_ecn_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_ingress_ecn_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_ingress_policer_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_policer_profiles'
 * Number of ingress policer qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_policer_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_ingress_policer_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_ingress_vlan_pcp_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_vlan_pcp_profiles'
 * Number of ingress vlan pcp qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_vlan_pcp_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_ingress_vlan_pcp_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_egress_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_profiles'
 * Number of egress qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_egress_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_egress_policer_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_policer_profiles'
 * Number of egress policer qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_policer_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_egress_policer_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_egress_mpls_php_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_mpls_php_profiles'
 * Number of egress mpls php qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_mpls_php_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_egress_mpls_php_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_egress_opcode_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_opcode_profiles'
 * Number of egress opcode qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_opcode_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_egress_opcode_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_egress_php_opcode_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_php_opcode_profiles'
 * Number of egress php opcode qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_php_opcode_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_egress_php_opcode_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_egress_ttl_pipe_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_ttl_pipe_profiles'
 * Number of egress ttl qos pipe profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_ttl_pipe_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_egress_ttl_pipe_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_ingress_propagation_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_propagation_profiles'
 * Number of propagation profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_propagation_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_ingress_propagation_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_ingress_ecn_opcode_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_ecn_opcode_profiles'
 * Number of ingress ecn opcode profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_ecn_opcode_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_ingress_ecn_opcode_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_egress_network_qos_pipe_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_network_qos_pipe_profiles'
 * Number of network_qos profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_network_qos_pipe_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_egress_network_qos_pipe_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_egress_cos_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_cos_profiles'
 * Number of egress cos profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_cos_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_nof_egress_cos_profiles_get(
    int unit);

/**
 * \brief returns define data of packet_max_priority
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_priority'
 * QOS Max priority for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_priority - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_packet_max_priority_get(
    int unit);

/**
 * \brief returns define data of packet_max_exp
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_exp'
 * QOS Max exp for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_exp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_packet_max_exp_get(
    int unit);

/**
 * \brief returns define data of packet_max_dscp
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_dscp'
 * QOS Max dscp for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_dscp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_packet_max_dscp_get(
    int unit);

/**
 * \brief returns define data of packet_max_cfi
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_cfi'
 * QOS Max cfi for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_cfi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_packet_max_cfi_get(
    int unit);

/**
 * \brief returns define data of packet_max_tc
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_tc'
 * QOS Max tc for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_tc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_packet_max_tc_get(
    int unit);

/**
 * \brief returns define data of packet_max_dp
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_dp'
 * QOS Max dp for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_dp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_packet_max_dp_get(
    int unit);

/**
 * \brief returns define data of packet_max_ecn
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_ecn'
 * QOS Max ecn for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_ecn - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_packet_max_ecn_get(
    int unit);

/**
 * \brief returns define data of packet_max_egress_policer_offset
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_egress_policer_offset'
 * QOS egress policer max offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_egress_policer_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_packet_max_egress_policer_offset_get(
    int unit);

/**
 * \brief returns define data of max_int_map_id
 * Module - 'qos', Submodule - 'qos', data - 'max_int_map_id'
 * QOS Max int map id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_int_map_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_max_int_map_id_get(
    int unit);

/**
 * \brief returns define data of max_egress_var
 * Module - 'qos', Submodule - 'qos', data - 'max_egress_var'
 * QOS Max egress var
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_egress_var - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_max_egress_var_get(
    int unit);

/**
 * \brief returns define data of ecn_bits_width
 * Module - 'qos', Submodule - 'qos', data - 'ecn_bits_width'
 * QOS ecn bits width
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecn_bits_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_ecn_bits_width_get(
    int unit);

/**
 * \brief returns define data of eei_mpls_ttl_profile
 * Module - 'qos', Submodule - 'qos', data - 'eei_mpls_ttl_profile'
 * TTL profile used by EEI.MPLS when TTL model is pipe
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eei_mpls_ttl_profile - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_eei_mpls_ttl_profile_get(
    int unit);

/**
 * \brief returns numeric data of routing_dscp_preserve_mode
 * Module - 'qos', Submodule - 'qos', data - 'routing_dscp_preserve_mode'
 * DSCP preserve modes in routing case.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     routing_dscp_preserve_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_qos_routing_dscp_preserve_mode_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_qos_qos_table_nof
} dnx_data_qos_qos_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE FEATURE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_qos_feature_feature_get(
    int unit,
    dnx_data_qos_feature_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_qos_feature_define_phb_rm_ffc_bits_width,

    /**
     * Must be last one!
     */
    _dnx_data_qos_feature_define_nof
} dnx_data_qos_feature_define_e;

/* Get Data */
/**
 * \brief returns define data of phb_rm_ffc_bits_width
 * Module - 'qos', Submodule - 'feature', data - 'phb_rm_ffc_bits_width'
 * phb and remark ffc bits width
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phb_rm_ffc_bits_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_qos_feature_phb_rm_ffc_bits_width_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_qos_feature_table_nof
} dnx_data_qos_feature_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_qos_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_QOS_H_*/
/* *INDENT-ON* */
