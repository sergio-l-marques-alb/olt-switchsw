/** \file dnx_data_flow.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_FLOW_H_
/*{*/
#define _DNX_DATA_FLOW_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dbal/auto_generated/dbal_defines_fields.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_flow.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_flow
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_flow_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * general info
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_flow_general_is_tests_supported,
    /**
     * Flow Module is used to determine if service_type will use uts cb or will use a dedicated logic
     */
    dnx_data_flow_general_is_inlif_profile_dedicated_logic_enabled,

    /**
     * Must be last one!
     */
    _dnx_data_flow_general_feature_nof
} dnx_data_flow_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_general_feature_get_f) (
    int unit,
    dnx_data_flow_general_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - GENERAL:
 * {
 */
/**
 * \brief Interface for flow general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_general_feature_get_f feature_get;
} dnx_data_if_flow_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - IPV4:
 * IPV4 tunnel data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_flow_ipv4_feature_nof
} dnx_data_flow_ipv4_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_ipv4_feature_get_f) (
    int unit,
    dnx_data_flow_ipv4_feature_e feature);

/**
 * \brief returns numeric data of use_flow_lif_init
 * Module - 'flow', Submodule - 'ipv4', data - 'use_flow_lif_init'
 * Use flow lif to configure init tunnels
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     use_flow_lif_init - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_flow_ipv4_use_flow_lif_init_get_f) (
    int unit);

/**
 * \brief returns numeric data of use_flow_lif_term
 * Module - 'flow', Submodule - 'ipv4', data - 'use_flow_lif_term'
 * Use flow lif to configure term tunnels
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     use_flow_lif_term - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_flow_ipv4_use_flow_lif_term_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - IPV4:
 * {
 */
/**
 * \brief Interface for flow ipv4 data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_ipv4_feature_get_f feature_get;
    /**
     * returns numeric data of use_flow_lif_init
     */
    dnx_data_flow_ipv4_use_flow_lif_init_get_f use_flow_lif_init_get;
    /**
     * returns numeric data of use_flow_lif_term
     */
    dnx_data_flow_ipv4_use_flow_lif_term_get_f use_flow_lif_term_get;
} dnx_data_if_flow_ipv4_t;

/*
 * }
 */

/*
 * SUBMODULE  - SRV6:
 * SRV6 tunnel data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Use flow lif to configure init tunnels
     */
    dnx_data_flow_srv6_use_flow_lif_init,
    /**
     * Use flow lif to configure term tunnels
     */
    dnx_data_flow_srv6_use_flow_lif_term,

    /**
     * Must be last one!
     */
    _dnx_data_flow_srv6_feature_nof
} dnx_data_flow_srv6_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_srv6_feature_get_f) (
    int unit,
    dnx_data_flow_srv6_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - SRV6:
 * {
 */
/**
 * \brief Interface for flow srv6 data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_srv6_feature_get_f feature_get;
} dnx_data_if_flow_srv6_t;

/*
 * }
 */

/*
 * SUBMODULE  - IN_LIF:
 * In LIF data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Use flow to configure In LIF.
     */
    dnx_data_flow_in_lif_flow_in_use,

    /**
     * Must be last one!
     */
    _dnx_data_flow_in_lif_feature_nof
} dnx_data_flow_in_lif_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_in_lif_feature_get_f) (
    int unit,
    dnx_data_flow_in_lif_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - IN_LIF:
 * {
 */
/**
 * \brief Interface for flow in_lif data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_in_lif_feature_get_f feature_get;
} dnx_data_if_flow_in_lif_t;

/*
 * }
 */

/*
 * SUBMODULE  - MPLS:
 * mpls flow data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * flow Module is used for allocating InLIFs
     */
    dnx_data_flow_mpls_ingress_flow_in_use,
    /**
     * flow Module is used for allocating OutLIFs
     */
    dnx_data_flow_mpls_egress_flow_in_use,

    /**
     * Must be last one!
     */
    _dnx_data_flow_mpls_feature_nof
} dnx_data_flow_mpls_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_mpls_feature_get_f) (
    int unit,
    dnx_data_flow_mpls_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - MPLS:
 * {
 */
/**
 * \brief Interface for flow mpls data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_mpls_feature_get_f feature_get;
} dnx_data_if_flow_mpls_t;

/*
 * }
 */

/*
 * SUBMODULE  - MPLS_PORT:
 * mpls port (vpls) flow data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * flow Module is used for allocating LIFs
     */
    dnx_data_flow_mpls_port_flow_in_use,

    /**
     * Must be last one!
     */
    _dnx_data_flow_mpls_port_feature_nof
} dnx_data_flow_mpls_port_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_mpls_port_feature_get_f) (
    int unit,
    dnx_data_flow_mpls_port_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - MPLS_PORT:
 * {
 */
/**
 * \brief Interface for flow mpls_port data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_mpls_port_feature_get_f feature_get;
} dnx_data_if_flow_mpls_port_t;

/*
 * }
 */

/*
 * SUBMODULE  - ARP:
 * arp flow data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * flow Module is used for allocating LIFs
     */
    dnx_data_flow_arp_flow_in_use,
    /**
     * Indication if virtual LIFs are supported for ARP
     */
    dnx_data_flow_arp_virtual_lif_support,

    /**
     * Must be last one!
     */
    _dnx_data_flow_arp_feature_nof
} dnx_data_flow_arp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_arp_feature_get_f) (
    int unit,
    dnx_data_flow_arp_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - ARP:
 * {
 */
/**
 * \brief Interface for flow arp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_arp_feature_get_f feature_get;
} dnx_data_if_flow_arp_t;

/*
 * }
 */

/*
 * SUBMODULE  - VLAN_PORT:
 * VLAN PORT data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Flow Module is used for allocating LIFs
     */
    dnx_data_flow_vlan_port_flow_in_use,

    /**
     * Must be last one!
     */
    _dnx_data_flow_vlan_port_feature_nof
} dnx_data_flow_vlan_port_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_vlan_port_feature_get_f) (
    int unit,
    dnx_data_flow_vlan_port_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - VLAN_PORT:
 * {
 */
/**
 * \brief Interface for flow vlan_port data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_vlan_port_feature_get_f feature_get;
} dnx_data_if_flow_vlan_port_t;

/*
 * }
 */

/*
 * SUBMODULE  - ALGO_GPM:
 * algo gpm definitions related to flow
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_flow_algo_gpm_feature_nof
} dnx_data_flow_algo_gpm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_algo_gpm_feature_get_f) (
    int unit,
    dnx_data_flow_algo_gpm_feature_e feature);

/**
 * \brief returns define data of flow_gport_in_use
 * Module - 'flow', Submodule - 'algo_gpm', data - 'flow_gport_in_use'
 * if true, all algo gpm db holds flow gport type and not legacy gport types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_gport_in_use - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_flow_algo_gpm_flow_gport_in_use_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - ALGO_GPM:
 * {
 */
/**
 * \brief Interface for flow algo_gpm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_algo_gpm_feature_get_f feature_get;
    /**
     * returns define data of flow_gport_in_use
     */
    dnx_data_flow_algo_gpm_flow_gport_in_use_get_f flow_gport_in_use_get;
} dnx_data_if_flow_algo_gpm_t;

/*
 * }
 */

/*
 * SUBMODULE  - WIDE_DATA:
 * wide data definitions related to flow
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Flow Module is used for setting wide data
     */
    dnx_data_flow_wide_data_flow_in_use,

    /**
     * Must be last one!
     */
    _dnx_data_flow_wide_data_feature_nof
} dnx_data_flow_wide_data_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_wide_data_feature_get_f) (
    int unit,
    dnx_data_flow_wide_data_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - WIDE_DATA:
 * {
 */
/**
 * \brief Interface for flow wide_data data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_wide_data_feature_get_f feature_get;
} dnx_data_if_flow_wide_data_t;

/*
 * }
 */

/*
 * SUBMODULE  - STAT_PP:
 * stat pp definitions related to flow
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Flow Module is used for setting stat pp using flow
     */
    dnx_data_flow_stat_pp_flow_in_use,

    /**
     * Must be last one!
     */
    _dnx_data_flow_stat_pp_feature_nof
} dnx_data_flow_stat_pp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_stat_pp_feature_get_f) (
    int unit,
    dnx_data_flow_stat_pp_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - STAT_PP:
 * {
 */
/**
 * \brief Interface for flow stat_pp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_stat_pp_feature_get_f feature_get;
} dnx_data_if_flow_stat_pp_t;

/*
 * }
 */

/*
 * SUBMODULE  - RCH:
 * rch definitions related to flow
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Flow Module is used for setting rch (l2_egress) using flow
     */
    dnx_data_flow_rch_flow_in_use,

    /**
     * Must be last one!
     */
    _dnx_data_flow_rch_feature_nof
} dnx_data_flow_rch_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_rch_feature_get_f) (
    int unit,
    dnx_data_flow_rch_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - RCH:
 * {
 */
/**
 * \brief Interface for flow rch data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_rch_feature_get_f feature_get;
} dnx_data_if_flow_rch_t;

/*
 * }
 */

/*
 * SUBMODULE  - TRAP:
 * trap definitions related to flow
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Flow Module is used for setting trap lif configuration
     */
    dnx_data_flow_trap_flow_in_use,

    /**
     * Must be last one!
     */
    _dnx_data_flow_trap_feature_nof
} dnx_data_flow_trap_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_trap_feature_get_f) (
    int unit,
    dnx_data_flow_trap_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - TRAP:
 * {
 */
/**
 * \brief Interface for flow trap data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_trap_feature_get_f feature_get;
} dnx_data_if_flow_trap_t;

/*
 * }
 */

/*
 * SUBMODULE  - REFLECTOR:
 * reflector definitions related to flow
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Flow Module is used for setting reflector lif configuration
     */
    dnx_data_flow_reflector_flow_in_use,

    /**
     * Must be last one!
     */
    _dnx_data_flow_reflector_feature_nof
} dnx_data_flow_reflector_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_flow_reflector_feature_get_f) (
    int unit,
    dnx_data_flow_reflector_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FLOW - REFLECTOR:
 * {
 */
/**
 * \brief Interface for flow reflector data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_flow_reflector_feature_get_f feature_get;
} dnx_data_if_flow_reflector_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_FLOW:
 * {
 */
/**
 * \brief Interface for flow data
 */
typedef struct
{
    /**
     * Interface for flow general data
     */
    dnx_data_if_flow_general_t general;
    /**
     * Interface for flow ipv4 data
     */
    dnx_data_if_flow_ipv4_t ipv4;
    /**
     * Interface for flow srv6 data
     */
    dnx_data_if_flow_srv6_t srv6;
    /**
     * Interface for flow in_lif data
     */
    dnx_data_if_flow_in_lif_t in_lif;
    /**
     * Interface for flow mpls data
     */
    dnx_data_if_flow_mpls_t mpls;
    /**
     * Interface for flow mpls_port data
     */
    dnx_data_if_flow_mpls_port_t mpls_port;
    /**
     * Interface for flow arp data
     */
    dnx_data_if_flow_arp_t arp;
    /**
     * Interface for flow vlan_port data
     */
    dnx_data_if_flow_vlan_port_t vlan_port;
    /**
     * Interface for flow algo_gpm data
     */
    dnx_data_if_flow_algo_gpm_t algo_gpm;
    /**
     * Interface for flow wide_data data
     */
    dnx_data_if_flow_wide_data_t wide_data;
    /**
     * Interface for flow stat_pp data
     */
    dnx_data_if_flow_stat_pp_t stat_pp;
    /**
     * Interface for flow rch data
     */
    dnx_data_if_flow_rch_t rch;
    /**
     * Interface for flow trap data
     */
    dnx_data_if_flow_trap_t trap;
    /**
     * Interface for flow reflector data
     */
    dnx_data_if_flow_reflector_t reflector;
} dnx_data_if_flow_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_flow_t dnx_data_flow;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_FLOW_H_*/
/* *INDENT-ON* */
