/** \file dnx_data_internal_mdb.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_MDB_H_
/*{*/
#define _DNX_DATA_INTERNAL_MDB_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_mdb.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_mdb_submodule_global,
    dnx_data_mdb_submodule_dh,
    dnx_data_mdb_submodule_pdbs,
    dnx_data_mdb_submodule_em,
    dnx_data_mdb_submodule_direct,
    dnx_data_mdb_submodule_eedb,
    dnx_data_mdb_submodule_kaps,
    dnx_data_mdb_submodule_feature,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_submodule_nof
} dnx_data_mdb_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GLOBAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_mdb_global_feature_get(
    int unit,
    dnx_data_mdb_global_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_mdb_global_define_utilization_api_nof_dbs,
    dnx_data_mdb_global_define_adapter_stub_enable,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_global_define_nof
} dnx_data_mdb_global_define_e;

/* Get Data */
/**
 * \brief returns define data of utilization_api_nof_dbs
 * Module - 'mdb', Submodule - 'global', data - 'utilization_api_nof_dbs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     utilization_api_nof_dbs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_global_utilization_api_nof_dbs_get(
    int unit);

/**
 * \brief returns numeric data of adapter_stub_enable
 * Module - 'mdb', Submodule - 'global', data - 'adapter_stub_enable'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     adapter_stub_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_global_adapter_stub_enable_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_mdb_global_table_nof
} dnx_data_mdb_global_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE DH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_mdb_dh_feature_get(
    int unit,
    dnx_data_mdb_dh_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_mdb_dh_define_total_nof_macroes,
    dnx_data_mdb_dh_define_total_nof_macroes_plus_em_ovf_or_eedb_bank,
    dnx_data_mdb_dh_define_total_nof_macroes_plus_data_width,
    dnx_data_mdb_dh_define_max_nof_cluster_interfaces,
    dnx_data_mdb_dh_define_max_nof_clusters,
    dnx_data_mdb_dh_define_max_nof_db_clusters,
    dnx_data_mdb_dh_define_nof_bucket_clusters,
    dnx_data_mdb_dh_define_nof_buckets_in_macro,
    dnx_data_mdb_dh_define_nof_pair_clusters,
    dnx_data_mdb_dh_define_nof_data_rows_per_hitbit_row,
    dnx_data_mdb_dh_define_nof_ddha_blocks,
    dnx_data_mdb_dh_define_nof_ddhb_blocks,
    dnx_data_mdb_dh_define_nof_dhc_blocks,
    dnx_data_mdb_dh_define_nof_ddhc_blocks,
    dnx_data_mdb_dh_define_nof_ddhx_blocks,
    dnx_data_mdb_dh_define_cluster_row_width_bits,
    dnx_data_mdb_dh_define_cluster_row_width_uint32,
    dnx_data_mdb_dh_define_data_out_granularity,
    dnx_data_mdb_dh_define_bpu_setup_bb_connected,
    dnx_data_mdb_dh_define_bpu_setup_size_120_240_120,
    dnx_data_mdb_dh_define_bpu_setup_size_480_odd,
    dnx_data_mdb_dh_define_bpu_setup_size_480,
    dnx_data_mdb_dh_define_bpu_setup_size_360_120,
    dnx_data_mdb_dh_define_bpu_setup_size_120_360,
    dnx_data_mdb_dh_define_bpu_setup_size_240_240,
    dnx_data_mdb_dh_define_bpu_setup_size_120_120_240,
    dnx_data_mdb_dh_define_bpu_setup_size_240_120_120,
    dnx_data_mdb_dh_define_bpu_setup_size_120_120_120_120,
    dnx_data_mdb_dh_define_ddha_dynamic_memory_access_dpc,
    dnx_data_mdb_dh_define_nof_fec_macro_types,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_dh_define_nof
} dnx_data_mdb_dh_define_e;

/* Get Data */
/**
 * \brief returns define data of total_nof_macroes
 * Module - 'mdb', Submodule - 'dh', data - 'total_nof_macroes'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_macroes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_total_nof_macroes_get(
    int unit);

/**
 * \brief returns define data of total_nof_macroes_plus_em_ovf_or_eedb_bank
 * Module - 'mdb', Submodule - 'dh', data - 'total_nof_macroes_plus_em_ovf_or_eedb_bank'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_macroes_plus_em_ovf_or_eedb_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_total_nof_macroes_plus_em_ovf_or_eedb_bank_get(
    int unit);

/**
 * \brief returns define data of total_nof_macroes_plus_data_width
 * Module - 'mdb', Submodule - 'dh', data - 'total_nof_macroes_plus_data_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_macroes_plus_data_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_total_nof_macroes_plus_data_width_get(
    int unit);

/**
 * \brief returns define data of max_nof_cluster_interfaces
 * Module - 'mdb', Submodule - 'dh', data - 'max_nof_cluster_interfaces'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_cluster_interfaces - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_max_nof_cluster_interfaces_get(
    int unit);

/**
 * \brief returns define data of max_nof_clusters
 * Module - 'mdb', Submodule - 'dh', data - 'max_nof_clusters'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_clusters - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_max_nof_clusters_get(
    int unit);

/**
 * \brief returns define data of max_nof_db_clusters
 * Module - 'mdb', Submodule - 'dh', data - 'max_nof_db_clusters'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_db_clusters - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_max_nof_db_clusters_get(
    int unit);

/**
 * \brief returns define data of nof_bucket_clusters
 * Module - 'mdb', Submodule - 'dh', data - 'nof_bucket_clusters'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bucket_clusters - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_bucket_clusters_get(
    int unit);

/**
 * \brief returns define data of nof_buckets_in_macro
 * Module - 'mdb', Submodule - 'dh', data - 'nof_buckets_in_macro'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_buckets_in_macro - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_buckets_in_macro_get(
    int unit);

/**
 * \brief returns define data of nof_pair_clusters
 * Module - 'mdb', Submodule - 'dh', data - 'nof_pair_clusters'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pair_clusters - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_pair_clusters_get(
    int unit);

/**
 * \brief returns define data of nof_data_rows_per_hitbit_row
 * Module - 'mdb', Submodule - 'dh', data - 'nof_data_rows_per_hitbit_row'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_data_rows_per_hitbit_row - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_data_rows_per_hitbit_row_get(
    int unit);

/**
 * \brief returns define data of nof_ddha_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_ddha_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ddha_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_ddha_blocks_get(
    int unit);

/**
 * \brief returns define data of nof_ddhb_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_ddhb_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ddhb_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_ddhb_blocks_get(
    int unit);

/**
 * \brief returns define data of nof_dhc_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_dhc_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dhc_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_dhc_blocks_get(
    int unit);

/**
 * \brief returns define data of nof_ddhc_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_ddhc_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ddhc_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_ddhc_blocks_get(
    int unit);

/**
 * \brief returns define data of nof_ddhx_blocks
 * Module - 'mdb', Submodule - 'dh', data - 'nof_ddhx_blocks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ddhx_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_ddhx_blocks_get(
    int unit);

/**
 * \brief returns define data of cluster_row_width_bits
 * Module - 'mdb', Submodule - 'dh', data - 'cluster_row_width_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cluster_row_width_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_cluster_row_width_bits_get(
    int unit);

/**
 * \brief returns define data of cluster_row_width_uint32
 * Module - 'mdb', Submodule - 'dh', data - 'cluster_row_width_uint32'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cluster_row_width_uint32 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_cluster_row_width_uint32_get(
    int unit);

/**
 * \brief returns define data of data_out_granularity
 * Module - 'mdb', Submodule - 'dh', data - 'data_out_granularity'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_out_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_data_out_granularity_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_bb_connected
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_bb_connected'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_bb_connected - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_bb_connected_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_size_120_240_120
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_120_240_120'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_120_240_120 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_size_120_240_120_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_size_480_odd
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_480_odd'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_480_odd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_size_480_odd_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_size_480
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_480'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_480 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_size_480_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_size_360_120
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_360_120'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_360_120 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_size_360_120_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_size_120_360
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_120_360'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_120_360 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_size_120_360_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_size_240_240
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_240_240'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_240_240 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_size_240_240_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_size_120_120_240
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_120_120_240'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_120_120_240 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_size_120_120_240_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_size_240_120_120
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_240_120_120'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_240_120_120 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_size_240_120_120_get(
    int unit);

/**
 * \brief returns define data of bpu_setup_size_120_120_120_120
 * Module - 'mdb', Submodule - 'dh', data - 'bpu_setup_size_120_120_120_120'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bpu_setup_size_120_120_120_120 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_bpu_setup_size_120_120_120_120_get(
    int unit);

/**
 * \brief returns define data of ddha_dynamic_memory_access_dpc
 * Module - 'mdb', Submodule - 'dh', data - 'ddha_dynamic_memory_access_dpc'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ddha_dynamic_memory_access_dpc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_ddha_dynamic_memory_access_dpc_get(
    int unit);

/**
 * \brief returns define data of nof_fec_macro_types
 * Module - 'mdb', Submodule - 'dh', data - 'nof_fec_macro_types'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fec_macro_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_dh_nof_fec_macro_types_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_mdb_dh_table_dh_info,
    dnx_data_mdb_dh_table_block_info,
    dnx_data_mdb_dh_table_logical_macro_info,
    dnx_data_mdb_dh_table_macro_type_info,
    dnx_data_mdb_dh_table_mdb_75_macro_halved,
    dnx_data_mdb_dh_table_entry_banks_info,
    dnx_data_mdb_dh_table_mdb_1_info,
    dnx_data_mdb_dh_table_mdb_2_info,
    dnx_data_mdb_dh_table_mdb_3_info,
    dnx_data_mdb_dh_table_mdb_fec_macro_types_info,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_dh_table_nof
} dnx_data_mdb_dh_table_e;

/* Get Data */
/**
 * \brief get table dh_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     dh_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_dh_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_dh_info_t * dnx_data_mdb_dh_dh_info_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table block_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     block_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_block_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_block_info_t * dnx_data_mdb_dh_block_info_get(
    int unit,
    int global_macro_index);

/**
 * \brief get table logical_macro_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     logical_macro_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_logical_macro_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_logical_macro_info_t * dnx_data_mdb_dh_logical_macro_info_get(
    int unit,
    int global_macro_index);

/**
 * \brief get table macro_type_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] macro_type - 
 * 
 * \return
 *     macro_type_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_macro_type_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_macro_type_info_t * dnx_data_mdb_dh_macro_type_info_get(
    int unit,
    int macro_type);

/**
 * \brief get table mdb_75_macro_halved entry 
 * 
 * \param [in] unit - unit #
 * \param [in] macro_index - 
 * 
 * \return
 *     mdb_75_macro_halved - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_75_macro_halved_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_mdb_75_macro_halved_t * dnx_data_mdb_dh_mdb_75_macro_halved_get(
    int unit,
    int macro_index);

/**
 * \brief get table entry_banks_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     entry_banks_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_entry_banks_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_entry_banks_info_t * dnx_data_mdb_dh_entry_banks_info_get(
    int unit,
    int global_macro_index);

/**
 * \brief get table mdb_1_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     mdb_1_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_1_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_mdb_1_info_t * dnx_data_mdb_dh_mdb_1_info_get(
    int unit,
    int global_macro_index);

/**
 * \brief get table mdb_2_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     mdb_2_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_2_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_mdb_2_info_t * dnx_data_mdb_dh_mdb_2_info_get(
    int unit,
    int global_macro_index);

/**
 * \brief get table mdb_3_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] global_macro_index - 
 * 
 * \return
 *     mdb_3_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_3_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_mdb_3_info_t * dnx_data_mdb_dh_mdb_3_info_get(
    int unit,
    int global_macro_index);

/**
 * \brief get table mdb_fec_macro_types_info entry 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_fec_macro_types_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_dh_mdb_fec_macro_types_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_dh_mdb_fec_macro_types_info_t * dnx_data_mdb_dh_mdb_fec_macro_types_info_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'dh_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_dh_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'block_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_block_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'logical_macro_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_logical_macro_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'macro_type_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_macro_type_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'mdb_75_macro_halved'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_mdb_75_macro_halved_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'entry_banks_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_entry_banks_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'mdb_1_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_mdb_1_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'mdb_2_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_mdb_2_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'mdb_3_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_mdb_3_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'dh', table - 'mdb_fec_macro_types_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_dh_mdb_fec_macro_types_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)dh_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dh_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_dh_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)block_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_block_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)logical_macro_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     logical_macro_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_logical_macro_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)macro_type_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     macro_type_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_macro_type_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_75_macro_halved info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_75_macro_halved - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_mdb_75_macro_halved_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)entry_banks_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     entry_banks_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_entry_banks_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_1_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_1_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_mdb_1_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_2_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_2_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_mdb_2_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_3_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_3_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_mdb_3_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_fec_macro_types_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_fec_macro_types_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_dh_mdb_fec_macro_types_info_info_get(
    int unit);

/*
 * SUBMODULE PDBS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_mdb_pdbs_feature_get(
    int unit,
    dnx_data_mdb_pdbs_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_mdb_pdbs_define_max_nof_interface_dhs,
    dnx_data_mdb_pdbs_define_mesh_mode_support,
    dnx_data_mdb_pdbs_define_max_key_size,
    dnx_data_mdb_pdbs_define_max_payload_size,
    dnx_data_mdb_pdbs_define_table_mdb_9_mdb_item_1_array_size,
    dnx_data_mdb_pdbs_define_table_mdb_9_mdb_item_2_array_size,
    dnx_data_mdb_pdbs_define_table_mdb_9_mdb_item_3_array_size,
    dnx_data_mdb_pdbs_define_table_mdb_40_mdb_item_0_array_size,
    dnx_data_mdb_pdbs_define_table_mdb_dynamic_memory_access_memory_access_field_size,
    dnx_data_mdb_pdbs_define_table_mdb_mact_dynamic_memory_access_memory_access_field_size,
    dnx_data_mdb_pdbs_define_table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size,
    dnx_data_mdb_pdbs_define_table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size,
    dnx_data_mdb_pdbs_define_table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size,
    dnx_data_mdb_pdbs_define_table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size,
    dnx_data_mdb_pdbs_define_table_mdb_ddhb_dynamic_memory_access_memory_access_field_size,
    dnx_data_mdb_pdbs_define_mdb_nof_profiles,
    dnx_data_mdb_pdbs_define_adapter_mapping_crps_id,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_pdbs_define_nof
} dnx_data_mdb_pdbs_define_e;

/* Get Data */
/**
 * \brief returns define data of max_nof_interface_dhs
 * Module - 'mdb', Submodule - 'pdbs', data - 'max_nof_interface_dhs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_interface_dhs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_max_nof_interface_dhs_get(
    int unit);

/**
 * \brief returns define data of mesh_mode_support
 * Module - 'mdb', Submodule - 'pdbs', data - 'mesh_mode_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mesh_mode_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_mesh_mode_support_get(
    int unit);

/**
 * \brief returns define data of max_key_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'max_key_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_key_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_max_key_size_get(
    int unit);

/**
 * \brief returns define data of max_payload_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'max_payload_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_payload_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_max_payload_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_9_mdb_item_1_array_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_9_mdb_item_1_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_9_mdb_item_1_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_9_mdb_item_1_array_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_9_mdb_item_2_array_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_9_mdb_item_2_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_9_mdb_item_2_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_9_mdb_item_2_array_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_9_mdb_item_3_array_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_9_mdb_item_3_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_9_mdb_item_3_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_9_mdb_item_3_array_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_40_mdb_item_0_array_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_40_mdb_item_0_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_40_mdb_item_0_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_40_mdb_item_0_array_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_dynamic_memory_access_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_dynamic_memory_access_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_dynamic_memory_access_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_dynamic_memory_access_memory_access_field_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_mact_dynamic_memory_access_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_mact_dynamic_memory_access_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_mact_dynamic_memory_access_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_mact_dynamic_memory_access_memory_access_field_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_kaps_dynamic_memory_access_sbc_memory_access_field_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_kaps_dynamic_memory_access_dpc_memory_access_field_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_ddha_dynamic_memory_access_sbc_memory_access_field_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_ddha_dynamic_memory_access_dpc_memory_access_field_size_get(
    int unit);

/**
 * \brief returns define data of table_mdb_ddhb_dynamic_memory_access_memory_access_field_size
 * Module - 'mdb', Submodule - 'pdbs', data - 'table_mdb_ddhb_dynamic_memory_access_memory_access_field_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_mdb_ddhb_dynamic_memory_access_memory_access_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_table_mdb_ddhb_dynamic_memory_access_memory_access_field_size_get(
    int unit);

/**
 * \brief returns define data of mdb_nof_profiles
 * Module - 'mdb', Submodule - 'pdbs', data - 'mdb_nof_profiles'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_mdb_nof_profiles_get(
    int unit);

/**
 * \brief returns numeric data of adapter_mapping_crps_id
 * Module - 'mdb', Submodule - 'pdbs', data - 'adapter_mapping_crps_id'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     adapter_mapping_crps_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_pdbs_adapter_mapping_crps_id_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_mdb_pdbs_table_mdb_profile,
    dnx_data_mdb_pdbs_table_mdb_profiles_info,
    dnx_data_mdb_pdbs_table_mdb_profile_kaps_cfg,
    dnx_data_mdb_pdbs_table_mdb_profile_table_str_mapping,
    dnx_data_mdb_pdbs_table_dbal_vmv_str_mapping,
    dnx_data_mdb_pdbs_table_mdb_pdb_info,
    dnx_data_mdb_pdbs_table_dbal_pdb_info,
    dnx_data_mdb_pdbs_table_mdb_adapter_mapping,
    dnx_data_mdb_pdbs_table_fec_physical_dbs_alloc_info,
    dnx_data_mdb_pdbs_table_mdb_51_info,
    dnx_data_mdb_pdbs_table_mdb_53_info,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_pdbs_table_nof
} dnx_data_mdb_pdbs_table_e;

/* Get Data */
/**
 * \brief get table mdb_profile entry 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_profile - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_profile_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_mdb_profile_t * dnx_data_mdb_pdbs_mdb_profile_get(
    int unit);

/**
 * \brief get table mdb_profiles_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_profile_index - 
 * 
 * \return
 *     mdb_profiles_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_profiles_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_mdb_profiles_info_t * dnx_data_mdb_pdbs_mdb_profiles_info_get(
    int unit,
    int mdb_profile_index);

/**
 * \brief get table mdb_profile_kaps_cfg entry 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_profile_kaps_cfg - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_t * dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_get(
    int unit);

/**
 * \brief get table mdb_profile_table_str_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_profile_table_str_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_t * dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table dbal_vmv_str_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_table_id - 
 * 
 * \return
 *     dbal_vmv_str_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_dbal_vmv_str_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_dbal_vmv_str_mapping_t * dnx_data_mdb_pdbs_dbal_vmv_str_mapping_get(
    int unit,
    int dbal_table_id);

/**
 * \brief get table mdb_pdb_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_pdb_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_pdb_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_mdb_pdb_info_t * dnx_data_mdb_pdbs_mdb_pdb_info_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table dbal_pdb_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     dbal_pdb_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_dbal_pdb_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_dbal_pdb_info_t * dnx_data_mdb_pdbs_dbal_pdb_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_adapter_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_adapter_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_adapter_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_mdb_adapter_mapping_t * dnx_data_mdb_pdbs_mdb_adapter_mapping_get(
    int unit,
    int dbal_id);

/**
 * \brief get table fec_physical_dbs_alloc_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] fec_physical_db - 
 * 
 * \return
 *     fec_physical_dbs_alloc_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_t * dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_get(
    int unit,
    int fec_physical_db);

/**
 * \brief get table mdb_51_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_51_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_51_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_mdb_51_info_t * dnx_data_mdb_pdbs_mdb_51_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_53_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table - 
 * 
 * \return
 *     mdb_53_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_pdbs_mdb_53_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_pdbs_mdb_53_info_t * dnx_data_mdb_pdbs_mdb_53_info_get(
    int unit,
    int mdb_table);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'mdb_profile'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_mdb_profile_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'mdb_profiles_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_mdb_profiles_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'mdb_profile_kaps_cfg'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'mdb_profile_table_str_mapping'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'dbal_vmv_str_mapping'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_dbal_vmv_str_mapping_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'mdb_pdb_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_mdb_pdb_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'dbal_pdb_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_dbal_pdb_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'mdb_adapter_mapping'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_mdb_adapter_mapping_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'fec_physical_dbs_alloc_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'mdb_51_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_mdb_51_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'pdbs', table - 'mdb_53_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_pdbs_mdb_53_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)mdb_profile info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_profile - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_mdb_profile_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_profiles_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_profiles_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_mdb_profiles_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_profile_kaps_cfg info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_profile_kaps_cfg - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_mdb_profile_kaps_cfg_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_profile_table_str_mapping info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_profile_table_str_mapping - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_mdb_profile_table_str_mapping_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)dbal_vmv_str_mapping info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dbal_vmv_str_mapping - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_dbal_vmv_str_mapping_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_pdb_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_pdb_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_mdb_pdb_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)dbal_pdb_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dbal_pdb_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_dbal_pdb_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_adapter_mapping info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_adapter_mapping - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_mdb_adapter_mapping_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)fec_physical_dbs_alloc_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_physical_dbs_alloc_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_fec_physical_dbs_alloc_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_51_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_51_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_mdb_51_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_53_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_53_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_pdbs_mdb_53_info_info_get(
    int unit);

/*
 * SUBMODULE EM:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_mdb_em_feature_get(
    int unit,
    dnx_data_mdb_em_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_mdb_em_define_age_row_size_bits,
    dnx_data_mdb_em_define_age_ovfcam_row_size_bits,
    dnx_data_mdb_em_define_ovf_cam_max_size,
    dnx_data_mdb_em_define_age_support_per_entry_size_ratio,
    dnx_data_mdb_em_define_flush_tcam_rule_counter_support,
    dnx_data_mdb_em_define_nof_aging_profiles,
    dnx_data_mdb_em_define_aging_profiles_size_in_bits,
    dnx_data_mdb_em_define_max_tid_size,
    dnx_data_mdb_em_define_max_nof_tids,
    dnx_data_mdb_em_define_flush_support_tids,
    dnx_data_mdb_em_define_flush_max_supported_key,
    dnx_data_mdb_em_define_flush_max_supported_key_plus_payload,
    dnx_data_mdb_em_define_dh_120_entry_encoding_nof_bits,
    dnx_data_mdb_em_define_dh_240_entry_encoding_nof_bits,
    dnx_data_mdb_em_define_format_granularity,
    dnx_data_mdb_em_define_max_nof_vmv_size,
    dnx_data_mdb_em_define_vmv_nof_values,
    dnx_data_mdb_em_define_nof_vmv_size_nof_bits,
    dnx_data_mdb_em_define_esem_nof_vmv_size,
    dnx_data_mdb_em_define_glem_nof_vmv_size,
    dnx_data_mdb_em_define_mact_nof_vmv_size,
    dnx_data_mdb_em_define_mact_max_payload_size,
    dnx_data_mdb_em_define_shift_vmv_max_size,
    dnx_data_mdb_em_define_shift_vmv_max_regs_per_table,
    dnx_data_mdb_em_define_min_nof_app_id_bits,
    dnx_data_mdb_em_define_max_nof_spn_sizes,
    dnx_data_mdb_em_define_nof_lfsr_sizes,
    dnx_data_mdb_em_define_nof_formats,
    dnx_data_mdb_em_define_defragmentation_priority_supported,
    dnx_data_mdb_em_define_disable_cuckoo_loop_detection_support,
    dnx_data_mdb_em_define_disable_cuckoo_hit_bit_sync,
    dnx_data_mdb_em_define_age_profile_per_ratio_support,
    dnx_data_mdb_em_define_flex_mag_supported,
    dnx_data_mdb_em_define_flex_fully_supported,
    dnx_data_mdb_em_define_step_table_max_size,
    dnx_data_mdb_em_define_nof_encoding_values,
    dnx_data_mdb_em_define_nof_encoding_types,
    dnx_data_mdb_em_define_extra_vmv_shift_registers,
    dnx_data_mdb_em_define_scan_bank_participate_in_cuckoo_support,
    dnx_data_mdb_em_define_scan_bank_participate_in_cuckoo_partial_support,
    dnx_data_mdb_em_define_sbus_error_code_support,
    dnx_data_mdb_em_define_nof_emp_tables,
    dnx_data_mdb_em_define_defrag_interrupt_support,
    dnx_data_mdb_em_define_glem_bypass_option_support,
    dnx_data_mdb_em_define_flush_max_supported_payload,
    dnx_data_mdb_em_define_flush_payload_max_bus,
    dnx_data_mdb_em_define_my_mac_ippa_em_dbal_id,
    dnx_data_mdb_em_define_my_mac_ippf_em_dbal_id,
    dnx_data_mdb_em_define_mact_dbal_id,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_em_define_nof
} dnx_data_mdb_em_define_e;

/* Get Data */
/**
 * \brief returns define data of age_row_size_bits
 * Module - 'mdb', Submodule - 'em', data - 'age_row_size_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age_row_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_age_row_size_bits_get(
    int unit);

/**
 * \brief returns define data of age_ovfcam_row_size_bits
 * Module - 'mdb', Submodule - 'em', data - 'age_ovfcam_row_size_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age_ovfcam_row_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_age_ovfcam_row_size_bits_get(
    int unit);

/**
 * \brief returns define data of ovf_cam_max_size
 * Module - 'mdb', Submodule - 'em', data - 'ovf_cam_max_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ovf_cam_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_ovf_cam_max_size_get(
    int unit);

/**
 * \brief returns define data of age_support_per_entry_size_ratio
 * Module - 'mdb', Submodule - 'em', data - 'age_support_per_entry_size_ratio'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age_support_per_entry_size_ratio - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_age_support_per_entry_size_ratio_get(
    int unit);

/**
 * \brief returns define data of flush_tcam_rule_counter_support
 * Module - 'mdb', Submodule - 'em', data - 'flush_tcam_rule_counter_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_tcam_rule_counter_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_flush_tcam_rule_counter_support_get(
    int unit);

/**
 * \brief returns define data of nof_aging_profiles
 * Module - 'mdb', Submodule - 'em', data - 'nof_aging_profiles'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_aging_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_nof_aging_profiles_get(
    int unit);

/**
 * \brief returns define data of aging_profiles_size_in_bits
 * Module - 'mdb', Submodule - 'em', data - 'aging_profiles_size_in_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     aging_profiles_size_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_aging_profiles_size_in_bits_get(
    int unit);

/**
 * \brief returns define data of max_tid_size
 * Module - 'mdb', Submodule - 'em', data - 'max_tid_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_tid_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_max_tid_size_get(
    int unit);

/**
 * \brief returns define data of max_nof_tids
 * Module - 'mdb', Submodule - 'em', data - 'max_nof_tids'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_tids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_max_nof_tids_get(
    int unit);

/**
 * \brief returns define data of flush_support_tids
 * Module - 'mdb', Submodule - 'em', data - 'flush_support_tids'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_support_tids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_flush_support_tids_get(
    int unit);

/**
 * \brief returns define data of flush_max_supported_key
 * Module - 'mdb', Submodule - 'em', data - 'flush_max_supported_key'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_max_supported_key - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_flush_max_supported_key_get(
    int unit);

/**
 * \brief returns define data of flush_max_supported_key_plus_payload
 * Module - 'mdb', Submodule - 'em', data - 'flush_max_supported_key_plus_payload'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_max_supported_key_plus_payload - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_flush_max_supported_key_plus_payload_get(
    int unit);

/**
 * \brief returns define data of dh_120_entry_encoding_nof_bits
 * Module - 'mdb', Submodule - 'em', data - 'dh_120_entry_encoding_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dh_120_entry_encoding_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_dh_120_entry_encoding_nof_bits_get(
    int unit);

/**
 * \brief returns define data of dh_240_entry_encoding_nof_bits
 * Module - 'mdb', Submodule - 'em', data - 'dh_240_entry_encoding_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dh_240_entry_encoding_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_dh_240_entry_encoding_nof_bits_get(
    int unit);

/**
 * \brief returns define data of format_granularity
 * Module - 'mdb', Submodule - 'em', data - 'format_granularity'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     format_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_format_granularity_get(
    int unit);

/**
 * \brief returns define data of max_nof_vmv_size
 * Module - 'mdb', Submodule - 'em', data - 'max_nof_vmv_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_vmv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_max_nof_vmv_size_get(
    int unit);

/**
 * \brief returns define data of vmv_nof_values
 * Module - 'mdb', Submodule - 'em', data - 'vmv_nof_values'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vmv_nof_values - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_vmv_nof_values_get(
    int unit);

/**
 * \brief returns define data of nof_vmv_size_nof_bits
 * Module - 'mdb', Submodule - 'em', data - 'nof_vmv_size_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_vmv_size_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_nof_vmv_size_nof_bits_get(
    int unit);

/**
 * \brief returns define data of esem_nof_vmv_size
 * Module - 'mdb', Submodule - 'em', data - 'esem_nof_vmv_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     esem_nof_vmv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_esem_nof_vmv_size_get(
    int unit);

/**
 * \brief returns define data of glem_nof_vmv_size
 * Module - 'mdb', Submodule - 'em', data - 'glem_nof_vmv_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     glem_nof_vmv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_glem_nof_vmv_size_get(
    int unit);

/**
 * \brief returns define data of mact_nof_vmv_size
 * Module - 'mdb', Submodule - 'em', data - 'mact_nof_vmv_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mact_nof_vmv_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_mact_nof_vmv_size_get(
    int unit);

/**
 * \brief returns define data of mact_max_payload_size
 * Module - 'mdb', Submodule - 'em', data - 'mact_max_payload_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mact_max_payload_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_mact_max_payload_size_get(
    int unit);

/**
 * \brief returns define data of shift_vmv_max_size
 * Module - 'mdb', Submodule - 'em', data - 'shift_vmv_max_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     shift_vmv_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_shift_vmv_max_size_get(
    int unit);

/**
 * \brief returns define data of shift_vmv_max_regs_per_table
 * Module - 'mdb', Submodule - 'em', data - 'shift_vmv_max_regs_per_table'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     shift_vmv_max_regs_per_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_shift_vmv_max_regs_per_table_get(
    int unit);

/**
 * \brief returns define data of min_nof_app_id_bits
 * Module - 'mdb', Submodule - 'em', data - 'min_nof_app_id_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_nof_app_id_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_min_nof_app_id_bits_get(
    int unit);

/**
 * \brief returns define data of max_nof_spn_sizes
 * Module - 'mdb', Submodule - 'em', data - 'max_nof_spn_sizes'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_spn_sizes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_max_nof_spn_sizes_get(
    int unit);

/**
 * \brief returns define data of nof_lfsr_sizes
 * Module - 'mdb', Submodule - 'em', data - 'nof_lfsr_sizes'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lfsr_sizes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_nof_lfsr_sizes_get(
    int unit);

/**
 * \brief returns define data of nof_formats
 * Module - 'mdb', Submodule - 'em', data - 'nof_formats'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_formats - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_nof_formats_get(
    int unit);

/**
 * \brief returns define data of defragmentation_priority_supported
 * Module - 'mdb', Submodule - 'em', data - 'defragmentation_priority_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     defragmentation_priority_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_defragmentation_priority_supported_get(
    int unit);

/**
 * \brief returns define data of disable_cuckoo_loop_detection_support
 * Module - 'mdb', Submodule - 'em', data - 'disable_cuckoo_loop_detection_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     disable_cuckoo_loop_detection_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_disable_cuckoo_loop_detection_support_get(
    int unit);

/**
 * \brief returns define data of disable_cuckoo_hit_bit_sync
 * Module - 'mdb', Submodule - 'em', data - 'disable_cuckoo_hit_bit_sync'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     disable_cuckoo_hit_bit_sync - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_disable_cuckoo_hit_bit_sync_get(
    int unit);

/**
 * \brief returns define data of age_profile_per_ratio_support
 * Module - 'mdb', Submodule - 'em', data - 'age_profile_per_ratio_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age_profile_per_ratio_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_age_profile_per_ratio_support_get(
    int unit);

/**
 * \brief returns define data of flex_mag_supported
 * Module - 'mdb', Submodule - 'em', data - 'flex_mag_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flex_mag_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_flex_mag_supported_get(
    int unit);

/**
 * \brief returns define data of flex_fully_supported
 * Module - 'mdb', Submodule - 'em', data - 'flex_fully_supported'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flex_fully_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_flex_fully_supported_get(
    int unit);

/**
 * \brief returns define data of step_table_max_size
 * Module - 'mdb', Submodule - 'em', data - 'step_table_max_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     step_table_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_step_table_max_size_get(
    int unit);

/**
 * \brief returns define data of nof_encoding_values
 * Module - 'mdb', Submodule - 'em', data - 'nof_encoding_values'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_encoding_values - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_nof_encoding_values_get(
    int unit);

/**
 * \brief returns define data of nof_encoding_types
 * Module - 'mdb', Submodule - 'em', data - 'nof_encoding_types'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_encoding_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_nof_encoding_types_get(
    int unit);

/**
 * \brief returns define data of extra_vmv_shift_registers
 * Module - 'mdb', Submodule - 'em', data - 'extra_vmv_shift_registers'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     extra_vmv_shift_registers - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_extra_vmv_shift_registers_get(
    int unit);

/**
 * \brief returns define data of scan_bank_participate_in_cuckoo_support
 * Module - 'mdb', Submodule - 'em', data - 'scan_bank_participate_in_cuckoo_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     scan_bank_participate_in_cuckoo_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_scan_bank_participate_in_cuckoo_support_get(
    int unit);

/**
 * \brief returns define data of scan_bank_participate_in_cuckoo_partial_support
 * Module - 'mdb', Submodule - 'em', data - 'scan_bank_participate_in_cuckoo_partial_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     scan_bank_participate_in_cuckoo_partial_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_scan_bank_participate_in_cuckoo_partial_support_get(
    int unit);

/**
 * \brief returns define data of sbus_error_code_support
 * Module - 'mdb', Submodule - 'em', data - 'sbus_error_code_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sbus_error_code_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_sbus_error_code_support_get(
    int unit);

/**
 * \brief returns define data of nof_emp_tables
 * Module - 'mdb', Submodule - 'em', data - 'nof_emp_tables'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_emp_tables - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_nof_emp_tables_get(
    int unit);

/**
 * \brief returns define data of defrag_interrupt_support
 * Module - 'mdb', Submodule - 'em', data - 'defrag_interrupt_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     defrag_interrupt_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_defrag_interrupt_support_get(
    int unit);

/**
 * \brief returns define data of glem_bypass_option_support
 * Module - 'mdb', Submodule - 'em', data - 'glem_bypass_option_support'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     glem_bypass_option_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_glem_bypass_option_support_get(
    int unit);

/**
 * \brief returns numeric data of flush_max_supported_payload
 * Module - 'mdb', Submodule - 'em', data - 'flush_max_supported_payload'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_max_supported_payload - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_flush_max_supported_payload_get(
    int unit);

/**
 * \brief returns numeric data of flush_payload_max_bus
 * Module - 'mdb', Submodule - 'em', data - 'flush_payload_max_bus'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_payload_max_bus - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_flush_payload_max_bus_get(
    int unit);

/**
 * \brief returns numeric data of my_mac_ippa_em_dbal_id
 * Module - 'mdb', Submodule - 'em', data - 'my_mac_ippa_em_dbal_id'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     my_mac_ippa_em_dbal_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_my_mac_ippa_em_dbal_id_get(
    int unit);

/**
 * \brief returns numeric data of my_mac_ippf_em_dbal_id
 * Module - 'mdb', Submodule - 'em', data - 'my_mac_ippf_em_dbal_id'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     my_mac_ippf_em_dbal_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_my_mac_ippf_em_dbal_id_get(
    int unit);

/**
 * \brief returns numeric data of mact_dbal_id
 * Module - 'mdb', Submodule - 'em', data - 'mact_dbal_id'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mact_dbal_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_em_mact_dbal_id_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_mdb_em_table_em_utilization_api_db_translation,
    dnx_data_mdb_em_table_spn,
    dnx_data_mdb_em_table_lfsr,
    dnx_data_mdb_em_table_emp_index_table_mapping,
    dnx_data_mdb_em_table_em_aging_info,
    dnx_data_mdb_em_table_em_aging_cfg,
    dnx_data_mdb_em_table_em_info,
    dnx_data_mdb_em_table_em_interrupt,
    dnx_data_mdb_em_table_step_table_pdb_max_depth,
    dnx_data_mdb_em_table_step_table_max_depth_possible,
    dnx_data_mdb_em_table_step_table_max_depth_nof_ways_ar,
    dnx_data_mdb_em_table_mdb_15_info,
    dnx_data_mdb_em_table_mdb_16_info,
    dnx_data_mdb_em_table_mdb_21_info,
    dnx_data_mdb_em_table_mdb_23_info,
    dnx_data_mdb_em_table_mdb_24_info,
    dnx_data_mdb_em_table_mdb_29_info,
    dnx_data_mdb_em_table_mdb_31_info,
    dnx_data_mdb_em_table_mdb_32_info,
    dnx_data_mdb_em_table_mdb_41_info,
    dnx_data_mdb_em_table_mdb_45_info,
    dnx_data_mdb_em_table_mdb_emp_tables_mapping,
    dnx_data_mdb_em_table_mdb_em_shift_vmv_regs,
    dnx_data_mdb_em_table_em_emp,
    dnx_data_mdb_em_table_mdb_step_table_map,
    dnx_data_mdb_em_table_mdb_em_dbal_phy_tables_info,
    dnx_data_mdb_em_table_filter_rules,
    dnx_data_mdb_em_table_data_rules,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_em_table_nof
} dnx_data_mdb_em_table_e;

/* Get Data */
/**
 * \brief get table em_utilization_api_db_translation entry 
 * 
 * \param [in] unit - unit #
 * \param [in] resource_id - 
 * 
 * \return
 *     em_utilization_api_db_translation - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_utilization_api_db_translation_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_em_utilization_api_db_translation_t * dnx_data_mdb_em_em_utilization_api_db_translation_get(
    int unit,
    int resource_id);

/**
 * \brief get table spn entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     spn - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_spn_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_spn_t * dnx_data_mdb_em_spn_get(
    int unit,
    int dbal_id);

/**
 * \brief get table lfsr entry 
 * 
 * \param [in] unit - unit #
 * \param [in] lfsr_index - 
 * 
 * \return
 *     lfsr - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_lfsr_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_lfsr_t * dnx_data_mdb_em_lfsr_get(
    int unit,
    int lfsr_index);

/**
 * \brief get table emp_index_table_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] emp_table_idx - 
 * 
 * \return
 *     emp_index_table_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_emp_index_table_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_emp_index_table_mapping_t * dnx_data_mdb_em_emp_index_table_mapping_get(
    int unit,
    int emp_table_idx);

/**
 * \brief get table em_aging_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_aging_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_aging_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_em_aging_info_t * dnx_data_mdb_em_em_aging_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table em_aging_cfg entry 
 * 
 * \param [in] unit - unit #
 * \param [in] profile - 
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_aging_cfg - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_aging_cfg_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_em_aging_cfg_t * dnx_data_mdb_em_em_aging_cfg_get(
    int unit,
    int profile,
    int dbal_id);

/**
 * \brief get table em_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_em_info_t * dnx_data_mdb_em_em_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table em_interrupt entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_interrupt - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_interrupt_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_em_interrupt_t * dnx_data_mdb_em_em_interrupt_get(
    int unit,
    int dbal_id);

/**
 * \brief get table step_table_pdb_max_depth entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     step_table_pdb_max_depth - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_step_table_pdb_max_depth_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_step_table_pdb_max_depth_t * dnx_data_mdb_em_step_table_pdb_max_depth_get(
    int unit,
    int dbal_id);

/**
 * \brief get table step_table_max_depth_possible entry 
 * 
 * \param [in] unit - unit #
 * \param [in] step_table_size_indication - 
 * \param [in] aspect_ratio_combination - 
 * 
 * \return
 *     step_table_max_depth_possible - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_step_table_max_depth_possible_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_step_table_max_depth_possible_t * dnx_data_mdb_em_step_table_max_depth_possible_get(
    int unit,
    int step_table_size_indication,
    int aspect_ratio_combination);

/**
 * \brief get table step_table_max_depth_nof_ways_ar entry 
 * 
 * \param [in] unit - unit #
 * \param [in] aspect_ratio - 
 * \param [in] nof_ways - 
 * 
 * \return
 *     step_table_max_depth_nof_ways_ar - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_t * dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_get(
    int unit,
    int aspect_ratio,
    int nof_ways);

/**
 * \brief get table mdb_15_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_15_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_15_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_15_info_t * dnx_data_mdb_em_mdb_15_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_16_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_16_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_16_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_16_info_t * dnx_data_mdb_em_mdb_16_info_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_21_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_21_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_21_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_21_info_t * dnx_data_mdb_em_mdb_21_info_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_23_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_23_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_23_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_23_info_t * dnx_data_mdb_em_mdb_23_info_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_24_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_24_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_24_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_24_info_t * dnx_data_mdb_em_mdb_24_info_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_29_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_29_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_29_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_29_info_t * dnx_data_mdb_em_mdb_29_info_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_31_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_31_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_31_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_31_info_t * dnx_data_mdb_em_mdb_31_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_32_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_32_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_32_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_32_info_t * dnx_data_mdb_em_mdb_32_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_41_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_41_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_41_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_41_info_t * dnx_data_mdb_em_mdb_41_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_45_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_45_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_45_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_45_info_t * dnx_data_mdb_em_mdb_45_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_emp_tables_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table - 
 * 
 * \return
 *     mdb_emp_tables_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_emp_tables_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_emp_tables_mapping_t * dnx_data_mdb_em_mdb_emp_tables_mapping_get(
    int unit,
    int mdb_table);

/**
 * \brief get table mdb_em_shift_vmv_regs entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_em_shift_vmv_regs - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_em_shift_vmv_regs_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_em_shift_vmv_regs_t * dnx_data_mdb_em_mdb_em_shift_vmv_regs_get(
    int unit,
    int dbal_id);

/**
 * \brief get table em_emp entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     em_emp - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_em_emp_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_em_emp_t * dnx_data_mdb_em_em_emp_get(
    int unit,
    int dbal_id);

/**
 * \brief get table mdb_step_table_map entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table - 
 * 
 * \return
 *     mdb_step_table_map - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_step_table_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_step_table_map_t * dnx_data_mdb_em_mdb_step_table_map_get(
    int unit,
    int mdb_table);

/**
 * \brief get table mdb_em_dbal_phy_tables_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_em_dbal_phy_tables_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_t * dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table filter_rules entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     filter_rules - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_filter_rules_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_filter_rules_t * dnx_data_mdb_em_filter_rules_get(
    int unit,
    int dbal_id);

/**
 * \brief get table data_rules entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     data_rules - returns the relevant entry values grouped in struct - see dnx_data_mdb_em_data_rules_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_em_data_rules_t * dnx_data_mdb_em_data_rules_get(
    int unit,
    int dbal_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'em_utilization_api_db_translation'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_em_utilization_api_db_translation_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'spn'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_spn_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'lfsr'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_lfsr_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'emp_index_table_mapping'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_emp_index_table_mapping_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'em_aging_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_em_aging_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'em_aging_cfg'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_em_aging_cfg_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'em_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_em_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'em_interrupt'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_em_interrupt_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'step_table_pdb_max_depth'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_step_table_pdb_max_depth_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'step_table_max_depth_possible'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_step_table_max_depth_possible_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'step_table_max_depth_nof_ways_ar'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_15_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_15_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_16_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_16_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_21_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_21_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_23_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_23_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_24_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_24_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_29_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_29_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_31_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_31_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_32_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_32_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_41_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_41_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_45_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_45_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_emp_tables_mapping'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_emp_tables_mapping_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_em_shift_vmv_regs'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_em_shift_vmv_regs_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'em_emp'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_em_emp_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_step_table_map'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_step_table_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'mdb_em_dbal_phy_tables_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'filter_rules'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_filter_rules_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'em', table - 'data_rules'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_em_data_rules_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)em_utilization_api_db_translation info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     em_utilization_api_db_translation - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_em_utilization_api_db_translation_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)spn info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     spn - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_spn_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)lfsr info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lfsr - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_lfsr_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)emp_index_table_mapping info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     emp_index_table_mapping - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_emp_index_table_mapping_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)em_aging_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     em_aging_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_em_aging_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)em_aging_cfg info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     em_aging_cfg - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_em_aging_cfg_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)em_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     em_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_em_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)em_interrupt info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     em_interrupt - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_em_interrupt_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)step_table_pdb_max_depth info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     step_table_pdb_max_depth - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_step_table_pdb_max_depth_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)step_table_max_depth_possible info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     step_table_max_depth_possible - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_step_table_max_depth_possible_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)step_table_max_depth_nof_ways_ar info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     step_table_max_depth_nof_ways_ar - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_step_table_max_depth_nof_ways_ar_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_15_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_15_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_15_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_16_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_16_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_16_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_21_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_21_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_21_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_23_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_23_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_23_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_24_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_24_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_24_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_29_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_29_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_29_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_31_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_31_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_31_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_32_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_32_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_32_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_41_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_41_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_41_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_45_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_45_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_45_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_emp_tables_mapping info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_emp_tables_mapping - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_emp_tables_mapping_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_em_shift_vmv_regs info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_em_shift_vmv_regs - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_em_shift_vmv_regs_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)em_emp info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     em_emp - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_em_emp_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_step_table_map info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_step_table_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_step_table_map_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_em_dbal_phy_tables_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_em_dbal_phy_tables_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_mdb_em_dbal_phy_tables_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)filter_rules info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     filter_rules - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_filter_rules_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)data_rules info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_rules - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_em_data_rules_info_get(
    int unit);

/*
 * SUBMODULE DIRECT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_mdb_direct_feature_get(
    int unit,
    dnx_data_mdb_direct_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_mdb_direct_define_physical_address_max_bits,
    dnx_data_mdb_direct_define_physical_address_max_bits_support_single_macro_b_granularity_fec_alloc,
    dnx_data_mdb_direct_define_vsi_physical_address_max_bits,
    dnx_data_mdb_direct_define_fec_row_width,
    dnx_data_mdb_direct_define_fec_address_mapping_bits,
    dnx_data_mdb_direct_define_fec_address_mapping_bits_relevant,
    dnx_data_mdb_direct_define_fec_max_cluster_pairs,
    dnx_data_mdb_direct_define_max_payload_size,
    dnx_data_mdb_direct_define_nof_fecs_in_super_fec,
    dnx_data_mdb_direct_define_nof_fec_ecmp_hierarchies,
    dnx_data_mdb_direct_define_physical_address_ovf_enable_val,
    dnx_data_mdb_direct_define_nof_fec_dbs,
    dnx_data_mdb_direct_define_map_payload_size_enum,
    dnx_data_mdb_direct_define_map_payload_size,
    dnx_data_mdb_direct_define_fec_allocation_base_macro_type,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_direct_define_nof
} dnx_data_mdb_direct_define_e;

/* Get Data */
/**
 * \brief returns define data of physical_address_max_bits
 * Module - 'mdb', Submodule - 'direct', data - 'physical_address_max_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     physical_address_max_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_physical_address_max_bits_get(
    int unit);

/**
 * \brief returns define data of physical_address_max_bits_support_single_macro_b_granularity_fec_alloc
 * Module - 'mdb', Submodule - 'direct', data - 'physical_address_max_bits_support_single_macro_b_granularity_fec_alloc'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     physical_address_max_bits_support_single_macro_b_granularity_fec_alloc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_physical_address_max_bits_support_single_macro_b_granularity_fec_alloc_get(
    int unit);

/**
 * \brief returns define data of vsi_physical_address_max_bits
 * Module - 'mdb', Submodule - 'direct', data - 'vsi_physical_address_max_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vsi_physical_address_max_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_vsi_physical_address_max_bits_get(
    int unit);

/**
 * \brief returns define data of fec_row_width
 * Module - 'mdb', Submodule - 'direct', data - 'fec_row_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_row_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_fec_row_width_get(
    int unit);

/**
 * \brief returns define data of fec_address_mapping_bits
 * Module - 'mdb', Submodule - 'direct', data - 'fec_address_mapping_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_address_mapping_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_fec_address_mapping_bits_get(
    int unit);

/**
 * \brief returns define data of fec_address_mapping_bits_relevant
 * Module - 'mdb', Submodule - 'direct', data - 'fec_address_mapping_bits_relevant'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_address_mapping_bits_relevant - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_fec_address_mapping_bits_relevant_get(
    int unit);

/**
 * \brief returns define data of fec_max_cluster_pairs
 * Module - 'mdb', Submodule - 'direct', data - 'fec_max_cluster_pairs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_max_cluster_pairs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_fec_max_cluster_pairs_get(
    int unit);

/**
 * \brief returns define data of max_payload_size
 * Module - 'mdb', Submodule - 'direct', data - 'max_payload_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_payload_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_max_payload_size_get(
    int unit);

/**
 * \brief returns define data of nof_fecs_in_super_fec
 * Module - 'mdb', Submodule - 'direct', data - 'nof_fecs_in_super_fec'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fecs_in_super_fec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_nof_fecs_in_super_fec_get(
    int unit);

/**
 * \brief returns define data of nof_fec_ecmp_hierarchies
 * Module - 'mdb', Submodule - 'direct', data - 'nof_fec_ecmp_hierarchies'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fec_ecmp_hierarchies - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_nof_fec_ecmp_hierarchies_get(
    int unit);

/**
 * \brief returns define data of physical_address_ovf_enable_val
 * Module - 'mdb', Submodule - 'direct', data - 'physical_address_ovf_enable_val'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     physical_address_ovf_enable_val - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_physical_address_ovf_enable_val_get(
    int unit);

/**
 * \brief returns define data of nof_fec_dbs
 * Module - 'mdb', Submodule - 'direct', data - 'nof_fec_dbs'
 * The NOF of FEC DBs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fec_dbs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_nof_fec_dbs_get(
    int unit);

/**
 * \brief returns numeric data of map_payload_size_enum
 * Module - 'mdb', Submodule - 'direct', data - 'map_payload_size_enum'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     map_payload_size_enum - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_map_payload_size_enum_get(
    int unit);

/**
 * \brief returns numeric data of map_payload_size
 * Module - 'mdb', Submodule - 'direct', data - 'map_payload_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     map_payload_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_map_payload_size_get(
    int unit);

/**
 * \brief returns numeric data of fec_allocation_base_macro_type
 * Module - 'mdb', Submodule - 'direct', data - 'fec_allocation_base_macro_type'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_allocation_base_macro_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_direct_fec_allocation_base_macro_type_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_mdb_direct_table_vsi_payload_type_per_range,
    dnx_data_mdb_direct_table_direct_utilization_api_db_translation,
    dnx_data_mdb_direct_table_direct_info,
    dnx_data_mdb_direct_table_hit_bit_pos_in_abk,
    dnx_data_mdb_direct_table_mdb_11_info,
    dnx_data_mdb_direct_table_mdb_26_info,
    dnx_data_mdb_direct_table_mdb_direct_mdb_phy_tables_info,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_direct_table_nof
} dnx_data_mdb_direct_table_e;

/* Get Data */
/**
 * \brief get table vsi_payload_type_per_range entry 
 * 
 * \param [in] unit - unit #
 * \param [in] range_idx - 
 * 
 * \return
 *     vsi_payload_type_per_range - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_vsi_payload_type_per_range_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_direct_vsi_payload_type_per_range_t * dnx_data_mdb_direct_vsi_payload_type_per_range_get(
    int unit,
    int range_idx);

/**
 * \brief get table direct_utilization_api_db_translation entry 
 * 
 * \param [in] unit - unit #
 * \param [in] resource_id - 
 * 
 * \return
 *     direct_utilization_api_db_translation - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_direct_utilization_api_db_translation_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_direct_direct_utilization_api_db_translation_t * dnx_data_mdb_direct_direct_utilization_api_db_translation_get(
    int unit,
    int resource_id);

/**
 * \brief get table direct_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     direct_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_direct_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_direct_direct_info_t * dnx_data_mdb_direct_direct_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table hit_bit_pos_in_abk entry 
 * 
 * \param [in] unit - unit #
 * \param [in] hit_bit_index - 
 * 
 * \return
 *     hit_bit_pos_in_abk - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_hit_bit_pos_in_abk_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_direct_hit_bit_pos_in_abk_t * dnx_data_mdb_direct_hit_bit_pos_in_abk_get(
    int unit,
    int hit_bit_index);

/**
 * \brief get table mdb_11_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_11_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_mdb_11_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_direct_mdb_11_info_t * dnx_data_mdb_direct_mdb_11_info_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_26_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_26_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_mdb_26_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_direct_mdb_26_info_t * dnx_data_mdb_direct_mdb_26_info_get(
    int unit,
    int mdb_table_id);

/**
 * \brief get table mdb_direct_mdb_phy_tables_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table_id - 
 * 
 * \return
 *     mdb_direct_mdb_phy_tables_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_t * dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_get(
    int unit,
    int mdb_table_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'direct', table - 'vsi_payload_type_per_range'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_direct_vsi_payload_type_per_range_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'direct', table - 'direct_utilization_api_db_translation'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_direct_direct_utilization_api_db_translation_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'direct', table - 'direct_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_direct_direct_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'direct', table - 'hit_bit_pos_in_abk'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_direct_hit_bit_pos_in_abk_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'direct', table - 'mdb_11_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_direct_mdb_11_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'direct', table - 'mdb_26_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_direct_mdb_26_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'direct', table - 'mdb_direct_mdb_phy_tables_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)vsi_payload_type_per_range info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vsi_payload_type_per_range - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_direct_vsi_payload_type_per_range_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)direct_utilization_api_db_translation info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     direct_utilization_api_db_translation - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_direct_direct_utilization_api_db_translation_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)direct_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     direct_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_direct_direct_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)hit_bit_pos_in_abk info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hit_bit_pos_in_abk - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_direct_hit_bit_pos_in_abk_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_11_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_11_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_direct_mdb_11_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_26_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_26_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_direct_mdb_26_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_direct_mdb_phy_tables_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_direct_mdb_phy_tables_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_direct_mdb_direct_mdb_phy_tables_info_info_get(
    int unit);

/*
 * SUBMODULE EEDB:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_mdb_eedb_feature_get(
    int unit,
    dnx_data_mdb_eedb_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_mdb_eedb_define_phase_map_bits,
    dnx_data_mdb_eedb_define_phase_map_array_size,
    dnx_data_mdb_eedb_define_nof_phase_per_mag,
    dnx_data_mdb_eedb_define_nof_phases,
    dnx_data_mdb_eedb_define_nof_eedb_mags,
    dnx_data_mdb_eedb_define_nof_eedb_banks,
    dnx_data_mdb_eedb_define_nof_phases_per_eedb_bank,
    dnx_data_mdb_eedb_define_nof_phases_per_eedb_bank_size,
    dnx_data_mdb_eedb_define_phase_bank_select_default,
    dnx_data_mdb_eedb_define_entry_format_bits,
    dnx_data_mdb_eedb_define_entry_format_encoding_bits,
    dnx_data_mdb_eedb_define_bank_id_bits,
    dnx_data_mdb_eedb_define_entry_bank,
    dnx_data_mdb_eedb_define_abk_bank,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_eedb_define_nof
} dnx_data_mdb_eedb_define_e;

/* Get Data */
/**
 * \brief returns define data of phase_map_bits
 * Module - 'mdb', Submodule - 'eedb', data - 'phase_map_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_map_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_phase_map_bits_get(
    int unit);

/**
 * \brief returns define data of phase_map_array_size
 * Module - 'mdb', Submodule - 'eedb', data - 'phase_map_array_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_map_array_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_phase_map_array_size_get(
    int unit);

/**
 * \brief returns define data of nof_phase_per_mag
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_phase_per_mag'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phase_per_mag - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_nof_phase_per_mag_get(
    int unit);

/**
 * \brief returns define data of nof_phases
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_phases'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phases - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_nof_phases_get(
    int unit);

/**
 * \brief returns define data of nof_eedb_mags
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_eedb_mags'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_eedb_mags - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_nof_eedb_mags_get(
    int unit);

/**
 * \brief returns define data of nof_eedb_banks
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_eedb_banks'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_eedb_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_nof_eedb_banks_get(
    int unit);

/**
 * \brief returns define data of nof_phases_per_eedb_bank
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_phases_per_eedb_bank'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phases_per_eedb_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_nof_phases_per_eedb_bank_get(
    int unit);

/**
 * \brief returns define data of nof_phases_per_eedb_bank_size
 * Module - 'mdb', Submodule - 'eedb', data - 'nof_phases_per_eedb_bank_size'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phases_per_eedb_bank_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_nof_phases_per_eedb_bank_size_get(
    int unit);

/**
 * \brief returns define data of phase_bank_select_default
 * Module - 'mdb', Submodule - 'eedb', data - 'phase_bank_select_default'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_bank_select_default - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_phase_bank_select_default_get(
    int unit);

/**
 * \brief returns define data of entry_format_bits
 * Module - 'mdb', Submodule - 'eedb', data - 'entry_format_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     entry_format_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_entry_format_bits_get(
    int unit);

/**
 * \brief returns define data of entry_format_encoding_bits
 * Module - 'mdb', Submodule - 'eedb', data - 'entry_format_encoding_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     entry_format_encoding_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_entry_format_encoding_bits_get(
    int unit);

/**
 * \brief returns define data of bank_id_bits
 * Module - 'mdb', Submodule - 'eedb', data - 'bank_id_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bank_id_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_bank_id_bits_get(
    int unit);

/**
 * \brief returns numeric data of entry_bank
 * Module - 'mdb', Submodule - 'eedb', data - 'entry_bank'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     entry_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_entry_bank_get(
    int unit);

/**
 * \brief returns numeric data of abk_bank
 * Module - 'mdb', Submodule - 'eedb', data - 'abk_bank'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     abk_bank - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_eedb_abk_bank_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_mdb_eedb_table_phase_info,
    dnx_data_mdb_eedb_table_phase_ll_bucket_enable,
    dnx_data_mdb_eedb_table_phase_to_table,
    dnx_data_mdb_eedb_table_outlif_physical_phase_granularity,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_eedb_table_nof
} dnx_data_mdb_eedb_table_e;

/* Get Data */
/**
 * \brief get table phase_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] phase_number - 
 * 
 * \return
 *     phase_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_eedb_phase_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_eedb_phase_info_t * dnx_data_mdb_eedb_phase_info_get(
    int unit,
    int phase_number);

/**
 * \brief get table phase_ll_bucket_enable entry 
 * 
 * \param [in] unit - unit #
 * \param [in] phase_number - 
 * 
 * \return
 *     phase_ll_bucket_enable - returns the relevant entry values grouped in struct - see dnx_data_mdb_eedb_phase_ll_bucket_enable_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_eedb_phase_ll_bucket_enable_t * dnx_data_mdb_eedb_phase_ll_bucket_enable_get(
    int unit,
    int phase_number);

/**
 * \brief get table phase_to_table entry 
 * 
 * \param [in] unit - unit #
 * \param [in] eedb_mem_type - 
 * \param [in] phase_number - 
 * 
 * \return
 *     phase_to_table - returns the relevant entry values grouped in struct - see dnx_data_mdb_eedb_phase_to_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_eedb_phase_to_table_t * dnx_data_mdb_eedb_phase_to_table_get(
    int unit,
    int eedb_mem_type,
    int phase_number);

/**
 * \brief get table outlif_physical_phase_granularity entry 
 * 
 * \param [in] unit - unit #
 * \param [in] outlif_physical_phase - 
 * 
 * \return
 *     outlif_physical_phase_granularity - returns the relevant entry values grouped in struct - see dnx_data_mdb_eedb_outlif_physical_phase_granularity_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_eedb_outlif_physical_phase_granularity_t * dnx_data_mdb_eedb_outlif_physical_phase_granularity_get(
    int unit,
    int outlif_physical_phase);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'eedb', table - 'phase_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_eedb_phase_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'eedb', table - 'phase_ll_bucket_enable'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_eedb_phase_ll_bucket_enable_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'eedb', table - 'phase_to_table'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_eedb_phase_to_table_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'eedb', table - 'outlif_physical_phase_granularity'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_eedb_outlif_physical_phase_granularity_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)phase_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_eedb_phase_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)phase_ll_bucket_enable info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_ll_bucket_enable - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_eedb_phase_ll_bucket_enable_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)phase_to_table info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_to_table - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_eedb_phase_to_table_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)outlif_physical_phase_granularity info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     outlif_physical_phase_granularity - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_eedb_outlif_physical_phase_granularity_info_get(
    int unit);

/*
 * SUBMODULE KAPS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_mdb_kaps_feature_get(
    int unit,
    dnx_data_mdb_kaps_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_mdb_kaps_define_nof_dbs,
    dnx_data_mdb_kaps_define_nof_small_bbs,
    dnx_data_mdb_kaps_define_nof_rows_in_rpb_max,
    dnx_data_mdb_kaps_define_nof_rows_in_small_ads_max,
    dnx_data_mdb_kaps_define_nof_rows_in_small_bb_max,
    dnx_data_mdb_kaps_define_nof_rows_in_small_rpb_hitbits_max,
    dnx_data_mdb_kaps_define_nof_big_bbs_blk_ids,
    dnx_data_mdb_kaps_define_nof_bytes_in_hitbit_row,
    dnx_data_mdb_kaps_define_key_lsn_bits,
    dnx_data_mdb_kaps_define_key_prefix_length,
    dnx_data_mdb_kaps_define_max_prefix_in_bb_row,
    dnx_data_mdb_kaps_define_key_width_in_bits,
    dnx_data_mdb_kaps_define_bb_byte_width,
    dnx_data_mdb_kaps_define_rpb_byte_width,
    dnx_data_mdb_kaps_define_ads_byte_width,
    dnx_data_mdb_kaps_define_direct_byte_width,
    dnx_data_mdb_kaps_define_rpb_valid_bits,
    dnx_data_mdb_kaps_define_dynamic_memory_access_dpc,
    dnx_data_mdb_kaps_define_max_fmt,
    dnx_data_mdb_kaps_define_nof_app_ids,
    dnx_data_mdb_kaps_define_max_nof_result_types,
    dnx_data_mdb_kaps_define_rpb_field,
    dnx_data_mdb_kaps_define_big_kaps_revision_val,
    dnx_data_mdb_kaps_define_small_kaps_ad_size_e,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_kaps_define_nof
} dnx_data_mdb_kaps_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_dbs
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_dbs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dbs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_nof_dbs_get(
    int unit);

/**
 * \brief returns define data of nof_small_bbs
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_small_bbs'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_small_bbs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_nof_small_bbs_get(
    int unit);

/**
 * \brief returns define data of nof_rows_in_rpb_max
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_rows_in_rpb_max'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rows_in_rpb_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_nof_rows_in_rpb_max_get(
    int unit);

/**
 * \brief returns define data of nof_rows_in_small_ads_max
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_rows_in_small_ads_max'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rows_in_small_ads_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_nof_rows_in_small_ads_max_get(
    int unit);

/**
 * \brief returns define data of nof_rows_in_small_bb_max
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_rows_in_small_bb_max'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rows_in_small_bb_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_nof_rows_in_small_bb_max_get(
    int unit);

/**
 * \brief returns define data of nof_rows_in_small_rpb_hitbits_max
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_rows_in_small_rpb_hitbits_max'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rows_in_small_rpb_hitbits_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_nof_rows_in_small_rpb_hitbits_max_get(
    int unit);

/**
 * \brief returns define data of nof_big_bbs_blk_ids
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_big_bbs_blk_ids'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_big_bbs_blk_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_nof_big_bbs_blk_ids_get(
    int unit);

/**
 * \brief returns define data of nof_bytes_in_hitbit_row
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_bytes_in_hitbit_row'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bytes_in_hitbit_row - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_nof_bytes_in_hitbit_row_get(
    int unit);

/**
 * \brief returns define data of key_lsn_bits
 * Module - 'mdb', Submodule - 'kaps', data - 'key_lsn_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     key_lsn_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_key_lsn_bits_get(
    int unit);

/**
 * \brief returns define data of key_prefix_length
 * Module - 'mdb', Submodule - 'kaps', data - 'key_prefix_length'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     key_prefix_length - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_key_prefix_length_get(
    int unit);

/**
 * \brief returns define data of max_prefix_in_bb_row
 * Module - 'mdb', Submodule - 'kaps', data - 'max_prefix_in_bb_row'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_prefix_in_bb_row - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_max_prefix_in_bb_row_get(
    int unit);

/**
 * \brief returns define data of key_width_in_bits
 * Module - 'mdb', Submodule - 'kaps', data - 'key_width_in_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     key_width_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_key_width_in_bits_get(
    int unit);

/**
 * \brief returns define data of bb_byte_width
 * Module - 'mdb', Submodule - 'kaps', data - 'bb_byte_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bb_byte_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_bb_byte_width_get(
    int unit);

/**
 * \brief returns define data of rpb_byte_width
 * Module - 'mdb', Submodule - 'kaps', data - 'rpb_byte_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rpb_byte_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_rpb_byte_width_get(
    int unit);

/**
 * \brief returns define data of ads_byte_width
 * Module - 'mdb', Submodule - 'kaps', data - 'ads_byte_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ads_byte_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_ads_byte_width_get(
    int unit);

/**
 * \brief returns define data of direct_byte_width
 * Module - 'mdb', Submodule - 'kaps', data - 'direct_byte_width'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     direct_byte_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_direct_byte_width_get(
    int unit);

/**
 * \brief returns define data of rpb_valid_bits
 * Module - 'mdb', Submodule - 'kaps', data - 'rpb_valid_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rpb_valid_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_rpb_valid_bits_get(
    int unit);

/**
 * \brief returns define data of dynamic_memory_access_dpc
 * Module - 'mdb', Submodule - 'kaps', data - 'dynamic_memory_access_dpc'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dynamic_memory_access_dpc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_dynamic_memory_access_dpc_get(
    int unit);

/**
 * \brief returns define data of max_fmt
 * Module - 'mdb', Submodule - 'kaps', data - 'max_fmt'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_fmt - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_max_fmt_get(
    int unit);

/**
 * \brief returns define data of nof_app_ids
 * Module - 'mdb', Submodule - 'kaps', data - 'nof_app_ids'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_app_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_nof_app_ids_get(
    int unit);

/**
 * \brief returns define data of max_nof_result_types
 * Module - 'mdb', Submodule - 'kaps', data - 'max_nof_result_types'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_result_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_max_nof_result_types_get(
    int unit);

/**
 * \brief returns numeric data of rpb_field
 * Module - 'mdb', Submodule - 'kaps', data - 'rpb_field'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rpb_field - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_rpb_field_get(
    int unit);

/**
 * \brief returns numeric data of big_kaps_revision_val
 * Module - 'mdb', Submodule - 'kaps', data - 'big_kaps_revision_val'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     big_kaps_revision_val - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_big_kaps_revision_val_get(
    int unit);

/**
 * \brief returns numeric data of small_kaps_ad_size_e
 * Module - 'mdb', Submodule - 'kaps', data - 'small_kaps_ad_size_e'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     small_kaps_ad_size_e - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_mdb_kaps_small_kaps_ad_size_e_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_mdb_kaps_table_big_bb_blk_id_mapping,
    dnx_data_mdb_kaps_table_db_info,
    dnx_data_mdb_kaps_table_db_supported_ad_sizes,
    dnx_data_mdb_kaps_table_db_access_info,
    dnx_data_mdb_kaps_table_mdb_28_info,
    dnx_data_mdb_kaps_table_mdb_53_info,
    dnx_data_mdb_kaps_table_kaps_lookup_result,

    /**
     * Must be last one!
     */
    _dnx_data_mdb_kaps_table_nof
} dnx_data_mdb_kaps_table_e;

/* Get Data */
/**
 * \brief get table big_bb_blk_id_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] pair_id - 
 * \param [in] blk_id - 
 * 
 * \return
 *     big_bb_blk_id_mapping - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_big_bb_blk_id_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_kaps_big_bb_blk_id_mapping_t * dnx_data_mdb_kaps_big_bb_blk_id_mapping_get(
    int unit,
    int pair_id,
    int blk_id);

/**
 * \brief get table db_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] db_idx - 
 * 
 * \return
 *     db_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_db_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_kaps_db_info_t * dnx_data_mdb_kaps_db_info_get(
    int unit,
    int db_idx);

/**
 * \brief get table db_supported_ad_sizes entry 
 * 
 * \param [in] unit - unit #
 * \param [in] db_idx - 
 * \param [in] ad_size - 
 * 
 * \return
 *     db_supported_ad_sizes - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_db_supported_ad_sizes_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_kaps_db_supported_ad_sizes_t * dnx_data_mdb_kaps_db_supported_ad_sizes_get(
    int unit,
    int db_idx,
    int ad_size);

/**
 * \brief get table db_access_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] db_idx - 
 * 
 * \return
 *     db_access_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_db_access_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_kaps_db_access_info_t * dnx_data_mdb_kaps_db_access_info_get(
    int unit,
    int db_idx);

/**
 * \brief get table mdb_28_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] mdb_table - 
 * 
 * \return
 *     mdb_28_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_mdb_28_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_kaps_mdb_28_info_t * dnx_data_mdb_kaps_mdb_28_info_get(
    int unit,
    int mdb_table);

/**
 * \brief get table mdb_53_info entry 
 * 
 * \param [in] unit - unit #
 * \param [in] dbal_id - 
 * 
 * \return
 *     mdb_53_info - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_mdb_53_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_kaps_mdb_53_info_t * dnx_data_mdb_kaps_mdb_53_info_get(
    int unit,
    int dbal_id);

/**
 * \brief get table kaps_lookup_result entry 
 * 
 * \param [in] unit - unit #
 * \param [in] db_idx - 
 * \param [in] core - 
 * 
 * \return
 *     kaps_lookup_result - returns the relevant entry values grouped in struct - see dnx_data_mdb_kaps_kaps_lookup_result_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_mdb_kaps_kaps_lookup_result_t * dnx_data_mdb_kaps_kaps_lookup_result_get(
    int unit,
    int db_idx,
    int core);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'kaps', table - 'big_bb_blk_id_mapping'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_kaps_big_bb_blk_id_mapping_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'kaps', table - 'db_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_kaps_db_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'kaps', table - 'db_supported_ad_sizes'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_kaps_db_supported_ad_sizes_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'kaps', table - 'db_access_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_kaps_db_access_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'kaps', table - 'mdb_28_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_kaps_mdb_28_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'kaps', table - 'mdb_53_info'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_kaps_mdb_53_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'mdb', Submodule - 'kaps', table - 'kaps_lookup_result'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_kaps_kaps_lookup_result_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)big_bb_blk_id_mapping info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     big_bb_blk_id_mapping - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_kaps_big_bb_blk_id_mapping_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)db_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     db_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_kaps_db_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)db_supported_ad_sizes info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     db_supported_ad_sizes - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_kaps_db_supported_ad_sizes_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)db_access_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     db_access_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_kaps_db_access_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_28_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_28_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_kaps_mdb_28_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_53_info info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_53_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_kaps_mdb_53_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)kaps_lookup_result info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     kaps_lookup_result - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_mdb_kaps_kaps_lookup_result_info_get(
    int unit);

/*
 * SUBMODULE FEATURE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_mdb_feature_feature_get(
    int unit,
    dnx_data_mdb_feature_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_mdb_feature_define_nof
} dnx_data_mdb_feature_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_mdb_feature_table_nof
} dnx_data_mdb_feature_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_mdb_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_MDB_H_*/
/* *INDENT-ON* */
