/** \file dnx/swstate/auto_generated/types/dnx_algo_field_action_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_ALGO_FIELD_ACTION_TYPES_H__
#define __DNX_ALGO_FIELD_ACTION_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_types.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_key_types.h>
#include <bcm_int/dnx/algo/swstate/auto_generated/types/dnx_algo_field_types.h>
/*
 * STRUCTs
 */

/**
 * FEM priority position or don't care list.
 */
typedef struct {
    /**
     * Indication for each program in FEM ID if it was allocated with specific position.
     */
    uint8 is_priority_position[DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FEM_ID][DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FEM_PROGRAMS];
} dnx_field_action_fem_priorities_t;

/**
 * Hold information about the current state of the FES allocation by FES ID.
 */
typedef struct {
    /**
     * The field group ID for each FES quartet in the FES ID.
     * Also used to indicate if the FES quartet is unallocated using invalid fg_id.
     * Note we treat all four FES2msb IDS as one unit and do not split them between dofferent foeld groups.
     */
    dnx_field_group_t field_group[DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FES_PROGRAMS];
    /**
     * The ordinal place (index) of the FES quartet in the field group (payload).
     * Note we treat all four FES2msb IDS as one unit and do not split them between dofferent foeld groups.
     */
    uint8 place_in_fg[DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FES_PROGRAMS];
    /**
     * Holds for each action mask in the FES ID whether it is allocated. Includes the zero mask.
     */
    uint8 mask_is_alloc[DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_MASKS_PER_FES];
} dnx_algo_field_action_fes_state_t;

/**
 * Hold information about the current state of the FES allocation by context ID. Contains action priority.
 */
typedef struct {
    /**
     * The priority for each FES quartet in the context ID.
     * Note we treat all four FES2msb IDS as one unit and do not split them between dofferent foeld groups.
     */
    dnx_field_action_priority_t priority[DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_FES_INSTRUCTION_PER_CONTEXT];
} dnx_algo_field_action_context_state_ipmf2_t;

/**
 * Hold information about the current state of the FES allocation by context ID. Contains action priority.
 */
typedef struct {
    /**
     * The priority for each FES quartet in the context ID.
     * Note we treat all four FES2msb IDS as one unit and do not split them between dofferent foeld groups.
     */
    dnx_field_action_priority_t priority[DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_FES_INSTRUCTION_PER_CONTEXT];
} dnx_algo_field_action_context_state_ipmf3_t;

/**
 * Hold information about the current state of the FES allocation by context ID. Contains action priority.
 */
typedef struct {
    /**
     * The priority for each FES quartet in the context ID.
     * Note we treat all four FES2msb IDS as one unit and do not split them between dofferent foeld groups.
     */
    dnx_field_action_priority_t priority[DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_FES_INSTRUCTION_PER_CONTEXT];
} dnx_algo_field_action_context_state_epmf_t;

/**
 * Hold information about the current state of the FES allocation for iPMF-2.
 */
typedef struct {
    /**
     * Hold the needed info to manage the Algo Field Action module, given by FES ID. Includes the zero mask.
     */
    dnx_algo_field_action_fes_state_t fes_state[DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_FES_INSTRUCTION_PER_CONTEXT];
    /**
     * Hold the needed info to manage the Algo Field Action module, given by context ID.
     */
    dnx_algo_field_action_context_state_ipmf2_t context_state[DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_CONTEXTS];
} dnx_algo_field_action_ipmf2_t;

/**
 * Hold information about the current state of the FES allocation for iPMF-3.
 */
typedef struct {
    /**
     * Hold the needed info to manage the Algo Field Action module, given by FES ID.
     */
    dnx_algo_field_action_fes_state_t fes_state[DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_FES_INSTRUCTION_PER_CONTEXT];
    /**
     * Hold the needed info to manage the Algo Field Action module, given by context ID.
     */
    dnx_algo_field_action_context_state_ipmf3_t context_state[DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_CONTEXTS];
} dnx_algo_field_action_ipmf3_t;

/**
 * Hold information about the current state of the FES allocation for ePMF-1.
 */
typedef struct {
    /**
     * Hold the needed info to manage the Algo Field Action module, given by FES ID.
     */
    dnx_algo_field_action_fes_state_t fes_state[DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_FES_INSTRUCTION_PER_CONTEXT];
    /**
     * Hold the needed info to manage the Algo Field Action module, given by context ID.
     */
    dnx_algo_field_action_context_state_epmf_t context_state[DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_CONTEXTS];
} dnx_algo_field_action_epmf_t;

/**
 * Hold the needed info to manage the Algo Field Action module.
 */
typedef struct {
    /**
     * Hold the needed info to manage the Algo Field Action module for iPMF-2.
     */
    dnx_algo_field_action_ipmf2_t ipmf2;
    /**
     * Hold the needed info to manage the Algo Field Action module for iPMF-3.
     */
    dnx_algo_field_action_ipmf3_t ipmf3;
    /**
     * Hold the needed info to manage the Algo Field Action module for ePMF-1.
     */
    dnx_algo_field_action_epmf_t epmf;
    /**
     * Hold the needed info for FEM allocation.
     */
    dnx_field_action_fem_priorities_t fem;
} dnx_algo_field_action_sw_t;


#endif /* __DNX_ALGO_FIELD_ACTION_TYPES_H__ */
