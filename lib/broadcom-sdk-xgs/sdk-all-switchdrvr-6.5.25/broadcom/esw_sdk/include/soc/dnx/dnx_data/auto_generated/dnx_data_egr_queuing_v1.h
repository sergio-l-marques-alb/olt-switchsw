/** \file dnx_data_egr_queuing_v1.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_EGR_QUEUING_V1_H_
/*{*/
#define _DNX_DATA_EGR_QUEUING_V1_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/port.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_egr_queuing_v1.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_egr_queuing_v1
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_egr_queuing_v1_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * general data for egress queuing, mostly for feature support for dispatching purposes between v1 to other versions
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * inidication that v1 implementation is supported
     */
    dnx_data_egr_queuing_v1_general_v1_supported,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_general_feature_nof
} dnx_data_egr_queuing_v1_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_egr_queuing_v1_general_feature_get_f) (
    int unit,
    dnx_data_egr_queuing_v1_general_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_EGR_QUEUING_V1 - GENERAL:
 * {
 */
/**
 * \brief Interface for egr_queuing_v1 general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_egr_queuing_v1_general_feature_get_f feature_get;
} dnx_data_if_egr_queuing_v1_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - EGRESS_INTERFACES:
 * relevant data for egress interface
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule egress_interfaces table mapping_data
 * Table info:
 * mapping data per egress interface type
 */
typedef struct
{
    /**
     * starting offset for itnerface type
     */
    int base_offset;
    /**
     * number of interface of interface type
     */
    int count;
} dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_t;

/**
 * \brief Holds values of submodule egress_interfaces table per_speed_mapping_data
 * Table info:
 * mapping data per egress interface type and interface speed
 */
typedef struct
{
    /**
     * interface type for which the data is relevant, used as key de facto
     */
    bcm_port_if_t interface_type;
    /**
     * max speed for which the data is relevant, used as key de facto
     */
    int speed;
    /**
     * IRDY threshold per high priority TXQ
     */
    int high_priority_th;
    /**
     * IRDY threshold per low priority TXQ
     */
    int low_priority_th;
    /**
     * Define credit balance treshold below which interface is not eligable
     */
    int txi_irdy_th;
    /**
     * the minimal gap between consecutive commands to the same egress interface in fqp calendar
     */
    int fqp_min_gap;
    /**
     * the minimal gap between consecutive commands to the same egress interface in eps calendar
     */
    int eps_min_gap;
    /**
     * allow FQP to serve certain interface consecutively, even if there are other active interfaces
     */
    int allow_consecutive_select;
    /**
     * TXQ txi credit size
     */
    int credit_size;
} dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * channelized interface are mapped in a seperated pool. channelized interfaces has 2 allocation, one in the main pool and another in the channelized interfaces pool
     */
    dnx_data_egr_queuing_v1_egress_interfaces_channelized_interface_mapping,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_egress_interfaces_feature_nof
} dnx_data_egr_queuing_v1_egress_interfaces_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_egr_queuing_v1_egress_interfaces_feature_get_f) (
    int unit,
    dnx_data_egr_queuing_v1_egress_interfaces_feature_e feature);

/**
 * \brief returns define data of nof_egr_interfaces
 * Module - 'egr_queuing_v1', Submodule - 'egress_interfaces', data - 'nof_egr_interfaces'
 * number of egress interfaces
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egr_interfaces - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_egress_interfaces_nof_egr_interfaces_get_f) (
    int unit);

/**
 * \brief returns define data of nof_channelized_egr_interfaces
 * Module - 'egr_queuing_v1', Submodule - 'egress_interfaces', data - 'nof_channelized_egr_interfaces'
 * number of channelized egress itnerfaces, a channelized interface has both channelized ID and regular ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_channelized_egr_interfaces - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_egress_interfaces_nof_channelized_egr_interfaces_get_f) (
    int unit);

/**
 * \brief get table mapping_data entry 
 * mapping data per egress interface type
 * 
 * \param [in] unit - unit #
 * \param [in] interface_type - interface type
 * 
 * \return
 *     mapping_data - returns the relevant entry values grouped in struct - see dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_t *(
    *dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_get_f) (
    int unit,
    int interface_type);

/**
 * \brief get table per_speed_mapping_data entry 
 * mapping data per egress interface type and interface speed
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     per_speed_mapping_data - returns the relevant entry values grouped in struct - see dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_t *(
    *dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_EGR_QUEUING_V1 - EGRESS_INTERFACES:
 * {
 */
/**
 * \brief Interface for egr_queuing_v1 egress_interfaces data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_egr_queuing_v1_egress_interfaces_feature_get_f feature_get;
    /**
     * returns define data of nof_egr_interfaces
     */
    dnx_data_egr_queuing_v1_egress_interfaces_nof_egr_interfaces_get_f nof_egr_interfaces_get;
    /**
     * returns define data of nof_channelized_egr_interfaces
     */
    dnx_data_egr_queuing_v1_egress_interfaces_nof_channelized_egr_interfaces_get_f nof_channelized_egr_interfaces_get;
    /**
     * get table mapping_data entry 
     */
    dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_get_f mapping_data_get;
    /**
     * get general info table about table (for example key size)mapping_data info
     */
    dnxc_data_table_info_get_f mapping_data_info_get;
    /**
     * get table per_speed_mapping_data entry 
     */
    dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_get_f per_speed_mapping_data_get;
    /**
     * get general info table about table (for example key size)per_speed_mapping_data info
     */
    dnxc_data_table_info_get_f per_speed_mapping_data_info_get;
} dnx_data_if_egr_queuing_v1_egress_interfaces_t;

/*
 * }
 */

/*
 * SUBMODULE  - EGRESS_QUEUES:
 * relevant data for egress queues
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule egress_queues table supported_nof_priorities
 * Table info:
 * supported number of priorities
 */
typedef struct
{
    /**
     * the number of priorities is supported
     */
    int supported;
} dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * RCY has dedicated reserved queues
     */
    dnx_data_egr_queuing_v1_egress_queues_rcy_reserved_queues,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_egress_queues_feature_nof
} dnx_data_egr_queuing_v1_egress_queues_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_egr_queuing_v1_egress_queues_feature_get_f) (
    int unit,
    dnx_data_egr_queuing_v1_egress_queues_feature_e feature);

/**
 * \brief returns define data of nof_egr_queues
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'nof_egr_queues'
 * number of egress queues, qpairs are coutned as a single queue
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egr_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_egress_queues_nof_egr_queues_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egr_priorities
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'nof_egr_priorities'
 * number of egress priorities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egr_priorities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_egress_queues_nof_egr_priorities_get_f) (
    int unit);

/**
 * \brief returns define data of ps_queue_resolution
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'ps_queue_resolution'
 * the resolution of queues in port scheduler - on how many queues a PS element controls
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ps_queue_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_egress_queues_ps_queue_resolution_get_f) (
    int unit);

/**
 * \brief returns define data of rcy_reserved_queue
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'rcy_reserved_queue'
 * the reserved base queue ID for recycle port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rcy_reserved_queue - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_egress_queues_rcy_reserved_queue_get_f) (
    int unit);

/**
 * \brief returns define data of nof_queue_pairs
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'nof_queue_pairs'
 * number of qpairs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_queue_pairs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_egress_queues_nof_queue_pairs_get_f) (
    int unit);

/**
 * \brief returns define data of total_nof_egr_queues
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'total_nof_egr_queues'
 * total number of egress queues, qpairs are counted as 2 queues
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_egr_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_egress_queues_total_nof_egr_queues_get_f) (
    int unit);

/**
 * \brief get table supported_nof_priorities entry 
 * supported number of priorities
 * 
 * \param [in] unit - unit #
 * \param [in] priorities - number of priorities
 * 
 * \return
 *     supported_nof_priorities - returns the relevant entry values grouped in struct - see dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_t *(
    *dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_get_f) (
    int unit,
    int priorities);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_EGR_QUEUING_V1 - EGRESS_QUEUES:
 * {
 */
/**
 * \brief Interface for egr_queuing_v1 egress_queues data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_egr_queuing_v1_egress_queues_feature_get_f feature_get;
    /**
     * returns define data of nof_egr_queues
     */
    dnx_data_egr_queuing_v1_egress_queues_nof_egr_queues_get_f nof_egr_queues_get;
    /**
     * returns define data of nof_egr_priorities
     */
    dnx_data_egr_queuing_v1_egress_queues_nof_egr_priorities_get_f nof_egr_priorities_get;
    /**
     * returns define data of ps_queue_resolution
     */
    dnx_data_egr_queuing_v1_egress_queues_ps_queue_resolution_get_f ps_queue_resolution_get;
    /**
     * returns define data of rcy_reserved_queue
     */
    dnx_data_egr_queuing_v1_egress_queues_rcy_reserved_queue_get_f rcy_reserved_queue_get;
    /**
     * returns define data of nof_queue_pairs
     */
    dnx_data_egr_queuing_v1_egress_queues_nof_queue_pairs_get_f nof_queue_pairs_get;
    /**
     * returns define data of total_nof_egr_queues
     */
    dnx_data_egr_queuing_v1_egress_queues_total_nof_egr_queues_get_f total_nof_egr_queues_get;
    /**
     * get table supported_nof_priorities entry 
     */
    dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_get_f supported_nof_priorities_get;
    /**
     * get general info table about table (for example key size)supported_nof_priorities info
     */
    dnxc_data_table_info_get_f supported_nof_priorities_info_get;
} dnx_data_if_egr_queuing_v1_egress_queues_t;

/*
 * }
 */

/*
 * SUBMODULE  - SCHEDULING:
 * egress scheduling related data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_scheduling_feature_nof
} dnx_data_egr_queuing_v1_scheduling_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_egr_queuing_v1_scheduling_feature_get_f) (
    int unit,
    dnx_data_egr_queuing_v1_scheduling_feature_e feature);

/**
 * \brief returns define data of nof_interface_calendar_slots
 * Module - 'egr_queuing_v1', Submodule - 'scheduling', data - 'nof_interface_calendar_slots'
 * the number of slots in the interface calendar(mux)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_interface_calendar_slots - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_scheduling_nof_interface_calendar_slots_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_EGR_QUEUING_V1 - SCHEDULING:
 * {
 */
/**
 * \brief Interface for egr_queuing_v1 scheduling data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_egr_queuing_v1_scheduling_feature_get_f feature_get;
    /**
     * returns define data of nof_interface_calendar_slots
     */
    dnx_data_egr_queuing_v1_scheduling_nof_interface_calendar_slots_get_f nof_interface_calendar_slots_get;
} dnx_data_if_egr_queuing_v1_scheduling_t;

/*
 * }
 */

/*
 * SUBMODULE  - SHAPING:
 * egress shaping related data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_shaping_feature_nof
} dnx_data_egr_queuing_v1_shaping_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_egr_queuing_v1_shaping_feature_get_f) (
    int unit,
    dnx_data_egr_queuing_v1_shaping_feature_e feature);

/**
 * \brief returns define data of default_max_burst
 * Module - 'egr_queuing_v1', Submodule - 'shaping', data - 'default_max_burst'
 * default max burst size to be used in shapers if user didn't used API to define it, common value is order of magnitude of MTU size ~16k
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_max_burst - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_egr_queuing_v1_shaping_default_max_burst_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_EGR_QUEUING_V1 - SHAPING:
 * {
 */
/**
 * \brief Interface for egr_queuing_v1 shaping data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_egr_queuing_v1_shaping_feature_get_f feature_get;
    /**
     * returns define data of default_max_burst
     */
    dnx_data_egr_queuing_v1_shaping_default_max_burst_get_f default_max_burst_get;
} dnx_data_if_egr_queuing_v1_shaping_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_EGR_QUEUING_V1:
 * {
 */
/**
 * \brief Interface for egr_queuing_v1 data
 */
typedef struct
{
    /**
     * Interface for egr_queuing_v1 general data
     */
    dnx_data_if_egr_queuing_v1_general_t general;
    /**
     * Interface for egr_queuing_v1 egress_interfaces data
     */
    dnx_data_if_egr_queuing_v1_egress_interfaces_t egress_interfaces;
    /**
     * Interface for egr_queuing_v1 egress_queues data
     */
    dnx_data_if_egr_queuing_v1_egress_queues_t egress_queues;
    /**
     * Interface for egr_queuing_v1 scheduling data
     */
    dnx_data_if_egr_queuing_v1_scheduling_t scheduling;
    /**
     * Interface for egr_queuing_v1 shaping data
     */
    dnx_data_if_egr_queuing_v1_shaping_t shaping;
} dnx_data_if_egr_queuing_v1_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_egr_queuing_v1_t dnx_data_egr_queuing_v1;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_EGR_QUEUING_V1_H_*/
/* *INDENT-ON* */
