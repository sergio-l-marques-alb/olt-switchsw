/** \file dnx_data_internal_bfd.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_BFD_H_
/*{*/
#define _DNX_DATA_INTERNAL_BFD_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_bfd.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_bfd_submodule_general,
    dnx_data_bfd_submodule_feature,

    /**
     * Must be last one!
     */
    _dnx_data_bfd_submodule_nof
} dnx_data_bfd_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_bfd_general_feature_get(
    int unit,
    dnx_data_bfd_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_bfd_general_define_nof_bits_bfd_endpoints,
    dnx_data_bfd_general_define_nof_endpoints,
    dnx_data_bfd_general_define_nof_dips_for_bfd_multihop,
    dnx_data_bfd_general_define_nof_bits_dips_for_bfd_multihop,
    dnx_data_bfd_general_define_nof_bfd_server_trap_codes,
    dnx_data_bfd_general_define_nof_profiles_for_tx_rate,
    dnx_data_bfd_general_define_nof_bits_bfd_server_trap_codes,
    dnx_data_bfd_general_define_rmep_index_db_ipv4_const,
    dnx_data_bfd_general_define_rmep_index_db_mpls_const,
    dnx_data_bfd_general_define_rmep_index_db_pwe_const,
    dnx_data_bfd_general_define_nof_req_int_profiles,
    dnx_data_bfd_general_define_nof_bits_your_discr_to_lif,
    dnx_data_bfd_general_define_oamp_bfd_cw_valid_dis_supp,
    dnx_data_bfd_general_define_bfd_over_php_oam_tcam_oam_offset,
    dnx_data_bfd_general_define_bfd_echo_support_in_parser,

    /**
     * Must be last one!
     */
    _dnx_data_bfd_general_define_nof
} dnx_data_bfd_general_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_bits_bfd_endpoints
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_bfd_endpoints'
 * Number of bits needed for BFD endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_bfd_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_nof_bits_bfd_endpoints_get(
    int unit);

/**
 * \brief returns define data of nof_endpoints
 * Module - 'bfd', Submodule - 'general', data - 'nof_endpoints'
 * Maximum number of BFD endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_nof_endpoints_get(
    int unit);

/**
 * \brief returns define data of nof_dips_for_bfd_multihop
 * Module - 'bfd', Submodule - 'general', data - 'nof_dips_for_bfd_multihop'
 * Number of usable BFD Destination IPs for multi-hop
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dips_for_bfd_multihop - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_nof_dips_for_bfd_multihop_get(
    int unit);

/**
 * \brief returns define data of nof_bits_dips_for_bfd_multihop
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_dips_for_bfd_multihop'
 * Number of bits needed for BFD Destination IPs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_dips_for_bfd_multihop - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_nof_bits_dips_for_bfd_multihop_get(
    int unit);

/**
 * \brief returns define data of nof_bfd_server_trap_codes
 * Module - 'bfd', Submodule - 'general', data - 'nof_bfd_server_trap_codes'
 * Number of usable BFD server trap codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bfd_server_trap_codes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_nof_bfd_server_trap_codes_get(
    int unit);

/**
 * \brief returns define data of nof_profiles_for_tx_rate
 * Module - 'bfd', Submodule - 'general', data - 'nof_profiles_for_tx_rate'
 * Number of profiles in TX_RATE register
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_profiles_for_tx_rate - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_nof_profiles_for_tx_rate_get(
    int unit);

/**
 * \brief returns define data of nof_bits_bfd_server_trap_codes
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_bfd_server_trap_codes'
 * Number of bit needed for BFD server trap codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_bfd_server_trap_codes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_nof_bits_bfd_server_trap_codes_get(
    int unit);

/**
 * \brief returns define data of rmep_index_db_ipv4_const
 * Module - 'bfd', Submodule - 'general', data - 'rmep_index_db_ipv4_const'
 * RMEP index DB constant for IPv4 MEPs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_index_db_ipv4_const - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_rmep_index_db_ipv4_const_get(
    int unit);

/**
 * \brief returns define data of rmep_index_db_mpls_const
 * Module - 'bfd', Submodule - 'general', data - 'rmep_index_db_mpls_const'
 * RMEP index DB constant for MEPs over MPLS
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_index_db_mpls_const - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_rmep_index_db_mpls_const_get(
    int unit);

/**
 * \brief returns define data of rmep_index_db_pwe_const
 * Module - 'bfd', Submodule - 'general', data - 'rmep_index_db_pwe_const'
 * RMEP index DB constant for MEPs over PWE
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_index_db_pwe_const - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_rmep_index_db_pwe_const_get(
    int unit);

/**
 * \brief returns define data of nof_req_int_profiles
 * Module - 'bfd', Submodule - 'general', data - 'nof_req_int_profiles'
 * Number of entries in required interrupt table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_req_int_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_nof_req_int_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_bits_your_discr_to_lif
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_your_discr_to_lif'
 * Number of bits from your discriminator to oam_lif
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_your_discr_to_lif - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_nof_bits_your_discr_to_lif_get(
    int unit);

/**
 * \brief returns define data of oamp_bfd_cw_valid_dis_supp
 * Module - 'bfd', Submodule - 'general', data - 'oamp_bfd_cw_valid_dis_supp'
 * Control word validation can be disabled in OAMP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_bfd_cw_valid_dis_supp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_oamp_bfd_cw_valid_dis_supp_get(
    int unit);

/**
 * \brief returns define data of bfd_over_php_oam_tcam_oam_offset
 * Module - 'bfd', Submodule - 'general', data - 'bfd_over_php_oam_tcam_oam_offset'
 * OAM_OFFSET value in OAM TCAM entry for classifying BFD over PHP packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_over_php_oam_tcam_oam_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_bfd_over_php_oam_tcam_oam_offset_get(
    int unit);

/**
 * \brief returns define data of bfd_echo_support_in_parser
 * Module - 'bfd', Submodule - 'general', data - 'bfd_echo_support_in_parser'
 * Whether BFD_ECHO destination port is supported in parser
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfd_echo_support_in_parser - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_bfd_general_bfd_echo_support_in_parser_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_bfd_general_table_nof
} dnx_data_bfd_general_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE FEATURE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_bfd_feature_feature_get(
    int unit,
    dnx_data_bfd_feature_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_bfd_feature_define_nof
} dnx_data_bfd_feature_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_bfd_feature_table_nof
} dnx_data_bfd_feature_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_bfd_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_BFD_H_*/
/* *INDENT-ON* */
