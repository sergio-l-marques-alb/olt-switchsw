/** \file dnx_data_internal_fifodma.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_FIFODMA_H_
/*{*/
#define _DNX_DATA_INTERNAL_FIFODMA_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_fifodma.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_fifodma_submodule_general,

    /**
     * Must be last one!
     */
    _dnx_data_fifodma_submodule_nof
} dnx_data_fifodma_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_fifodma_general_feature_get(
    int unit,
    dnx_data_fifodma_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_fifodma_general_define_nof_fifodma_channels,
    dnx_data_fifodma_general_define_min_nof_host_entries,
    dnx_data_fifodma_general_define_max_nof_host_entries,

    /**
     * Must be last one!
     */
    _dnx_data_fifodma_general_define_nof
} dnx_data_fifodma_general_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_fifodma_channels
 * Module - 'fifodma', Submodule - 'general', data - 'nof_fifodma_channels'
 * number of fifodma channels supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fifodma_channels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fifodma_general_nof_fifodma_channels_get(
    int unit);

/**
 * \brief returns define data of min_nof_host_entries
 * Module - 'fifodma', Submodule - 'general', data - 'min_nof_host_entries'
 * minimum number of host entries supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_nof_host_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fifodma_general_min_nof_host_entries_get(
    int unit);

/**
 * \brief returns define data of max_nof_host_entries
 * Module - 'fifodma', Submodule - 'general', data - 'max_nof_host_entries'
 * maximum number of host entries supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_host_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_fifodma_general_max_nof_host_entries_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_fifodma_general_table_fifodma_map,

    /**
     * Must be last one!
     */
    _dnx_data_fifodma_general_table_nof
} dnx_data_fifodma_general_table_e;

/* Get Data */
/**
 * \brief get table fifodma_map entry 
 * 1-1 map between fifodma channel id and fifodma source
 * 
 * \param [in] unit - unit #
 * \param [in] fifodma_source - fifodma source
 * 
 * \return
 *     fifodma_map - returns the relevant entry values grouped in struct - see dnx_data_fifodma_general_fifodma_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_fifodma_general_fifodma_map_t * dnx_data_fifodma_general_fifodma_map_get(
    int unit,
    int fifodma_source);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'fifodma', Submodule - 'general', table - 'fifodma_map'
 * 1-1 map between fifodma channel id and fifodma source
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fifodma_general_fifodma_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)fifodma_map info
 * 1-1 map between fifodma channel id and fifodma source
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifodma_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_fifodma_general_fifodma_map_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_fifodma_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_FIFODMA_H_*/
/* *INDENT-ON* */
