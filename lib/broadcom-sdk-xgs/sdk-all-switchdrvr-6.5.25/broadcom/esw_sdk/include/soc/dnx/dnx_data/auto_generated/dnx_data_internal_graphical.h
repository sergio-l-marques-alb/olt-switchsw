/** \file dnx_data_internal_graphical.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_GRAPHICAL_H_
/*{*/
#define _DNX_DATA_INTERNAL_GRAPHICAL_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_graphical.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_graphical_submodule_diag,

    /**
     * Must be last one!
     */
    _dnx_data_graphical_submodule_nof
} dnx_data_graphical_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE DIAG:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_graphical_diag_feature_get(
    int unit,
    dnx_data_graphical_diag_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_graphical_diag_define_num_of_rows,
    dnx_data_graphical_diag_define_num_of_index,
    dnx_data_graphical_diag_define_num_of_block_entries,

    /**
     * Must be last one!
     */
    _dnx_data_graphical_diag_define_nof
} dnx_data_graphical_diag_define_e;

/* Get Data */
/**
 * \brief returns define data of num_of_rows
 * Module - 'graphical', Submodule - 'diag', data - 'num_of_rows'
 * rows of diag cou graphic command
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_of_rows - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_graphical_diag_num_of_rows_get(
    int unit);

/**
 * \brief returns define data of num_of_index
 * Module - 'graphical', Submodule - 'diag', data - 'num_of_index'
 * nunber of index per block
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_of_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_graphical_diag_num_of_index_get(
    int unit);

/**
 * \brief returns define data of num_of_block_entries
 * Module - 'graphical', Submodule - 'diag', data - 'num_of_block_entries'
 * number of entries per block
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_of_block_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_graphical_diag_num_of_block_entries_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_graphical_diag_table_blocks_left,
    dnx_data_graphical_diag_table_blocks_right,
    dnx_data_graphical_diag_table_counters,
    dnx_data_graphical_diag_table_drop_reason,

    /**
     * Must be last one!
     */
    _dnx_data_graphical_diag_table_nof
} dnx_data_graphical_diag_table_e;

/* Get Data */
/**
 * \brief get table blocks_left entry 
 * graphical table blocks information on left side(in)
 * 
 * \param [in] unit - unit #
 * \param [in] row - graphic display row
 * \param [in] index - index
 * 
 * \return
 *     blocks_left - returns the relevant entry values grouped in struct - see dnx_data_graphical_diag_blocks_left_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_graphical_diag_blocks_left_t * dnx_data_graphical_diag_blocks_left_get(
    int unit,
    int row,
    int index);

/**
 * \brief get table blocks_right entry 
 * graphical table blocks information on right side(out)
 * 
 * \param [in] unit - unit #
 * \param [in] row - graphic display row
 * \param [in] index - index
 * 
 * \return
 *     blocks_right - returns the relevant entry values grouped in struct - see dnx_data_graphical_diag_blocks_right_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_graphical_diag_blocks_right_t * dnx_data_graphical_diag_blocks_right_get(
    int unit,
    int row,
    int index);

/**
 * \brief get table counters entry 
 * counter information
 * 
 * \param [in] unit - unit #
 * \param [in] block - block information
 * \param [in] index - index in block
 * 
 * \return
 *     counters - returns the relevant entry values grouped in struct - see dnx_data_graphical_diag_counters_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_graphical_diag_counters_t * dnx_data_graphical_diag_counters_get(
    int unit,
    int block,
    int index);

/**
 * \brief get table drop_reason entry 
 * drop reason information
 * 
 * \param [in] unit - unit #
 * \param [in] index - index in block
 * 
 * \return
 *     drop_reason - returns the relevant entry values grouped in struct - see dnx_data_graphical_diag_drop_reason_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_graphical_diag_drop_reason_t * dnx_data_graphical_diag_drop_reason_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'graphical', Submodule - 'diag', table - 'blocks_left'
 * graphical table blocks information on left side(in)
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_graphical_diag_blocks_left_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'graphical', Submodule - 'diag', table - 'blocks_right'
 * graphical table blocks information on right side(out)
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_graphical_diag_blocks_right_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'graphical', Submodule - 'diag', table - 'counters'
 * counter information
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_graphical_diag_counters_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'graphical', Submodule - 'diag', table - 'drop_reason'
 * drop reason information
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_graphical_diag_drop_reason_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)blocks_left info
 * graphical table blocks information on left side(in)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     blocks_left - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_graphical_diag_blocks_left_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)blocks_right info
 * graphical table blocks information on right side(out)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     blocks_right - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_graphical_diag_blocks_right_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)counters info
 * counter information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     counters - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_graphical_diag_counters_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)drop_reason info
 * drop reason information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     drop_reason - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_graphical_diag_drop_reason_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_graphical_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_GRAPHICAL_H_*/
/* *INDENT-ON* */
