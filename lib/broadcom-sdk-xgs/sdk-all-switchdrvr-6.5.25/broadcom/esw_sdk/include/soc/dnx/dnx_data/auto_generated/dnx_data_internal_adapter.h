/** \file dnx_data_internal_adapter.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_ADAPTER_H_
/*{*/
#define _DNX_DATA_INTERNAL_ADAPTER_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_adapter.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_adapter_submodule_tx,
    dnx_data_adapter_submodule_rx,
    dnx_data_adapter_submodule_general,
    dnx_data_adapter_submodule_reg_mem_access,
    dnx_data_adapter_submodule_mdb,

    /**
     * Must be last one!
     */
    _dnx_data_adapter_submodule_nof
} dnx_data_adapter_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE TX:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_adapter_tx_feature_get(
    int unit,
    dnx_data_adapter_tx_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_adapter_tx_define_loopback_enable,

    /**
     * Must be last one!
     */
    _dnx_data_adapter_tx_define_nof
} dnx_data_adapter_tx_define_e;

/* Get Data */
/**
 * \brief returns numeric data of loopback_enable
 * Module - 'adapter', Submodule - 'tx', data - 'loopback_enable'
 * Use loopback in the adapter server instead of go through the pipe when receiving tx packets
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     loopback_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_adapter_tx_loopback_enable_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_adapter_tx_table_nof
} dnx_data_adapter_tx_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE RX:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_adapter_rx_feature_get(
    int unit,
    dnx_data_adapter_rx_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_adapter_rx_define_constant_header_size,

    /**
     * Must be last one!
     */
    _dnx_data_adapter_rx_define_nof
} dnx_data_adapter_rx_define_e;

/* Get Data */
/**
 * \brief returns numeric data of constant_header_size
 * Module - 'adapter', Submodule - 'rx', data - 'constant_header_size'
 * Number of bytes in the constant header of a rx packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     constant_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_adapter_rx_constant_header_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_adapter_rx_table_nof
} dnx_data_adapter_rx_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_adapter_general_feature_get(
    int unit,
    dnx_data_adapter_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_adapter_general_define_nof_sub_units,
    dnx_data_adapter_general_define_lib_ver,
    dnx_data_adapter_general_define_oamp_ms_id,

    /**
     * Must be last one!
     */
    _dnx_data_adapter_general_define_nof
} dnx_data_adapter_general_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_sub_units
 * Module - 'adapter', Submodule - 'general', data - 'nof_sub_units'
 * Number of sub units in the adapter device.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sub_units - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_adapter_general_nof_sub_units_get(
    int unit);

/**
 * \brief returns numeric data of lib_ver
 * Module - 'adapter', Submodule - 'general', data - 'lib_ver'
 * Adapter library version
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lib_ver - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_adapter_general_lib_ver_get(
    int unit);

/**
 * \brief returns numeric data of oamp_ms_id
 * Module - 'adapter', Submodule - 'general', data - 'oamp_ms_id'
 * MS Id for OAMP injection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_ms_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_adapter_general_oamp_ms_id_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_adapter_general_table_Injection,

    /**
     * Must be last one!
     */
    _dnx_data_adapter_general_table_nof
} dnx_data_adapter_general_table_e;

/* Get Data */
/**
 * \brief get table Injection entry 
 * Injection Packet information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     Injection - returns the relevant entry values grouped in struct - see dnx_data_adapter_general_Injection_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_adapter_general_Injection_t * dnx_data_adapter_general_Injection_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'adapter', Submodule - 'general', table - 'Injection'
 * Injection Packet information
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_adapter_general_Injection_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)Injection info
 * Injection Packet information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     Injection - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_adapter_general_Injection_info_get(
    int unit);

/*
 * SUBMODULE REG_MEM_ACCESS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_adapter_reg_mem_access_feature_get(
    int unit,
    dnx_data_adapter_reg_mem_access_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_adapter_reg_mem_access_define_do_collect_enable,
    dnx_data_adapter_reg_mem_access_define_cmic_block_index,
    dnx_data_adapter_reg_mem_access_define_iproc_block_index,
    dnx_data_adapter_reg_mem_access_define_swap_core_index_zero_with_core_index,

    /**
     * Must be last one!
     */
    _dnx_data_adapter_reg_mem_access_define_nof
} dnx_data_adapter_reg_mem_access_define_e;

/* Get Data */
/**
 * \brief returns numeric data of do_collect_enable
 * Module - 'adapter', Submodule - 'reg_mem_access', data - 'do_collect_enable'
 * Use do_collect in adapter in order to collect writes into one bulk write.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     do_collect_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_adapter_reg_mem_access_do_collect_enable_get(
    int unit);

/**
 * \brief returns numeric data of cmic_block_index
 * Module - 'adapter', Submodule - 'reg_mem_access', data - 'cmic_block_index'
 * CMIC Block index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmic_block_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_adapter_reg_mem_access_cmic_block_index_get(
    int unit);

/**
 * \brief returns numeric data of iproc_block_index
 * Module - 'adapter', Submodule - 'reg_mem_access', data - 'iproc_block_index'
 * IPROC Block index for Adapter Access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     iproc_block_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_adapter_reg_mem_access_iproc_block_index_get(
    int unit);

/**
 * \brief returns numeric data of swap_core_index_zero_with_core_index
 * Module - 'adapter', Submodule - 'reg_mem_access', data - 'swap_core_index_zero_with_core_index'
 * swap core zero with other core index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     swap_core_index_zero_with_core_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_adapter_reg_mem_access_swap_core_index_zero_with_core_index_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_adapter_reg_mem_access_table_swap_core_ignore_map,
    dnx_data_adapter_reg_mem_access_table_swap_core_ignore_map_by_global_block_ids_enum,
    dnx_data_adapter_reg_mem_access_table_clear_on_read_mems,
    dnx_data_adapter_reg_mem_access_table_clear_on_read_regs,

    /**
     * Must be last one!
     */
    _dnx_data_adapter_reg_mem_access_table_nof
} dnx_data_adapter_reg_mem_access_table_e;

/* Get Data */
/**
 * \brief get table swap_core_ignore_map entry 
 * ignore swap core feature, for blocks in this map. the key is enum type soc_block_type_e
 * 
 * \param [in] unit - unit #
 * \param [in] block_type - HW block type
 * 
 * \return
 *     swap_core_ignore_map - returns the relevant entry values grouped in struct - see dnx_data_adapter_reg_mem_access_swap_core_ignore_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_adapter_reg_mem_access_swap_core_ignore_map_t * dnx_data_adapter_reg_mem_access_swap_core_ignore_map_get(
    int unit,
    int block_type);

/**
 * \brief get table swap_core_ignore_map_by_global_block_ids_enum entry 
 * ignore swap core feature, for blocks in this map. same as swap_core_ignore_map, just different enum key type
 * 
 * \param [in] unit - unit #
 * \param [in] block_type - HW block type
 * 
 * \return
 *     swap_core_ignore_map_by_global_block_ids_enum - returns the relevant entry values grouped in struct - see dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_t * dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_get(
    int unit,
    int block_type);

/**
 * \brief get table clear_on_read_mems entry 
 * memories which will be  operated in mode clear on read in adapter
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     clear_on_read_mems - returns the relevant entry values grouped in struct - see dnx_data_adapter_reg_mem_access_clear_on_read_mems_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_adapter_reg_mem_access_clear_on_read_mems_t * dnx_data_adapter_reg_mem_access_clear_on_read_mems_get(
    int unit,
    int index);

/**
 * \brief get table clear_on_read_regs entry 
 * registers which will be  operated in mode clear on read in adapter
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     clear_on_read_regs - returns the relevant entry values grouped in struct - see dnx_data_adapter_reg_mem_access_clear_on_read_regs_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_adapter_reg_mem_access_clear_on_read_regs_t * dnx_data_adapter_reg_mem_access_clear_on_read_regs_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'adapter', Submodule - 'reg_mem_access', table - 'swap_core_ignore_map'
 * ignore swap core feature, for blocks in this map. the key is enum type soc_block_type_e
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_adapter_reg_mem_access_swap_core_ignore_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'adapter', Submodule - 'reg_mem_access', table - 'swap_core_ignore_map_by_global_block_ids_enum'
 * ignore swap core feature, for blocks in this map. same as swap_core_ignore_map, just different enum key type
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'adapter', Submodule - 'reg_mem_access', table - 'clear_on_read_mems'
 * memories which will be  operated in mode clear on read in adapter
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_adapter_reg_mem_access_clear_on_read_mems_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'adapter', Submodule - 'reg_mem_access', table - 'clear_on_read_regs'
 * registers which will be  operated in mode clear on read in adapter
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_adapter_reg_mem_access_clear_on_read_regs_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)swap_core_ignore_map info
 * ignore swap core feature, for blocks in this map. the key is enum type soc_block_type_e
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     swap_core_ignore_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_adapter_reg_mem_access_swap_core_ignore_map_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)swap_core_ignore_map_by_global_block_ids_enum info
 * ignore swap core feature, for blocks in this map. same as swap_core_ignore_map, just different enum key type
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     swap_core_ignore_map_by_global_block_ids_enum - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_adapter_reg_mem_access_swap_core_ignore_map_by_global_block_ids_enum_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)clear_on_read_mems info
 * memories which will be  operated in mode clear on read in adapter
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clear_on_read_mems - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_adapter_reg_mem_access_clear_on_read_mems_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)clear_on_read_regs info
 * registers which will be  operated in mode clear on read in adapter
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clear_on_read_regs - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_adapter_reg_mem_access_clear_on_read_regs_info_get(
    int unit);

/*
 * SUBMODULE MDB:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_adapter_mdb_feature_get(
    int unit,
    dnx_data_adapter_mdb_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_adapter_mdb_define_nof
} dnx_data_adapter_mdb_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_adapter_mdb_table_lookup_caller_id_mapping,

    /**
     * Must be last one!
     */
    _dnx_data_adapter_mdb_table_nof
} dnx_data_adapter_mdb_table_e;

/* Get Data */
/**
 * \brief get table lookup_caller_id_mapping entry 
 * 
 * \param [in] unit - unit #
 * \param [in] caller_id - 
 * \param [in] stage_mdb_key - 
 * 
 * \return
 *     lookup_caller_id_mapping - returns the relevant entry values grouped in struct - see dnx_data_adapter_mdb_lookup_caller_id_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_adapter_mdb_lookup_caller_id_mapping_t * dnx_data_adapter_mdb_lookup_caller_id_mapping_get(
    int unit,
    int caller_id,
    int stage_mdb_key);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'adapter', Submodule - 'mdb', table - 'lookup_caller_id_mapping'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_adapter_mdb_lookup_caller_id_mapping_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)lookup_caller_id_mapping info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lookup_caller_id_mapping - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_adapter_mdb_lookup_caller_id_mapping_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_adapter_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_ADAPTER_H_*/
/* *INDENT-ON* */
