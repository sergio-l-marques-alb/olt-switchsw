/** \file dnx/swstate/auto_generated/access/dnx_scheduler_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_SCHEDULER_ACCESS_H__
#define __DNX_SCHEDULER_ACCESS_H__

#include <soc/dnx/swstate/auto_generated/types/dnx_scheduler_types.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_device.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_port.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_sch.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: dnx_scheduler_db_is_init
 */
typedef int (*dnx_scheduler_db_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: dnx_scheduler_db_init
 */
typedef int (*dnx_scheduler_db_init_cb)(
    int unit);

/**
 * implemented by: dnx_scheduler_db_port_shaper_alloc
 */
typedef int (*dnx_scheduler_db_port_shaper_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_scheduler_db_port_shaper_rate_set
 */
typedef int (*dnx_scheduler_db_port_shaper_rate_set_cb)(
    int unit, uint32 port_shaper_idx_0, uint32 port_shaper_idx_1, int rate);

/**
 * implemented by: dnx_scheduler_db_port_shaper_rate_get
 */
typedef int (*dnx_scheduler_db_port_shaper_rate_get_cb)(
    int unit, uint32 port_shaper_idx_0, uint32 port_shaper_idx_1, int *rate);

/**
 * implemented by: dnx_scheduler_db_port_shaper_valid_set
 */
typedef int (*dnx_scheduler_db_port_shaper_valid_set_cb)(
    int unit, uint32 port_shaper_idx_0, uint32 port_shaper_idx_1, int valid);

/**
 * implemented by: dnx_scheduler_db_port_shaper_valid_get
 */
typedef int (*dnx_scheduler_db_port_shaper_valid_get_cb)(
    int unit, uint32 port_shaper_idx_0, uint32 port_shaper_idx_1, int *valid);

/**
 * implemented by: dnx_scheduler_db_hr_alloc
 */
typedef int (*dnx_scheduler_db_hr_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_scheduler_db_hr_is_colored_set
 */
typedef int (*dnx_scheduler_db_hr_is_colored_set_cb)(
    int unit, uint32 hr_idx_0, uint32 hr_idx_1, int is_colored);

/**
 * implemented by: dnx_scheduler_db_hr_is_colored_get
 */
typedef int (*dnx_scheduler_db_hr_is_colored_get_cb)(
    int unit, uint32 hr_idx_0, uint32 hr_idx_1, int *is_colored);

/**
 * implemented by: dnx_scheduler_db_interface_alloc
 */
typedef int (*dnx_scheduler_db_interface_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_scheduler_db_interface_modified_alloc_bitmap
 */
typedef int (*dnx_scheduler_db_interface_modified_alloc_bitmap_cb)(
    int unit, uint32 interface_idx_0);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_set
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_set_cb)(
    int unit, uint32 interface_idx_0, uint32 _bit_num);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_clear
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_clear_cb)(
    int unit, uint32 interface_idx_0, uint32 _bit_num);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_get
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_get_cb)(
    int unit, uint32 interface_idx_0, uint32 _bit_num, uint8* result);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_read
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_read_cb)(
    int unit, uint32 interface_idx_0, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_write
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_write_cb)(
    int unit, uint32 interface_idx_0, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_and
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_and_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_or
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_or_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_xor
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_xor_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_remove
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_remove_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_negate
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_negate_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _count);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_clear
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_clear_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _count);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_set
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_set_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _count);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_null
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_null_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_test
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_test_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_eq
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_eq_cb)(
    int unit, uint32 interface_idx_0, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnx_scheduler_db_interface_modified_bit_range_count
 */
typedef int (*dnx_scheduler_db_interface_modified_bit_range_count_cb)(
    int unit, uint32 interface_idx_0, uint32 _first, uint32 _range, int *result);

/**
 * implemented by: dnx_scheduler_db_fmq_alloc
 */
typedef int (*dnx_scheduler_db_fmq_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_scheduler_db_fmq_reserved_hr_flow_id_set
 */
typedef int (*dnx_scheduler_db_fmq_reserved_hr_flow_id_set_cb)(
    int unit, uint32 fmq_idx_0, uint32 reserved_hr_flow_id_idx_0, int reserved_hr_flow_id);

/**
 * implemented by: dnx_scheduler_db_fmq_reserved_hr_flow_id_get
 */
typedef int (*dnx_scheduler_db_fmq_reserved_hr_flow_id_get_cb)(
    int unit, uint32 fmq_idx_0, uint32 reserved_hr_flow_id_idx_0, int *reserved_hr_flow_id);

/**
 * implemented by: dnx_scheduler_db_fmq_reserved_hr_flow_id_alloc
 */
typedef int (*dnx_scheduler_db_fmq_reserved_hr_flow_id_alloc_cb)(
    int unit, uint32 fmq_idx_0);

/**
 * implemented by: dnx_scheduler_db_fmq_nof_reserved_hr_set
 */
typedef int (*dnx_scheduler_db_fmq_nof_reserved_hr_set_cb)(
    int unit, uint32 fmq_idx_0, int nof_reserved_hr);

/**
 * implemented by: dnx_scheduler_db_fmq_nof_reserved_hr_get
 */
typedef int (*dnx_scheduler_db_fmq_nof_reserved_hr_get_cb)(
    int unit, uint32 fmq_idx_0, int *nof_reserved_hr);

/**
 * implemented by: dnx_scheduler_db_fmq_nof_reserved_hr_inc
 */
typedef int (*dnx_scheduler_db_fmq_nof_reserved_hr_inc_cb)(
    int unit, uint32 fmq_idx_0, uint32 inc_value);

/**
 * implemented by: dnx_scheduler_db_fmq_nof_reserved_hr_dec
 */
typedef int (*dnx_scheduler_db_fmq_nof_reserved_hr_dec_cb)(
    int unit, uint32 fmq_idx_0, uint32 dec_value);

/**
 * implemented by: dnx_scheduler_db_fmq_fmq_flow_id_set
 */
typedef int (*dnx_scheduler_db_fmq_fmq_flow_id_set_cb)(
    int unit, uint32 fmq_idx_0, uint32 fmq_flow_id_idx_0, int fmq_flow_id);

/**
 * implemented by: dnx_scheduler_db_fmq_fmq_flow_id_get
 */
typedef int (*dnx_scheduler_db_fmq_fmq_flow_id_get_cb)(
    int unit, uint32 fmq_idx_0, uint32 fmq_flow_id_idx_0, int *fmq_flow_id);

/**
 * implemented by: dnx_scheduler_db_fmq_fmq_flow_id_alloc
 */
typedef int (*dnx_scheduler_db_fmq_fmq_flow_id_alloc_cb)(
    int unit, uint32 fmq_idx_0);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_enabled_set
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_enabled_set_cb)(
    int unit, sch_virtual_flows_sw_state_type_e is_enabled);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_enabled_get
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_enabled_get_cb)(
    int unit, sch_virtual_flows_sw_state_type_e *is_enabled);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_get
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_get_cb)(
    int unit, uint32 is_flow_virtual_idx_0, CONST SHR_BITDCL **is_flow_virtual);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_alloc_bitmap
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_alloc_bitmap_cb)(
    int unit, uint32 is_flow_virtual_idx_0);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_alloc
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_set
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_set_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _bit_num);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_clear
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_clear_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _bit_num);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_get
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_get_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _bit_num, uint8* result);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_read
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_read_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_write
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_write_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_and
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_and_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_or
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_or_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_xor
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_xor_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_remove
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_remove_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_negate
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_negate_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _count);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_clear
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_clear_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _count);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_set
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_set_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _count);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_null
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_null_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_test
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_test_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_eq
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_eq_cb)(
    int unit, uint32 is_flow_virtual_idx_0, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_count
 */
typedef int (*dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_count_cb)(
    int unit, uint32 is_flow_virtual_idx_0, uint32 _first, uint32 _range, int *result);

/**
 * implemented by: dnx_scheduler_db_general_alloc
 */
typedef int (*dnx_scheduler_db_general_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_scheduler_db_general_reserved_erp_hr_flow_id_set
 */
typedef int (*dnx_scheduler_db_general_reserved_erp_hr_flow_id_set_cb)(
    int unit, uint32 general_idx_0, uint32 reserved_erp_hr_flow_id_idx_0, int reserved_erp_hr_flow_id);

/**
 * implemented by: dnx_scheduler_db_general_reserved_erp_hr_flow_id_get
 */
typedef int (*dnx_scheduler_db_general_reserved_erp_hr_flow_id_get_cb)(
    int unit, uint32 general_idx_0, uint32 reserved_erp_hr_flow_id_idx_0, int *reserved_erp_hr_flow_id);

/**
 * implemented by: dnx_scheduler_db_general_nof_reserved_erp_hr_set
 */
typedef int (*dnx_scheduler_db_general_nof_reserved_erp_hr_set_cb)(
    int unit, uint32 general_idx_0, int nof_reserved_erp_hr);

/**
 * implemented by: dnx_scheduler_db_general_nof_reserved_erp_hr_get
 */
typedef int (*dnx_scheduler_db_general_nof_reserved_erp_hr_get_cb)(
    int unit, uint32 general_idx_0, int *nof_reserved_erp_hr);

/**
 * implemented by: dnx_scheduler_db_general_nof_reserved_erp_hr_inc
 */
typedef int (*dnx_scheduler_db_general_nof_reserved_erp_hr_inc_cb)(
    int unit, uint32 general_idx_0, uint32 inc_value);

/**
 * implemented by: dnx_scheduler_db_general_nof_reserved_erp_hr_dec
 */
typedef int (*dnx_scheduler_db_general_nof_reserved_erp_hr_dec_cb)(
    int unit, uint32 general_idx_0, uint32 dec_value);

/**
 * implemented by: dnx_scheduler_db_general_non_default_flow_order_set
 */
typedef int (*dnx_scheduler_db_general_non_default_flow_order_set_cb)(
    int unit, uint32 general_idx_0, uint8 non_default_flow_order);

/**
 * implemented by: dnx_scheduler_db_general_non_default_flow_order_get
 */
typedef int (*dnx_scheduler_db_general_non_default_flow_order_get_cb)(
    int unit, uint32 general_idx_0, uint8 *non_default_flow_order);

/**
 * implemented by: dnx_scheduler_db_general_is_composite_fq_supported_set
 */
typedef int (*dnx_scheduler_db_general_is_composite_fq_supported_set_cb)(
    int unit, uint32 general_idx_0, uint8 is_composite_fq_supported);

/**
 * implemented by: dnx_scheduler_db_general_is_composite_fq_supported_get
 */
typedef int (*dnx_scheduler_db_general_is_composite_fq_supported_get_cb)(
    int unit, uint32 general_idx_0, uint8 *is_composite_fq_supported);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable rate
 */
typedef struct {
    dnx_scheduler_db_port_shaper_rate_set_cb set;
    dnx_scheduler_db_port_shaper_rate_get_cb get;
} dnx_scheduler_db_port_shaper_rate_cbs;

/**
 * This structure holds the access functions for the variable valid
 */
typedef struct {
    dnx_scheduler_db_port_shaper_valid_set_cb set;
    dnx_scheduler_db_port_shaper_valid_get_cb get;
} dnx_scheduler_db_port_shaper_valid_cbs;

/**
 * This structure holds the access functions for the variable dnx_scheduler_db_shaper_t
 */
typedef struct {
    dnx_scheduler_db_port_shaper_alloc_cb alloc;
    /**
     * Access struct for rate
     */
    dnx_scheduler_db_port_shaper_rate_cbs rate;
    /**
     * Access struct for valid
     */
    dnx_scheduler_db_port_shaper_valid_cbs valid;
} dnx_scheduler_db_port_shaper_cbs;

/**
 * This structure holds the access functions for the variable is_colored
 */
typedef struct {
    dnx_scheduler_db_hr_is_colored_set_cb set;
    dnx_scheduler_db_hr_is_colored_get_cb get;
} dnx_scheduler_db_hr_is_colored_cbs;

/**
 * This structure holds the access functions for the variable dnx_scheduler_db_hr_info_t
 */
typedef struct {
    dnx_scheduler_db_hr_alloc_cb alloc;
    /**
     * Access struct for is_colored
     */
    dnx_scheduler_db_hr_is_colored_cbs is_colored;
} dnx_scheduler_db_hr_cbs;

/**
 * This structure holds the access functions for the variable modified
 */
typedef struct {
    dnx_scheduler_db_interface_modified_alloc_bitmap_cb alloc_bitmap;
    dnx_scheduler_db_interface_modified_bit_set_cb bit_set;
    dnx_scheduler_db_interface_modified_bit_clear_cb bit_clear;
    dnx_scheduler_db_interface_modified_bit_get_cb bit_get;
    dnx_scheduler_db_interface_modified_bit_range_read_cb bit_range_read;
    dnx_scheduler_db_interface_modified_bit_range_write_cb bit_range_write;
    dnx_scheduler_db_interface_modified_bit_range_and_cb bit_range_and;
    dnx_scheduler_db_interface_modified_bit_range_or_cb bit_range_or;
    dnx_scheduler_db_interface_modified_bit_range_xor_cb bit_range_xor;
    dnx_scheduler_db_interface_modified_bit_range_remove_cb bit_range_remove;
    dnx_scheduler_db_interface_modified_bit_range_negate_cb bit_range_negate;
    dnx_scheduler_db_interface_modified_bit_range_clear_cb bit_range_clear;
    dnx_scheduler_db_interface_modified_bit_range_set_cb bit_range_set;
    dnx_scheduler_db_interface_modified_bit_range_null_cb bit_range_null;
    dnx_scheduler_db_interface_modified_bit_range_test_cb bit_range_test;
    dnx_scheduler_db_interface_modified_bit_range_eq_cb bit_range_eq;
    dnx_scheduler_db_interface_modified_bit_range_count_cb bit_range_count;
} dnx_scheduler_db_interface_modified_cbs;

/**
 * This structure holds the access functions for the variable dnx_scheduler_db_interface_info_t
 */
typedef struct {
    dnx_scheduler_db_interface_alloc_cb alloc;
    /**
     * Access struct for modified
     */
    dnx_scheduler_db_interface_modified_cbs modified;
} dnx_scheduler_db_interface_cbs;

/**
 * This structure holds the access functions for the variable reserved_hr_flow_id
 */
typedef struct {
    dnx_scheduler_db_fmq_reserved_hr_flow_id_set_cb set;
    dnx_scheduler_db_fmq_reserved_hr_flow_id_get_cb get;
    dnx_scheduler_db_fmq_reserved_hr_flow_id_alloc_cb alloc;
} dnx_scheduler_db_fmq_reserved_hr_flow_id_cbs;

/**
 * This structure holds the access functions for the variable nof_reserved_hr
 */
typedef struct {
    dnx_scheduler_db_fmq_nof_reserved_hr_set_cb set;
    dnx_scheduler_db_fmq_nof_reserved_hr_get_cb get;
    dnx_scheduler_db_fmq_nof_reserved_hr_inc_cb inc;
    dnx_scheduler_db_fmq_nof_reserved_hr_dec_cb dec;
} dnx_scheduler_db_fmq_nof_reserved_hr_cbs;

/**
 * This structure holds the access functions for the variable fmq_flow_id
 */
typedef struct {
    dnx_scheduler_db_fmq_fmq_flow_id_set_cb set;
    dnx_scheduler_db_fmq_fmq_flow_id_get_cb get;
    dnx_scheduler_db_fmq_fmq_flow_id_alloc_cb alloc;
} dnx_scheduler_db_fmq_fmq_flow_id_cbs;

/**
 * This structure holds the access functions for the variable dnx_scheduler_db_fmq_info
 */
typedef struct {
    dnx_scheduler_db_fmq_alloc_cb alloc;
    /**
     * Access struct for reserved_hr_flow_id
     */
    dnx_scheduler_db_fmq_reserved_hr_flow_id_cbs reserved_hr_flow_id;
    /**
     * Access struct for nof_reserved_hr
     */
    dnx_scheduler_db_fmq_nof_reserved_hr_cbs nof_reserved_hr;
    /**
     * Access struct for fmq_flow_id
     */
    dnx_scheduler_db_fmq_fmq_flow_id_cbs fmq_flow_id;
} dnx_scheduler_db_fmq_cbs;

/**
 * This structure holds the access functions for the variable is_enabled
 */
typedef struct {
    dnx_scheduler_db_virtual_flows_is_enabled_set_cb set;
    dnx_scheduler_db_virtual_flows_is_enabled_get_cb get;
} dnx_scheduler_db_virtual_flows_is_enabled_cbs;

/**
 * This structure holds the access functions for the variable is_flow_virtual
 */
typedef struct {
    dnx_scheduler_db_virtual_flows_is_flow_virtual_get_cb get;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_alloc_bitmap_cb alloc_bitmap;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_alloc_cb alloc;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_set_cb bit_set;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_clear_cb bit_clear;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_get_cb bit_get;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_read_cb bit_range_read;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_write_cb bit_range_write;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_and_cb bit_range_and;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_or_cb bit_range_or;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_xor_cb bit_range_xor;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_remove_cb bit_range_remove;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_negate_cb bit_range_negate;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_clear_cb bit_range_clear;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_set_cb bit_range_set;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_null_cb bit_range_null;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_test_cb bit_range_test;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_eq_cb bit_range_eq;
    dnx_scheduler_db_virtual_flows_is_flow_virtual_bit_range_count_cb bit_range_count;
} dnx_scheduler_db_virtual_flows_is_flow_virtual_cbs;

/**
 * This structure holds the access functions for the variable dnx_scheduler_db_virtual_flows_info_t
 */
typedef struct {
    /**
     * Access struct for is_enabled
     */
    dnx_scheduler_db_virtual_flows_is_enabled_cbs is_enabled;
    /**
     * Access struct for is_flow_virtual
     */
    dnx_scheduler_db_virtual_flows_is_flow_virtual_cbs is_flow_virtual;
} dnx_scheduler_db_virtual_flows_cbs;

/**
 * This structure holds the access functions for the variable reserved_erp_hr_flow_id
 */
typedef struct {
    dnx_scheduler_db_general_reserved_erp_hr_flow_id_set_cb set;
    dnx_scheduler_db_general_reserved_erp_hr_flow_id_get_cb get;
} dnx_scheduler_db_general_reserved_erp_hr_flow_id_cbs;

/**
 * This structure holds the access functions for the variable nof_reserved_erp_hr
 */
typedef struct {
    dnx_scheduler_db_general_nof_reserved_erp_hr_set_cb set;
    dnx_scheduler_db_general_nof_reserved_erp_hr_get_cb get;
    dnx_scheduler_db_general_nof_reserved_erp_hr_inc_cb inc;
    dnx_scheduler_db_general_nof_reserved_erp_hr_dec_cb dec;
} dnx_scheduler_db_general_nof_reserved_erp_hr_cbs;

/**
 * This structure holds the access functions for the variable non_default_flow_order
 */
typedef struct {
    dnx_scheduler_db_general_non_default_flow_order_set_cb set;
    dnx_scheduler_db_general_non_default_flow_order_get_cb get;
} dnx_scheduler_db_general_non_default_flow_order_cbs;

/**
 * This structure holds the access functions for the variable is_composite_fq_supported
 */
typedef struct {
    dnx_scheduler_db_general_is_composite_fq_supported_set_cb set;
    dnx_scheduler_db_general_is_composite_fq_supported_get_cb get;
} dnx_scheduler_db_general_is_composite_fq_supported_cbs;

/**
 * This structure holds the access functions for the variable dnx_scheduler_db_general_info
 */
typedef struct {
    dnx_scheduler_db_general_alloc_cb alloc;
    /**
     * Access struct for reserved_erp_hr_flow_id
     */
    dnx_scheduler_db_general_reserved_erp_hr_flow_id_cbs reserved_erp_hr_flow_id;
    /**
     * Access struct for nof_reserved_erp_hr
     */
    dnx_scheduler_db_general_nof_reserved_erp_hr_cbs nof_reserved_erp_hr;
    /**
     * Access struct for non_default_flow_order
     */
    dnx_scheduler_db_general_non_default_flow_order_cbs non_default_flow_order;
    /**
     * Access struct for is_composite_fq_supported
     */
    dnx_scheduler_db_general_is_composite_fq_supported_cbs is_composite_fq_supported;
} dnx_scheduler_db_general_cbs;

/**
 * This structure holds the access functions for the variable dnx_scheduler_db_t
 */
typedef struct {
    dnx_scheduler_db_is_init_cb is_init;
    dnx_scheduler_db_init_cb init;
    /**
     * Access struct for port_shaper
     */
    dnx_scheduler_db_port_shaper_cbs port_shaper;
    /**
     * Access struct for hr
     */
    dnx_scheduler_db_hr_cbs hr;
    /**
     * Access struct for interface
     */
    dnx_scheduler_db_interface_cbs interface;
    /**
     * Access struct for fmq
     */
    dnx_scheduler_db_fmq_cbs fmq;
    /**
     * Access struct for virtual_flows
     */
    dnx_scheduler_db_virtual_flows_cbs virtual_flows;
    /**
     * Access struct for general
     */
    dnx_scheduler_db_general_cbs general;
} dnx_scheduler_db_cbs;

/*
 * Global Variables
 */

/*
 * FUNCTIONs
 */

/*
 *
 * get_name function for enum type sch_virtual_flows_sw_state_type_e
 * AUTO-GENERATED - DO NOT MODIFY
 *
 */
const char *
sch_virtual_flows_sw_state_type_e_get_name(sch_virtual_flows_sw_state_type_e value);


/*
 * Global Variables
 */

extern dnx_scheduler_db_cbs dnx_scheduler_db;

#endif /* __DNX_SCHEDULER_ACCESS_H__ */
