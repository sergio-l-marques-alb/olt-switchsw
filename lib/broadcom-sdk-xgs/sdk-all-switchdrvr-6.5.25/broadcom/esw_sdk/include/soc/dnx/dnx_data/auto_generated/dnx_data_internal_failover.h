/** \file dnx_data_internal_failover.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_FAILOVER_H_
/*{*/
#define _DNX_DATA_INTERNAL_FAILOVER_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_failover.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_failover_submodule_path_select,
    dnx_data_failover_submodule_facility,

    /**
     * Must be last one!
     */
    _dnx_data_failover_submodule_nof
} dnx_data_failover_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE PATH_SELECT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_failover_path_select_feature_get(
    int unit,
    dnx_data_failover_path_select_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_failover_path_select_define_egress_size,
    dnx_data_failover_path_select_define_ingress_size,
    dnx_data_failover_path_select_define_fec_size,
    dnx_data_failover_path_select_define_egr_no_protection,
    dnx_data_failover_path_select_define_ing_no_protection,
    dnx_data_failover_path_select_define_fec_no_protection,
    dnx_data_failover_path_select_define_fec_facility_protection,
    dnx_data_failover_path_select_define_nof_fec_path_select_banks,
    dnx_data_failover_path_select_define_fec_bank_size,
    dnx_data_failover_path_select_define_in_lif_protection_pointer_nof_msb,
    dnx_data_failover_path_select_define_in_lif_protection_pointer_nof_lsb,

    /**
     * Must be last one!
     */
    _dnx_data_failover_path_select_define_nof
} dnx_data_failover_path_select_define_e;

/* Get Data */
/**
 * \brief returns define data of egress_size
 * Module - 'failover', Submodule - 'path_select', data - 'egress_size'
 * size of egress path select table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_egress_size_get(
    int unit);

/**
 * \brief returns define data of ingress_size
 * Module - 'failover', Submodule - 'path_select', data - 'ingress_size'
 * size of ingress path select table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ingress_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_ingress_size_get(
    int unit);

/**
 * \brief returns define data of fec_size
 * Module - 'failover', Submodule - 'path_select', data - 'fec_size'
 * size of fec path select table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_fec_size_get(
    int unit);

/**
 * \brief returns define data of egr_no_protection
 * Module - 'failover', Submodule - 'path_select', data - 'egr_no_protection'
 * protection path select pointer dedicate for no egress protection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egr_no_protection - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_egr_no_protection_get(
    int unit);

/**
 * \brief returns define data of ing_no_protection
 * Module - 'failover', Submodule - 'path_select', data - 'ing_no_protection'
 * protection path select pointer dedicate for no ingress protection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ing_no_protection - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_ing_no_protection_get(
    int unit);

/**
 * \brief returns define data of fec_no_protection
 * Module - 'failover', Submodule - 'path_select', data - 'fec_no_protection'
 * protection path select pointer dedicate for no fec protection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_no_protection - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_fec_no_protection_get(
    int unit);

/**
 * \brief returns define data of fec_facility_protection
 * Module - 'failover', Submodule - 'path_select', data - 'fec_facility_protection'
 * protection path select pointer dedicate for fec facility protection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_facility_protection - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_fec_facility_protection_get(
    int unit);

/**
 * \brief returns define data of nof_fec_path_select_banks
 * Module - 'failover', Submodule - 'path_select', data - 'nof_fec_path_select_banks'
 * number of banks included in fec protection path select table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fec_path_select_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_nof_fec_path_select_banks_get(
    int unit);

/**
 * \brief returns define data of fec_bank_size
 * Module - 'failover', Submodule - 'path_select', data - 'fec_bank_size'
 * failover fec bank size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_bank_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_fec_bank_size_get(
    int unit);

/**
 * \brief returns define data of in_lif_protection_pointer_nof_msb
 * Module - 'failover', Submodule - 'path_select', data - 'in_lif_protection_pointer_nof_msb'
 * Number MS bits from protection pointer used for HW access to the fields(0-3) of memory IPPA_VTT_PATH_SELECT.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     in_lif_protection_pointer_nof_msb - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_in_lif_protection_pointer_nof_msb_get(
    int unit);

/**
 * \brief returns define data of in_lif_protection_pointer_nof_lsb
 * Module - 'failover', Submodule - 'path_select', data - 'in_lif_protection_pointer_nof_lsb'
 * Number LS bits from protection pointer used for HW access to the entries (0-4095) of memory IPPA_VTT_PATH_SELECT.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     in_lif_protection_pointer_nof_lsb - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_failover_path_select_in_lif_protection_pointer_nof_lsb_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_failover_path_select_table_nof
} dnx_data_failover_path_select_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE FACILITY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_failover_facility_feature_get(
    int unit,
    dnx_data_failover_facility_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_failover_facility_define_nof
} dnx_data_failover_facility_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_failover_facility_table_nof
} dnx_data_failover_facility_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_failover_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_FAILOVER_H_*/
/* *INDENT-ON* */
