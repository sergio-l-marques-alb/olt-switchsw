/** \file dnx_data_max_dram.h
 * 
 * MODULE DATA MAX - 
 * Maintain max value (of all devices) per define
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MAX_DRAM_H_
/*{*/
#define _DNX_DATA_MAX_DRAM_H_
/*
 * INCLUDE FILES:
 * {
 */
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MAX DEFINES:
 * {
 */
/**
 * \brief
 * default model part number
 */
#define DNX_DATA_MAX_DRAM_HBM_DEFAULT_MODEL_PART_NUM (64)

/**
 * \brief
 * Number of DWORDs in a channel
 */
#define DNX_DATA_MAX_DRAM_HBM_NOF_CHANNEL_DWORDS (4)

/**
 * \brief
 * Size of the Write Data Storage memory
 */
#define DNX_DATA_MAX_DRAM_HBM_WDS_SIZE  (256)

/**
 * \brief
 * number of command address bits
 */
#define DNX_DATA_MAX_DRAM_GDDR6_NOF_CA_BITS (11)

/**
 * \brief
 * bytes per channel in GDDR6 dram
 */
#define DNX_DATA_MAX_DRAM_GDDR6_BYTES_PER_CHANNEL (2)

/**
 * \brief
 * the depth of the training fifo in GDDR6 dram
 */
#define DNX_DATA_MAX_DRAM_GDDR6_TRAINING_FIFO_DEPTH (6)

/**
 * \brief
 * Number of AB (all-banks) refresh to wait between consecutive temperature readout iterations
 */
#define DNX_DATA_MAX_DRAM_GDDR6_READOUT_TO_READOUT_PRD (3)

/**
 * \brief
 * Period between AB (all-banks) refresh to MRS command triggering the temperature readout
 */
#define DNX_DATA_MAX_DRAM_GDDR6_REFRESH_TO_READOUT_PRD (35)

/**
 * \brief
 * Period between vendor_id engine done till readout engine done
 */
#define DNX_DATA_MAX_DRAM_GDDR6_READOUT_DONE_TO_DONE_PRD (10)

/**
 * \brief
 * when restoring from OTP the tune data, do it according to the given version format
 */
#define DNX_DATA_MAX_DRAM_GENERAL_INFO_OTP_RESTORE_VERSION (2)

/**
 * \brief
 * max number of drams supported for this device - in other words the size of the dram bitmap
 */
#define DNX_DATA_MAX_DRAM_GENERAL_INFO_MAX_NOF_DRAMS (2)

/**
 * \brief
 * max number of dram channels supported for this device
 */
#define DNX_DATA_MAX_DRAM_GENERAL_INFO_NOF_CHANNELS (8)

/**
 * \brief
 * mode register bit mask
 */
#define DNX_DATA_MAX_DRAM_GENERAL_INFO_MR_MASK (4095)

/**
 * \brief
 * number of mode registers
 */
#define DNX_DATA_MAX_DRAM_GENERAL_INFO_NOF_MRS (16)

/**
 * \brief
 * bit mask to describe the relevant bits in phy register address
 */
#define DNX_DATA_MAX_DRAM_GENERAL_INFO_PHY_ADDRESS_MASK (4095)

/**
 * \brief
 * the number of rows in the ATM
 */
#define DNX_DATA_MAX_DRAM_ADDRESS_TRANSLATION_MATRIX_COLUMN_SIZE (30)

/**
 * \brief
 * nof bytes in each read/write from/to physical address
 */
#define DNX_DATA_MAX_DRAM_ADDRESS_TRANSLATION_PHYSICAL_ADDRESS_TRANSACTION_SIZE (32)

/**
 * \brief
 * number of address translation matrix
 */
#define DNX_DATA_MAX_DRAM_ADDRESS_TRANSLATION_NOF_ATMS (2)

/**
 * \brief
 * number of TDU blocks per DRAM
 */
#define DNX_DATA_MAX_DRAM_ADDRESS_TRANSLATION_NOF_TDUS_PER_DRAM (2)

/**
 * \brief
 * Maximum TDU index
 */
#define DNX_DATA_MAX_DRAM_ADDRESS_TRANSLATION_MAX_TDU_INDEX (3)

/**
 * \brief
 * number of BDBs per core
 */
#define DNX_DATA_MAX_DRAM_BUFFERS_NOF_BDBS (131072)

/**
 * \brief
 * number of free pointer controler banks
 */
#define DNX_DATA_MAX_DRAM_BUFFERS_NOF_FPC_BANKS (4)

/**
 * \brief
 * window size for DRAM block calculation
 */
#define DNX_DATA_MAX_DRAM_DRAM_BLOCK_LEAKY_BUCKET_WINDOW_SIZE (5000)

/**
 * \brief
 * indication whether to reset on deassert of write-minus-read leaky bucket
 */
#define DNX_DATA_MAX_DRAM_DRAM_BLOCK_WMR_RESET_ON_DEASSERT (1)

/**
 * \brief
 * write-minus-read leaky bucket full size
 */
#define DNX_DATA_MAX_DRAM_DRAM_BLOCK_WMR_FULL_SIZE (50)

/**
 * \brief
 * average-read-inflights leaky bucket assert threshold
 */
#define DNX_DATA_MAX_DRAM_DRAM_BLOCK_AVERAGE_READ_INFLIGHTS_ASSERT_THRESHOLD (24)

/**
 * \brief
 * average-read-inflights leaky bucket full size
 */
#define DNX_DATA_MAX_DRAM_DRAM_BLOCK_AVERAGE_READ_INFLIGHTS_FULL_SIZE (44)

/**
 * \brief
 * Number of bits in HBM_TRC field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_TRC_NOF_BITS (7)

/**
 * \brief
 * Number of bits in DRAM_BLOCKED_WRITE_PLUS_READ_LEAKY_BUCKET_INCREMENT_SIZE fields
 */
#define DNX_DATA_MAX_DRAM_DBAL_WPR_INCREMENT_THRESHOLD_NOF_BITS (26)

/**
 * \brief
 * Number of bits in DRAM_BLOCKED_AVERAGE_READ_INFLIGHTS_LEAKY_BUCKET_INCREMENT_SIZE fields
 */
#define DNX_DATA_MAX_DRAM_DBAL_AVERAGE_READ_INFLIGHTS_INCREMENT_THRESHOLD_NOF_BITS (20)

/**
 * \brief
 * Number of bits in DRAM_BLOCKED_AVERAGE_READ_INFLIGHTS_LEAKY_BUCKET_DECREMENT_SIZE fields
 */
#define DNX_DATA_MAX_DRAM_DBAL_AVERAGE_READ_INFLIGHTS_DECREMENT_THRESHOLD_NOF_BITS (20)

/**
 * \brief
 * Number of bits in HBM_PLL_PDIV field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_PLL_PDIV_NOF_BITS (6)

/**
 * \brief
 * Number of bits in HBM_PLL_CH_0_MDIV field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_PLL_CH_MDIV_NOF_BITS (9)

/**
 * \brief
 * Number of bits in HBM_PLL_FREFEFF_INFO field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_PLL_FREFEFF_INFO_NOF_BITS (8)

/**
 * \brief
 * Number of bits in HBM_PLL_AUX_POST_ENABLEB field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_PLL_AUX_POST_ENABLEB_NOF_BITS (4)

/**
 * \brief
 * Number of bits in HBM_PLL_CH_ENABLEB field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_PLL_CH_ENABLEB_NOF_BITS (8)

/**
 * \brief
 * Number of bits in HBM_PLL_AUX_POST_DIFFCMOS_EN field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_PLL_AUX_POST_DIFFCMOS_EN_NOF_BITS (4)

/**
 * \brief
 * Number of bits in dram bist DATA_MODE field
 */
#define DNX_DATA_MAX_DRAM_DBAL_DRAM_BIST_MODE_NOF_BITS (32)

/**
 * \brief
 * Number of bits in HBM_WRITE_LATENCY field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_WRITE_LATENCY_NOF_BITS (5)

/**
 * \brief
 * Number of bits in OUTPUT_ENABLE_DELAY field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_OUTPUT_ENABLE_DELAY_NOF_BITS (5)

/**
 * \brief
 * Number of bits in RD_DATA_EN_DELAY field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_RD_DATA_EN_DELAY_NOF_BITS (6)

/**
 * \brief
 * Number of bits in C_UI_0/1 field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_C_U_NOF_BITS (9)

/**
 * \brief
 * Number of bits in R_UI_0/1 field
 */
#define DNX_DATA_MAX_DRAM_DBAL_HBM_R_U_NOF_BITS (7)

/**
 * \brief
 * Number of HBM spare data results
 */
#define DNX_DATA_MAX_DRAM_FIRMWARE_NOF_HBM_SPARE_DATA_RESULTS (24)

/**
 * \brief
 * Divide sbus_ctrl_clk with this value to create the SBus clock. Max clock after division should be 200MHz.
 */
#define DNX_DATA_MAX_DRAM_FIRMWARE_SBUS_CLOCK_DIVIDER (1)

/**
 * \brief
 * The value which indicates that the SNaP initialization is done
 */
#define DNX_DATA_MAX_DRAM_FIRMWARE_SNAP_STATE_INIT_DONE (18)

/*
 * }
 */

/*}*/
#endif /*_DNX_DATA_MAX_DRAM_H_*/
/* *INDENT-ON* */
