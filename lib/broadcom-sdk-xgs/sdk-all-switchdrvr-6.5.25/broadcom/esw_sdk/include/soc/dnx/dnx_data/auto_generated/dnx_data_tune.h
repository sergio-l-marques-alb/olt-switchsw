/** \file dnx_data_tune.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_TUNE_H_
/*{*/
#define _DNX_DATA_TUNE_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_tune.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_tune
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_tune_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - ECGM:
 * ECGM tune data
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ecgm table port_dp_ratio
 * Table info:
 * ration per dp used for thresholds calculations
 */
typedef struct
{
    /**
     * ratio in percentage, for thresholds calculation per dp (examples to valid values: 100 / 50 / 10)
     */
    int percentage_ratio;
} dnx_data_tune_ecgm_port_dp_ratio_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_tune_ecgm_feature_nof
} dnx_data_tune_ecgm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_tune_ecgm_feature_get_f) (
    int unit,
    dnx_data_tune_ecgm_feature_e feature);

/**
 * \brief returns define data of core_flow_control_percentage_ratio
 * Module - 'tune', Submodule - 'ecgm', data - 'core_flow_control_percentage_ratio'
 * ratio used for core/interface resources flow control thresholds calculations. (percentage units)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_flow_control_percentage_ratio - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_ecgm_core_flow_control_percentage_ratio_get_f) (
    int unit);

/**
 * \brief returns define data of port_queue_uc_flow_control_min_thresh
 * Module - 'tune', Submodule - 'ecgm', data - 'port_queue_uc_flow_control_min_thresh'
 * Minimum threshold for ESGM UC FC Data Buffers and Packet Descriptors per port and per queue.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_queue_uc_flow_control_min_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_ecgm_port_queue_uc_flow_control_min_thresh_get_f) (
    int unit);

/**
 * \brief get table port_dp_ratio entry 
 * ration per dp used for thresholds calculations
 * 
 * \param [in] unit - unit #
 * \param [in] dp - table index
 * 
 * \return
 *     port_dp_ratio - returns the relevant entry values grouped in struct - see dnx_data_tune_ecgm_port_dp_ratio_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_tune_ecgm_port_dp_ratio_t *(
    *dnx_data_tune_ecgm_port_dp_ratio_get_f) (
    int unit,
    int dp);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TUNE - ECGM:
 * {
 */
/**
 * \brief Interface for tune ecgm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_tune_ecgm_feature_get_f feature_get;
    /**
     * returns define data of core_flow_control_percentage_ratio
     */
    dnx_data_tune_ecgm_core_flow_control_percentage_ratio_get_f core_flow_control_percentage_ratio_get;
    /**
     * returns define data of port_queue_uc_flow_control_min_thresh
     */
    dnx_data_tune_ecgm_port_queue_uc_flow_control_min_thresh_get_f port_queue_uc_flow_control_min_thresh_get;
    /**
     * get table port_dp_ratio entry 
     */
    dnx_data_tune_ecgm_port_dp_ratio_get_f port_dp_ratio_get;
    /**
     * get general info table about table (for example key size)port_dp_ratio info
     */
    dnxc_data_table_info_get_f port_dp_ratio_info_get;
} dnx_data_if_tune_ecgm_t;

/*
 * }
 */

/*
 * SUBMODULE  - IQS:
 * IQS tune data
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule iqs table bw_level_rate
 * Table info:
 * stores the read weight profiles that should configured to HW
 */
typedef struct
{
    /**
     * max rate for bandwidth level
     */
    uint32 max;
    /**
     * min rate for bandwidth level
     */
    uint32 min;
} dnx_data_tune_iqs_bw_level_rate_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_tune_iqs_feature_nof
} dnx_data_tune_iqs_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_tune_iqs_feature_get_f) (
    int unit,
    dnx_data_tune_iqs_feature_e feature);

/**
 * \brief returns define data of credit_resolution_up_th
 * Module - 'tune', Submodule - 'iqs', data - 'credit_resolution_up_th'
 * [Byte]. threshold over the delayed size (2 * fabric_delay * port rate) to move to the higher credit resolution
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     credit_resolution_up_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_iqs_credit_resolution_up_th_get_f) (
    int unit);

/**
 * \brief returns numeric data of fabric_delay
 * Module - 'tune', Submodule - 'iqs', data - 'fabric_delay'
 * [nano-sec] credit ingress to egress delay
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_iqs_fabric_delay_get_f) (
    int unit);

/**
 * \brief returns numeric data of fabric_multicast_delay
 * Module - 'tune', Submodule - 'iqs', data - 'fabric_multicast_delay'
 * [nano-sec] credit delay for fmqs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_multicast_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_iqs_fabric_multicast_delay_get_f) (
    int unit);

/**
 * \brief returns numeric data of fmq_max_rate
 * Module - 'tune', Submodule - 'iqs', data - 'fmq_max_rate'
 * [Gbps] fmq credit generator rate
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_max_rate - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_iqs_fmq_max_rate_get_f) (
    int unit);

/**
 * \brief get table bw_level_rate entry 
 * stores the read weight profiles that should configured to HW
 * 
 * \param [in] unit - unit #
 * \param [in] bw_level - bandwidth level
 * 
 * \return
 *     bw_level_rate - returns the relevant entry values grouped in struct - see dnx_data_tune_iqs_bw_level_rate_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_tune_iqs_bw_level_rate_t *(
    *dnx_data_tune_iqs_bw_level_rate_get_f) (
    int unit,
    int bw_level);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TUNE - IQS:
 * {
 */
/**
 * \brief Interface for tune iqs data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_tune_iqs_feature_get_f feature_get;
    /**
     * returns define data of credit_resolution_up_th
     */
    dnx_data_tune_iqs_credit_resolution_up_th_get_f credit_resolution_up_th_get;
    /**
     * returns numeric data of fabric_delay
     */
    dnx_data_tune_iqs_fabric_delay_get_f fabric_delay_get;
    /**
     * returns numeric data of fabric_multicast_delay
     */
    dnx_data_tune_iqs_fabric_multicast_delay_get_f fabric_multicast_delay_get;
    /**
     * returns numeric data of fmq_max_rate
     */
    dnx_data_tune_iqs_fmq_max_rate_get_f fmq_max_rate_get;
    /**
     * get table bw_level_rate entry 
     */
    dnx_data_tune_iqs_bw_level_rate_get_f bw_level_rate_get;
    /**
     * get general info table about table (for example key size)bw_level_rate info
     */
    dnxc_data_table_info_get_f bw_level_rate_info_get;
} dnx_data_if_tune_iqs_t;

/*
 * }
 */

/*
 * SUBMODULE  - FABRIC:
 * fabric tune data
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule fabric table cgm_drop_fabric_multicast_th
 * Table info:
 * Stores the thresholds for all priorities on MC.
 */
typedef struct
{
    /**
     * Threshold value
     */
    uint32 threshold;
} dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_t;

/**
 * \brief Holds values of submodule fabric table cgm_rci_egress_level_factor
 * Table info:
 * Stores the scores for all levels [0-2].
 */
typedef struct
{
    /**
     * Score value
     */
    uint32 score;
} dnx_data_tune_fabric_cgm_rci_egress_level_factor_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Update default values for RCI egress thresholds.
     */
    dnx_data_tune_fabric_cgm_rci_update_egress_th_values,

    /**
     * Must be last one!
     */
    _dnx_data_tune_fabric_feature_nof
} dnx_data_tune_fabric_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_tune_fabric_feature_get_f) (
    int unit,
    dnx_data_tune_fabric_feature_e feature);

/**
 * \brief returns define data of cgm_llfc_pipe_th
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_llfc_pipe_th'
 * threshold for bcmFabricCgmLlfcPipeTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_llfc_pipe_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_fabric_cgm_llfc_pipe_th_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_drop_fabric_class_th
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_drop_fabric_class_th'
 * threshold for bcmFabricCgmDropFabricClassTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_drop_fabric_class_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_fabric_cgm_drop_fabric_class_th_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_rci_high_sev_min_links_param
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_high_sev_min_links_param'
 * threshold for bcmFabricCgmRciHighSeverityMinLinksParam
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_high_sev_min_links_param - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_fabric_cgm_rci_high_sev_min_links_param_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_rci_egress_pipe_level_th_base
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_egress_pipe_level_th_base'
 * base threshold for bcmFabricCgmRciEgressPipeLevelTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_egress_pipe_level_th_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_fabric_cgm_rci_egress_pipe_level_th_base_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_rci_egress_pipe_level_th_offset
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_egress_pipe_level_th_offset'
 * offset threshold for bcmFabricCgmRciEgressPipeLevelTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_egress_pipe_level_th_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_fabric_cgm_rci_egress_pipe_level_th_offset_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_rci_total_egress_pipe_level_th_base
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_total_egress_pipe_level_th_base'
 * base threshold for bcmFabricCgmRciTotalEgressPipeLevelTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_total_egress_pipe_level_th_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_fabric_cgm_rci_total_egress_pipe_level_th_base_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_rci_total_egress_pipe_level_th_offset
 * Module - 'tune', Submodule - 'fabric', data - 'cgm_rci_total_egress_pipe_level_th_offset'
 * offset threshold for bcmFabricCgmRciTotalEgressPipeLevelTh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_rci_total_egress_pipe_level_th_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_tune_fabric_cgm_rci_total_egress_pipe_level_th_offset_get_f) (
    int unit);

/**
 * \brief get table cgm_drop_fabric_multicast_th entry 
 * Stores the thresholds for all priorities on MC.
 * 
 * \param [in] unit - unit #
 * \param [in] priority - Fabric priority
 * 
 * \return
 *     cgm_drop_fabric_multicast_th - returns the relevant entry values grouped in struct - see dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_t *(
    *dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_get_f) (
    int unit,
    int priority);

/**
 * \brief get table cgm_rci_egress_level_factor entry 
 * Stores the scores for all levels [0-2].
 * 
 * \param [in] unit - unit #
 * \param [in] level - Fabric level
 * 
 * \return
 *     cgm_rci_egress_level_factor - returns the relevant entry values grouped in struct - see dnx_data_tune_fabric_cgm_rci_egress_level_factor_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_tune_fabric_cgm_rci_egress_level_factor_t *(
    *dnx_data_tune_fabric_cgm_rci_egress_level_factor_get_f) (
    int unit,
    int level);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TUNE - FABRIC:
 * {
 */
/**
 * \brief Interface for tune fabric data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_tune_fabric_feature_get_f feature_get;
    /**
     * returns define data of cgm_llfc_pipe_th
     */
    dnx_data_tune_fabric_cgm_llfc_pipe_th_get_f cgm_llfc_pipe_th_get;
    /**
     * returns define data of cgm_drop_fabric_class_th
     */
    dnx_data_tune_fabric_cgm_drop_fabric_class_th_get_f cgm_drop_fabric_class_th_get;
    /**
     * returns define data of cgm_rci_high_sev_min_links_param
     */
    dnx_data_tune_fabric_cgm_rci_high_sev_min_links_param_get_f cgm_rci_high_sev_min_links_param_get;
    /**
     * returns define data of cgm_rci_egress_pipe_level_th_base
     */
    dnx_data_tune_fabric_cgm_rci_egress_pipe_level_th_base_get_f cgm_rci_egress_pipe_level_th_base_get;
    /**
     * returns define data of cgm_rci_egress_pipe_level_th_offset
     */
    dnx_data_tune_fabric_cgm_rci_egress_pipe_level_th_offset_get_f cgm_rci_egress_pipe_level_th_offset_get;
    /**
     * returns define data of cgm_rci_total_egress_pipe_level_th_base
     */
    dnx_data_tune_fabric_cgm_rci_total_egress_pipe_level_th_base_get_f cgm_rci_total_egress_pipe_level_th_base_get;
    /**
     * returns define data of cgm_rci_total_egress_pipe_level_th_offset
     */
    dnx_data_tune_fabric_cgm_rci_total_egress_pipe_level_th_offset_get_f cgm_rci_total_egress_pipe_level_th_offset_get;
    /**
     * get table cgm_drop_fabric_multicast_th entry 
     */
    dnx_data_tune_fabric_cgm_drop_fabric_multicast_th_get_f cgm_drop_fabric_multicast_th_get;
    /**
     * get general info table about table (for example key size)cgm_drop_fabric_multicast_th info
     */
    dnxc_data_table_info_get_f cgm_drop_fabric_multicast_th_info_get;
    /**
     * get table cgm_rci_egress_level_factor entry 
     */
    dnx_data_tune_fabric_cgm_rci_egress_level_factor_get_f cgm_rci_egress_level_factor_get;
    /**
     * get general info table about table (for example key size)cgm_rci_egress_level_factor info
     */
    dnxc_data_table_info_get_f cgm_rci_egress_level_factor_info_get;
} dnx_data_if_tune_fabric_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_TUNE:
 * {
 */
/**
 * \brief Interface for tune data
 */
typedef struct
{
    /**
     * Interface for tune ecgm data
     */
    dnx_data_if_tune_ecgm_t ecgm;
    /**
     * Interface for tune iqs data
     */
    dnx_data_if_tune_iqs_t iqs;
    /**
     * Interface for tune fabric data
     */
    dnx_data_if_tune_fabric_t fabric;
} dnx_data_if_tune_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_tune_t dnx_data_tune;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_TUNE_H_*/
/* *INDENT-ON* */
