/** \file dnx_data_internal_dev_init.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_DEV_INIT_H_
/*{*/
#define _DNX_DATA_INTERNAL_DEV_INIT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_dev_init.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_dev_init_submodule_time,
    dnx_data_dev_init_submodule_mem,
    dnx_data_dev_init_submodule_properties,
    dnx_data_dev_init_submodule_general,
    dnx_data_dev_init_submodule_context,
    dnx_data_dev_init_submodule_ha,
    dnx_data_dev_init_submodule_shadow,
    dnx_data_dev_init_submodule_cmc,
    dnx_data_dev_init_submodule_rx,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_submodule_nof
} dnx_data_dev_init_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE TIME:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dev_init_time_feature_get(
    int unit,
    dnx_data_dev_init_time_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dev_init_time_define_analyze,
    dnx_data_dev_init_time_define_init_total_thresh,
    dnx_data_dev_init_time_define_appl_init_total_thresh,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_time_define_nof
} dnx_data_dev_init_time_define_e;

/* Get Data */
/**
 * \brief returns numeric data of analyze
 * Module - 'dev_init', Submodule - 'time', data - 'analyze'
 * whether to analyze init time
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     analyze - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_time_analyze_get(
    int unit);

/**
 * \brief returns define data of init_total_thresh
 * Module - 'dev_init', Submodule - 'time', data - 'init_total_thresh'
 * Default time threshold (in microseconds) for the overall time that the BCM Init takes. This value will be set to the worst run measurement plus 10%
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     init_total_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_time_init_total_thresh_get(
    int unit);

/**
 * \brief returns define data of appl_init_total_thresh
 * Module - 'dev_init', Submodule - 'time', data - 'appl_init_total_thresh'
 * Default time threshold (in microseconds) for the overall time that the APPL Init takes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     appl_init_total_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_time_appl_init_total_thresh_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_dev_init_time_table_step_thresh,
    dnx_data_dev_init_time_table_appl_step_thresh,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_time_table_nof
} dnx_data_dev_init_time_table_e;

/* Get Data */
/**
 * \brief get table step_thresh entry 
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 * 
 * \param [in] unit - unit #
 * \param [in] step_id - IDs for the different steps and sub-steps of the Init.
 * 
 * \return
 *     step_thresh - returns the relevant entry values grouped in struct - see dnx_data_dev_init_time_step_thresh_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_dev_init_time_step_thresh_t * dnx_data_dev_init_time_step_thresh_get(
    int unit,
    int step_id);

/**
 * \brief get table appl_step_thresh entry 
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 * 
 * \param [in] unit - unit #
 * \param [in] step_id - IDs for the different steps and sub-steps of the Init.
 * 
 * \return
 *     appl_step_thresh - returns the relevant entry values grouped in struct - see dnx_data_dev_init_time_appl_step_thresh_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_dev_init_time_appl_step_thresh_t * dnx_data_dev_init_time_appl_step_thresh_get(
    int unit,
    int step_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'time', table - 'step_thresh'
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dev_init_time_step_thresh_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'time', table - 'appl_step_thresh'
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dev_init_time_appl_step_thresh_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)step_thresh info
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     step_thresh - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_dev_init_time_step_thresh_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)appl_step_thresh info
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     appl_step_thresh - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_dev_init_time_appl_step_thresh_info_get(
    int unit);

/*
 * SUBMODULE MEM:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dev_init_mem_feature_get(
    int unit,
    dnx_data_dev_init_mem_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dev_init_mem_define_force_zeros,
    dnx_data_dev_init_mem_define_reset_mode,
    dnx_data_dev_init_mem_define_defaults_verify,
    dnx_data_dev_init_mem_define_emul_ext_init,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_mem_define_nof
} dnx_data_dev_init_mem_define_e;

/* Get Data */
/**
 * \brief returns numeric data of force_zeros
 * Module - 'dev_init', Submodule - 'mem', data - 'force_zeros'
 * if true will force zeroing memories in pcid and emulation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     force_zeros - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_mem_force_zeros_get(
    int unit);

/**
 * \brief returns numeric data of reset_mode
 * Module - 'dev_init', Submodule - 'mem', data - 'reset_mode'
 * method to reset the memories which are not listed in table 'default'. See enum 'dnx_init_mem_reset_mode_e'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     reset_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_mem_reset_mode_get(
    int unit);

/**
 * \brief returns numeric data of defaults_verify
 * Module - 'dev_init', Submodule - 'mem', data - 'defaults_verify'
 * if true will test memory defaults are as exepected
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     defaults_verify - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_mem_defaults_verify_get(
    int unit);

/**
 * \brief returns numeric data of emul_ext_init
 * Module - 'dev_init', Submodule - 'mem', data - 'emul_ext_init'
 * if true tables will be init using external script (see emul_ext_init_path table for script path)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     emul_ext_init - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_mem_emul_ext_init_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_dev_init_mem_table_default,
    dnx_data_dev_init_mem_table_emul_ext_init_path,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_mem_table_nof
} dnx_data_dev_init_mem_table_e;

/* Get Data */
/**
 * \brief get table default entry 
 * default values for memories, any mem that is not mentioned will be set to zero
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     default - returns the relevant entry values grouped in struct - see dnx_data_dev_init_mem_default_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_dev_init_mem_default_t * dnx_data_dev_init_mem_default_get(
    int unit,
    int index);

/**
 * \brief get table emul_ext_init_path entry 
 * path for emulation external memories init script
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     emul_ext_init_path - returns the relevant entry values grouped in struct - see dnx_data_dev_init_mem_emul_ext_init_path_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_dev_init_mem_emul_ext_init_path_t * dnx_data_dev_init_mem_emul_ext_init_path_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'mem', table - 'default'
 * default values for memories, any mem that is not mentioned will be set to zero
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dev_init_mem_default_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'mem', table - 'emul_ext_init_path'
 * path for emulation external memories init script
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dev_init_mem_emul_ext_init_path_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)default info
 * default values for memories, any mem that is not mentioned will be set to zero
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_dev_init_mem_default_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)emul_ext_init_path info
 * path for emulation external memories init script
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     emul_ext_init_path - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_dev_init_mem_emul_ext_init_path_info_get(
    int unit);

/*
 * SUBMODULE PROPERTIES:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dev_init_properties_feature_get(
    int unit,
    dnx_data_dev_init_properties_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dev_init_properties_define_name_max,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_properties_define_nof
} dnx_data_dev_init_properties_define_e;

/* Get Data */
/**
 * \brief returns define data of name_max
 * Module - 'dev_init', Submodule - 'properties', data - 'name_max'
 * max length of soc property name
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     name_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_properties_name_max_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_dev_init_properties_table_unsupported,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_properties_table_nof
} dnx_data_dev_init_properties_table_e;

/* Get Data */
/**
 * \brief get table unsupported entry 
 * unsupported soc properties
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     unsupported - returns the relevant entry values grouped in struct - see dnx_data_dev_init_properties_unsupported_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_dev_init_properties_unsupported_t * dnx_data_dev_init_properties_unsupported_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'properties', table - 'unsupported'
 * unsupported soc properties
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dev_init_properties_unsupported_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)unsupported info
 * unsupported soc properties
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     unsupported - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_dev_init_properties_unsupported_info_get(
    int unit);

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dev_init_general_feature_get(
    int unit,
    dnx_data_dev_init_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dev_init_general_define_access_only,
    dnx_data_dev_init_general_define_heat_up,
    dnx_data_dev_init_general_define_flexe_core_drv_select,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_general_define_nof
} dnx_data_dev_init_general_define_e;

/* Get Data */
/**
 * \brief returns numeric data of access_only
 * Module - 'dev_init', Submodule - 'general', data - 'access_only'
 * boot with access only
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     access_only - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_general_access_only_get(
    int unit);

/**
 * \brief returns numeric data of heat_up
 * Module - 'dev_init', Submodule - 'general', data - 'heat_up'
 * boot for heat-up
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     heat_up - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_general_heat_up_get(
    int unit);

/**
 * \brief returns numeric data of flexe_core_drv_select
 * Module - 'dev_init', Submodule - 'general', data - 'flexe_core_drv_select'
 * selects which FlexE core driver to use, 0: debug; 1: standard
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flexe_core_drv_select - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_general_flexe_core_drv_select_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_dev_init_general_table_clock_power_down,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_general_table_nof
} dnx_data_dev_init_general_table_e;

/* Get Data */
/**
 * \brief get table clock_power_down entry 
 * clock power down registers
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     clock_power_down - returns the relevant entry values grouped in struct - see dnx_data_dev_init_general_clock_power_down_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_dev_init_general_clock_power_down_t * dnx_data_dev_init_general_clock_power_down_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'general', table - 'clock_power_down'
 * clock power down registers
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dev_init_general_clock_power_down_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)clock_power_down info
 * clock power down registers
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clock_power_down - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_dev_init_general_clock_power_down_info_get(
    int unit);

/*
 * SUBMODULE CONTEXT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dev_init_context_feature_get(
    int unit,
    dnx_data_dev_init_context_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dev_init_context_define_forwarding_context_selection_mask_offset,
    dnx_data_dev_init_context_define_forwarding_context_selection_result_offset,
    dnx_data_dev_init_context_define_termination_context_selection_mask_offset,
    dnx_data_dev_init_context_define_termination_context_selection_result_offset,
    dnx_data_dev_init_context_define_trap_context_selection_mask_offset,
    dnx_data_dev_init_context_define_trap_context_selection_result_offset,
    dnx_data_dev_init_context_define_prp_pem_context_selection_mask_offset,
    dnx_data_dev_init_context_define_prp_context_selection_result_offset,
    dnx_data_dev_init_context_define_fwd_reycle_priority_size,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_context_define_nof
} dnx_data_dev_init_context_define_e;

/* Get Data */
/**
 * \brief returns define data of forwarding_context_selection_mask_offset
 * Module - 'dev_init', Submodule - 'context', data - 'forwarding_context_selection_mask_offset'
 * Mask fields offset for Forwarding context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forwarding_context_selection_mask_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_context_forwarding_context_selection_mask_offset_get(
    int unit);

/**
 * \brief returns define data of forwarding_context_selection_result_offset
 * Module - 'dev_init', Submodule - 'context', data - 'forwarding_context_selection_result_offset'
 * Result fields offset for Forwarding context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forwarding_context_selection_result_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_context_forwarding_context_selection_result_offset_get(
    int unit);

/**
 * \brief returns define data of termination_context_selection_mask_offset
 * Module - 'dev_init', Submodule - 'context', data - 'termination_context_selection_mask_offset'
 * Mask fields offset for Termination context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     termination_context_selection_mask_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_context_termination_context_selection_mask_offset_get(
    int unit);

/**
 * \brief returns define data of termination_context_selection_result_offset
 * Module - 'dev_init', Submodule - 'context', data - 'termination_context_selection_result_offset'
 * Result fields offset for Termination context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     termination_context_selection_result_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_context_termination_context_selection_result_offset_get(
    int unit);

/**
 * \brief returns define data of trap_context_selection_mask_offset
 * Module - 'dev_init', Submodule - 'context', data - 'trap_context_selection_mask_offset'
 * Mask fields offset for Trap context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trap_context_selection_mask_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_context_trap_context_selection_mask_offset_get(
    int unit);

/**
 * \brief returns define data of trap_context_selection_result_offset
 * Module - 'dev_init', Submodule - 'context', data - 'trap_context_selection_result_offset'
 * Result fields offset for Trap context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trap_context_selection_result_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_context_trap_context_selection_result_offset_get(
    int unit);

/**
 * \brief returns define data of prp_pem_context_selection_mask_offset
 * Module - 'dev_init', Submodule - 'context', data - 'prp_pem_context_selection_mask_offset'
 * Mask fields offset for PRP PEM CAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     prp_pem_context_selection_mask_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_context_prp_pem_context_selection_mask_offset_get(
    int unit);

/**
 * \brief returns define data of prp_context_selection_result_offset
 * Module - 'dev_init', Submodule - 'context', data - 'prp_context_selection_result_offset'
 * Result fields offset for PRP PEM CAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     prp_context_selection_result_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_context_prp_context_selection_result_offset_get(
    int unit);

/**
 * \brief returns define data of fwd_reycle_priority_size
 * Module - 'dev_init', Submodule - 'context', data - 'fwd_reycle_priority_size'
 * Forward Recycle priority size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fwd_reycle_priority_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_context_fwd_reycle_priority_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_context_table_nof
} dnx_data_dev_init_context_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE HA:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dev_init_ha_feature_get(
    int unit,
    dnx_data_dev_init_ha_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dev_init_ha_define_warmboot_backoff_rate,
    dnx_data_dev_init_ha_define_nof_guaranteed_reboots,
    dnx_data_dev_init_ha_define_warmboot_support,
    dnx_data_dev_init_ha_define_sw_state_max_size,
    dnx_data_dev_init_ha_define_stable_location,
    dnx_data_dev_init_ha_define_stable_size,
    dnx_data_dev_init_ha_define_error_recovery_support,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_ha_define_nof
} dnx_data_dev_init_ha_define_e;

/* Get Data */
/**
 * \brief returns numeric data of warmboot_backoff_rate
 * Module - 'dev_init', Submodule - 'ha', data - 'warmboot_backoff_rate'
 * Exponential rate at which to skip tests in WarmBoot regression sessions
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     warmboot_backoff_rate - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_ha_warmboot_backoff_rate_get(
    int unit);

/**
 * \brief returns numeric data of nof_guaranteed_reboots
 * Module - 'dev_init', Submodule - 'ha', data - 'nof_guaranteed_reboots'
 * Specify number of tests at beginning of session to run reboots for
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_guaranteed_reboots - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_ha_nof_guaranteed_reboots_get(
    int unit);

/**
 * \brief returns numeric data of warmboot_support
 * Module - 'dev_init', Submodule - 'ha', data - 'warmboot_support'
 * specify if unit should support wb
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     warmboot_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_ha_warmboot_support_get(
    int unit);

/**
 * \brief returns numeric data of sw_state_max_size
 * Module - 'dev_init', Submodule - 'ha', data - 'sw_state_max_size'
 * specify the amount of memory (in bytes) preallocated for sw state
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sw_state_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_ha_sw_state_max_size_get(
    int unit);

/**
 * \brief returns numeric data of stable_location
 * Module - 'dev_init', Submodule - 'ha', data - 'stable_location'
 * Specify the stable cache option for Warm Boot operations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_location - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_ha_stable_location_get(
    int unit);

/**
 * \brief returns numeric data of stable_size
 * Module - 'dev_init', Submodule - 'ha', data - 'stable_size'
 * Specify the stable cache size in bytes used for Warm boot operations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_ha_stable_size_get(
    int unit);

/**
 * \brief returns numeric data of error_recovery_support
 * Module - 'dev_init', Submodule - 'ha', data - 'error_recovery_support'
 * Enable/disable Error Recovery support
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     error_recovery_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_ha_error_recovery_support_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_dev_init_ha_table_stable_filename,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_ha_table_nof
} dnx_data_dev_init_ha_table_e;

/* Get Data */
/**
 * \brief get table stable_filename entry 
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_filename - returns the relevant entry values grouped in struct - see dnx_data_dev_init_ha_stable_filename_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_dev_init_ha_stable_filename_t * dnx_data_dev_init_ha_stable_filename_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'ha', table - 'stable_filename'
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dev_init_ha_stable_filename_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)stable_filename info
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_filename - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_dev_init_ha_stable_filename_info_get(
    int unit);

/*
 * SUBMODULE SHADOW:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dev_init_shadow_feature_get(
    int unit,
    dnx_data_dev_init_shadow_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dev_init_shadow_define_cache_enable_all,
    dnx_data_dev_init_shadow_define_cache_enable_ecc,
    dnx_data_dev_init_shadow_define_cache_enable_parity,
    dnx_data_dev_init_shadow_define_cache_enable_specific,
    dnx_data_dev_init_shadow_define_cache_disable_specific,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_shadow_define_nof
} dnx_data_dev_init_shadow_define_e;

/* Get Data */
/**
 * \brief returns numeric data of cache_enable_all
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_all'
 * if true shadow all cacheable memory
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_all - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_shadow_cache_enable_all_get(
    int unit);

/**
 * \brief returns numeric data of cache_enable_ecc
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_ecc'
 * if true shadow all cacheable memory which contain ecc field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_ecc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_shadow_cache_enable_ecc_get(
    int unit);

/**
 * \brief returns numeric data of cache_enable_parity
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_parity'
 * if true shadow all cacheable memory which contain parity field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_parity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_shadow_cache_enable_parity_get(
    int unit);

/**
 * \brief returns numeric data of cache_enable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_specific'
 * if true, some specific memory be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_shadow_cache_enable_specific_get(
    int unit);

/**
 * \brief returns numeric data of cache_disable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_disable_specific'
 * if true, some specific memory won't be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_disable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_shadow_cache_disable_specific_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_dev_init_shadow_table_uncacheable_mem,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_shadow_table_nof
} dnx_data_dev_init_shadow_table_e;

/* Get Data */
/**
 * \brief get table uncacheable_mem entry 
 * uncache memory
 * 
 * \param [in] unit - unit #
 * \param [in] index - uncacheable memory index
 * 
 * \return
 *     uncacheable_mem - returns the relevant entry values grouped in struct - see dnx_data_dev_init_shadow_uncacheable_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_dev_init_shadow_uncacheable_mem_t * dnx_data_dev_init_shadow_uncacheable_mem_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'shadow', table - 'uncacheable_mem'
 * uncache memory
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dev_init_shadow_uncacheable_mem_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)uncacheable_mem info
 * uncache memory
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     uncacheable_mem - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_dev_init_shadow_uncacheable_mem_info_get(
    int unit);

/*
 * SUBMODULE CMC:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dev_init_cmc_feature_get(
    int unit,
    dnx_data_dev_init_cmc_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dev_init_cmc_define_cmc_num,
    dnx_data_dev_init_cmc_define_num_cpu_cosq,
    dnx_data_dev_init_cmc_define_cmc_pci,
    dnx_data_dev_init_cmc_define_pci_cmc_num,
    dnx_data_dev_init_cmc_define_cmc_uc0,
    dnx_data_dev_init_cmc_define_cmc_uc1,
    dnx_data_dev_init_cmc_define_num_queues_pci,
    dnx_data_dev_init_cmc_define_num_queues_uc0,
    dnx_data_dev_init_cmc_define_num_queues_uc1,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_cmc_define_nof
} dnx_data_dev_init_cmc_define_e;

/* Get Data */
/**
 * \brief returns define data of cmc_num
 * Module - 'dev_init', Submodule - 'cmc', data - 'cmc_num'
 * Number of CMC in CMICx
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmc_num - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_cmc_cmc_num_get(
    int unit);

/**
 * \brief returns define data of num_cpu_cosq
 * Module - 'dev_init', Submodule - 'cmc', data - 'num_cpu_cosq'
 * Number of classes-of-service for RX DMA
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_cpu_cosq - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_cmc_num_cpu_cosq_get(
    int unit);

/**
 * \brief returns numeric data of cmc_pci
 * Module - 'dev_init', Submodule - 'cmc', data - 'cmc_pci'
 * CMC in CMICx used by the PCI Host
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmc_pci - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_cmc_cmc_pci_get(
    int unit);

/**
 * \brief returns numeric data of pci_cmc_num
 * Module - 'dev_init', Submodule - 'cmc', data - 'pci_cmc_num'
 * Number of CMCs used by the PCI Host
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pci_cmc_num - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_cmc_pci_cmc_num_get(
    int unit);

/**
 * \brief returns numeric data of cmc_uc0
 * Module - 'dev_init', Submodule - 'cmc', data - 'cmc_uc0'
 * CMC in CMICx used by the micro controller 0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmc_uc0 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_cmc_cmc_uc0_get(
    int unit);

/**
 * \brief returns numeric data of cmc_uc1
 * Module - 'dev_init', Submodule - 'cmc', data - 'cmc_uc1'
 * CMC in CMICx used by the micro controller 0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmc_uc1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_cmc_cmc_uc1_get(
    int unit);

/**
 * \brief returns numeric data of num_queues_pci
 * Module - 'dev_init', Submodule - 'cmc', data - 'num_queues_pci'
 * Number of DMA COS for PCI Host
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_queues_pci - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_cmc_num_queues_pci_get(
    int unit);

/**
 * \brief returns numeric data of num_queues_uc0
 * Module - 'dev_init', Submodule - 'cmc', data - 'num_queues_uc0'
 * Number of DMA COS for micro controller 0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_queues_uc0 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_cmc_num_queues_uc0_get(
    int unit);

/**
 * \brief returns numeric data of num_queues_uc1
 * Module - 'dev_init', Submodule - 'cmc', data - 'num_queues_uc1'
 * Number of DMA COS for micro controller 1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_queues_uc1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_cmc_num_queues_uc1_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_cmc_table_nof
} dnx_data_dev_init_cmc_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE RX:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dev_init_rx_feature_get(
    int unit,
    dnx_data_dev_init_rx_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dev_init_rx_define_rx_pool_nof_pkts,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_rx_define_nof
} dnx_data_dev_init_rx_define_e;

/* Get Data */
/**
 * \brief returns numeric data of rx_pool_nof_pkts
 * Module - 'dev_init', Submodule - 'rx', data - 'rx_pool_nof_pkts'
 * specify number of packets for BCM RX buffer allocation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_pool_nof_pkts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dev_init_rx_rx_pool_nof_pkts_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_rx_table_nof
} dnx_data_dev_init_rx_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dev_init_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_DEV_INIT_H_*/
/* *INDENT-ON* */
