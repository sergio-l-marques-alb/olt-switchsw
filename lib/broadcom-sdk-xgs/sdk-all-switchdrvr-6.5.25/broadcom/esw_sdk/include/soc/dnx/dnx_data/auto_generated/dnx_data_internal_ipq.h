/** \file dnx_data_internal_ipq.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_IPQ_H_
/*{*/
#define _DNX_DATA_INTERNAL_IPQ_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_ipq.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_ipq_submodule_queues,
    dnx_data_ipq_submodule_regions,
    dnx_data_ipq_submodule_tc_map,

    /**
     * Must be last one!
     */
    _dnx_data_ipq_submodule_nof
} dnx_data_ipq_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE QUEUES:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_ipq_queues_feature_get(
    int unit,
    dnx_data_ipq_queues_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_ipq_queues_define_nof_queues,
    dnx_data_ipq_queues_define_min_bundle_size,
    dnx_data_ipq_queues_define_fmq_bundle_size,
    dnx_data_ipq_queues_define_max_fmq_id,
    dnx_data_ipq_queues_define_queue_id_bits,
    dnx_data_ipq_queues_define_voq_offset_bits,
    dnx_data_ipq_queues_define_min_bundle_size_bits,
    dnx_data_ipq_queues_define_tc_profile_from_tm_command_nof_bits,
    dnx_data_ipq_queues_define_flow_quartet_nof_bits,
    dnx_data_ipq_queues_define_invalid_queue,

    /**
     * Must be last one!
     */
    _dnx_data_ipq_queues_define_nof
} dnx_data_ipq_queues_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_queues
 * Module - 'ipq', Submodule - 'queues', data - 'nof_queues'
 * Number of queues per core.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_nof_queues_get(
    int unit);

/**
 * \brief returns define data of min_bundle_size
 * Module - 'ipq', Submodule - 'queues', data - 'min_bundle_size'
 * Minimum number of queues in a queue bundle.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_bundle_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_min_bundle_size_get(
    int unit);

/**
 * \brief returns define data of fmq_bundle_size
 * Module - 'ipq', Submodule - 'queues', data - 'fmq_bundle_size'
 * Bundle size of the single FMQ when working with FMQ simple scheduling mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_bundle_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_fmq_bundle_size_get(
    int unit);

/**
 * \brief returns define data of max_fmq_id
 * Module - 'ipq', Submodule - 'queues', data - 'max_fmq_id'
 * Maximal fabric multicast queue id.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_fmq_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_max_fmq_id_get(
    int unit);

/**
 * \brief returns define data of queue_id_bits
 * Module - 'ipq', Submodule - 'queues', data - 'queue_id_bits'
 * Number of bits in queue id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     queue_id_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_queue_id_bits_get(
    int unit);

/**
 * \brief returns define data of voq_offset_bits
 * Module - 'ipq', Submodule - 'queues', data - 'voq_offset_bits'
 * Number of bits in VOQ offset- used when mapping packet TC (and possible other parameters) to VOQ offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     voq_offset_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_voq_offset_bits_get(
    int unit);

/**
 * \brief returns define data of min_bundle_size_bits
 * Module - 'ipq', Submodule - 'queues', data - 'min_bundle_size_bits'
 * number of bits in min_bundle_size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_bundle_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_min_bundle_size_bits_get(
    int unit);

/**
 * \brief returns define data of tc_profile_from_tm_command_nof_bits
 * Module - 'ipq', Submodule - 'queues', data - 'tc_profile_from_tm_command_nof_bits'
 * number of bits in tc_profile_from_tm_command
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tc_profile_from_tm_command_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_tc_profile_from_tm_command_nof_bits_get(
    int unit);

/**
 * \brief returns define data of flow_quartet_nof_bits
 * Module - 'ipq', Submodule - 'queues', data - 'flow_quartet_nof_bits'
 * number of bits of flow quartet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_quartet_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_flow_quartet_nof_bits_get(
    int unit);

/**
 * \brief returns numeric data of invalid_queue
 * Module - 'ipq', Submodule - 'queues', data - 'invalid_queue'
 * invalid queue id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     invalid_queue - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_queues_invalid_queue_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_ipq_queues_table_nof
} dnx_data_ipq_queues_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE REGIONS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_ipq_regions_feature_get(
    int unit,
    dnx_data_ipq_regions_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_ipq_regions_define_nof_queues,

    /**
     * Must be last one!
     */
    _dnx_data_ipq_regions_define_nof
} dnx_data_ipq_regions_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_queues
 * Module - 'ipq', Submodule - 'regions', data - 'nof_queues'
 * Number of queues in a region.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_regions_nof_queues_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_ipq_regions_table_nof
} dnx_data_ipq_regions_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE TC_MAP:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_ipq_tc_map_feature_get(
    int unit,
    dnx_data_ipq_tc_map_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_ipq_tc_map_define_nof_voq_flow_profiles,
    dnx_data_ipq_tc_map_define_voq_flow_profiles_bits,
    dnx_data_ipq_tc_map_define_default_voq_flow_profile_idx,
    dnx_data_ipq_tc_map_define_nof_sysport_profiles,
    dnx_data_ipq_tc_map_define_default_sysport_profile_idx,
    dnx_data_ipq_tc_map_define_voq_resolution_type_max_value,

    /**
     * Must be last one!
     */
    _dnx_data_ipq_tc_map_define_nof
} dnx_data_ipq_tc_map_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_voq_flow_profiles
 * Module - 'ipq', Submodule - 'tc_map', data - 'nof_voq_flow_profiles'
 * Number of TC mapping profiles for flow based forwarding (used in template manager).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_voq_flow_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_tc_map_nof_voq_flow_profiles_get(
    int unit);

/**
 * \brief returns define data of voq_flow_profiles_bits
 * Module - 'ipq', Submodule - 'tc_map', data - 'voq_flow_profiles_bits'
 * Number of bits to express TC mapping profiles for flow based forwarding.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     voq_flow_profiles_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_tc_map_voq_flow_profiles_bits_get(
    int unit);

/**
 * \brief returns define data of default_voq_flow_profile_idx
 * Module - 'ipq', Submodule - 'tc_map', data - 'default_voq_flow_profile_idx'
 * Default TC mapping profile index for flow based forwarding.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_voq_flow_profile_idx - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_tc_map_default_voq_flow_profile_idx_get(
    int unit);

/**
 * \brief returns define data of nof_sysport_profiles
 * Module - 'ipq', Submodule - 'tc_map', data - 'nof_sysport_profiles'
 * Number of TC mapping profiles for sysport forwarding (used in template manager).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sysport_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_tc_map_nof_sysport_profiles_get(
    int unit);

/**
 * \brief returns define data of default_sysport_profile_idx
 * Module - 'ipq', Submodule - 'tc_map', data - 'default_sysport_profile_idx'
 * Default TC mapping profile index for sysport forwarding.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_sysport_profile_idx - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_tc_map_default_sysport_profile_idx_get(
    int unit);

/**
 * \brief returns define data of voq_resolution_type_max_value
 * Module - 'ipq', Submodule - 'tc_map', data - 'voq_resolution_type_max_value'
 * Maximal value of VOQ_RESOLUTION_TYPE_ENCODING dbal field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     voq_resolution_type_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ipq_tc_map_voq_resolution_type_max_value_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_ipq_tc_map_table_nof
} dnx_data_ipq_tc_map_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_ipq_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_IPQ_H_*/
/* *INDENT-ON* */
