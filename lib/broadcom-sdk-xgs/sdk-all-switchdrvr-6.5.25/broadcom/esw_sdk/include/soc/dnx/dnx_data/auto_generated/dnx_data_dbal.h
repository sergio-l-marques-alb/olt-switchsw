/** \file dnx_data_dbal.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_DBAL_H_
/*{*/
#define _DNX_DATA_DBAL_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_dbal.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_dbal
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_dbal_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - DIAG:
 * dbal diagnostics module
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule diag table loggerInfo
 * Table info:
 * dbal logger info
 */
typedef struct
{
    /**
     * Dbal logger file name
     */
    char *file_name;
} dnx_data_dbal_diag_loggerInfo_t;

/**
 * \brief Holds values of submodule diag table example_1_key
 * Table info:
 * dbal example_1_key
 */
typedef struct
{
    /**
     * value1
     */
    int value1;
} dnx_data_dbal_diag_example_1_key_t;

/**
 * \brief Holds values of submodule diag table example_2_keys
 * Table info:
 * dbal example_2_keys
 */
typedef struct
{
    /**
     * value1
     */
    int value1;
} dnx_data_dbal_diag_example_2_keys_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dbal_diag_feature_nof
} dnx_data_dbal_diag_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dbal_diag_feature_get_f) (
    int unit,
    dnx_data_dbal_diag_feature_e feature);

/**
 * \brief get table loggerInfo entry 
 * dbal logger info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     loggerInfo - returns the relevant entry values grouped in struct - see dnx_data_dbal_diag_loggerInfo_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dbal_diag_loggerInfo_t *(
    *dnx_data_dbal_diag_loggerInfo_get_f) (
    int unit);

/**
 * \brief get table example_1_key entry 
 * dbal example_1_key
 * 
 * \param [in] unit - unit #
 * \param [in] key1 - key1 value
 * 
 * \return
 *     example_1_key - returns the relevant entry values grouped in struct - see dnx_data_dbal_diag_example_1_key_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dbal_diag_example_1_key_t *(
    *dnx_data_dbal_diag_example_1_key_get_f) (
    int unit,
    int key1);

/**
 * \brief get table example_2_keys entry 
 * dbal example_2_keys
 * 
 * \param [in] unit - unit #
 * \param [in] key1 - key1 value
 * \param [in] key2 - key2 value
 * 
 * \return
 *     example_2_keys - returns the relevant entry values grouped in struct - see dnx_data_dbal_diag_example_2_keys_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dbal_diag_example_2_keys_t *(
    *dnx_data_dbal_diag_example_2_keys_get_f) (
    int unit,
    int key1,
    int key2);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DBAL - DIAG:
 * {
 */
/**
 * \brief Interface for dbal diag data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dbal_diag_feature_get_f feature_get;
    /**
     * get table loggerInfo entry 
     */
    dnx_data_dbal_diag_loggerInfo_get_f loggerInfo_get;
    /**
     * get general info table about table (for example key size)loggerInfo info
     */
    dnxc_data_table_info_get_f loggerInfo_info_get;
    /**
     * get table example_1_key entry 
     */
    dnx_data_dbal_diag_example_1_key_get_f example_1_key_get;
    /**
     * get general info table about table (for example key size)example_1_key info
     */
    dnxc_data_table_info_get_f example_1_key_info_get;
    /**
     * get table example_2_keys entry 
     */
    dnx_data_dbal_diag_example_2_keys_get_f example_2_keys_get;
    /**
     * get general info table about table (for example key size)example_2_keys info
     */
    dnxc_data_table_info_get_f example_2_keys_info_get;
} dnx_data_if_dbal_diag_t;

/*
 * }
 */

/*
 * SUBMODULE  - DB_INIT:
 * dbal init module
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Example feature to test dbal Valid flag
     */
    dnx_data_dbal_db_init_invalid_feature_example,
    /**
     * Indicates device supports 0 size payload
     */
    dnx_data_dbal_db_init_zero_size_payload_support,
    /**
     * Apply the encoding/decoding calculation for write/read operations in HL TCAM tables
     */
    dnx_data_dbal_db_init_support_encoding_for_hl_tcam,

    /**
     * Must be last one!
     */
    _dnx_data_dbal_db_init_feature_nof
} dnx_data_dbal_db_init_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dbal_db_init_feature_get_f) (
    int unit,
    dnx_data_dbal_db_init_feature_e feature);

/**
 * \brief returns numeric data of dbal_device_state
 * Module - 'dbal', Submodule - 'db_init', data - 'dbal_device_state'
 * indicates the DBAL state for the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dbal_device_state - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_db_init_dbal_device_state_get_f) (
    int unit);

/**
 * \brief returns numeric data of run_ltt_after_wm_test
 * Module - 'dbal', Submodule - 'db_init', data - 'run_ltt_after_wm_test'
 * Indicates if AT_Sand_Cint_tr_141_dbal_warmboot_ltt should run
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     run_ltt_after_wm_test - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_db_init_run_ltt_after_wm_test_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DBAL - DB_INIT:
 * {
 */
/**
 * \brief Interface for dbal db_init data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dbal_db_init_feature_get_f feature_get;
    /**
     * returns numeric data of dbal_device_state
     */
    dnx_data_dbal_db_init_dbal_device_state_get_f dbal_device_state_get;
    /**
     * returns numeric data of run_ltt_after_wm_test
     */
    dnx_data_dbal_db_init_run_ltt_after_wm_test_get_f run_ltt_after_wm_test_get;
} dnx_data_if_dbal_db_init_t;

/*
 * }
 */

/*
 * SUBMODULE  - TABLE:
 * dbal table module
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dbal_table_feature_nof
} dnx_data_dbal_table_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dbal_table_feature_get_f) (
    int unit,
    dnx_data_dbal_table_feature_e feature);

/**
 * \brief returns define data of nof_dynamic_tables
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables'
 * Number of dynamic dbal tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_table_nof_dynamic_tables_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dynamic_xml_tables
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_xml_tables'
 * Number of dynamic xml dbal tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_xml_tables - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_table_nof_dynamic_xml_tables_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_labels
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_labels'
 * Number of labels in a dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_labels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_table_nof_dynamic_tables_labels_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_key_fields
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_key_fields'
 * Number of key fields in a dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_key_fields - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_table_nof_dynamic_tables_key_fields_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_result_fields
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_result_fields'
 * Number of result fields in a dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_result_fields - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_table_nof_dynamic_tables_result_fields_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_multi_result_types
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_multi_result_types'
 * Number of multiple result types in a dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_multi_result_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_table_nof_dynamic_tables_multi_result_types_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_ppmc_multi_result_types
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_ppmc_multi_result_types'
 * Number of multiple result types in a ppmc dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_ppmc_multi_result_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_table_nof_dynamic_tables_ppmc_multi_result_types_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_dynamic_and_static_tables
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_and_static_tables'
 * Number of dynamic and static dbal tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_and_static_tables - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_table_nof_dynamic_and_static_tables_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DBAL - TABLE:
 * {
 */
/**
 * \brief Interface for dbal table data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dbal_table_feature_get_f feature_get;
    /**
     * returns define data of nof_dynamic_tables
     */
    dnx_data_dbal_table_nof_dynamic_tables_get_f nof_dynamic_tables_get;
    /**
     * returns define data of nof_dynamic_xml_tables
     */
    dnx_data_dbal_table_nof_dynamic_xml_tables_get_f nof_dynamic_xml_tables_get;
    /**
     * returns define data of nof_dynamic_tables_labels
     */
    dnx_data_dbal_table_nof_dynamic_tables_labels_get_f nof_dynamic_tables_labels_get;
    /**
     * returns define data of nof_dynamic_tables_key_fields
     */
    dnx_data_dbal_table_nof_dynamic_tables_key_fields_get_f nof_dynamic_tables_key_fields_get;
    /**
     * returns define data of nof_dynamic_tables_result_fields
     */
    dnx_data_dbal_table_nof_dynamic_tables_result_fields_get_f nof_dynamic_tables_result_fields_get;
    /**
     * returns define data of nof_dynamic_tables_multi_result_types
     */
    dnx_data_dbal_table_nof_dynamic_tables_multi_result_types_get_f nof_dynamic_tables_multi_result_types_get;
    /**
     * returns define data of nof_dynamic_tables_ppmc_multi_result_types
     */
    dnx_data_dbal_table_nof_dynamic_tables_ppmc_multi_result_types_get_f nof_dynamic_tables_ppmc_multi_result_types_get;
    /**
     * returns numeric data of nof_dynamic_and_static_tables
     */
    dnx_data_dbal_table_nof_dynamic_and_static_tables_get_f nof_dynamic_and_static_tables_get;
} dnx_data_if_dbal_table_t;

/*
 * }
 */

/*
 * SUBMODULE  - HW_ENT:
 * dbal hw ent module
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dbal_hw_ent_feature_nof
} dnx_data_dbal_hw_ent_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dbal_hw_ent_feature_get_f) (
    int unit,
    dnx_data_dbal_hw_ent_feature_e feature);

/**
 * \brief returns numeric data of nof_direct_maps
 * Module - 'dbal', Submodule - 'hw_ent', data - 'nof_direct_maps'
 * Number of hw ent direct maps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_direct_maps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_hw_ent_nof_direct_maps_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_groups_maps
 * Module - 'dbal', Submodule - 'hw_ent', data - 'nof_groups_maps'
 * Number of hw ent group maps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_groups_maps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dbal_hw_ent_nof_groups_maps_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DBAL - HW_ENT:
 * {
 */
/**
 * \brief Interface for dbal hw_ent data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dbal_hw_ent_feature_get_f feature_get;
    /**
     * returns numeric data of nof_direct_maps
     */
    dnx_data_dbal_hw_ent_nof_direct_maps_get_f nof_direct_maps_get;
    /**
     * returns numeric data of nof_groups_maps
     */
    dnx_data_dbal_hw_ent_nof_groups_maps_get_f nof_groups_maps_get;
} dnx_data_if_dbal_hw_ent_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_DBAL:
 * {
 */
/**
 * \brief Interface for dbal data
 */
typedef struct
{
    /**
     * Interface for dbal diag data
     */
    dnx_data_if_dbal_diag_t diag;
    /**
     * Interface for dbal db_init data
     */
    dnx_data_if_dbal_db_init_t db_init;
    /**
     * Interface for dbal table data
     */
    dnx_data_if_dbal_table_t table;
    /**
     * Interface for dbal hw_ent data
     */
    dnx_data_if_dbal_hw_ent_t hw_ent;
} dnx_data_if_dbal_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_dbal_t dnx_data_dbal;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_DBAL_H_*/
/* *INDENT-ON* */
