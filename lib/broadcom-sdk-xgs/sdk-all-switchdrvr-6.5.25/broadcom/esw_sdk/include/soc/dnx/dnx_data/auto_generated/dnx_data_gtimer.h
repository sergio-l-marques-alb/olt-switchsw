/** \file dnx_data_gtimer.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_GTIMER_H_
/*{*/
#define _DNX_DATA_GTIMER_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_gtimer.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_gtimer
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_gtimer_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - RTP:
 * Definitions related to RTP global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have RTP GTIMER? (negative logic)
     */
    dnx_data_gtimer_rtp_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_rtp_feature_nof
} dnx_data_gtimer_rtp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_rtp_feature_get_f) (
    int unit,
    dnx_data_gtimer_rtp_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - RTP:
 * {
 */
/**
 * \brief Interface for gtimer rtp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_rtp_feature_get_f feature_get;
} dnx_data_if_gtimer_rtp_t;

/*
 * }
 */

/*
 * SUBMODULE  - FDT:
 * Definitions related to FDT global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have FDT GTIMER? (negative logic)
     */
    dnx_data_gtimer_fdt_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_fdt_feature_nof
} dnx_data_gtimer_fdt_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_fdt_feature_get_f) (
    int unit,
    dnx_data_gtimer_fdt_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - FDT:
 * {
 */
/**
 * \brief Interface for gtimer fdt data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_fdt_feature_get_f feature_get;
} dnx_data_if_gtimer_fdt_t;

/*
 * }
 */

/*
 * SUBMODULE  - FDTL:
 * Definitions related to FDTL global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have FDTL GTIMER? (negative logic)
     */
    dnx_data_gtimer_fdtl_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_fdtl_feature_nof
} dnx_data_gtimer_fdtl_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_fdtl_feature_get_f) (
    int unit,
    dnx_data_gtimer_fdtl_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'fdtl', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_fdtl_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'fdtl', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_fdtl_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - FDTL:
 * {
 */
/**
 * \brief Interface for gtimer fdtl data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_fdtl_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_fdtl_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_fdtl_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_fdtl_t;

/*
 * }
 */

/*
 * SUBMODULE  - PEM:
 * Definitions related to PEM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have PEM GTIMER? (negative logic)
     */
    dnx_data_gtimer_pem_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_pem_feature_nof
} dnx_data_gtimer_pem_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_pem_feature_get_f) (
    int unit,
    dnx_data_gtimer_pem_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'pem', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_pem_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'pem', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_pem_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - PEM:
 * {
 */
/**
 * \brief Interface for gtimer pem data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_pem_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_pem_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_pem_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_pem_t;

/*
 * }
 */

/*
 * SUBMODULE  - DHC:
 * Definitions related to DHC global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have DHC GTIMER? (negative logic)
     */
    dnx_data_gtimer_dhc_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_dhc_feature_nof
} dnx_data_gtimer_dhc_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_dhc_feature_get_f) (
    int unit,
    dnx_data_gtimer_dhc_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - DHC:
 * {
 */
/**
 * \brief Interface for gtimer dhc data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_dhc_feature_get_f feature_get;
} dnx_data_if_gtimer_dhc_t;

/*
 * }
 */

/*
 * SUBMODULE  - CDU:
 * Definitions related to CDU global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have CDU GTIMER? (negative logic)
     */
    dnx_data_gtimer_cdu_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_cdu_feature_nof
} dnx_data_gtimer_cdu_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_cdu_feature_get_f) (
    int unit,
    dnx_data_gtimer_cdu_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'cdu', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cdu_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'cdu', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cdu_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - CDU:
 * {
 */
/**
 * \brief Interface for gtimer cdu data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_cdu_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_cdu_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_cdu_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_cdu_t;

/*
 * }
 */

/*
 * SUBMODULE  - ESB:
 * Definitions related to ESB global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have ESB GTIMER? (negative logic)
     */
    dnx_data_gtimer_esb_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_esb_feature_nof
} dnx_data_gtimer_esb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_esb_feature_get_f) (
    int unit,
    dnx_data_gtimer_esb_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'esb', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_esb_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'esb', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_esb_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - ESB:
 * {
 */
/**
 * \brief Interface for gtimer esb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_esb_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_esb_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_esb_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_esb_t;

/*
 * }
 */

/*
 * SUBMODULE  - CDUM:
 * Definitions related to CDUM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have CDUM GTIMER? (negative logic)
     */
    dnx_data_gtimer_cdum_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_cdum_feature_nof
} dnx_data_gtimer_cdum_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_cdum_feature_get_f) (
    int unit,
    dnx_data_gtimer_cdum_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - CDUM:
 * {
 */
/**
 * \brief Interface for gtimer cdum data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_cdum_feature_get_f feature_get;
} dnx_data_if_gtimer_cdum_t;

/*
 * }
 */

/*
 * SUBMODULE  - MESH_TOPOLOGY:
 * Definitions related to MESH_TOPOLOGY global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have MESH_TOPOLOGY GTIMER? (negative logic)
     */
    dnx_data_gtimer_mesh_topology_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_mesh_topology_feature_nof
} dnx_data_gtimer_mesh_topology_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_mesh_topology_feature_get_f) (
    int unit,
    dnx_data_gtimer_mesh_topology_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - MESH_TOPOLOGY:
 * {
 */
/**
 * \brief Interface for gtimer mesh_topology data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_mesh_topology_feature_get_f feature_get;
} dnx_data_if_gtimer_mesh_topology_t;

/*
 * }
 */

/*
 * SUBMODULE  - BDM:
 * Definitions related to BDM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have BDM GTIMER? (negative logic)
     */
    dnx_data_gtimer_bdm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_bdm_feature_nof
} dnx_data_gtimer_bdm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_bdm_feature_get_f) (
    int unit,
    dnx_data_gtimer_bdm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'bdm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_bdm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_min_value
 * Module - 'gtimer', Submodule - 'bdm', data - 'block_index_min_value'
 * Minimal value for number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_min_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_bdm_block_index_min_value_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'bdm', data - 'block_index_max_value'
 * Maximal value for number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_bdm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - BDM:
 * {
 */
/**
 * \brief Interface for gtimer bdm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_bdm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_bdm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_min_value
     */
    dnx_data_gtimer_bdm_block_index_min_value_get_f block_index_min_value_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_bdm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_bdm_t;

/*
 * }
 */

/*
 * SUBMODULE  - HBC:
 * Definitions related to HBC global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_hbc_feature_nof
} dnx_data_gtimer_hbc_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_hbc_feature_get_f) (
    int unit,
    dnx_data_gtimer_hbc_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'hbc', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_hbc_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'hbc', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_hbc_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - HBC:
 * {
 */
/**
 * \brief Interface for gtimer hbc data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_hbc_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_hbc_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_hbc_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_hbc_t;

/*
 * }
 */

/*
 * SUBMODULE  - ECGM:
 * Definitions related to ECGM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have ECGM GTIMER? (negative logic)
     */
    dnx_data_gtimer_ecgm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ecgm_feature_nof
} dnx_data_gtimer_ecgm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ecgm_feature_get_f) (
    int unit,
    dnx_data_gtimer_ecgm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ecgm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ecgm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ecgm', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ecgm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - ECGM:
 * {
 */
/**
 * \brief Interface for gtimer ecgm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ecgm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ecgm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ecgm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ecgm_t;

/*
 * }
 */

/*
 * SUBMODULE  - CFC:
 * Definitions related to CFC global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have CFC GTIMER? (negative logic)
     */
    dnx_data_gtimer_cfc_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_cfc_feature_nof
} dnx_data_gtimer_cfc_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_cfc_feature_get_f) (
    int unit,
    dnx_data_gtimer_cfc_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'cfc', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cfc_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'cfc', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cfc_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - CFC:
 * {
 */
/**
 * \brief Interface for gtimer cfc data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_cfc_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_cfc_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_cfc_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_cfc_t;

/*
 * }
 */

/*
 * SUBMODULE  - CGM:
 * Definitions related to CGM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have CGM GTIMER? (negative logic)
     */
    dnx_data_gtimer_cgm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_cgm_feature_nof
} dnx_data_gtimer_cgm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_cgm_feature_get_f) (
    int unit,
    dnx_data_gtimer_cgm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'cgm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cgm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'cgm', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cgm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - CGM:
 * {
 */
/**
 * \brief Interface for gtimer cgm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_cgm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_cgm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_cgm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_cgm_t;

/*
 * }
 */

/*
 * SUBMODULE  - CRPS:
 * Definitions related to CRPS global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have CRPS GTIMER? (negative logic)
     */
    dnx_data_gtimer_crps_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_crps_feature_nof
} dnx_data_gtimer_crps_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_crps_feature_get_f) (
    int unit,
    dnx_data_gtimer_crps_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'crps', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_crps_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'crps', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_crps_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - CRPS:
 * {
 */
/**
 * \brief Interface for gtimer crps data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_crps_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_crps_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_crps_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_crps_t;

/*
 * }
 */

/*
 * SUBMODULE  - DDHA:
 * Definitions related to DDHA global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have DDHA GTIMER? (negative logic)
     */
    dnx_data_gtimer_ddha_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ddha_feature_nof
} dnx_data_gtimer_ddha_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ddha_feature_get_f) (
    int unit,
    dnx_data_gtimer_ddha_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ddha', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ddha_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ddha', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ddha_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - DDHA:
 * {
 */
/**
 * \brief Interface for gtimer ddha data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ddha_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ddha_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ddha_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ddha_t;

/*
 * }
 */

/*
 * SUBMODULE  - DDP:
 * Definitions related to DDP global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have DDP GTIMER? (negative logic)
     */
    dnx_data_gtimer_ddp_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ddp_feature_nof
} dnx_data_gtimer_ddp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ddp_feature_get_f) (
    int unit,
    dnx_data_gtimer_ddp_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ddp', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ddp_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ddp', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ddp_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - DDP:
 * {
 */
/**
 * \brief Interface for gtimer ddp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ddp_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ddp_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ddp_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ddp_t;

/*
 * }
 */

/*
 * SUBMODULE  - DQM:
 * Definitions related to DQM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have DQM GTIMER? (negative logic)
     */
    dnx_data_gtimer_dqm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_dqm_feature_nof
} dnx_data_gtimer_dqm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_dqm_feature_get_f) (
    int unit,
    dnx_data_gtimer_dqm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'dqm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_dqm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'dqm', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_dqm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - DQM:
 * {
 */
/**
 * \brief Interface for gtimer dqm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_dqm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_dqm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_dqm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_dqm_t;

/*
 * }
 */

/*
 * SUBMODULE  - EDB:
 * Definitions related to EDB global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have EDB GTIMER? (negative logic)
     */
    dnx_data_gtimer_edb_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_edb_feature_nof
} dnx_data_gtimer_edb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_edb_feature_get_f) (
    int unit,
    dnx_data_gtimer_edb_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'edb', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_edb_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'edb', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_edb_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - EDB:
 * {
 */
/**
 * \brief Interface for gtimer edb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_edb_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_edb_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_edb_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_edb_t;

/*
 * }
 */

/*
 * SUBMODULE  - EPNI:
 * Definitions related to EPNI global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have EPNI GTIMER? (negative logic)
     */
    dnx_data_gtimer_epni_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_epni_feature_nof
} dnx_data_gtimer_epni_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_epni_feature_get_f) (
    int unit,
    dnx_data_gtimer_epni_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'epni', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_epni_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'epni', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_epni_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - EPNI:
 * {
 */
/**
 * \brief Interface for gtimer epni data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_epni_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_epni_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_epni_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_epni_t;

/*
 * }
 */

/*
 * SUBMODULE  - EPRE:
 * Definitions related to EPRE global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have EPRE GTIMER? (negative logic)
     */
    dnx_data_gtimer_epre_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_epre_feature_nof
} dnx_data_gtimer_epre_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_epre_feature_get_f) (
    int unit,
    dnx_data_gtimer_epre_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'epre', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_epre_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'epre', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_epre_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - EPRE:
 * {
 */
/**
 * \brief Interface for gtimer epre data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_epre_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_epre_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_epre_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_epre_t;

/*
 * }
 */

/*
 * SUBMODULE  - EPS:
 * Definitions related to EPS global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have EPS GTIMER? (negative logic)
     */
    dnx_data_gtimer_eps_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_eps_feature_nof
} dnx_data_gtimer_eps_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_eps_feature_get_f) (
    int unit,
    dnx_data_gtimer_eps_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'eps', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_eps_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'eps', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_eps_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - EPS:
 * {
 */
/**
 * \brief Interface for gtimer eps data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_eps_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_eps_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_eps_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_eps_t;

/*
 * }
 */

/*
 * SUBMODULE  - ERPP:
 * Definitions related to ERPP global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have ERPP GTIMER? (negative logic)
     */
    dnx_data_gtimer_erpp_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_erpp_feature_nof
} dnx_data_gtimer_erpp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_erpp_feature_get_f) (
    int unit,
    dnx_data_gtimer_erpp_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'erpp', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_erpp_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'erpp', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_erpp_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - ERPP:
 * {
 */
/**
 * \brief Interface for gtimer erpp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_erpp_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_erpp_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_erpp_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_erpp_t;

/*
 * }
 */

/*
 * SUBMODULE  - ETPPA:
 * Definitions related to ETPPA global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have ETPPA GTIMER? (negative logic)
     */
    dnx_data_gtimer_etppa_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_etppa_feature_nof
} dnx_data_gtimer_etppa_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_etppa_feature_get_f) (
    int unit,
    dnx_data_gtimer_etppa_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'etppa', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_etppa_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'etppa', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_etppa_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - ETPPA:
 * {
 */
/**
 * \brief Interface for gtimer etppa data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_etppa_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_etppa_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_etppa_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_etppa_t;

/*
 * }
 */

/*
 * SUBMODULE  - ETPPB:
 * Definitions related to ETPPB global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have ETPPB GTIMER? (negative logic)
     */
    dnx_data_gtimer_etppb_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_etppb_feature_nof
} dnx_data_gtimer_etppb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_etppb_feature_get_f) (
    int unit,
    dnx_data_gtimer_etppb_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'etppb', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_etppb_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'etppb', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_etppb_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - ETPPB:
 * {
 */
/**
 * \brief Interface for gtimer etppb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_etppb_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_etppb_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_etppb_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_etppb_t;

/*
 * }
 */

/*
 * SUBMODULE  - ETPPC:
 * Definitions related to ETPPC global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have ETPPC GTIMER? (negative logic)
     */
    dnx_data_gtimer_etppc_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_etppc_feature_nof
} dnx_data_gtimer_etppc_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_etppc_feature_get_f) (
    int unit,
    dnx_data_gtimer_etppc_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'etppc', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_etppc_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'etppc', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_etppc_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - ETPPC:
 * {
 */
/**
 * \brief Interface for gtimer etppc data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_etppc_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_etppc_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_etppc_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_etppc_t;

/*
 * }
 */

/*
 * SUBMODULE  - FQP:
 * Definitions related to FQP global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have FQP GTIMER? (negative logic)
     */
    dnx_data_gtimer_fqp_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_fqp_feature_nof
} dnx_data_gtimer_fqp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_fqp_feature_get_f) (
    int unit,
    dnx_data_gtimer_fqp_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'fqp', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_fqp_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'fqp', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_fqp_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - FQP:
 * {
 */
/**
 * \brief Interface for gtimer fqp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_fqp_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_fqp_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_fqp_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_fqp_t;

/*
 * }
 */

/*
 * SUBMODULE  - ILE:
 * Definitions related to ILE global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have ILE GTIMER? (negative logic)
     */
    dnx_data_gtimer_ile_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ile_feature_nof
} dnx_data_gtimer_ile_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ile_feature_get_f) (
    int unit,
    dnx_data_gtimer_ile_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ile', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ile_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ile', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ile_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - ILE:
 * {
 */
/**
 * \brief Interface for gtimer ile data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ile_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ile_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ile_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ile_t;

/*
 * }
 */

/*
 * SUBMODULE  - IPPA:
 * Definitions related to IPPA global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IPPA GTIMER? (negative logic)
     */
    dnx_data_gtimer_ippa_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ippa_feature_nof
} dnx_data_gtimer_ippa_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ippa_feature_get_f) (
    int unit,
    dnx_data_gtimer_ippa_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ippa', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippa_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ippa', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippa_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IPPA:
 * {
 */
/**
 * \brief Interface for gtimer ippa data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ippa_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ippa_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ippa_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ippa_t;

/*
 * }
 */

/*
 * SUBMODULE  - IPPB:
 * Definitions related to IPPB global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IPPB GTIMER? (negative logic)
     */
    dnx_data_gtimer_ippb_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ippb_feature_nof
} dnx_data_gtimer_ippb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ippb_feature_get_f) (
    int unit,
    dnx_data_gtimer_ippb_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ippb', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippb_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ippb', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippb_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IPPB:
 * {
 */
/**
 * \brief Interface for gtimer ippb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ippb_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ippb_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ippb_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ippb_t;

/*
 * }
 */

/*
 * SUBMODULE  - IPPC:
 * Definitions related to IPPC global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IPPC GTIMER? (negative logic)
     */
    dnx_data_gtimer_ippc_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ippc_feature_nof
} dnx_data_gtimer_ippc_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ippc_feature_get_f) (
    int unit,
    dnx_data_gtimer_ippc_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ippc', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippc_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ippc', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippc_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IPPC:
 * {
 */
/**
 * \brief Interface for gtimer ippc data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ippc_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ippc_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ippc_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ippc_t;

/*
 * }
 */

/*
 * SUBMODULE  - IPPD:
 * Definitions related to IPPD global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IPPD GTIMER? (negative logic)
     */
    dnx_data_gtimer_ippd_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ippd_feature_nof
} dnx_data_gtimer_ippd_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ippd_feature_get_f) (
    int unit,
    dnx_data_gtimer_ippd_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ippd', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippd_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ippd', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippd_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IPPD:
 * {
 */
/**
 * \brief Interface for gtimer ippd data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ippd_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ippd_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ippd_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ippd_t;

/*
 * }
 */

/*
 * SUBMODULE  - IPPE:
 * Definitions related to IPPE global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IPPE GTIMER? (negative logic)
     */
    dnx_data_gtimer_ippe_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ippe_feature_nof
} dnx_data_gtimer_ippe_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ippe_feature_get_f) (
    int unit,
    dnx_data_gtimer_ippe_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ippe', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippe_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ippe', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippe_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IPPE:
 * {
 */
/**
 * \brief Interface for gtimer ippe data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ippe_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ippe_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ippe_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ippe_t;

/*
 * }
 */

/*
 * SUBMODULE  - IPPF:
 * Definitions related to IPPF global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IPPF GTIMER? (negative logic)
     */
    dnx_data_gtimer_ippf_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ippf_feature_nof
} dnx_data_gtimer_ippf_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ippf_feature_get_f) (
    int unit,
    dnx_data_gtimer_ippf_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ippf', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippf_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ippf', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ippf_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IPPF:
 * {
 */
/**
 * \brief Interface for gtimer ippf data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ippf_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ippf_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ippf_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ippf_t;

/*
 * }
 */

/*
 * SUBMODULE  - IPS:
 * Definitions related to IPS global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IPS GTIMER? (negative logic)
     */
    dnx_data_gtimer_ips_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ips_feature_nof
} dnx_data_gtimer_ips_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ips_feature_get_f) (
    int unit,
    dnx_data_gtimer_ips_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ips', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ips_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ips', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ips_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IPS:
 * {
 */
/**
 * \brief Interface for gtimer ips data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ips_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ips_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ips_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ips_t;

/*
 * }
 */

/*
 * SUBMODULE  - IPT:
 * Definitions related to IPT global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IPT GTIMER? (negative logic)
     */
    dnx_data_gtimer_ipt_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ipt_feature_nof
} dnx_data_gtimer_ipt_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ipt_feature_get_f) (
    int unit,
    dnx_data_gtimer_ipt_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ipt', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ipt_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ipt', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ipt_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IPT:
 * {
 */
/**
 * \brief Interface for gtimer ipt data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ipt_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ipt_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ipt_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ipt_t;

/*
 * }
 */

/*
 * SUBMODULE  - IQM:
 * Definitions related to IPT global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IPT GTIMER? (negative logic)
     */
    dnx_data_gtimer_iqm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_iqm_feature_nof
} dnx_data_gtimer_iqm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_iqm_feature_get_f) (
    int unit,
    dnx_data_gtimer_iqm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'iqm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_iqm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'iqm', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_iqm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IQM:
 * {
 */
/**
 * \brief Interface for gtimer iqm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_iqm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_iqm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_iqm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_iqm_t;

/*
 * }
 */

/*
 * SUBMODULE  - IRE:
 * Definitions related to IRE global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have IRE GTIMER? (negative logic)
     */
    dnx_data_gtimer_ire_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ire_feature_nof
} dnx_data_gtimer_ire_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ire_feature_get_f) (
    int unit,
    dnx_data_gtimer_ire_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ire', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ire_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ire', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ire_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - IRE:
 * {
 */
/**
 * \brief Interface for gtimer ire data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ire_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ire_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ire_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ire_t;

/*
 * }
 */

/*
 * SUBMODULE  - ITPP:
 * Definitions related to ITPP global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have ITPP GTIMER? (negative logic)
     */
    dnx_data_gtimer_itpp_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_itpp_feature_nof
} dnx_data_gtimer_itpp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_itpp_feature_get_f) (
    int unit,
    dnx_data_gtimer_itpp_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'itpp', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_itpp_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'itpp', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_itpp_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - ITPP:
 * {
 */
/**
 * \brief Interface for gtimer itpp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_itpp_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_itpp_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_itpp_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_itpp_t;

/*
 * }
 */

/*
 * SUBMODULE  - ITPPD:
 * Definitions related to ITPPD global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have ITPPD GTIMER? (negative logic)
     */
    dnx_data_gtimer_itppd_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_itppd_feature_nof
} dnx_data_gtimer_itppd_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_itppd_feature_get_f) (
    int unit,
    dnx_data_gtimer_itppd_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'itppd', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_itppd_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'itppd', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_itppd_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - ITPPD:
 * {
 */
/**
 * \brief Interface for gtimer itppd data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_itppd_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_itppd_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_itppd_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_itppd_t;

/*
 * }
 */

/*
 * SUBMODULE  - KAPS:
 * Definitions related to KAPS global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have KAPS GTIMER? (negative logic)
     */
    dnx_data_gtimer_kaps_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_kaps_feature_nof
} dnx_data_gtimer_kaps_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_kaps_feature_get_f) (
    int unit,
    dnx_data_gtimer_kaps_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'kaps', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_kaps_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'kaps', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_kaps_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - KAPS:
 * {
 */
/**
 * \brief Interface for gtimer kaps data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_kaps_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_kaps_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_kaps_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_kaps_t;

/*
 * }
 */

/*
 * SUBMODULE  - MCP:
 * Definitions related to MCP global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have MCP GTIMER? (negative logic)
     */
    dnx_data_gtimer_mcp_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_mcp_feature_nof
} dnx_data_gtimer_mcp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_mcp_feature_get_f) (
    int unit,
    dnx_data_gtimer_mcp_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'mcp', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_mcp_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'mcp', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_mcp_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - MCP:
 * {
 */
/**
 * \brief Interface for gtimer mcp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_mcp_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_mcp_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_mcp_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_mcp_t;

/*
 * }
 */

/*
 * SUBMODULE  - MRPS:
 * Definitions related to MRPS global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have MRPS GTIMER? (negative logic)
     */
    dnx_data_gtimer_mrps_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_mrps_feature_nof
} dnx_data_gtimer_mrps_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_mrps_feature_get_f) (
    int unit,
    dnx_data_gtimer_mrps_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'mrps', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_mrps_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'mrps', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_mrps_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - MRPS:
 * {
 */
/**
 * \brief Interface for gtimer mrps data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_mrps_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_mrps_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_mrps_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_mrps_t;

/*
 * }
 */

/*
 * SUBMODULE  - NMG:
 * Definitions related to MNG global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have MNG GTIMER? (negative logic)
     */
    dnx_data_gtimer_nmg_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_nmg_feature_nof
} dnx_data_gtimer_nmg_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_nmg_feature_get_f) (
    int unit,
    dnx_data_gtimer_nmg_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'nmg', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_nmg_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'nmg', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_nmg_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - NMG:
 * {
 */
/**
 * \brief Interface for gtimer nmg data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_nmg_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_nmg_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_nmg_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_nmg_t;

/*
 * }
 */

/*
 * SUBMODULE  - OCB:
 * Definitions related to OCB global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have OCB GTIMER? (negative logic)
     */
    dnx_data_gtimer_ocb_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ocb_feature_nof
} dnx_data_gtimer_ocb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ocb_feature_get_f) (
    int unit,
    dnx_data_gtimer_ocb_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ocb', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ocb_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ocb', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ocb_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - OCB:
 * {
 */
/**
 * \brief Interface for gtimer ocb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ocb_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ocb_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ocb_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ocb_t;

/*
 * }
 */

/*
 * SUBMODULE  - PDM:
 * Definitions related to PDM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have PDM GTIMER? (negative logic)
     */
    dnx_data_gtimer_pdm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_pdm_feature_nof
} dnx_data_gtimer_pdm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_pdm_feature_get_f) (
    int unit,
    dnx_data_gtimer_pdm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'pdm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_pdm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'pdm', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_pdm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - PDM:
 * {
 */
/**
 * \brief Interface for gtimer pdm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_pdm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_pdm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_pdm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_pdm_t;

/*
 * }
 */

/*
 * SUBMODULE  - PQP:
 * Definitions related to PQP global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have PQP GTIMER? (negative logic)
     */
    dnx_data_gtimer_pqp_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_pqp_feature_nof
} dnx_data_gtimer_pqp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_pqp_feature_get_f) (
    int unit,
    dnx_data_gtimer_pqp_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'pqp', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_pqp_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'pqp', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_pqp_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - PQP:
 * {
 */
/**
 * \brief Interface for gtimer pqp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_pqp_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_pqp_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_pqp_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_pqp_t;

/*
 * }
 */

/*
 * SUBMODULE  - RQP:
 * Definitions related to PQP global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have PQP GTIMER? (negative logic)
     */
    dnx_data_gtimer_rqp_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_rqp_feature_nof
} dnx_data_gtimer_rqp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_rqp_feature_get_f) (
    int unit,
    dnx_data_gtimer_rqp_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'rqp', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_rqp_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'rqp', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_rqp_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - RQP:
 * {
 */
/**
 * \brief Interface for gtimer rqp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_rqp_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_rqp_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_rqp_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_rqp_t;

/*
 * }
 */

/*
 * SUBMODULE  - SCH:
 * Definitions related to SCH global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have SCH GTIMER? (negative logic)
     */
    dnx_data_gtimer_sch_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_sch_feature_nof
} dnx_data_gtimer_sch_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_sch_feature_get_f) (
    int unit,
    dnx_data_gtimer_sch_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'sch', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_sch_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'sch', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_sch_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - SCH:
 * {
 */
/**
 * \brief Interface for gtimer sch data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_sch_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_sch_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_sch_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_sch_t;

/*
 * }
 */

/*
 * SUBMODULE  - SIF:
 * Definitions related to SIF global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have SIF GTIMER? (negative logic)
     */
    dnx_data_gtimer_sif_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_sif_feature_nof
} dnx_data_gtimer_sif_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_sif_feature_get_f) (
    int unit,
    dnx_data_gtimer_sif_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'sif', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_sif_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'sif', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_sif_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - SIF:
 * {
 */
/**
 * \brief Interface for gtimer sif data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_sif_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_sif_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_sif_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_sif_t;

/*
 * }
 */

/*
 * SUBMODULE  - SPB:
 * Definitions related to SPB global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have SPB GTIMER? (negative logic)
     */
    dnx_data_gtimer_spb_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_spb_feature_nof
} dnx_data_gtimer_spb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_spb_feature_get_f) (
    int unit,
    dnx_data_gtimer_spb_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'spb', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_spb_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'spb', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_spb_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - SPB:
 * {
 */
/**
 * \brief Interface for gtimer spb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_spb_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_spb_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_spb_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_spb_t;

/*
 * }
 */

/*
 * SUBMODULE  - SQM:
 * Definitions related to SQM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have SQM GTIMER? (negative logic)
     */
    dnx_data_gtimer_sqm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_sqm_feature_nof
} dnx_data_gtimer_sqm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_sqm_feature_get_f) (
    int unit,
    dnx_data_gtimer_sqm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'sqm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_sqm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'sqm', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_sqm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - SQM:
 * {
 */
/**
 * \brief Interface for gtimer sqm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_sqm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_sqm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_sqm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_sqm_t;

/*
 * }
 */

/*
 * SUBMODULE  - TCAM:
 * Definitions related to TCAM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have TCAM GTIMER? (negative logic)
     */
    dnx_data_gtimer_tcam_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_tcam_feature_nof
} dnx_data_gtimer_tcam_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_tcam_feature_get_f) (
    int unit,
    dnx_data_gtimer_tcam_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'tcam', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_tcam_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'tcam', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_tcam_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - TCAM:
 * {
 */
/**
 * \brief Interface for gtimer tcam data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_tcam_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_tcam_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_tcam_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_tcam_t;

/*
 * }
 */

/*
 * SUBMODULE  - TDU:
 * Definitions related to TDU global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have TDU GTIMER? (negative logic)
     */
    dnx_data_gtimer_tdu_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_tdu_feature_nof
} dnx_data_gtimer_tdu_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_tdu_feature_get_f) (
    int unit,
    dnx_data_gtimer_tdu_feature_e feature);

/**
 * \brief returns numeric data of block_index_size
 * Module - 'gtimer', Submodule - 'tdu', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_tdu_block_index_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of block_index_max_value
 * Module - 'gtimer', Submodule - 'tdu', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_tdu_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - TDU:
 * {
 */
/**
 * \brief Interface for gtimer tdu data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_tdu_feature_get_f feature_get;
    /**
     * returns numeric data of block_index_size
     */
    dnx_data_gtimer_tdu_block_index_size_get_f block_index_size_get;
    /**
     * returns numeric data of block_index_max_value
     */
    dnx_data_gtimer_tdu_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_tdu_t;

/*
 * }
 */

/*
 * SUBMODULE  - DCC:
 * Definitions related to DCC global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_dcc_feature_nof
} dnx_data_gtimer_dcc_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_dcc_feature_get_f) (
    int unit,
    dnx_data_gtimer_dcc_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'dcc', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_dcc_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'dcc', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_dcc_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - DCC:
 * {
 */
/**
 * \brief Interface for gtimer dcc data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_dcc_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_dcc_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_dcc_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_dcc_t;

/*
 * }
 */

/*
 * SUBMODULE  - CDB:
 * Definitions related to CDB global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have CDB GTIMER? (negative logic)
     */
    dnx_data_gtimer_cdb_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_cdb_feature_nof
} dnx_data_gtimer_cdb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_cdb_feature_get_f) (
    int unit,
    dnx_data_gtimer_cdb_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'cdb', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cdb_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'cdb', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cdb_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - CDB:
 * {
 */
/**
 * \brief Interface for gtimer cdb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_cdb_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_cdb_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_cdb_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_cdb_t;

/*
 * }
 */

/*
 * SUBMODULE  - CDBM:
 * Definitions related to CDBM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have CDBM GTIMER? (negative logic)
     */
    dnx_data_gtimer_cdbm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_cdbm_feature_nof
} dnx_data_gtimer_cdbm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_cdbm_feature_get_f) (
    int unit,
    dnx_data_gtimer_cdbm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'cdbm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cdbm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'cdbm', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cdbm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - CDBM:
 * {
 */
/**
 * \brief Interface for gtimer cdbm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_cdbm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_cdbm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_cdbm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_cdbm_t;

/*
 * }
 */

/*
 * SUBMODULE  - CDPM:
 * Definitions related to CDPM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have CDPM GTIMER? (negative logic)
     */
    dnx_data_gtimer_cdpm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_cdpm_feature_nof
} dnx_data_gtimer_cdpm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_cdpm_feature_get_f) (
    int unit,
    dnx_data_gtimer_cdpm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'cdpm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cdpm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'cdpm', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_cdpm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - CDPM:
 * {
 */
/**
 * \brief Interface for gtimer cdpm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_cdpm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_cdpm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_cdpm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_cdpm_t;

/*
 * }
 */

/*
 * SUBMODULE  - OCBM:
 * Definitions related to OCBM global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have OCBM GTIMER? (negative logic)
     */
    dnx_data_gtimer_ocbm_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_ocbm_feature_nof
} dnx_data_gtimer_ocbm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_ocbm_feature_get_f) (
    int unit,
    dnx_data_gtimer_ocbm_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'ocbm', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ocbm_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'ocbm', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_ocbm_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - OCBM:
 * {
 */
/**
 * \brief Interface for gtimer ocbm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_ocbm_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_ocbm_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_ocbm_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_ocbm_t;

/*
 * }
 */

/*
 * SUBMODULE  - MSS:
 * Definitions related to MSS global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have MSS GTIMER? (negative logic)
     */
    dnx_data_gtimer_mss_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_mss_feature_nof
} dnx_data_gtimer_mss_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_mss_feature_get_f) (
    int unit,
    dnx_data_gtimer_mss_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'mss', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_mss_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'mss', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_mss_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - MSS:
 * {
 */
/**
 * \brief Interface for gtimer mss data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_mss_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_mss_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_mss_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_mss_t;

/*
 * }
 */

/*
 * SUBMODULE  - MSD:
 * Definitions related to MSD global timer which is used for counter statistics
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does device have MSD GTIMER? (negative logic)
     */
    dnx_data_gtimer_msd_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_gtimer_msd_feature_nof
} dnx_data_gtimer_msd_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_gtimer_msd_feature_get_f) (
    int unit,
    dnx_data_gtimer_msd_feature_e feature);

/**
 * \brief returns define data of block_index_size
 * Module - 'gtimer', Submodule - 'msd', data - 'block_index_size'
 * Number of bits in value indicating the number of copies per block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_msd_block_index_size_get_f) (
    int unit);

/**
 * \brief returns define data of block_index_max_value
 * Module - 'gtimer', Submodule - 'msd', data - 'block_index_max_value'
 * Maximal value for number of copies per block. Block index starts at '0'.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_gtimer_msd_block_index_max_value_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GTIMER - MSD:
 * {
 */
/**
 * \brief Interface for gtimer msd data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_gtimer_msd_feature_get_f feature_get;
    /**
     * returns define data of block_index_size
     */
    dnx_data_gtimer_msd_block_index_size_get_f block_index_size_get;
    /**
     * returns define data of block_index_max_value
     */
    dnx_data_gtimer_msd_block_index_max_value_get_f block_index_max_value_get;
} dnx_data_if_gtimer_msd_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_GTIMER:
 * {
 */
/**
 * \brief Interface for gtimer data
 */
typedef struct
{
    /**
     * Interface for gtimer rtp data
     */
    dnx_data_if_gtimer_rtp_t rtp;
    /**
     * Interface for gtimer fdt data
     */
    dnx_data_if_gtimer_fdt_t fdt;
    /**
     * Interface for gtimer fdtl data
     */
    dnx_data_if_gtimer_fdtl_t fdtl;
    /**
     * Interface for gtimer pem data
     */
    dnx_data_if_gtimer_pem_t pem;
    /**
     * Interface for gtimer dhc data
     */
    dnx_data_if_gtimer_dhc_t dhc;
    /**
     * Interface for gtimer cdu data
     */
    dnx_data_if_gtimer_cdu_t cdu;
    /**
     * Interface for gtimer esb data
     */
    dnx_data_if_gtimer_esb_t esb;
    /**
     * Interface for gtimer cdum data
     */
    dnx_data_if_gtimer_cdum_t cdum;
    /**
     * Interface for gtimer mesh_topology data
     */
    dnx_data_if_gtimer_mesh_topology_t mesh_topology;
    /**
     * Interface for gtimer bdm data
     */
    dnx_data_if_gtimer_bdm_t bdm;
    /**
     * Interface for gtimer hbc data
     */
    dnx_data_if_gtimer_hbc_t hbc;
    /**
     * Interface for gtimer ecgm data
     */
    dnx_data_if_gtimer_ecgm_t ecgm;
    /**
     * Interface for gtimer cfc data
     */
    dnx_data_if_gtimer_cfc_t cfc;
    /**
     * Interface for gtimer cgm data
     */
    dnx_data_if_gtimer_cgm_t cgm;
    /**
     * Interface for gtimer crps data
     */
    dnx_data_if_gtimer_crps_t crps;
    /**
     * Interface for gtimer ddha data
     */
    dnx_data_if_gtimer_ddha_t ddha;
    /**
     * Interface for gtimer ddp data
     */
    dnx_data_if_gtimer_ddp_t ddp;
    /**
     * Interface for gtimer dqm data
     */
    dnx_data_if_gtimer_dqm_t dqm;
    /**
     * Interface for gtimer edb data
     */
    dnx_data_if_gtimer_edb_t edb;
    /**
     * Interface for gtimer epni data
     */
    dnx_data_if_gtimer_epni_t epni;
    /**
     * Interface for gtimer epre data
     */
    dnx_data_if_gtimer_epre_t epre;
    /**
     * Interface for gtimer eps data
     */
    dnx_data_if_gtimer_eps_t eps;
    /**
     * Interface for gtimer erpp data
     */
    dnx_data_if_gtimer_erpp_t erpp;
    /**
     * Interface for gtimer etppa data
     */
    dnx_data_if_gtimer_etppa_t etppa;
    /**
     * Interface for gtimer etppb data
     */
    dnx_data_if_gtimer_etppb_t etppb;
    /**
     * Interface for gtimer etppc data
     */
    dnx_data_if_gtimer_etppc_t etppc;
    /**
     * Interface for gtimer fqp data
     */
    dnx_data_if_gtimer_fqp_t fqp;
    /**
     * Interface for gtimer ile data
     */
    dnx_data_if_gtimer_ile_t ile;
    /**
     * Interface for gtimer ippa data
     */
    dnx_data_if_gtimer_ippa_t ippa;
    /**
     * Interface for gtimer ippb data
     */
    dnx_data_if_gtimer_ippb_t ippb;
    /**
     * Interface for gtimer ippc data
     */
    dnx_data_if_gtimer_ippc_t ippc;
    /**
     * Interface for gtimer ippd data
     */
    dnx_data_if_gtimer_ippd_t ippd;
    /**
     * Interface for gtimer ippe data
     */
    dnx_data_if_gtimer_ippe_t ippe;
    /**
     * Interface for gtimer ippf data
     */
    dnx_data_if_gtimer_ippf_t ippf;
    /**
     * Interface for gtimer ips data
     */
    dnx_data_if_gtimer_ips_t ips;
    /**
     * Interface for gtimer ipt data
     */
    dnx_data_if_gtimer_ipt_t ipt;
    /**
     * Interface for gtimer iqm data
     */
    dnx_data_if_gtimer_iqm_t iqm;
    /**
     * Interface for gtimer ire data
     */
    dnx_data_if_gtimer_ire_t ire;
    /**
     * Interface for gtimer itpp data
     */
    dnx_data_if_gtimer_itpp_t itpp;
    /**
     * Interface for gtimer itppd data
     */
    dnx_data_if_gtimer_itppd_t itppd;
    /**
     * Interface for gtimer kaps data
     */
    dnx_data_if_gtimer_kaps_t kaps;
    /**
     * Interface for gtimer mcp data
     */
    dnx_data_if_gtimer_mcp_t mcp;
    /**
     * Interface for gtimer mrps data
     */
    dnx_data_if_gtimer_mrps_t mrps;
    /**
     * Interface for gtimer nmg data
     */
    dnx_data_if_gtimer_nmg_t nmg;
    /**
     * Interface for gtimer ocb data
     */
    dnx_data_if_gtimer_ocb_t ocb;
    /**
     * Interface for gtimer pdm data
     */
    dnx_data_if_gtimer_pdm_t pdm;
    /**
     * Interface for gtimer pqp data
     */
    dnx_data_if_gtimer_pqp_t pqp;
    /**
     * Interface for gtimer rqp data
     */
    dnx_data_if_gtimer_rqp_t rqp;
    /**
     * Interface for gtimer sch data
     */
    dnx_data_if_gtimer_sch_t sch;
    /**
     * Interface for gtimer sif data
     */
    dnx_data_if_gtimer_sif_t sif;
    /**
     * Interface for gtimer spb data
     */
    dnx_data_if_gtimer_spb_t spb;
    /**
     * Interface for gtimer sqm data
     */
    dnx_data_if_gtimer_sqm_t sqm;
    /**
     * Interface for gtimer tcam data
     */
    dnx_data_if_gtimer_tcam_t tcam;
    /**
     * Interface for gtimer tdu data
     */
    dnx_data_if_gtimer_tdu_t tdu;
    /**
     * Interface for gtimer dcc data
     */
    dnx_data_if_gtimer_dcc_t dcc;
    /**
     * Interface for gtimer cdb data
     */
    dnx_data_if_gtimer_cdb_t cdb;
    /**
     * Interface for gtimer cdbm data
     */
    dnx_data_if_gtimer_cdbm_t cdbm;
    /**
     * Interface for gtimer cdpm data
     */
    dnx_data_if_gtimer_cdpm_t cdpm;
    /**
     * Interface for gtimer ocbm data
     */
    dnx_data_if_gtimer_ocbm_t ocbm;
    /**
     * Interface for gtimer mss data
     */
    dnx_data_if_gtimer_mss_t mss;
    /**
     * Interface for gtimer msd data
     */
    dnx_data_if_gtimer_msd_t msd;
} dnx_data_if_gtimer_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_gtimer_t dnx_data_gtimer;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_GTIMER_H_*/
/* *INDENT-ON* */
