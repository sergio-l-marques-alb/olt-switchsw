/** \file dnx/swstate/auto_generated/access/dnx_ipq_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_IPQ_ACCESS_H__
#define __DNX_IPQ_ACCESS_H__

#include <soc/dnx/swstate/auto_generated/types/dnx_ipq_types.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_ipq.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: dnx_ipq_db_is_init
 */
typedef int (*dnx_ipq_db_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: dnx_ipq_db_init
 */
typedef int (*dnx_ipq_db_init_cb)(
    int unit);

/**
 * implemented by: dnx_ipq_db_base_queues_alloc
 */
typedef int (*dnx_ipq_db_base_queues_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_ipq_db_base_queues_num_cos_set
 */
typedef int (*dnx_ipq_db_base_queues_num_cos_set_cb)(
    int unit, uint32 base_queues_idx_0, uint32 base_queues_idx_1, uint8 num_cos);

/**
 * implemented by: dnx_ipq_db_base_queues_num_cos_get
 */
typedef int (*dnx_ipq_db_base_queues_num_cos_get_cb)(
    int unit, uint32 base_queues_idx_0, uint32 base_queues_idx_1, uint8 *num_cos);

/**
 * implemented by: dnx_ipq_db_base_queues_sys_port_ref_counter_set
 */
typedef int (*dnx_ipq_db_base_queues_sys_port_ref_counter_set_cb)(
    int unit, uint32 base_queues_idx_0, uint32 base_queues_idx_1, int sys_port_ref_counter);

/**
 * implemented by: dnx_ipq_db_base_queues_sys_port_ref_counter_get
 */
typedef int (*dnx_ipq_db_base_queues_sys_port_ref_counter_get_cb)(
    int unit, uint32 base_queues_idx_0, uint32 base_queues_idx_1, int *sys_port_ref_counter);

/**
 * implemented by: dnx_ipq_db_base_queues_sys_port_ref_counter_inc
 */
typedef int (*dnx_ipq_db_base_queues_sys_port_ref_counter_inc_cb)(
    int unit, uint32 base_queues_idx_0, uint32 base_queues_idx_1, uint32 inc_value);

/**
 * implemented by: dnx_ipq_db_base_queues_sys_port_ref_counter_dec
 */
typedef int (*dnx_ipq_db_base_queues_sys_port_ref_counter_dec_cb)(
    int unit, uint32 base_queues_idx_0, uint32 base_queues_idx_1, uint32 dec_value);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_alloc_bitmap
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_alloc_bitmap_cb)(
    int unit);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_set
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_set_cb)(
    int unit, uint32 _bit_num);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_clear
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_clear_cb)(
    int unit, uint32 _bit_num);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_get
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_get_cb)(
    int unit, uint32 _bit_num, uint8* result);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_read
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_read_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_write
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_write_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_and
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_and_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_or
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_or_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_xor
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_xor_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_remove
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_remove_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_negate
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_negate_cb)(
    int unit, uint32 _first, uint32 _count);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_clear
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_clear_cb)(
    int unit, uint32 _first, uint32 _count);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_set
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_set_cb)(
    int unit, uint32 _first, uint32 _count);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_null
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_null_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_test
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_test_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_eq
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_eq_cb)(
    int unit, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnx_ipq_db_base_queue_is_asymm_bit_range_count
 */
typedef int (*dnx_ipq_db_base_queue_is_asymm_bit_range_count_cb)(
    int unit, uint32 _first, uint32 _range, int *result);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable num_cos
 */
typedef struct {
    dnx_ipq_db_base_queues_num_cos_set_cb set;
    dnx_ipq_db_base_queues_num_cos_get_cb get;
} dnx_ipq_db_base_queues_num_cos_cbs;

/**
 * This structure holds the access functions for the variable sys_port_ref_counter
 */
typedef struct {
    dnx_ipq_db_base_queues_sys_port_ref_counter_set_cb set;
    dnx_ipq_db_base_queues_sys_port_ref_counter_get_cb get;
    dnx_ipq_db_base_queues_sys_port_ref_counter_inc_cb inc;
    dnx_ipq_db_base_queues_sys_port_ref_counter_dec_cb dec;
} dnx_ipq_db_base_queues_sys_port_ref_counter_cbs;

/**
 * This structure holds the access functions for the variable dnx_ipq_base_queue_t
 */
typedef struct {
    dnx_ipq_db_base_queues_alloc_cb alloc;
    /**
     * Access struct for num_cos
     */
    dnx_ipq_db_base_queues_num_cos_cbs num_cos;
    /**
     * Access struct for sys_port_ref_counter
     */
    dnx_ipq_db_base_queues_sys_port_ref_counter_cbs sys_port_ref_counter;
} dnx_ipq_db_base_queues_cbs;

/**
 * This structure holds the access functions for the variable base_queue_is_asymm
 */
typedef struct {
    dnx_ipq_db_base_queue_is_asymm_alloc_bitmap_cb alloc_bitmap;
    dnx_ipq_db_base_queue_is_asymm_bit_set_cb bit_set;
    dnx_ipq_db_base_queue_is_asymm_bit_clear_cb bit_clear;
    dnx_ipq_db_base_queue_is_asymm_bit_get_cb bit_get;
    dnx_ipq_db_base_queue_is_asymm_bit_range_read_cb bit_range_read;
    dnx_ipq_db_base_queue_is_asymm_bit_range_write_cb bit_range_write;
    dnx_ipq_db_base_queue_is_asymm_bit_range_and_cb bit_range_and;
    dnx_ipq_db_base_queue_is_asymm_bit_range_or_cb bit_range_or;
    dnx_ipq_db_base_queue_is_asymm_bit_range_xor_cb bit_range_xor;
    dnx_ipq_db_base_queue_is_asymm_bit_range_remove_cb bit_range_remove;
    dnx_ipq_db_base_queue_is_asymm_bit_range_negate_cb bit_range_negate;
    dnx_ipq_db_base_queue_is_asymm_bit_range_clear_cb bit_range_clear;
    dnx_ipq_db_base_queue_is_asymm_bit_range_set_cb bit_range_set;
    dnx_ipq_db_base_queue_is_asymm_bit_range_null_cb bit_range_null;
    dnx_ipq_db_base_queue_is_asymm_bit_range_test_cb bit_range_test;
    dnx_ipq_db_base_queue_is_asymm_bit_range_eq_cb bit_range_eq;
    dnx_ipq_db_base_queue_is_asymm_bit_range_count_cb bit_range_count;
} dnx_ipq_db_base_queue_is_asymm_cbs;

/**
 * This structure holds the access functions for the variable dnx_ipq_db_t
 */
typedef struct {
    dnx_ipq_db_is_init_cb is_init;
    dnx_ipq_db_init_cb init;
    /**
     * Access struct for base_queues
     */
    dnx_ipq_db_base_queues_cbs base_queues;
    /**
     * Access struct for base_queue_is_asymm
     */
    dnx_ipq_db_base_queue_is_asymm_cbs base_queue_is_asymm;
} dnx_ipq_db_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern dnx_ipq_db_cbs dnx_ipq_db;

#endif /* __DNX_IPQ_ACCESS_H__ */
