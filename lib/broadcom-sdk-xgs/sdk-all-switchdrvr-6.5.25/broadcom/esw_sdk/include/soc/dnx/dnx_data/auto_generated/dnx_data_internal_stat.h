/** \file dnx_data_internal_stat.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_STAT_H_
/*{*/
#define _DNX_DATA_INTERNAL_STAT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_stat.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_stat_submodule_stat_pp,
    dnx_data_stat_submodule_diag_counter,
    dnx_data_stat_submodule_drop_reasons,
    dnx_data_stat_submodule_feature,

    /**
     * Must be last one!
     */
    _dnx_data_stat_submodule_nof
} dnx_data_stat_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE STAT_PP:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_stat_stat_pp_feature_get(
    int unit,
    dnx_data_stat_stat_pp_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_stat_stat_pp_define_max_irpp_profile_value,
    dnx_data_stat_stat_pp_define_max_etpp_profile_value,
    dnx_data_stat_stat_pp_define_max_etpp_counting_profile_value,
    dnx_data_stat_stat_pp_define_max_etpp_metering_profile_value,
    dnx_data_stat_stat_pp_define_max_erpp_profile_value,
    dnx_data_stat_stat_pp_define_etpp_reversed_stat_cmd,
    dnx_data_stat_stat_pp_define_etpp_enc_stat_cmd_is_reversed,
    dnx_data_stat_stat_pp_define_etpp_egress_vsi_always_pushed,
    dnx_data_stat_stat_pp_define_irpp_start_profile_value,
    dnx_data_stat_stat_pp_define_erpp_start_profile_value,
    dnx_data_stat_stat_pp_define_etpp_start_profile_value,
    dnx_data_stat_stat_pp_define_etpp_counting_start_profile_value,
    dnx_data_stat_stat_pp_define_etpp_metering_start_profile_value,

    /**
     * Must be last one!
     */
    _dnx_data_stat_stat_pp_define_nof
} dnx_data_stat_stat_pp_define_e;

/* Get Data */
/**
 * \brief returns define data of max_irpp_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'max_irpp_profile_value'
 * max irpp profile size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_irpp_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_max_irpp_profile_value_get(
    int unit);

/**
 * \brief returns define data of max_etpp_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'max_etpp_profile_value'
 * max etpp profile size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_etpp_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_max_etpp_profile_value_get(
    int unit);

/**
 * \brief returns define data of max_etpp_counting_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'max_etpp_counting_profile_value'
 * max etpp counting profile size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_etpp_counting_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_max_etpp_counting_profile_value_get(
    int unit);

/**
 * \brief returns define data of max_etpp_metering_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'max_etpp_metering_profile_value'
 * max etpp metering profile size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_etpp_metering_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_max_etpp_metering_profile_value_get(
    int unit);

/**
 * \brief returns define data of max_erpp_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'max_erpp_profile_value'
 * max erpp profile size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_erpp_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_max_erpp_profile_value_get(
    int unit);

/**
 * \brief returns define data of etpp_reversed_stat_cmd
 * Module - 'stat', Submodule - 'stat_pp', data - 'etpp_reversed_stat_cmd'
 * ETPP statistics are built wrong in FWD, ENCAP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etpp_reversed_stat_cmd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_etpp_reversed_stat_cmd_get(
    int unit);

/**
 * \brief returns define data of etpp_enc_stat_cmd_is_reversed
 * Module - 'stat', Submodule - 'stat_pp', data - 'etpp_enc_stat_cmd_is_reversed'
 * ETPP statistics are built wrong in FWD, ENCAP (some devices reverse it themselves for the trap)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etpp_enc_stat_cmd_is_reversed - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_etpp_enc_stat_cmd_is_reversed_get(
    int unit);

/**
 * \brief returns define data of etpp_egress_vsi_always_pushed
 * Module - 'stat', Submodule - 'stat_pp', data - 'etpp_egress_vsi_always_pushed'
 * ETPP ENCAP stages push VSI stats entry regardless of use_vsd enabler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etpp_egress_vsi_always_pushed - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_etpp_egress_vsi_always_pushed_get(
    int unit);

/**
 * \brief returns define data of irpp_start_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'irpp_start_profile_value'
 * irpp profile first index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     irpp_start_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_irpp_start_profile_value_get(
    int unit);

/**
 * \brief returns define data of erpp_start_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'erpp_start_profile_value'
 * erpp profile first index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     erpp_start_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_erpp_start_profile_value_get(
    int unit);

/**
 * \brief returns define data of etpp_start_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'etpp_start_profile_value'
 * etpp profile first index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etpp_start_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_etpp_start_profile_value_get(
    int unit);

/**
 * \brief returns define data of etpp_counting_start_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'etpp_counting_start_profile_value'
 * etpp counting profile first index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etpp_counting_start_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_etpp_counting_start_profile_value_get(
    int unit);

/**
 * \brief returns define data of etpp_metering_start_profile_value
 * Module - 'stat', Submodule - 'stat_pp', data - 'etpp_metering_start_profile_value'
 * etpp metering profile first index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etpp_metering_start_profile_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_stat_pp_etpp_metering_start_profile_value_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_stat_stat_pp_table_nof
} dnx_data_stat_stat_pp_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE DIAG_COUNTER:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_stat_diag_counter_feature_get(
    int unit,
    dnx_data_stat_diag_counter_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_stat_diag_counter_define_nof
} dnx_data_stat_diag_counter_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_stat_diag_counter_table_ovf_info,

    /**
     * Must be last one!
     */
    _dnx_data_stat_diag_counter_table_nof
} dnx_data_stat_diag_counter_table_e;

/* Get Data */
/**
 * \brief get table ovf_info entry 
 * irregular overfield infomation
 * 
 * \param [in] unit - unit #
 * \param [in] index - overflow field index
 * 
 * \return
 *     ovf_info - returns the relevant entry values grouped in struct - see dnx_data_stat_diag_counter_ovf_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_stat_diag_counter_ovf_info_t * dnx_data_stat_diag_counter_ovf_info_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'stat', Submodule - 'diag_counter', table - 'ovf_info'
 * irregular overfield infomation
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_stat_diag_counter_ovf_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)ovf_info info
 * irregular overfield infomation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ovf_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_stat_diag_counter_ovf_info_info_get(
    int unit);

/*
 * SUBMODULE DROP_REASONS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_stat_drop_reasons_feature_get(
    int unit,
    dnx_data_stat_drop_reasons_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_stat_drop_reasons_define_nof_drop_reasons,

    /**
     * Must be last one!
     */
    _dnx_data_stat_drop_reasons_define_nof
} dnx_data_stat_drop_reasons_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_drop_reasons
 * Module - 'stat', Submodule - 'drop_reasons', data - 'nof_drop_reasons'
 * number of drop reasons
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_drop_reasons - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_stat_drop_reasons_nof_drop_reasons_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_stat_drop_reasons_table_group_drop_reason_index,
    dnx_data_stat_drop_reasons_table_drop_reason_index,
    dnx_data_stat_drop_reasons_table_drop_reasons_groups,

    /**
     * Must be last one!
     */
    _dnx_data_stat_drop_reasons_table_nof
} dnx_data_stat_drop_reasons_table_e;

/* Get Data */
/**
 * \brief get table group_drop_reason_index entry 
 * mapping drop reasons group enum to hw bit index
 * 
 * \param [in] unit - unit #
 * \param [in] group - group enum value
 * 
 * \return
 *     group_drop_reason_index - returns the relevant entry values grouped in struct - see dnx_data_stat_drop_reasons_group_drop_reason_index_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_stat_drop_reasons_group_drop_reason_index_t * dnx_data_stat_drop_reasons_group_drop_reason_index_get(
    int unit,
    int group);

/**
 * \brief get table drop_reason_index entry 
 * mapping drop reasons bit enum to hw bit index
 * 
 * \param [in] unit - unit #
 * \param [in] drop_reason_bit - drop reason bit representative enum
 * 
 * \return
 *     drop_reason_index - returns the relevant entry values grouped in struct - see dnx_data_stat_drop_reasons_drop_reason_index_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_stat_drop_reasons_drop_reason_index_t * dnx_data_stat_drop_reasons_drop_reason_index_get(
    int unit,
    int drop_reason_bit);

/**
 * \brief get table drop_reasons_groups entry 
 * default drop reasons groups
 * 
 * \param [in] unit - unit #
 * \param [in] name - drop reasons group name
 * 
 * \return
 *     drop_reasons_groups - returns the relevant entry values grouped in struct - see dnx_data_stat_drop_reasons_drop_reasons_groups_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_stat_drop_reasons_drop_reasons_groups_t * dnx_data_stat_drop_reasons_drop_reasons_groups_get(
    int unit,
    int name);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'stat', Submodule - 'drop_reasons', table - 'group_drop_reason_index'
 * mapping drop reasons group enum to hw bit index
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_stat_drop_reasons_group_drop_reason_index_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'stat', Submodule - 'drop_reasons', table - 'drop_reason_index'
 * mapping drop reasons bit enum to hw bit index
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_stat_drop_reasons_drop_reason_index_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'stat', Submodule - 'drop_reasons', table - 'drop_reasons_groups'
 * default drop reasons groups
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_stat_drop_reasons_drop_reasons_groups_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)group_drop_reason_index info
 * mapping drop reasons group enum to hw bit index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     group_drop_reason_index - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_stat_drop_reasons_group_drop_reason_index_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)drop_reason_index info
 * mapping drop reasons bit enum to hw bit index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     drop_reason_index - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_stat_drop_reasons_drop_reason_index_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)drop_reasons_groups info
 * default drop reasons groups
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     drop_reasons_groups - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_stat_drop_reasons_drop_reasons_groups_info_get(
    int unit);

/*
 * SUBMODULE FEATURE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_stat_feature_feature_get(
    int unit,
    dnx_data_stat_feature_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_stat_feature_define_nof
} dnx_data_stat_feature_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_stat_feature_table_nof
} dnx_data_stat_feature_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_stat_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_STAT_H_*/
/* *INDENT-ON* */
