/** \file dnx_data_internal_esem.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_ESEM_H_
/*{*/
#define _DNX_DATA_INTERNAL_ESEM_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_esem.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_esem_submodule_access_cmd,
    dnx_data_esem_submodule_default_result_profile,
    dnx_data_esem_submodule_feature,

    /**
     * Must be last one!
     */
    _dnx_data_esem_submodule_nof
} dnx_data_esem_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE ACCESS_CMD:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_esem_access_cmd_feature_get(
    int unit,
    dnx_data_esem_access_cmd_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_esem_access_cmd_define_nof_esem_accesses,
    dnx_data_esem_access_cmd_define_app_di_id_size_in_bits,
    dnx_data_esem_access_cmd_define_no_action,
    dnx_data_esem_access_cmd_define_default_native,
    dnx_data_esem_access_cmd_define_default_ac,
    dnx_data_esem_access_cmd_define_sflow_sample_interface,
    dnx_data_esem_access_cmd_define_ip_tunnel_no_action,
    dnx_data_esem_access_cmd_define_nof_esem_cmd_default_profiles,
    dnx_data_esem_access_cmd_define_nof_cmds_size_in_bits,
    dnx_data_esem_access_cmd_define_nof_cmds,
    dnx_data_esem_access_cmd_define_min_size_for_esem_cmd,
    dnx_data_esem_access_cmd_define_esem_cmd_arr_prefix_gre_any_ipv4,
    dnx_data_esem_access_cmd_define_esem_cmd_arr_prefix_vxlan_gpe,
    dnx_data_esem_access_cmd_define_esem_cmd_arr_prefix_ip_tunnel_no_action,
    dnx_data_esem_access_cmd_define_esem_cmd_predefine_allocations,

    /**
     * Must be last one!
     */
    _dnx_data_esem_access_cmd_define_nof
} dnx_data_esem_access_cmd_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_esem_accesses
 * Module - 'esem', Submodule - 'access_cmd', data - 'nof_esem_accesses'
 * The number of accesses that can be preformed into the ESEM/EXEM.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_esem_accesses - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_nof_esem_accesses_get(
    int unit);

/**
 * \brief returns define data of app_di_id_size_in_bits
 * Module - 'esem', Submodule - 'access_cmd', data - 'app_di_id_size_in_bits'
 * NOF bits for the APP DB ID.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     app_di_id_size_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_app_di_id_size_in_bits_get(
    int unit);

/**
 * \brief returns define data of no_action
 * Module - 'esem', Submodule - 'access_cmd', data - 'no_action'
 * Undefined access command index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     no_action - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_no_action_get(
    int unit);

/**
 * \brief returns define data of default_native
 * Module - 'esem', Submodule - 'access_cmd', data - 'default_native'
 * Default access command for native AC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_native - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_default_native_get(
    int unit);

/**
 * \brief returns define data of default_ac
 * Module - 'esem', Submodule - 'access_cmd', data - 'default_ac'
 * Default-access command index for outer AC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_ac - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_default_ac_get(
    int unit);

/**
 * \brief returns define data of sflow_sample_interface
 * Module - 'esem', Submodule - 'access_cmd', data - 'sflow_sample_interface'
 * Default-access command index for sflow sample interface
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sflow_sample_interface - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_sflow_sample_interface_get(
    int unit);

/**
 * \brief returns define data of ip_tunnel_no_action
 * Module - 'esem', Submodule - 'access_cmd', data - 'ip_tunnel_no_action'
 * No lookup access command for ip tunnel cases
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ip_tunnel_no_action - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_ip_tunnel_no_action_get(
    int unit);

/**
 * \brief returns define data of nof_esem_cmd_default_profiles
 * Module - 'esem', Submodule - 'access_cmd', data - 'nof_esem_cmd_default_profiles'
 * Number of esem cmd default profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_esem_cmd_default_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_nof_esem_cmd_default_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_cmds_size_in_bits
 * Module - 'esem', Submodule - 'access_cmd', data - 'nof_cmds_size_in_bits'
 * Number of bits for the esem command
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cmds_size_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_nof_cmds_size_in_bits_get(
    int unit);

/**
 * \brief returns define data of nof_cmds
 * Module - 'esem', Submodule - 'access_cmd', data - 'nof_cmds'
 * Number of esem access commands
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cmds - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_nof_cmds_get(
    int unit);

/**
 * \brief returns define data of min_size_for_esem_cmd
 * Module - 'esem', Submodule - 'access_cmd', data - 'min_size_for_esem_cmd'
 * The minimal size in bits that is required for a result type to have a holding of ESEM CMD
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_size_for_esem_cmd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_min_size_for_esem_cmd_get(
    int unit);

/**
 * \brief returns define data of esem_cmd_arr_prefix_gre_any_ipv4
 * Module - 'esem', Submodule - 'access_cmd', data - 'esem_cmd_arr_prefix_gre_any_ipv4'
 * The ESEM command ARR prefix of an GRE ANY IPv4
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     esem_cmd_arr_prefix_gre_any_ipv4 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_esem_cmd_arr_prefix_gre_any_ipv4_get(
    int unit);

/**
 * \brief returns define data of esem_cmd_arr_prefix_vxlan_gpe
 * Module - 'esem', Submodule - 'access_cmd', data - 'esem_cmd_arr_prefix_vxlan_gpe'
 * The ESEM command ARR prefix of VXLAN GPE
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     esem_cmd_arr_prefix_vxlan_gpe - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_esem_cmd_arr_prefix_vxlan_gpe_get(
    int unit);

/**
 * \brief returns define data of esem_cmd_arr_prefix_ip_tunnel_no_action
 * Module - 'esem', Submodule - 'access_cmd', data - 'esem_cmd_arr_prefix_ip_tunnel_no_action'
 * The ESEM command ARR prefix of ip tunnel no action
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     esem_cmd_arr_prefix_ip_tunnel_no_action - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_esem_cmd_arr_prefix_ip_tunnel_no_action_get(
    int unit);

/**
 * \brief returns define data of esem_cmd_predefine_allocations
 * Module - 'esem', Submodule - 'access_cmd', data - 'esem_cmd_predefine_allocations'
 * Indicates whether the predefined default ESEM CMDs are allocated automatically
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     esem_cmd_predefine_allocations - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_access_cmd_esem_cmd_predefine_allocations_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_esem_access_cmd_table_esem_cmd_table_map,

    /**
     * Must be last one!
     */
    _dnx_data_esem_access_cmd_table_nof
} dnx_data_esem_access_cmd_table_e;

/* Get Data */
/**
 * \brief get table esem_cmd_table_map entry 
 * ESEM CMD table mapping
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     esem_cmd_table_map - returns the relevant entry values grouped in struct - see dnx_data_esem_access_cmd_esem_cmd_table_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_esem_access_cmd_esem_cmd_table_map_t * dnx_data_esem_access_cmd_esem_cmd_table_map_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'esem', Submodule - 'access_cmd', table - 'esem_cmd_table_map'
 * ESEM CMD table mapping
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_esem_access_cmd_esem_cmd_table_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)esem_cmd_table_map info
 * ESEM CMD table mapping
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     esem_cmd_table_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_esem_access_cmd_esem_cmd_table_map_info_get(
    int unit);

/*
 * SUBMODULE DEFAULT_RESULT_PROFILE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_esem_default_result_profile_feature_get(
    int unit,
    dnx_data_esem_default_result_profile_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_esem_default_result_profile_define_default_native,
    dnx_data_esem_default_result_profile_define_default_ac,
    dnx_data_esem_default_result_profile_define_sflow_sample_interface,
    dnx_data_esem_default_result_profile_define_default_dual_homing,
    dnx_data_esem_default_result_profile_define_vxlan,
    dnx_data_esem_default_result_profile_define_nof_profiles,
    dnx_data_esem_default_result_profile_define_nof_allocable_profiles,

    /**
     * Must be last one!
     */
    _dnx_data_esem_default_result_profile_define_nof
} dnx_data_esem_default_result_profile_define_e;

/* Get Data */
/**
 * \brief returns define data of default_native
 * Module - 'esem', Submodule - 'default_result_profile', data - 'default_native'
 * Profile for Esem default result for default native
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_native - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_default_result_profile_default_native_get(
    int unit);

/**
 * \brief returns define data of default_ac
 * Module - 'esem', Submodule - 'default_result_profile', data - 'default_ac'
 * Profile for Esem default result for default AC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_ac - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_default_result_profile_default_ac_get(
    int unit);

/**
 * \brief returns define data of sflow_sample_interface
 * Module - 'esem', Submodule - 'default_result_profile', data - 'sflow_sample_interface'
 * Profile for Esem default result for sflow sample interface
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sflow_sample_interface - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_default_result_profile_sflow_sample_interface_get(
    int unit);

/**
 * \brief returns define data of default_dual_homing
 * Module - 'esem', Submodule - 'default_result_profile', data - 'default_dual_homing'
 * Profile for Esem default result for dual homing db
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_dual_homing - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_default_result_profile_default_dual_homing_get(
    int unit);

/**
 * \brief returns define data of vxlan
 * Module - 'esem', Submodule - 'default_result_profile', data - 'vxlan'
 * Profile for Esem default result for vxlan
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vxlan - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_default_result_profile_vxlan_get(
    int unit);

/**
 * \brief returns define data of nof_profiles
 * Module - 'esem', Submodule - 'default_result_profile', data - 'nof_profiles'
 * Number of esem default result profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_default_result_profile_nof_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_allocable_profiles
 * Module - 'esem', Submodule - 'default_result_profile', data - 'nof_allocable_profiles'
 * Number of esem default result profiles exposed to users
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_allocable_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esem_default_result_profile_nof_allocable_profiles_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_esem_default_result_profile_table_nof
} dnx_data_esem_default_result_profile_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE FEATURE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_esem_feature_feature_get(
    int unit,
    dnx_data_esem_feature_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_esem_feature_define_nof
} dnx_data_esem_feature_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_esem_feature_table_nof
} dnx_data_esem_feature_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_esem_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_ESEM_H_*/
/* *INDENT-ON* */
