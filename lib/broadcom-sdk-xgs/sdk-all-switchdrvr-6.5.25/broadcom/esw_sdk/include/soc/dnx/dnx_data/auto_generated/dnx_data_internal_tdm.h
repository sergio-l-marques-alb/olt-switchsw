/** \file dnx_data_internal_tdm.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_TDM_H_
/*{*/
#define _DNX_DATA_INTERNAL_TDM_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_tdm.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_tdm_submodule_params,

    /**
     * Must be last one!
     */
    _dnx_data_tdm_submodule_nof
} dnx_data_tdm_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE PARAMS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_tdm_params_feature_get(
    int unit,
    dnx_data_tdm_params_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_tdm_params_define_context_map_base_size,
    dnx_data_tdm_params_define_context_map_base_nof,
    dnx_data_tdm_params_define_sid_min_size,
    dnx_data_tdm_params_define_sid_size,
    dnx_data_tdm_params_define_nof_stream_ids,
    dnx_data_tdm_params_define_global_sid_offset_size,
    dnx_data_tdm_params_define_global_sid_offset_nof,
    dnx_data_tdm_params_define_sid_offset_size,
    dnx_data_tdm_params_define_sid_offset_nof,
    dnx_data_tdm_params_define_sid_offset_nof_in_bits,
    dnx_data_tdm_params_define_sid_max_size,
    dnx_data_tdm_params_define_context_size,
    dnx_data_tdm_params_define_nof_contexts,
    dnx_data_tdm_params_define_pkt_size_size,
    dnx_data_tdm_params_define_pkt_size_lower_limit,
    dnx_data_tdm_params_define_pkt_size_upper_limit,
    dnx_data_tdm_params_define_link_mask_size,
    dnx_data_tdm_params_define_link_mask_nof,
    dnx_data_tdm_params_define_tdm_tc,
    dnx_data_tdm_params_define_tdm_dp,
    dnx_data_tdm_params_define_mode,

    /**
     * Must be last one!
     */
    _dnx_data_tdm_params_define_nof
} dnx_data_tdm_params_define_e;

/* Get Data */
/**
 * \brief returns define data of context_map_base_size
 * Module - 'tdm', Submodule - 'params', data - 'context_map_base_size'
 * Number of bits in binary representation of base context which is added to SID to                    get the 'global SID'. Log2 of 'context_map_base_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     context_map_base_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_context_map_base_size_get(
    int unit);

/**
 * \brief returns define data of context_map_base_nof
 * Module - 'tdm', Submodule - 'params', data - 'context_map_base_nof'
 * Maximal Number of 'base context's
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     context_map_base_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_context_map_base_nof_get(
    int unit);

/**
 * \brief returns define data of sid_min_size
 * Module - 'tdm', Submodule - 'params', data - 'sid_min_size'
 * Minimal number of bits in binary representation of Stream ID.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sid_min_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_sid_min_size_get(
    int unit);

/**
 * \brief returns define data of sid_size
 * Module - 'tdm', Submodule - 'params', data - 'sid_size'
 * Number of bits in binary representation of Stream ID. Log2 of 'nof_stream_ids'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sid_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_sid_size_get(
    int unit);

/**
 * \brief returns define data of nof_stream_ids
 * Module - 'tdm', Submodule - 'params', data - 'nof_stream_ids'
 * Maximal Number of Stream IDs. Note that we include here the stream IDs which are below the 'min'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_stream_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_nof_stream_ids_get(
    int unit);

/**
 * \brief returns define data of global_sid_offset_size
 * Module - 'tdm', Submodule - 'params', data - 'global_sid_offset_size'
 * Number of bits in binary representation of GLOBAL SID offset. Log2 of 'global_sid_offset_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     global_sid_offset_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_global_sid_offset_size_get(
    int unit);

/**
 * \brief returns define data of global_sid_offset_nof
 * Module - 'tdm', Submodule - 'params', data - 'global_sid_offset_nof'
 * Number of GLOBAL SID offsets. Maximal value of GLOBAL SID offset plus 1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     global_sid_offset_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_global_sid_offset_nof_get(
    int unit);

/**
 * \brief returns define data of sid_offset_size
 * Module - 'tdm', Submodule - 'params', data - 'sid_offset_size'
 * Number of bits in binary representation of SID offset, in bytes. Log2 of 'sid_offset_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sid_offset_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_sid_offset_size_get(
    int unit);

/**
 * \brief returns define data of sid_offset_nof
 * Module - 'tdm', Submodule - 'params', data - 'sid_offset_nof'
 * Number of SID offsets when counted in bytes. Maximal value of SID offset plus 1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sid_offset_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_sid_offset_nof_get(
    int unit);

/**
 * \brief returns define data of sid_offset_nof_in_bits
 * Module - 'tdm', Submodule - 'params', data - 'sid_offset_nof_in_bits'
 * Number of SID offsets when counted in bits. Maximal value of SID offset in bits plus 1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sid_offset_nof_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_sid_offset_nof_in_bits_get(
    int unit);

/**
 * \brief returns define data of sid_max_size
 * Module - 'tdm', Submodule - 'params', data - 'sid_max_size'
 * how many bits are holding the sid
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sid_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_sid_max_size_get(
    int unit);

/**
 * \brief returns define data of context_size
 * Module - 'tdm', Submodule - 'params', data - 'context_size'
 * Context ID size, in bits. Log2 of 'nof_contexts'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     context_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_context_size_get(
    int unit);

/**
 * \brief returns define data of nof_contexts
 * Module - 'tdm', Submodule - 'params', data - 'nof_contexts'
 * Maximal Number of Context IDs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_contexts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_nof_contexts_get(
    int unit);

/**
 * \brief returns define data of pkt_size_size
 * Module - 'tdm', Submodule - 'params', data - 'pkt_size_size'
 * Size of pkt_size field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pkt_size_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_pkt_size_size_get(
    int unit);

/**
 * \brief returns define data of pkt_size_lower_limit
 * Module - 'tdm', Submodule - 'params', data - 'pkt_size_lower_limit'
 * Minimum packet size for Bypass Mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pkt_size_lower_limit - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_pkt_size_lower_limit_get(
    int unit);

/**
 * \brief returns define data of pkt_size_upper_limit
 * Module - 'tdm', Submodule - 'params', data - 'pkt_size_upper_limit'
 * Maximum packet size for Bypass Mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pkt_size_upper_limit - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_pkt_size_upper_limit_get(
    int unit);

/**
 * \brief returns define data of link_mask_size
 * Module - 'tdm', Submodule - 'params', data - 'link_mask_size'
 * Size direct link mask for bypass traffic
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     link_mask_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_link_mask_size_get(
    int unit);

/**
 * \brief returns define data of link_mask_nof
 * Module - 'tdm', Submodule - 'params', data - 'link_mask_nof'
 * Number of direct link masks for bypass traffic
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     link_mask_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_link_mask_nof_get(
    int unit);

/**
 * \brief returns numeric data of tdm_tc
 * Module - 'tdm', Submodule - 'params', data - 'tdm_tc'
 * TDM traffic class
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tdm_tc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_tdm_tc_get(
    int unit);

/**
 * \brief returns numeric data of tdm_dp
 * Module - 'tdm', Submodule - 'params', data - 'tdm_dp'
 * TDM drop precedence
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tdm_dp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_tdm_dp_get(
    int unit);

/**
 * \brief returns numeric data of mode
 * Module - 'tdm', Submodule - 'params', data - 'mode'
 * TDM mode - defines header type. If NONE - tdm disabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_tdm_params_mode_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_tdm_params_table_nof
} dnx_data_tdm_params_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_tdm_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_TDM_H_*/
/* *INDENT-ON* */
