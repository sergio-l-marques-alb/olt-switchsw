/** \file dnx_data_internal_egr_queuing_v1.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_EGR_QUEUING_V1_H_
/*{*/
#define _DNX_DATA_INTERNAL_EGR_QUEUING_V1_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_egr_queuing_v1.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_egr_queuing_v1_submodule_general,
    dnx_data_egr_queuing_v1_submodule_egress_interfaces,
    dnx_data_egr_queuing_v1_submodule_egress_queues,
    dnx_data_egr_queuing_v1_submodule_scheduling,
    dnx_data_egr_queuing_v1_submodule_shaping,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_submodule_nof
} dnx_data_egr_queuing_v1_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_egr_queuing_v1_general_feature_get(
    int unit,
    dnx_data_egr_queuing_v1_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_general_define_nof
} dnx_data_egr_queuing_v1_general_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_general_table_nof
} dnx_data_egr_queuing_v1_general_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE EGRESS_INTERFACES:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_egr_queuing_v1_egress_interfaces_feature_get(
    int unit,
    dnx_data_egr_queuing_v1_egress_interfaces_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_egr_queuing_v1_egress_interfaces_define_nof_egr_interfaces,
    dnx_data_egr_queuing_v1_egress_interfaces_define_nof_channelized_egr_interfaces,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_egress_interfaces_define_nof
} dnx_data_egr_queuing_v1_egress_interfaces_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_egr_interfaces
 * Module - 'egr_queuing_v1', Submodule - 'egress_interfaces', data - 'nof_egr_interfaces'
 * number of egress interfaces
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egr_interfaces - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_egress_interfaces_nof_egr_interfaces_get(
    int unit);

/**
 * \brief returns define data of nof_channelized_egr_interfaces
 * Module - 'egr_queuing_v1', Submodule - 'egress_interfaces', data - 'nof_channelized_egr_interfaces'
 * number of channelized egress itnerfaces, a channelized interface has both channelized ID and regular ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_channelized_egr_interfaces - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_egress_interfaces_nof_channelized_egr_interfaces_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_egr_queuing_v1_egress_interfaces_table_mapping_data,
    dnx_data_egr_queuing_v1_egress_interfaces_table_per_speed_mapping_data,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_egress_interfaces_table_nof
} dnx_data_egr_queuing_v1_egress_interfaces_table_e;

/* Get Data */
/**
 * \brief get table mapping_data entry 
 * mapping data per egress interface type
 * 
 * \param [in] unit - unit #
 * \param [in] interface_type - interface type
 * 
 * \return
 *     mapping_data - returns the relevant entry values grouped in struct - see dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_t * dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_get(
    int unit,
    int interface_type);

/**
 * \brief get table per_speed_mapping_data entry 
 * mapping data per egress interface type and interface speed
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     per_speed_mapping_data - returns the relevant entry values grouped in struct - see dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_t * dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'egr_queuing_v1', Submodule - 'egress_interfaces', table - 'mapping_data'
 * mapping data per egress interface type
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'egr_queuing_v1', Submodule - 'egress_interfaces', table - 'per_speed_mapping_data'
 * mapping data per egress interface type and interface speed
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)mapping_data info
 * mapping data per egress interface type
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mapping_data - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_egr_queuing_v1_egress_interfaces_mapping_data_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)per_speed_mapping_data info
 * mapping data per egress interface type and interface speed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     per_speed_mapping_data - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_egr_queuing_v1_egress_interfaces_per_speed_mapping_data_info_get(
    int unit);

/*
 * SUBMODULE EGRESS_QUEUES:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_egr_queuing_v1_egress_queues_feature_get(
    int unit,
    dnx_data_egr_queuing_v1_egress_queues_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_egr_queuing_v1_egress_queues_define_nof_egr_queues,
    dnx_data_egr_queuing_v1_egress_queues_define_nof_egr_priorities,
    dnx_data_egr_queuing_v1_egress_queues_define_ps_queue_resolution,
    dnx_data_egr_queuing_v1_egress_queues_define_rcy_reserved_queue,
    dnx_data_egr_queuing_v1_egress_queues_define_nof_queue_pairs,
    dnx_data_egr_queuing_v1_egress_queues_define_total_nof_egr_queues,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_egress_queues_define_nof
} dnx_data_egr_queuing_v1_egress_queues_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_egr_queues
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'nof_egr_queues'
 * number of egress queues, qpairs are coutned as a single queue
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egr_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_egress_queues_nof_egr_queues_get(
    int unit);

/**
 * \brief returns define data of nof_egr_priorities
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'nof_egr_priorities'
 * number of egress priorities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egr_priorities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_egress_queues_nof_egr_priorities_get(
    int unit);

/**
 * \brief returns define data of ps_queue_resolution
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'ps_queue_resolution'
 * the resolution of queues in port scheduler - on how many queues a PS element controls
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ps_queue_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_egress_queues_ps_queue_resolution_get(
    int unit);

/**
 * \brief returns define data of rcy_reserved_queue
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'rcy_reserved_queue'
 * the reserved base queue ID for recycle port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rcy_reserved_queue - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_egress_queues_rcy_reserved_queue_get(
    int unit);

/**
 * \brief returns define data of nof_queue_pairs
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'nof_queue_pairs'
 * number of qpairs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_queue_pairs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_egress_queues_nof_queue_pairs_get(
    int unit);

/**
 * \brief returns define data of total_nof_egr_queues
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', data - 'total_nof_egr_queues'
 * total number of egress queues, qpairs are counted as 2 queues
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_egr_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_egress_queues_total_nof_egr_queues_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_egr_queuing_v1_egress_queues_table_supported_nof_priorities,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_egress_queues_table_nof
} dnx_data_egr_queuing_v1_egress_queues_table_e;

/* Get Data */
/**
 * \brief get table supported_nof_priorities entry 
 * supported number of priorities
 * 
 * \param [in] unit - unit #
 * \param [in] priorities - number of priorities
 * 
 * \return
 *     supported_nof_priorities - returns the relevant entry values grouped in struct - see dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_t * dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_get(
    int unit,
    int priorities);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'egr_queuing_v1', Submodule - 'egress_queues', table - 'supported_nof_priorities'
 * supported number of priorities
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)supported_nof_priorities info
 * supported number of priorities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     supported_nof_priorities - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_egr_queuing_v1_egress_queues_supported_nof_priorities_info_get(
    int unit);

/*
 * SUBMODULE SCHEDULING:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_egr_queuing_v1_scheduling_feature_get(
    int unit,
    dnx_data_egr_queuing_v1_scheduling_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_egr_queuing_v1_scheduling_define_nof_interface_calendar_slots,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_scheduling_define_nof
} dnx_data_egr_queuing_v1_scheduling_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_interface_calendar_slots
 * Module - 'egr_queuing_v1', Submodule - 'scheduling', data - 'nof_interface_calendar_slots'
 * the number of slots in the interface calendar(mux)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_interface_calendar_slots - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_scheduling_nof_interface_calendar_slots_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_scheduling_table_nof
} dnx_data_egr_queuing_v1_scheduling_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE SHAPING:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_egr_queuing_v1_shaping_feature_get(
    int unit,
    dnx_data_egr_queuing_v1_shaping_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_egr_queuing_v1_shaping_define_default_max_burst,

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_shaping_define_nof
} dnx_data_egr_queuing_v1_shaping_define_e;

/* Get Data */
/**
 * \brief returns define data of default_max_burst
 * Module - 'egr_queuing_v1', Submodule - 'shaping', data - 'default_max_burst'
 * default max burst size to be used in shapers if user didn't used API to define it, common value is order of magnitude of MTU size ~16k
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_max_burst - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_egr_queuing_v1_shaping_default_max_burst_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_egr_queuing_v1_shaping_table_nof
} dnx_data_egr_queuing_v1_shaping_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_egr_queuing_v1_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_EGR_QUEUING_V1_H_*/
/* *INDENT-ON* */
