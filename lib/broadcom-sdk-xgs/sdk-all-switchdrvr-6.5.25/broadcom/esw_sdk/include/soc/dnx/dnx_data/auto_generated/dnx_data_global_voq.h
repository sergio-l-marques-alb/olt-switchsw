/** \file dnx_data_global_voq.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_GLOBAL_VOQ_H_
/*{*/
#define _DNX_DATA_GLOBAL_VOQ_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_global_voq.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_global_voq
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_global_voq_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * COSQ Global VOQ general definitions
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule general table valid_quanta_sizes
 * Table info:
 * supported quanta sizes
 */
typedef struct
{
    /**
     * The quanta size of the VOQ
     */
    uint quanta_size;
    /**
     * indicates that this quanta_size is supported by device
     */
    int is_valid;
} dnx_data_global_voq_general_valid_quanta_sizes_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * is Global VOQ supported
     */
    dnx_data_global_voq_general_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_global_voq_general_feature_nof
} dnx_data_global_voq_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_global_voq_general_feature_get_f) (
    int unit,
    dnx_data_global_voq_general_feature_e feature);

/**
 * \brief returns define data of min_refresh_interval
 * Module - 'global_voq', Submodule - 'general', data - 'min_refresh_interval'
 * Minimal time interval (in cycles) between each VOQ sample
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_refresh_interval - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_general_min_refresh_interval_get_f) (
    int unit);

/**
 * \brief returns define data of tc_profile_nof
 * Module - 'global_voq', Submodule - 'general', data - 'tc_profile_nof'
 * Number of tc profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tc_profile_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_general_tc_profile_nof_get_f) (
    int unit);

/**
 * \brief returns define data of tc_index_nof
 * Module - 'global_voq', Submodule - 'general', data - 'tc_index_nof'
 * Number of tc indexes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tc_index_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_general_tc_index_nof_get_f) (
    int unit);

/**
 * \brief returns define data of bin_profile_nof
 * Module - 'global_voq', Submodule - 'general', data - 'bin_profile_nof'
 * Number of bin profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bin_profile_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_general_bin_profile_nof_get_f) (
    int unit);

/**
 * \brief returns define data of bin_index_nof
 * Module - 'global_voq', Submodule - 'general', data - 'bin_index_nof'
 * Number of bin indexes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bin_index_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_general_bin_index_nof_get_f) (
    int unit);

/**
 * \brief returns define data of max_bin_threshold
 * Module - 'global_voq', Submodule - 'general', data - 'max_bin_threshold'
 * Maximum bin threshold value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_bin_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_general_max_bin_threshold_get_f) (
    int unit);

/**
 * \brief returns define data of aggregation_entries_nof
 * Module - 'global_voq', Submodule - 'general', data - 'aggregation_entries_nof'
 * Number of aggregation entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     aggregation_entries_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_general_aggregation_entries_nof_get_f) (
    int unit);

/**
 * \brief returns define data of mechanisms_nof
 * Module - 'global_voq', Submodule - 'general', data - 'mechanisms_nof'
 * Number of AQM mechanisms in profile
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mechanisms_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_general_mechanisms_nof_get_f) (
    int unit);

/**
 * \brief get table valid_quanta_sizes entry 
 * supported quanta sizes
 * 
 * \param [in] unit - unit #
 * \param [in] index - table entry index
 * 
 * \return
 *     valid_quanta_sizes - returns the relevant entry values grouped in struct - see dnx_data_global_voq_general_valid_quanta_sizes_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_global_voq_general_valid_quanta_sizes_t *(
    *dnx_data_global_voq_general_valid_quanta_sizes_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GLOBAL_VOQ - GENERAL:
 * {
 */
/**
 * \brief Interface for global_voq general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_global_voq_general_feature_get_f feature_get;
    /**
     * returns define data of min_refresh_interval
     */
    dnx_data_global_voq_general_min_refresh_interval_get_f min_refresh_interval_get;
    /**
     * returns define data of tc_profile_nof
     */
    dnx_data_global_voq_general_tc_profile_nof_get_f tc_profile_nof_get;
    /**
     * returns define data of tc_index_nof
     */
    dnx_data_global_voq_general_tc_index_nof_get_f tc_index_nof_get;
    /**
     * returns define data of bin_profile_nof
     */
    dnx_data_global_voq_general_bin_profile_nof_get_f bin_profile_nof_get;
    /**
     * returns define data of bin_index_nof
     */
    dnx_data_global_voq_general_bin_index_nof_get_f bin_index_nof_get;
    /**
     * returns define data of max_bin_threshold
     */
    dnx_data_global_voq_general_max_bin_threshold_get_f max_bin_threshold_get;
    /**
     * returns define data of aggregation_entries_nof
     */
    dnx_data_global_voq_general_aggregation_entries_nof_get_f aggregation_entries_nof_get;
    /**
     * returns define data of mechanisms_nof
     */
    dnx_data_global_voq_general_mechanisms_nof_get_f mechanisms_nof_get;
    /**
     * get table valid_quanta_sizes entry 
     */
    dnx_data_global_voq_general_valid_quanta_sizes_get_f valid_quanta_sizes_get;
    /**
     * get general info table about table (for example key size)valid_quanta_sizes info
     */
    dnxc_data_table_info_get_f valid_quanta_sizes_info_get;
} dnx_data_if_global_voq_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - DBAL:
 * COSQ Global VOQ dbal definitions
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_global_voq_dbal_feature_nof
} dnx_data_global_voq_dbal_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_global_voq_dbal_feature_get_f) (
    int unit,
    dnx_data_global_voq_dbal_feature_e feature);

/**
 * \brief returns define data of quanta_words_shift_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'quanta_words_shift_nof_bits'
 * Number of bits in quanta word shift field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     quanta_words_shift_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_quanta_words_shift_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of refresh_period_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'refresh_period_nof_bits'
 * Number of bits in refresh period field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     refresh_period_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_refresh_period_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of phase_transition_timeout_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'phase_transition_timeout_nof_bits'
 * Number of bits in phase transition timeout
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_transition_timeout_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_phase_transition_timeout_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of phase_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'phase_nof_bits'
 * Number of bits in phase value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_phase_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of phase_period_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'phase_period_nof_bits'
 * Number of bits in phase period, interval in nano
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_period_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_phase_period_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of phase_start_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'phase_start_nof_bits'
 * Number of bits in phase start, time of day
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phase_start_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_phase_start_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of consecutive_down_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'consecutive_down_nof_bits'
 * Number of bits in consqutive down
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     consecutive_down_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_consecutive_down_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of bin_interval_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'bin_interval_nof_bits'
 * Number of bits in bin interval
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bin_interval_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_bin_interval_nof_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of tc_profile_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'tc_profile_nof_bits'
 * Number of bits in tc profile
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tc_profile_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_tc_profile_nof_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of tc_index_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'tc_index_nof_bits'
 * Number of bits in tc index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tc_index_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_tc_index_nof_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of bin_profile_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'bin_profile_nof_bits'
 * Number of bits in bin profile
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bin_profile_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_bin_profile_nof_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of bin_index_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'bin_index_nof_bits'
 * Number of bits in bin index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bin_index_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_bin_index_nof_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of max_bin_threshold_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'max_bin_threshold_nof_bits'
 * Number of bits in the maximum bin threshold value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_bin_threshold_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_max_bin_threshold_nof_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of base_nof_bits
 * Module - 'global_voq', Submodule - 'dbal', data - 'base_nof_bits'
 * Number of bits in 'Global VOQ-ID'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     base_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_global_voq_dbal_base_nof_bits_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GLOBAL_VOQ - DBAL:
 * {
 */
/**
 * \brief Interface for global_voq dbal data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_global_voq_dbal_feature_get_f feature_get;
    /**
     * returns define data of quanta_words_shift_nof_bits
     */
    dnx_data_global_voq_dbal_quanta_words_shift_nof_bits_get_f quanta_words_shift_nof_bits_get;
    /**
     * returns define data of refresh_period_nof_bits
     */
    dnx_data_global_voq_dbal_refresh_period_nof_bits_get_f refresh_period_nof_bits_get;
    /**
     * returns define data of phase_transition_timeout_nof_bits
     */
    dnx_data_global_voq_dbal_phase_transition_timeout_nof_bits_get_f phase_transition_timeout_nof_bits_get;
    /**
     * returns define data of phase_nof_bits
     */
    dnx_data_global_voq_dbal_phase_nof_bits_get_f phase_nof_bits_get;
    /**
     * returns define data of phase_period_nof_bits
     */
    dnx_data_global_voq_dbal_phase_period_nof_bits_get_f phase_period_nof_bits_get;
    /**
     * returns define data of phase_start_nof_bits
     */
    dnx_data_global_voq_dbal_phase_start_nof_bits_get_f phase_start_nof_bits_get;
    /**
     * returns define data of consecutive_down_nof_bits
     */
    dnx_data_global_voq_dbal_consecutive_down_nof_bits_get_f consecutive_down_nof_bits_get;
    /**
     * returns define data of bin_interval_nof_bits
     */
    dnx_data_global_voq_dbal_bin_interval_nof_bits_get_f bin_interval_nof_bits_get;
    /**
     * returns numeric data of tc_profile_nof_bits
     */
    dnx_data_global_voq_dbal_tc_profile_nof_bits_get_f tc_profile_nof_bits_get;
    /**
     * returns numeric data of tc_index_nof_bits
     */
    dnx_data_global_voq_dbal_tc_index_nof_bits_get_f tc_index_nof_bits_get;
    /**
     * returns numeric data of bin_profile_nof_bits
     */
    dnx_data_global_voq_dbal_bin_profile_nof_bits_get_f bin_profile_nof_bits_get;
    /**
     * returns numeric data of bin_index_nof_bits
     */
    dnx_data_global_voq_dbal_bin_index_nof_bits_get_f bin_index_nof_bits_get;
    /**
     * returns numeric data of max_bin_threshold_nof_bits
     */
    dnx_data_global_voq_dbal_max_bin_threshold_nof_bits_get_f max_bin_threshold_nof_bits_get;
    /**
     * returns numeric data of base_nof_bits
     */
    dnx_data_global_voq_dbal_base_nof_bits_get_f base_nof_bits_get;
} dnx_data_if_global_voq_dbal_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_GLOBAL_VOQ:
 * {
 */
/**
 * \brief Interface for global_voq data
 */
typedef struct
{
    /**
     * Interface for global_voq general data
     */
    dnx_data_if_global_voq_general_t general;
    /**
     * Interface for global_voq dbal data
     */
    dnx_data_if_global_voq_dbal_t dbal;
} dnx_data_if_global_voq_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_global_voq_t dnx_data_global_voq;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_GLOBAL_VOQ_H_*/
/* *INDENT-ON* */
