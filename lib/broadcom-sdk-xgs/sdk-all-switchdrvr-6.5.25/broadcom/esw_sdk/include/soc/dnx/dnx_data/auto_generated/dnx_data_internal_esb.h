/** \file dnx_data_internal_esb.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_ESB_H_
/*{*/
#define _DNX_DATA_INTERNAL_ESB_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_esb.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_esb_submodule_general,
    dnx_data_esb_submodule_dbal,

    /**
     * Must be last one!
     */
    _dnx_data_esb_submodule_nof
} dnx_data_esb_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_esb_general_feature_get(
    int unit,
    dnx_data_esb_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_esb_general_define_total_nof_esb_queues,
    dnx_data_esb_general_define_nof_nif_eth_queues,
    dnx_data_esb_general_define_nof_eth_lp_queues,
    dnx_data_esb_general_define_nof_nif_ilkn_queues,
    dnx_data_esb_general_define_nof_ilkn_tdm_or_lp_queues,
    dnx_data_esb_general_define_nof_flexe_queues,
    dnx_data_esb_general_define_nof_special_queues,
    dnx_data_esb_general_define_nof_reserved_queues,
    dnx_data_esb_general_define_nof_fpc,
    dnx_data_esb_general_define_total_nof_buffers,
    dnx_data_esb_general_define_mux_cal_len,
    dnx_data_esb_general_define_mux_cal_window_size,
    dnx_data_esb_general_define_ilkn_credits_resolution,
    dnx_data_esb_general_define_ilkn_credits_rate_resolution,
    dnx_data_esb_general_define_fpc_ptr_size,
    dnx_data_esb_general_define_nof_buffers_per_fpc,
    dnx_data_esb_general_define_l1_mux_cal_res,
    dnx_data_esb_general_define_tm_egr_queuing_mux_cal_res,
    dnx_data_esb_general_define_flexe_queue_id_base,
    dnx_data_esb_general_define_ilkn_queue_id_base,
    dnx_data_esb_general_define_ilkn_tdm_or_lp_queue_id_base,
    dnx_data_esb_general_define_eth_lp_queue_id_base,
    dnx_data_esb_general_define_nof_egr_txi_interfaces,
    dnx_data_esb_general_define_max_queue_to_map_to_nif,
    dnx_data_esb_general_define_txi_irdy_th_factor,
    dnx_data_esb_general_define_txi_irdy_th_divident,
    dnx_data_esb_general_define_slow_port_dedicated_queue,
    dnx_data_esb_general_define_flexe_l1_dest_dedicated_queue,

    /**
     * Must be last one!
     */
    _dnx_data_esb_general_define_nof
} dnx_data_esb_general_define_e;

/* Get Data */
/**
 * \brief returns define data of total_nof_esb_queues
 * Module - 'esb', Submodule - 'general', data - 'total_nof_esb_queues'
 * Number of ESB queue IDs, each queue represents an interface (NIFs or special)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_esb_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_total_nof_esb_queues_get(
    int unit);

/**
 * \brief returns define data of nof_nif_eth_queues
 * Module - 'esb', Submodule - 'general', data - 'nof_nif_eth_queues'
 * Number of ESB queue IDs that represent NIF ETH interfaces
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_nif_eth_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_nif_eth_queues_get(
    int unit);

/**
 * \brief returns define data of nof_eth_lp_queues
 * Module - 'esb', Submodule - 'general', data - 'nof_eth_lp_queues'
 * Number of ESB queue IDs dedicated for ETH Low priority traffic
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_eth_lp_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_eth_lp_queues_get(
    int unit);

/**
 * \brief returns define data of nof_nif_ilkn_queues
 * Module - 'esb', Submodule - 'general', data - 'nof_nif_ilkn_queues'
 * Number of ESB queue IDs that represent NIF ILKN interfaces
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_nif_ilkn_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_nif_ilkn_queues_get(
    int unit);

/**
 * \brief returns define data of nof_ilkn_tdm_or_lp_queues
 * Module - 'esb', Submodule - 'general', data - 'nof_ilkn_tdm_or_lp_queues'
 * Number of ESB queue IDs dedicated for ILKN TDM interleave or Low priority traffic
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ilkn_tdm_or_lp_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_ilkn_tdm_or_lp_queues_get(
    int unit);

/**
 * \brief returns define data of nof_flexe_queues
 * Module - 'esb', Submodule - 'general', data - 'nof_flexe_queues'
 * Number of ESB queue IDs that represent FlexE interfaces
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_flexe_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_flexe_queues_get(
    int unit);

/**
 * \brief returns define data of nof_special_queues
 * Module - 'esb', Submodule - 'general', data - 'nof_special_queues'
 * Number of ESB queue IDs that represent special interfaces
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_special_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_special_queues_get(
    int unit);

/**
 * \brief returns define data of nof_reserved_queues
 * Module - 'esb', Submodule - 'general', data - 'nof_reserved_queues'
 * Number of ESB queue IDs that are reserved(not used)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_reserved_queues - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_reserved_queues_get(
    int unit);

/**
 * \brief returns define data of nof_fpc
 * Module - 'esb', Submodule - 'general', data - 'nof_fpc'
 * Number of Free Pointer Controlers
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fpc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_fpc_get(
    int unit);

/**
 * \brief returns define data of total_nof_buffers
 * Module - 'esb', Submodule - 'general', data - 'total_nof_buffers'
 * Number of buffers
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_buffers - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_total_nof_buffers_get(
    int unit);

/**
 * \brief returns define data of mux_cal_len
 * Module - 'esb', Submodule - 'general', data - 'mux_cal_len'
 * Calendar length for the ESB MUX calendar
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mux_cal_len - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_mux_cal_len_get(
    int unit);

/**
 * \brief returns define data of mux_cal_window_size
 * Module - 'esb', Submodule - 'general', data - 'mux_cal_window_size'
 * Calendar window size for the ESB MUX calendar - how many slots are in a single calendar entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mux_cal_window_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_mux_cal_window_size_get(
    int unit);

/**
 * \brief returns define data of ilkn_credits_resolution
 * Module - 'esb', Submodule - 'general', data - 'ilkn_credits_resolution'
 * number of credits to add for each speed resolution
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_credits_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_ilkn_credits_resolution_get(
    int unit);

/**
 * \brief returns define data of ilkn_credits_rate_resolution
 * Module - 'esb', Submodule - 'general', data - 'ilkn_credits_rate_resolution'
 * ilkn rate resolution (units: Mbps), for calculate the number of credits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_credits_rate_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_ilkn_credits_rate_resolution_get(
    int unit);

/**
 * \brief returns define data of fpc_ptr_size
 * Module - 'esb', Submodule - 'general', data - 'fpc_ptr_size'
 * size of fpc ptr
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fpc_ptr_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_fpc_ptr_size_get(
    int unit);

/**
 * \brief returns define data of nof_buffers_per_fpc
 * Module - 'esb', Submodule - 'general', data - 'nof_buffers_per_fpc'
 * Number of buffers per Free Pointer Controller
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_buffers_per_fpc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_buffers_per_fpc_get(
    int unit);

/**
 * \brief returns define data of l1_mux_cal_res
 * Module - 'esb', Submodule - 'general', data - 'l1_mux_cal_res'
 * Resolution of the MUX calendar used for L1 ports. units: Mbps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     l1_mux_cal_res - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_l1_mux_cal_res_get(
    int unit);

/**
 * \brief returns define data of tm_egr_queuing_mux_cal_res
 * Module - 'esb', Submodule - 'general', data - 'tm_egr_queuing_mux_cal_res'
 * Resolution of the MUX calendar used for TM Egr Queuing ports. units: Mbps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_egr_queuing_mux_cal_res - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_tm_egr_queuing_mux_cal_res_get(
    int unit);

/**
 * \brief returns define data of flexe_queue_id_base
 * Module - 'esb', Submodule - 'general', data - 'flexe_queue_id_base'
 * Base for start of FlexE queues.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flexe_queue_id_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_flexe_queue_id_base_get(
    int unit);

/**
 * \brief returns define data of ilkn_queue_id_base
 * Module - 'esb', Submodule - 'general', data - 'ilkn_queue_id_base'
 * Base for start of ILKN queues.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_queue_id_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_ilkn_queue_id_base_get(
    int unit);

/**
 * \brief returns define data of ilkn_tdm_or_lp_queue_id_base
 * Module - 'esb', Submodule - 'general', data - 'ilkn_tdm_or_lp_queue_id_base'
 * Base for start of ILKN TDM interleave queues or Low priority traffic.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_tdm_or_lp_queue_id_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_ilkn_tdm_or_lp_queue_id_base_get(
    int unit);

/**
 * \brief returns define data of eth_lp_queue_id_base
 * Module - 'esb', Submodule - 'general', data - 'eth_lp_queue_id_base'
 * Base for start of ETH Low priority traffic queues.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eth_lp_queue_id_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_eth_lp_queue_id_base_get(
    int unit);

/**
 * \brief returns define data of nof_egr_txi_interfaces
 * Module - 'esb', Submodule - 'general', data - 'nof_egr_txi_interfaces'
 * Number of EGQ TXI interfaces that can be mapped to ESB queues.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egr_txi_interfaces - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_nof_egr_txi_interfaces_get(
    int unit);

/**
 * \brief returns define data of max_queue_to_map_to_nif
 * Module - 'esb', Submodule - 'general', data - 'max_queue_to_map_to_nif'
 * Max ESB queue ID that can be mapped to NIF port.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_queue_to_map_to_nif - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_max_queue_to_map_to_nif_get(
    int unit);

/**
 * \brief returns numeric data of txi_irdy_th_factor
 * Module - 'esb', Submodule - 'general', data - 'txi_irdy_th_factor'
 * Value of a per-device parameter used to calculate the IRDY threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     txi_irdy_th_factor - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_txi_irdy_th_factor_get(
    int unit);

/**
 * \brief returns numeric data of txi_irdy_th_divident
 * Module - 'esb', Submodule - 'general', data - 'txi_irdy_th_divident'
 * Value of a per-device parameter used to calculate the IRDY threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     txi_irdy_th_divident - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_txi_irdy_th_divident_get(
    int unit);

/**
 * \brief returns numeric data of slow_port_dedicated_queue
 * Module - 'esb', Submodule - 'general', data - 'slow_port_dedicated_queue'
 * Dedicated ESB queue ID for Slow Ports (under 10G) to be used in the MUX calendar
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     slow_port_dedicated_queue - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_slow_port_dedicated_queue_get(
    int unit);

/**
 * \brief returns numeric data of flexe_l1_dest_dedicated_queue
 * Module - 'esb', Submodule - 'general', data - 'flexe_l1_dest_dedicated_queue'
 * Dedicated ESB queue ID for FlexE L1 destination ports to be used in the MUX calendar
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flexe_l1_dest_dedicated_queue - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_general_flexe_l1_dest_dedicated_queue_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_esb_general_table_if_esb_params,

    /**
     * Must be last one!
     */
    _dnx_data_esb_general_table_nof
} dnx_data_esb_general_table_e;

/* Get Data */
/**
 * \brief get table if_esb_params entry 
 * Configuration parameters for ESB
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Table index
 * 
 * \return
 *     if_esb_params - returns the relevant entry values grouped in struct - see dnx_data_esb_general_if_esb_params_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_esb_general_if_esb_params_t * dnx_data_esb_general_if_esb_params_get(
    int unit,
    int idx);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'esb', Submodule - 'general', table - 'if_esb_params'
 * Configuration parameters for ESB
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_esb_general_if_esb_params_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)if_esb_params info
 * Configuration parameters for ESB
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     if_esb_params - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_esb_general_if_esb_params_info_get(
    int unit);

/*
 * SUBMODULE DBAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_esb_dbal_feature_get(
    int unit,
    dnx_data_esb_dbal_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_esb_dbal_define_pm_internal_port_size,
    dnx_data_esb_dbal_define_counter_config_mask_size,
    dnx_data_esb_dbal_define_credit_size_bits,
    dnx_data_esb_dbal_define_txi_irdy_thresh_size,

    /**
     * Must be last one!
     */
    _dnx_data_esb_dbal_define_nof
} dnx_data_esb_dbal_define_e;

/* Get Data */
/**
 * \brief returns define data of pm_internal_port_size
 * Module - 'esb', Submodule - 'dbal', data - 'pm_internal_port_size'
 * Size in bits of the port number internal to the port macro field in table for ESB queue to EGQ interface mapping
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_internal_port_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_dbal_pm_internal_port_size_get(
    int unit);

/**
 * \brief returns define data of counter_config_mask_size
 * Module - 'esb', Submodule - 'dbal', data - 'counter_config_mask_size'
 * Size in bits of the mask for ESB queues to display in the ESB debug counter
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     counter_config_mask_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_dbal_counter_config_mask_size_get(
    int unit);

/**
 * \brief returns define data of credit_size_bits
 * Module - 'esb', Submodule - 'dbal', data - 'credit_size_bits'
 * Size in bits of EPNI TXI initial credit size value.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     credit_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_dbal_credit_size_bits_get(
    int unit);

/**
 * \brief returns define data of txi_irdy_thresh_size
 * Module - 'esb', Submodule - 'dbal', data - 'txi_irdy_thresh_size'
 * Size in bits of EPNI TXI IRDY threshold value.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     txi_irdy_thresh_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_esb_dbal_txi_irdy_thresh_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_esb_dbal_table_nof
} dnx_data_esb_dbal_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_esb_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_ESB_H_*/
/* *INDENT-ON* */
