/** \file dnx/swstate/auto_generated/types/algo_lif_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2021 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __ALGO_LIF_TYPES_H__
#define __ALGO_LIF_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnx/dbal/auto_generated/dbal_defines_tables.h>
#include <soc/dnxc/swstate/callbacks/sw_state_htb_callbacks.h>
#include <soc/dnxc/swstate/callbacks/sw_state_ll_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/dnxc/swstate/types/sw_state_hash_table.h>
#include <soc/dnxc/swstate/types/sw_state_linked_list.h>
/*
 * MACROs
 */

#define MAX_EEDB_BANKS_PER_OUTLIF_BANK 4

/*
 * ENUMs
 */

/**
 * Enum used to indicate per {physical phase,appdb,RT} whether a link list pointer can exist
 */
typedef enum {
    /**
     * LL always exists
     */
    DNX_LOCAL_OUTLIF_LL_ALWAYS = 2,
    /**
     * LL may exist
     */
    DNX_LOCAL_OUTLIF_LL_OPTIONAL = 1,
    /**
     * LL never exists
     */
    DNX_LOCAL_OUTLIF_LL_NEVER = 0
} dnx_local_outlif_ll_indication_e;

/*
 * STRUCTs
 */

/**
 * These fields holds a pair of dbal table and a result type within it, which are valid for mapping to a certain eedb phase
 */
typedef struct {
    /**
     * dbal table id
     */
    dbal_tables_e dbal_table;
    /**
     * the result type index within the dbal table
     */
    uint8 dbal_result_type;
} dbal_to_phase_info_t;

/**
 * Info for each outlif bank. The outlif banks represent 8k local outlifs (number determined by resolution of linked list bank) and are logically unrelated to their physical location.
 */
typedef struct {
    /**
     * Indication of whether this bank is assigned to a specific physical database or not, and which type (MDB or EEDB)
     */
    uint8 assigned;
    /**
     * Boolean indication of whether this bank is in use or not.
     */
    uint8 in_use;
    /**
     * EEDB Logical phase using this table (0-7).
     */
    uint8 used_logical_phase;
    /**
     * Boolean indication of whether this bank is using linked list or not.
     */
    uint8 ll_in_use;
    /**
     * Index of the linked list bank that belongs to this bank, from the logcial phase's list.
     */
    uint8 ll_index;
    /**
     * If this outlif bank is using EEDB banks to store data, then these are their indexes.
     */
    uint8 eedb_data_banks[MAX_EEDB_BANKS_PER_OUTLIF_BANK];
} local_outlif_bank_info_t;

/**
 * Information for each outlif logical phase.
 */
typedef struct {
    /**
     * Physical phase this logical phase is mapped to.
     */
    uint8 physical_phase;
    /**
     * MDB address granularity for this logical phase
     */
    uint8 address_granularity;
    /**
     * First outlif bank used by this logical phase.
     */
    uint32 first_bank;
    /**
     * Last outlif bank used by this logical phase.
     */
    uint32 last_bank;
    /**
     * First outlif bank used by this logical phase above 512k.
     */
    uint32 first_no_ll_bank;
    /**
     * Last outlif bank used by this logical phase above 512k.
     */
    uint32 last_no_ll_bank;
    /**
     * First linked list bank available for this phase.
     */
    uint8 first_ll_bank;
    /**
     * Last linked list bank available for this phase.
     */
    uint8 last_ll_bank;
    sw_state_htbl_t dbal_valid_combinations;
} outlif_logical_phase_info_t;

/**
 * Information required to manage the physical EEDB banks
 */
typedef struct {
    /**
     * Occupation bitmap of the eedb banks.
     */
    SHR_BITDCL* bank_occupation_bitmap;
    /**
     * Occupation bitmap of the outlif prefixes. Keep it to avoid aliasing
     */
    SHR_BITDCL* outlif_prefix_occupation_bitmap;
    /**
     * For each logical phase, keep a linked list of the eedb banks used for data in this phase.
     */
    sw_state_multihead_ll_t used_data_bank_per_logical_phase;
} eedb_banks_info_t;

typedef struct {
    /**
     * Set this to TRUE during tests to force the outlif allocation to use eedb banks instead of EEDB clusters.
     */
    uint8 disable_mdb_clusters;
    /**
     * Set this to TRUE during tests to force the outlif allocation to use mdb clusters instead of EEDB banks.
     */
    uint8 disable_eedb_data_banks;
    /**
     * Info per outlif bank.
     */
    local_outlif_bank_info_t* outlif_bank_info;
    /**
     * Info per logical phase.
     */
    outlif_logical_phase_info_t* logical_phase_info;
    /**
     * Map from eedb physical phase to outlif logical phase.
     */
    uint8* physical_phase_to_logical_phase_map;
    /**
     * Information required to manage the physical EEDB banks
     */
    eedb_banks_info_t eedb_banks_info;
} local_outlif_info_t;


#endif /* __ALGO_LIF_TYPES_H__ */
