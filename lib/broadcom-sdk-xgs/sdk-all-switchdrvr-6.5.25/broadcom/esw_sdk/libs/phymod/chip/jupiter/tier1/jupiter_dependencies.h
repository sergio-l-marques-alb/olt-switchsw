/***********************************************************************************
 *                                                                                 *
 * Copyright: (c) 2021 Broadcom.                                                   *
 * Broadcom Proprietary and Confidential. All rights reserved.                     *
 *                                                                                 *
 ***********************************************************************************/

/**************************************************************************************
 **************************************************************************************
 *                                                                                    *
 *  Revision      :   *
 *                                                                                    *
 *  Description   :  API Dependencies to be provided by IP user                       *
 *                                                                                    *
 **************************************************************************************
 **************************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

#ifndef JUPITER_API_DEPENDENCIES_H
#define JUPITER_API_DEPENDENCIES_H
#include <phymod/phymod.h>
#include <phymod/phymod_system.h>

typedef phymod_access_t mss_access_t;
#define USR_PRINTF(stuff)             PHYMOD_DEBUG_ERROR(stuff)
#define USR_USLEEP(useconds)          PHYMOD_USLEEP(useconds)
#define USR_SLEEP(seconds)            PHYMOD_SLEEP(seconds)

#ifdef SERDES_API_FLOATING_POINT
#define USR_DOUBLE                    double
#else
#define USR_DOUBLE       int
#define double       undefined
#define float        undefined
#endif

/*! @file
 * @brief Dependencies to be provided by IP User
 */
typedef enum pmd_rd_opcode_e {
    RD_EQ    = 0, //Read equal check
    RD_GT    = 1, //Read greater than check
    RD_GTE   = 2, //Read greater than or equal check
    RD_LT    = 3, //Read less than check
    RD_LTE   = 4, //Read less than or equal check
    RD_RANGE = 5  //Read range check
} pmd_rd_opcode_t;


/*! @addtogroup APITag
 * @{
 */

int pmd_set_lane(mss_access_t *sa__, uint32_t lane);

/** Read a register from the currently selected Serdes IP Lane.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] address Address of register to be read.
 * @param[out] *val value read out from the register.
 * @return Error code generated by read function (returns ERR_CODE_NONE if no errors).
 */
int pmd_read_field(mss_access_t *mss, uint32_t addr, uint32_t fld_mask, uint32_t fld_offset, uint32_t *rdval);

/** Write to a register from the currently selected Serdes IP Lane.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] address Address of register to be written.
 * @param[in] val Value to be written to the register.
 * @return Error code generated by write function (returns ERR_CODE_NONE if no errors).
 */
int pmd_write_field(mss_access_t *mss, uint32_t addr, uint32_t fld_mask, uint32_t fld_offset, uint32_t wval);

int pmd_poll_field(mss_access_t *mss, uint32_t addr, uint32_t fld_mask, uint32_t fld_offset, uint32_t poll_val, uint32_t timeout_us);

int pmd_read_check_field(mss_access_t *mss, uint32_t addr, uint32_t fld_mask, uint32_t fld_offset, pmd_rd_opcode_t rd_opcode, uint32_t *rdval, uint32_t rdcheck_val1, uint32_t rdcheck_val2);

int pmd_pram_write_sram(mss_access_t *sa__, uint32_t **ucode_arr, uint32_t ucode_len);

int pmd_read_addr(const mss_access_t *sa__, uint32_t addr, uint32_t *val);

int pmd_write_addr(const mss_access_t *sa__, uint32_t addr, uint32_t val);

int pmd_mdio_write_addr(mss_access_t *sa__, uint32_t ucode_addr, uint32_t ucode_val);

/*! @} SerdesAPIDependenciesTag */
/*! @} APITag */
#endif /* SERDES_API_DEPENDENCIES_H */
#ifdef __cplusplus
}
#endif
