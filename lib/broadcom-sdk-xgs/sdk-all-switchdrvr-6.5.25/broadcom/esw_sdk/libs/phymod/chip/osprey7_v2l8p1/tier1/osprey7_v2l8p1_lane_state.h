/***********************************************************************************
 *                                                                                 *
 * Copyright: (c) 2020 Broadcom.                                                   *
 * Broadcom Proprietary and Confidential. All rights reserved.                     *
 *                                                                                 *
 *  Revision      :                                                            *
 *                                                                                 *
 *  Description   :  This is an auto generated diagnostic dump tool file           *
 *                                                                                 *
 **********************************************************************************/

/* THIS FILE IS GENERATED USING AN AUTOMATED SCRIPT.DO NOT EDIT THIS FILE DIRECTLY! */
#ifdef __cplusplus
extern "C" {
#endif

#ifndef OSPREY7_V2L8P1_API_LANE_STATE_H
#define OSPREY7_V2L8P1_API_LANE_STATE_H
#include "osprey7_v2l8p1_ipconfig.h"
#include "osprey7_v2l8p1_usr_includes.h"
#include "common/srds_api_err_code.h"
#include "common/srds_api_types.h"

/*! @file
 *  @brief Auto generated tool for updating struct member fields
 */

/*! @addtogroup APITag
 * @{
 */

/*! @defgroup SerdesApiLaneStateTag Struct Collection APIs
 * Serdes API functions used for updating structs.
 */

/*! @addtogroup SerdesApiLaneStateTag
 * @{
 */

 #ifndef SMALL_FOOTPRINT

#include "osprey7_v2l8p1_common.h"


/** osprey7_v2l8p1_lane_state_st
 * 
 */
typedef struct osprey7_v2l8p1_lane_state_st {
    /** Currently Selected Lane index */
    uint32_t laneid;
    /** RX PAM4 Mode */
    uint8_t rx_pam_mode;
    /** Baud Rate Phase Detector enable */
    uint8_t CDR;
    /** OSR Mode TX String */
    char tx_osr_mode_str[SRDS_MAX_OSR_STR_LEN];
    /** OSR Mode RX String */
    char rx_osr_mode_str[SRDS_MAX_OSR_STR_LEN];
    /** uC lane configuration */
    uint16_t UC_CFG;
    /** uC lane status */
    uint8_t UC_STS;
    /** Extended uC lane status */
    uint16_t UC_STS_EXT;
    /** lane_reset_state */
    uint8_t rx_rst;
    /** lane_tx_reset_state */
    uint8_t tx_rst;
    /** uC stopped state */
    uint8_t stop_state;
    /** Signal Detect */
    uint8_t sig_det;
    /** Signal Detect Change */
    uint8_t sig_det_chg;
    /** PMD RX Lock */
    uint8_t pmd_lock;
    /** PMD RX Lock Change */
    uint8_t pmd_lock_chg;
    /** Frequency offset of local reference clock with respect to RX data in ppm */
    int16_t ppm;
    /** Delay of zero crossing slicer, m1, wrt to data in PI codes */
    int8_t clk90;
    /** Mid 1 Frequency Peaking filter control */
    uint8_t PF_M1;
    /** Mid 2 Frequency Peaking filter control */
    uint8_t PF_M2;
    /** Low Frequency Peaking filter control */
    uint8_t PF_L;
    uint8_t PF_H;
    /** Variable Gain Amplifier setting */
    int8_t VGA;
    /** Fixed Gain setting */
    int8_t FGA;
    /** DC offset DAC control value */
    int8_t DCO;
    /** Vertical threshold voltage of p1 slicer (mV) */
    int16_t P1mV;
    /** Vertical threshold voltage of m1 slicer (mV) [Used to read out 'channel loss hint' in PAM4 mode] */
    int16_t TP0;
    /** blind ctle ctrl */
    uint8_t TP1;
    /** Tuning parameter 2 */
    int8_t TP2;
    /** Tuning parameter 3 */
    int8_t TP3;
    /** RX FFE Gain */
    uint8_t RXFFE_g;
    /** RX FFE1 */
    int8_t RXFFE_n1;
    /** RX FFE2 */
    int8_t RXFFE_p1;
    /** DFE tap 1 value */
    int8_t DFE1;
    /** DFE tap 2 value */
    int8_t DFE2;
    /** DFE tap 3 value */
    int8_t DFE3;
    /** DFE tap 4 value */
    int8_t DFE4;
    /** DFE tap 5 value */
    int8_t DFE5;
    /** Total DFE activity index */
    uint8_t DFESidx;
    /** Frequency offset of local reference clock with respect to TX data in ppm */
    int16_t tx_ppm;
    /** TX Link Training Enable */
    uint8_t linktrn_en;
    /** TX Precoder Enable */
    uint8_t tx_prec_en;
    /** TX equalization FIR pre3 tap weight */
    int16_t TXEQ_n3;
    /** TX equalization FIR pre2 tap weight */
    int16_t TXEQ_n2;
    /** TX equalization FIR pre1 tap weight */
    int16_t TXEQ_n1;
    /** TX equalization FIR main tap weight */
    int16_t TXEQ_m;
    /** TX equalization FIR post1 tap weight */
    int16_t TXEQ_p1;
    /** TX equalization FIR post2 tap weight */
    int16_t TXEQ_p2;
    /** Horizontal left eye margin @ 1e-5 as seen by internal diagnostic slicer in mUI and mV */
    uint16_t heye_left;
    /** Horizontal right eye margin @ 1e-5 as seen by internal diagnostic slicer in mUI and mV */
    uint16_t heye_right;
    /** Vertical upper eye margin @ 1e-5 as seen by internal diagnostic slicer in mUI and mV */
    uint16_t veye_upper;
    /** Vertical lower eye margin @ 1e-5 as seen by internal diagnostic slicer in mUI and mV */
    uint16_t veye_lower;
    /** Link time in milliseconds */
    uint32_t link_time;
    /** BER String */
    char BER[SRDS_MAX_BER_STR_LEN];
    /** blind_ctle_trnsum */
    int16_t blind_ctle_trnsum;
    /** AFE bw metric */
    int16_t afe_bw_metric;
    /** FFE Enabled */
    uint8_t ffe_enabled;
    /** OSR Mode */
    osprey7_v2l8p1_osr_mode_st osr_mode;
    /** RX Tuning Done */
    uint8_t rx_tuning_done;
    /** 6 Tap Mode Enabled */
    uint8_t enable_6taps;
    /** Control for disabling the display of eye margin est */
    uint8_t disable_eye_display;
    /** Peaking Filter Main Settings */
    int8_t pf_main;
    /** Peaking filter 3 control */
    int8_t pf3_ctrl;
    /** High Frequency Peaking filter control */
    uint8_t pfh1_ctrl;
    /** High Frequency Peaking filter control */
    uint8_t pfh2_ctrl;
    /** DFE tap 6 value */
    int8_t dfe6;
    /** TX PAM4 Mode */
    uint8_t tx_pam_mode;
    /** TX Disable Status */
    uint8_t tx_disable_status;
    /** TX equalization FIR tap range */
    uint8_t txfir_use_pam4_range;
    /** TX equalization FIR tap weights */
    osprey7_v2l8p1_txfir_st txfir;
    /** Selected PLL index for TX */
    uint8_t tx_pll_select;
    /** Selected PLL index for RX */
    uint8_t rx_pll_select;
    /** Is tx pmd dp inverted? */
    uint8_t tx_pmd_dp_invert;
    /** Is rx pmd dp inverted? */
    uint8_t rx_pmd_dp_invert;
    /** Is remote loopback enabled? */
    uint8_t rmt_lpbk_en;
    /** Is digital loopback enabled? */
    uint8_t dig_lpbk_en;
    /** Is internal (analog) loopback enabled? */
    uint8_t ilb_en;
    /** Is Tx PI enabled? */
    uint8_t tx_pi_en;
    /** UC Status Decoded */
    char uc_sts_decoded[SRDS_MAX_UC_STS_STR_LEN];
    /** uc_sts_ext_decoded */
    char uc_sts_ext_decoded[SRDS_MAX_UC_STS_EXT_STR_LEN];
} osprey7_v2l8p1_lane_state_st_t;

/** osprey7_v2l8p1_gen_collect_osprey7_v2l8p1_lane_state_st
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] st struct pointer which will have its fields updated
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t osprey7_v2l8p1_gen_collect_osprey7_v2l8p1_lane_state_st(srds_access_t *sa__, osprey7_v2l8p1_lane_state_st_t *st);

#endif /* !SMALL_FOOTPRINT */
/*! @} SerdesApiLaneStateTag */
/*! @} APITag */
#endif /* SERDES_API_LANE_STATE_H */
#ifdef __cplusplus
}
#endif
