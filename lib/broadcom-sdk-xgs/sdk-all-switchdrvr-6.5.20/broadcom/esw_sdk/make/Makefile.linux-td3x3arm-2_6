# $Id: Makefile.linux-iproc Exp $
# $Copyright: (c) 2020 Broadcom.
# Broadcom Proprietary and Confidential. All rights reserved.$
# Makefile for iproc-CMICd

# User must select one platform from below.By default ARM_LINUX is selected. .
ifeq (,$(BUILD_PLATFORM))
BUILD_PLATFORM=ARM_LINUX
endif

# TOOLCHAIN_BASE_DIR    Toolchain base directory for iPROC-CMICd devices
# TARGET_ARCHITECTURE   Compiler for target architecture
# KERNDIR               Kernel directory for iPROC-CMICd devices

# TOOLCHAIN_BASE_DIR ?= /projects/ntsw-tools/linux/iproc_ldks/xldk60/XLDK64
# TARGET_ARCHITECTURE ?= aarch64-broadcom-linux-uclibc
# KERNDIR ?= $(TOOLCHAIN_BASE_DIR)/kernel/linux
TOOLCHAIN_BASE_DIR ?= /opt/xldk/6.0.1/helix5/usr
TARGET_ARCHITECTURE:= aarch64-broadcom-linux-gnu
#KERNDIR ?= /home/disk2/rcosta/work_ppc/proj/olt-swdrv/linux-tc16sxg_mod/linux-5.4.2
KERNDIR ?= /home/olt_shared/switchdrvr/netband-libs/trunk/linux-tc16sxg/linux-5.4.2

#ifeq (,$(CROSS_COMPILE))
#CROSS_COMPILE:= $(TARGET_ARCHITECTURE)-
#endif

# A72 tools
#TOOLCHAIN_BIN_DIR=$(TOOLCHAIN_BASE_DIR)/buildroot/host/usr/bin
TOOLCHAIN_BIN_DIR ?= $(TOOLCHAIN_BASE_DIR)/bin
#override PATH:=$(TOOLCHAIN_BASE_DIR)/buildroot/host/usr/$(TARGET_ARCHITECTURE)/bin:$(TOOLCHAIN_BIN_DIR):$(PATH)
#override PATH:=$(TOOLCHAIN_BASE_DIR)/$(TARGET_ARCHITECTURE)/bin:$(TOOLCHAIN_BIN_DIR):$(PATH)
override PATH:=$(TOOLCHAIN_BIN_DIR):$(PATH)
#LD_LIBRARY_PATH=$(TOOLCHAIN_BASE_DIR)/buildroot/host/usr/lib
LD_LIBRARY_PATH ?= $(TOOLCHAIN_BASE_DIR)/lib

#CROSS_GCC_VER ?= $(shell $(TOOLCHAIN_BIN_DIR)/$(CROSS_COMPILE)gcc -dumpversion)
export TOOLCHAIN_BIN_DIR LD_LIBRARY_PATH

# Default Linux include directory
ifeq (,$(LINUX_INCLUDE))
LINUX_INCLUDE := $(KERNDIR)/include
endif


#ifeq (BE,$(ENDIAN_MODE))
#CFGFLAGS += -DSYS_BE_PIO=1 -DSYS_BE_PACKET=0 -DSYS_BE_OTHER=1
#ENDIAN = BE_HOST=1
#else
CFGFLAGS += -DSYS_BE_PIO=0 -DSYS_BE_PACKET=0 -DSYS_BE_OTHER=0
ENDIAN = LE_HOST=1
#endif

#CFLAGS += -DPTRS_ARE_64BITS -DLONGS_ARE_64BITS
#CFLAGS += -DPHYS_ADDRS_ARE_64BITS
#CFLAGS += -fno-aggressive-loop-optimizations -fno-strict-overflow
#CFLAGS += -Wno-error=maybe-uninitialized
#CFLAGS += -Wno-error=unused-function
#CFLAGS += -Wno-error=array-bounds
#CFLAGS += -Wno-error=format-overflow
#CFLAGS += -fgnu89-inline
#ifeq "$(shell expr `echo $(CROSS_GCC_VER) | cut -f1 -d.` \>= 8)" "1"
#    CFLAGS += -Wno-stringop-overflow
#    CFLAGS += -Wno-stringop-truncation
#    CFLAGS += -Wno-error=restrict
#endif

CFGFLAGS += -D$(ENDIAN) -DIPROC_CMICD
CFGFLAGS += -DBCM_PLATFORM_STRING=\"TD3X3ARM\"
CFGFLAGS += -DSAL_BDE_DMA_MEM_DEFAULT=16
CFGFLAGS += -DPTRS_ARE_64BITS -DPHYS_ADDRS_ARE_64BITS -DSAL_BDE_USE_MMAP64

ARCH = arm64
KBUILD_VERBOSE = 1

export ARCH KBUILD_VERBOSE

comma = ,
basetarget = $(basename $(notdir $@))
modname = $(basetarget)

# Extra variables.
EXTRA_CFLAGS = -D"KBUILD_STR(s)=\#s" $(basename_flags) $(modname_flags)
EXTRA_CFLAGS+= -Wno-unused-but-set-variable

name-fix = $(subst $(comma),_,$(subst -,_,$1))
basename_flags = -D"KBUILD_BASENAME=KBUILD_STR($(call name-fix,$(basetarget)))"
modname_flags  = $(if $(filter 1,$(words $(modname))),\
                 -D"KBUILD_MODNAME=KBUILD_STR($(call name-fix,$(modname)))")

#KFLAG_INCLD = $(TOOLCHAIN_BASE_DIR)/buildroot/usr/lib/gcc/$(TARGET_ARCHITECTURE)/4.6.3/include
#KFLAG_INCLD = $(TOOLCHAIN_BASE_DIR)/lib/gcc/$(TARGET_ARCHITECTURE)/6.3.0/include
#KFLAG_INCLD ?= $(LD_LIBRARY_PATH)/gcc/$(TARGET_ARCHITECTURE)/$(CROSS_GCC_VER)/include
KFLAG_INCLD = $(TOOLCHAIN_BASE_DIR)/lib/gcc/$(TARGET_ARCHITECTURE)/8.3.0/include

ifeq (,$(KFLAGS))
#KFLAGS := -D__LINUX_ARM_ARCH__=7 -D__KERNEL__ -nostdinc  -isystem $(KFLAG_INCLD) -I$(LINUX_INCLUDE) -include $(LINUX_INCLUDE)/linux/signal.h -I$(KERNDIR)/headers_dir/include -I$(KERNDIR)/headers_dir/include/asm-generic -include $(KERNDIR)/headers_dir/include/linux/version.h -include $(LINUX_INCLUDE)/generated/autoconf.h -include $(KERNDIR)/headers_dir/include/asm/types.h -I$(KERNDIR)/headers_dir/include/asm -I$(KERNDIR)/arch/arm/include -I$(KERNDIR)/arch/arm/include/generated -I$(KERNDIR)/arch/arm/mach-northstar/include -I$(KERNDIR)/arch/arm/plat-iproc/include -Wall -Wstrict-prototypes -Wno-trigraphs -Os -fno-strict-aliasing -fno-common -marm -mabi=aapcs-linux -fno-pic -pipe -msoft-float -ffreestanding -march=armv7-a -mfpu=vfp -mfloat-abi=softfp -fomit-frame-pointer -g -fno-stack-protector -Wdeclaration-after-statement -Wno-pointer-sign -mlong-calls
#KFLAGS := -D__LINUX_ARM_ARCH__=8 -D__KERNEL__ -nostdinc  -isystem $(KFLAG_INCLD) -I$(LINUX_INCLUDE) -I$(KERNDIR)/../linux-inc/include -I$(KERNDIR)/../linux-inc/include/asm-generic -include $(KERNDIR)/../linux-inc/include/linux/version.h -include $(LINUX_INCLUDE)/generated/autoconf.h -include $(KERNDIR)/../linux-inc/include/asm/types.h -include $(LINUX_INCLUDE)/linux/kconfig.h -include $(KERNDIR)/arch/arm64/include/asm/hwcap.h -include $(KERNDIR)/arch/arm64/include/asm/ptrace.h -include $(KERNDIR)/arch/arm64/include/asm/cpufeature.h -I$(KERNDIR)/../linux-inc/include/asm -I$(KERNDIR)/arch/arm64/include -I$(KERNDIR)/arch/arm64/include/generated -I$(KERNDIR)/arch/arm64/include/asm -Wall -Wstrict-prototypes -Wno-trigraphs -Os -fno-strict-aliasing -fno-common -fno-pic -pipe -ffreestanding -march=armv8-a -fomit-frame-pointer -g -fno-stack-protector -Wdeclaration-after-statement -Wno-pointer-sign
#KFLAGS := -D__LINUX_ARM_ARCH__=8 -D__KERNEL__ -DPTRS_ARE_64BITS -DLONGS_ARE_64BITS -nostdinc -isystem $(KFLAG_INCLD) -I$(LINUX_INCLUDE) -include $(LINUX_INCLUDE)/generated/autoconf.h -I$(KERNDIR)/arch/arm64/include -I$(KERNDIR)/arch/arm64/include/generated -I$(KERNDIR)/arch/arm64/include/generated/uapi -I$(KERNDIR)/arch/arm64/include/generated/asm -I$(KERNDIR)/include/uapi -I$(KERNDIR)/include/generated/uapi -I$(KERNDIR)/arch/arm64/include/uapi  -Wall -Wstrict-prototypes -Wno-trigraphs -Os -fno-strict-aliasing -fno-common -fno-pic -pipe -ffreestanding -fomit-frame-pointer -g -fno-stack-protector -Wdeclaration-after-statement -Wno-pointer-sign -mcmodel=large
#KFLAGS := -D__LINUX_ARM_ARCH__=8 -D__KERNEL__ -DPTRS_ARE_64BITS -DLONGS_ARE_64BITS -nostdinc  -isystem $(KFLAG_INCLD) -I$(LINUX_INCLUDE) -I$(LINUX_INCLUDE)/linux -include $(LINUX_INCLUDE)/generated/uapi/linux/version.h -include $(LINUX_INCLUDE)/generated/autoconf.h -I$(LINUX_INCLUDE)/generated/uapi -I$(KERNDIR)/arch/$(ARCH) -I$(KERNDIR)/arch/$(ARCH)/include -I$(KERNDIR)/include/asm-generic -I$(KERNDIR)/arch/$(ARCH)/include/uapi -I$(KERNDIR)/include/uapi -I$(KERNDIR)/arch/$(ARCH)/include/generated -I$(KERNDIR)/../linux-inc/include  -Wall -Wstrict-prototypes -Wno-trigraphs -Os -fno-strict-aliasing -fno-common -fno-pic -pipe -ffreestanding -march=armv8-a -fomit-frame-pointer -g -fno-stack-protector -Wdeclaration-after-statement -Wno-pointer-sign
KFLAGS := -D__LINUX_ARM_ARCH__=8 -D__KERNEL__ -nostdinc  -isystem $(KFLAG_INCLD) -I$(LINUX_INCLUDE) -I$(LINUX_INCLUDE)/linux -include $(LINUX_INCLUDE)/generated/uapi/linux/version.h -include $(LINUX_INCLUDE)/generated/autoconf.h -I$(LINUX_INCLUDE)/generated/uapi -I$(KERNDIR)/arch/$(ARCH) -I$(KERNDIR)/arch/$(ARCH)/include -I$(KERNDIR)/include/asm-generic -I$(KERNDIR)/arch/$(ARCH)/include/uapi -I$(KERNDIR)/include/uapi -I$(KERNDIR)/arch/$(ARCH)/include/generated -I$(KERNDIR)/../linux-inc/include  -Wall -Wstrict-prototypes -Wno-trigraphs -Os -fno-strict-aliasing -fno-common -fno-pic -pipe -ffreestanding -march=armv8-a -fomit-frame-pointer -g -fno-stack-protector -Wdeclaration-after-statement -Wno-pointer-sign
#-funwind-tables
endif

ifneq ($(targetplat),user)
include ${SDK}/make/Makefile.linux-kernel-2_6
endif

