/** \file dnx_data_max_switch.h
 * 
 * MODULE DATA MAX - 
 * Maintain max value (of all devices) per define
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MAX_SWITCH_H_
/*{*/
#define _DNX_DATA_MAX_SWITCH_H_
/*
 * INCLUDE FILES:
 * {
 */
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MAX DEFINES:
 * {
 */
/**
 * \brief
 * Number of load balancing clients (users of CRC functions)
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_NOF_LB_CLIENTS (5)

/**
 * \brief
 * Number of entries on IPPB_LOAD_BALANCING_CRC_SELECTION_CAM
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_NOF_LB_CRC_SEL_TCAM_ENTRIES (32)

/**
 * \brief
 * Number of crc functions available for 'load balancing'
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_NOF_CRC_FUNCTIONS (8)

/**
 * \brief
 * Bitmap. Each bit indicates the corresponding reserved label is to be                         included into load balancing calculation
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_INITIAL_RESERVED_LABEL (0)

/**
 * \brief
 * Bitmap. Each bit indicates the corresponding reserved label is to be                         forced into load balancing calculation even if it was terminated
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_INITIAL_RESERVED_LABEL_FORCE (0)

/**
 * \brief
 * Bitmap. Each bit indicates whether label following correponding reserved label                         is to be forced into load balancing calculation even if it was terminated
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_INITIAL_RESERVED_NEXT_LABEL (65535)

/**
 * \brief
 * Bitmap. Currently redundant. Should be equal to 'initial_reserved_next_label' 
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_INITIAL_RESERVED_NEXT_LABEL_VALID (65535)

/**
 * \brief
 * Indicate whether the field reserved_next_label_valid exists
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_RESERVED_NEXT_LABEL_VALID (1)

/**
 * \brief
 * Number of supported MPLS protocols in dbal_enum_value_field_current_protocol_type_e
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_NUM_VALID_MPLS_PROTOCOLS (3)

/**
 * \brief
 * Number of 32-bits layer records, cretaed by parser, which are used for hashing on load balancing
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_NOF_LAYER_RECORDS_FROM_PARSER (8)

/**
 * \brief
 * Number of crc seeds that may be selected per crc function on load balancing
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_NOF_SEEDS_PER_CRC_FUNCTION (65536)

/**
 * \brief
 * Indicate whether the functionality of using the LB key in hashing per layer is enabled
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_HASHING_SELECTION_PER_LAYER (1)

/**
 * \brief
 * Indicate whether there is support separate configuration per each of the two stacks - terminated and non-terminated
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_MPLS_SPLIT_STACK_CONFIG (1)

/**
 * \brief
 * The MPLS force label TCAM contains a field which was later remove for some of the devices.
 */
#define DNX_DATA_MAX_SWITCH_LOAD_BALANCING_MPLS_CAM_NEXT_LABEL_VALID_FIELD_EXISTS (1)

/**
 * \brief
 * Indicate if the SVTAG supported on the device
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_SUPPORTED (1)

/**
 * \brief
 * The size in bits of an SVTAG label
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_SVTAG_LABEL_SIZE_BITS (32)

/**
 * \brief
 * The size in bits of the offset addr on the egress svtag 
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_OFFSET_ADDR_SIZE_BITS (8)

/**
 * \brief
 * The position in bits of the offset addr in the egress svtag 
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_OFFSET_ADDR_POSITION_BITS (16)

/**
 * \brief
 * The size in bits of the signature on the egress svtag 
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_SIGNATURE_SIZE_BITS (8)

/**
 * \brief
 * The position in bits of the signature in the egress svtag 
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_SIGNATURE_POSITION_BITS (24)

/**
 * \brief
 * The size in bits of the SCI on the egress svtag 
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_SCI_SIZE_BITS (10)

/**
 * \brief
 * The position in bits of the SCI in the egress svtag 
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_SCI_POSITION_BITS (0)

/**
 * \brief
 * The size in bits of the packet type on the egress svtag 
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_PKT_TYPE_SIZE_BITS (2)

/**
 * \brief
 * The position in bits of the packet type in the egress svtag 
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_PKT_TYPE_POSITION_BITS (10)

/**
 * \brief
 * The position in bits of the IPv6 indication in the egress svtag 
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_IPV6_INDICATION_POSITION_BITS (15)

/**
 * \brief
 * The position in bits of the SVTAG in the HW field.
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_HW_FIELD_POSITION_BITS (0)

/**
 * \brief
 * The HW field position in bits of the SVTAG accumulation indication.
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_EGRESS_SVTAG_ACCUMULATION_INDICATION_HW_FIELD_POSITION_BITS (32)

/**
 * \brief
 * The source and destination port value in case of a security tag over a UDP tunnel.
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_UDP_DEDICATED_PORT (0)

/**
 * \brief
 * The ingress SVTAG position in bytes before it swapped to the beginning  of the packet.
 */
#define DNX_DATA_MAX_SWITCH_SVTAG_INGRESS_SVTAG_POSITION_BYTES (12)

/*
 * }
 */

/*}*/
#endif /*_DNX_DATA_MAX_SWITCH_H_*/
/* *INDENT-ON* */
