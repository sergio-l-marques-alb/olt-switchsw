/** \file dnx_data_internal_dbal.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_DBAL_H_
/*{*/
#define _DNX_DATA_INTERNAL_DBAL_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_dbal.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_dbal_submodule_diag,
    dnx_data_dbal_submodule_db_init,
    dnx_data_dbal_submodule_table,
    dnx_data_dbal_submodule_hw_ent,

    /**
     * Must be last one!
     */
    _dnx_data_dbal_submodule_nof
} dnx_data_dbal_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE DIAG:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dbal_diag_feature_get(
    int unit,
    dnx_data_dbal_diag_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dbal_diag_define_nof
} dnx_data_dbal_diag_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_dbal_diag_table_loggerInfo,

    /**
     * Must be last one!
     */
    _dnx_data_dbal_diag_table_nof
} dnx_data_dbal_diag_table_e;

/* Get Data */
/**
 * \brief get table loggerInfo entry 
 * dbal logger info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     loggerInfo - returns the relevant entry values grouped in struct - see dnx_data_dbal_diag_loggerInfo_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_dbal_diag_loggerInfo_t * dnx_data_dbal_diag_loggerInfo_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dbal', Submodule - 'diag', table - 'loggerInfo'
 * dbal logger info
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dbal_diag_loggerInfo_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)loggerInfo info
 * dbal logger info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     loggerInfo - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_dbal_diag_loggerInfo_info_get(
    int unit);

/*
 * SUBMODULE DB_INIT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dbal_db_init_feature_get(
    int unit,
    dnx_data_dbal_db_init_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dbal_db_init_define_dbal_device_state,
    dnx_data_dbal_db_init_define_run_ltt_after_wm_test,
    dnx_data_dbal_db_init_define_dbal_collection_pool_size,

    /**
     * Must be last one!
     */
    _dnx_data_dbal_db_init_define_nof
} dnx_data_dbal_db_init_define_e;

/* Get Data */
/**
 * \brief returns numeric data of dbal_device_state
 * Module - 'dbal', Submodule - 'db_init', data - 'dbal_device_state'
 * indicates the DBAL state for the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dbal_device_state - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_db_init_dbal_device_state_get(
    int unit);

/**
 * \brief returns numeric data of run_ltt_after_wm_test
 * Module - 'dbal', Submodule - 'db_init', data - 'run_ltt_after_wm_test'
 * Indicates if AT_Sand_Cint_tr_141_dbal_warmboot_ltt should run
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     run_ltt_after_wm_test - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_db_init_run_ltt_after_wm_test_get(
    int unit);

/**
 * \brief returns numeric data of dbal_collection_pool_size
 * Module - 'dbal', Submodule - 'db_init', data - 'dbal_collection_pool_size'
 * pool size, the number of entries that will be used for collection in each pool - in order to disable collection user should set pool size to 0.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dbal_collection_pool_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_db_init_dbal_collection_pool_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dbal_db_init_table_nof
} dnx_data_dbal_db_init_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE TABLE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dbal_table_feature_get(
    int unit,
    dnx_data_dbal_table_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dbal_table_define_nof_dynamic_tables,
    dnx_data_dbal_table_define_nof_dynamic_xml_tables,
    dnx_data_dbal_table_define_nof_dynamic_tables_labels,
    dnx_data_dbal_table_define_nof_dynamic_tables_key_fields,
    dnx_data_dbal_table_define_nof_dynamic_tables_result_fields,
    dnx_data_dbal_table_define_nof_dynamic_tables_multi_result_types,
    dnx_data_dbal_table_define_nof_dynamic_tables_ppmc_multi_result_types,
    dnx_data_dbal_table_define_nof_dynamic_and_static_tables,

    /**
     * Must be last one!
     */
    _dnx_data_dbal_table_define_nof
} dnx_data_dbal_table_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_dynamic_tables
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables'
 * Number of dynamic dbal tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_table_nof_dynamic_tables_get(
    int unit);

/**
 * \brief returns define data of nof_dynamic_xml_tables
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_xml_tables'
 * Number of dynamic xml dbal tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_xml_tables - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_table_nof_dynamic_xml_tables_get(
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_labels
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_labels'
 * Number of labels in a dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_labels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_table_nof_dynamic_tables_labels_get(
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_key_fields
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_key_fields'
 * Number of key fields in a dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_key_fields - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_table_nof_dynamic_tables_key_fields_get(
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_result_fields
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_result_fields'
 * Number of result fields in a dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_result_fields - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_table_nof_dynamic_tables_result_fields_get(
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_multi_result_types
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_multi_result_types'
 * Number of multiple result types in a dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_multi_result_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_table_nof_dynamic_tables_multi_result_types_get(
    int unit);

/**
 * \brief returns define data of nof_dynamic_tables_ppmc_multi_result_types
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_tables_ppmc_multi_result_types'
 * Number of multiple result types in a ppmc dynamic dbal table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_tables_ppmc_multi_result_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_table_nof_dynamic_tables_ppmc_multi_result_types_get(
    int unit);

/**
 * \brief returns numeric data of nof_dynamic_and_static_tables
 * Module - 'dbal', Submodule - 'table', data - 'nof_dynamic_and_static_tables'
 * Number of dynamic and static dbal tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dynamic_and_static_tables - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_table_nof_dynamic_and_static_tables_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dbal_table_table_nof
} dnx_data_dbal_table_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE HW_ENT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_dbal_hw_ent_feature_get(
    int unit,
    dnx_data_dbal_hw_ent_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_dbal_hw_ent_define_nof_direct_maps,
    dnx_data_dbal_hw_ent_define_nof_groups_maps,

    /**
     * Must be last one!
     */
    _dnx_data_dbal_hw_ent_define_nof
} dnx_data_dbal_hw_ent_define_e;

/* Get Data */
/**
 * \brief returns numeric data of nof_direct_maps
 * Module - 'dbal', Submodule - 'hw_ent', data - 'nof_direct_maps'
 * Number of hw ent direct maps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_direct_maps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_hw_ent_nof_direct_maps_get(
    int unit);

/**
 * \brief returns numeric data of nof_groups_maps
 * Module - 'dbal', Submodule - 'hw_ent', data - 'nof_groups_maps'
 * Number of hw ent group maps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_groups_maps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_dbal_hw_ent_nof_groups_maps_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dbal_hw_ent_table_nof
} dnx_data_dbal_hw_ent_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_dbal_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_DBAL_H_*/
/* *INDENT-ON* */
