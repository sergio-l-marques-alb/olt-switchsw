/** \file dnx_data_macsec.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MACSEC_H_
/*{*/
#define _DNX_DATA_MACSEC_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_macsec.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_macsec
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_macsec_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * 
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule general table pm_to_macsec
 */
typedef struct
{
    uint32 macsec_id;
} dnx_data_macsec_general_pm_to_macsec_t;

/**
 * \brief Holds values of submodule general table macsec_instances
 */
typedef struct
{
    uint32 nof_pms;
} dnx_data_macsec_general_macsec_instances_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_macsec_general_is_macsec_supported,

    /**
     * Must be last one!
     */
    _dnx_data_macsec_general_feature_nof
} dnx_data_macsec_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_macsec_general_feature_get_f) (
    int unit,
    dnx_data_macsec_general_feature_e feature);

/**
 * \brief returns define data of macsec_nof
 * Module - 'macsec', Submodule - 'general', data - 'macsec_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     macsec_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_general_macsec_nof_get_f) (
    int unit);

/**
 * \brief returns define data of macsec_nof_bits
 * Module - 'macsec', Submodule - 'general', data - 'macsec_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     macsec_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_general_macsec_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of ports_in_macsec_nof
 * Module - 'macsec', Submodule - 'general', data - 'ports_in_macsec_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ports_in_macsec_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_general_ports_in_macsec_nof_get_f) (
    int unit);

/**
 * \brief returns define data of ports_in_macsec_nof_bits
 * Module - 'macsec', Submodule - 'general', data - 'ports_in_macsec_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ports_in_macsec_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_general_ports_in_macsec_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of etype_nof
 * Module - 'macsec', Submodule - 'general', data - 'etype_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etype_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_general_etype_nof_get_f) (
    int unit);

/**
 * \brief get table pm_to_macsec entry 
 * 
 * \param [in] unit - unit #
 * \param [in] ethu_index - 
 * 
 * \return
 *     pm_to_macsec - returns the relevant entry values grouped in struct - see dnx_data_macsec_general_pm_to_macsec_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_macsec_general_pm_to_macsec_t *(
    *dnx_data_macsec_general_pm_to_macsec_get_f) (
    int unit,
    int ethu_index);

/**
 * \brief get table macsec_instances entry 
 * 
 * \param [in] unit - unit #
 * \param [in] macsec_id - 
 * 
 * \return
 *     macsec_instances - returns the relevant entry values grouped in struct - see dnx_data_macsec_general_macsec_instances_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_macsec_general_macsec_instances_t *(
    *dnx_data_macsec_general_macsec_instances_get_f) (
    int unit,
    int macsec_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MACSEC - GENERAL:
 * {
 */
/**
 * \brief Interface for macsec general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_macsec_general_feature_get_f feature_get;
    /**
     * returns define data of macsec_nof
     */
    dnx_data_macsec_general_macsec_nof_get_f macsec_nof_get;
    /**
     * returns define data of macsec_nof_bits
     */
    dnx_data_macsec_general_macsec_nof_bits_get_f macsec_nof_bits_get;
    /**
     * returns define data of ports_in_macsec_nof
     */
    dnx_data_macsec_general_ports_in_macsec_nof_get_f ports_in_macsec_nof_get;
    /**
     * returns define data of ports_in_macsec_nof_bits
     */
    dnx_data_macsec_general_ports_in_macsec_nof_bits_get_f ports_in_macsec_nof_bits_get;
    /**
     * returns define data of etype_nof
     */
    dnx_data_macsec_general_etype_nof_get_f etype_nof_get;
    /**
     * get table pm_to_macsec entry 
     */
    dnx_data_macsec_general_pm_to_macsec_get_f pm_to_macsec_get;
    /**
     * get general info table about table (for example key size)pm_to_macsec info
     */
    dnxc_data_table_info_get_f pm_to_macsec_info_get;
    /**
     * get table macsec_instances entry 
     */
    dnx_data_macsec_general_macsec_instances_get_f macsec_instances_get;
    /**
     * get general info table about table (for example key size)macsec_instances info
     */
    dnxc_data_table_info_get_f macsec_instances_info_get;
} dnx_data_if_macsec_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - INGRESS:
 * 
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_macsec_ingress_feature_nof
} dnx_data_macsec_ingress_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_macsec_ingress_feature_get_f) (
    int unit,
    dnx_data_macsec_ingress_feature_e feature);

/**
 * \brief returns define data of flow_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'flow_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_flow_nof_get_f) (
    int unit);

/**
 * \brief returns define data of policy_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'policy_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     policy_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_policy_nof_get_f) (
    int unit);

/**
 * \brief returns define data of secure_channel_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'secure_channel_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     secure_channel_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_secure_channel_nof_get_f) (
    int unit);

/**
 * \brief returns define data of secure_assoc_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'secure_assoc_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     secure_assoc_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_secure_assoc_nof_get_f) (
    int unit);

/**
 * \brief returns define data of udf_nof_bits
 * Module - 'macsec', Submodule - 'ingress', data - 'udf_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     udf_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_udf_nof_bits_get_f) (
    int unit);

/**
 * \brief returns define data of mgmt_rule_exact_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'mgmt_rule_exact_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mgmt_rule_exact_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_mgmt_rule_exact_nof_get_f) (
    int unit);

/**
 * \brief returns define data of tpid_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'tpid_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tpid_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_tpid_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cpu_flex_map_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'cpu_flex_map_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cpu_flex_map_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_cpu_flex_map_nof_get_f) (
    int unit);

/**
 * \brief returns define data of sc_tcam_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'sc_tcam_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sc_tcam_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_sc_tcam_nof_get_f) (
    int unit);

/**
 * \brief returns numeric data of sa_per_sc_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'sa_per_sc_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sa_per_sc_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_sa_per_sc_nof_get_f) (
    int unit);

/**
 * \brief returns numeric data of invalidate_sa
 * Module - 'macsec', Submodule - 'ingress', data - 'invalidate_sa'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     invalidate_sa - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_ingress_invalidate_sa_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MACSEC - INGRESS:
 * {
 */
/**
 * \brief Interface for macsec ingress data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_macsec_ingress_feature_get_f feature_get;
    /**
     * returns define data of flow_nof
     */
    dnx_data_macsec_ingress_flow_nof_get_f flow_nof_get;
    /**
     * returns define data of policy_nof
     */
    dnx_data_macsec_ingress_policy_nof_get_f policy_nof_get;
    /**
     * returns define data of secure_channel_nof
     */
    dnx_data_macsec_ingress_secure_channel_nof_get_f secure_channel_nof_get;
    /**
     * returns define data of secure_assoc_nof
     */
    dnx_data_macsec_ingress_secure_assoc_nof_get_f secure_assoc_nof_get;
    /**
     * returns define data of udf_nof_bits
     */
    dnx_data_macsec_ingress_udf_nof_bits_get_f udf_nof_bits_get;
    /**
     * returns define data of mgmt_rule_exact_nof
     */
    dnx_data_macsec_ingress_mgmt_rule_exact_nof_get_f mgmt_rule_exact_nof_get;
    /**
     * returns define data of tpid_nof
     */
    dnx_data_macsec_ingress_tpid_nof_get_f tpid_nof_get;
    /**
     * returns define data of cpu_flex_map_nof
     */
    dnx_data_macsec_ingress_cpu_flex_map_nof_get_f cpu_flex_map_nof_get;
    /**
     * returns define data of sc_tcam_nof
     */
    dnx_data_macsec_ingress_sc_tcam_nof_get_f sc_tcam_nof_get;
    /**
     * returns numeric data of sa_per_sc_nof
     */
    dnx_data_macsec_ingress_sa_per_sc_nof_get_f sa_per_sc_nof_get;
    /**
     * returns numeric data of invalidate_sa
     */
    dnx_data_macsec_ingress_invalidate_sa_get_f invalidate_sa_get;
} dnx_data_if_macsec_ingress_t;

/*
 * }
 */

/*
 * SUBMODULE  - EGRESS:
 * 
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_macsec_egress_feature_nof
} dnx_data_macsec_egress_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_macsec_egress_feature_get_f) (
    int unit,
    dnx_data_macsec_egress_feature_e feature);

/**
 * \brief returns define data of secure_channel_nof
 * Module - 'macsec', Submodule - 'egress', data - 'secure_channel_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     secure_channel_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_egress_secure_channel_nof_get_f) (
    int unit);

/**
 * \brief returns define data of secure_assoc_nof
 * Module - 'macsec', Submodule - 'egress', data - 'secure_assoc_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     secure_assoc_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_egress_secure_assoc_nof_get_f) (
    int unit);

/**
 * \brief returns define data of soft_expiry_threshold_profiles_nof
 * Module - 'macsec', Submodule - 'egress', data - 'soft_expiry_threshold_profiles_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     soft_expiry_threshold_profiles_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_egress_soft_expiry_threshold_profiles_nof_get_f) (
    int unit);

/**
 * \brief returns numeric data of sa_per_sc_nof
 * Module - 'macsec', Submodule - 'egress', data - 'sa_per_sc_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sa_per_sc_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_macsec_egress_sa_per_sc_nof_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MACSEC - EGRESS:
 * {
 */
/**
 * \brief Interface for macsec egress data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_macsec_egress_feature_get_f feature_get;
    /**
     * returns define data of secure_channel_nof
     */
    dnx_data_macsec_egress_secure_channel_nof_get_f secure_channel_nof_get;
    /**
     * returns define data of secure_assoc_nof
     */
    dnx_data_macsec_egress_secure_assoc_nof_get_f secure_assoc_nof_get;
    /**
     * returns define data of soft_expiry_threshold_profiles_nof
     */
    dnx_data_macsec_egress_soft_expiry_threshold_profiles_nof_get_f soft_expiry_threshold_profiles_nof_get;
    /**
     * returns numeric data of sa_per_sc_nof
     */
    dnx_data_macsec_egress_sa_per_sc_nof_get_f sa_per_sc_nof_get;
} dnx_data_if_macsec_egress_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_MACSEC:
 * {
 */
/**
 * \brief Interface for macsec data
 */
typedef struct
{
    /**
     * Interface for macsec general data
     */
    dnx_data_if_macsec_general_t general;
    /**
     * Interface for macsec ingress data
     */
    dnx_data_if_macsec_ingress_t ingress;
    /**
     * Interface for macsec egress data
     */
    dnx_data_if_macsec_egress_t egress;
} dnx_data_if_macsec_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_macsec_t dnx_data_macsec;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_MACSEC_H_*/
/* *INDENT-ON* */
