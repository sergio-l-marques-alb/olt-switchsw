/** \file dnx_data_internal_pp.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_PP_H_
/*{*/
#define _DNX_DATA_INTERNAL_PP_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_pp.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_pp_submodule_stages,
    dnx_data_pp_submodule_PEM,
    dnx_data_pp_submodule_application,
    dnx_data_pp_submodule_ETPP,
    dnx_data_pp_submodule_debug,

    /**
     * Must be last one!
     */
    _dnx_data_pp_submodule_nof
} dnx_data_pp_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE STAGES:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pp_stages_feature_get(
    int unit,
    dnx_data_pp_stages_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pp_stages_define_nof
} dnx_data_pp_stages_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_pp_stages_table_params,

    /**
     * Must be last one!
     */
    _dnx_data_pp_stages_table_nof
} dnx_data_pp_stages_table_e;

/* Get Data */
/**
 * \brief get table params entry 
 * Per stage properties and characteristics
 * 
 * \param [in] unit - unit #
 * \param [in] stage - stage enum
 * 
 * \return
 *     params - returns the relevant entry values grouped in struct - see dnx_data_pp_stages_params_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pp_stages_params_t * dnx_data_pp_stages_params_get(
    int unit,
    int stage);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'pp', Submodule - 'stages', table - 'params'
 * Per stage properties and characteristics
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pp_stages_params_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)params info
 * Per stage properties and characteristics
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     params - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pp_stages_params_info_get(
    int unit);

/*
 * SUBMODULE PEM:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pp_PEM_feature_get(
    int unit,
    dnx_data_pp_PEM_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_pp_PEM_define_nof_pem_bits,

    /**
     * Must be last one!
     */
    _dnx_data_pp_PEM_define_nof
} dnx_data_pp_PEM_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_pem_bits
 * Module - 'pp', Submodule - 'PEM', data - 'nof_pem_bits'
 * number of bit needed to represent nof PEM blocks
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pem_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pp_PEM_nof_pem_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pp_PEM_table_nof
} dnx_data_pp_PEM_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE APPLICATION:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pp_application_feature_get(
    int unit,
    dnx_data_pp_application_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pp_application_define_nof
} dnx_data_pp_application_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_pp_application_table_device_image,
    dnx_data_pp_application_table_ucode,

    /**
     * Must be last one!
     */
    _dnx_data_pp_application_table_nof
} dnx_data_pp_application_table_e;

/* Get Data */
/**
 * \brief get table device_image entry 
 * device pp image info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     device_image - returns the relevant entry values grouped in struct - see dnx_data_pp_application_device_image_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pp_application_device_image_t * dnx_data_pp_application_device_image_get(
    int unit);

/**
 * \brief get table ucode entry 
 * ucode file information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ucode - returns the relevant entry values grouped in struct - see dnx_data_pp_application_ucode_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_pp_application_ucode_t * dnx_data_pp_application_ucode_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'pp', Submodule - 'application', table - 'device_image'
 * device pp image info
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pp_application_device_image_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'pp', Submodule - 'application', table - 'ucode'
 * ucode file information
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pp_application_ucode_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)device_image info
 * device pp image info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     device_image - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pp_application_device_image_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)ucode info
 * ucode file information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ucode - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_pp_application_ucode_info_get(
    int unit);

/*
 * SUBMODULE ETPP:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pp_ETPP_feature_get(
    int unit,
    dnx_data_pp_ETPP_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_pp_ETPP_define_etps_type_size_bits,

    /**
     * Must be last one!
     */
    _dnx_data_pp_ETPP_define_nof
} dnx_data_pp_ETPP_define_e;

/* Get Data */
/**
 * \brief returns define data of etps_type_size_bits
 * Module - 'pp', Submodule - 'ETPP', data - 'etps_type_size_bits'
 * Size in bits of the ETPS type field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etps_type_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pp_ETPP_etps_type_size_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pp_ETPP_table_nof
} dnx_data_pp_ETPP_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE DEBUG:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_pp_debug_feature_get(
    int unit,
    dnx_data_pp_debug_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_pp_debug_define_packet_header_data,
    dnx_data_pp_debug_define_ptc_size,
    dnx_data_pp_debug_define_valid_bytes,
    dnx_data_pp_debug_define_time_stamp,

    /**
     * Must be last one!
     */
    _dnx_data_pp_debug_define_nof
} dnx_data_pp_debug_define_e;

/* Get Data */
/**
 * \brief returns define data of packet_header_data
 * Module - 'pp', Submodule - 'debug', data - 'packet_header_data'
 * number of original packet header data
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_header_data - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pp_debug_packet_header_data_get(
    int unit);

/**
 * \brief returns define data of ptc_size
 * Module - 'pp', Submodule - 'debug', data - 'ptc_size'
 * Size of PTC field in debug register
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ptc_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pp_debug_ptc_size_get(
    int unit);

/**
 * \brief returns define data of valid_bytes
 * Module - 'pp', Submodule - 'debug', data - 'valid_bytes'
 * valid bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     valid_bytes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pp_debug_valid_bytes_get(
    int unit);

/**
 * \brief returns define data of time_stamp
 * Module - 'pp', Submodule - 'debug', data - 'time_stamp'
 * Time Stamp (only for packets received from NIF)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     time_stamp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_pp_debug_time_stamp_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pp_debug_table_nof
} dnx_data_pp_debug_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_pp_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_PP_H_*/
/* *INDENT-ON* */
