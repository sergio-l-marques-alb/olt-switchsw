/** \file dnx_data_bfd.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_BFD_H_
/*{*/
#define _DNX_DATA_BFD_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_bfd.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_bfd
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_bfd_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * general bfd constants
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_bfd_general_configurable_single_hop_tos,
    /**
     * HW limitation: Extended  BFD SIP is not supported on  - JR2_A0 only!  Works for B0 and up
     */
    dnx_data_bfd_general_extended_sip_support,
    /**
     * HW limitation: BFD over VXLAN is not supported on  - JR2_A0 only!  Works for B0 and up
     */
    dnx_data_bfd_general_vxlan_support,

    /**
     * Must be last one!
     */
    _dnx_data_bfd_general_feature_nof
} dnx_data_bfd_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_bfd_general_feature_get_f) (
    int unit,
    dnx_data_bfd_general_feature_e feature);

/**
 * \brief returns define data of nof_bits_bfd_endpoints
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_bfd_endpoints'
 * Number of bits needed for BFD endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_bfd_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_bits_bfd_endpoints_get_f) (
    int unit);

/**
 * \brief returns define data of nof_endpoints
 * Module - 'bfd', Submodule - 'general', data - 'nof_endpoints'
 * Maximum number of BFD endpoints
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_endpoints - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_endpoints_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dips_for_bfd_multihop
 * Module - 'bfd', Submodule - 'general', data - 'nof_dips_for_bfd_multihop'
 * Number of usable BFD Destination IPs for multi-hop
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dips_for_bfd_multihop - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_dips_for_bfd_multihop_get_f) (
    int unit);

/**
 * \brief returns define data of nof_bits_dips_for_bfd_multihop
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_dips_for_bfd_multihop'
 * Number of bits needed for BFD Destination IPs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_dips_for_bfd_multihop - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_bits_dips_for_bfd_multihop_get_f) (
    int unit);

/**
 * \brief returns define data of nof_bfd_server_trap_codes
 * Module - 'bfd', Submodule - 'general', data - 'nof_bfd_server_trap_codes'
 * Number of usable BFD server trap codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bfd_server_trap_codes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_bfd_server_trap_codes_get_f) (
    int unit);

/**
 * \brief returns define data of nof_profiles_for_tx_rate
 * Module - 'bfd', Submodule - 'general', data - 'nof_profiles_for_tx_rate'
 * Number of profiles in TX_RATE register
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_profiles_for_tx_rate - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_profiles_for_tx_rate_get_f) (
    int unit);

/**
 * \brief returns define data of nof_bits_bfd_server_trap_codes
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_bfd_server_trap_codes'
 * Number of bit needed for BFD server trap codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_bfd_server_trap_codes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_bits_bfd_server_trap_codes_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_index_db_ipv4_const
 * Module - 'bfd', Submodule - 'general', data - 'rmep_index_db_ipv4_const'
 * RMEP index DB constant for IPv4 MEPs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_index_db_ipv4_const - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_rmep_index_db_ipv4_const_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_index_db_mpls_const
 * Module - 'bfd', Submodule - 'general', data - 'rmep_index_db_mpls_const'
 * RMEP index DB constant for MEPs over MPLS
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_index_db_mpls_const - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_rmep_index_db_mpls_const_get_f) (
    int unit);

/**
 * \brief returns define data of rmep_index_db_pwe_const
 * Module - 'bfd', Submodule - 'general', data - 'rmep_index_db_pwe_const'
 * RMEP index DB constant for MEPs over PWE
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmep_index_db_pwe_const - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_rmep_index_db_pwe_const_get_f) (
    int unit);

/**
 * \brief returns define data of nof_req_int_profiles
 * Module - 'bfd', Submodule - 'general', data - 'nof_req_int_profiles'
 * Number of entries in required interrupt table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_req_int_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_req_int_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_bits_your_discr_to_lif
 * Module - 'bfd', Submodule - 'general', data - 'nof_bits_your_discr_to_lif'
 * Number of bits from your discriminator to oam_lif
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_your_discr_to_lif - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_nof_bits_your_discr_to_lif_get_f) (
    int unit);

/**
 * \brief returns define data of oamp_bfd_cw_valid_dis_supp
 * Module - 'bfd', Submodule - 'general', data - 'oamp_bfd_cw_valid_dis_supp'
 * Control word validation can be disabled in OAMP
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oamp_bfd_cw_valid_dis_supp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bfd_general_oamp_bfd_cw_valid_dis_supp_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_BFD - GENERAL:
 * {
 */
/**
 * \brief Interface for bfd general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_bfd_general_feature_get_f feature_get;
    /**
     * returns define data of nof_bits_bfd_endpoints
     */
    dnx_data_bfd_general_nof_bits_bfd_endpoints_get_f nof_bits_bfd_endpoints_get;
    /**
     * returns define data of nof_endpoints
     */
    dnx_data_bfd_general_nof_endpoints_get_f nof_endpoints_get;
    /**
     * returns define data of nof_dips_for_bfd_multihop
     */
    dnx_data_bfd_general_nof_dips_for_bfd_multihop_get_f nof_dips_for_bfd_multihop_get;
    /**
     * returns define data of nof_bits_dips_for_bfd_multihop
     */
    dnx_data_bfd_general_nof_bits_dips_for_bfd_multihop_get_f nof_bits_dips_for_bfd_multihop_get;
    /**
     * returns define data of nof_bfd_server_trap_codes
     */
    dnx_data_bfd_general_nof_bfd_server_trap_codes_get_f nof_bfd_server_trap_codes_get;
    /**
     * returns define data of nof_profiles_for_tx_rate
     */
    dnx_data_bfd_general_nof_profiles_for_tx_rate_get_f nof_profiles_for_tx_rate_get;
    /**
     * returns define data of nof_bits_bfd_server_trap_codes
     */
    dnx_data_bfd_general_nof_bits_bfd_server_trap_codes_get_f nof_bits_bfd_server_trap_codes_get;
    /**
     * returns define data of rmep_index_db_ipv4_const
     */
    dnx_data_bfd_general_rmep_index_db_ipv4_const_get_f rmep_index_db_ipv4_const_get;
    /**
     * returns define data of rmep_index_db_mpls_const
     */
    dnx_data_bfd_general_rmep_index_db_mpls_const_get_f rmep_index_db_mpls_const_get;
    /**
     * returns define data of rmep_index_db_pwe_const
     */
    dnx_data_bfd_general_rmep_index_db_pwe_const_get_f rmep_index_db_pwe_const_get;
    /**
     * returns define data of nof_req_int_profiles
     */
    dnx_data_bfd_general_nof_req_int_profiles_get_f nof_req_int_profiles_get;
    /**
     * returns define data of nof_bits_your_discr_to_lif
     */
    dnx_data_bfd_general_nof_bits_your_discr_to_lif_get_f nof_bits_your_discr_to_lif_get;
    /**
     * returns define data of oamp_bfd_cw_valid_dis_supp
     */
    dnx_data_bfd_general_oamp_bfd_cw_valid_dis_supp_get_f oamp_bfd_cw_valid_dis_supp_get;
} dnx_data_if_bfd_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - FEATURE:
 * 
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_bfd_feature_detect_multiplier_limitation,
    dnx_data_bfd_feature_ptch_oam_offset_limitation,

    /**
     * Must be last one!
     */
    _dnx_data_bfd_feature_feature_nof
} dnx_data_bfd_feature_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_bfd_feature_feature_get_f) (
    int unit,
    dnx_data_bfd_feature_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_BFD - FEATURE:
 * {
 */
/**
 * \brief Interface for bfd feature data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_bfd_feature_feature_get_f feature_get;
} dnx_data_if_bfd_feature_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_BFD:
 * {
 */
/**
 * \brief Interface for bfd data
 */
typedef struct
{
    /**
     * Interface for bfd general data
     */
    dnx_data_if_bfd_general_t general;
    /**
     * Interface for bfd feature data
     */
    dnx_data_if_bfd_feature_t feature;
} dnx_data_if_bfd_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_bfd_t dnx_data_bfd;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_BFD_H_*/
/* *INDENT-ON* */
