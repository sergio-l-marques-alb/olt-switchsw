/** \file dnx_data_internal_system_red.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_SYSTEM_RED_H_
/*{*/
#define _DNX_DATA_INTERNAL_SYSTEM_RED_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_system_red.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_system_red_submodule_config,
    dnx_data_system_red_submodule_info,

    /**
     * Must be last one!
     */
    _dnx_data_system_red_submodule_nof
} dnx_data_system_red_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE CONFIG:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_system_red_config_feature_get(
    int unit,
    dnx_data_system_red_config_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_system_red_config_define_enable,

    /**
     * Must be last one!
     */
    _dnx_data_system_red_config_define_nof
} dnx_data_system_red_config_define_e;

/* Get Data */
/**
 * \brief returns numeric data of enable
 * Module - 'system_red', Submodule - 'config', data - 'enable'
 * system RED enable configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_system_red_config_enable_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_system_red_config_table_nof
} dnx_data_system_red_config_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE INFO:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_system_red_info_feature_get(
    int unit,
    dnx_data_system_red_info_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_system_red_info_define_nof_red_q_size,
    dnx_data_system_red_info_define_max_red_q_size,
    dnx_data_system_red_info_define_max_ing_aging_period,
    dnx_data_system_red_info_define_max_sch_aging_period,
    dnx_data_system_red_info_define_sch_aging_period_factor,
    dnx_data_system_red_info_define_max_free_res_thr_range,

    /**
     * Must be last one!
     */
    _dnx_data_system_red_info_define_nof
} dnx_data_system_red_info_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_red_q_size
 * Module - 'system_red', Submodule - 'info', data - 'nof_red_q_size'
 * number of system red RED-Q-Size values.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_red_q_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_system_red_info_nof_red_q_size_get(
    int unit);

/**
 * \brief returns define data of max_red_q_size
 * Module - 'system_red', Submodule - 'info', data - 'max_red_q_size'
 * max value for system red RED-Q-Size. this is the value used to determoine system level congestion level
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_red_q_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_system_red_info_max_red_q_size_get(
    int unit);

/**
 * \brief returns define data of max_ing_aging_period
 * Module - 'system_red', Submodule - 'info', data - 'max_ing_aging_period'
 * max supported aging period on ingress side in msec
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_ing_aging_period - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_system_red_info_max_ing_aging_period_get(
    int unit);

/**
 * \brief returns define data of max_sch_aging_period
 * Module - 'system_red', Submodule - 'info', data - 'max_sch_aging_period'
 * max supported aging period on scheduler side in msec
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_sch_aging_period - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_system_red_info_max_sch_aging_period_get(
    int unit);

/**
 * \brief returns define data of sch_aging_period_factor
 * Module - 'system_red', Submodule - 'info', data - 'sch_aging_period_factor'
 * factor (in clocks) for sch aging period calculation: aging_period = nof_ports * factor * hw_value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sch_aging_period_factor - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_system_red_info_sch_aging_period_factor_get(
    int unit);

/**
 * \brief returns define data of max_free_res_thr_range
 * Module - 'system_red', Submodule - 'info', data - 'max_free_res_thr_range'
 * max range id for system RED free resources thresholds.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_free_res_thr_range - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_system_red_info_max_free_res_thr_range_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_system_red_info_table_resource,
    dnx_data_system_red_info_table_dbal,

    /**
     * Must be last one!
     */
    _dnx_data_system_red_info_table_nof
} dnx_data_system_red_info_table_e;

/* Get Data */
/**
 * \brief get table resource entry 
 * system red tracked resources
 * 
 * \param [in] unit - unit #
 * \param [in] type - resource type
 * 
 * \return
 *     resource - returns the relevant entry values grouped in struct - see dnx_data_system_red_info_resource_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_system_red_info_resource_t * dnx_data_system_red_info_resource_get(
    int unit,
    int type);

/**
 * \brief get table dbal entry 
 * system red tracked resources
 * 
 * \param [in] unit - unit #
 * \param [in] type - resource type
 * 
 * \return
 *     dbal - returns the relevant entry values grouped in struct - see dnx_data_system_red_info_dbal_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_system_red_info_dbal_t * dnx_data_system_red_info_dbal_get(
    int unit,
    int type);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'system_red', Submodule - 'info', table - 'resource'
 * system red tracked resources
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_system_red_info_resource_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'system_red', Submodule - 'info', table - 'dbal'
 * system red tracked resources
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_system_red_info_dbal_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)resource info
 * system red tracked resources
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     resource - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_system_red_info_resource_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)dbal info
 * system red tracked resources
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dbal - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_system_red_info_dbal_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_system_red_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_SYSTEM_RED_H_*/
/* *INDENT-ON* */
