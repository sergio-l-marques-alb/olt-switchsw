/** \file dnx_data_pp.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_PP_H_
/*{*/
#define _DNX_DATA_PP_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/pp_stage.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_pp.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_pp
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_pp_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - STAGES:
 * Information on PP stages
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule stages table params
 * Table info:
 * Per stage properties and characteristics
 */
typedef struct
{
    /**
     * stage validity flag
     */
    int valid;
    /**
     * stage name
     */
    char *name;
    /**
     * block name
     */
    char *block;
    /**
     * flag indicating support by Filed Processor
     */
    int is_fp;
    /**
     * flag indicating kleap processing
     */
    int is_kleap;
    /**
     * PEMA Access ID - mapping to PEMA register in DBAL
     */
    int pema_id;
} dnx_data_pp_stages_params_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pp_stages_feature_nof
} dnx_data_pp_stages_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pp_stages_feature_get_f) (
    int unit,
    dnx_data_pp_stages_feature_e feature);

/**
 * \brief get table params entry 
 * Per stage properties and characteristics
 * 
 * \param [in] unit - unit #
 * \param [in] stage - stage enum
 * 
 * \return
 *     params - returns the relevant entry values grouped in struct - see dnx_data_pp_stages_params_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_pp_stages_params_t *(
    *dnx_data_pp_stages_params_get_f) (
    int unit,
    int stage);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PP - STAGES:
 * {
 */
/**
 * \brief Interface for pp stages data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pp_stages_feature_get_f feature_get;
    /**
     * get table params entry 
     */
    dnx_data_pp_stages_params_get_f params_get;
    /**
     * get general info table about table (for example key size)params info
     */
    dnxc_data_table_info_get_f params_info_get;
} dnx_data_if_pp_stages_t;

/*
 * }
 */

/*
 * SUBMODULE  - PEM:
 * General data about PEM
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Can PEM blocks clock be power down
     */
    dnx_data_pp_PEM_clock_power_down,

    /**
     * Must be last one!
     */
    _dnx_data_pp_PEM_feature_nof
} dnx_data_pp_PEM_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pp_PEM_feature_get_f) (
    int unit,
    dnx_data_pp_PEM_feature_e feature);

/**
 * \brief returns define data of nof_pem_bits
 * Module - 'pp', Submodule - 'PEM', data - 'nof_pem_bits'
 * number of bit needed to represent nof PEM blocks
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pem_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pp_PEM_nof_pem_bits_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PP - PEM:
 * {
 */
/**
 * \brief Interface for pp PEM data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pp_PEM_feature_get_f feature_get;
    /**
     * returns define data of nof_pem_bits
     */
    dnx_data_pp_PEM_nof_pem_bits_get_f nof_pem_bits_get;
} dnx_data_if_pp_PEM_t;

/*
 * }
 */

/*
 * SUBMODULE  - APPLICATION:
 * Information on PP applications
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule application table device_image
 * Table info:
 * device pp image info
 */
typedef struct
{
    /**
     * standard image name
     */
    char *standard_image_name;
    /**
     * image name
     */
    char *name;
} dnx_data_pp_application_device_image_t;

/**
 * \brief Holds values of submodule application table ucode
 * Table info:
 * ucode file information
 */
typedef struct
{
    /**
     * pemla ucode relative path. relative to exe_location/pemla/device_name/ucode/
     */
    char *relative_path;
} dnx_data_pp_application_ucode_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pp_application_feature_nof
} dnx_data_pp_application_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pp_application_feature_get_f) (
    int unit,
    dnx_data_pp_application_feature_e feature);

/**
 * \brief get table device_image entry 
 * device pp image info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     device_image - returns the relevant entry values grouped in struct - see dnx_data_pp_application_device_image_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_pp_application_device_image_t *(
    *dnx_data_pp_application_device_image_get_f) (
    int unit);

/**
 * \brief get table ucode entry 
 * ucode file information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ucode - returns the relevant entry values grouped in struct - see dnx_data_pp_application_ucode_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_pp_application_ucode_t *(
    *dnx_data_pp_application_ucode_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PP - APPLICATION:
 * {
 */
/**
 * \brief Interface for pp application data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pp_application_feature_get_f feature_get;
    /**
     * get table device_image entry 
     */
    dnx_data_pp_application_device_image_get_f device_image_get;
    /**
     * get general info table about table (for example key size)device_image info
     */
    dnxc_data_table_info_get_f device_image_info_get;
    /**
     * get table ucode entry 
     */
    dnx_data_pp_application_ucode_get_f ucode_get;
    /**
     * get general info table about table (for example key size)ucode info
     */
    dnxc_data_table_info_get_f ucode_info_get;
} dnx_data_if_pp_application_t;

/*
 * }
 */

/*
 * SUBMODULE  - ETPP:
 * ETPP general parameters
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pp_ETPP_feature_nof
} dnx_data_pp_ETPP_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pp_ETPP_feature_get_f) (
    int unit,
    dnx_data_pp_ETPP_feature_e feature);

/**
 * \brief returns define data of etps_type_size_bits
 * Module - 'pp', Submodule - 'ETPP', data - 'etps_type_size_bits'
 * Size in bits of the ETPS type field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etps_type_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pp_ETPP_etps_type_size_bits_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PP - ETPP:
 * {
 */
/**
 * \brief Interface for pp ETPP data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pp_ETPP_feature_get_f feature_get;
    /**
     * returns define data of etps_type_size_bits
     */
    dnx_data_pp_ETPP_etps_type_size_bits_get_f etps_type_size_bits_get;
} dnx_data_if_pp_ETPP_t;

/*
 * }
 */

/*
 * SUBMODULE  - DEBUG:
 * debug proprties and data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pp_debug_feature_nof
} dnx_data_pp_debug_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pp_debug_feature_get_f) (
    int unit,
    dnx_data_pp_debug_feature_e feature);

/**
 * \brief returns define data of packet_header_data
 * Module - 'pp', Submodule - 'debug', data - 'packet_header_data'
 * number of original packet header data
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_header_data - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pp_debug_packet_header_data_get_f) (
    int unit);

/**
 * \brief returns define data of ptc_size
 * Module - 'pp', Submodule - 'debug', data - 'ptc_size'
 * Size of PTC field in debug register
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ptc_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pp_debug_ptc_size_get_f) (
    int unit);

/**
 * \brief returns define data of valid_bytes
 * Module - 'pp', Submodule - 'debug', data - 'valid_bytes'
 * valid bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     valid_bytes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pp_debug_valid_bytes_get_f) (
    int unit);

/**
 * \brief returns define data of time_stamp
 * Module - 'pp', Submodule - 'debug', data - 'time_stamp'
 * Time Stamp (only for packets received from NIF)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     time_stamp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pp_debug_time_stamp_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PP - DEBUG:
 * {
 */
/**
 * \brief Interface for pp debug data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pp_debug_feature_get_f feature_get;
    /**
     * returns define data of packet_header_data
     */
    dnx_data_pp_debug_packet_header_data_get_f packet_header_data_get;
    /**
     * returns define data of ptc_size
     */
    dnx_data_pp_debug_ptc_size_get_f ptc_size_get;
    /**
     * returns define data of valid_bytes
     */
    dnx_data_pp_debug_valid_bytes_get_f valid_bytes_get;
    /**
     * returns define data of time_stamp
     */
    dnx_data_pp_debug_time_stamp_get_f time_stamp_get;
} dnx_data_if_pp_debug_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_PP:
 * {
 */
/**
 * \brief Interface for pp data
 */
typedef struct
{
    /**
     * Interface for pp stages data
     */
    dnx_data_if_pp_stages_t stages;
    /**
     * Interface for pp PEM data
     */
    dnx_data_if_pp_PEM_t PEM;
    /**
     * Interface for pp application data
     */
    dnx_data_if_pp_application_t application;
    /**
     * Interface for pp ETPP data
     */
    dnx_data_if_pp_ETPP_t ETPP;
    /**
     * Interface for pp debug data
     */
    dnx_data_if_pp_debug_t debug;
} dnx_data_if_pp_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_pp_t dnx_data_pp;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_PP_H_*/
/* *INDENT-ON* */
