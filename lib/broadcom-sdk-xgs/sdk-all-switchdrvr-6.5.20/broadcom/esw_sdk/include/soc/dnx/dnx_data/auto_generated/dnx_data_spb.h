/** \file dnx_data_spb.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_SPB_H_
/*{*/
#define _DNX_DATA_SPB_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_spb.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_spb
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_spb_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - OCB:
 * OCB parameters and defines
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ocb table last_in_chain
 * Table info:
 * Holds for each OCB block whether is the last block in the chain
 */
typedef struct
{
    /**
     * Is the OCB block index is the last in the chain
     */
    int is_last_in_chain;
} dnx_data_spb_ocb_last_in_chain_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * OCB is splitted into blocks connected by a ring
     */
    dnx_data_spb_ocb_blocks_in_ring,

    /**
     * Must be last one!
     */
    _dnx_data_spb_ocb_feature_nof
} dnx_data_spb_ocb_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_spb_ocb_feature_get_f) (
    int unit,
    dnx_data_spb_ocb_feature_e feature);

/**
 * \brief returns define data of nof_blocks
 * Module - 'spb', Submodule - 'ocb', data - 'nof_blocks'
 * Number of ocb blocks
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_blocks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_spb_ocb_nof_blocks_get_f) (
    int unit);

/**
 * \brief get table last_in_chain entry 
 * Holds for each OCB block whether is the last block in the chain
 * 
 * \param [in] unit - unit #
 * \param [in] ocb_index - OCB block index
 * 
 * \return
 *     last_in_chain - returns the relevant entry values grouped in struct - see dnx_data_spb_ocb_last_in_chain_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_spb_ocb_last_in_chain_t *(
    *dnx_data_spb_ocb_last_in_chain_get_f) (
    int unit,
    int ocb_index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SPB - OCB:
 * {
 */
/**
 * \brief Interface for spb ocb data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_spb_ocb_feature_get_f feature_get;
    /**
     * returns define data of nof_blocks
     */
    dnx_data_spb_ocb_nof_blocks_get_f nof_blocks_get;
    /**
     * get table last_in_chain entry 
     */
    dnx_data_spb_ocb_last_in_chain_get_f last_in_chain_get;
    /**
     * get general info table about table (for example key size)last_in_chain info
     */
    dnxc_data_table_info_get_f last_in_chain_info_get;
} dnx_data_if_spb_ocb_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_SPB:
 * {
 */
/**
 * \brief Interface for spb data
 */
typedef struct
{
    /**
     * Interface for spb ocb data
     */
    dnx_data_if_spb_ocb_t ocb;
} dnx_data_if_spb_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_spb_t dnx_data_spb;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_SPB_H_*/
/* *INDENT-ON* */
