/** \file dnx_data_internal_access.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_ACCESS_H_
/*{*/
#define _DNX_DATA_INTERNAL_ACCESS_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_access.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_access_submodule_mdio,
    dnx_data_access_submodule_rcpu,
    dnx_data_access_submodule_blocks,

    /**
     * Must be last one!
     */
    _dnx_data_access_submodule_nof
} dnx_data_access_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE MDIO:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_access_mdio_feature_get(
    int unit,
    dnx_data_access_mdio_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_access_mdio_define_ext_divisor,
    dnx_data_access_mdio_define_int_divisor,
    dnx_data_access_mdio_define_int_div_out_delay,
    dnx_data_access_mdio_define_ext_div_out_delay,

    /**
     * Must be last one!
     */
    _dnx_data_access_mdio_define_nof
} dnx_data_access_mdio_define_e;

/* Get Data */
/**
 * \brief returns numeric data of ext_divisor
 * Module - 'access', Submodule - 'mdio', data - 'ext_divisor'
 * external MDIO clock rate divisor
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ext_divisor - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_access_mdio_ext_divisor_get(
    int unit);

/**
 * \brief returns numeric data of int_divisor
 * Module - 'access', Submodule - 'mdio', data - 'int_divisor'
 * internal MDIO clock rate divisor
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     int_divisor - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_access_mdio_int_divisor_get(
    int unit);

/**
 * \brief returns numeric data of int_div_out_delay
 * Module - 'access', Submodule - 'mdio', data - 'int_div_out_delay'
 * number of clock delay between the rising edge of MDC and the starting data of MDIO for internal divisor
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     int_div_out_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_access_mdio_int_div_out_delay_get(
    int unit);

/**
 * \brief returns numeric data of ext_div_out_delay
 * Module - 'access', Submodule - 'mdio', data - 'ext_div_out_delay'
 * number of clock delay between the rising edge of MDC and the starting data of MDIO for external divisor
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ext_div_out_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_access_mdio_ext_div_out_delay_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_access_mdio_table_nof
} dnx_data_access_mdio_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE RCPU:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_access_rcpu_feature_get(
    int unit,
    dnx_data_access_rcpu_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_access_rcpu_define_nof
} dnx_data_access_rcpu_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_access_rcpu_table_rx,

    /**
     * Must be last one!
     */
    _dnx_data_access_rcpu_table_nof
} dnx_data_access_rcpu_table_e;

/* Get Data */
/**
 * \brief get table rx entry 
 * general data about rx
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx - returns the relevant entry values grouped in struct - see dnx_data_access_rcpu_rx_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_access_rcpu_rx_t * dnx_data_access_rcpu_rx_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'access', Submodule - 'rcpu', table - 'rx'
 * general data about rx
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_access_rcpu_rx_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)rx info
 * general data about rx
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_access_rcpu_rx_info_get(
    int unit);

/*
 * SUBMODULE BLOCKS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_access_blocks_feature_get(
    int unit,
    dnx_data_access_blocks_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_access_blocks_define_nof
} dnx_data_access_blocks_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_access_blocks_table_override,
    dnx_data_access_blocks_table_soft_init,

    /**
     * Must be last one!
     */
    _dnx_data_access_blocks_table_nof
} dnx_data_access_blocks_table_e;

/* Get Data */
/**
 * \brief get table override entry 
 * blocks enable/disable override
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     override - returns the relevant entry values grouped in struct - see dnx_data_access_blocks_override_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_access_blocks_override_t * dnx_data_access_blocks_override_get(
    int unit,
    int index);

/**
 * \brief get table soft_init entry 
 * soft_init info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     soft_init - returns the relevant entry values grouped in struct - see dnx_data_access_blocks_soft_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_access_blocks_soft_init_t * dnx_data_access_blocks_soft_init_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'access', Submodule - 'blocks', table - 'override'
 * blocks enable/disable override
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_access_blocks_override_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'access', Submodule - 'blocks', table - 'soft_init'
 * soft_init info
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_access_blocks_soft_init_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)override info
 * blocks enable/disable override
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     override - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_access_blocks_override_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)soft_init info
 * soft_init info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     soft_init - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_access_blocks_soft_init_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_access_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_ACCESS_H_*/
/* *INDENT-ON* */
