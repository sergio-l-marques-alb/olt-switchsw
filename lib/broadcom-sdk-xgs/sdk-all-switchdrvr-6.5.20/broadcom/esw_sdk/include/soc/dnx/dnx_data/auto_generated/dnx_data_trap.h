/** \file dnx_data_trap.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_TRAP_H_
/*{*/
#define _DNX_DATA_TRAP_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_trap.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_trap
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_trap_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - INGRESS:
 * trap profiles data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Are NDP/myNDP traps supported
     */
    dnx_data_trap_ingress_ndp_trap_en,
    /**
     * If set, mapping for in_lif_prfile in the case of ingress protocol trap
     */
    dnx_data_trap_ingress_trap_in_lif_profile_mapping,
    /**
     * Does MACSec exist in the device, so it can be initialized
     */
    dnx_data_trap_ingress_svtag_trap_en,
    /**
     * Does the device support OAM Offset adjustment actions
     */
    dnx_data_trap_ingress_oam_offset_actions,
    /**
     * Enables the Snoop Code clear action from Q2A onward
     */
    dnx_data_trap_ingress_snoop_code_clear_action,
    /**
     * Enables the Mirror Code clear action from Q2A onward
     */
    dnx_data_trap_ingress_mirror_code_clear_action,
    /**
     * Enables the Statistical Sampling Code clear action from Q2A onward
     */
    dnx_data_trap_ingress_stat_sampling_code_clear_action,
    /**
     * Shows if IPv6 mapped destination trap is working
     */
    dnx_data_trap_ingress_ipv6_mapped_dest,
    /**
     * Shows if MPLS termination labels need to be over the number of sent
     */
    dnx_data_trap_ingress_mpls_termination_fail_over,
    dnx_data_trap_ingress_checksum_feature_fixed,
    dnx_data_trap_ingress_header_size_err_blocking,
    dnx_data_trap_ingress_l4_trap_res_before_l3,
    dnx_data_trap_ingress_comp_mc_before_routing_traps,
    /**
     * Shows if soft mem error takes priority over destination error
     */
    dnx_data_trap_ingress_soft_mem_err_over_dest_err,
    /**
     * Shows if Ethernet default procedure fix was for the device.
     */
    dnx_data_trap_ingress_eth_default_proc_fix,
    /**
     * Shows if Fwd domain mode trap is enabled.
     */
    dnx_data_trap_ingress_fwd_domain_mode_trap,
    /**
     * Shows if SA equals Zero trap is enabled.
     */
    dnx_data_trap_ingress_sa_equals_zero_trap,
    dnx_data_trap_ingress_latency_measurement_bug,
    /**
     * Indicate if software memory error is supported
     */
    dnx_data_trap_ingress_ser_hw_support,
    /**
     * Indicate if compatible multicast is supported
     */
    dnx_data_trap_ingress_compatible_mc_hw_support,

    /**
     * Must be last one!
     */
    _dnx_data_trap_ingress_feature_nof
} dnx_data_trap_ingress_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trap_ingress_feature_get_f) (
    int unit,
    dnx_data_trap_ingress_feature_e feature);

/**
 * \brief returns numeric data of protocol_traps_init_mode
 * Module - 'trap', Submodule - 'ingress', data - 'protocol_traps_init_mode'
 * initialize protocol traps configuration mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     protocol_traps_init_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_protocol_traps_init_mode_get_f) (
    int unit);

/**
 * \brief returns define data of protocol_traps_lif_profile_starting_offset
 * Module - 'trap', Submodule - 'ingress', data - 'protocol_traps_lif_profile_starting_offset'
 * The offset at which LIF profile entries start in protocol profiling table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     protocol_traps_lif_profile_starting_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_protocol_traps_lif_profile_starting_offset_get_f) (
    int unit);

/**
 * \brief returns define data of nof_predefeind_traps
 * Module - 'trap', Submodule - 'ingress', data - 'nof_predefeind_traps'
 * Number of predefined traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_predefeind_traps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_predefeind_traps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_user_defined_traps
 * Module - 'trap', Submodule - 'ingress', data - 'nof_user_defined_traps'
 * Number of bcmRxTrapUserDefine traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_user_defined_traps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_user_defined_traps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_1588_traps
 * Module - 'trap', Submodule - 'ingress', data - 'nof_1588_traps'
 * Number of bcmRxTrap1588 traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_1588_traps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_1588_traps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_entries_action_table
 * Module - 'trap', Submodule - 'ingress', data - 'nof_entries_action_table'
 * Number of entries in action table of traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_entries_action_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_entries_action_table_get_f) (
    int unit);

/**
 * \brief returns define data of nof_protocol_trap_profiles
 * Module - 'trap', Submodule - 'ingress', data - 'nof_protocol_trap_profiles'
 * Number of protocol trap profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_protocol_trap_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_protocol_trap_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_recycle_cmds
 * Module - 'trap', Submodule - 'ingress', data - 'nof_recycle_cmds'
 * Number of forward recycle commands
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_recycle_cmds - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_recycle_cmds_get_f) (
    int unit);

/**
 * \brief returns define data of nof_programmable_traps
 * Module - 'trap', Submodule - 'ingress', data - 'nof_programmable_traps'
 * Number of programmable traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_programmable_traps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_programmable_traps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_lif_traps
 * Module - 'trap', Submodule - 'ingress', data - 'nof_lif_traps'
 * Number of LIF traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lif_traps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_lif_traps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_icmp_compressed_types
 * Module - 'trap', Submodule - 'ingress', data - 'nof_icmp_compressed_types'
 * Number of ICMP compressed types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_icmp_compressed_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_icmp_compressed_types_get_f) (
    int unit);

/**
 * \brief returns define data of nof_stat_objs
 * Module - 'trap', Submodule - 'ingress', data - 'nof_stat_objs'
 * Number of ingress statistical objects
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_stat_objs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_stat_objs_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_stat_objs_to_overwrite
 * Module - 'trap', Submodule - 'ingress', data - 'max_nof_stat_objs_to_overwrite'
 * Max number of statistical objects to overwrite
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_stat_objs_to_overwrite - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_max_nof_stat_objs_to_overwrite_get_f) (
    int unit);

/**
 * \brief returns define data of nof_error_code_profiles
 * Module - 'trap', Submodule - 'ingress', data - 'nof_error_code_profiles'
 * Number of Error Code profiles for MACSEC traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_error_code_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_error_code_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_sci_profiles
 * Module - 'trap', Submodule - 'ingress', data - 'nof_sci_profiles'
 * Number of SCI profiles for MACSEC traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sci_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_sci_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_error_codes
 * Module - 'trap', Submodule - 'ingress', data - 'nof_error_codes'
 * Number of Error Codes for MACSEC traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_error_codes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_error_codes_get_f) (
    int unit);

/**
 * \brief returns define data of nof_scis
 * Module - 'trap', Submodule - 'ingress', data - 'nof_scis'
 * Number of SCIs for MACSEC traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_scis - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_ingress_nof_scis_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRAP - INGRESS:
 * {
 */
/**
 * \brief Interface for trap ingress data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trap_ingress_feature_get_f feature_get;
    /**
     * returns numeric data of protocol_traps_init_mode
     */
    dnx_data_trap_ingress_protocol_traps_init_mode_get_f protocol_traps_init_mode_get;
    /**
     * returns define data of protocol_traps_lif_profile_starting_offset
     */
    dnx_data_trap_ingress_protocol_traps_lif_profile_starting_offset_get_f protocol_traps_lif_profile_starting_offset_get;
    /**
     * returns define data of nof_predefeind_traps
     */
    dnx_data_trap_ingress_nof_predefeind_traps_get_f nof_predefeind_traps_get;
    /**
     * returns define data of nof_user_defined_traps
     */
    dnx_data_trap_ingress_nof_user_defined_traps_get_f nof_user_defined_traps_get;
    /**
     * returns define data of nof_1588_traps
     */
    dnx_data_trap_ingress_nof_1588_traps_get_f nof_1588_traps_get;
    /**
     * returns define data of nof_entries_action_table
     */
    dnx_data_trap_ingress_nof_entries_action_table_get_f nof_entries_action_table_get;
    /**
     * returns define data of nof_protocol_trap_profiles
     */
    dnx_data_trap_ingress_nof_protocol_trap_profiles_get_f nof_protocol_trap_profiles_get;
    /**
     * returns define data of nof_recycle_cmds
     */
    dnx_data_trap_ingress_nof_recycle_cmds_get_f nof_recycle_cmds_get;
    /**
     * returns define data of nof_programmable_traps
     */
    dnx_data_trap_ingress_nof_programmable_traps_get_f nof_programmable_traps_get;
    /**
     * returns define data of nof_lif_traps
     */
    dnx_data_trap_ingress_nof_lif_traps_get_f nof_lif_traps_get;
    /**
     * returns define data of nof_icmp_compressed_types
     */
    dnx_data_trap_ingress_nof_icmp_compressed_types_get_f nof_icmp_compressed_types_get;
    /**
     * returns define data of nof_stat_objs
     */
    dnx_data_trap_ingress_nof_stat_objs_get_f nof_stat_objs_get;
    /**
     * returns define data of max_nof_stat_objs_to_overwrite
     */
    dnx_data_trap_ingress_max_nof_stat_objs_to_overwrite_get_f max_nof_stat_objs_to_overwrite_get;
    /**
     * returns define data of nof_error_code_profiles
     */
    dnx_data_trap_ingress_nof_error_code_profiles_get_f nof_error_code_profiles_get;
    /**
     * returns define data of nof_sci_profiles
     */
    dnx_data_trap_ingress_nof_sci_profiles_get_f nof_sci_profiles_get;
    /**
     * returns define data of nof_error_codes
     */
    dnx_data_trap_ingress_nof_error_codes_get_f nof_error_codes_get;
    /**
     * returns define data of nof_scis
     */
    dnx_data_trap_ingress_nof_scis_get_f nof_scis_get;
} dnx_data_if_trap_ingress_t;

/*
 * }
 */

/*
 * SUBMODULE  - ERPP:
 * erpp traps
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Is UnknownDA trap supported
     */
    dnx_data_trap_erpp_unknown_da_trap_en,
    /**
     * Is glem not found trap supported
     */
    dnx_data_trap_erpp_glem_not_found_trap,

    /**
     * Must be last one!
     */
    _dnx_data_trap_erpp_feature_nof
} dnx_data_trap_erpp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trap_erpp_feature_get_f) (
    int unit,
    dnx_data_trap_erpp_feature_e feature);

/**
 * \brief returns define data of nof_erpp_app_traps
 * Module - 'trap', Submodule - 'erpp', data - 'nof_erpp_app_traps'
 * Number of ERPP application traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_erpp_app_traps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_erpp_nof_erpp_app_traps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_erpp_forward_profiles
 * Module - 'trap', Submodule - 'erpp', data - 'nof_erpp_forward_profiles'
 * Number of ERPP forward profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_erpp_forward_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_erpp_nof_erpp_forward_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_erpp_user_configurable_profiles
 * Module - 'trap', Submodule - 'erpp', data - 'nof_erpp_user_configurable_profiles'
 * Number of user configurable profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_erpp_user_configurable_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_erpp_nof_erpp_user_configurable_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_erpp_snif_profiles
 * Module - 'trap', Submodule - 'erpp', data - 'nof_erpp_snif_profiles'
 * Number of ERPP snif profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_erpp_snif_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_erpp_nof_erpp_snif_profiles_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRAP - ERPP:
 * {
 */
/**
 * \brief Interface for trap erpp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trap_erpp_feature_get_f feature_get;
    /**
     * returns define data of nof_erpp_app_traps
     */
    dnx_data_trap_erpp_nof_erpp_app_traps_get_f nof_erpp_app_traps_get;
    /**
     * returns define data of nof_erpp_forward_profiles
     */
    dnx_data_trap_erpp_nof_erpp_forward_profiles_get_f nof_erpp_forward_profiles_get;
    /**
     * returns define data of nof_erpp_user_configurable_profiles
     */
    dnx_data_trap_erpp_nof_erpp_user_configurable_profiles_get_f nof_erpp_user_configurable_profiles_get;
    /**
     * returns define data of nof_erpp_snif_profiles
     */
    dnx_data_trap_erpp_nof_erpp_snif_profiles_get_f nof_erpp_snif_profiles_get;
} dnx_data_if_trap_erpp_t;

/*
 * }
 */

/*
 * SUBMODULE  - ETPP:
 * etpp traps
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Indicate if glem hw is supported
     */
    dnx_data_trap_etpp_glem_hw_support,

    /**
     * Must be last one!
     */
    _dnx_data_trap_etpp_feature_nof
} dnx_data_trap_etpp_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trap_etpp_feature_get_f) (
    int unit,
    dnx_data_trap_etpp_feature_e feature);

/**
 * \brief returns define data of nof_etpp_app_traps
 * Module - 'trap', Submodule - 'etpp', data - 'nof_etpp_app_traps'
 * Number of ETPP application traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_etpp_app_traps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_etpp_nof_etpp_app_traps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_etpp_user_configurable_profiles
 * Module - 'trap', Submodule - 'etpp', data - 'nof_etpp_user_configurable_profiles'
 * Number of user configurable profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_etpp_user_configurable_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_etpp_nof_etpp_user_configurable_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_etpp_trap_profiles
 * Module - 'trap', Submodule - 'etpp', data - 'nof_etpp_trap_profiles'
 * Number of ETPP trap profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_etpp_trap_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_etpp_nof_etpp_trap_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_etpp_oam_traps
 * Module - 'trap', Submodule - 'etpp', data - 'nof_etpp_oam_traps'
 * Number of ETPP OAM traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_etpp_oam_traps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_etpp_nof_etpp_oam_traps_get_f) (
    int unit);

/**
 * \brief returns define data of nof_etpp_snif_profiles
 * Module - 'trap', Submodule - 'etpp', data - 'nof_etpp_snif_profiles'
 * Number of ETPP snif profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_etpp_snif_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_etpp_nof_etpp_snif_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mtu_profiles
 * Module - 'trap', Submodule - 'etpp', data - 'nof_mtu_profiles'
 * Number of MTU profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mtu_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_etpp_nof_mtu_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_etpp_lif_traps
 * Module - 'trap', Submodule - 'etpp', data - 'nof_etpp_lif_traps'
 * Number of ETPP LIF traps
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_etpp_lif_traps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_etpp_nof_etpp_lif_traps_get_f) (
    int unit);

/**
 * \brief returns define data of max_mtu_value
 * Module - 'trap', Submodule - 'etpp', data - 'max_mtu_value'
 * The maximum MTU value allowed.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_mtu_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_etpp_max_mtu_value_get_f) (
    int unit);

/**
 * \brief returns define data of trap_context_port_profile_4b
 * Module - 'trap', Submodule - 'etpp', data - 'trap_context_port_profile_4b'
 * The context port profile 4b.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trap_context_port_profile_4b - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_etpp_trap_context_port_profile_4b_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRAP - ETPP:
 * {
 */
/**
 * \brief Interface for trap etpp data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trap_etpp_feature_get_f feature_get;
    /**
     * returns define data of nof_etpp_app_traps
     */
    dnx_data_trap_etpp_nof_etpp_app_traps_get_f nof_etpp_app_traps_get;
    /**
     * returns define data of nof_etpp_user_configurable_profiles
     */
    dnx_data_trap_etpp_nof_etpp_user_configurable_profiles_get_f nof_etpp_user_configurable_profiles_get;
    /**
     * returns define data of nof_etpp_trap_profiles
     */
    dnx_data_trap_etpp_nof_etpp_trap_profiles_get_f nof_etpp_trap_profiles_get;
    /**
     * returns define data of nof_etpp_oam_traps
     */
    dnx_data_trap_etpp_nof_etpp_oam_traps_get_f nof_etpp_oam_traps_get;
    /**
     * returns define data of nof_etpp_snif_profiles
     */
    dnx_data_trap_etpp_nof_etpp_snif_profiles_get_f nof_etpp_snif_profiles_get;
    /**
     * returns define data of nof_mtu_profiles
     */
    dnx_data_trap_etpp_nof_mtu_profiles_get_f nof_mtu_profiles_get;
    /**
     * returns define data of nof_etpp_lif_traps
     */
    dnx_data_trap_etpp_nof_etpp_lif_traps_get_f nof_etpp_lif_traps_get;
    /**
     * returns define data of max_mtu_value
     */
    dnx_data_trap_etpp_max_mtu_value_get_f max_mtu_value_get;
    /**
     * returns define data of trap_context_port_profile_4b
     */
    dnx_data_trap_etpp_trap_context_port_profile_4b_get_f trap_context_port_profile_4b_get;
} dnx_data_if_trap_etpp_t;

/*
 * }
 */

/*
 * SUBMODULE  - STRENGTH:
 * trap profiles data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_trap_strength_feature_nof
} dnx_data_trap_strength_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trap_strength_feature_get_f) (
    int unit,
    dnx_data_trap_strength_feature_e feature);

/**
 * \brief returns define data of max_strength
 * Module - 'trap', Submodule - 'strength', data - 'max_strength'
 * Max value of strength (4b)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_strength - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_strength_max_strength_get_f) (
    int unit);

/**
 * \brief returns define data of max_snp_strength
 * Module - 'trap', Submodule - 'strength', data - 'max_snp_strength'
 * Max value of snoop strength (3b)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_snp_strength - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_strength_max_snp_strength_get_f) (
    int unit);

/**
 * \brief returns define data of max_ingress_to_egress_compressed_strength
 * Module - 'trap', Submodule - 'strength', data - 'max_ingress_to_egress_compressed_strength'
 * Max value of ingress compressed strength (3b) mapped to egress strength (4b)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_ingress_to_egress_compressed_strength - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_strength_max_ingress_to_egress_compressed_strength_get_f) (
    int unit);

/**
 * \brief returns numeric data of default_trap_strength
 * Module - 'trap', Submodule - 'strength', data - 'default_trap_strength'
 * Default trap strength used when drop / trap packets to CPU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_trap_strength - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_strength_default_trap_strength_get_f) (
    int unit);

/**
 * \brief returns numeric data of default_snoop_strength
 * Module - 'trap', Submodule - 'strength', data - 'default_snoop_strength'
 * Default snoop strength used when drop / trap packets to CPU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_snoop_strength - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_strength_default_snoop_strength_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRAP - STRENGTH:
 * {
 */
/**
 * \brief Interface for trap strength data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trap_strength_feature_get_f feature_get;
    /**
     * returns define data of max_strength
     */
    dnx_data_trap_strength_max_strength_get_f max_strength_get;
    /**
     * returns define data of max_snp_strength
     */
    dnx_data_trap_strength_max_snp_strength_get_f max_snp_strength_get;
    /**
     * returns define data of max_ingress_to_egress_compressed_strength
     */
    dnx_data_trap_strength_max_ingress_to_egress_compressed_strength_get_f max_ingress_to_egress_compressed_strength_get;
    /**
     * returns numeric data of default_trap_strength
     */
    dnx_data_trap_strength_default_trap_strength_get_f default_trap_strength_get;
    /**
     * returns numeric data of default_snoop_strength
     */
    dnx_data_trap_strength_default_snoop_strength_get_f default_snoop_strength_get;
} dnx_data_if_trap_strength_t;

/*
 * }
 */

/*
 * SUBMODULE  - REGISTER_NAME_CHANGES:
 * Registers with changed names throughout devices.
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_trap_register_name_changes_feature_nof
} dnx_data_trap_register_name_changes_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_trap_register_name_changes_feature_get_f) (
    int unit,
    dnx_data_trap_register_name_changes_feature_e feature);

/**
 * \brief returns define data of out_lif_mcdb_ptr_signal
 * Module - 'trap', Submodule - 'register_name_changes', data - 'out_lif_mcdb_ptr_signal'
 * Out_LIF_or_MCDB_Ptr_ACE signal is shifted by bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     out_lif_mcdb_ptr_signal - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_register_name_changes_out_lif_mcdb_ptr_signal_get_f) (
    int unit);

/**
 * \brief returns define data of added_n
 * Module - 'trap', Submodule - 'register_name_changes', data - 'added_n'
 * Register name changed to have an _N at the end.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     added_n - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_register_name_changes_added_n_get_f) (
    int unit);

/**
 * \brief returns define data of per_pp_port_change
 * Module - 'trap', Submodule - 'register_name_changes', data - 'per_pp_port_change'
 * Register names changed to be per PP port.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     per_pp_port_change - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_register_name_changes_per_pp_port_change_get_f) (
    int unit);

/**
 * \brief returns define data of visibility_signal_0
 * Module - 'trap', Submodule - 'register_name_changes', data - 'visibility_signal_0'
 * Visibility signal validation enabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     visibility_signal_0 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_trap_register_name_changes_visibility_signal_0_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_TRAP - REGISTER_NAME_CHANGES:
 * {
 */
/**
 * \brief Interface for trap register_name_changes data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_trap_register_name_changes_feature_get_f feature_get;
    /**
     * returns define data of out_lif_mcdb_ptr_signal
     */
    dnx_data_trap_register_name_changes_out_lif_mcdb_ptr_signal_get_f out_lif_mcdb_ptr_signal_get;
    /**
     * returns define data of added_n
     */
    dnx_data_trap_register_name_changes_added_n_get_f added_n_get;
    /**
     * returns define data of per_pp_port_change
     */
    dnx_data_trap_register_name_changes_per_pp_port_change_get_f per_pp_port_change_get;
    /**
     * returns define data of visibility_signal_0
     */
    dnx_data_trap_register_name_changes_visibility_signal_0_get_f visibility_signal_0_get;
} dnx_data_if_trap_register_name_changes_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_TRAP:
 * {
 */
/**
 * \brief Interface for trap data
 */
typedef struct
{
    /**
     * Interface for trap ingress data
     */
    dnx_data_if_trap_ingress_t ingress;
    /**
     * Interface for trap erpp data
     */
    dnx_data_if_trap_erpp_t erpp;
    /**
     * Interface for trap etpp data
     */
    dnx_data_if_trap_etpp_t etpp;
    /**
     * Interface for trap strength data
     */
    dnx_data_if_trap_strength_t strength;
    /**
     * Interface for trap register_name_changes data
     */
    dnx_data_if_trap_register_name_changes_t register_name_changes;
} dnx_data_if_trap_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_trap_t dnx_data_trap;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_TRAP_H_*/
/* *INDENT-ON* */
