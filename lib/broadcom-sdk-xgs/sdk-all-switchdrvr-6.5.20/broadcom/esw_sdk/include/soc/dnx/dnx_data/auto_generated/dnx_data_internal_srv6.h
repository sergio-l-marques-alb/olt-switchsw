/** \file dnx_data_internal_srv6.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_SRV6_H_
/*{*/
#define _DNX_DATA_INTERNAL_SRV6_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_srv6.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_srv6_submodule_termination,
    dnx_data_srv6_submodule_encapsulation,

    /**
     * Must be last one!
     */
    _dnx_data_srv6_submodule_nof
} dnx_data_srv6_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE TERMINATION:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_srv6_termination_feature_get(
    int unit,
    dnx_data_srv6_termination_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_srv6_termination_define_min_nof_terminated_sids_psp,
    dnx_data_srv6_termination_define_max_nof_terminated_sids_psp,
    dnx_data_srv6_termination_define_min_nof_terminated_sids_usp,
    dnx_data_srv6_termination_define_max_nof_terminated_sids_usp,
    dnx_data_srv6_termination_define_max_nof_terminated_sids_usp_1pass,

    /**
     * Must be last one!
     */
    _dnx_data_srv6_termination_define_nof
} dnx_data_srv6_termination_define_e;

/* Get Data */
/**
 * \brief returns define data of min_nof_terminated_sids_psp
 * Module - 'srv6', Submodule - 'termination', data - 'min_nof_terminated_sids_psp'
 * Min number of SIDs that can be termianted in SRv6 PSP Egress node
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_nof_terminated_sids_psp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_srv6_termination_min_nof_terminated_sids_psp_get(
    int unit);

/**
 * \brief returns define data of max_nof_terminated_sids_psp
 * Module - 'srv6', Submodule - 'termination', data - 'max_nof_terminated_sids_psp'
 * Max number of SIDs that can be termianted in SRv6 PSP Egress node
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_terminated_sids_psp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_srv6_termination_max_nof_terminated_sids_psp_get(
    int unit);

/**
 * \brief returns define data of min_nof_terminated_sids_usp
 * Module - 'srv6', Submodule - 'termination', data - 'min_nof_terminated_sids_usp'
 * Min number of SIDs that can be termianted in SRv6 USP Egress node
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_nof_terminated_sids_usp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_srv6_termination_min_nof_terminated_sids_usp_get(
    int unit);

/**
 * \brief returns define data of max_nof_terminated_sids_usp
 * Module - 'srv6', Submodule - 'termination', data - 'max_nof_terminated_sids_usp'
 * Max number of SIDs that can be termianted in SRv6 USP Egress node
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_terminated_sids_usp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_srv6_termination_max_nof_terminated_sids_usp_get(
    int unit);

/**
 * \brief returns define data of max_nof_terminated_sids_usp_1pass
 * Module - 'srv6', Submodule - 'termination', data - 'max_nof_terminated_sids_usp_1pass'
 * Max number of SIDs that can be termianted in SRv6 USP Egress node in 1pass
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_terminated_sids_usp_1pass - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_srv6_termination_max_nof_terminated_sids_usp_1pass_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_srv6_termination_table_nof
} dnx_data_srv6_termination_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE ENCAPSULATION:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_srv6_encapsulation_feature_get(
    int unit,
    dnx_data_srv6_encapsulation_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_srv6_encapsulation_define_max_nof_encap_sids_main_pass,
    dnx_data_srv6_encapsulation_define_nof_encap_sids_extended_pass,

    /**
     * Must be last one!
     */
    _dnx_data_srv6_encapsulation_define_nof
} dnx_data_srv6_encapsulation_define_e;

/* Get Data */
/**
 * \brief returns define data of max_nof_encap_sids_main_pass
 * Module - 'srv6', Submodule - 'encapsulation', data - 'max_nof_encap_sids_main_pass'
 * Max number of SIDs that can be Encapsulated in SRV6 tunnel, when building main headers (SRH, and IPv6 tunnel)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_encap_sids_main_pass - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_srv6_encapsulation_max_nof_encap_sids_main_pass_get(
    int unit);

/**
 * \brief returns define data of nof_encap_sids_extended_pass
 * Module - 'srv6', Submodule - 'encapsulation', data - 'nof_encap_sids_extended_pass'
 * Number of SIDs that can be Encapsulated in SRV6 tunnel, extended pass - only SIDs are encapsulated
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_encap_sids_extended_pass - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_srv6_encapsulation_nof_encap_sids_extended_pass_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_srv6_encapsulation_table_nof
} dnx_data_srv6_encapsulation_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_srv6_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_SRV6_H_*/
/* *INDENT-ON* */
