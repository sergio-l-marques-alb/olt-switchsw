/** \file dnx_data_failover.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_FAILOVER_H_
/*{*/
#define _DNX_DATA_FAILOVER_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_failover.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_failover
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_failover_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - PATH_SELECT:
 * protection path select data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_failover_path_select_feature_nof
} dnx_data_failover_path_select_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_failover_path_select_feature_get_f) (
    int unit,
    dnx_data_failover_path_select_feature_e feature);

/**
 * \brief returns define data of egress_size
 * Module - 'failover', Submodule - 'path_select', data - 'egress_size'
 * size of egress path select table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_egress_size_get_f) (
    int unit);

/**
 * \brief returns define data of ingress_size
 * Module - 'failover', Submodule - 'path_select', data - 'ingress_size'
 * size of ingress path select table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ingress_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_ingress_size_get_f) (
    int unit);

/**
 * \brief returns define data of fec_size
 * Module - 'failover', Submodule - 'path_select', data - 'fec_size'
 * size of fec path select table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_fec_size_get_f) (
    int unit);

/**
 * \brief returns define data of egr_no_protection
 * Module - 'failover', Submodule - 'path_select', data - 'egr_no_protection'
 * protection path select pointer dedicate for no egress protection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egr_no_protection - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_egr_no_protection_get_f) (
    int unit);

/**
 * \brief returns define data of ing_no_protection
 * Module - 'failover', Submodule - 'path_select', data - 'ing_no_protection'
 * protection path select pointer dedicate for no ingress protection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ing_no_protection - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_ing_no_protection_get_f) (
    int unit);

/**
 * \brief returns define data of fec_no_protection
 * Module - 'failover', Submodule - 'path_select', data - 'fec_no_protection'
 * protection path select pointer dedicate for no fec protection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_no_protection - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_fec_no_protection_get_f) (
    int unit);

/**
 * \brief returns define data of fec_facility_protection
 * Module - 'failover', Submodule - 'path_select', data - 'fec_facility_protection'
 * protection path select pointer dedicate for fec facility protection
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_facility_protection - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_fec_facility_protection_get_f) (
    int unit);

/**
 * \brief returns define data of nof_fec_path_select_banks
 * Module - 'failover', Submodule - 'path_select', data - 'nof_fec_path_select_banks'
 * number of banks included in fec protection path select table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fec_path_select_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_nof_fec_path_select_banks_get_f) (
    int unit);

/**
 * \brief returns define data of fec_bank_size
 * Module - 'failover', Submodule - 'path_select', data - 'fec_bank_size'
 * failover fec bank size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_bank_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_fec_bank_size_get_f) (
    int unit);

/**
 * \brief returns define data of in_lif_protection_pointer_nof_msb
 * Module - 'failover', Submodule - 'path_select', data - 'in_lif_protection_pointer_nof_msb'
 * Number MS bits from protection pointer used for HW access to the fields(0-3) of memory IPPA_VTT_PATH_SELECT.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     in_lif_protection_pointer_nof_msb - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_in_lif_protection_pointer_nof_msb_get_f) (
    int unit);

/**
 * \brief returns define data of in_lif_protection_pointer_nof_lsb
 * Module - 'failover', Submodule - 'path_select', data - 'in_lif_protection_pointer_nof_lsb'
 * Number LS bits from protection pointer used for HW access to the entries (0-4095) of memory IPPA_VTT_PATH_SELECT.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     in_lif_protection_pointer_nof_lsb - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_failover_path_select_in_lif_protection_pointer_nof_lsb_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FAILOVER - PATH_SELECT:
 * {
 */
/**
 * \brief Interface for failover path_select data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_failover_path_select_feature_get_f feature_get;
    /**
     * returns define data of egress_size
     */
    dnx_data_failover_path_select_egress_size_get_f egress_size_get;
    /**
     * returns define data of ingress_size
     */
    dnx_data_failover_path_select_ingress_size_get_f ingress_size_get;
    /**
     * returns define data of fec_size
     */
    dnx_data_failover_path_select_fec_size_get_f fec_size_get;
    /**
     * returns define data of egr_no_protection
     */
    dnx_data_failover_path_select_egr_no_protection_get_f egr_no_protection_get;
    /**
     * returns define data of ing_no_protection
     */
    dnx_data_failover_path_select_ing_no_protection_get_f ing_no_protection_get;
    /**
     * returns define data of fec_no_protection
     */
    dnx_data_failover_path_select_fec_no_protection_get_f fec_no_protection_get;
    /**
     * returns define data of fec_facility_protection
     */
    dnx_data_failover_path_select_fec_facility_protection_get_f fec_facility_protection_get;
    /**
     * returns define data of nof_fec_path_select_banks
     */
    dnx_data_failover_path_select_nof_fec_path_select_banks_get_f nof_fec_path_select_banks_get;
    /**
     * returns define data of fec_bank_size
     */
    dnx_data_failover_path_select_fec_bank_size_get_f fec_bank_size_get;
    /**
     * returns define data of in_lif_protection_pointer_nof_msb
     */
    dnx_data_failover_path_select_in_lif_protection_pointer_nof_msb_get_f in_lif_protection_pointer_nof_msb_get;
    /**
     * returns define data of in_lif_protection_pointer_nof_lsb
     */
    dnx_data_failover_path_select_in_lif_protection_pointer_nof_lsb_get_f in_lif_protection_pointer_nof_lsb_get;
} dnx_data_if_failover_path_select_t;

/*
 * }
 */

/*
 * SUBMODULE  - FACILITY:
 * Facility protection data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * enable/disable accelerated facility protection.
     */
    dnx_data_failover_facility_accelerated_mode_enable,

    /**
     * Must be last one!
     */
    _dnx_data_failover_facility_feature_nof
} dnx_data_failover_facility_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_failover_facility_feature_get_f) (
    int unit,
    dnx_data_failover_facility_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FAILOVER - FACILITY:
 * {
 */
/**
 * \brief Interface for failover facility data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_failover_facility_feature_get_f feature_get;
} dnx_data_if_failover_facility_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_FAILOVER:
 * {
 */
/**
 * \brief Interface for failover data
 */
typedef struct
{
    /**
     * Interface for failover path_select data
     */
    dnx_data_if_failover_path_select_t path_select;
    /**
     * Interface for failover facility data
     */
    dnx_data_if_failover_facility_t facility;
} dnx_data_if_failover_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_failover_t dnx_data_failover;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_FAILOVER_H_*/
/* *INDENT-ON* */
