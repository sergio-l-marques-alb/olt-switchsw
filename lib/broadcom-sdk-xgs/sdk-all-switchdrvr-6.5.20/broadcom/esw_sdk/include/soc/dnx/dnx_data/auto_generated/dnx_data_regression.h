/** \file dnx_data_regression.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_REGRESSION_H_
/*{*/
#define _DNX_DATA_REGRESSION_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/port.h>
#include <soc/portmod/portmod.h>
#include <soc/dnxc/dnxc_port.h>
#include <bcm_int/dnx/port/imb/imb.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_regression.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_regression
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_regression_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - DVAPI_TOPOLOGY:
 * topologies of dvapi
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule dvapi_topology table pm_ext_loops
 * Table info:
 * port macros have external loopback
 */
typedef struct
{
    /**
     * external loopback is enabled on this pm
     */
    uint32 pm_id;
} dnx_data_regression_dvapi_topology_pm_ext_loops_t;

/**
 * \brief Holds values of submodule dvapi_topology table pm_p2p_links
 * Table info:
 * port macros have p2p links
 */
typedef struct
{
    /**
     * pm_id id
     */
    uint32 pm_id;
    /**
     * peer pm connected with pm_id
     */
    uint32 peer_pm_id;
} dnx_data_regression_dvapi_topology_pm_p2p_links_t;

/**
 * \brief Holds values of submodule dvapi_topology table pm_test_limitations
 * Table info:
 * Table of PMs with limitations. Used for testing.
 */
typedef struct
{
    /**
     * Max speed allowed per PM. Limitation is due to SPF connectors used on board.
     */
    int max_speed;
} dnx_data_regression_dvapi_topology_pm_test_limitations_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_regression_dvapi_topology_feature_nof
} dnx_data_regression_dvapi_topology_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_regression_dvapi_topology_feature_get_f) (
    int unit,
    dnx_data_regression_dvapi_topology_feature_e feature);

/**
 * \brief returns define data of nof_pm_ext_loops
 * Module - 'regression', Submodule - 'dvapi_topology', data - 'nof_pm_ext_loops'
 * number of exp loopbacks
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pm_ext_loops - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_dvapi_topology_nof_pm_ext_loops_get_f) (
    int unit);

/**
 * \brief returns define data of nof_pm_p2p_links
 * Module - 'regression', Submodule - 'dvapi_topology', data - 'nof_pm_p2p_links'
 * number of p2p links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pm_p2p_links - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_regression_dvapi_topology_nof_pm_p2p_links_get_f) (
    int unit);

/**
 * \brief get table pm_ext_loops entry 
 * port macros have external loopback
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     pm_ext_loops - returns the relevant entry values grouped in struct - see dnx_data_regression_dvapi_topology_pm_ext_loops_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_dvapi_topology_pm_ext_loops_t *(
    *dnx_data_regression_dvapi_topology_pm_ext_loops_get_f) (
    int unit,
    int index);

/**
 * \brief get table pm_p2p_links entry 
 * port macros have p2p links
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     pm_p2p_links - returns the relevant entry values grouped in struct - see dnx_data_regression_dvapi_topology_pm_p2p_links_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_dvapi_topology_pm_p2p_links_t *(
    *dnx_data_regression_dvapi_topology_pm_p2p_links_get_f) (
    int unit,
    int index);

/**
 * \brief get table pm_test_limitations entry 
 * Table of PMs with limitations. Used for testing.
 * 
 * \param [in] unit - unit #
 * \param [in] pm_index - PM instance number.
 * 
 * \return
 *     pm_test_limitations - returns the relevant entry values grouped in struct - see dnx_data_regression_dvapi_topology_pm_test_limitations_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_regression_dvapi_topology_pm_test_limitations_t *(
    *dnx_data_regression_dvapi_topology_pm_test_limitations_get_f) (
    int unit,
    int pm_index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_REGRESSION - DVAPI_TOPOLOGY:
 * {
 */
/**
 * \brief Interface for regression dvapi_topology data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_regression_dvapi_topology_feature_get_f feature_get;
    /**
     * returns define data of nof_pm_ext_loops
     */
    dnx_data_regression_dvapi_topology_nof_pm_ext_loops_get_f nof_pm_ext_loops_get;
    /**
     * returns define data of nof_pm_p2p_links
     */
    dnx_data_regression_dvapi_topology_nof_pm_p2p_links_get_f nof_pm_p2p_links_get;
    /**
     * get table pm_ext_loops entry 
     */
    dnx_data_regression_dvapi_topology_pm_ext_loops_get_f pm_ext_loops_get;
    /**
     * get general info table about table (for example key size)pm_ext_loops info
     */
    dnxc_data_table_info_get_f pm_ext_loops_info_get;
    /**
     * get table pm_p2p_links entry 
     */
    dnx_data_regression_dvapi_topology_pm_p2p_links_get_f pm_p2p_links_get;
    /**
     * get general info table about table (for example key size)pm_p2p_links info
     */
    dnxc_data_table_info_get_f pm_p2p_links_info_get;
    /**
     * get table pm_test_limitations entry 
     */
    dnx_data_regression_dvapi_topology_pm_test_limitations_get_f pm_test_limitations_get;
    /**
     * get general info table about table (for example key size)pm_test_limitations info
     */
    dnxc_data_table_info_get_f pm_test_limitations_info_get;
} dnx_data_if_regression_dvapi_topology_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_REGRESSION:
 * {
 */
/**
 * \brief Interface for regression data
 */
typedef struct
{
    /**
     * Interface for regression dvapi_topology data
     */
    dnx_data_if_regression_dvapi_topology_t dvapi_topology;
} dnx_data_if_regression_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_regression_t dnx_data_regression;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_REGRESSION_H_*/
/* *INDENT-ON* */
