/** \file dnx_data_pll.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_PLL_H_
/*{*/
#define _DNX_DATA_PLL_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/pll/pll.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_pll.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_pll
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_pll_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * PLL general configurations
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule general table nif_pll
 * Table info:
 * NIF PLL reference and output frequencies
 */
typedef struct
{
    /**
     * Reference clock frequency for the NIF SerDeses
     */
    int in_freq;
    /**
     * Output clock frequency for the NIF SerDeses
     */
    int out_freq;
} dnx_data_pll_general_nif_pll_t;

/**
 * \brief Holds values of submodule general table fabric_pll
 * Table info:
 * Fabric PLL reference and output frequencies
 */
typedef struct
{
    /**
     * Output clock frequency for the Fabric SerDeses
     */
    int in_freq;
    /**
     * Output clock frequency for the Fabric SerDeses
     */
    int out_freq;
} dnx_data_pll_general_fabric_pll_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * IEEE1588 DPLL mode
     */
    dnx_data_pll_general_ts_freq_lock,
    /**
     * Broadsync clock enable
     */
    dnx_data_pll_general_bs_enable,
    /**
     * Indicate if PLL is supported
     */
    dnx_data_pll_general_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_pll_general_feature_nof
} dnx_data_pll_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pll_general_feature_get_f) (
    int unit,
    dnx_data_pll_general_feature_e feature);

/**
 * \brief get table nif_pll entry 
 * NIF PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * \param [in] pll_index - Index of NIF PLL (0 or 1)
 * 
 * \return
 *     nif_pll - returns the relevant entry values grouped in struct - see dnx_data_pll_general_nif_pll_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_pll_general_nif_pll_t *(
    *dnx_data_pll_general_nif_pll_get_f) (
    int unit,
    int pll_index);

/**
 * \brief get table fabric_pll entry 
 * Fabric PLL reference and output frequencies
 * 
 * \param [in] unit - unit #
 * \param [in] pll_index - Index of Fabric PLL (0 or 1)
 * 
 * \return
 *     fabric_pll - returns the relevant entry values grouped in struct - see dnx_data_pll_general_fabric_pll_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_pll_general_fabric_pll_t *(
    *dnx_data_pll_general_fabric_pll_get_f) (
    int unit,
    int pll_index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PLL - GENERAL:
 * {
 */
/**
 * \brief Interface for pll general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pll_general_feature_get_f feature_get;
    /**
     * get table nif_pll entry 
     */
    dnx_data_pll_general_nif_pll_get_f nif_pll_get;
    /**
     * get general info table about table (for example key size)nif_pll info
     */
    dnxc_data_table_info_get_f nif_pll_info_get;
    /**
     * get table fabric_pll entry 
     */
    dnx_data_pll_general_fabric_pll_get_f fabric_pll_get;
    /**
     * get general info table about table (for example key size)fabric_pll info
     */
    dnxc_data_table_info_get_f fabric_pll_info_get;
} dnx_data_if_pll_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - PLL1:
 * PLL1 configurations
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule pll1 table config
 * Table info:
 * PLL1 configuration parameters
 */
typedef struct
{
    /**
     * Index of the PLL1, used for DBAL access
     */
    int pll1_id;
    /**
     * Indication if the type of PLL1 is supported for device
     */
    int valid;
    /**
     * Pre divider of PLL1
     */
    int pdiv;
    /**
     * N divider of PLL1
     */
    int ndiv_int;
    /**
     * M-divider for channel 0 of PLL1
     */
    int ch0_mdiv;
    /**
     * M-divider for channel 1 of PLL1
     */
    int ch1_mdiv;
    /**
     * M-divider for channel 2 of PLL1
     */
    int ch2_mdiv;
    /**
     * M-divider for channel 3 of PLL1
     */
    int ch3_mdiv;
    /**
     * M-divider for channel 4 of PLL1
     */
    int ch4_mdiv;
    /**
     * M-divider for channel 5 of PLL1
     */
    int ch5_mdiv;
    /**
     * Enable output CML of PLL1
     */
    int output_cml_en;
    /**
     * Reference clock source select
     */
    int refclk_source_sel;
    /**
     * Reference clock of PLL1
     */
    int refclk;
} dnx_data_pll_pll1_config_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Indication if configuring initial phase values high 32 is supported
     */
    dnx_data_pll_pll1_ts_phase_initial_hi_config,
    /**
     * Internal or external (1 for internal) reference clock for TS PLL1
     */
    dnx_data_pll_pll1_ts_refclk_source_internal,

    /**
     * Must be last one!
     */
    _dnx_data_pll_pll1_feature_nof
} dnx_data_pll_pll1_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pll_pll1_feature_get_f) (
    int unit,
    dnx_data_pll_pll1_feature_e feature);

/**
 * \brief returns define data of nof_pll1
 * Module - 'pll', Submodule - 'pll1', data - 'nof_pll1'
 * Number of PLL1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pll1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_nof_pll1_get_f) (
    int unit);

/**
 * \brief returns numeric data of ts_phase_initial_lo
 * Module - 'pll', Submodule - 'pll1', data - 'ts_phase_initial_lo'
 * Initial phase values low 32
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_phase_initial_lo - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_ts_phase_initial_lo_get_f) (
    int unit);

/**
 * \brief returns numeric data of ts_phase_initial_hi
 * Module - 'pll', Submodule - 'pll1', data - 'ts_phase_initial_hi'
 * Initial phase values high 32
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_phase_initial_hi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_ts_phase_initial_hi_get_f) (
    int unit);

/**
 * \brief returns numeric data of ts_nof_bits_hi
 * Module - 'pll', Submodule - 'pll1', data - 'ts_nof_bits_hi'
 * Number of high bits for presenting phase values
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_nof_bits_hi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_ts_nof_bits_hi_get_f) (
    int unit);

/**
 * \brief returns numeric data of ts_nof_bits_right_shift_ns
 * Module - 'pll', Submodule - 'pll1', data - 'ts_nof_bits_right_shift_ns'
 * Number of bits to right shift to get nanoseconds.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_nof_bits_right_shift_ns - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_ts_nof_bits_right_shift_ns_get_f) (
    int unit);

/**
 * \brief returns numeric data of ts_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'ts_pll1_id'
 * Index of the TS PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_ts_pll1_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of bs_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'bs_pll1_id'
 * Index of the BS PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bs_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_bs_pll1_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of fab_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'fab_pll1_id'
 * Index of the FAB PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fab_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_fab_pll1_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of nif_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'nif_pll1_id'
 * Index of the NIF PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_nif_pll1_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of flexe_pll1_id
 * Module - 'pll', Submodule - 'pll1', data - 'flexe_pll1_id'
 * Index of the FLEXE PLL1, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flexe_pll1_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll1_flexe_pll1_id_get_f) (
    int unit);

/**
 * \brief get table config entry 
 * PLL1 configuration parameters
 * 
 * \param [in] unit - unit #
 * \param [in] pll1_type - Type of PLL1 according to DNX_PLL1_TYPE enumerator
 * 
 * \return
 *     config - returns the relevant entry values grouped in struct - see dnx_data_pll_pll1_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_pll_pll1_config_t *(
    *dnx_data_pll_pll1_config_get_f) (
    int unit,
    int pll1_type);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PLL - PLL1:
 * {
 */
/**
 * \brief Interface for pll pll1 data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pll_pll1_feature_get_f feature_get;
    /**
     * returns define data of nof_pll1
     */
    dnx_data_pll_pll1_nof_pll1_get_f nof_pll1_get;
    /**
     * returns numeric data of ts_phase_initial_lo
     */
    dnx_data_pll_pll1_ts_phase_initial_lo_get_f ts_phase_initial_lo_get;
    /**
     * returns numeric data of ts_phase_initial_hi
     */
    dnx_data_pll_pll1_ts_phase_initial_hi_get_f ts_phase_initial_hi_get;
    /**
     * returns numeric data of ts_nof_bits_hi
     */
    dnx_data_pll_pll1_ts_nof_bits_hi_get_f ts_nof_bits_hi_get;
    /**
     * returns numeric data of ts_nof_bits_right_shift_ns
     */
    dnx_data_pll_pll1_ts_nof_bits_right_shift_ns_get_f ts_nof_bits_right_shift_ns_get;
    /**
     * returns numeric data of ts_pll1_id
     */
    dnx_data_pll_pll1_ts_pll1_id_get_f ts_pll1_id_get;
    /**
     * returns numeric data of bs_pll1_id
     */
    dnx_data_pll_pll1_bs_pll1_id_get_f bs_pll1_id_get;
    /**
     * returns numeric data of fab_pll1_id
     */
    dnx_data_pll_pll1_fab_pll1_id_get_f fab_pll1_id_get;
    /**
     * returns numeric data of nif_pll1_id
     */
    dnx_data_pll_pll1_nif_pll1_id_get_f nif_pll1_id_get;
    /**
     * returns numeric data of flexe_pll1_id
     */
    dnx_data_pll_pll1_flexe_pll1_id_get_f flexe_pll1_id_get;
    /**
     * get table config entry 
     */
    dnx_data_pll_pll1_config_get_f config_get;
    /**
     * get general info table about table (for example key size)config info
     */
    dnxc_data_table_info_get_f config_info_get;
} dnx_data_if_pll_pll1_t;

/*
 * }
 */

/*
 * SUBMODULE  - PLL3:
 * PLL3 configurations
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule pll3 table config
 * Table info:
 * PLL3 configuration parameters
 */
typedef struct
{
    /**
     * Index of the PLL1, used for DBAL access
     */
    int pll3_id;
    /**
     * Indication if the type of PLL3 is supported for device
     */
    int valid;
    /**
     * M-divider for channel 1 of PLL3
     */
    int ch1_mdiv;
    /**
     * M-divider for channel 2 of PLL3
     */
    int ch2_mdiv;
    /**
     * M-divider for channel 3 of PLL3
     */
    int ch3_mdiv;
    /**
     * M-divider for channel 4 of PLL3
     */
    int ch4_mdiv;
    /**
     * M-divider for channel 5 of PLL3
     */
    int ch5_mdiv;
} dnx_data_pll_pll3_config_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pll_pll3_feature_nof
} dnx_data_pll_pll3_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pll_pll3_feature_get_f) (
    int unit,
    dnx_data_pll_pll3_feature_e feature);

/**
 * \brief returns define data of nof_pll3
 * Module - 'pll', Submodule - 'pll3', data - 'nof_pll3'
 * Number of PLL3
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pll3 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_nof_pll3_get_f) (
    int unit);

/**
 * \brief returns define data of vco_clock
 * Module - 'pll', Submodule - 'pll3', data - 'vco_clock'
 * Frequency of the Voltage Control Oscilator of PLL3. Used to calculate Pdiv, Ndiv, Mdiv and the Effective Ferquency
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vco_clock - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_vco_clock_get_f) (
    int unit);

/**
 * \brief returns define data of kp
 * Module - 'pll', Submodule - 'pll3', data - 'kp'
 * KP parameter for PLL3 configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     kp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_kp_get_f) (
    int unit);

/**
 * \brief returns define data of ki
 * Module - 'pll', Submodule - 'pll3', data - 'ki'
 * Ki parameter for PLL3 configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ki - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_ki_get_f) (
    int unit);

/**
 * \brief returns define data of en_ctrl
 * Module - 'pll', Submodule - 'pll3', data - 'en_ctrl'
 * Enable control
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     en_ctrl - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_en_ctrl_get_f) (
    int unit);

/**
 * \brief returns define data of en_ctrl_byp
 * Module - 'pll', Submodule - 'pll3', data - 'en_ctrl_byp'
 * Enable control for bypass mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     en_ctrl_byp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_en_ctrl_byp_get_f) (
    int unit);

/**
 * \brief returns define data of route_ctr_byp
 * Module - 'pll', Submodule - 'pll3', data - 'route_ctr_byp'
 * Value of route control field when using bypass
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     route_ctr_byp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_route_ctr_byp_get_f) (
    int unit);

/**
 * \brief returns define data of ref_clock_125
 * Module - 'pll', Submodule - 'pll3', data - 'ref_clock_125'
 * Value for 125MHz reference clock
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ref_clock_125 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_ref_clock_125_get_f) (
    int unit);

/**
 * \brief returns define data of ref_clock_156_25
 * Module - 'pll', Submodule - 'pll3', data - 'ref_clock_156_25'
 * Value for 156.25MHz reference clock.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ref_clock_156_25 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_ref_clock_156_25_get_f) (
    int unit);

/**
 * \brief returns define data of ref_clock_312_5
 * Module - 'pll', Submodule - 'pll3', data - 'ref_clock_312_5'
 * Value for 312.5MHz reference clock.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ref_clock_312_5 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_ref_clock_312_5_get_f) (
    int unit);

/**
 * \brief returns numeric data of nif0_pll3_id
 * Module - 'pll', Submodule - 'pll3', data - 'nif0_pll3_id'
 * Index of the NIF0 PLL3, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif0_pll3_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_nif0_pll3_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of nif1_pll3_id
 * Module - 'pll', Submodule - 'pll3', data - 'nif1_pll3_id'
 * Index of the NIF1 PLL3, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif1_pll3_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_nif1_pll3_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of mas0_pll3_id
 * Module - 'pll', Submodule - 'pll3', data - 'mas0_pll3_id'
 * Index of the MAS0 PLL3, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mas0_pll3_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_mas0_pll3_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of mas1_pll3_id
 * Module - 'pll', Submodule - 'pll3', data - 'mas1_pll3_id'
 * Index of the MAS1 PLL3, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mas1_pll3_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll3_mas1_pll3_id_get_f) (
    int unit);

/**
 * \brief get table config entry 
 * PLL3 configuration parameters
 * 
 * \param [in] unit - unit #
 * \param [in] pll3_type - Type of PLL1 according to DNX_PLL1_TYPE enumerator
 * 
 * \return
 *     config - returns the relevant entry values grouped in struct - see dnx_data_pll_pll3_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_pll_pll3_config_t *(
    *dnx_data_pll_pll3_config_get_f) (
    int unit,
    int pll3_type);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PLL - PLL3:
 * {
 */
/**
 * \brief Interface for pll pll3 data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pll_pll3_feature_get_f feature_get;
    /**
     * returns define data of nof_pll3
     */
    dnx_data_pll_pll3_nof_pll3_get_f nof_pll3_get;
    /**
     * returns define data of vco_clock
     */
    dnx_data_pll_pll3_vco_clock_get_f vco_clock_get;
    /**
     * returns define data of kp
     */
    dnx_data_pll_pll3_kp_get_f kp_get;
    /**
     * returns define data of ki
     */
    dnx_data_pll_pll3_ki_get_f ki_get;
    /**
     * returns define data of en_ctrl
     */
    dnx_data_pll_pll3_en_ctrl_get_f en_ctrl_get;
    /**
     * returns define data of en_ctrl_byp
     */
    dnx_data_pll_pll3_en_ctrl_byp_get_f en_ctrl_byp_get;
    /**
     * returns define data of route_ctr_byp
     */
    dnx_data_pll_pll3_route_ctr_byp_get_f route_ctr_byp_get;
    /**
     * returns define data of ref_clock_125
     */
    dnx_data_pll_pll3_ref_clock_125_get_f ref_clock_125_get;
    /**
     * returns define data of ref_clock_156_25
     */
    dnx_data_pll_pll3_ref_clock_156_25_get_f ref_clock_156_25_get;
    /**
     * returns define data of ref_clock_312_5
     */
    dnx_data_pll_pll3_ref_clock_312_5_get_f ref_clock_312_5_get;
    /**
     * returns numeric data of nif0_pll3_id
     */
    dnx_data_pll_pll3_nif0_pll3_id_get_f nif0_pll3_id_get;
    /**
     * returns numeric data of nif1_pll3_id
     */
    dnx_data_pll_pll3_nif1_pll3_id_get_f nif1_pll3_id_get;
    /**
     * returns numeric data of mas0_pll3_id
     */
    dnx_data_pll_pll3_mas0_pll3_id_get_f mas0_pll3_id_get;
    /**
     * returns numeric data of mas1_pll3_id
     */
    dnx_data_pll_pll3_mas1_pll3_id_get_f mas1_pll3_id_get;
    /**
     * get table config entry 
     */
    dnx_data_pll_pll3_config_get_f config_get;
    /**
     * get general info table about table (for example key size)config info
     */
    dnxc_data_table_info_get_f config_info_get;
} dnx_data_if_pll_pll3_t;

/*
 * }
 */

/*
 * SUBMODULE  - PLL4:
 * PLL4 configurations
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule pll4 table config
 * Table info:
 * PLL4 configuration parameters
 */
typedef struct
{
    /**
     * Index of the PLL4, used for DBAL access
     */
    int pll4_id;
    /**
     * Indication if the type of PLL3 is supported for device
     */
    int valid;
    /**
     * Reference clock source select of PLL4 - 1 from pad, 0 from TS
     */
    int ref_clk_src_sel;
    /**
     * Reference clock of PLL4
     */
    int ref_clk;
    /**
     * Pre divider of Delay-locked loop of PLL4
     */
    int dll_ref_pdiv;
    /**
     * Enable of Delay-locked loop of PLL4
     */
    int dll_post_en;
    /**
     * Enable of Auxiliary Oscillator of PLL4
     */
    int aux_post_en;
    /**
     * Pre divider of PLL4
     */
    int pdiv;
    /**
     * N divider of PLL4
     */
    int ndiv_int;
    /**
     * Enable differential reference clock to CMOS
     */
    int d2c_en;
    /**
     * M-divider for channel 0 of PLL4
     */
    int ch0_mdiv;
    /**
     * M-divider for channel 1 of PLL4
     */
    int ch1_mdiv;
    /**
     * M-divider for channel 2 of PLL4
     */
    int ch2_mdiv;
    /**
     * M-divider for channel 3 of PLL4
     */
    int ch3_mdiv;
    /**
     * M-divider for channel 6 of PLL4
     */
    int ch6_mdiv;
} dnx_data_pll_pll4_config_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_pll_pll4_feature_nof
} dnx_data_pll_pll4_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pll_pll4_feature_get_f) (
    int unit,
    dnx_data_pll_pll4_feature_e feature);

/**
 * \brief returns define data of nof_pll4
 * Module - 'pll', Submodule - 'pll4', data - 'nof_pll4'
 * Number of PLL4
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pll4 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll4_nof_pll4_get_f) (
    int unit);

/**
 * \brief returns numeric data of ts_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'ts_pll4_id'
 * Index of the TS PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll4_ts_pll4_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of bs_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'bs_pll4_id'
 * Index of the BS PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bs_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll4_bs_pll4_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of nif_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'nif_pll4_id'
 * Index of the NIF PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll4_nif_pll4_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of fab_pll4_id
 * Module - 'pll', Submodule - 'pll4', data - 'fab_pll4_id'
 * Index of the FSRD PLL4, used for DBAL access
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fab_pll4_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_pll_pll4_fab_pll4_id_get_f) (
    int unit);

/**
 * \brief get table config entry 
 * PLL4 configuration parameters
 * 
 * \param [in] unit - unit #
 * \param [in] pll4_type - Type of PLL4 according to DNX_PLL4_TYPE enumerator
 * 
 * \return
 *     config - returns the relevant entry values grouped in struct - see dnx_data_pll_pll4_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_pll_pll4_config_t *(
    *dnx_data_pll_pll4_config_get_f) (
    int unit,
    int pll4_type);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PLL - PLL4:
 * {
 */
/**
 * \brief Interface for pll pll4 data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pll_pll4_feature_get_f feature_get;
    /**
     * returns define data of nof_pll4
     */
    dnx_data_pll_pll4_nof_pll4_get_f nof_pll4_get;
    /**
     * returns numeric data of ts_pll4_id
     */
    dnx_data_pll_pll4_ts_pll4_id_get_f ts_pll4_id_get;
    /**
     * returns numeric data of bs_pll4_id
     */
    dnx_data_pll_pll4_bs_pll4_id_get_f bs_pll4_id_get;
    /**
     * returns numeric data of nif_pll4_id
     */
    dnx_data_pll_pll4_nif_pll4_id_get_f nif_pll4_id_get;
    /**
     * returns numeric data of fab_pll4_id
     */
    dnx_data_pll_pll4_fab_pll4_id_get_f fab_pll4_id_get;
    /**
     * get table config entry 
     */
    dnx_data_pll_pll4_config_get_f config_get;
    /**
     * get general info table about table (for example key size)config info
     */
    dnxc_data_table_info_get_f config_info_get;
} dnx_data_if_pll_pll4_t;

/*
 * }
 */

/*
 * SUBMODULE  - SYNCE_PLL:
 * synce PLL general configurations
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Marks presence of synce pll
     */
    dnx_data_pll_synce_pll_present,

    /**
     * Must be last one!
     */
    _dnx_data_pll_synce_pll_feature_nof
} dnx_data_pll_synce_pll_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_pll_synce_pll_feature_get_f) (
    int unit,
    dnx_data_pll_synce_pll_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_PLL - SYNCE_PLL:
 * {
 */
/**
 * \brief Interface for pll synce_pll data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_pll_synce_pll_feature_get_f feature_get;
} dnx_data_if_pll_synce_pll_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_PLL:
 * {
 */
/**
 * \brief Interface for pll data
 */
typedef struct
{
    /**
     * Interface for pll general data
     */
    dnx_data_if_pll_general_t general;
    /**
     * Interface for pll pll1 data
     */
    dnx_data_if_pll_pll1_t pll1;
    /**
     * Interface for pll pll3 data
     */
    dnx_data_if_pll_pll3_t pll3;
    /**
     * Interface for pll pll4 data
     */
    dnx_data_if_pll_pll4_t pll4;
    /**
     * Interface for pll synce_pll data
     */
    dnx_data_if_pll_synce_pll_t synce_pll;
} dnx_data_if_pll_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_pll_t dnx_data_pll;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_PLL_H_*/
/* *INDENT-ON* */
