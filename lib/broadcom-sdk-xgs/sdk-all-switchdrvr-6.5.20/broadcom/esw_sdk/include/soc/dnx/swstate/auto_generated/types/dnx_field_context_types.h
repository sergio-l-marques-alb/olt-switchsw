/** \file dnx/swstate/auto_generated/types/dnx_field_context_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_FIELD_CONTEXT_TYPES_H__
#define __DNX_FIELD_CONTEXT_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <include/soc/dnx/dbal/dbal_structures.h>
#include <soc/dnxc/swstate/types/sw_state_string.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_types.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_key_types.h>
/*
 * ENUMs
 */

/**
 * Enum for the available compare modes for a context (passed on dnx_field_context_create)
 */
typedef enum {
    /**
     * No special mode, used for iteration
     */
    DNX_FIELD_CONTEXT_COMPARE_MODE_FIRST,
    /**
     * Compare is not used in this context (default)
     */
    DNX_FIELD_CONTEXT_COMPARE_MODE_NONE = DNX_FIELD_CONTEXT_COMPARE_MODE_FIRST,
    /**
     * Single Compare mode, one Initial Key is reserved for compare operations
     */
    DNX_FIELD_CONTEXT_COMPARE_MODE_SINGLE,
    /**
     * Double Compare mode, 2 Initial Keys are reserved for compare operations
     */
    DNX_FIELD_CONTEXT_COMPARE_MODE_DOUBLE,
    /**
     * Number of compare modes
     */
    DNX_FIELD_CONTEXT_COMPARE_MODE_NOF
} dnx_field_context_compare_mode_e;

/**
 * Enum for the available hash modes for a context (passed on dnx_field_context_create)
 */
typedef enum {
    /**
     * No special mode, used for iteration
     */
    DNX_FIELD_CONTEXT_HASH_MODE_FIRST = 0,
    /**
     * Hashing is disabled (default)
     */
    DNX_FIELD_CONTEXT_HASH_MODE_DISABLED = DNX_FIELD_CONTEXT_HASH_MODE_FIRST,
    /**
     * Hashing is enabled
     */
    DNX_FIELD_CONTEXT_HASH_MODE_ENABLED,
    /**
     * Number of hash modes
     */
    DNX_FIELD_CONTEXT_HASH_MODE_NOF
} dnx_field_context_hash_mode_e;

/**
 * Enum for the available state table modes for a context (passed on dnx_field_context_create)
 */
typedef enum {
    /**
     * No special mode, used for iteration
     */
    DNX_FIELD_CONTEXT_STATE_TABLE_MODE_FIRST,
    /**
     * State Table is disabled
     */
    DNX_FIELD_CONTEXT_STATE_TABLE_MODE_DISABLED = DNX_FIELD_CONTEXT_STATE_TABLE_MODE_FIRST,
    /**
     * State Table is enabled
     */
    DNX_FIELD_CONTEXT_STATE_TABLE_MODE_ENABLED,
    /**
     * Number of state table modes
     */
    DNX_FIELD_CONTEXT_STATE_TABLE_MODE_NOF
} dnx_field_context_state_table_mode_e;

/*
 * STRUCTs
 */

/**
 * Holds the needed information for key and template.
 */
typedef struct {
    /**
     * Key template
     */
    dnx_field_key_template_t key_template;
    /**
     * Key Ids
     */
    dnx_field_key_id_t key_id;
    /**
     * Indicate how to read the relevant qualifier from PBUS The information is aligned to the qualifier types array above Number of elements set by key_template.key_qual_map[].qual_type array
     */
    dnx_field_qual_attach_info_t attach_info[DNX_DATA_MAX_FIELD_GROUP_NOF_QUALS_PER_FG];
} dnx_field_context_key_info_t;

/**
 * Holds the needed information for a compare mode
 */
typedef struct {
    /**
     * mode for each compare operation NONE/SINGLE/DOUBLE
     */
    dnx_field_context_compare_mode_e mode;
    /**
     * Whether the qualifiers were set for the compare key
     */
    uint8 is_set;
    /**
     * Compare key information
     */
    dnx_field_context_key_info_t key_info[DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_COMPARE_KEYS_IN_COMPARE_MODE];
} dnx_field_context_compare_mode_info_t;

/**
 * Holds the needed information for compare feature in a context in iPMF1 stage
 */
typedef struct {
    /**
     * Compare pair 1 information (works on Keys F and G )
     */
    dnx_field_context_compare_mode_info_t pair_1;
    /**
     * Compare pair 2 information (works on Keys H and I )
     */
    dnx_field_context_compare_mode_info_t pair_2;
} dnx_field_context_compare_info_t;

/**
 * Holds the needed information for hash feature in a context in iPMF1 stage
 */
typedef struct {
    /**
     * Hashing mode (disabled/enabled)
     */
    dnx_field_context_hash_mode_e mode;
    /**
     * Whether the qualifiers were set for the hash key
     */
    uint8 is_set;
    /**
     * Hash key info
     */
    dnx_field_context_key_info_t key_info;
} dnx_field_context_hashing_info_t;

/**
 * Holds the needed information for state table feature in a context in iPMF1 stage
 */
typedef struct {
    /**
     * State Table mode (disabled/enabled)
     */
    dnx_field_context_state_table_mode_e mode;
    /**
     * Whether a state table field group was set
     */
    uint8 is_set;
} dnx_field_context_state_table_info_t;

/**
 * Holds the needed information for a single context in iPMF1 stage
 */
typedef struct {
    /**
     * Holds all information needed for compare (mode/keys allocated/etc...)
     */
    dnx_field_context_compare_info_t compare_info;
    /**
     * Specifies the hashing information (such as hash key template, key ids) of the context
     */
    dnx_field_context_hashing_info_t hashing_info;
} dnx_field_context_ipmf1_sw_info_t;

/**
 * Holds the needed information for a single context in iPMF2 stage
 */
typedef struct {
    /**
     * the context-Id which the current context is cascaded from
     */
    dnx_field_context_t cascaded_from;
} dnx_field_context_ipmf2_sw_info_t;

/**
 * Holds the context name string per stage.
 */
typedef struct {
    /**
     * Context name.
     */
    sw_state_string_t value[DBAL_MAX_STRING_LENGTH];
} dnx_field_context_name_t;

/**
 * Holds the needed information for each field context per stage in the system.
 */
typedef struct {
    /**
     * All needed information for each field context in iPMF1 stage
     */
    dnx_field_context_ipmf1_sw_info_t context_ipmf1_info;
    /**
     * All needed information for each field context in iPMF2 stage
     */
    dnx_field_context_ipmf2_sw_info_t context_ipmf2_info;
    /**
     * Specifies the state table information (such as state table key template, key ids) of the context
     */
    dnx_field_context_state_table_info_t state_table_info;
    /**
     * Context name per stage.
     */
    dnx_field_context_name_t name[DNX_FIELD_STAGE_NOF];
} dnx_field_context_sw_info_t;

/**
 * Holds the needed information for each field context per stage in the system.
 */
typedef struct {
    /**
     * Specifies the context info of each context in the system
     */
    dnx_field_context_sw_info_t* context_info;
} dnx_field_context_sw_t;


#endif /* __DNX_FIELD_CONTEXT_TYPES_H__ */
