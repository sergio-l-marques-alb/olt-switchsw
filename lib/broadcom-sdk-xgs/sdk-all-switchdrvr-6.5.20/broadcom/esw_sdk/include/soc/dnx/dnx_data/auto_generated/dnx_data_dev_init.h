/** \file dnx_data_dev_init.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_DEV_INIT_H_
/*{*/
#define _DNX_DATA_DEV_INIT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm_int/dnx/init/init_mem.h>
#include <soc/dnx/dnx_data/dnx_data_verify.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_dev_init.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_dev_init
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_dev_init_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - TIME:
 * time relevant for init
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule time table step_thresh
 * Table info:
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 */
typedef struct
{
    /**
     * Time threshold in microseconds. The default value was chosen because the majority of the steps are below it. For steps that are expected to be above the default, a specific threshold can be set
     */
    uint32 value;
} dnx_data_dev_init_time_step_thresh_t;

/**
 * \brief Holds values of submodule time table appl_step_thresh
 * Table info:
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 */
typedef struct
{
    /**
     * Time threshold in microseconds. The default value was chosen because the majority of the steps are below it. For steps that are expected to be above the default, a specific threshold can be set
     */
    uint32 value;
} dnx_data_dev_init_time_appl_step_thresh_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_time_feature_nof
} dnx_data_dev_init_time_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_time_feature_get_f) (
    int unit,
    dnx_data_dev_init_time_feature_e feature);

/**
 * \brief returns numeric data of analyze
 * Module - 'dev_init', Submodule - 'time', data - 'analyze'
 * whether to analyze init time
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     analyze - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_time_analyze_get_f) (
    int unit);

/**
 * \brief returns define data of init_total_thresh
 * Module - 'dev_init', Submodule - 'time', data - 'init_total_thresh'
 * Default time threshold (in microseconds) for the overall time that the BCM Init takes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     init_total_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_time_init_total_thresh_get_f) (
    int unit);

/**
 * \brief returns define data of appl_init_total_thresh
 * Module - 'dev_init', Submodule - 'time', data - 'appl_init_total_thresh'
 * Default time threshold (in microseconds) for the overall time that the APPL Init takes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     appl_init_total_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_time_appl_init_total_thresh_get_f) (
    int unit);

/**
 * \brief get table step_thresh entry 
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 * 
 * \param [in] unit - unit #
 * \param [in] step_id - IDs for the different steps and sub-steps of the Init.
 * 
 * \return
 *     step_thresh - returns the relevant entry values grouped in struct - see dnx_data_dev_init_time_step_thresh_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_time_step_thresh_t *(
    *dnx_data_dev_init_time_step_thresh_get_f) (
    int unit,
    int step_id);

/**
 * \brief get table appl_step_thresh entry 
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 * 
 * \param [in] unit - unit #
 * \param [in] step_id - IDs for the different steps and sub-steps of the Init.
 * 
 * \return
 *     appl_step_thresh - returns the relevant entry values grouped in struct - see dnx_data_dev_init_time_appl_step_thresh_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_time_appl_step_thresh_t *(
    *dnx_data_dev_init_time_appl_step_thresh_get_f) (
    int unit,
    int step_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - TIME:
 * {
 */
/**
 * \brief Interface for dev_init time data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_time_feature_get_f feature_get;
    /**
     * returns numeric data of analyze
     */
    dnx_data_dev_init_time_analyze_get_f analyze_get;
    /**
     * returns define data of init_total_thresh
     */
    dnx_data_dev_init_time_init_total_thresh_get_f init_total_thresh_get;
    /**
     * returns define data of appl_init_total_thresh
     */
    dnx_data_dev_init_time_appl_init_total_thresh_get_f appl_init_total_thresh_get;
    /**
     * get table step_thresh entry 
     */
    dnx_data_dev_init_time_step_thresh_get_f step_thresh_get;
    /**
     * get general info table about table (for example key size)step_thresh info
     */
    dnxc_data_table_info_get_f step_thresh_info_get;
    /**
     * get table appl_step_thresh entry 
     */
    dnx_data_dev_init_time_appl_step_thresh_get_f appl_step_thresh_get;
    /**
     * get general info table about table (for example key size)appl_step_thresh info
     */
    dnxc_data_table_info_get_f appl_step_thresh_info_get;
} dnx_data_if_dev_init_time_t;

/*
 * }
 */

/*
 * SUBMODULE  - MEM:
 * memory data relevant for init
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule mem table default
 * Table info:
 * default values for memories, any mem that is not mentioned will be set to zero
 */
typedef struct
{
    /**
     * memory
     */
    soc_mem_t mem;
    /**
     * default value will be set according to this mode
     */
    dnx_init_mem_default_mode_e mode;
    /**
     * callback to get the default, used in custom modes
     */
    dnx_init_mem_default_get_f default_get_cb;
    /**
     * If field defined - will set just the specified field (all the reset will be set to zero). not relevant for custom modes
     */
    soc_field_t field;
} dnx_data_dev_init_mem_default_t;

/**
 * \brief Holds values of submodule mem table emul_ext_init_path
 * Table info:
 * path for emulation external memories init script
 */
typedef struct
{
    /**
     * Full path for external initalization script, valid only in case emul_external_init is set
     */
    char *full_path;
} dnx_data_dev_init_mem_emul_ext_init_path_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_mem_feature_nof
} dnx_data_dev_init_mem_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_mem_feature_get_f) (
    int unit,
    dnx_data_dev_init_mem_feature_e feature);

/**
 * \brief returns numeric data of force_zeros
 * Module - 'dev_init', Submodule - 'mem', data - 'force_zeros'
 * if true will force zeroing memories in pcid and emulation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     force_zeros - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_mem_force_zeros_get_f) (
    int unit);

/**
 * \brief returns numeric data of reset_mode
 * Module - 'dev_init', Submodule - 'mem', data - 'reset_mode'
 * method to reset the memories which are not listed in table 'default'. See enum 'dnx_init_mem_reset_mode_e'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     reset_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_mem_reset_mode_get_f) (
    int unit);

/**
 * \brief returns numeric data of defaults_verify
 * Module - 'dev_init', Submodule - 'mem', data - 'defaults_verify'
 * if true will test memory defaults are as exepected
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     defaults_verify - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_mem_defaults_verify_get_f) (
    int unit);

/**
 * \brief returns numeric data of emul_ext_init
 * Module - 'dev_init', Submodule - 'mem', data - 'emul_ext_init'
 * if true tables will be init using external script (see emul_ext_init_path table for script path)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     emul_ext_init - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_mem_emul_ext_init_get_f) (
    int unit);

/**
 * \brief get table default entry 
 * default values for memories, any mem that is not mentioned will be set to zero
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     default - returns the relevant entry values grouped in struct - see dnx_data_dev_init_mem_default_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_mem_default_t *(
    *dnx_data_dev_init_mem_default_get_f) (
    int unit,
    int index);

/**
 * \brief get table emul_ext_init_path entry 
 * path for emulation external memories init script
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     emul_ext_init_path - returns the relevant entry values grouped in struct - see dnx_data_dev_init_mem_emul_ext_init_path_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_mem_emul_ext_init_path_t *(
    *dnx_data_dev_init_mem_emul_ext_init_path_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - MEM:
 * {
 */
/**
 * \brief Interface for dev_init mem data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_mem_feature_get_f feature_get;
    /**
     * returns numeric data of force_zeros
     */
    dnx_data_dev_init_mem_force_zeros_get_f force_zeros_get;
    /**
     * returns numeric data of reset_mode
     */
    dnx_data_dev_init_mem_reset_mode_get_f reset_mode_get;
    /**
     * returns numeric data of defaults_verify
     */
    dnx_data_dev_init_mem_defaults_verify_get_f defaults_verify_get;
    /**
     * returns numeric data of emul_ext_init
     */
    dnx_data_dev_init_mem_emul_ext_init_get_f emul_ext_init_get;
    /**
     * get table default entry 
     */
    dnx_data_dev_init_mem_default_get_f default_get;
    /**
     * get general info table about table (for example key size)default info
     */
    dnxc_data_table_info_get_f default_info_get;
    /**
     * get table emul_ext_init_path entry 
     */
    dnx_data_dev_init_mem_emul_ext_init_path_get_f emul_ext_init_path_get;
    /**
     * get general info table about table (for example key size)emul_ext_init_path info
     */
    dnxc_data_table_info_get_f emul_ext_init_path_info_get;
} dnx_data_if_dev_init_mem_t;

/*
 * }
 */

/*
 * SUBMODULE  - PROPERTIES:
 * used to store information related to soc properties
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule properties table unsupported
 * Table info:
 * unsupported soc properties
 */
typedef struct
{
    /**
     * soc property name
     */
    char *property;
    
    char *suffix;
    /**
     * max number of index to check in case using suffix_num method
     */
    int num_max;
    /**
     * 1 if the soc property might be read per port
     */
    int per_port;
    /**
     * detailed error message with instructions what to do instead
     */
    char *err_msg;
} dnx_data_dev_init_properties_unsupported_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_properties_feature_nof
} dnx_data_dev_init_properties_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_properties_feature_get_f) (
    int unit,
    dnx_data_dev_init_properties_feature_e feature);

/**
 * \brief returns define data of name_max
 * Module - 'dev_init', Submodule - 'properties', data - 'name_max'
 * max length of soc property name
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     name_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_properties_name_max_get_f) (
    int unit);

/**
 * \brief get table unsupported entry 
 * unsupported soc properties
 * 
 * \param [in] unit - unit #
 * \param [in] index - running index
 * 
 * \return
 *     unsupported - returns the relevant entry values grouped in struct - see dnx_data_dev_init_properties_unsupported_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_properties_unsupported_t *(
    *dnx_data_dev_init_properties_unsupported_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - PROPERTIES:
 * {
 */
/**
 * \brief Interface for dev_init properties data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_properties_feature_get_f feature_get;
    /**
     * returns define data of name_max
     */
    dnx_data_dev_init_properties_name_max_get_f name_max_get;
    /**
     * get table unsupported entry 
     */
    dnx_data_dev_init_properties_unsupported_get_f unsupported_get;
    /**
     * get general info table about table (for example key size)unsupported info
     */
    dnxc_data_table_info_get_f unsupported_info_get;
} dnx_data_if_dev_init_properties_t;

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * general values for device init
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * If set, indicates data path HW needs to be set
     */
    dnx_data_dev_init_general_data_path_hw,
    /**
     * If set, indicates CRC bytes are removed for ERPP and ETPP parser.
     */
    dnx_data_dev_init_general_remove_crc_bytes,
    /**
     * If set, indicates that in ERPP/ETPPA_UTILITY_REGS is present FTMH_PACKET_SIZE_REMOVE_CRC
     */
    dnx_data_dev_init_general_remove_crc_bytes_capability,
    /**
     * If set, indicates that fabric CRC size will be compensated for ERPP statistics
     */
    dnx_data_dev_init_general_erpp_compensate_crc_size,
    /**
     * If set, indicates that fabric CRC size will be compensated with compensation registers for ETPP statistics
     */
    dnx_data_dev_init_general_etpp_compensate_crc_size,
    /**
     * If set, tail editing is enabled
     */
    dnx_data_dev_init_general_tail_editing_enable,
    /**
     * If set, append tail editing is enabled
     */
    dnx_data_dev_init_general_tail_editing_append_enable,
    /**
     * If set, truncate tail editing is enabled
     */
    dnx_data_dev_init_general_tail_editing_truncate_enable,
    /**
     * packet size compensationis valid in term block
     */
    dnx_data_dev_init_general_packet_size_compensation_term,
    /**
     * current packet size compensationis valid in term block
     */
    dnx_data_dev_init_general_current_packet_size_compensation_term,
    /**
     * ipv4/6 and l4 filters in ERPP are not enabled/disabled independently
     */
    dnx_data_dev_init_general_erpp_filters_non_separate_enablers,
    /**
     * Enable stamping FTMH bypass
     */
    dnx_data_dev_init_general_etppa_bypass_stamp_ftmh_enable,
    /**
     * Enable configuration of L4 protocol fields
     */
    dnx_data_dev_init_general_l4_protocol_fields_config_enable,
    /**
     * Enable configuration DA Type map in FLP
     */
    dnx_data_dev_init_general_da_type_map_enable,
    /**
     * ecologic feature is supported
     */
    dnx_data_dev_init_general_ecologic_support,
    /**
     * Enable configuration of context enablers
     */
    dnx_data_dev_init_general_context_selection_index_valid,
    /**
     * Indicate whether network headers should be terminated
     */
    dnx_data_dev_init_general_network_header_termination,
    /**
     * Set UDH header size in J_MODE_NETWORK_OFFSET_FOR_SYSTEM_HEADERS register for inter-op mode - J2P only
     */
    dnx_data_dev_init_general_network_offset_for_system_headers_valid,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_general_feature_nof
} dnx_data_dev_init_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_general_feature_get_f) (
    int unit,
    dnx_data_dev_init_general_feature_e feature);

/**
 * \brief returns numeric data of access_only
 * Module - 'dev_init', Submodule - 'general', data - 'access_only'
 * boot with access only
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     access_only - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_general_access_only_get_f) (
    int unit);

/**
 * \brief returns numeric data of heat_up
 * Module - 'dev_init', Submodule - 'general', data - 'heat_up'
 * boot for heat-up
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     heat_up - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_general_heat_up_get_f) (
    int unit);

/**
 * \brief returns numeric data of flexe_core_drv_select
 * Module - 'dev_init', Submodule - 'general', data - 'flexe_core_drv_select'
 * selects which FlexE core driver to use, 0: debug; 1: standard
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flexe_core_drv_select - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_general_flexe_core_drv_select_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - GENERAL:
 * {
 */
/**
 * \brief Interface for dev_init general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_general_feature_get_f feature_get;
    /**
     * returns numeric data of access_only
     */
    dnx_data_dev_init_general_access_only_get_f access_only_get;
    /**
     * returns numeric data of heat_up
     */
    dnx_data_dev_init_general_heat_up_get_f heat_up_get;
    /**
     * returns numeric data of flexe_core_drv_select
     */
    dnx_data_dev_init_general_flexe_core_drv_select_get_f flexe_core_drv_select_get;
} dnx_data_if_dev_init_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - CONTEXT:
 * general values for context selection init
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Enabled for devices supporting context id to context profile mapping
     */
    dnx_data_dev_init_context_context_selection_profile,
    /**
     * Enabled for devices having oam_sub_type as part of the context selection
     */
    dnx_data_dev_init_context_oam_sub_type_in_context_selection,
    /**
     * Enabled for devices having int_profile as part of the context selection
     */
    dnx_data_dev_init_context_int_profile_in_context_selection,

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_context_feature_nof
} dnx_data_dev_init_context_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_context_feature_get_f) (
    int unit,
    dnx_data_dev_init_context_feature_e feature);

/**
 * \brief returns define data of forwarding_context_selection_mask_offset
 * Module - 'dev_init', Submodule - 'context', data - 'forwarding_context_selection_mask_offset'
 * Mask fields offset for Forwarding context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forwarding_context_selection_mask_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_context_forwarding_context_selection_mask_offset_get_f) (
    int unit);

/**
 * \brief returns define data of forwarding_context_selection_result_offset
 * Module - 'dev_init', Submodule - 'context', data - 'forwarding_context_selection_result_offset'
 * Result fields offset for Forwarding context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forwarding_context_selection_result_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_context_forwarding_context_selection_result_offset_get_f) (
    int unit);

/**
 * \brief returns define data of termination_context_selection_mask_offset
 * Module - 'dev_init', Submodule - 'context', data - 'termination_context_selection_mask_offset'
 * Mask fields offset for Termination context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     termination_context_selection_mask_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_context_termination_context_selection_mask_offset_get_f) (
    int unit);

/**
 * \brief returns define data of termination_context_selection_result_offset
 * Module - 'dev_init', Submodule - 'context', data - 'termination_context_selection_result_offset'
 * Result fields offset for Termination context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     termination_context_selection_result_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_context_termination_context_selection_result_offset_get_f) (
    int unit);

/**
 * \brief returns define data of trap_context_selection_mask_offset
 * Module - 'dev_init', Submodule - 'context', data - 'trap_context_selection_mask_offset'
 * Mask fields offset for Trap context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trap_context_selection_mask_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_context_trap_context_selection_mask_offset_get_f) (
    int unit);

/**
 * \brief returns define data of trap_context_selection_result_offset
 * Module - 'dev_init', Submodule - 'context', data - 'trap_context_selection_result_offset'
 * Result fields offset for Trap context selection TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trap_context_selection_result_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_context_trap_context_selection_result_offset_get_f) (
    int unit);

/**
 * \brief returns define data of fwd_reycle_priority_size
 * Module - 'dev_init', Submodule - 'context', data - 'fwd_reycle_priority_size'
 * Forward Recycle priority size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fwd_reycle_priority_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_context_fwd_reycle_priority_size_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - CONTEXT:
 * {
 */
/**
 * \brief Interface for dev_init context data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_context_feature_get_f feature_get;
    /**
     * returns define data of forwarding_context_selection_mask_offset
     */
    dnx_data_dev_init_context_forwarding_context_selection_mask_offset_get_f forwarding_context_selection_mask_offset_get;
    /**
     * returns define data of forwarding_context_selection_result_offset
     */
    dnx_data_dev_init_context_forwarding_context_selection_result_offset_get_f forwarding_context_selection_result_offset_get;
    /**
     * returns define data of termination_context_selection_mask_offset
     */
    dnx_data_dev_init_context_termination_context_selection_mask_offset_get_f termination_context_selection_mask_offset_get;
    /**
     * returns define data of termination_context_selection_result_offset
     */
    dnx_data_dev_init_context_termination_context_selection_result_offset_get_f termination_context_selection_result_offset_get;
    /**
     * returns define data of trap_context_selection_mask_offset
     */
    dnx_data_dev_init_context_trap_context_selection_mask_offset_get_f trap_context_selection_mask_offset_get;
    /**
     * returns define data of trap_context_selection_result_offset
     */
    dnx_data_dev_init_context_trap_context_selection_result_offset_get_f trap_context_selection_result_offset_get;
    /**
     * returns define data of fwd_reycle_priority_size
     */
    dnx_data_dev_init_context_fwd_reycle_priority_size_get_f fwd_reycle_priority_size_get;
} dnx_data_if_dev_init_context_t;

/*
 * }
 */

/*
 * SUBMODULE  - HA:
 * values for sw state and high availability init
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ha table stable_filename
 * Table info:
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 */
typedef struct
{
    /**
     * stable filename
     */
    char *val;
} dnx_data_dev_init_ha_stable_filename_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_ha_feature_nof
} dnx_data_dev_init_ha_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_ha_feature_get_f) (
    int unit,
    dnx_data_dev_init_ha_feature_e feature);

/**
 * \brief returns numeric data of warmboot_support
 * Module - 'dev_init', Submodule - 'ha', data - 'warmboot_support'
 * specify if unit should support wb
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     warmboot_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_ha_warmboot_support_get_f) (
    int unit);

/**
 * \brief returns numeric data of sw_state_max_size
 * Module - 'dev_init', Submodule - 'ha', data - 'sw_state_max_size'
 * specify the amount of memory (in bytes) preallocated for sw state
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sw_state_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_ha_sw_state_max_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of stable_location
 * Module - 'dev_init', Submodule - 'ha', data - 'stable_location'
 * Specify the stable cache option for Warm Boot operations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_location - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_ha_stable_location_get_f) (
    int unit);

/**
 * \brief returns numeric data of stable_size
 * Module - 'dev_init', Submodule - 'ha', data - 'stable_size'
 * Specify the stable cache size in bytes used for Warm boot operations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_ha_stable_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of error_recovery_support
 * Module - 'dev_init', Submodule - 'ha', data - 'error_recovery_support'
 * Enable/disable Error Recovery support
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     error_recovery_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_ha_error_recovery_support_get_f) (
    int unit);

/**
 * \brief get table stable_filename entry 
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_filename - returns the relevant entry values grouped in struct - see dnx_data_dev_init_ha_stable_filename_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_ha_stable_filename_t *(
    *dnx_data_dev_init_ha_stable_filename_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - HA:
 * {
 */
/**
 * \brief Interface for dev_init ha data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_ha_feature_get_f feature_get;
    /**
     * returns numeric data of warmboot_support
     */
    dnx_data_dev_init_ha_warmboot_support_get_f warmboot_support_get;
    /**
     * returns numeric data of sw_state_max_size
     */
    dnx_data_dev_init_ha_sw_state_max_size_get_f sw_state_max_size_get;
    /**
     * returns numeric data of stable_location
     */
    dnx_data_dev_init_ha_stable_location_get_f stable_location_get;
    /**
     * returns numeric data of stable_size
     */
    dnx_data_dev_init_ha_stable_size_get_f stable_size_get;
    /**
     * returns numeric data of error_recovery_support
     */
    dnx_data_dev_init_ha_error_recovery_support_get_f error_recovery_support_get;
    /**
     * get table stable_filename entry 
     */
    dnx_data_dev_init_ha_stable_filename_get_f stable_filename_get;
    /**
     * get general info table about table (for example key size)stable_filename info
     */
    dnxc_data_table_info_get_f stable_filename_info_get;
} dnx_data_if_dev_init_ha_t;

/*
 * }
 */

/*
 * SUBMODULE  - SHADOW:
 * shadow memory for init
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule shadow table uncacheable_mem
 * Table info:
 * uncache memory
 */
typedef struct
{
    /**
     * memory
     */
    soc_mem_t mem;
} dnx_data_dev_init_shadow_uncacheable_mem_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_shadow_feature_nof
} dnx_data_dev_init_shadow_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_shadow_feature_get_f) (
    int unit,
    dnx_data_dev_init_shadow_feature_e feature);

/**
 * \brief returns numeric data of cache_enable_all
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_all'
 * if true shadow all cacheable memory
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_all - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_enable_all_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_enable_ecc
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_ecc'
 * if true shadow all cacheable memory which contain ecc field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_ecc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_enable_ecc_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_enable_parity
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_parity'
 * if true shadow all cacheable memory which contain parity field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_parity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_enable_parity_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_enable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_specific'
 * if true, some specific memory be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_enable_specific_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_disable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_disable_specific'
 * if true, some specific memory won't be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_disable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_shadow_cache_disable_specific_get_f) (
    int unit);

/**
 * \brief get table uncacheable_mem entry 
 * uncache memory
 * 
 * \param [in] unit - unit #
 * \param [in] index - uncacheable memory index
 * 
 * \return
 *     uncacheable_mem - returns the relevant entry values grouped in struct - see dnx_data_dev_init_shadow_uncacheable_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_dev_init_shadow_uncacheable_mem_t *(
    *dnx_data_dev_init_shadow_uncacheable_mem_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - SHADOW:
 * {
 */
/**
 * \brief Interface for dev_init shadow data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_shadow_feature_get_f feature_get;
    /**
     * returns numeric data of cache_enable_all
     */
    dnx_data_dev_init_shadow_cache_enable_all_get_f cache_enable_all_get;
    /**
     * returns numeric data of cache_enable_ecc
     */
    dnx_data_dev_init_shadow_cache_enable_ecc_get_f cache_enable_ecc_get;
    /**
     * returns numeric data of cache_enable_parity
     */
    dnx_data_dev_init_shadow_cache_enable_parity_get_f cache_enable_parity_get;
    /**
     * returns numeric data of cache_enable_specific
     */
    dnx_data_dev_init_shadow_cache_enable_specific_get_f cache_enable_specific_get;
    /**
     * returns numeric data of cache_disable_specific
     */
    dnx_data_dev_init_shadow_cache_disable_specific_get_f cache_disable_specific_get;
    /**
     * get table uncacheable_mem entry 
     */
    dnx_data_dev_init_shadow_uncacheable_mem_get_f uncacheable_mem_get;
    /**
     * get general info table about table (for example key size)uncacheable_mem info
     */
    dnxc_data_table_info_get_f uncacheable_mem_info_get;
} dnx_data_if_dev_init_shadow_t;

/*
 * }
 */

/*
 * SUBMODULE  - CMC:
 * cmc information in CMICx
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_dev_init_cmc_feature_nof
} dnx_data_dev_init_cmc_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_dev_init_cmc_feature_get_f) (
    int unit,
    dnx_data_dev_init_cmc_feature_e feature);

/**
 * \brief returns define data of cmc_num
 * Module - 'dev_init', Submodule - 'cmc', data - 'cmc_num'
 * Number of CMC in CMICx
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmc_num - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_cmc_cmc_num_get_f) (
    int unit);

/**
 * \brief returns define data of num_cpu_cosq
 * Module - 'dev_init', Submodule - 'cmc', data - 'num_cpu_cosq'
 * Number of classes-of-service for RX DMA
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_cpu_cosq - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_cmc_num_cpu_cosq_get_f) (
    int unit);

/**
 * \brief returns numeric data of cmc_pci
 * Module - 'dev_init', Submodule - 'cmc', data - 'cmc_pci'
 * CMC in CMICx used by the PCI Host
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmc_pci - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_cmc_cmc_pci_get_f) (
    int unit);

/**
 * \brief returns numeric data of pci_cmc_num
 * Module - 'dev_init', Submodule - 'cmc', data - 'pci_cmc_num'
 * Number of CMCs used by the PCI Host
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pci_cmc_num - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_cmc_pci_cmc_num_get_f) (
    int unit);

/**
 * \brief returns numeric data of cmc_uc0
 * Module - 'dev_init', Submodule - 'cmc', data - 'cmc_uc0'
 * CMC in CMICx used by the micro controller 0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmc_uc0 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_cmc_cmc_uc0_get_f) (
    int unit);

/**
 * \brief returns numeric data of cmc_uc1
 * Module - 'dev_init', Submodule - 'cmc', data - 'cmc_uc1'
 * CMC in CMICx used by the micro controller 0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cmc_uc1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_cmc_cmc_uc1_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_queues_pci
 * Module - 'dev_init', Submodule - 'cmc', data - 'num_queues_pci'
 * Number of DMA COS for PCI Host
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_queues_pci - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_cmc_num_queues_pci_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_queues_uc0
 * Module - 'dev_init', Submodule - 'cmc', data - 'num_queues_uc0'
 * Number of DMA COS for micro controller 0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_queues_uc0 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_cmc_num_queues_uc0_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_queues_uc1
 * Module - 'dev_init', Submodule - 'cmc', data - 'num_queues_uc1'
 * Number of DMA COS for micro controller 1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_queues_uc1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_dev_init_cmc_num_queues_uc1_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEV_INIT - CMC:
 * {
 */
/**
 * \brief Interface for dev_init cmc data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_dev_init_cmc_feature_get_f feature_get;
    /**
     * returns define data of cmc_num
     */
    dnx_data_dev_init_cmc_cmc_num_get_f cmc_num_get;
    /**
     * returns define data of num_cpu_cosq
     */
    dnx_data_dev_init_cmc_num_cpu_cosq_get_f num_cpu_cosq_get;
    /**
     * returns numeric data of cmc_pci
     */
    dnx_data_dev_init_cmc_cmc_pci_get_f cmc_pci_get;
    /**
     * returns numeric data of pci_cmc_num
     */
    dnx_data_dev_init_cmc_pci_cmc_num_get_f pci_cmc_num_get;
    /**
     * returns numeric data of cmc_uc0
     */
    dnx_data_dev_init_cmc_cmc_uc0_get_f cmc_uc0_get;
    /**
     * returns numeric data of cmc_uc1
     */
    dnx_data_dev_init_cmc_cmc_uc1_get_f cmc_uc1_get;
    /**
     * returns numeric data of num_queues_pci
     */
    dnx_data_dev_init_cmc_num_queues_pci_get_f num_queues_pci_get;
    /**
     * returns numeric data of num_queues_uc0
     */
    dnx_data_dev_init_cmc_num_queues_uc0_get_f num_queues_uc0_get;
    /**
     * returns numeric data of num_queues_uc1
     */
    dnx_data_dev_init_cmc_num_queues_uc1_get_f num_queues_uc1_get;
} dnx_data_if_dev_init_cmc_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_DEV_INIT:
 * {
 */
/**
 * \brief Interface for dev_init data
 */
typedef struct
{
    /**
     * Interface for dev_init time data
     */
    dnx_data_if_dev_init_time_t time;
    /**
     * Interface for dev_init mem data
     */
    dnx_data_if_dev_init_mem_t mem;
    /**
     * Interface for dev_init properties data
     */
    dnx_data_if_dev_init_properties_t properties;
    /**
     * Interface for dev_init general data
     */
    dnx_data_if_dev_init_general_t general;
    /**
     * Interface for dev_init context data
     */
    dnx_data_if_dev_init_context_t context;
    /**
     * Interface for dev_init ha data
     */
    dnx_data_if_dev_init_ha_t ha;
    /**
     * Interface for dev_init shadow data
     */
    dnx_data_if_dev_init_shadow_t shadow;
    /**
     * Interface for dev_init cmc data
     */
    dnx_data_if_dev_init_cmc_t cmc;
} dnx_data_if_dev_init_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_dev_init_t dnx_data_dev_init;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_DEV_INIT_H_*/
/* *INDENT-ON* */
