/** \file dnx_data_bier.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_BIER_H_
/*{*/
#define _DNX_DATA_BIER_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_bier.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_bier
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_bier_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - PARAMS:
 * bier parameters
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Is bier supported
     */
    dnx_data_bier_params_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_bier_params_feature_nof
} dnx_data_bier_params_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_bier_params_feature_get_f) (
    int unit,
    dnx_data_bier_params_feature_e feature);

/**
 * \brief returns define data of bitstring_size
 * Module - 'bier', Submodule - 'params', data - 'bitstring_size'
 * bier bitstring size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bitstring_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bier_params_bitstring_size_get_f) (
    int unit);

/**
 * \brief returns define data of bfr_entry_size
 * Module - 'bier', Submodule - 'params', data - 'bfr_entry_size'
 * the size of bfr entry in mcdb
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bfr_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bier_params_bfr_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of bank_entries
 * Module - 'bier', Submodule - 'params', data - 'bank_entries'
 * the number of bfr entries at a bank
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bank_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bier_params_bank_entries_get_f) (
    int unit);

/**
 * \brief returns define data of bundle_nof_banks
 * Module - 'bier', Submodule - 'params', data - 'bundle_nof_banks'
 * the number of banks in a bundle
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bundle_nof_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bier_params_bundle_nof_banks_get_f) (
    int unit);

/**
 * \brief returns define data of bundle_nof_banks_net
 * Module - 'bier', Submodule - 'params', data - 'bundle_nof_banks_net'
 * the number of banks in a bundle which reffered with BFR-id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bundle_nof_banks_net - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bier_params_bundle_nof_banks_net_get_f) (
    int unit);

/**
 * \brief returns define data of egress_only
 * Module - 'bier', Submodule - 'params', data - 'egress_only'
 * no ingress replication in the system
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_only - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bier_params_egress_only_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egr_table_copies
 * Module - 'bier', Submodule - 'params', data - 'nof_egr_table_copies'
 * the number of egress table copies
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egr_table_copies - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bier_params_nof_egr_table_copies_get_f) (
    int unit);

/**
 * \brief returns define data of ingress_bfr_pos_msb_start
 * Module - 'bier', Submodule - 'params', data - 'ingress_bfr_pos_msb_start'
 * ingress bfr table start from msb
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ingress_bfr_pos_msb_start - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bier_params_ingress_bfr_pos_msb_start_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_bfr_entries
 * Module - 'bier', Submodule - 'params', data - 'nof_bfr_entries'
 * bier supported bfr size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bfr_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_bier_params_nof_bfr_entries_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_BIER - PARAMS:
 * {
 */
/**
 * \brief Interface for bier params data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_bier_params_feature_get_f feature_get;
    /**
     * returns define data of bitstring_size
     */
    dnx_data_bier_params_bitstring_size_get_f bitstring_size_get;
    /**
     * returns define data of bfr_entry_size
     */
    dnx_data_bier_params_bfr_entry_size_get_f bfr_entry_size_get;
    /**
     * returns define data of bank_entries
     */
    dnx_data_bier_params_bank_entries_get_f bank_entries_get;
    /**
     * returns define data of bundle_nof_banks
     */
    dnx_data_bier_params_bundle_nof_banks_get_f bundle_nof_banks_get;
    /**
     * returns define data of bundle_nof_banks_net
     */
    dnx_data_bier_params_bundle_nof_banks_net_get_f bundle_nof_banks_net_get;
    /**
     * returns define data of egress_only
     */
    dnx_data_bier_params_egress_only_get_f egress_only_get;
    /**
     * returns define data of nof_egr_table_copies
     */
    dnx_data_bier_params_nof_egr_table_copies_get_f nof_egr_table_copies_get;
    /**
     * returns define data of ingress_bfr_pos_msb_start
     */
    dnx_data_bier_params_ingress_bfr_pos_msb_start_get_f ingress_bfr_pos_msb_start_get;
    /**
     * returns numeric data of nof_bfr_entries
     */
    dnx_data_bier_params_nof_bfr_entries_get_f nof_bfr_entries_get;
} dnx_data_if_bier_params_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_BIER:
 * {
 */
/**
 * \brief Interface for bier data
 */
typedef struct
{
    /**
     * Interface for bier params data
     */
    dnx_data_if_bier_params_t params;
} dnx_data_if_bier_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_bier_t dnx_data_bier;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_BIER_H_*/
/* *INDENT-ON* */
