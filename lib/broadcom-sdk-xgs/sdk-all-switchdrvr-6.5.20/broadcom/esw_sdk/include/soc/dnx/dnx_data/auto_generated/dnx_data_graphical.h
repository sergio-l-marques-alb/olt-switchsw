/** \file dnx_data_graphical.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_GRAPHICAL_H_
/*{*/
#define _DNX_DATA_GRAPHICAL_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <appl/diag/dnx/diag_dnx_diag.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_graphical.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_graphical
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_graphical_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - DIAG:
 * diag counter graphical.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule diag table blocks_left
 * Table info:
 * graphical table blocks information on left side(in)
 */
typedef struct
{
    /**
     * diag display block
     */
    dnx_diag_graphical_block block;
    /**
     * block name
     */
    char *name;
    /**
     * block is valid
     */
    uint32 valid;
    /**
     * support multi-cores
     */
    uint32 per_core;
} dnx_data_graphical_diag_blocks_left_t;

/**
 * \brief Holds values of submodule diag table blocks_right
 * Table info:
 * graphical table blocks information on right side(out)
 */
typedef struct
{
    /**
     * diag display block
     */
    dnx_diag_graphical_block block;
    /**
     * block name
     */
    char *name;
    /**
     * block is valid
     */
    uint32 valid;
    /**
     * support multi-cores
     */
    uint32 per_core;
} dnx_data_graphical_diag_blocks_right_t;

/**
 * \brief Holds values of submodule diag table counters
 * Table info:
 * counter information
 */
typedef struct
{
    /**
     * counter name
     */
    char *name;
    /**
     * abbreviation name
     */
    char *short_name;
    /**
     * register name for counter
     */
    int regs[DNX_DIAG_COUNTER_REG_NOF_REGS];
    /**
     * field name for counter
     */
    int flds[DNX_DIAG_COUNTER_REG_NOF_REGS];
    /**
     * overflow field name for counter
     */
    int overflow_field[DNX_DIAG_COUNTER_REG_NOF_REGS];
    /**
     * attribution index
     */
    uint32 arr_i;
    /**
     * counter field number
     */
    uint32 fld_num;
    /**
     * counter description
     */
    char *doc;
    /**
     * error information need mask red
     */
    uint32 is_err;
} dnx_data_graphical_diag_counters_t;

/**
 * \brief Holds values of submodule diag table drop_reason
 * Table info:
 * drop reason information
 */
typedef struct
{
    /**
     * register name for counter
     */
    soc_reg_t regs;
    /**
     * field name for counter
     */
    soc_field_t flds;
    /**
     * callback to get drop reason
     */
    dnx_dropped_reason_get_f drop_reason_cb;
} dnx_data_graphical_diag_drop_reason_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_graphical_diag_feature_nof
} dnx_data_graphical_diag_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_graphical_diag_feature_get_f) (
    int unit,
    dnx_data_graphical_diag_feature_e feature);

/**
 * \brief returns define data of num_of_rows
 * Module - 'graphical', Submodule - 'diag', data - 'num_of_rows'
 * rows of diag cou graphic command
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_of_rows - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_graphical_diag_num_of_rows_get_f) (
    int unit);

/**
 * \brief returns define data of num_of_index
 * Module - 'graphical', Submodule - 'diag', data - 'num_of_index'
 * nunber of index per block
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_of_index - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_graphical_diag_num_of_index_get_f) (
    int unit);

/**
 * \brief returns define data of num_of_block_entries
 * Module - 'graphical', Submodule - 'diag', data - 'num_of_block_entries'
 * number of entries per block
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_of_block_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_graphical_diag_num_of_block_entries_get_f) (
    int unit);

/**
 * \brief get table blocks_left entry 
 * graphical table blocks information on left side(in)
 * 
 * \param [in] unit - unit #
 * \param [in] row - graphic display row
 * \param [in] index - index
 * 
 * \return
 *     blocks_left - returns the relevant entry values grouped in struct - see dnx_data_graphical_diag_blocks_left_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_graphical_diag_blocks_left_t *(
    *dnx_data_graphical_diag_blocks_left_get_f) (
    int unit,
    int row,
    int index);

/**
 * \brief get table blocks_right entry 
 * graphical table blocks information on right side(out)
 * 
 * \param [in] unit - unit #
 * \param [in] row - graphic display row
 * \param [in] index - index
 * 
 * \return
 *     blocks_right - returns the relevant entry values grouped in struct - see dnx_data_graphical_diag_blocks_right_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_graphical_diag_blocks_right_t *(
    *dnx_data_graphical_diag_blocks_right_get_f) (
    int unit,
    int row,
    int index);

/**
 * \brief get table counters entry 
 * counter information
 * 
 * \param [in] unit - unit #
 * \param [in] block - block information
 * \param [in] index - index in block
 * 
 * \return
 *     counters - returns the relevant entry values grouped in struct - see dnx_data_graphical_diag_counters_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_graphical_diag_counters_t *(
    *dnx_data_graphical_diag_counters_get_f) (
    int unit,
    int block,
    int index);

/**
 * \brief get table drop_reason entry 
 * drop reason information
 * 
 * \param [in] unit - unit #
 * \param [in] index - index in block
 * 
 * \return
 *     drop_reason - returns the relevant entry values grouped in struct - see dnx_data_graphical_diag_drop_reason_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_graphical_diag_drop_reason_t *(
    *dnx_data_graphical_diag_drop_reason_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_GRAPHICAL - DIAG:
 * {
 */
/**
 * \brief Interface for graphical diag data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_graphical_diag_feature_get_f feature_get;
    /**
     * returns define data of num_of_rows
     */
    dnx_data_graphical_diag_num_of_rows_get_f num_of_rows_get;
    /**
     * returns define data of num_of_index
     */
    dnx_data_graphical_diag_num_of_index_get_f num_of_index_get;
    /**
     * returns define data of num_of_block_entries
     */
    dnx_data_graphical_diag_num_of_block_entries_get_f num_of_block_entries_get;
    /**
     * get table blocks_left entry 
     */
    dnx_data_graphical_diag_blocks_left_get_f blocks_left_get;
    /**
     * get general info table about table (for example key size)blocks_left info
     */
    dnxc_data_table_info_get_f blocks_left_info_get;
    /**
     * get table blocks_right entry 
     */
    dnx_data_graphical_diag_blocks_right_get_f blocks_right_get;
    /**
     * get general info table about table (for example key size)blocks_right info
     */
    dnxc_data_table_info_get_f blocks_right_info_get;
    /**
     * get table counters entry 
     */
    dnx_data_graphical_diag_counters_get_f counters_get;
    /**
     * get general info table about table (for example key size)counters info
     */
    dnxc_data_table_info_get_f counters_info_get;
    /**
     * get table drop_reason entry 
     */
    dnx_data_graphical_diag_drop_reason_get_f drop_reason_get;
    /**
     * get general info table about table (for example key size)drop_reason info
     */
    dnxc_data_table_info_get_f drop_reason_info_get;
} dnx_data_if_graphical_diag_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_GRAPHICAL:
 * {
 */
/**
 * \brief Interface for graphical data
 */
typedef struct
{
    /**
     * Interface for graphical diag data
     */
    dnx_data_if_graphical_diag_t diag;
} dnx_data_if_graphical_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_graphical_t dnx_data_graphical;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_GRAPHICAL_H_*/
/* *INDENT-ON* */
