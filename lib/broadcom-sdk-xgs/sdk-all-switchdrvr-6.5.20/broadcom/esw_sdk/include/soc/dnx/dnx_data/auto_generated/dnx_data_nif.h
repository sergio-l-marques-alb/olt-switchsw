/** \file dnx_data_nif.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_NIF_H_
/*{*/
#define _DNX_DATA_NIF_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/port.h>
#include <soc/portmod/portmod.h>
#include <soc/dnxc/dnxc_port.h>
#include <bcm_int/dnx/port/imb/imb.h>
#include <bcm/switch.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_nif.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_nif
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_nif_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GLOBAL:
 * global nif proprties and data
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule global table pll_phys
 * Table info:
 * phys controlled by each lcpll
 */
typedef struct
{
    /**
     * The min phy ID controlled by given pll
     */
    uint32 min_phy_id;
    /**
     * The max phy ID controlled by given pll
     */
    uint32 max_phy_id;
} dnx_data_nif_global_pll_phys_t;

/**
 * \brief Holds values of submodule global table nif_interface_id_to_unit_id
 * Table info:
 * map the nif port to nif unit id, in granularity of nif_interface_id_to_unit_id_granularity (2).
 */
typedef struct
{
    /**
     * NIF unit id.
     */
    uint32 unit_id;
    /**
     * Intenal offset inside the NIF unit id.
     */
    uint32 internal_offset;
} dnx_data_nif_global_nif_interface_id_to_unit_id_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does reassembler exist
     */
    dnx_data_nif_global_reassembler,
    /**
     * Can NIF blocks clock be power down
     */
    dnx_data_nif_global_clock_power_down,
    /**
     * Is ILKN CDU FEC powerdown separated from CDU ETH powerdown
     */
    dnx_data_nif_global_ilkn_cdu_fec_separate_clock_power_down,
    /**
     * Separate TX clk power down to ba enabled both for ETH and FLEXE port
     */
    dnx_data_nif_global_tx_separate_clock_power_down,
    dnx_data_nif_global_ilkn_credit_loss_handling_mode,

    /**
     * Must be last one!
     */
    _dnx_data_nif_global_feature_nof
} dnx_data_nif_global_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_global_feature_get_f) (
    int unit,
    dnx_data_nif_global_feature_e feature);

/**
 * \brief returns define data of nof_lcplls
 * Module - 'nif', Submodule - 'global', data - 'nof_lcplls'
 * number of lcplls supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lcplls - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_global_nof_lcplls_get_f) (
    int unit);

/**
 * \brief returns define data of max_core_access_per_port
 * Module - 'nif', Submodule - 'global', data - 'max_core_access_per_port'
 * The max of core access per port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_core_access_per_port - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_global_max_core_access_per_port_get_f) (
    int unit);

/**
 * \brief returns define data of nof_nif_interfaces_per_core
 * Module - 'nif', Submodule - 'global', data - 'nof_nif_interfaces_per_core'
 * Number of Nif ports/interfaces per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_nif_interfaces_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_global_nof_nif_interfaces_per_core_get_f) (
    int unit);

/**
 * \brief returns define data of nif_interface_id_to_unit_id_granularity
 * Module - 'nif', Submodule - 'global', data - 'nif_interface_id_to_unit_id_granularity'
 * Granularity of the nif_interface_id_to_unit_id table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_interface_id_to_unit_id_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_global_nif_interface_id_to_unit_id_granularity_get_f) (
    int unit);

/**
 * \brief returns define data of reassembler_fifo_threshold
 * Module - 'nif', Submodule - 'global', data - 'reassembler_fifo_threshold'
 * Default value of reassembler FIFO threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     reassembler_fifo_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_global_reassembler_fifo_threshold_get_f) (
    int unit);

/**
 * \brief returns define data of last_port_led_scan
 * Module - 'nif', Submodule - 'global', data - 'last_port_led_scan'
 * the last port of led scan chain
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     last_port_led_scan - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_global_last_port_led_scan_get_f) (
    int unit);

/**
 * \brief returns numeric data of start_tx_threshold_global
 * Module - 'nif', Submodule - 'global', data - 'start_tx_threshold_global'
 * Global start TX threshold. This value overrides TX threshold table values
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     start_tx_threshold_global - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_global_start_tx_threshold_global_get_f) (
    int unit);

/**
 * \brief get table pll_phys entry 
 * phys controlled by each lcpll
 * 
 * \param [in] unit - unit #
 * \param [in] lcpll - LCPLL index
 * 
 * \return
 *     pll_phys - returns the relevant entry values grouped in struct - see dnx_data_nif_global_pll_phys_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_global_pll_phys_t *(
    *dnx_data_nif_global_pll_phys_get_f) (
    int unit,
    int lcpll);

/**
 * \brief get table nif_interface_id_to_unit_id entry 
 * map the nif port to nif unit id, in granularity of nif_interface_id_to_unit_id_granularity (2).
 * 
 * \param [in] unit - unit #
 * \param [in] nif_interface_id - Port number.
 * 
 * \return
 *     nif_interface_id_to_unit_id - returns the relevant entry values grouped in struct - see dnx_data_nif_global_nif_interface_id_to_unit_id_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_global_nif_interface_id_to_unit_id_t *(
    *dnx_data_nif_global_nif_interface_id_to_unit_id_get_f) (
    int unit,
    int nif_interface_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - GLOBAL:
 * {
 */
/**
 * \brief Interface for nif global data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_global_feature_get_f feature_get;
    /**
     * returns define data of nof_lcplls
     */
    dnx_data_nif_global_nof_lcplls_get_f nof_lcplls_get;
    /**
     * returns define data of max_core_access_per_port
     */
    dnx_data_nif_global_max_core_access_per_port_get_f max_core_access_per_port_get;
    /**
     * returns define data of nof_nif_interfaces_per_core
     */
    dnx_data_nif_global_nof_nif_interfaces_per_core_get_f nof_nif_interfaces_per_core_get;
    /**
     * returns define data of nif_interface_id_to_unit_id_granularity
     */
    dnx_data_nif_global_nif_interface_id_to_unit_id_granularity_get_f nif_interface_id_to_unit_id_granularity_get;
    /**
     * returns define data of reassembler_fifo_threshold
     */
    dnx_data_nif_global_reassembler_fifo_threshold_get_f reassembler_fifo_threshold_get;
    /**
     * returns define data of last_port_led_scan
     */
    dnx_data_nif_global_last_port_led_scan_get_f last_port_led_scan_get;
    /**
     * returns numeric data of start_tx_threshold_global
     */
    dnx_data_nif_global_start_tx_threshold_global_get_f start_tx_threshold_global_get;
    /**
     * get table pll_phys entry 
     */
    dnx_data_nif_global_pll_phys_get_f pll_phys_get;
    /**
     * get general info table about table (for example key size)pll_phys info
     */
    dnxc_data_table_info_get_f pll_phys_info_get;
    /**
     * get table nif_interface_id_to_unit_id entry 
     */
    dnx_data_nif_global_nif_interface_id_to_unit_id_get_f nif_interface_id_to_unit_id_get;
    /**
     * get general info table about table (for example key size)nif_interface_id_to_unit_id info
     */
    dnxc_data_table_info_get_f nif_interface_id_to_unit_id_info_get;
} dnx_data_if_nif_global_t;

/*
 * }
 */

/*
 * SUBMODULE  - PHYS:
 * data about phys
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule phys table general
 * Table info:
 * general data about phys
 */
typedef struct
{
    /**
     * bitmap of supported phys
     */
    bcm_pbmp_t supported_phys;
} dnx_data_nif_phys_general_t;

/**
 * \brief Holds values of submodule phys table polarity
 * Table info:
 * rx and tx polarity per lane
 */
typedef struct
{
    /**
     * switch TX phy polarity
     */
    uint32 tx_polarity;
    /**
     * switch RX phy polarity
     */
    uint32 rx_polarity;
} dnx_data_nif_phys_polarity_t;

/**
 * \brief Holds values of submodule phys table core_phys_map
 * Table info:
 * map pipeline core to connected PHYs
 */
typedef struct
{
    /**
     * phys connected to the CORE.
     */
    bcm_pbmp_t phys;
} dnx_data_nif_phys_core_phys_map_t;

/**
 * \brief Holds values of submodule phys table vco_div
 * Table info:
 * VCO divider per ethu_id
 */
typedef struct
{
    /**
     * vco_div
     */
    uint32 vco_div;
} dnx_data_nif_phys_vco_div_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_nif_phys_feature_nof
} dnx_data_nif_phys_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_phys_feature_get_f) (
    int unit,
    dnx_data_nif_phys_feature_e feature);

/**
 * \brief returns define data of nof_phys
 * Module - 'nif', Submodule - 'phys', data - 'nof_phys'
 * number of phys supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phys - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_phys_nof_phys_get_f) (
    int unit);

/**
 * \brief returns define data of nof_phys_per_core
 * Module - 'nif', Submodule - 'phys', data - 'nof_phys_per_core'
 * number of phys per core supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phys_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_phys_nof_phys_per_core_get_f) (
    int unit);

/**
 * \brief returns define data of pm8x50_gen
 * Module - 'nif', Submodule - 'phys', data - 'pm8x50_gen'
 * The generation of Blackhalk PM that the device uses. IIf older generation some abilities are not supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm8x50_gen - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_phys_pm8x50_gen_get_f) (
    int unit);

/**
 * \brief returns define data of is_pam4_speed_supported
 * Module - 'nif', Submodule - 'phys', data - 'is_pam4_speed_supported'
 * If PAM4 speed supported in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_pam4_speed_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_phys_is_pam4_speed_supported_get_f) (
    int unit);

/**
 * \brief get table general entry 
 * general data about phys
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     general - returns the relevant entry values grouped in struct - see dnx_data_nif_phys_general_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_phys_general_t *(
    *dnx_data_nif_phys_general_get_f) (
    int unit);

/**
 * \brief get table polarity entry 
 * rx and tx polarity per lane
 * 
 * \param [in] unit - unit #
 * \param [in] lane_index - lane index (0-based)
 * 
 * \return
 *     polarity - returns the relevant entry values grouped in struct - see dnx_data_nif_phys_polarity_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_phys_polarity_t *(
    *dnx_data_nif_phys_polarity_get_f) (
    int unit,
    int lane_index);

/**
 * \brief get table core_phys_map entry 
 * map pipeline core to connected PHYs
 * 
 * \param [in] unit - unit #
 * \param [in] core_index - Core number.
 * 
 * \return
 *     core_phys_map - returns the relevant entry values grouped in struct - see dnx_data_nif_phys_core_phys_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_phys_core_phys_map_t *(
    *dnx_data_nif_phys_core_phys_map_get_f) (
    int unit,
    int core_index);

/**
 * \brief get table vco_div entry 
 * VCO divider per ethu_id
 * 
 * \param [in] unit - unit #
 * \param [in] ethu_index - ethu instance number.
 * 
 * \return
 *     vco_div - returns the relevant entry values grouped in struct - see dnx_data_nif_phys_vco_div_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_phys_vco_div_t *(
    *dnx_data_nif_phys_vco_div_get_f) (
    int unit,
    int ethu_index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - PHYS:
 * {
 */
/**
 * \brief Interface for nif phys data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_phys_feature_get_f feature_get;
    /**
     * returns define data of nof_phys
     */
    dnx_data_nif_phys_nof_phys_get_f nof_phys_get;
    /**
     * returns define data of nof_phys_per_core
     */
    dnx_data_nif_phys_nof_phys_per_core_get_f nof_phys_per_core_get;
    /**
     * returns define data of pm8x50_gen
     */
    dnx_data_nif_phys_pm8x50_gen_get_f pm8x50_gen_get;
    /**
     * returns define data of is_pam4_speed_supported
     */
    dnx_data_nif_phys_is_pam4_speed_supported_get_f is_pam4_speed_supported_get;
    /**
     * get table general entry 
     */
    dnx_data_nif_phys_general_get_f general_get;
    /**
     * get general info table about table (for example key size)general info
     */
    dnxc_data_table_info_get_f general_info_get;
    /**
     * get table polarity entry 
     */
    dnx_data_nif_phys_polarity_get_f polarity_get;
    /**
     * get general info table about table (for example key size)polarity info
     */
    dnxc_data_table_info_get_f polarity_info_get;
    /**
     * get table core_phys_map entry 
     */
    dnx_data_nif_phys_core_phys_map_get_f core_phys_map_get;
    /**
     * get general info table about table (for example key size)core_phys_map info
     */
    dnxc_data_table_info_get_f core_phys_map_info_get;
    /**
     * get table vco_div entry 
     */
    dnx_data_nif_phys_vco_div_get_f vco_div_get;
    /**
     * get general info table about table (for example key size)vco_div info
     */
    dnxc_data_table_info_get_f vco_div_info_get;
} dnx_data_if_nif_phys_t;

/*
 * }
 */

/*
 * SUBMODULE  - ILKN:
 * data about ILKN ports
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ilkn table phys
 * Table info:
 * phys bitmap for ports added by soc property
 */
typedef struct
{
    /**
     * phys connected to the ILKN id.
     */
    bcm_pbmp_t bitmap;
    /**
     * lanes connected to the ILKN id.
     */
    uint32 lanes_array[DNX_DATA_MAX_NIF_ILKN_LANES_MAX_NOF];
    /**
     * indicated weather the lanes_array order is valid or not.
     */
    uint8 array_order_valid;
} dnx_data_nif_ilkn_phys_t;

/**
 * \brief Holds values of submodule ilkn table supported_phys
 * Table info:
 * supported phys per ILKN id
 */
typedef struct
{
    /**
     * is ILKN id supported on the device.
     */
    uint32 is_supported;
    /**
     * Max supported phys for the ILKN id.
     */
    uint32 max_phys;
    /**
     * NIF phys supported by the ILKN id.
     */
    bcm_pbmp_t nif_phys;
    /**
     * Fabric phys supported by the ILKN id. if the ILKN unit is not connected to fabric lanes, this value should be 0.
     */
    bcm_pbmp_t fabric_phys;
} dnx_data_nif_ilkn_supported_phys_t;

/**
 * \brief Holds values of submodule ilkn table supported_interfaces
 * Table info:
 * table with all supported by the device ILKN speeds
 */
typedef struct
{
    /**
     * ILKN serdes speed.
     */
    uint32 speed;
    /**
     * PM type supporting the given speed.
     */
    portmod_dispatch_type_t pm_dispatch_type;
    /**
     * fec type
     */
    bcm_port_phy_fec_t fec_type;
    /**
     * Used to filter the valid table entries per device.
     */
    uint32 is_valid;
} dnx_data_nif_ilkn_supported_interfaces_t;

/**
 * \brief Holds values of submodule ilkn table ilkn_cores
 * Table info:
 * Ilkn core properties
 */
typedef struct
{
    /**
     * is ILKN core supports ELK.
     */
    uint32 is_elk_supported;
    /**
     * is ILKN core supports Data.
     */
    uint32 is_data_supported;
    /**
     * FEC is disabled by setting FEC bypass
     */
    uint32 fec_disable_by_bypass;
} dnx_data_nif_ilkn_ilkn_cores_t;

/**
 * \brief Holds values of submodule ilkn table ilkn_cores_clup_facing
 * Table info:
 * Facing clup id per ilkn core (For J2C ILKN Mux)
 */
typedef struct
{
    /**
     * facing CLUP unit Id.
     */
    uint32 clu_unit;
} dnx_data_nif_ilkn_ilkn_cores_clup_facing_t;

/**
 * \brief Holds values of submodule ilkn table supported_device_core
 * Table info:
 * supported device core per ILKN id
 */
typedef struct
{
    /**
     * Core id of which ILKN id is associated.
     */
    int core;
} dnx_data_nif_ilkn_supported_device_core_t;

/**
 * \brief Holds values of submodule ilkn table properties
 * Table info:
 * ILKN properties per ILKN id - added using soc property.
 */
typedef struct
{
    /**
     * ILKN burst short value. Sets the smallest burst size for the ILKN port. Shorter bursts will be padded with idles
     */
    uint32 burst_short;
    /**
     * ILKN burst Max value. Set the max burst size for the ILKN port.
     */
    uint32 burst_max;
    /**
     * ILKN burst min value. BurstMin should be bigger or equal to BurstShort and less or equal to BurstMax/2. This value is used to optimize the usage of the interface.
     */
    uint32 burst_min;
    /**
     * Specify the interval (in words) between meta-frame sync words. supported values: 64-16K.
     */
    uint32 metaframe_period;
    /**
     * ILKN over fabric indication. Specify the ILKN port is using Fabric lanes instead of NIF phys.
     */
    uint32 is_over_fabric;
} dnx_data_nif_ilkn_properties_t;

/**
 * \brief Holds values of submodule ilkn table nif_pms
 * Table info:
 * ILKN PM table over NIF
 */
typedef struct
{
    /**
     * PM dispatch type in Portmod
     */
    portmod_dispatch_type_t dispatch_type;
    /**
     * PM first phy
     */
    uint32 first_phy;
    /**
     * Number of Phys in ILKN PM
     */
    uint32 nof_phys;
    /**
     * PM is facing (connected directly) to this core id (For J2C ILKN Mux).
     */
    int facing_core_index;
} dnx_data_nif_ilkn_nif_pms_t;

/**
 * \brief Holds values of submodule ilkn table fabric_pms
 * Table info:
 * ILKN PM table over Fabric
 */
typedef struct
{
    /**
     * PM dispatch type in Portmod
     */
    portmod_dispatch_type_t dispatch_type;
    /**
     * PM first phy
     */
    uint32 first_phy;
    /**
     * Number of Phys in ILKN PM
     */
    uint32 nof_phys;
    /**
     * PM is facing (connected directly) to this core id (For J2P ILKN Mux).
     */
    int facing_core_index;
} dnx_data_nif_ilkn_fabric_pms_t;

/**
 * \brief Holds values of submodule ilkn table ilkn_pms
 * Table info:
 * ILKN PM table per ILKN id
 */
typedef struct
{
    /**
     * ILKN connected PMs on NIF side
     */
    uint32 nif_pm_ids[DNX_DATA_MAX_NIF_ILKN_PMS_NOF];
    /**
     * ILKN connected PMs on Fabric side
     */
    uint32 fabric_pm_ids[DNX_DATA_MAX_NIF_ILKN_PMS_NOF];
} dnx_data_nif_ilkn_ilkn_pms_t;

/**
 * \brief Holds values of submodule ilkn table nif_lanes_map
 * Table info:
 * ILKN lanes map table
 */
typedef struct
{
    /**
     * PM first phy
     */
    uint32 first_phy;
    /**
     * Ilkn lane id offset
     */
    uint32 ilkn_lane_offset;
    /**
     * number of lanes in range
     */
    uint32 nof_lanes;
} dnx_data_nif_ilkn_nif_lanes_map_t;

/**
 * \brief Holds values of submodule ilkn table fabric_lanes_map
 * Table info:
 * ILKN lanes map table
 */
typedef struct
{
    /**
     * PM first phy
     */
    uint32 first_phy;
    /**
     * Ilkn lane id offset
     */
    uint32 ilkn_lane_offset;
    /**
     * number of lanes in range
     */
    uint32 nof_lanes;
} dnx_data_nif_ilkn_fabric_lanes_map_t;

/**
 * \brief Holds values of submodule ilkn table start_tx_threshold_table
 * Table info:
 * TX threshold table of values per speed range
 */
typedef struct
{
    /**
     * Interface rate
     */
    uint32 speed;
    /**
     * Start TX threshold
     */
    uint32 start_thr;
} dnx_data_nif_ilkn_start_tx_threshold_table_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * is device type support ILKN.
     */
    dnx_data_nif_ilkn_is_supported,
    /**
     * is device type support data ILKN.
     */
    dnx_data_nif_ilkn_is_ilu_supported,
    /**
     * is device type support credits source selector.
     */
    dnx_data_nif_ilkn_credits_selector,
    /**
     * is device type support over fabric per core selector: nif or fabric.
     */
    dnx_data_nif_ilkn_over_fabric_per_core_selector,
    /**
     * Indicates if CDU units support Ilkn selectors configuration.
     */
    dnx_data_nif_ilkn_cdu_ilkn_selectors,
    /**
     * Indicates if CLU units support Ilkn selectors configuration.
     */
    dnx_data_nif_ilkn_clu_ilkn_selectors,
    /**
     * Indicates if CLU units support Ilkn selectors direction (up/down) configuration.
     */
    dnx_data_nif_ilkn_clu_ilkn_direction_selectors,
    /**
     * Indicates if Cburst interleaving mode is supported.
     */
    dnx_data_nif_ilkn_support_burst_interleaving,
    /**
     * Indicates if XPMD Interface is supported.
     */
    dnx_data_nif_ilkn_support_xpmd_if,
    /**
     * Indicates if ILKN aligner is supported.
     */
    dnx_data_nif_ilkn_support_aligner,
    /**
     * Indicates if the scheduler supportes per port configuration.
     */
    dnx_data_nif_ilkn_scheduler_context_per_port_support,
    /**
     * Indicates if ilu burst max configuration is supported.
     */
    dnx_data_nif_ilkn_support_ilu_burst_max,
    /**
     * Indicates if device type support FEC over ilkn interface.
     */
    dnx_data_nif_ilkn_is_fec_supported,
    /**
     * Indicates if device type support ILKN FEC bypass.
     */
    dnx_data_nif_ilkn_is_fec_bypass_supported,
    /**
     * Indicates if the FEC units are external to core (in CDU).
     */
    dnx_data_nif_ilkn_fec_units_in_cdu,
    /**
     * Indicates if HRF flush mechanism is supported
     */
    dnx_data_nif_ilkn_hrf_flush_support,
    /**
     * Should ILKN core be reset after link training is performed on ELK port
     */
    dnx_data_nif_ilkn_elk_require_core_reset_after_link_training,
    /**
     * Should ILKN core be resetted after link training finished.
     */
    dnx_data_nif_ilkn_reset_core_after_link_training,
    /**
     * Indicates if ILKN is supported only over Fabric PHYs
     */
    dnx_data_nif_ilkn_ilkn_over_fabric_only,
    /**
     * ILKN 12 lanes mode : 6+6 lanes over 2 consecutive ilkn cores
     */
    dnx_data_nif_ilkn_12lanes_mode,

    /**
     * Must be last one!
     */
    _dnx_data_nif_ilkn_feature_nof
} dnx_data_nif_ilkn_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_ilkn_feature_get_f) (
    int unit,
    dnx_data_nif_ilkn_feature_e feature);

/**
 * \brief returns define data of ilu_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'ilu_nof'
 * Number of ILU instances in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilu_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_ilu_nof_get_f) (
    int unit);

/**
 * \brief returns define data of ilkn_unit_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_unit_nof'
 * Number of ILKN units in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_unit_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_ilkn_unit_nof_get_f) (
    int unit);

/**
 * \brief returns define data of ilkn_unit_if_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_unit_if_nof'
 * Number of ILKN Interfaces in each ILKN unit
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_unit_if_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_ilkn_unit_if_nof_get_f) (
    int unit);

/**
 * \brief returns define data of ilkn_if_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_if_nof'
 * Number of ILKN Interfaces in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_if_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_ilkn_if_nof_get_f) (
    int unit);

/**
 * \brief returns define data of fec_units_per_core_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'fec_units_per_core_nof'
 * Number of ILKN FEC units per core in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_units_per_core_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_fec_units_per_core_nof_get_f) (
    int unit);

/**
 * \brief returns define data of nof_lanes_per_fec_unit
 * Module - 'nif', Submodule - 'ilkn', data - 'nof_lanes_per_fec_unit'
 * Number of ilkn lanes per ILKN FEC unit in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lanes_per_fec_unit - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_nof_lanes_per_fec_unit_get_f) (
    int unit);

/**
 * \brief returns define data of lanes_max_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'lanes_max_nof'
 * Max number of lanes for ILKN port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lanes_max_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_lanes_max_nof_get_f) (
    int unit);

/**
 * \brief returns define data of lanes_max_nof_using_fec
 * Module - 'nif', Submodule - 'ilkn', data - 'lanes_max_nof_using_fec'
 * Max number of lanes for ILKN port interface when FEC is enabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lanes_max_nof_using_fec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_lanes_max_nof_using_fec_get_f) (
    int unit);

/**
 * \brief returns define data of lanes_allowed_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'lanes_allowed_nof'
 * The allowed lanes for each ILKN port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lanes_allowed_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_lanes_allowed_nof_get_f) (
    int unit);

/**
 * \brief returns define data of ilkn_over_eth_pms_max
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_over_eth_pms_max'
 * Max number eth pms ilkn lanes is part of
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_over_eth_pms_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_ilkn_over_eth_pms_max_get_f) (
    int unit);

/**
 * \brief returns define data of segments_max_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'segments_max_nof'
 * Max number of segments in ILKN protocol. (Segment is a resource of ILKN which is shared between all ports of the ILKN unit)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     segments_max_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_segments_max_nof_get_f) (
    int unit);

/**
 * \brief returns define data of segments_half_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'segments_half_nof'
 * Min number of segments in ILKN protocol. (Segment is a resource of ILKN which is shared between all ports of the ILKN unit)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     segments_half_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_segments_half_nof_get_f) (
    int unit);

/**
 * \brief returns define data of pms_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'pms_nof'
 * Maximal number of PMs connectted to the ILKN unit
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pms_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_pms_nof_get_f) (
    int unit);

/**
 * \brief returns define data of fmac_bus_size
 * Module - 'nif', Submodule - 'ilkn', data - 'fmac_bus_size'
 * Fabric MAC bus size [bits], relevant for ILKN over fabric ports
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmac_bus_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_fmac_bus_size_get_f) (
    int unit);

/**
 * \brief returns define data of ilkn_rx_hrf_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_rx_hrf_nof'
 * Number of High Rate Fifo queues in RX
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_rx_hrf_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_ilkn_rx_hrf_nof_get_f) (
    int unit);

/**
 * \brief returns define data of ilkn_tx_hrf_nof
 * Module - 'nif', Submodule - 'ilkn', data - 'ilkn_tx_hrf_nof'
 * Number of High Rate Fifo queues in TX
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_tx_hrf_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_ilkn_tx_hrf_nof_get_f) (
    int unit);

/**
 * \brief returns define data of data_rx_hrf_size
 * Module - 'nif', Submodule - 'ilkn', data - 'data_rx_hrf_size'
 * Number of entries in High Rate Fifo for data
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_rx_hrf_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_data_rx_hrf_size_get_f) (
    int unit);

/**
 * \brief returns define data of tdm_rx_hrf_size
 * Module - 'nif', Submodule - 'ilkn', data - 'tdm_rx_hrf_size'
 * Number of entries in High Rate Fifo for tdm
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tdm_rx_hrf_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_tdm_rx_hrf_size_get_f) (
    int unit);

/**
 * \brief returns define data of tx_hrf_credits
 * Module - 'nif', Submodule - 'ilkn', data - 'tx_hrf_credits'
 * Number of credits needed per High Rate Fifo for tx
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tx_hrf_credits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_tx_hrf_credits_get_f) (
    int unit);

/**
 * \brief returns define data of nof_rx_hrf_per_port
 * Module - 'nif', Submodule - 'ilkn', data - 'nof_rx_hrf_per_port'
 * Number of High Rate Fifo queues in RX per port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rx_hrf_per_port - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_nof_rx_hrf_per_port_get_f) (
    int unit);

/**
 * \brief returns define data of watermark_high_elk
 * Module - 'nif', Submodule - 'ilkn', data - 'watermark_high_elk'
 * High Watermark value for ILKN ELK
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watermark_high_elk - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_watermark_high_elk_get_f) (
    int unit);

/**
 * \brief returns define data of watermark_low_elk
 * Module - 'nif', Submodule - 'ilkn', data - 'watermark_low_elk'
 * Low Watermark value for ILKN ELK
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watermark_low_elk - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_watermark_low_elk_get_f) (
    int unit);

/**
 * \brief returns define data of watermark_high_data
 * Module - 'nif', Submodule - 'ilkn', data - 'watermark_high_data'
 * High Watermark value for ILKN Data
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watermark_high_data - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_watermark_high_data_get_f) (
    int unit);

/**
 * \brief returns define data of watermark_low_data
 * Module - 'nif', Submodule - 'ilkn', data - 'watermark_low_data'
 * Low Watermark value for ILKN Data
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watermark_low_data - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_watermark_low_data_get_f) (
    int unit);

/**
 * \brief returns define data of is_20G_speed_supported
 * Module - 'nif', Submodule - 'ilkn', data - 'is_20G_speed_supported'
 * Indicated if device supports ILKN with speed of 20625
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_20G_speed_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_is_20G_speed_supported_get_f) (
    int unit);

/**
 * \brief returns define data of is_25G_speed_supported
 * Module - 'nif', Submodule - 'ilkn', data - 'is_25G_speed_supported'
 * Indicated if device supports ILKN with speed of 25000
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_25G_speed_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_is_25G_speed_supported_get_f) (
    int unit);

/**
 * \brief returns define data of is_27G_speed_supported
 * Module - 'nif', Submodule - 'ilkn', data - 'is_27G_speed_supported'
 * Indicated if device supports ILKN with speed of 27343
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_27G_speed_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_is_27G_speed_supported_get_f) (
    int unit);

/**
 * \brief returns define data of is_28G_speed_supported
 * Module - 'nif', Submodule - 'ilkn', data - 'is_28G_speed_supported'
 * Indicated if device supports ILKN with speed of 28125
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_28G_speed_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_is_28G_speed_supported_get_f) (
    int unit);

/**
 * \brief returns define data of is_53G_speed_supported
 * Module - 'nif', Submodule - 'ilkn', data - 'is_53G_speed_supported'
 * Indicated if device supports ILKN with speed of 53125
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_53G_speed_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_is_53G_speed_supported_get_f) (
    int unit);

/**
 * \brief returns define data of is_nif_56G_speed_supported
 * Module - 'nif', Submodule - 'ilkn', data - 'is_nif_56G_speed_supported'
 * Indicated if device supports ILKN over nif with speed of 56G
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_nif_56G_speed_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_is_nif_56G_speed_supported_get_f) (
    int unit);

/**
 * \brief returns define data of is_fabric_56G_speed_supported
 * Module - 'nif', Submodule - 'ilkn', data - 'is_fabric_56G_speed_supported'
 * Indicated if device supports ILKN over fabric with speed of 56G
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_fabric_56G_speed_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_is_fabric_56G_speed_supported_get_f) (
    int unit);

/**
 * \brief returns define data of pad_size
 * Module - 'nif', Submodule - 'ilkn', data - 'pad_size'
 * Packet size for ILKN. Packet will be to this size if packet is smaller than this size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pad_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_pad_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of max_nof_ifs
 * Module - 'nif', Submodule - 'ilkn', data - 'max_nof_ifs'
 * Max of supported ILKN interfaces, if set to  -1, there is no limitation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_ifs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_max_nof_ifs_get_f) (
    int unit);

/**
 * \brief returns numeric data of max_nof_elk_ifs
 * Module - 'nif', Submodule - 'ilkn', data - 'max_nof_elk_ifs'
 * Max of supported ILKN interfaces for ELK(KBP), if set to  -1, there is no limitation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_elk_ifs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_max_nof_elk_ifs_get_f) (
    int unit);

/**
 * \brief returns numeric data of port_0_status_intr_id
 * Module - 'nif', Submodule - 'ilkn', data - 'port_0_status_intr_id'
 * ILKN port 0 status change interrupt ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_0_status_intr_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_port_0_status_intr_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of port_1_status_intr_id
 * Module - 'nif', Submodule - 'ilkn', data - 'port_1_status_intr_id'
 * ILKN port 1 status change interrupt ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_1_status_intr_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_ilkn_port_1_status_intr_id_get_f) (
    int unit);

/**
 * \brief get table phys entry 
 * phys bitmap for ports added by soc property
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     phys - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_phys_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_phys_t *(
    *dnx_data_nif_ilkn_phys_get_f) (
    int unit,
    int ilkn_id);

/**
 * \brief get table supported_phys entry 
 * supported phys per ILKN id
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     supported_phys - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_supported_phys_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_supported_phys_t *(
    *dnx_data_nif_ilkn_supported_phys_get_f) (
    int unit,
    int ilkn_id);

/**
 * \brief get table supported_interfaces entry 
 * table with all supported by the device ILKN speeds
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     supported_interfaces - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_supported_interfaces_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_supported_interfaces_t *(
    *dnx_data_nif_ilkn_supported_interfaces_get_f) (
    int unit,
    int index);

/**
 * \brief get table ilkn_cores entry 
 * Ilkn core properties
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_core_id - ilkn core id
 * 
 * \return
 *     ilkn_cores - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_ilkn_cores_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_ilkn_cores_t *(
    *dnx_data_nif_ilkn_ilkn_cores_get_f) (
    int unit,
    int ilkn_core_id);

/**
 * \brief get table ilkn_cores_clup_facing entry 
 * Facing clup id per ilkn core (For J2C ILKN Mux)
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_core_id - ilkn core id
 * 
 * \return
 *     ilkn_cores_clup_facing - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_ilkn_cores_clup_facing_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_ilkn_cores_clup_facing_t *(
    *dnx_data_nif_ilkn_ilkn_cores_clup_facing_get_f) (
    int unit,
    int ilkn_core_id);

/**
 * \brief get table supported_device_core entry 
 * supported device core per ILKN id
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     supported_device_core - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_supported_device_core_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_supported_device_core_t *(
    *dnx_data_nif_ilkn_supported_device_core_get_f) (
    int unit,
    int ilkn_id);

/**
 * \brief get table properties entry 
 * ILKN properties per ILKN id - added using soc property.
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     properties - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_properties_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_properties_t *(
    *dnx_data_nif_ilkn_properties_get_f) (
    int unit,
    int ilkn_id);

/**
 * \brief get table nif_pms entry 
 * ILKN PM table over NIF
 * 
 * \param [in] unit - unit #
 * \param [in] pm_id - Port Macro identifier
 * 
 * \return
 *     nif_pms - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_nif_pms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_nif_pms_t *(
    *dnx_data_nif_ilkn_nif_pms_get_f) (
    int unit,
    int pm_id);

/**
 * \brief get table fabric_pms entry 
 * ILKN PM table over Fabric
 * 
 * \param [in] unit - unit #
 * \param [in] pm_id - Port Macro identifier
 * 
 * \return
 *     fabric_pms - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_fabric_pms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_fabric_pms_t *(
    *dnx_data_nif_ilkn_fabric_pms_get_f) (
    int unit,
    int pm_id);

/**
 * \brief get table ilkn_pms entry 
 * ILKN PM table per ILKN id
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - ilkn if id
 * 
 * \return
 *     ilkn_pms - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_ilkn_pms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_ilkn_pms_t *(
    *dnx_data_nif_ilkn_ilkn_pms_get_f) (
    int unit,
    int ilkn_id);

/**
 * \brief get table nif_lanes_map entry 
 * ILKN lanes map table
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_core - Ilkn Core id
 * \param [in] range_id - Ilkn lanes range id
 * 
 * \return
 *     nif_lanes_map - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_nif_lanes_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_nif_lanes_map_t *(
    *dnx_data_nif_ilkn_nif_lanes_map_get_f) (
    int unit,
    int ilkn_core,
    int range_id);

/**
 * \brief get table fabric_lanes_map entry 
 * ILKN lanes map table
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_core - Ilkn Core id
 * \param [in] range_id - Ilkn lanes range id
 * 
 * \return
 *     fabric_lanes_map - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_fabric_lanes_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_fabric_lanes_map_t *(
    *dnx_data_nif_ilkn_fabric_lanes_map_get_f) (
    int unit,
    int ilkn_core,
    int range_id);

/**
 * \brief get table start_tx_threshold_table entry 
 * TX threshold table of values per speed range
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Entry index
 * 
 * \return
 *     start_tx_threshold_table - returns the relevant entry values grouped in struct - see dnx_data_nif_ilkn_start_tx_threshold_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_ilkn_start_tx_threshold_table_t *(
    *dnx_data_nif_ilkn_start_tx_threshold_table_get_f) (
    int unit,
    int idx);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - ILKN:
 * {
 */
/**
 * \brief Interface for nif ilkn data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_ilkn_feature_get_f feature_get;
    /**
     * returns define data of ilu_nof
     */
    dnx_data_nif_ilkn_ilu_nof_get_f ilu_nof_get;
    /**
     * returns define data of ilkn_unit_nof
     */
    dnx_data_nif_ilkn_ilkn_unit_nof_get_f ilkn_unit_nof_get;
    /**
     * returns define data of ilkn_unit_if_nof
     */
    dnx_data_nif_ilkn_ilkn_unit_if_nof_get_f ilkn_unit_if_nof_get;
    /**
     * returns define data of ilkn_if_nof
     */
    dnx_data_nif_ilkn_ilkn_if_nof_get_f ilkn_if_nof_get;
    /**
     * returns define data of fec_units_per_core_nof
     */
    dnx_data_nif_ilkn_fec_units_per_core_nof_get_f fec_units_per_core_nof_get;
    /**
     * returns define data of nof_lanes_per_fec_unit
     */
    dnx_data_nif_ilkn_nof_lanes_per_fec_unit_get_f nof_lanes_per_fec_unit_get;
    /**
     * returns define data of lanes_max_nof
     */
    dnx_data_nif_ilkn_lanes_max_nof_get_f lanes_max_nof_get;
    /**
     * returns define data of lanes_max_nof_using_fec
     */
    dnx_data_nif_ilkn_lanes_max_nof_using_fec_get_f lanes_max_nof_using_fec_get;
    /**
     * returns define data of lanes_allowed_nof
     */
    dnx_data_nif_ilkn_lanes_allowed_nof_get_f lanes_allowed_nof_get;
    /**
     * returns define data of ilkn_over_eth_pms_max
     */
    dnx_data_nif_ilkn_ilkn_over_eth_pms_max_get_f ilkn_over_eth_pms_max_get;
    /**
     * returns define data of segments_max_nof
     */
    dnx_data_nif_ilkn_segments_max_nof_get_f segments_max_nof_get;
    /**
     * returns define data of segments_half_nof
     */
    dnx_data_nif_ilkn_segments_half_nof_get_f segments_half_nof_get;
    /**
     * returns define data of pms_nof
     */
    dnx_data_nif_ilkn_pms_nof_get_f pms_nof_get;
    /**
     * returns define data of fmac_bus_size
     */
    dnx_data_nif_ilkn_fmac_bus_size_get_f fmac_bus_size_get;
    /**
     * returns define data of ilkn_rx_hrf_nof
     */
    dnx_data_nif_ilkn_ilkn_rx_hrf_nof_get_f ilkn_rx_hrf_nof_get;
    /**
     * returns define data of ilkn_tx_hrf_nof
     */
    dnx_data_nif_ilkn_ilkn_tx_hrf_nof_get_f ilkn_tx_hrf_nof_get;
    /**
     * returns define data of data_rx_hrf_size
     */
    dnx_data_nif_ilkn_data_rx_hrf_size_get_f data_rx_hrf_size_get;
    /**
     * returns define data of tdm_rx_hrf_size
     */
    dnx_data_nif_ilkn_tdm_rx_hrf_size_get_f tdm_rx_hrf_size_get;
    /**
     * returns define data of tx_hrf_credits
     */
    dnx_data_nif_ilkn_tx_hrf_credits_get_f tx_hrf_credits_get;
    /**
     * returns define data of nof_rx_hrf_per_port
     */
    dnx_data_nif_ilkn_nof_rx_hrf_per_port_get_f nof_rx_hrf_per_port_get;
    /**
     * returns define data of watermark_high_elk
     */
    dnx_data_nif_ilkn_watermark_high_elk_get_f watermark_high_elk_get;
    /**
     * returns define data of watermark_low_elk
     */
    dnx_data_nif_ilkn_watermark_low_elk_get_f watermark_low_elk_get;
    /**
     * returns define data of watermark_high_data
     */
    dnx_data_nif_ilkn_watermark_high_data_get_f watermark_high_data_get;
    /**
     * returns define data of watermark_low_data
     */
    dnx_data_nif_ilkn_watermark_low_data_get_f watermark_low_data_get;
    /**
     * returns define data of is_20G_speed_supported
     */
    dnx_data_nif_ilkn_is_20G_speed_supported_get_f is_20G_speed_supported_get;
    /**
     * returns define data of is_25G_speed_supported
     */
    dnx_data_nif_ilkn_is_25G_speed_supported_get_f is_25G_speed_supported_get;
    /**
     * returns define data of is_27G_speed_supported
     */
    dnx_data_nif_ilkn_is_27G_speed_supported_get_f is_27G_speed_supported_get;
    /**
     * returns define data of is_28G_speed_supported
     */
    dnx_data_nif_ilkn_is_28G_speed_supported_get_f is_28G_speed_supported_get;
    /**
     * returns define data of is_53G_speed_supported
     */
    dnx_data_nif_ilkn_is_53G_speed_supported_get_f is_53G_speed_supported_get;
    /**
     * returns define data of is_nif_56G_speed_supported
     */
    dnx_data_nif_ilkn_is_nif_56G_speed_supported_get_f is_nif_56G_speed_supported_get;
    /**
     * returns define data of is_fabric_56G_speed_supported
     */
    dnx_data_nif_ilkn_is_fabric_56G_speed_supported_get_f is_fabric_56G_speed_supported_get;
    /**
     * returns define data of pad_size
     */
    dnx_data_nif_ilkn_pad_size_get_f pad_size_get;
    /**
     * returns numeric data of max_nof_ifs
     */
    dnx_data_nif_ilkn_max_nof_ifs_get_f max_nof_ifs_get;
    /**
     * returns numeric data of max_nof_elk_ifs
     */
    dnx_data_nif_ilkn_max_nof_elk_ifs_get_f max_nof_elk_ifs_get;
    /**
     * returns numeric data of port_0_status_intr_id
     */
    dnx_data_nif_ilkn_port_0_status_intr_id_get_f port_0_status_intr_id_get;
    /**
     * returns numeric data of port_1_status_intr_id
     */
    dnx_data_nif_ilkn_port_1_status_intr_id_get_f port_1_status_intr_id_get;
    /**
     * get table phys entry 
     */
    dnx_data_nif_ilkn_phys_get_f phys_get;
    /**
     * get general info table about table (for example key size)phys info
     */
    dnxc_data_table_info_get_f phys_info_get;
    /**
     * get table supported_phys entry 
     */
    dnx_data_nif_ilkn_supported_phys_get_f supported_phys_get;
    /**
     * get general info table about table (for example key size)supported_phys info
     */
    dnxc_data_table_info_get_f supported_phys_info_get;
    /**
     * get table supported_interfaces entry 
     */
    dnx_data_nif_ilkn_supported_interfaces_get_f supported_interfaces_get;
    /**
     * get general info table about table (for example key size)supported_interfaces info
     */
    dnxc_data_table_info_get_f supported_interfaces_info_get;
    /**
     * get table ilkn_cores entry 
     */
    dnx_data_nif_ilkn_ilkn_cores_get_f ilkn_cores_get;
    /**
     * get general info table about table (for example key size)ilkn_cores info
     */
    dnxc_data_table_info_get_f ilkn_cores_info_get;
    /**
     * get table ilkn_cores_clup_facing entry 
     */
    dnx_data_nif_ilkn_ilkn_cores_clup_facing_get_f ilkn_cores_clup_facing_get;
    /**
     * get general info table about table (for example key size)ilkn_cores_clup_facing info
     */
    dnxc_data_table_info_get_f ilkn_cores_clup_facing_info_get;
    /**
     * get table supported_device_core entry 
     */
    dnx_data_nif_ilkn_supported_device_core_get_f supported_device_core_get;
    /**
     * get general info table about table (for example key size)supported_device_core info
     */
    dnxc_data_table_info_get_f supported_device_core_info_get;
    /**
     * get table properties entry 
     */
    dnx_data_nif_ilkn_properties_get_f properties_get;
    /**
     * get general info table about table (for example key size)properties info
     */
    dnxc_data_table_info_get_f properties_info_get;
    /**
     * get table nif_pms entry 
     */
    dnx_data_nif_ilkn_nif_pms_get_f nif_pms_get;
    /**
     * get general info table about table (for example key size)nif_pms info
     */
    dnxc_data_table_info_get_f nif_pms_info_get;
    /**
     * get table fabric_pms entry 
     */
    dnx_data_nif_ilkn_fabric_pms_get_f fabric_pms_get;
    /**
     * get general info table about table (for example key size)fabric_pms info
     */
    dnxc_data_table_info_get_f fabric_pms_info_get;
    /**
     * get table ilkn_pms entry 
     */
    dnx_data_nif_ilkn_ilkn_pms_get_f ilkn_pms_get;
    /**
     * get general info table about table (for example key size)ilkn_pms info
     */
    dnxc_data_table_info_get_f ilkn_pms_info_get;
    /**
     * get table nif_lanes_map entry 
     */
    dnx_data_nif_ilkn_nif_lanes_map_get_f nif_lanes_map_get;
    /**
     * get general info table about table (for example key size)nif_lanes_map info
     */
    dnxc_data_table_info_get_f nif_lanes_map_info_get;
    /**
     * get table fabric_lanes_map entry 
     */
    dnx_data_nif_ilkn_fabric_lanes_map_get_f fabric_lanes_map_get;
    /**
     * get general info table about table (for example key size)fabric_lanes_map info
     */
    dnxc_data_table_info_get_f fabric_lanes_map_info_get;
    /**
     * get table start_tx_threshold_table entry 
     */
    dnx_data_nif_ilkn_start_tx_threshold_table_get_f start_tx_threshold_table_get;
    /**
     * get general info table about table (for example key size)start_tx_threshold_table info
     */
    dnxc_data_table_info_get_f start_tx_threshold_table_info_get;
} dnx_data_if_nif_ilkn_t;

/*
 * }
 */

/*
 * SUBMODULE  - ETH:
 * data about Ethernet ports
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule eth table start_tx_threshold_table
 * Table info:
 * TX threshold table of values per speed range
 */
typedef struct
{
    /**
     * Interface rate
     */
    uint32 speed;
    /**
     * Start TX threshold for non-L1 ports
     */
    uint32 start_thr;
    /**
     * Start TX threshold for L1 ports
     */
    uint32 start_thr_for_l1;
} dnx_data_nif_eth_start_tx_threshold_table_t;

/**
 * \brief Holds values of submodule eth table pm_properties
 * Table info:
 * PM properties per PM
 */
typedef struct
{
    /**
     * phys connected to the PM.
     */
    bcm_pbmp_t phys;
    /**
     * PM TVCO PLL index.
     */
    int tvco_pll_index;
    /**
     * PM MDIO Address.
     */
    int phy_addr;
    /**
     * Boolean. Is master in PM chain
     */
    int is_master;
    /**
     * PM dispatch type in Portmod
     */
    portmod_dispatch_type_t dispatch_type;
    /**
     * Boolean. Does this PM require special PLL check
     */
    int special_pll_check;
} dnx_data_nif_eth_pm_properties_t;

/**
 * \brief Holds values of submodule eth table ethu_properties
 * Table info:
 * map ethu to PM instance
 */
typedef struct
{
    /**
     * array of pms in each ethu.
     */
    int pms[DNX_DATA_MAX_NIF_ETH_TOTAL_NOF_ETHU_PMS_IN_DEVICE];
    /**
     * Unit IMB type
     */
    imb_dispatch_type_t type;
    /**
     * inner IMB type index
     */
    int type_index;
} dnx_data_nif_eth_ethu_properties_t;

/**
 * \brief Holds values of submodule eth table phy_map
 * Table info:
 * Map phy index to ETHU index and PM index. Phy index granularity is defined by phy_map_granularity
 */
typedef struct
{
    /**
     * NIF Phy Index
     */
    int phy_index;
    /**
     * Ethernet Unit Index containing Phy Index
     */
    int ethu_index;
    /**
     * PM Index containing Phy Index
     */
    int pm_index;
} dnx_data_nif_eth_phy_map_t;

/**
 * \brief Holds values of submodule eth table max_speed
 * Table info:
 * Max speed for each ethernet interface type.
 */
typedef struct
{
    /**
     * Max speed value.
     */
    int speed;
} dnx_data_nif_eth_max_speed_t;

/**
 * \brief Holds values of submodule eth table supported_interfaces
 * Table info:
 * Table with all the supported Ethernet interfaces for the device.
 */
typedef struct
{
    /**
     * valid etherned speed
     */
    int speed;
    /**
     * nof lanes used by the port
     */
    int nof_lanes;
    /**
     * fec type
     */
    bcm_port_phy_fec_t fec_type;
    /**
     * pm type
     */
    portmod_dispatch_type_t dispatch_type;
    /**
     * is valid interface for current device
     */
    int is_valid;
} dnx_data_nif_eth_supported_interfaces_t;

/**
 * \brief Holds values of submodule eth table supported_an_abilities
 * Table info:
 * Table with all the supported AN ability for legacy PMs.
 */
typedef struct
{
    /**
     * AN mode
     */
    int an_mode;
    /**
     * valid etherned speed
     */
    int speed;
    /**
     * nof lanes used by the port
     */
    int nof_lanes;
    /**
     * fec type
     */
    bcm_port_phy_fec_t fec_type;
    /**
     * media type
     */
    bcm_port_medium_t medium;
    /**
     * short/long channel
     */
    bcm_port_phy_channel_t channel;
    /**
     * is valid interface for current device
     */
    int is_valid;
} dnx_data_nif_eth_supported_an_abilities_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Indicates if the scheduler supportes per-priority configuration.
     */
    dnx_data_nif_eth_nif_scheduler_context_per_rmc_support,
    /**
     * Is flush mechanism on RMC is supported
     */
    dnx_data_nif_eth_rmc_flush_support,
    /**
     * Indicates if the rmc supportes low-priority configuration.
     */
    dnx_data_nif_eth_is_rmc_low_priority_needs_configuration,
    /**
     * Indicates if the device supportes clu units.
     */
    dnx_data_nif_eth_is_clu_supported,
    /**
     * Indicates if the rx port mode should be configured. (relevant only for CLU)
     */
    dnx_data_nif_eth_is_rx_port_mode_needs_configuration,
    /**
     * Indicates if PCS lane map reconfig is supported
     */
    dnx_data_nif_eth_pcs_lane_map_reconfig_support,
    /**
     * Gear shifter exists in ETHU.
     */
    dnx_data_nif_eth_gear_shifter_exists,
    /**
     * Should PM BW be set
     */
    dnx_data_nif_eth_pm8x50_bw_update,
    /**
     * Disable Portmod thread for 400G AN, RLM and BER monitor.
     */
    dnx_data_nif_eth_portmod_thread_disable,

    /**
     * Must be last one!
     */
    _dnx_data_nif_eth_feature_nof
} dnx_data_nif_eth_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_eth_feature_get_f) (
    int unit,
    dnx_data_nif_eth_feature_e feature);

/**
 * \brief returns define data of cdu_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_nof'
 * Number of CDU instances in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_cdu_nof_get_f) (
    int unit);

/**
 * \brief returns define data of clu_nof
 * Module - 'nif', Submodule - 'eth', data - 'clu_nof'
 * Number of CLU instances in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clu_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_clu_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cdum_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdum_nof'
 * Number of CDUM instances in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdum_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_cdum_nof_get_f) (
    int unit);

/**
 * \brief returns define data of nof_pms_in_cdu
 * Module - 'nif', Submodule - 'eth', data - 'nof_pms_in_cdu'
 * Number of pms in each CDU in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pms_in_cdu - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_nof_pms_in_cdu_get_f) (
    int unit);

/**
 * \brief returns define data of nof_pms_in_clu
 * Module - 'nif', Submodule - 'eth', data - 'nof_pms_in_clu'
 * Number of pms in each CLU in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pms_in_clu - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_nof_pms_in_clu_get_f) (
    int unit);

/**
 * \brief returns define data of total_nof_ethu_pms_in_device
 * Module - 'nif', Submodule - 'eth', data - 'total_nof_ethu_pms_in_device'
 * Maximum number of ETHU pms in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_ethu_pms_in_device - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_total_nof_ethu_pms_in_device_get_f) (
    int unit);

/**
 * \brief returns define data of nof_cdu_lanes_in_pm
 * Module - 'nif', Submodule - 'eth', data - 'nof_cdu_lanes_in_pm'
 * Number of lanes in pm in CDU unit in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cdu_lanes_in_pm - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_nof_cdu_lanes_in_pm_get_f) (
    int unit);

/**
 * \brief returns define data of nof_clu_lanes_in_pm
 * Module - 'nif', Submodule - 'eth', data - 'nof_clu_lanes_in_pm'
 * Number of lanes in pm in CLU unit in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_clu_lanes_in_pm - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_nof_clu_lanes_in_pm_get_f) (
    int unit);

/**
 * \brief returns define data of nof_cdu_pms
 * Module - 'nif', Submodule - 'eth', data - 'nof_cdu_pms'
 * Number of CDU pms in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cdu_pms - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_nof_cdu_pms_get_f) (
    int unit);

/**
 * \brief returns define data of nof_clu_pms
 * Module - 'nif', Submodule - 'eth', data - 'nof_clu_pms'
 * Number of CLU pms in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_clu_pms - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_nof_clu_pms_get_f) (
    int unit);

/**
 * \brief returns define data of ethu_nof
 * Module - 'nif', Submodule - 'eth', data - 'ethu_nof'
 * Maximum number of ETHU in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ethu_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_ethu_nof_get_f) (
    int unit);

/**
 * \brief returns define data of ethu_nof_per_core
 * Module - 'nif', Submodule - 'eth', data - 'ethu_nof_per_core'
 * Maximum number of ETHU in each device core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ethu_nof_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_ethu_nof_per_core_get_f) (
    int unit);

/**
 * \brief returns define data of cdu_nof_per_core
 * Module - 'nif', Submodule - 'eth', data - 'cdu_nof_per_core'
 * Number of CDU instances in each device core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_nof_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_cdu_nof_per_core_get_f) (
    int unit);

/**
 * \brief returns define data of clu_nof_per_core
 * Module - 'nif', Submodule - 'eth', data - 'clu_nof_per_core'
 * Number of CLU instances in each device core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clu_nof_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_clu_nof_per_core_get_f) (
    int unit);

/**
 * \brief returns define data of nof_lanes_in_cdu
 * Module - 'nif', Submodule - 'eth', data - 'nof_lanes_in_cdu'
 * Number of lanes in each CDU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lanes_in_cdu - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_nof_lanes_in_cdu_get_f) (
    int unit);

/**
 * \brief returns define data of nof_lanes_in_clu
 * Module - 'nif', Submodule - 'eth', data - 'nof_lanes_in_clu'
 * Number of lanes in each CLU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lanes_in_clu - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_nof_lanes_in_clu_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_lanes_in_ethu
 * Module - 'nif', Submodule - 'eth', data - 'max_nof_lanes_in_ethu'
 * Maximal number of lanes in ethernet unit (maximum between CLU and CDU)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_lanes_in_ethu - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_max_nof_lanes_in_ethu_get_f) (
    int unit);

/**
 * \brief returns define data of total_nof_cdu_lanes_in_device
 * Module - 'nif', Submodule - 'eth', data - 'total_nof_cdu_lanes_in_device'
 * Number of CDU lanes in device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     total_nof_cdu_lanes_in_device - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_total_nof_cdu_lanes_in_device_get_f) (
    int unit);

/**
 * \brief returns define data of cdu_mac_mode_config_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_mac_mode_config_nof'
 * Number of MAC mode config units per CDU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_mac_mode_config_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_cdu_mac_mode_config_nof_get_f) (
    int unit);

/**
 * \brief returns define data of mac_mode_config_lanes_nof
 * Module - 'nif', Submodule - 'eth', data - 'mac_mode_config_lanes_nof'
 * Number of lanes in each MAC mode config
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mac_mode_config_lanes_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_mac_mode_config_lanes_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cdu_mac_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_mac_nof'
 * Number of MAC units per CDU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_mac_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_cdu_mac_nof_get_f) (
    int unit);

/**
 * \brief returns define data of mac_lanes_nof
 * Module - 'nif', Submodule - 'eth', data - 'mac_lanes_nof'
 * Number of lanes in each MAC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mac_lanes_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_mac_lanes_nof_get_f) (
    int unit);

/**
 * \brief returns define data of ethu_logical_fifo_nof
 * Module - 'nif', Submodule - 'eth', data - 'ethu_logical_fifo_nof'
 * number of logical fifos in the CDU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ethu_logical_fifo_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_ethu_logical_fifo_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cdu_memory_entries_nof
 * Module - 'nif', Submodule - 'eth', data - 'cdu_memory_entries_nof'
 * number of entries in the CDU memory, to be shared between all logical FIFOs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_memory_entries_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_cdu_memory_entries_nof_get_f) (
    int unit);

/**
 * \brief returns define data of clu_memory_entries_nof
 * Module - 'nif', Submodule - 'eth', data - 'clu_memory_entries_nof'
 * number of entries in the CLU memory, to be shared between all logical FIFOs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clu_memory_entries_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_clu_memory_entries_nof_get_f) (
    int unit);

/**
 * \brief returns define data of priority_group_nof_entries_min
 * Module - 'nif', Submodule - 'eth', data - 'priority_group_nof_entries_min'
 * minimum number of entries to allocate to a priority group (priority group = RMC)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority_group_nof_entries_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_priority_group_nof_entries_min_get_f) (
    int unit);

/**
 * \brief returns define data of priority_groups_nof
 * Module - 'nif', Submodule - 'eth', data - 'priority_groups_nof'
 * number of allowed priority groups per port (priority group = RMC)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority_groups_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_priority_groups_nof_get_f) (
    int unit);

/**
 * \brief returns define data of pad_size_min
 * Module - 'nif', Submodule - 'eth', data - 'pad_size_min'
 * min padding size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pad_size_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_pad_size_min_get_f) (
    int unit);

/**
 * \brief returns define data of pad_size_max
 * Module - 'nif', Submodule - 'eth', data - 'pad_size_max'
 * max padding size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pad_size_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_pad_size_max_get_f) (
    int unit);

/**
 * \brief returns define data of packet_size_max
 * Module - 'nif', Submodule - 'eth', data - 'packet_size_max'
 * max packet size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_size_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_packet_size_max_get_f) (
    int unit);

/**
 * \brief returns define data of an_max_nof_abilities
 * Module - 'nif', Submodule - 'eth', data - 'an_max_nof_abilities'
 * max auto-negotiation abilities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     an_max_nof_abilities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_an_max_nof_abilities_get_f) (
    int unit);

/**
 * \brief returns define data of phy_map_granularity
 * Module - 'nif', Submodule - 'eth', data - 'phy_map_granularity'
 * Phy granularity of phy_map table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phy_map_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_phy_map_granularity_get_f) (
    int unit);

/**
 * \brief returns define data of is_400G_supported
 * Module - 'nif', Submodule - 'eth', data - 'is_400G_supported'
 * Marks if 400G speed port is supported for the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     is_400G_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_eth_is_400G_supported_get_f) (
    int unit);

/**
 * \brief get table start_tx_threshold_table entry 
 * TX threshold table of values per speed range
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Entry index
 * 
 * \return
 *     start_tx_threshold_table - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_start_tx_threshold_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_eth_start_tx_threshold_table_t *(
    *dnx_data_nif_eth_start_tx_threshold_table_get_f) (
    int unit,
    int idx);

/**
 * \brief get table pm_properties entry 
 * PM properties per PM
 * 
 * \param [in] unit - unit #
 * \param [in] pm_index - PM instance number.
 * 
 * \return
 *     pm_properties - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_pm_properties_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_eth_pm_properties_t *(
    *dnx_data_nif_eth_pm_properties_get_f) (
    int unit,
    int pm_index);

/**
 * \brief get table ethu_properties entry 
 * map ethu to PM instance
 * 
 * \param [in] unit - unit #
 * \param [in] ethu_index - ethu instance number.
 * 
 * \return
 *     ethu_properties - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_ethu_properties_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_eth_ethu_properties_t *(
    *dnx_data_nif_eth_ethu_properties_get_f) (
    int unit,
    int ethu_index);

/**
 * \brief get table phy_map entry 
 * Map phy index to ETHU index and PM index. Phy index granularity is defined by phy_map_granularity
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Entry Index
 * 
 * \return
 *     phy_map - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_phy_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_eth_phy_map_t *(
    *dnx_data_nif_eth_phy_map_get_f) (
    int unit,
    int idx);

/**
 * \brief get table max_speed entry 
 * Max speed for each ethernet interface type.
 * 
 * \param [in] unit - unit #
 * \param [in] lane_num - number of lanes for the given interface type.
 * 
 * \return
 *     max_speed - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_max_speed_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_eth_max_speed_t *(
    *dnx_data_nif_eth_max_speed_get_f) (
    int unit,
    int lane_num);

/**
 * \brief get table supported_interfaces entry 
 * Table with all the supported Ethernet interfaces for the device.
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Running index
 * 
 * \return
 *     supported_interfaces - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_supported_interfaces_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_eth_supported_interfaces_t *(
    *dnx_data_nif_eth_supported_interfaces_get_f) (
    int unit,
    int idx);

/**
 * \brief get table supported_an_abilities entry 
 * Table with all the supported AN ability for legacy PMs.
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Running index
 * 
 * \return
 *     supported_an_abilities - returns the relevant entry values grouped in struct - see dnx_data_nif_eth_supported_an_abilities_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_eth_supported_an_abilities_t *(
    *dnx_data_nif_eth_supported_an_abilities_get_f) (
    int unit,
    int idx);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - ETH:
 * {
 */
/**
 * \brief Interface for nif eth data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_eth_feature_get_f feature_get;
    /**
     * returns define data of cdu_nof
     */
    dnx_data_nif_eth_cdu_nof_get_f cdu_nof_get;
    /**
     * returns define data of clu_nof
     */
    dnx_data_nif_eth_clu_nof_get_f clu_nof_get;
    /**
     * returns define data of cdum_nof
     */
    dnx_data_nif_eth_cdum_nof_get_f cdum_nof_get;
    /**
     * returns define data of nof_pms_in_cdu
     */
    dnx_data_nif_eth_nof_pms_in_cdu_get_f nof_pms_in_cdu_get;
    /**
     * returns define data of nof_pms_in_clu
     */
    dnx_data_nif_eth_nof_pms_in_clu_get_f nof_pms_in_clu_get;
    /**
     * returns define data of total_nof_ethu_pms_in_device
     */
    dnx_data_nif_eth_total_nof_ethu_pms_in_device_get_f total_nof_ethu_pms_in_device_get;
    /**
     * returns define data of nof_cdu_lanes_in_pm
     */
    dnx_data_nif_eth_nof_cdu_lanes_in_pm_get_f nof_cdu_lanes_in_pm_get;
    /**
     * returns define data of nof_clu_lanes_in_pm
     */
    dnx_data_nif_eth_nof_clu_lanes_in_pm_get_f nof_clu_lanes_in_pm_get;
    /**
     * returns define data of nof_cdu_pms
     */
    dnx_data_nif_eth_nof_cdu_pms_get_f nof_cdu_pms_get;
    /**
     * returns define data of nof_clu_pms
     */
    dnx_data_nif_eth_nof_clu_pms_get_f nof_clu_pms_get;
    /**
     * returns define data of ethu_nof
     */
    dnx_data_nif_eth_ethu_nof_get_f ethu_nof_get;
    /**
     * returns define data of ethu_nof_per_core
     */
    dnx_data_nif_eth_ethu_nof_per_core_get_f ethu_nof_per_core_get;
    /**
     * returns define data of cdu_nof_per_core
     */
    dnx_data_nif_eth_cdu_nof_per_core_get_f cdu_nof_per_core_get;
    /**
     * returns define data of clu_nof_per_core
     */
    dnx_data_nif_eth_clu_nof_per_core_get_f clu_nof_per_core_get;
    /**
     * returns define data of nof_lanes_in_cdu
     */
    dnx_data_nif_eth_nof_lanes_in_cdu_get_f nof_lanes_in_cdu_get;
    /**
     * returns define data of nof_lanes_in_clu
     */
    dnx_data_nif_eth_nof_lanes_in_clu_get_f nof_lanes_in_clu_get;
    /**
     * returns define data of max_nof_lanes_in_ethu
     */
    dnx_data_nif_eth_max_nof_lanes_in_ethu_get_f max_nof_lanes_in_ethu_get;
    /**
     * returns define data of total_nof_cdu_lanes_in_device
     */
    dnx_data_nif_eth_total_nof_cdu_lanes_in_device_get_f total_nof_cdu_lanes_in_device_get;
    /**
     * returns define data of cdu_mac_mode_config_nof
     */
    dnx_data_nif_eth_cdu_mac_mode_config_nof_get_f cdu_mac_mode_config_nof_get;
    /**
     * returns define data of mac_mode_config_lanes_nof
     */
    dnx_data_nif_eth_mac_mode_config_lanes_nof_get_f mac_mode_config_lanes_nof_get;
    /**
     * returns define data of cdu_mac_nof
     */
    dnx_data_nif_eth_cdu_mac_nof_get_f cdu_mac_nof_get;
    /**
     * returns define data of mac_lanes_nof
     */
    dnx_data_nif_eth_mac_lanes_nof_get_f mac_lanes_nof_get;
    /**
     * returns define data of ethu_logical_fifo_nof
     */
    dnx_data_nif_eth_ethu_logical_fifo_nof_get_f ethu_logical_fifo_nof_get;
    /**
     * returns define data of cdu_memory_entries_nof
     */
    dnx_data_nif_eth_cdu_memory_entries_nof_get_f cdu_memory_entries_nof_get;
    /**
     * returns define data of clu_memory_entries_nof
     */
    dnx_data_nif_eth_clu_memory_entries_nof_get_f clu_memory_entries_nof_get;
    /**
     * returns define data of priority_group_nof_entries_min
     */
    dnx_data_nif_eth_priority_group_nof_entries_min_get_f priority_group_nof_entries_min_get;
    /**
     * returns define data of priority_groups_nof
     */
    dnx_data_nif_eth_priority_groups_nof_get_f priority_groups_nof_get;
    /**
     * returns define data of pad_size_min
     */
    dnx_data_nif_eth_pad_size_min_get_f pad_size_min_get;
    /**
     * returns define data of pad_size_max
     */
    dnx_data_nif_eth_pad_size_max_get_f pad_size_max_get;
    /**
     * returns define data of packet_size_max
     */
    dnx_data_nif_eth_packet_size_max_get_f packet_size_max_get;
    /**
     * returns define data of an_max_nof_abilities
     */
    dnx_data_nif_eth_an_max_nof_abilities_get_f an_max_nof_abilities_get;
    /**
     * returns define data of phy_map_granularity
     */
    dnx_data_nif_eth_phy_map_granularity_get_f phy_map_granularity_get;
    /**
     * returns define data of is_400G_supported
     */
    dnx_data_nif_eth_is_400G_supported_get_f is_400G_supported_get;
    /**
     * get table start_tx_threshold_table entry 
     */
    dnx_data_nif_eth_start_tx_threshold_table_get_f start_tx_threshold_table_get;
    /**
     * get general info table about table (for example key size)start_tx_threshold_table info
     */
    dnxc_data_table_info_get_f start_tx_threshold_table_info_get;
    /**
     * get table pm_properties entry 
     */
    dnx_data_nif_eth_pm_properties_get_f pm_properties_get;
    /**
     * get general info table about table (for example key size)pm_properties info
     */
    dnxc_data_table_info_get_f pm_properties_info_get;
    /**
     * get table ethu_properties entry 
     */
    dnx_data_nif_eth_ethu_properties_get_f ethu_properties_get;
    /**
     * get general info table about table (for example key size)ethu_properties info
     */
    dnxc_data_table_info_get_f ethu_properties_info_get;
    /**
     * get table phy_map entry 
     */
    dnx_data_nif_eth_phy_map_get_f phy_map_get;
    /**
     * get general info table about table (for example key size)phy_map info
     */
    dnxc_data_table_info_get_f phy_map_info_get;
    /**
     * get table max_speed entry 
     */
    dnx_data_nif_eth_max_speed_get_f max_speed_get;
    /**
     * get general info table about table (for example key size)max_speed info
     */
    dnxc_data_table_info_get_f max_speed_info_get;
    /**
     * get table supported_interfaces entry 
     */
    dnx_data_nif_eth_supported_interfaces_get_f supported_interfaces_get;
    /**
     * get general info table about table (for example key size)supported_interfaces info
     */
    dnxc_data_table_info_get_f supported_interfaces_info_get;
    /**
     * get table supported_an_abilities entry 
     */
    dnx_data_nif_eth_supported_an_abilities_get_f supported_an_abilities_get;
    /**
     * get general info table about table (for example key size)supported_an_abilities info
     */
    dnxc_data_table_info_get_f supported_an_abilities_info_get;
} dnx_data_if_nif_eth_t;

/*
 * }
 */

/*
 * SUBMODULE  - SIMULATOR:
 * data about phy simulators
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_nif_simulator_feature_nof
} dnx_data_nif_simulator_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_simulator_feature_get_f) (
    int unit,
    dnx_data_nif_simulator_feature_e feature);

/**
 * \brief returns numeric data of cdu_type
 * Module - 'nif', Submodule - 'simulator', data - 'cdu_type'
 * Type of CDU phy simulator
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_simulator_cdu_type_get_f) (
    int unit);

/**
 * \brief returns numeric data of clu_type
 * Module - 'nif', Submodule - 'simulator', data - 'clu_type'
 * Type of CLU phy simulator
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clu_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_simulator_clu_type_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - SIMULATOR:
 * {
 */
/**
 * \brief Interface for nif simulator data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_simulator_feature_get_f feature_get;
    /**
     * returns numeric data of cdu_type
     */
    dnx_data_nif_simulator_cdu_type_get_f cdu_type_get;
    /**
     * returns numeric data of clu_type
     */
    dnx_data_nif_simulator_clu_type_get_f clu_type_get;
} dnx_data_if_nif_simulator_t;

/*
 * }
 */

/*
 * SUBMODULE  - FLEXE:
 * data about FlexE
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule flexe table phy_info
 * Table info:
 * The PHY info for flexe physical interface
 */
typedef struct
{
    /**
     * PHY speed
     */
    int speed;
    /**
     * Min logical PHY ID
     */
    int min_logical_phy_id;
    /**
     * Max logical PHY ID
     */
    int max_logical_phy_id;
    /**
     * FlexE core port ID
     */
    int flexe_core_port[DNX_DATA_MAX_NIF_FLEXE_NOF_PCS];
} dnx_data_nif_flexe_phy_info_t;

/**
 * \brief Holds values of submodule flexe table start_tx_threshold_table
 * Table info:
 * TX threshold table of values per speed
 */
typedef struct
{
    /**
     * Interface rate
     */
    uint32 speed;
    /**
     * Start TX threshold for non-L1 ports
     */
    uint32 start_thr;
    /**
     * Start TX threshold for L1 ports
     */
    uint32 start_thr_for_l1;
} dnx_data_nif_flexe_start_tx_threshold_table_t;

/**
 * \brief Holds values of submodule flexe table supported_pms
 * Table info:
 * Supported PMs for each FEU
 */
typedef struct
{
    /**
     * The PMs connecting to the FEU
     */
    int nif_pms[DNX_DATA_MAX_NIF_ETH_TOTAL_NOF_ETHU_PMS_IN_DEVICE];
} dnx_data_nif_flexe_supported_pms_t;

/**
 * \brief Holds values of submodule flexe table l1_mismatch_rate_table
 * Table info:
 * Info for L1 mismatch rate feature
 */
typedef struct
{
    /**
     * Interface rate for ETH
     */
    uint32 eth_speed;
    /**
     * Interface rate for Client
     */
    uint32 client_speed;
    /**
     * TX threshold for RMC
     */
    uint32 tx_thr;
} dnx_data_nif_flexe_l1_mismatch_rate_table_t;

/**
 * \brief Holds values of submodule flexe table sar_cell_mode_to_size
 * Table info:
 * Convert SAR cell mode to packet size
 */
typedef struct
{
    /**
     * SAR packet size, including SAR OH
     */
    uint32 packet_size;
} dnx_data_nif_flexe_sar_cell_mode_to_size_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Is FlexE supported
     */
    dnx_data_nif_flexe_is_supported,
    /**
     * Is FlexE LED supported
     */
    dnx_data_nif_flexe_is_led_supported,
    /**
     * Is PRD bypassed on the device
     */
    dnx_data_nif_flexe_prd_is_bypassed,
    /**
     * 5G/10G client needs two slots in sb rx
     */
    dnx_data_nif_flexe_double_slots_for_small_client,
    /**
     * All clients need double slots in sb rx
     */
    dnx_data_nif_flexe_double_slots_for_all_client,
    /**
     * Reduce flexe capability to 200G
     */
    dnx_data_nif_flexe_half_capability,
    /**
     * RMC calendar is configured per RMC priority
     */
    dnx_data_nif_flexe_rmc_cal_per_priority,
    /**
     * Avoid verifying flexe total bandwidth
     */
    dnx_data_nif_flexe_avoid_bw_verification,
    /**
     * Indicate if per pcs port enable is supported
     */
    dnx_data_nif_flexe_pcs_port_enable_support,
    /**
     * If there is local fault, there is still Rx valid
     */
    dnx_data_nif_flexe_rx_valid_in_lf,
    /**
     * If mismatch rate is supported between ETH and Busb client for L1 switching
     */
    dnx_data_nif_flexe_l1_mismatch_rate_support,
    /**
     * Disable L1 mismatch rate checking when configuring L1 switching
     */
    dnx_data_nif_flexe_disable_l1_mismatch_rate_checking,
    /**
     * If configuring ILKN Burst size in FEU is supported
     */
    dnx_data_nif_flexe_feu_ilkn_burst_size_support,
    /**
     * Disable L1 switching related features
     */
    dnx_data_nif_flexe_disable_l1,
    /**
     * Disable OAM over flexe
     */
    dnx_data_nif_flexe_disable_oam_over_flexe,

    /**
     * Must be last one!
     */
    _dnx_data_nif_flexe_feature_nof
} dnx_data_nif_flexe_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_flexe_feature_get_f) (
    int unit,
    dnx_data_nif_flexe_feature_e feature);

/**
 * \brief returns define data of feu_nof
 * Module - 'nif', Submodule - 'flexe', data - 'feu_nof'
 * Number of FEU instances in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     feu_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_feu_nof_get_f) (
    int unit);

/**
 * \brief returns define data of nof_clients
 * Module - 'nif', Submodule - 'flexe', data - 'nof_clients'
 * Number of total clients, including 1588 and OAM channel
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_clients - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_clients_get_f) (
    int unit);

/**
 * \brief returns define data of nof_flexe_clients
 * Module - 'nif', Submodule - 'flexe', data - 'nof_flexe_clients'
 * Number of FlexE clients
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_flexe_clients - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_flexe_clients_get_f) (
    int unit);

/**
 * \brief returns define data of nof_special_clients
 * Module - 'nif', Submodule - 'flexe', data - 'nof_special_clients'
 * Number of special clients for 1588 and OAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_special_clients - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_special_clients_get_f) (
    int unit);

/**
 * \brief returns define data of nof_groups
 * Module - 'nif', Submodule - 'flexe', data - 'nof_groups'
 * Number of FlexE groups
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_groups - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_groups_get_f) (
    int unit);

/**
 * \brief returns define data of max_group_id
 * Module - 'nif', Submodule - 'flexe', data - 'max_group_id'
 * MAX FlexE group ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_group_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_max_group_id_get_f) (
    int unit);

/**
 * \brief returns define data of min_group_id
 * Module - 'nif', Submodule - 'flexe', data - 'min_group_id'
 * MIN FlexE group ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_group_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_min_group_id_get_f) (
    int unit);

/**
 * \brief returns define data of nb_tx_delay
 * Module - 'nif', Submodule - 'flexe', data - 'nb_tx_delay'
 * The TX delay in NB interface
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nb_tx_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nb_tx_delay_get_f) (
    int unit);

/**
 * \brief returns define data of nb_tx_fifo_th_for_first_read
 * Module - 'nif', Submodule - 'flexe', data - 'nb_tx_fifo_th_for_first_read'
 * first read from fifo will start only after data has accumulated in the fifo.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nb_tx_fifo_th_for_first_read - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nb_tx_fifo_th_for_first_read_get_f) (
    int unit);

/**
 * \brief returns define data of nof_pcs
 * Module - 'nif', Submodule - 'flexe', data - 'nof_pcs'
 * Number of FlexE pcs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pcs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_pcs_get_f) (
    int unit);

/**
 * \brief returns define data of nof_phy_speeds
 * Module - 'nif', Submodule - 'flexe', data - 'nof_phy_speeds'
 * Number of PHY speed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_phy_speeds - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_phy_speeds_get_f) (
    int unit);

/**
 * \brief returns define data of phy_speed_granularity
 * Module - 'nif', Submodule - 'flexe', data - 'phy_speed_granularity'
 * The granularity for PHY speed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phy_speed_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_phy_speed_granularity_get_f) (
    int unit);

/**
 * \brief returns define data of max_flexe_core_speed
 * Module - 'nif', Submodule - 'flexe', data - 'max_flexe_core_speed'
 * The max capacity for FlexE core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_flexe_core_speed - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_max_flexe_core_speed_get_f) (
    int unit);

/**
 * \brief returns define data of flexe_core_clock_source_pm
 * Module - 'nif', Submodule - 'flexe', data - 'flexe_core_clock_source_pm'
 * Define the clock source PM id for flexe core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flexe_core_clock_source_pm - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_flexe_core_clock_source_pm_get_f) (
    int unit);

/**
 * \brief returns define data of nof_logical_fifos
 * Module - 'nif', Submodule - 'flexe', data - 'nof_logical_fifos'
 * Number of FlexE client logical fifos
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_logical_fifos - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_logical_fifos_get_f) (
    int unit);

/**
 * \brief returns define data of sar_channel_base
 * Module - 'nif', Submodule - 'flexe', data - 'sar_channel_base'
 * base number for SAR channel
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sar_channel_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_sar_channel_base_get_f) (
    int unit);

/**
 * \brief returns define data of mac_channel_base
 * Module - 'nif', Submodule - 'flexe', data - 'mac_channel_base'
 * base number for MAC channel
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mac_channel_base - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_mac_channel_base_get_f) (
    int unit);

/**
 * \brief returns define data of client_speed_granularity
 * Module - 'nif', Submodule - 'flexe', data - 'client_speed_granularity'
 * The FlexE client speed granularity
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     client_speed_granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_client_speed_granularity_get_f) (
    int unit);

/**
 * \brief returns define data of nof_sb_rx_fifos
 * Module - 'nif', Submodule - 'flexe', data - 'nof_sb_rx_fifos'
 * Number of SB RX fifos
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sb_rx_fifos - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_sb_rx_fifos_get_f) (
    int unit);

/**
 * \brief returns define data of oam_client_channel
 * Module - 'nif', Submodule - 'flexe', data - 'oam_client_channel'
 * Client channel ID for OAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_client_channel - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_oam_client_channel_get_f) (
    int unit);

/**
 * \brief returns define data of ptp_client_channel
 * Module - 'nif', Submodule - 'flexe', data - 'ptp_client_channel'
 * Client channel ID for 1588
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ptp_client_channel - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_ptp_client_channel_get_f) (
    int unit);

/**
 * \brief returns define data of oam_tx_cal_slot
 * Module - 'nif', Submodule - 'flexe', data - 'oam_tx_cal_slot'
 * TMC Calendar slot for OAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_tx_cal_slot - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_oam_tx_cal_slot_get_f) (
    int unit);

/**
 * \brief returns define data of ptp_tx_cal_slot
 * Module - 'nif', Submodule - 'flexe', data - 'ptp_tx_cal_slot'
 * TMC Calendar slot for 1588
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ptp_tx_cal_slot - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_ptp_tx_cal_slot_get_f) (
    int unit);

/**
 * \brief returns define data of priority_groups_nof
 * Module - 'nif', Submodule - 'flexe', data - 'priority_groups_nof'
 * number of allowed priority groups per port (priority group = RMC)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority_groups_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_priority_groups_nof_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_slots
 * Module - 'nif', Submodule - 'flexe', data - 'max_nof_slots'
 * Define the MAX number of time slots
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_slots - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_max_nof_slots_get_f) (
    int unit);

/**
 * \brief returns define data of min_client_id
 * Module - 'nif', Submodule - 'flexe', data - 'min_client_id'
 * Define the Min client ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_client_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_min_client_id_get_f) (
    int unit);

/**
 * \brief returns define data of max_client_id
 * Module - 'nif', Submodule - 'flexe', data - 'max_client_id'
 * Define the MAX client ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_client_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_max_client_id_get_f) (
    int unit);

/**
 * \brief returns define data of ptp_channel_max_bandwidth
 * Module - 'nif', Submodule - 'flexe', data - 'ptp_channel_max_bandwidth'
 * Max bandwidth for PTP channel
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ptp_channel_max_bandwidth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_ptp_channel_max_bandwidth_get_f) (
    int unit);

/**
 * \brief returns define data of oam_channel_max_bandwidth
 * Module - 'nif', Submodule - 'flexe', data - 'oam_channel_max_bandwidth'
 * Max bandwidth for OAM channel
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_channel_max_bandwidth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_oam_channel_max_bandwidth_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mem_entries_per_slot
 * Module - 'nif', Submodule - 'flexe', data - 'nof_mem_entries_per_slot'
 * Nof memory entries per RMC slots
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mem_entries_per_slot - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_mem_entries_per_slot_get_f) (
    int unit);

/**
 * \brief returns define data of ptp_oam_fifo_entries_in_sb_rx
 * Module - 'nif', Submodule - 'flexe', data - 'ptp_oam_fifo_entries_in_sb_rx'
 * Nof FIFO entries for PTP OAM client in SB RX FIFO
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ptp_oam_fifo_entries_in_sb_rx - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_ptp_oam_fifo_entries_in_sb_rx_get_f) (
    int unit);

/**
 * \brief returns define data of nof_flexe_instances
 * Module - 'nif', Submodule - 'flexe', data - 'nof_flexe_instances'
 * Number of FlexE instances
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_flexe_instances - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_flexe_instances_get_f) (
    int unit);

/**
 * \brief returns define data of nof_flexe_lphys
 * Module - 'nif', Submodule - 'flexe', data - 'nof_flexe_lphys'
 * Number of FlexE logical PHYs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_flexe_lphys - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_flexe_lphys_get_f) (
    int unit);

/**
 * \brief returns define data of nof_sar_timeslots
 * Module - 'nif', Submodule - 'flexe', data - 'nof_sar_timeslots'
 * Number of FlexE SAR timeslots
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sar_timeslots - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_sar_timeslots_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mac_timeslots
 * Module - 'nif', Submodule - 'flexe', data - 'nof_mac_timeslots'
 * Number of FlexE MAC timeslots
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mac_timeslots - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_mac_timeslots_get_f) (
    int unit);

/**
 * \brief returns define data of distributed_ilu_id
 * Module - 'nif', Submodule - 'flexe', data - 'distributed_ilu_id'
 * ILKN CORE ID for FlexE distributed mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     distributed_ilu_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_distributed_ilu_id_get_f) (
    int unit);

/**
 * \brief returns define data of max_nif_rate_centralized
 * Module - 'nif', Submodule - 'flexe', data - 'max_nif_rate_centralized'
 * Max NIF capacity when flexe is enabled in centralized mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nif_rate_centralized - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_max_nif_rate_centralized_get_f) (
    int unit);

/**
 * \brief returns define data of rmc_cal_nof_slots
 * Module - 'nif', Submodule - 'flexe', data - 'rmc_cal_nof_slots'
 * Nof slots for RMC calendar
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmc_cal_nof_slots - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_rmc_cal_nof_slots_get_f) (
    int unit);

/**
 * \brief returns define data of max_nif_rate_distributed
 * Module - 'nif', Submodule - 'flexe', data - 'max_nif_rate_distributed'
 * Max NIF capacity when flexe is enabled in distributed mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nif_rate_distributed - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_max_nif_rate_distributed_get_f) (
    int unit);

/**
 * \brief returns define data of max_ilu_rate_distributed
 * Module - 'nif', Submodule - 'flexe', data - 'max_ilu_rate_distributed'
 * Max ILU capacity for flexe distributed interface
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_ilu_rate_distributed - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_max_ilu_rate_distributed_get_f) (
    int unit);

/**
 * \brief returns define data of ilkn_burst_size_in_feu
 * Module - 'nif', Submodule - 'flexe', data - 'ilkn_burst_size_in_feu'
 * Burst size for ILKN in FEU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_burst_size_in_feu - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_ilkn_burst_size_in_feu_get_f) (
    int unit);

/**
 * \brief returns define data of average_ipg_for_l1
 * Module - 'nif', Submodule - 'flexe', data - 'average_ipg_for_l1'
 * Average IPG in bits for L1 ports
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     average_ipg_for_l1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_average_ipg_for_l1_get_f) (
    int unit);

/**
 * \brief returns define data of mac_tx_threshold
 * Module - 'nif', Submodule - 'flexe', data - 'mac_tx_threshold'
 * Tx threshold in Tiny MAC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mac_tx_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_mac_tx_threshold_get_f) (
    int unit);

/**
 * \brief returns numeric data of flexe_mode
 * Module - 'nif', Submodule - 'flexe', data - 'flexe_mode'
 * FlexE mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flexe_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_flexe_mode_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_pms_per_feu
 * Module - 'nif', Submodule - 'flexe', data - 'nof_pms_per_feu'
 * Number of PMs for each FEU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pms_per_feu - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nof_pms_per_feu_get_f) (
    int unit);

/**
 * \brief returns numeric data of nb_tdm_slot_allocation_mode
 * Module - 'nif', Submodule - 'flexe', data - 'nb_tdm_slot_allocation_mode'
 * The NB TDM slot allocation mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nb_tdm_slot_allocation_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_flexe_nb_tdm_slot_allocation_mode_get_f) (
    int unit);

/**
 * \brief get table phy_info entry 
 * The PHY info for flexe physical interface
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Entry Index
 * 
 * \return
 *     phy_info - returns the relevant entry values grouped in struct - see dnx_data_nif_flexe_phy_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_flexe_phy_info_t *(
    *dnx_data_nif_flexe_phy_info_get_f) (
    int unit,
    int idx);

/**
 * \brief get table start_tx_threshold_table entry 
 * TX threshold table of values per speed
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Entry index
 * 
 * \return
 *     start_tx_threshold_table - returns the relevant entry values grouped in struct - see dnx_data_nif_flexe_start_tx_threshold_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_flexe_start_tx_threshold_table_t *(
    *dnx_data_nif_flexe_start_tx_threshold_table_get_f) (
    int unit,
    int idx);

/**
 * \brief get table supported_pms entry 
 * Supported PMs for each FEU
 * 
 * \param [in] unit - unit #
 * \param [in] feu_idx - FEU index
 * 
 * \return
 *     supported_pms - returns the relevant entry values grouped in struct - see dnx_data_nif_flexe_supported_pms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_flexe_supported_pms_t *(
    *dnx_data_nif_flexe_supported_pms_get_f) (
    int unit,
    int feu_idx);

/**
 * \brief get table l1_mismatch_rate_table entry 
 * Info for L1 mismatch rate feature
 * 
 * \param [in] unit - unit #
 * \param [in] idx - Entry index
 * 
 * \return
 *     l1_mismatch_rate_table - returns the relevant entry values grouped in struct - see dnx_data_nif_flexe_l1_mismatch_rate_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_flexe_l1_mismatch_rate_table_t *(
    *dnx_data_nif_flexe_l1_mismatch_rate_table_get_f) (
    int unit,
    int idx);

/**
 * \brief get table sar_cell_mode_to_size entry 
 * Convert SAR cell mode to packet size
 * 
 * \param [in] unit - unit #
 * \param [in] cell_mode - SAR cell mode
 * 
 * \return
 *     sar_cell_mode_to_size - returns the relevant entry values grouped in struct - see dnx_data_nif_flexe_sar_cell_mode_to_size_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_flexe_sar_cell_mode_to_size_t *(
    *dnx_data_nif_flexe_sar_cell_mode_to_size_get_f) (
    int unit,
    int cell_mode);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - FLEXE:
 * {
 */
/**
 * \brief Interface for nif flexe data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_flexe_feature_get_f feature_get;
    /**
     * returns define data of feu_nof
     */
    dnx_data_nif_flexe_feu_nof_get_f feu_nof_get;
    /**
     * returns define data of nof_clients
     */
    dnx_data_nif_flexe_nof_clients_get_f nof_clients_get;
    /**
     * returns define data of nof_flexe_clients
     */
    dnx_data_nif_flexe_nof_flexe_clients_get_f nof_flexe_clients_get;
    /**
     * returns define data of nof_special_clients
     */
    dnx_data_nif_flexe_nof_special_clients_get_f nof_special_clients_get;
    /**
     * returns define data of nof_groups
     */
    dnx_data_nif_flexe_nof_groups_get_f nof_groups_get;
    /**
     * returns define data of max_group_id
     */
    dnx_data_nif_flexe_max_group_id_get_f max_group_id_get;
    /**
     * returns define data of min_group_id
     */
    dnx_data_nif_flexe_min_group_id_get_f min_group_id_get;
    /**
     * returns define data of nb_tx_delay
     */
    dnx_data_nif_flexe_nb_tx_delay_get_f nb_tx_delay_get;
    /**
     * returns define data of nb_tx_fifo_th_for_first_read
     */
    dnx_data_nif_flexe_nb_tx_fifo_th_for_first_read_get_f nb_tx_fifo_th_for_first_read_get;
    /**
     * returns define data of nof_pcs
     */
    dnx_data_nif_flexe_nof_pcs_get_f nof_pcs_get;
    /**
     * returns define data of nof_phy_speeds
     */
    dnx_data_nif_flexe_nof_phy_speeds_get_f nof_phy_speeds_get;
    /**
     * returns define data of phy_speed_granularity
     */
    dnx_data_nif_flexe_phy_speed_granularity_get_f phy_speed_granularity_get;
    /**
     * returns define data of max_flexe_core_speed
     */
    dnx_data_nif_flexe_max_flexe_core_speed_get_f max_flexe_core_speed_get;
    /**
     * returns define data of flexe_core_clock_source_pm
     */
    dnx_data_nif_flexe_flexe_core_clock_source_pm_get_f flexe_core_clock_source_pm_get;
    /**
     * returns define data of nof_logical_fifos
     */
    dnx_data_nif_flexe_nof_logical_fifos_get_f nof_logical_fifos_get;
    /**
     * returns define data of sar_channel_base
     */
    dnx_data_nif_flexe_sar_channel_base_get_f sar_channel_base_get;
    /**
     * returns define data of mac_channel_base
     */
    dnx_data_nif_flexe_mac_channel_base_get_f mac_channel_base_get;
    /**
     * returns define data of client_speed_granularity
     */
    dnx_data_nif_flexe_client_speed_granularity_get_f client_speed_granularity_get;
    /**
     * returns define data of nof_sb_rx_fifos
     */
    dnx_data_nif_flexe_nof_sb_rx_fifos_get_f nof_sb_rx_fifos_get;
    /**
     * returns define data of oam_client_channel
     */
    dnx_data_nif_flexe_oam_client_channel_get_f oam_client_channel_get;
    /**
     * returns define data of ptp_client_channel
     */
    dnx_data_nif_flexe_ptp_client_channel_get_f ptp_client_channel_get;
    /**
     * returns define data of oam_tx_cal_slot
     */
    dnx_data_nif_flexe_oam_tx_cal_slot_get_f oam_tx_cal_slot_get;
    /**
     * returns define data of ptp_tx_cal_slot
     */
    dnx_data_nif_flexe_ptp_tx_cal_slot_get_f ptp_tx_cal_slot_get;
    /**
     * returns define data of priority_groups_nof
     */
    dnx_data_nif_flexe_priority_groups_nof_get_f priority_groups_nof_get;
    /**
     * returns define data of max_nof_slots
     */
    dnx_data_nif_flexe_max_nof_slots_get_f max_nof_slots_get;
    /**
     * returns define data of min_client_id
     */
    dnx_data_nif_flexe_min_client_id_get_f min_client_id_get;
    /**
     * returns define data of max_client_id
     */
    dnx_data_nif_flexe_max_client_id_get_f max_client_id_get;
    /**
     * returns define data of ptp_channel_max_bandwidth
     */
    dnx_data_nif_flexe_ptp_channel_max_bandwidth_get_f ptp_channel_max_bandwidth_get;
    /**
     * returns define data of oam_channel_max_bandwidth
     */
    dnx_data_nif_flexe_oam_channel_max_bandwidth_get_f oam_channel_max_bandwidth_get;
    /**
     * returns define data of nof_mem_entries_per_slot
     */
    dnx_data_nif_flexe_nof_mem_entries_per_slot_get_f nof_mem_entries_per_slot_get;
    /**
     * returns define data of ptp_oam_fifo_entries_in_sb_rx
     */
    dnx_data_nif_flexe_ptp_oam_fifo_entries_in_sb_rx_get_f ptp_oam_fifo_entries_in_sb_rx_get;
    /**
     * returns define data of nof_flexe_instances
     */
    dnx_data_nif_flexe_nof_flexe_instances_get_f nof_flexe_instances_get;
    /**
     * returns define data of nof_flexe_lphys
     */
    dnx_data_nif_flexe_nof_flexe_lphys_get_f nof_flexe_lphys_get;
    /**
     * returns define data of nof_sar_timeslots
     */
    dnx_data_nif_flexe_nof_sar_timeslots_get_f nof_sar_timeslots_get;
    /**
     * returns define data of nof_mac_timeslots
     */
    dnx_data_nif_flexe_nof_mac_timeslots_get_f nof_mac_timeslots_get;
    /**
     * returns define data of distributed_ilu_id
     */
    dnx_data_nif_flexe_distributed_ilu_id_get_f distributed_ilu_id_get;
    /**
     * returns define data of max_nif_rate_centralized
     */
    dnx_data_nif_flexe_max_nif_rate_centralized_get_f max_nif_rate_centralized_get;
    /**
     * returns define data of rmc_cal_nof_slots
     */
    dnx_data_nif_flexe_rmc_cal_nof_slots_get_f rmc_cal_nof_slots_get;
    /**
     * returns define data of max_nif_rate_distributed
     */
    dnx_data_nif_flexe_max_nif_rate_distributed_get_f max_nif_rate_distributed_get;
    /**
     * returns define data of max_ilu_rate_distributed
     */
    dnx_data_nif_flexe_max_ilu_rate_distributed_get_f max_ilu_rate_distributed_get;
    /**
     * returns define data of ilkn_burst_size_in_feu
     */
    dnx_data_nif_flexe_ilkn_burst_size_in_feu_get_f ilkn_burst_size_in_feu_get;
    /**
     * returns define data of average_ipg_for_l1
     */
    dnx_data_nif_flexe_average_ipg_for_l1_get_f average_ipg_for_l1_get;
    /**
     * returns define data of mac_tx_threshold
     */
    dnx_data_nif_flexe_mac_tx_threshold_get_f mac_tx_threshold_get;
    /**
     * returns numeric data of flexe_mode
     */
    dnx_data_nif_flexe_flexe_mode_get_f flexe_mode_get;
    /**
     * returns numeric data of nof_pms_per_feu
     */
    dnx_data_nif_flexe_nof_pms_per_feu_get_f nof_pms_per_feu_get;
    /**
     * returns numeric data of nb_tdm_slot_allocation_mode
     */
    dnx_data_nif_flexe_nb_tdm_slot_allocation_mode_get_f nb_tdm_slot_allocation_mode_get;
    /**
     * get table phy_info entry 
     */
    dnx_data_nif_flexe_phy_info_get_f phy_info_get;
    /**
     * get general info table about table (for example key size)phy_info info
     */
    dnxc_data_table_info_get_f phy_info_info_get;
    /**
     * get table start_tx_threshold_table entry 
     */
    dnx_data_nif_flexe_start_tx_threshold_table_get_f start_tx_threshold_table_get;
    /**
     * get general info table about table (for example key size)start_tx_threshold_table info
     */
    dnxc_data_table_info_get_f start_tx_threshold_table_info_get;
    /**
     * get table supported_pms entry 
     */
    dnx_data_nif_flexe_supported_pms_get_f supported_pms_get;
    /**
     * get general info table about table (for example key size)supported_pms info
     */
    dnxc_data_table_info_get_f supported_pms_info_get;
    /**
     * get table l1_mismatch_rate_table entry 
     */
    dnx_data_nif_flexe_l1_mismatch_rate_table_get_f l1_mismatch_rate_table_get;
    /**
     * get general info table about table (for example key size)l1_mismatch_rate_table info
     */
    dnxc_data_table_info_get_f l1_mismatch_rate_table_info_get;
    /**
     * get table sar_cell_mode_to_size entry 
     */
    dnx_data_nif_flexe_sar_cell_mode_to_size_get_f sar_cell_mode_to_size_get;
    /**
     * get general info table about table (for example key size)sar_cell_mode_to_size info
     */
    dnxc_data_table_info_get_f sar_cell_mode_to_size_info_get;
} dnx_data_if_nif_flexe_t;

/*
 * }
 */

/*
 * SUBMODULE  - PRD:
 * Priority Drop module
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule prd table ether_type
 * Table info:
 * Ether type codes and sizes for fixed ether types.
 */
typedef struct
{
    /**
     * the name of the Ether type.
     */
    char *ether_type_name;
    /**
     * the size in bytes of the ether type header.
     */
    uint32 ether_type_size;
} dnx_data_nif_prd_ether_type_t;

/**
 * \brief Holds values of submodule prd table port_profile_map
 * Table info:
 * Prd profiles information per IMB type
 */
typedef struct
{
    /**
     * Ether the prd profile mapping is supported per IMB type
     */
    uint32 is_supported;
    /**
     * Number of the prd profiles per IMB type
     */
    uint32 nof_profiles;
} dnx_data_nif_prd_port_profile_map_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Indicates if the rx rmc thresholds should be restamped.
     */
    dnx_data_nif_prd_is_rx_rmc_threshold_need_configuration,

    /**
     * Must be last one!
     */
    _dnx_data_nif_prd_feature_nof
} dnx_data_nif_prd_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_prd_feature_get_f) (
    int unit,
    dnx_data_nif_prd_feature_e feature);

/**
 * \brief returns define data of nof_control_frames
 * Module - 'nif', Submodule - 'prd', data - 'nof_control_frames'
 * Number of control frame properties to which each packet is compared in order to be recognized as control frame in the PRD parser
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_control_frames - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_nof_control_frames_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ether_type_codes
 * Module - 'nif', Submodule - 'prd', data - 'nof_ether_type_codes'
 * Number of ether types supported by the PRD Parser
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ether_type_codes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_nof_ether_type_codes_get_f) (
    int unit);

/**
 * \brief returns define data of nof_tcam_entries
 * Module - 'nif', Submodule - 'prd', data - 'nof_tcam_entries'
 * Number of entries in PRD Parser soft stage TCAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_tcam_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_nof_tcam_entries_get_f) (
    int unit);

/**
 * \brief returns define data of nof_mpls_special_labels
 * Module - 'nif', Submodule - 'prd', data - 'nof_mpls_special_labels'
 * Number of MPLS special labels recognized by the PRD parser
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_mpls_special_labels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_nof_mpls_special_labels_get_f) (
    int unit);

/**
 * \brief returns define data of nof_priorities
 * Module - 'nif', Submodule - 'prd', data - 'nof_priorities'
 * Number of PRD Priorities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_priorities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_nof_priorities_get_f) (
    int unit);

/**
 * \brief returns define data of custom_ether_type_code_min
 * Module - 'nif', Submodule - 'prd', data - 'custom_ether_type_code_min'
 * Min value of the configurable ether type codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     custom_ether_type_code_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_custom_ether_type_code_min_get_f) (
    int unit);

/**
 * \brief returns define data of custom_ether_type_code_max
 * Module - 'nif', Submodule - 'prd', data - 'custom_ether_type_code_max'
 * Max value of the configurable ether type codes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     custom_ether_type_code_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_custom_ether_type_code_max_get_f) (
    int unit);

/**
 * \brief returns define data of ether_type_code_max
 * Module - 'nif', Submodule - 'prd', data - 'ether_type_code_max'
 * Max value of the  ether type code
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ether_type_code_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_ether_type_code_max_get_f) (
    int unit);

/**
 * \brief returns define data of ether_type_max
 * Module - 'nif', Submodule - 'prd', data - 'ether_type_max'
 * Max value of the  ether type
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ether_type_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_ether_type_max_get_f) (
    int unit);

/**
 * \brief returns define data of rmc_threshold_max
 * Module - 'nif', Submodule - 'prd', data - 'rmc_threshold_max'
 * Max value of the ingress port drop threshold for RMC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmc_threshold_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_rmc_threshold_max_get_f) (
    int unit);

/**
 * \brief returns define data of cdu_rmc_threshold_max
 * Module - 'nif', Submodule - 'prd', data - 'cdu_rmc_threshold_max'
 * Max value of the ingress CDU port drop threshold for RMC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_rmc_threshold_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_cdu_rmc_threshold_max_get_f) (
    int unit);

/**
 * \brief returns define data of hrf_threshold_max
 * Module - 'nif', Submodule - 'prd', data - 'hrf_threshold_max'
 * Max value of the ingress port drop threshold for HRF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hrf_threshold_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_hrf_threshold_max_get_f) (
    int unit);

/**
 * \brief returns define data of mpls_special_label_max
 * Module - 'nif', Submodule - 'prd', data - 'mpls_special_label_max'
 * Max value of the  MPLS special label
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_special_label_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_mpls_special_label_max_get_f) (
    int unit);

/**
 * \brief returns define data of flex_key_offset_key_max
 * Module - 'nif', Submodule - 'prd', data - 'flex_key_offset_key_max'
 * Max value of the  FLEX Key offset key
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flex_key_offset_key_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_flex_key_offset_key_max_get_f) (
    int unit);

/**
 * \brief returns define data of flex_key_offset_result_max
 * Module - 'nif', Submodule - 'prd', data - 'flex_key_offset_result_max'
 * Max value of the  FLEX Key offset result
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flex_key_offset_result_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_flex_key_offset_result_max_get_f) (
    int unit);

/**
 * \brief returns define data of tpid_max
 * Module - 'nif', Submodule - 'prd', data - 'tpid_max'
 * Max value of the  tpid
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tpid_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_tpid_max_get_f) (
    int unit);

/**
 * \brief returns define data of nof_clu_port_profiles
 * Module - 'nif', Submodule - 'prd', data - 'nof_clu_port_profiles'
 * Number of prd porfiles per CLU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_clu_port_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_nof_clu_port_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_feu_port_profiles
 * Module - 'nif', Submodule - 'prd', data - 'nof_feu_port_profiles'
 * Number of prd porfiles per FEU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_feu_port_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_prd_nof_feu_port_profiles_get_f) (
    int unit);

/**
 * \brief get table ether_type entry 
 * Ether type codes and sizes for fixed ether types.
 * 
 * \param [in] unit - unit #
 * \param [in] ether_type_code - Ether type code in PRD parser
 * 
 * \return
 *     ether_type - returns the relevant entry values grouped in struct - see dnx_data_nif_prd_ether_type_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_prd_ether_type_t *(
    *dnx_data_nif_prd_ether_type_get_f) (
    int unit,
    int ether_type_code);

/**
 * \brief get table port_profile_map entry 
 * Prd profiles information per IMB type
 * 
 * \param [in] unit - unit #
 * \param [in] type - IMB type
 * 
 * \return
 *     port_profile_map - returns the relevant entry values grouped in struct - see dnx_data_nif_prd_port_profile_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_prd_port_profile_map_t *(
    *dnx_data_nif_prd_port_profile_map_get_f) (
    int unit,
    int type);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - PRD:
 * {
 */
/**
 * \brief Interface for nif prd data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_prd_feature_get_f feature_get;
    /**
     * returns define data of nof_control_frames
     */
    dnx_data_nif_prd_nof_control_frames_get_f nof_control_frames_get;
    /**
     * returns define data of nof_ether_type_codes
     */
    dnx_data_nif_prd_nof_ether_type_codes_get_f nof_ether_type_codes_get;
    /**
     * returns define data of nof_tcam_entries
     */
    dnx_data_nif_prd_nof_tcam_entries_get_f nof_tcam_entries_get;
    /**
     * returns define data of nof_mpls_special_labels
     */
    dnx_data_nif_prd_nof_mpls_special_labels_get_f nof_mpls_special_labels_get;
    /**
     * returns define data of nof_priorities
     */
    dnx_data_nif_prd_nof_priorities_get_f nof_priorities_get;
    /**
     * returns define data of custom_ether_type_code_min
     */
    dnx_data_nif_prd_custom_ether_type_code_min_get_f custom_ether_type_code_min_get;
    /**
     * returns define data of custom_ether_type_code_max
     */
    dnx_data_nif_prd_custom_ether_type_code_max_get_f custom_ether_type_code_max_get;
    /**
     * returns define data of ether_type_code_max
     */
    dnx_data_nif_prd_ether_type_code_max_get_f ether_type_code_max_get;
    /**
     * returns define data of ether_type_max
     */
    dnx_data_nif_prd_ether_type_max_get_f ether_type_max_get;
    /**
     * returns define data of rmc_threshold_max
     */
    dnx_data_nif_prd_rmc_threshold_max_get_f rmc_threshold_max_get;
    /**
     * returns define data of cdu_rmc_threshold_max
     */
    dnx_data_nif_prd_cdu_rmc_threshold_max_get_f cdu_rmc_threshold_max_get;
    /**
     * returns define data of hrf_threshold_max
     */
    dnx_data_nif_prd_hrf_threshold_max_get_f hrf_threshold_max_get;
    /**
     * returns define data of mpls_special_label_max
     */
    dnx_data_nif_prd_mpls_special_label_max_get_f mpls_special_label_max_get;
    /**
     * returns define data of flex_key_offset_key_max
     */
    dnx_data_nif_prd_flex_key_offset_key_max_get_f flex_key_offset_key_max_get;
    /**
     * returns define data of flex_key_offset_result_max
     */
    dnx_data_nif_prd_flex_key_offset_result_max_get_f flex_key_offset_result_max_get;
    /**
     * returns define data of tpid_max
     */
    dnx_data_nif_prd_tpid_max_get_f tpid_max_get;
    /**
     * returns define data of nof_clu_port_profiles
     */
    dnx_data_nif_prd_nof_clu_port_profiles_get_f nof_clu_port_profiles_get;
    /**
     * returns define data of nof_feu_port_profiles
     */
    dnx_data_nif_prd_nof_feu_port_profiles_get_f nof_feu_port_profiles_get;
    /**
     * get table ether_type entry 
     */
    dnx_data_nif_prd_ether_type_get_f ether_type_get;
    /**
     * get general info table about table (for example key size)ether_type info
     */
    dnxc_data_table_info_get_f ether_type_info_get;
    /**
     * get table port_profile_map entry 
     */
    dnx_data_nif_prd_port_profile_map_get_f port_profile_map_get;
    /**
     * get general info table about table (for example key size)port_profile_map info
     */
    dnxc_data_table_info_get_f port_profile_map_info_get;
} dnx_data_if_nif_prd_t;

/*
 * }
 */

/*
 * SUBMODULE  - PORTMOD:
 * information required for portmod.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule portmod table pm_types_and_interfaces
 * Table info:
 * fixed types and interfaces per device
 */
typedef struct
{
    /**
     * pm type
     */
    portmod_dispatch_type_t type;
    /**
     * the number of instances of the specified pm type
     */
    int instances;
} dnx_data_nif_portmod_pm_types_and_interfaces_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_nif_portmod_feature_nof
} dnx_data_nif_portmod_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_portmod_feature_get_f) (
    int unit,
    dnx_data_nif_portmod_feature_e feature);

/**
 * \brief returns define data of pm_types_nof
 * Module - 'nif', Submodule - 'portmod', data - 'pm_types_nof'
 * Number of pm types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_types_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_portmod_pm_types_nof_get_f) (
    int unit);

/**
 * \brief get table pm_types_and_interfaces entry 
 * fixed types and interfaces per device
 * 
 * \param [in] unit - unit #
 * \param [in] index - pm type index
 * 
 * \return
 *     pm_types_and_interfaces - returns the relevant entry values grouped in struct - see dnx_data_nif_portmod_pm_types_and_interfaces_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_nif_portmod_pm_types_and_interfaces_t *(
    *dnx_data_nif_portmod_pm_types_and_interfaces_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - PORTMOD:
 * {
 */
/**
 * \brief Interface for nif portmod data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_portmod_feature_get_f feature_get;
    /**
     * returns define data of pm_types_nof
     */
    dnx_data_nif_portmod_pm_types_nof_get_f pm_types_nof_get;
    /**
     * get table pm_types_and_interfaces entry 
     */
    dnx_data_nif_portmod_pm_types_and_interfaces_get_f pm_types_and_interfaces_get;
    /**
     * get general info table about table (for example key size)pm_types_and_interfaces info
     */
    dnxc_data_table_info_get_f pm_types_and_interfaces_info_get;
} dnx_data_if_nif_portmod_t;

/*
 * }
 */

/*
 * SUBMODULE  - SCHEDULER:
 * data about NIF schedulder
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does scheduler decrement credits when read enable is issued toward RMC
     */
    dnx_data_nif_scheduler_decrement_credit_on_read_enable,

    /**
     * Must be last one!
     */
    _dnx_data_nif_scheduler_feature_nof
} dnx_data_nif_scheduler_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_scheduler_feature_get_f) (
    int unit,
    dnx_data_nif_scheduler_feature_e feature);

/**
 * \brief returns define data of rate_per_ethu_bit
 * Module - 'nif', Submodule - 'scheduler', data - 'rate_per_ethu_bit'
 * The Rate equivalent to 1 weight bit of ETHU scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rate_per_ethu_bit - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_scheduler_rate_per_ethu_bit_get_f) (
    int unit);

/**
 * \brief returns define data of rate_per_ilu_bit
 * Module - 'nif', Submodule - 'scheduler', data - 'rate_per_ilu_bit'
 * The Rate equivalent to 1 weight bit of ILU scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rate_per_ilu_bit - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_scheduler_rate_per_ilu_bit_get_f) (
    int unit);

/**
 * \brief returns define data of rate_per_cdu_rmc_bit
 * Module - 'nif', Submodule - 'scheduler', data - 'rate_per_cdu_rmc_bit'
 * The Rate equivalent to 1 bit of CDU RMC scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rate_per_cdu_rmc_bit - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_scheduler_rate_per_cdu_rmc_bit_get_f) (
    int unit);

/**
 * \brief returns define data of rate_per_clu_rmc_bit
 * Module - 'nif', Submodule - 'scheduler', data - 'rate_per_clu_rmc_bit'
 * The Rate equivalent to 1 bit of CLU RMC scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rate_per_clu_rmc_bit - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_scheduler_rate_per_clu_rmc_bit_get_f) (
    int unit);

/**
 * \brief returns define data of nof_weight_bits
 * Module - 'nif', Submodule - 'scheduler', data - 'nof_weight_bits'
 * Number of weight bits in UNIT scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_weight_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_scheduler_nof_weight_bits_get_f) (
    int unit);

/**
 * \brief returns define data of nof_rmc_bits
 * Module - 'nif', Submodule - 'scheduler', data - 'nof_rmc_bits'
 * Number of bits in RMC scheduler
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rmc_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_scheduler_nof_rmc_bits_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - SCHEDULER:
 * {
 */
/**
 * \brief Interface for nif scheduler data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_scheduler_feature_get_f feature_get;
    /**
     * returns define data of rate_per_ethu_bit
     */
    dnx_data_nif_scheduler_rate_per_ethu_bit_get_f rate_per_ethu_bit_get;
    /**
     * returns define data of rate_per_ilu_bit
     */
    dnx_data_nif_scheduler_rate_per_ilu_bit_get_f rate_per_ilu_bit_get;
    /**
     * returns define data of rate_per_cdu_rmc_bit
     */
    dnx_data_nif_scheduler_rate_per_cdu_rmc_bit_get_f rate_per_cdu_rmc_bit_get;
    /**
     * returns define data of rate_per_clu_rmc_bit
     */
    dnx_data_nif_scheduler_rate_per_clu_rmc_bit_get_f rate_per_clu_rmc_bit_get;
    /**
     * returns define data of nof_weight_bits
     */
    dnx_data_nif_scheduler_nof_weight_bits_get_f nof_weight_bits_get;
    /**
     * returns define data of nof_rmc_bits
     */
    dnx_data_nif_scheduler_nof_rmc_bits_get_f nof_rmc_bits_get;
} dnx_data_if_nif_scheduler_t;

/*
 * }
 */

/*
 * SUBMODULE  - DBAL:
 * NIF dbal defines
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Configuration of what MAC is active exists
     */
    dnx_data_nif_dbal_active_mac_configure,

    /**
     * Must be last one!
     */
    _dnx_data_nif_dbal_feature_nof
} dnx_data_nif_dbal_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_dbal_feature_get_f) (
    int unit,
    dnx_data_nif_dbal_feature_e feature);

/**
 * \brief returns define data of cdu_rx_rmc_entry_size
 * Module - 'nif', Submodule - 'dbal', data - 'cdu_rx_rmc_entry_size'
 * size of the cdu rmc fifo entry size in bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_rx_rmc_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_cdu_rx_rmc_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of clu_rx_rmc_entry_size
 * Module - 'nif', Submodule - 'dbal', data - 'clu_rx_rmc_entry_size'
 * size of the clu rmc fifo entry size in bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clu_rx_rmc_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_clu_rx_rmc_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of cdu_tx_start_threshold_entry_size
 * Module - 'nif', Submodule - 'dbal', data - 'cdu_tx_start_threshold_entry_size'
 * size of the cdu tx start threshold entry size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_tx_start_threshold_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_cdu_tx_start_threshold_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of clu_tx_start_threshold_entry_size
 * Module - 'nif', Submodule - 'dbal', data - 'clu_tx_start_threshold_entry_size'
 * size of the clu tx start threshold entry size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clu_tx_start_threshold_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_clu_tx_start_threshold_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of ilu_burst_min_entry_size
 * Module - 'nif', Submodule - 'dbal', data - 'ilu_burst_min_entry_size'
 * size of the ilu burst min entry size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilu_burst_min_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_ilu_burst_min_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of ethu_rx_rmc_counter_entry_size
 * Module - 'nif', Submodule - 'dbal', data - 'ethu_rx_rmc_counter_entry_size'
 * ethu rx rmc counter entry size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ethu_rx_rmc_counter_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_ethu_rx_rmc_counter_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of cdu_lane_fifo_level_and_occupancy_entry_size
 * Module - 'nif', Submodule - 'dbal', data - 'cdu_lane_fifo_level_and_occupancy_entry_size'
 * cdu nif status fifo level and occupancy entry size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cdu_lane_fifo_level_and_occupancy_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_cdu_lane_fifo_level_and_occupancy_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of clu_lane_fifo_level_and_occupancy_entry_size
 * Module - 'nif', Submodule - 'dbal', data - 'clu_lane_fifo_level_and_occupancy_entry_size'
 * clu nif status fifo level and occupancy entry size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     clu_lane_fifo_level_and_occupancy_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_clu_lane_fifo_level_and_occupancy_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of sch_cnt_dec_threshold_bit_size
 * Module - 'nif', Submodule - 'dbal', data - 'sch_cnt_dec_threshold_bit_size'
 * nof bits in SCH_CNT_DEC_THRESHOLD field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sch_cnt_dec_threshold_bit_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_sch_cnt_dec_threshold_bit_size_get_f) (
    int unit);

/**
 * \brief returns define data of tx_credits_bits
 * Module - 'nif', Submodule - 'dbal', data - 'tx_credits_bits'
 * nof bits in TX credit value field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tx_credits_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_nif_dbal_tx_credits_bits_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - DBAL:
 * {
 */
/**
 * \brief Interface for nif dbal data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_dbal_feature_get_f feature_get;
    /**
     * returns define data of cdu_rx_rmc_entry_size
     */
    dnx_data_nif_dbal_cdu_rx_rmc_entry_size_get_f cdu_rx_rmc_entry_size_get;
    /**
     * returns define data of clu_rx_rmc_entry_size
     */
    dnx_data_nif_dbal_clu_rx_rmc_entry_size_get_f clu_rx_rmc_entry_size_get;
    /**
     * returns define data of cdu_tx_start_threshold_entry_size
     */
    dnx_data_nif_dbal_cdu_tx_start_threshold_entry_size_get_f cdu_tx_start_threshold_entry_size_get;
    /**
     * returns define data of clu_tx_start_threshold_entry_size
     */
    dnx_data_nif_dbal_clu_tx_start_threshold_entry_size_get_f clu_tx_start_threshold_entry_size_get;
    /**
     * returns define data of ilu_burst_min_entry_size
     */
    dnx_data_nif_dbal_ilu_burst_min_entry_size_get_f ilu_burst_min_entry_size_get;
    /**
     * returns define data of ethu_rx_rmc_counter_entry_size
     */
    dnx_data_nif_dbal_ethu_rx_rmc_counter_entry_size_get_f ethu_rx_rmc_counter_entry_size_get;
    /**
     * returns define data of cdu_lane_fifo_level_and_occupancy_entry_size
     */
    dnx_data_nif_dbal_cdu_lane_fifo_level_and_occupancy_entry_size_get_f cdu_lane_fifo_level_and_occupancy_entry_size_get;
    /**
     * returns define data of clu_lane_fifo_level_and_occupancy_entry_size
     */
    dnx_data_nif_dbal_clu_lane_fifo_level_and_occupancy_entry_size_get_f clu_lane_fifo_level_and_occupancy_entry_size_get;
    /**
     * returns define data of sch_cnt_dec_threshold_bit_size
     */
    dnx_data_nif_dbal_sch_cnt_dec_threshold_bit_size_get_f sch_cnt_dec_threshold_bit_size_get;
    /**
     * returns define data of tx_credits_bits
     */
    dnx_data_nif_dbal_tx_credits_bits_get_f tx_credits_bits_get;
} dnx_data_if_nif_dbal_t;

/*
 * }
 */

/*
 * SUBMODULE  - FEATURES:
 * Per devices features
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    dnx_data_nif_features_pm_mode_0122_invalid,

    /**
     * Must be last one!
     */
    _dnx_data_nif_features_feature_nof
} dnx_data_nif_features_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_nif_features_feature_get_f) (
    int unit,
    dnx_data_nif_features_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_NIF - FEATURES:
 * {
 */
/**
 * \brief Interface for nif features data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_nif_features_feature_get_f feature_get;
} dnx_data_if_nif_features_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_NIF:
 * {
 */
/**
 * \brief Interface for nif data
 */
typedef struct
{
    /**
     * Interface for nif global data
     */
    dnx_data_if_nif_global_t global;
    /**
     * Interface for nif phys data
     */
    dnx_data_if_nif_phys_t phys;
    /**
     * Interface for nif ilkn data
     */
    dnx_data_if_nif_ilkn_t ilkn;
    /**
     * Interface for nif eth data
     */
    dnx_data_if_nif_eth_t eth;
    /**
     * Interface for nif simulator data
     */
    dnx_data_if_nif_simulator_t simulator;
    /**
     * Interface for nif flexe data
     */
    dnx_data_if_nif_flexe_t flexe;
    /**
     * Interface for nif prd data
     */
    dnx_data_if_nif_prd_t prd;
    /**
     * Interface for nif portmod data
     */
    dnx_data_if_nif_portmod_t portmod;
    /**
     * Interface for nif scheduler data
     */
    dnx_data_if_nif_scheduler_t scheduler;
    /**
     * Interface for nif dbal data
     */
    dnx_data_if_nif_dbal_t dbal;
    /**
     * Interface for nif features data
     */
    dnx_data_if_nif_features_t features;
} dnx_data_if_nif_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_nif_t dnx_data_nif;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_NIF_H_*/
/* *INDENT-ON* */
