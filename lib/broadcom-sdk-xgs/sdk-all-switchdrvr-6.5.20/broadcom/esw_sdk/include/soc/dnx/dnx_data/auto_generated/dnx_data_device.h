/** \file dnx_data_device.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_DEVICE_H_
/*{*/
#define _DNX_DATA_DEVICE_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/access.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_device.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_device
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_device_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * General attributes
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule general table ecc_err_masking
 * Table info:
 * Table containing all registers and fields that need their ECC errors to be masked due to issues when reading
 */
typedef struct
{
    /**
     * Register for masking 1 bit ECC errors
     */
    int ecc_1bit_err_mask_reg;
    /**
     * Array of fields for masking 1 bit ECC errors. Last element of the array myst always be -1.
     */
    int ecc_1bit_err_field[DNX_MAX_NOF_ECC_ERR_MEMS];
    /**
     * Register for masking 2 bit ECC errors
     */
    int ecc_2bit_err_mask_reg;
    /**
     * Array of fields for masking 2 bit ECC errors. Last element of the array myst always be -1.
     */
    int ecc_2bit_err_field[DNX_MAX_NOF_ECC_ERR_MEMS];
} dnx_data_device_general_ecc_err_masking_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Is device in production level quality.
     */
    dnx_data_device_general_production_ready,
    /**
     * Init the device without hard reset.
     */
    dnx_data_device_general_hard_reset_disable,
    /**
     * Is device multi core
     */
    dnx_data_device_general_multi_core,
    /**
     * RQP ecc error exist
     */
    dnx_data_device_general_rqp_ecc_err_exist,
    /**
     * New crc32 calculation
     */
    dnx_data_device_general_new_crc32_calc,
    /**
     * Protection state ignoring capability
     */
    dnx_data_device_general_protection_state_ignore,
    /**
     * Indicate if there is delay when sending traffic, updating signals, running specific cases
     */
    dnx_data_device_general_delay_exist,
    /**
     * Indicate if SerDes is supported
     */
    dnx_data_device_general_serdes_support,
    /**
     * Indicate if snooping is supported
     */
    dnx_data_device_general_snooping_support,
    /**
     * Indicate if mirroring is supported
     */
    dnx_data_device_general_mirroring_support,
    /**
     * Indicate if both injection to any place in the pipe and injection via any port is supported
     */
    dnx_data_device_general_injection_support,
    /**
     * Indicate if fabric is supported
     */
    dnx_data_device_general_fabric_support,
    /**
     * Indicate if flexe is supported
     */
    dnx_data_device_general_flexe_support,
    /**
     * Indicate if cmic is supported
     */
    dnx_data_device_general_cmic_support,
    /**
     * Indicate if real interrupts are supported
     */
    dnx_data_device_general_real_interrupts_support,
    /**
     * Indicate if i2c is supported
     */
    dnx_data_device_general_i2c_hw_support,
    /**
     * Indicate if ring protection is supported
     */
    dnx_data_device_general_ring_protection_hw_support,
    /**
     * Indicate if hw is supported
     */
    dnx_data_device_general_hw_support,
    /**
     * Indicate if extended encapsulation
     */
    dnx_data_device_general_ext_encap_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_device_general_feature_nof
} dnx_data_device_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_device_general_feature_get_f) (
    int unit,
    dnx_data_device_general_feature_e feature);

/**
 * \brief returns define data of max_nof_system_ports
 * Module - 'device', Submodule - 'general', data - 'max_nof_system_ports'
 * Max number of system ports, may use software to indicate invalid system port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_system_ports - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_max_nof_system_ports_get_f) (
    int unit);

/**
 * \brief returns define data of invalid_system_port
 * Module - 'device', Submodule - 'general', data - 'invalid_system_port'
 * invalid system port - defined as the last system port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     invalid_system_port - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_invalid_system_port_get_f) (
    int unit);

/**
 * \brief returns define data of fmq_system_port
 * Module - 'device', Submodule - 'general', data - 'fmq_system_port'
 * FMQ reserved system port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmq_system_port - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_fmq_system_port_get_f) (
    int unit);

/**
 * \brief returns define data of invalid_fap_id
 * Module - 'device', Submodule - 'general', data - 'invalid_fap_id'
 * invalid FAP id - defined as the last FAP id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     invalid_fap_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_invalid_fap_id_get_f) (
    int unit);

/**
 * \brief returns define data of fap_ids_per_core_bits
 * Module - 'device', Submodule - 'general', data - 'fap_ids_per_core_bits'
 * number of bits in FAP IDs per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fap_ids_per_core_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_fap_ids_per_core_bits_get_f) (
    int unit);

/**
 * \brief returns define data of nof_cores
 * Module - 'device', Submodule - 'general', data - 'nof_cores'
 * Number of cores in the device.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_nof_cores_get_f) (
    int unit);

/**
 * \brief returns define data of nof_cores_for_traffic
 * Module - 'device', Submodule - 'general', data - 'nof_cores_for_traffic'
 * Number of cores in the device used for traffic.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cores_for_traffic - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_nof_cores_for_traffic_get_f) (
    int unit);

/**
 * \brief returns define data of nof_sub_units
 * Module - 'device', Submodule - 'general', data - 'nof_sub_units'
 * Number of sub units in the device.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sub_units - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_nof_sub_units_get_f) (
    int unit);

/**
 * \brief returns numeric data of core_max_nof_bits
 * Module - 'device', Submodule - 'general', data - 'core_max_nof_bits'
 * Max number of cores bits to represent core. should be log2(nof_cores)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_max_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_core_max_nof_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of max_nof_fap_ids_per_core
 * Module - 'device', Submodule - 'general', data - 'max_nof_fap_ids_per_core'
 * maximal number of FAP IDs per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_fap_ids_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_max_nof_fap_ids_per_core_get_f) (
    int unit);

/**
 * \brief returns numeric data of max_nof_fap_ids_per_device
 * Module - 'device', Submodule - 'general', data - 'max_nof_fap_ids_per_device'
 * maximal number of FAP IDs per device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_fap_ids_per_device - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_max_nof_fap_ids_per_device_get_f) (
    int unit);

/**
 * \brief returns numeric data of core_clock_khz
 * Module - 'device', Submodule - 'general', data - 'core_clock_khz'
 * Core clock frequency [KHZ]
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_clock_khz - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_core_clock_khz_get_f) (
    int unit);

/**
 * \brief returns numeric data of system_ref_core_clock_khz
 * Module - 'device', Submodule - 'general', data - 'system_ref_core_clock_khz'
 * Specifies system reference clock speed in kHz.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     system_ref_core_clock_khz - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_system_ref_core_clock_khz_get_f) (
    int unit);

/**
 * \brief returns numeric data of ref_core_clock_mhz
 * Module - 'device', Submodule - 'general', data - 'ref_core_clock_mhz'
 * Reference clock comes from the board
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ref_core_clock_mhz - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_ref_core_clock_mhz_get_f) (
    int unit);

/**
 * \brief returns numeric data of bus_size_in_bits
 * Module - 'device', Submodule - 'general', data - 'bus_size_in_bits'
 * Core bus size in bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bus_size_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_bus_size_in_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of maximal_core_bandwidth_kbps
 * Module - 'device', Submodule - 'general', data - 'maximal_core_bandwidth_kbps'
 * Maximal core bandwidth in Kbits per second
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     maximal_core_bandwidth_kbps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_maximal_core_bandwidth_kbps_get_f) (
    int unit);

/**
 * \brief returns numeric data of packet_per_clock
 * Module - 'device', Submodule - 'general', data - 'packet_per_clock'
 * Core packets per clock
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_per_clock - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_packet_per_clock_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_faps
 * Module - 'device', Submodule - 'general', data - 'nof_faps'
 * Number of supported faps in the system.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_faps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_nof_faps_get_f) (
    int unit);

/**
 * \brief returns numeric data of device_id
 * Module - 'device', Submodule - 'general', data - 'device_id'
 * BCM Device ID (8XXX)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     device_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_device_id_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_sku_bits
 * Module - 'device', Submodule - 'general', data - 'nof_sku_bits'
 * nof LSB bits of device_is dedicated for SKU
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sku_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_nof_sku_bits_get_f) (
    int unit);

/**
 * \brief returns numeric data of bist_enable
 * Module - 'device', Submodule - 'general', data - 'bist_enable'
 * Determines if to run Memory Built-In Self-Test (MBIST) of internal memories (tables) during startup.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bist_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_bist_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_bits_for_nof_cores
 * Module - 'device', Submodule - 'general', data - 'nof_bits_for_nof_cores'
 * Number of bits to represent core.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_for_nof_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_general_nof_bits_for_nof_cores_get_f) (
    int unit);

/**
 * \brief get table ecc_err_masking entry 
 * Table containing all registers and fields that need their ECC errors to be masked due to issues when reading
 * 
 * \param [in] unit - unit #
 * \param [in] block_type - HW Block type
 * 
 * \return
 *     ecc_err_masking - returns the relevant entry values grouped in struct - see dnx_data_device_general_ecc_err_masking_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_device_general_ecc_err_masking_t *(
    *dnx_data_device_general_ecc_err_masking_get_f) (
    int unit,
    int block_type);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEVICE - GENERAL:
 * {
 */
/**
 * \brief Interface for device general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_device_general_feature_get_f feature_get;
    /**
     * returns define data of max_nof_system_ports
     */
    dnx_data_device_general_max_nof_system_ports_get_f max_nof_system_ports_get;
    /**
     * returns define data of invalid_system_port
     */
    dnx_data_device_general_invalid_system_port_get_f invalid_system_port_get;
    /**
     * returns define data of fmq_system_port
     */
    dnx_data_device_general_fmq_system_port_get_f fmq_system_port_get;
    /**
     * returns define data of invalid_fap_id
     */
    dnx_data_device_general_invalid_fap_id_get_f invalid_fap_id_get;
    /**
     * returns define data of fap_ids_per_core_bits
     */
    dnx_data_device_general_fap_ids_per_core_bits_get_f fap_ids_per_core_bits_get;
    /**
     * returns define data of nof_cores
     */
    dnx_data_device_general_nof_cores_get_f nof_cores_get;
    /**
     * returns define data of nof_cores_for_traffic
     */
    dnx_data_device_general_nof_cores_for_traffic_get_f nof_cores_for_traffic_get;
    /**
     * returns define data of nof_sub_units
     */
    dnx_data_device_general_nof_sub_units_get_f nof_sub_units_get;
    /**
     * returns numeric data of core_max_nof_bits
     */
    dnx_data_device_general_core_max_nof_bits_get_f core_max_nof_bits_get;
    /**
     * returns numeric data of max_nof_fap_ids_per_core
     */
    dnx_data_device_general_max_nof_fap_ids_per_core_get_f max_nof_fap_ids_per_core_get;
    /**
     * returns numeric data of max_nof_fap_ids_per_device
     */
    dnx_data_device_general_max_nof_fap_ids_per_device_get_f max_nof_fap_ids_per_device_get;
    /**
     * returns numeric data of core_clock_khz
     */
    dnx_data_device_general_core_clock_khz_get_f core_clock_khz_get;
    /**
     * returns numeric data of system_ref_core_clock_khz
     */
    dnx_data_device_general_system_ref_core_clock_khz_get_f system_ref_core_clock_khz_get;
    /**
     * returns numeric data of ref_core_clock_mhz
     */
    dnx_data_device_general_ref_core_clock_mhz_get_f ref_core_clock_mhz_get;
    /**
     * returns numeric data of bus_size_in_bits
     */
    dnx_data_device_general_bus_size_in_bits_get_f bus_size_in_bits_get;
    /**
     * returns numeric data of maximal_core_bandwidth_kbps
     */
    dnx_data_device_general_maximal_core_bandwidth_kbps_get_f maximal_core_bandwidth_kbps_get;
    /**
     * returns numeric data of packet_per_clock
     */
    dnx_data_device_general_packet_per_clock_get_f packet_per_clock_get;
    /**
     * returns numeric data of nof_faps
     */
    dnx_data_device_general_nof_faps_get_f nof_faps_get;
    /**
     * returns numeric data of device_id
     */
    dnx_data_device_general_device_id_get_f device_id_get;
    /**
     * returns numeric data of nof_sku_bits
     */
    dnx_data_device_general_nof_sku_bits_get_f nof_sku_bits_get;
    /**
     * returns numeric data of bist_enable
     */
    dnx_data_device_general_bist_enable_get_f bist_enable_get;
    /**
     * returns numeric data of nof_bits_for_nof_cores
     */
    dnx_data_device_general_nof_bits_for_nof_cores_get_f nof_bits_for_nof_cores_get;
    /**
     * get table ecc_err_masking entry 
     */
    dnx_data_device_general_ecc_err_masking_get_f ecc_err_masking_get;
    /**
     * get general info table about table (for example key size)ecc_err_masking info
     */
    dnxc_data_table_info_get_f ecc_err_masking_info_get;
} dnx_data_if_device_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - REGRESSION:
 * regression attributes
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule regression table regression_parms
 * Table info:
 * system mode SoC property
 */
typedef struct
{
    /**
     * The system mode name
     */
    char *system_mode_name;
} dnx_data_device_regression_regression_parms_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_device_regression_feature_nof
} dnx_data_device_regression_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_device_regression_feature_get_f) (
    int unit,
    dnx_data_device_regression_feature_e feature);

/**
 * \brief get table regression_parms entry 
 * system mode SoC property
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     regression_parms - returns the relevant entry values grouped in struct - see dnx_data_device_regression_regression_parms_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_device_regression_regression_parms_t *(
    *dnx_data_device_regression_regression_parms_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEVICE - REGRESSION:
 * {
 */
/**
 * \brief Interface for device regression data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_device_regression_feature_get_f feature_get;
    /**
     * get table regression_parms entry 
     */
    dnx_data_device_regression_regression_parms_get_f regression_parms_get;
    /**
     * get general info table about table (for example key size)regression_parms info
     */
    dnxc_data_table_info_get_f regression_parms_info_get;
} dnx_data_if_device_regression_t;

/*
 * }
 */

/*
 * SUBMODULE  - EMULATION:
 * Emulation attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * if set to 0 it means fmac is not simulated, should be skipped during initialization.
     */
    dnx_data_device_emulation_fmac_supported,

    /**
     * Must be last one!
     */
    _dnx_data_device_emulation_feature_nof
} dnx_data_device_emulation_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_device_emulation_feature_get_f) (
    int unit,
    dnx_data_device_emulation_feature_e feature);

/**
 * \brief returns numeric data of emulation_system
 * Module - 'device', Submodule - 'emulation', data - 'emulation_system'
 * Checking if the device is ran on emulation.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     emulation_system - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_device_emulation_emulation_system_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_DEVICE - EMULATION:
 * {
 */
/**
 * \brief Interface for device emulation data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_device_emulation_feature_get_f feature_get;
    /**
     * returns numeric data of emulation_system
     */
    dnx_data_device_emulation_emulation_system_get_f emulation_system_get;
} dnx_data_if_device_emulation_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_DEVICE:
 * {
 */
/**
 * \brief Interface for device data
 */
typedef struct
{
    /**
     * Interface for device general data
     */
    dnx_data_if_device_general_t general;
    /**
     * Interface for device regression data
     */
    dnx_data_if_device_regression_t regression;
    /**
     * Interface for device emulation data
     */
    dnx_data_if_device_emulation_t emulation;
} dnx_data_if_device_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_device_t dnx_data_device;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_DEVICE_H_*/
/* *INDENT-ON* */
