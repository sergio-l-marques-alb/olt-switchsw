/** \file dnx_data_fabric.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_FABRIC_H_
/*{*/
#define _DNX_DATA_FABRIC_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/fabric.h>
#include <soc/dnxc/fabric.h>
#include <soc/dnx/dbal/auto_generated/dbal_defines_tables.h>
#include <soc/dnx/dbal/auto_generated/dbal_defines_fields.h>
#include <bcm_int/dnx/fabric/fabric_cgm.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_fabric.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_fabric
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_fabric_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * General data about fabric
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule general table fmac_bus_size
 * Table info:
 * Fabric MAC bus size [bits]
 */
typedef struct
{
    /**
     * The bus size [bits]
     */
    int size;
} dnx_data_fabric_general_fmac_bus_size_t;

/**
 * \brief Holds values of submodule general table pll_phys
 * Table info:
 * phys controlled by each lcpll
 */
typedef struct
{
    /**
     * The min phy ID controlled by given pll
     */
    uint32 min_phy_id;
    /**
     * The max phy ID controlled by given pll
     */
    uint32 max_phy_id;
} dnx_data_fabric_general_pll_phys_t;

/**
 * \brief Holds values of submodule general table pm_properties
 * Table info:
 * PM properties per PM
 */
typedef struct
{
    /**
     * Boolean. Does this PM require special PLL check
     */
    int special_pll_check;
    /**
     * Number of PLLs that the PM has
     */
    int nof_plls;
} dnx_data_fabric_general_pm_properties_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Do fabric blocks exist in device. A device could have its fabric links disabled, but still use the fabric lins for local route.
     */
    dnx_data_fabric_general_blocks_exist,
    /**
     * Can fabric blocks clock be power down
     */
    dnx_data_fabric_general_clock_power_down,
    /**
     * Is the JR1 in system single cell delay optimization supported
     */
    dnx_data_fabric_general_is_jr1_in_system_supported,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_general_feature_nof
} dnx_data_fabric_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_general_feature_get_f) (
    int unit,
    dnx_data_fabric_general_feature_e feature);

/**
 * \brief returns define data of nof_lcplls
 * Module - 'fabric', Submodule - 'general', data - 'nof_lcplls'
 * number of lcplls supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lcplls - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_general_nof_lcplls_get_f) (
    int unit);

/**
 * \brief returns define data of fmac_clock_khz
 * Module - 'fabric', Submodule - 'general', data - 'fmac_clock_khz'
 * FMAC clock frequency [KHz]
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fmac_clock_khz - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_general_fmac_clock_khz_get_f) (
    int unit);

/**
 * \brief returns numeric data of connect_mode
 * Module - 'fabric', Submodule - 'general', data - 'connect_mode'
 * Fabric interface connect mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     connect_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_general_connect_mode_get_f) (
    int unit);

/**
 * \brief get table fmac_bus_size entry 
 * Fabric MAC bus size [bits]
 * 
 * \param [in] unit - unit #
 * \param [in] mode - Fabric MAC mode (FEC type)
 * 
 * \return
 *     fmac_bus_size - returns the relevant entry values grouped in struct - see dnx_data_fabric_general_fmac_bus_size_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_general_fmac_bus_size_t *(
    *dnx_data_fabric_general_fmac_bus_size_get_f) (
    int unit,
    int mode);

/**
 * \brief get table pll_phys entry 
 * phys controlled by each lcpll
 * 
 * \param [in] unit - unit #
 * \param [in] lcpll - LCPLL index
 * 
 * \return
 *     pll_phys - returns the relevant entry values grouped in struct - see dnx_data_fabric_general_pll_phys_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_general_pll_phys_t *(
    *dnx_data_fabric_general_pll_phys_get_f) (
    int unit,
    int lcpll);

/**
 * \brief get table pm_properties entry 
 * PM properties per PM
 * 
 * \param [in] unit - unit #
 * \param [in] pm_index - PM instance number.
 * 
 * \return
 *     pm_properties - returns the relevant entry values grouped in struct - see dnx_data_fabric_general_pm_properties_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_general_pm_properties_t *(
    *dnx_data_fabric_general_pm_properties_get_f) (
    int unit,
    int pm_index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - GENERAL:
 * {
 */
/**
 * \brief Interface for fabric general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_general_feature_get_f feature_get;
    /**
     * returns define data of nof_lcplls
     */
    dnx_data_fabric_general_nof_lcplls_get_f nof_lcplls_get;
    /**
     * returns define data of fmac_clock_khz
     */
    dnx_data_fabric_general_fmac_clock_khz_get_f fmac_clock_khz_get;
    /**
     * returns numeric data of connect_mode
     */
    dnx_data_fabric_general_connect_mode_get_f connect_mode_get;
    /**
     * get table fmac_bus_size entry 
     */
    dnx_data_fabric_general_fmac_bus_size_get_f fmac_bus_size_get;
    /**
     * get general info table about table (for example key size)fmac_bus_size info
     */
    dnxc_data_table_info_get_f fmac_bus_size_info_get;
    /**
     * get table pll_phys entry 
     */
    dnx_data_fabric_general_pll_phys_get_f pll_phys_get;
    /**
     * get general info table about table (for example key size)pll_phys info
     */
    dnxc_data_table_info_get_f pll_phys_info_get;
    /**
     * get table pm_properties entry 
     */
    dnx_data_fabric_general_pm_properties_get_f pm_properties_get;
    /**
     * get general info table about table (for example key size)pm_properties info
     */
    dnxc_data_table_info_get_f pm_properties_info_get;
} dnx_data_if_fabric_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - LINKS:
 * data about fabric links
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule links table general
 * Table info:
 * general data about links
 */
typedef struct
{
    /**
     * bitmap of supported links
     */
    bcm_pbmp_t supported_links;
} dnx_data_fabric_links_general_t;

/**
 * \brief Holds values of submodule links table polarity
 * Table info:
 * Polarity of fabric link
 */
typedef struct
{
    /**
     * TX Polarity
     */
    uint32 tx_polarity;
    /**
     * RX Polarity
     */
    uint32 rx_polarity;
} dnx_data_fabric_links_polarity_t;

/**
 * \brief Holds values of submodule links table supported_interfaces
 * Table info:
 * table with all supported by the device speeds
 */
typedef struct
{
    /**
     * Fabric lane serdes speed.
     */
    uint32 speed;
    /**
     * fec type
     */
    bcm_port_phy_fec_t fec_type;
    /**
     * Used to filter the valid table entries per device.
     */
    uint32 is_valid;
} dnx_data_fabric_links_supported_interfaces_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Is the load balancing has periodic event that changes its counting mode
     */
    dnx_data_fabric_links_load_balancing_periodic_event_enabled,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_links_feature_nof
} dnx_data_fabric_links_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_links_feature_get_f) (
    int unit,
    dnx_data_fabric_links_feature_e feature);

/**
 * \brief returns define data of nof_links
 * Module - 'fabric', Submodule - 'links', data - 'nof_links'
 * Number of fabric links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_links_nof_links_get_f) (
    int unit);

/**
 * \brief returns define data of nof_links_per_core
 * Module - 'fabric', Submodule - 'links', data - 'nof_links_per_core'
 * number of fabric links per core supported
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links_per_core - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_links_nof_links_per_core_get_f) (
    int unit);

/**
 * \brief returns define data of max_link_id
 * Module - 'fabric', Submodule - 'links', data - 'max_link_id'
 * Maximum id of a fabric link
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_link_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_links_max_link_id_get_f) (
    int unit);

/**
 * \brief returns define data of max_speed
 * Module - 'fabric', Submodule - 'links', data - 'max_speed'
 * Maximum speed a fabric link can have
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_speed - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_links_max_speed_get_f) (
    int unit);

/**
 * \brief returns define data of usec_between_load_balancing_events
 * Module - 'fabric', Submodule - 'links', data - 'usec_between_load_balancing_events'
 * Time between load balancing periodic events
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     usec_between_load_balancing_events - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_links_usec_between_load_balancing_events_get_f) (
    int unit);

/**
 * \brief returns define data of kr_fec_supported
 * Module - 'fabric', Submodule - 'links', data - 'kr_fec_supported'
 * Indicates if KR FEC is supproted. Used as control for other data tables so that is why its not a feature
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     kr_fec_supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_links_kr_fec_supported_get_f) (
    int unit);

/**
 * \brief returns numeric data of core_mapping_mode
 * Module - 'fabric', Submodule - 'links', data - 'core_mapping_mode'
 * Fabric link-to-core mapping mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     core_mapping_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_links_core_mapping_mode_get_f) (
    int unit);

/**
 * \brief get table general entry 
 * general data about links
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     general - returns the relevant entry values grouped in struct - see dnx_data_fabric_links_general_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_links_general_t *(
    *dnx_data_fabric_links_general_get_f) (
    int unit);

/**
 * \brief get table polarity entry 
 * Polarity of fabric link
 * 
 * \param [in] unit - unit #
 * \param [in] link - fabric link id
 * 
 * \return
 *     polarity - returns the relevant entry values grouped in struct - see dnx_data_fabric_links_polarity_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_links_polarity_t *(
    *dnx_data_fabric_links_polarity_get_f) (
    int unit,
    int link);

/**
 * \brief get table supported_interfaces entry 
 * table with all supported by the device speeds
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * 
 * \return
 *     supported_interfaces - returns the relevant entry values grouped in struct - see dnx_data_fabric_links_supported_interfaces_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_links_supported_interfaces_t *(
    *dnx_data_fabric_links_supported_interfaces_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - LINKS:
 * {
 */
/**
 * \brief Interface for fabric links data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_links_feature_get_f feature_get;
    /**
     * returns define data of nof_links
     */
    dnx_data_fabric_links_nof_links_get_f nof_links_get;
    /**
     * returns define data of nof_links_per_core
     */
    dnx_data_fabric_links_nof_links_per_core_get_f nof_links_per_core_get;
    /**
     * returns define data of max_link_id
     */
    dnx_data_fabric_links_max_link_id_get_f max_link_id_get;
    /**
     * returns define data of max_speed
     */
    dnx_data_fabric_links_max_speed_get_f max_speed_get;
    /**
     * returns define data of usec_between_load_balancing_events
     */
    dnx_data_fabric_links_usec_between_load_balancing_events_get_f usec_between_load_balancing_events_get;
    /**
     * returns define data of kr_fec_supported
     */
    dnx_data_fabric_links_kr_fec_supported_get_f kr_fec_supported_get;
    /**
     * returns numeric data of core_mapping_mode
     */
    dnx_data_fabric_links_core_mapping_mode_get_f core_mapping_mode_get;
    /**
     * get table general entry 
     */
    dnx_data_fabric_links_general_get_f general_get;
    /**
     * get general info table about table (for example key size)general info
     */
    dnxc_data_table_info_get_f general_info_get;
    /**
     * get table polarity entry 
     */
    dnx_data_fabric_links_polarity_get_f polarity_get;
    /**
     * get general info table about table (for example key size)polarity info
     */
    dnxc_data_table_info_get_f polarity_info_get;
    /**
     * get table supported_interfaces entry 
     */
    dnx_data_fabric_links_supported_interfaces_get_f supported_interfaces_get;
    /**
     * get general info table about table (for example key size)supported_interfaces info
     */
    dnxc_data_table_info_get_f supported_interfaces_info_get;
} dnx_data_if_fabric_links_t;

/*
 * }
 */

/*
 * SUBMODULE  - BLOCKS:
 * General block information
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule blocks table fsrd_sbus_chain
 * Table info:
 * The order of FSRDs in the SBUS chain
 */
typedef struct
{
    /**
     * SBUS chain number
     */
    int chain;
    /**
     * The index of the FSRD in the SBUS chain
     */
    int index_in_chain;
} dnx_data_fabric_blocks_fsrd_sbus_chain_t;

/**
 * \brief Holds values of submodule blocks table fmac_sbus_chain
 * Table info:
 * The order of FMACs in the SBUS chain
 */
typedef struct
{
    /**
     * SBUS chain number
     */
    int chain;
    /**
     * The index of the FMAC in the SBUS chain
     */
    int index_in_chain;
} dnx_data_fabric_blocks_fmac_sbus_chain_t;

/**
 * \brief Holds values of submodule blocks table fsrd_ref_clk_master
 * Table info:
 * The ref clock dependency between the FSRDs
 */
typedef struct
{
    /**
     * The index of the Master FSRD which gives ref clock to the key FSRD
     */
    int master_fsrd_index;
} dnx_data_fabric_blocks_fsrd_ref_clk_master_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_blocks_feature_nof
} dnx_data_fabric_blocks_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_blocks_feature_get_f) (
    int unit,
    dnx_data_fabric_blocks_feature_e feature);

/**
 * \brief returns define data of nof_instances_fmac
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_instances_fmac'
 * Number of FMAC instances.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_instances_fmac - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_instances_fmac_get_f) (
    int unit);

/**
 * \brief returns define data of nof_links_in_fmac
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_links_in_fmac'
 * Number of links for each FMAC block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links_in_fmac - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_links_in_fmac_get_f) (
    int unit);

/**
 * \brief returns define data of nof_instances_fsrd
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_instances_fsrd'
 * Number of FSRD instances.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_instances_fsrd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_instances_fsrd_get_f) (
    int unit);

/**
 * \brief returns define data of nof_links_in_fsrd
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_links_in_fsrd'
 * Number of links for each FSRD block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links_in_fsrd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_links_in_fsrd_get_f) (
    int unit);

/**
 * \brief returns define data of nof_fmacs_in_fsrd
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_fmacs_in_fsrd'
 * Number of FMAC blocks for each FSRD block.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fmacs_in_fsrd - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_fmacs_in_fsrd_get_f) (
    int unit);

/**
 * \brief returns define data of nof_pms
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_pms'
 * Number of fabric PMs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pms - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_pms_get_f) (
    int unit);

/**
 * \brief returns define data of nof_links_in_pm
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_links_in_pm'
 * Number of links for each fabric PM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links_in_pm - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_links_in_pm_get_f) (
    int unit);

/**
 * \brief returns define data of nof_fmacs_in_pm
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_fmacs_in_pm'
 * Number of FMAC blocks for each fabric PM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_fmacs_in_pm - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_fmacs_in_pm_get_f) (
    int unit);

/**
 * \brief returns define data of nof_instances_fdtl
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_instances_fdtl'
 * Number of FDTL block instances
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_instances_fdtl - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_instances_fdtl_get_f) (
    int unit);

/**
 * \brief returns define data of nof_links_in_fdtl
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_links_in_fdtl'
 * Number of links per each FDTL block
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links_in_fdtl - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_links_in_fdtl_get_f) (
    int unit);

/**
 * \brief returns define data of nof_sbus_chains
 * Module - 'fabric', Submodule - 'blocks', data - 'nof_sbus_chains'
 * Number of FSRD SBUS chains
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sbus_chains - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_blocks_nof_sbus_chains_get_f) (
    int unit);

/**
 * \brief get table fsrd_sbus_chain entry 
 * The order of FSRDs in the SBUS chain
 * 
 * \param [in] unit - unit #
 * \param [in] fsrd_id - FSRD ID
 * 
 * \return
 *     fsrd_sbus_chain - returns the relevant entry values grouped in struct - see dnx_data_fabric_blocks_fsrd_sbus_chain_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_blocks_fsrd_sbus_chain_t *(
    *dnx_data_fabric_blocks_fsrd_sbus_chain_get_f) (
    int unit,
    int fsrd_id);

/**
 * \brief get table fmac_sbus_chain entry 
 * The order of FMACs in the SBUS chain
 * 
 * \param [in] unit - unit #
 * \param [in] fmac_id - FMAC ID
 * 
 * \return
 *     fmac_sbus_chain - returns the relevant entry values grouped in struct - see dnx_data_fabric_blocks_fmac_sbus_chain_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_blocks_fmac_sbus_chain_t *(
    *dnx_data_fabric_blocks_fmac_sbus_chain_get_f) (
    int unit,
    int fmac_id);

/**
 * \brief get table fsrd_ref_clk_master entry 
 * The ref clock dependency between the FSRDs
 * 
 * \param [in] unit - unit #
 * \param [in] fsrd_index - FSRD ID
 * 
 * \return
 *     fsrd_ref_clk_master - returns the relevant entry values grouped in struct - see dnx_data_fabric_blocks_fsrd_ref_clk_master_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_blocks_fsrd_ref_clk_master_t *(
    *dnx_data_fabric_blocks_fsrd_ref_clk_master_get_f) (
    int unit,
    int fsrd_index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - BLOCKS:
 * {
 */
/**
 * \brief Interface for fabric blocks data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_blocks_feature_get_f feature_get;
    /**
     * returns define data of nof_instances_fmac
     */
    dnx_data_fabric_blocks_nof_instances_fmac_get_f nof_instances_fmac_get;
    /**
     * returns define data of nof_links_in_fmac
     */
    dnx_data_fabric_blocks_nof_links_in_fmac_get_f nof_links_in_fmac_get;
    /**
     * returns define data of nof_instances_fsrd
     */
    dnx_data_fabric_blocks_nof_instances_fsrd_get_f nof_instances_fsrd_get;
    /**
     * returns define data of nof_links_in_fsrd
     */
    dnx_data_fabric_blocks_nof_links_in_fsrd_get_f nof_links_in_fsrd_get;
    /**
     * returns define data of nof_fmacs_in_fsrd
     */
    dnx_data_fabric_blocks_nof_fmacs_in_fsrd_get_f nof_fmacs_in_fsrd_get;
    /**
     * returns define data of nof_pms
     */
    dnx_data_fabric_blocks_nof_pms_get_f nof_pms_get;
    /**
     * returns define data of nof_links_in_pm
     */
    dnx_data_fabric_blocks_nof_links_in_pm_get_f nof_links_in_pm_get;
    /**
     * returns define data of nof_fmacs_in_pm
     */
    dnx_data_fabric_blocks_nof_fmacs_in_pm_get_f nof_fmacs_in_pm_get;
    /**
     * returns define data of nof_instances_fdtl
     */
    dnx_data_fabric_blocks_nof_instances_fdtl_get_f nof_instances_fdtl_get;
    /**
     * returns define data of nof_links_in_fdtl
     */
    dnx_data_fabric_blocks_nof_links_in_fdtl_get_f nof_links_in_fdtl_get;
    /**
     * returns define data of nof_sbus_chains
     */
    dnx_data_fabric_blocks_nof_sbus_chains_get_f nof_sbus_chains_get;
    /**
     * get table fsrd_sbus_chain entry 
     */
    dnx_data_fabric_blocks_fsrd_sbus_chain_get_f fsrd_sbus_chain_get;
    /**
     * get general info table about table (for example key size)fsrd_sbus_chain info
     */
    dnxc_data_table_info_get_f fsrd_sbus_chain_info_get;
    /**
     * get table fmac_sbus_chain entry 
     */
    dnx_data_fabric_blocks_fmac_sbus_chain_get_f fmac_sbus_chain_get;
    /**
     * get general info table about table (for example key size)fmac_sbus_chain info
     */
    dnxc_data_table_info_get_f fmac_sbus_chain_info_get;
    /**
     * get table fsrd_ref_clk_master entry 
     */
    dnx_data_fabric_blocks_fsrd_ref_clk_master_get_f fsrd_ref_clk_master_get;
    /**
     * get general info table about table (for example key size)fsrd_ref_clk_master info
     */
    dnxc_data_table_info_get_f fsrd_ref_clk_master_info_get;
} dnx_data_if_fabric_blocks_t;

/*
 * }
 */

/*
 * SUBMODULE  - REACHABILITY:
 * General reachability attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_reachability_feature_nof
} dnx_data_fabric_reachability_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_reachability_feature_get_f) (
    int unit,
    dnx_data_fabric_reachability_feature_e feature);

/**
 * \brief returns define data of resolution
 * Module - 'fabric', Submodule - 'reachability', data - 'resolution'
 * Reachability messages resolution.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_reachability_resolution_get_f) (
    int unit);

/**
 * \brief returns define data of gen_period
 * Module - 'fabric', Submodule - 'reachability', data - 'gen_period'
 * Reachability message generation period (in units of chip clocks).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gen_period - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_reachability_gen_period_get_f) (
    int unit);

/**
 * \brief returns define data of full_cycle_period_usec
 * Module - 'fabric', Submodule - 'reachability', data - 'full_cycle_period_usec'
 * Full cycle of reachability cells period (in units of micro-seconds).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     full_cycle_period_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_reachability_full_cycle_period_usec_get_f) (
    int unit);

/**
 * \brief returns define data of watchdog_resolution
 * Module - 'fabric', Submodule - 'reachability', data - 'watchdog_resolution'
 * Reachability message watchdog resolution..
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watchdog_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_reachability_watchdog_resolution_get_f) (
    int unit);

/**
 * \brief returns define data of watchdog_period_usec
 * Module - 'fabric', Submodule - 'reachability', data - 'watchdog_period_usec'
 * Reachability message watchdog period (in units of micto-seconds).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watchdog_period_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_reachability_watchdog_period_usec_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - REACHABILITY:
 * {
 */
/**
 * \brief Interface for fabric reachability data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_reachability_feature_get_f feature_get;
    /**
     * returns define data of resolution
     */
    dnx_data_fabric_reachability_resolution_get_f resolution_get;
    /**
     * returns define data of gen_period
     */
    dnx_data_fabric_reachability_gen_period_get_f gen_period_get;
    /**
     * returns define data of full_cycle_period_usec
     */
    dnx_data_fabric_reachability_full_cycle_period_usec_get_f full_cycle_period_usec_get;
    /**
     * returns define data of watchdog_resolution
     */
    dnx_data_fabric_reachability_watchdog_resolution_get_f watchdog_resolution_get;
    /**
     * returns define data of watchdog_period_usec
     */
    dnx_data_fabric_reachability_watchdog_period_usec_get_f watchdog_period_usec_get;
} dnx_data_if_fabric_reachability_t;

/*
 * }
 */

/*
 * SUBMODULE  - MESH:
 * MESH mode attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Is mesh supported
     */
    dnx_data_fabric_mesh_is_supported,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_mesh_feature_nof
} dnx_data_fabric_mesh_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_mesh_feature_get_f) (
    int unit,
    dnx_data_fabric_mesh_feature_e feature);

/**
 * \brief returns define data of max_mc_id
 * Module - 'fabric', Submodule - 'mesh', data - 'max_mc_id'
 * Maximum MC ID in MESH mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_mc_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_mesh_max_mc_id_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_dest
 * Module - 'fabric', Submodule - 'mesh', data - 'max_nof_dest'
 * Maximum number of FAP destination in Mesh mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_dest - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_mesh_max_nof_dest_get_f) (
    int unit);

/**
 * \brief returns numeric data of multicast_enable
 * Module - 'fabric', Submodule - 'mesh', data - 'multicast_enable'
 * Detemines whether the MESH system supports MC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     multicast_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_mesh_multicast_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_dest
 * Module - 'fabric', Submodule - 'mesh', data - 'nof_dest'
 * Number of FAP destination in MESH mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dest - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_mesh_nof_dest_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - MESH:
 * {
 */
/**
 * \brief Interface for fabric mesh data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_mesh_feature_get_f feature_get;
    /**
     * returns define data of max_mc_id
     */
    dnx_data_fabric_mesh_max_mc_id_get_f max_mc_id_get;
    /**
     * returns define data of max_nof_dest
     */
    dnx_data_fabric_mesh_max_nof_dest_get_f max_nof_dest_get;
    /**
     * returns numeric data of multicast_enable
     */
    dnx_data_fabric_mesh_multicast_enable_get_f multicast_enable_get;
    /**
     * returns numeric data of nof_dest
     */
    dnx_data_fabric_mesh_nof_dest_get_f nof_dest_get;
} dnx_data_if_fabric_mesh_t;

/*
 * }
 */

/*
 * SUBMODULE  - CELL:
 * cell attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_cell_feature_nof
} dnx_data_fabric_cell_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_cell_feature_get_f) (
    int unit,
    dnx_data_fabric_cell_feature_e feature);

/**
 * \brief returns define data of nof_priorities
 * Module - 'fabric', Submodule - 'cell', data - 'nof_priorities'
 * nof of supported fabric priorities
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_priorities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cell_nof_priorities_get_f) (
    int unit);

/**
 * \brief returns define data of vsc256_max_size
 * Module - 'fabric', Submodule - 'cell', data - 'vsc256_max_size'
 * Max cell size in VSC256 configuration
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vsc256_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cell_vsc256_max_size_get_f) (
    int unit);

/**
 * \brief returns define data of sr_cell_header_offset
 * Module - 'fabric', Submodule - 'cell', data - 'sr_cell_header_offset'
 * Offset in the header fields of sr cells (bytes)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sr_cell_header_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cell_sr_cell_header_offset_get_f) (
    int unit);

/**
 * \brief returns define data of sr_cell_nof_instances
 * Module - 'fabric', Submodule - 'cell', data - 'sr_cell_nof_instances'
 * Number of source routed cell instances
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sr_cell_nof_instances - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cell_sr_cell_nof_instances_get_f) (
    int unit);

/**
 * \brief returns numeric data of default_packing_mode
 * Module - 'fabric', Submodule - 'cell', data - 'default_packing_mode'
 * Default packing mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_packing_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cell_default_packing_mode_get_f) (
    int unit);

/**
 * \brief returns numeric data of pcp_enable
 * Module - 'fabric', Submodule - 'cell', data - 'pcp_enable'
 * packet cell packing enable
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pcp_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cell_pcp_enable_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - CELL:
 * {
 */
/**
 * \brief Interface for fabric cell data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_cell_feature_get_f feature_get;
    /**
     * returns define data of nof_priorities
     */
    dnx_data_fabric_cell_nof_priorities_get_f nof_priorities_get;
    /**
     * returns define data of vsc256_max_size
     */
    dnx_data_fabric_cell_vsc256_max_size_get_f vsc256_max_size_get;
    /**
     * returns define data of sr_cell_header_offset
     */
    dnx_data_fabric_cell_sr_cell_header_offset_get_f sr_cell_header_offset_get;
    /**
     * returns define data of sr_cell_nof_instances
     */
    dnx_data_fabric_cell_sr_cell_nof_instances_get_f sr_cell_nof_instances_get;
    /**
     * returns numeric data of default_packing_mode
     */
    dnx_data_fabric_cell_default_packing_mode_get_f default_packing_mode_get;
    /**
     * returns numeric data of pcp_enable
     */
    dnx_data_fabric_cell_pcp_enable_get_f pcp_enable_get;
} dnx_data_if_fabric_cell_t;

/*
 * }
 */

/*
 * SUBMODULE  - PIPES:
 * pipes attributes
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule pipes table map
 * Table info:
 * map traffic cast X priority to fabric pipe
 */
typedef struct
{
    /**
     * each element represents uc priority pipe
     */
    uint32 uc[DNX_DATA_MAX_FABRIC_CELL_NOF_PRIORITIES];
    /**
     * each element represents mc priority pipe
     */
    uint32 mc[DNX_DATA_MAX_FABRIC_CELL_NOF_PRIORITIES];
    /**
     * The configuration display name
     */
    char *name;
    /**
     * The pipe mapping type
     */
    soc_dnxc_fabric_pipe_map_type_t type;
    /**
     * Minimum priority to be considered as high priority multicast
     */
    int min_hp_mc;
    /**
     * TDM pipe id
     */
    int tdm_pipe;
} dnx_data_fabric_pipes_map_t;

/**
 * \brief Holds values of submodule pipes table valid_map_config
 * Table info:
 * pipes map valid configurations
 */
typedef struct
{
    /**
     * Number of pipes
     */
    uint32 nof_pipes;
    /**
     * map unicast cell priority to pipe
     */
    uint32 uc[DNX_DATA_MAX_FABRIC_CELL_NOF_PRIORITIES];
    /**
     * map multicast cell priority to pipe
     */
    uint32 mc[DNX_DATA_MAX_FABRIC_CELL_NOF_PRIORITIES];
    /**
     * The configuration display name
     */
    char *name;
    /**
     * The pipe mapping type
     */
    soc_dnxc_fabric_pipe_map_type_t type;
    /**
     * Minimum priority to be considered as high priority multicast
     */
    int min_hp_mc;
    /**
     * TDM pipe id
     */
    int tdm_pipe;
} dnx_data_fabric_pipes_valid_map_config_t;

/**
 * \brief Holds values of submodule pipes table dtq_subcontexts
 * Table info:
 * DTQ subcontexts ids
 */
typedef struct
{
    /**
     * The index of the subcontext
     */
    uint32 index;
} dnx_data_fabric_pipes_dtq_subcontexts_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * is there a WFQ between OCB contexts in the ingress
     */
    dnx_data_fabric_pipes_ocb_wfq,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_pipes_feature_nof
} dnx_data_fabric_pipes_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_pipes_feature_get_f) (
    int unit,
    dnx_data_fabric_pipes_feature_e feature);

/**
 * \brief returns define data of max_nof_pipes
 * Module - 'fabric', Submodule - 'pipes', data - 'max_nof_pipes'
 * max supported fabric pipes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_pipes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_pipes_max_nof_pipes_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_contexts
 * Module - 'fabric', Submodule - 'pipes', data - 'max_nof_contexts'
 * max supported ingress contexts
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_contexts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_pipes_max_nof_contexts_get_f) (
    int unit);

/**
 * \brief returns define data of max_nof_subcontexts
 * Module - 'fabric', Submodule - 'pipes', data - 'max_nof_subcontexts'
 * max supported ingress sub contexts
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_subcontexts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_pipes_max_nof_subcontexts_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_pipes
 * Module - 'fabric', Submodule - 'pipes', data - 'nof_pipes'
 * number of actual (configured) pipes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pipes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_pipes_nof_pipes_get_f) (
    int unit);

/**
 * \brief returns numeric data of multi_pipe_system
 * Module - 'fabric', Submodule - 'pipes', data - 'multi_pipe_system'
 * Is there a device in the system in multi pipes mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     multi_pipe_system - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_pipes_multi_pipe_system_get_f) (
    int unit);

/**
 * \brief get table map entry 
 * map traffic cast X priority to fabric pipe
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     map - returns the relevant entry values grouped in struct - see dnx_data_fabric_pipes_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_pipes_map_t *(
    *dnx_data_fabric_pipes_map_get_f) (
    int unit);

/**
 * \brief get table valid_map_config entry 
 * pipes map valid configurations
 * 
 * \param [in] unit - unit #
 * \param [in] config_id - The configuration running number
 * 
 * \return
 *     valid_map_config - returns the relevant entry values grouped in struct - see dnx_data_fabric_pipes_valid_map_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_pipes_valid_map_config_t *(
    *dnx_data_fabric_pipes_valid_map_config_get_f) (
    int unit,
    int config_id);

/**
 * \brief get table dtq_subcontexts entry 
 * DTQ subcontexts ids
 * 
 * \param [in] unit - unit #
 * \param [in] dtq - The DTQ number
 * \param [in] is_ocb_only - Whether the subcontext is OCB only or Mixed
 * 
 * \return
 *     dtq_subcontexts - returns the relevant entry values grouped in struct - see dnx_data_fabric_pipes_dtq_subcontexts_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_pipes_dtq_subcontexts_t *(
    *dnx_data_fabric_pipes_dtq_subcontexts_get_f) (
    int unit,
    int dtq,
    int is_ocb_only);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - PIPES:
 * {
 */
/**
 * \brief Interface for fabric pipes data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_pipes_feature_get_f feature_get;
    /**
     * returns define data of max_nof_pipes
     */
    dnx_data_fabric_pipes_max_nof_pipes_get_f max_nof_pipes_get;
    /**
     * returns define data of max_nof_contexts
     */
    dnx_data_fabric_pipes_max_nof_contexts_get_f max_nof_contexts_get;
    /**
     * returns define data of max_nof_subcontexts
     */
    dnx_data_fabric_pipes_max_nof_subcontexts_get_f max_nof_subcontexts_get;
    /**
     * returns numeric data of nof_pipes
     */
    dnx_data_fabric_pipes_nof_pipes_get_f nof_pipes_get;
    /**
     * returns numeric data of multi_pipe_system
     */
    dnx_data_fabric_pipes_multi_pipe_system_get_f multi_pipe_system_get;
    /**
     * get table map entry 
     */
    dnx_data_fabric_pipes_map_get_f map_get;
    /**
     * get general info table about table (for example key size)map info
     */
    dnxc_data_table_info_get_f map_info_get;
    /**
     * get table valid_map_config entry 
     */
    dnx_data_fabric_pipes_valid_map_config_get_f valid_map_config_get;
    /**
     * get general info table about table (for example key size)valid_map_config info
     */
    dnxc_data_table_info_get_f valid_map_config_info_get;
    /**
     * get table dtq_subcontexts entry 
     */
    dnx_data_fabric_pipes_dtq_subcontexts_get_f dtq_subcontexts_get;
    /**
     * get general info table about table (for example key size)dtq_subcontexts info
     */
    dnxc_data_table_info_get_f dtq_subcontexts_info_get;
} dnx_data_if_fabric_pipes_t;

/*
 * }
 */

/*
 * SUBMODULE  - DEBUG:
 * debug configurations
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_debug_feature_nof
} dnx_data_fabric_debug_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_debug_feature_get_f) (
    int unit,
    dnx_data_fabric_debug_feature_e feature);

/**
 * \brief returns numeric data of mesh_topology_size
 * Module - 'fabric', Submodule - 'debug', data - 'mesh_topology_size'
 * Size of mesh topology
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mesh_topology_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_debug_mesh_topology_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of mesh_topology_fast
 * Module - 'fabric', Submodule - 'debug', data - 'mesh_topology_fast'
 * Device is in mesh topology fast mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mesh_topology_fast - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_debug_mesh_topology_fast_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - DEBUG:
 * {
 */
/**
 * \brief Interface for fabric debug data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_debug_feature_get_f feature_get;
    /**
     * returns numeric data of mesh_topology_size
     */
    dnx_data_fabric_debug_mesh_topology_size_get_f mesh_topology_size_get;
    /**
     * returns numeric data of mesh_topology_fast
     */
    dnx_data_fabric_debug_mesh_topology_fast_get_f mesh_topology_fast_get;
} dnx_data_if_fabric_debug_t;

/*
 * }
 */

/*
 * SUBMODULE  - MESH_TOPOLOGY:
 * mesh topology configurations
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Is calendar mode supported
     */
    dnx_data_fabric_mesh_topology_calendar_mode_supported,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_mesh_topology_feature_nof
} dnx_data_fabric_mesh_topology_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_mesh_topology_feature_get_f) (
    int unit,
    dnx_data_fabric_mesh_topology_feature_e feature);

/**
 * \brief returns define data of mesh_init
 * Module - 'fabric', Submodule - 'mesh_topology', data - 'mesh_init'
 * mesh init value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mesh_init - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_mesh_topology_mesh_init_get_f) (
    int unit);

/**
 * \brief returns define data of mesh_config_1
 * Module - 'fabric', Submodule - 'mesh_topology', data - 'mesh_config_1'
 * mesh config 1 value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mesh_config_1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_mesh_topology_mesh_config_1_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - MESH_TOPOLOGY:
 * {
 */
/**
 * \brief Interface for fabric mesh_topology data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_mesh_topology_feature_get_f feature_get;
    /**
     * returns define data of mesh_init
     */
    dnx_data_fabric_mesh_topology_mesh_init_get_f mesh_init_get;
    /**
     * returns define data of mesh_config_1
     */
    dnx_data_fabric_mesh_topology_mesh_config_1_get_f mesh_config_1_get;
} dnx_data_if_fabric_mesh_topology_t;

/*
 * }
 */

/*
 * SUBMODULE  - TDM:
 * TDM attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_tdm_feature_nof
} dnx_data_fabric_tdm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_tdm_feature_get_f) (
    int unit,
    dnx_data_fabric_tdm_feature_e feature);

/**
 * \brief returns numeric data of priority
 * Module - 'fabric', Submodule - 'tdm', data - 'priority'
 * The TDM fabric priority
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_tdm_priority_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - TDM:
 * {
 */
/**
 * \brief Interface for fabric tdm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_tdm_feature_get_f feature_get;
    /**
     * returns numeric data of priority
     */
    dnx_data_fabric_tdm_priority_get_f priority_get;
} dnx_data_if_fabric_tdm_t;

/*
 * }
 */

/*
 * SUBMODULE  - CGM:
 * CGM info
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule cgm table access_map
 * Table info:
 * DBAL information per threshold type
 */
typedef struct
{
    /**
     * DBAL table
     */
    dbal_tables_e dbal_table;
    /**
     * DBAL key1
     */
    dbal_fields_e dbal_key1;
    /**
     * DBAL key2
     */
    dbal_fields_e dbal_key2;
    /**
     * DBAL result
     */
    dbal_fields_e dbal_result;
    /**
     * DBAL table index type
     */
    dnx_fabric_cgm_control_index_type_e index_type;
    /**
     * is control_type valid?
     */
    int is_valid;
    /**
     * error message to be printed when using invalid control_type
     */
    char *err_msg;
} dnx_data_fabric_cgm_access_map_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * is egress can drop low priority multicast cells
     */
    dnx_data_fabric_cgm_egress_drop_low_prio_mc,
    /**
     * is egress fifos size is static or can be changed according to number of pipes
     */
    dnx_data_fabric_cgm_egress_fifo_static_size,
    /**
     * Is egress grop tdm latency supported
     */
    dnx_data_fabric_cgm_is_egress_drop_tdm_latency_supported,
    /**
     * Is fabric static shaper supported
     */
    dnx_data_fabric_cgm_is_static_shaper_supported,
    /**
     * Is static shaper supports a fix factor
     */
    dnx_data_fabric_cgm_static_shaper_fix_factor,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_cgm_feature_nof
} dnx_data_fabric_cgm_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_cgm_feature_get_f) (
    int unit,
    dnx_data_fabric_cgm_feature_e feature);

/**
 * \brief returns define data of nof_rci_levels
 * Module - 'fabric', Submodule - 'cgm', data - 'nof_rci_levels'
 * Number of RCI levels
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rci_levels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cgm_nof_rci_levels_get_f) (
    int unit);

/**
 * \brief returns define data of nof_rci_threshold_levels
 * Module - 'fabric', Submodule - 'cgm', data - 'nof_rci_threshold_levels'
 * Number of RCI Threshold levels
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rci_threshold_levels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cgm_nof_rci_threshold_levels_get_f) (
    int unit);

/**
 * \brief returns define data of egress_drop_th_clocks_resolution
 * Module - 'fabric', Submodule - 'cgm', data - 'egress_drop_th_clocks_resolution'
 * Clocks resolution in HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_drop_th_clocks_resolution - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cgm_egress_drop_th_clocks_resolution_get_f) (
    int unit);

/**
 * \brief returns define data of egress_fifo_fc_threshold
 * Module - 'fabric', Submodule - 'cgm', data - 'egress_fifo_fc_threshold'
 * Threshold for egress fifo flow control (the threshold below the fifo size)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_fifo_fc_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cgm_egress_fifo_fc_threshold_get_f) (
    int unit);

/**
 * \brief returns define data of static_shaper_credit_resolution_bytes
 * Module - 'fabric', Submodule - 'cgm', data - 'static_shaper_credit_resolution_bytes'
 * The credit resoultion of the static shaper [bytes]
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     static_shaper_credit_resolution_bytes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cgm_static_shaper_credit_resolution_bytes_get_f) (
    int unit);

/**
 * \brief get table access_map entry 
 * DBAL information per threshold type
 * 
 * \param [in] unit - unit #
 * \param [in] control_type - Fabric CGM control type
 * 
 * \return
 *     access_map - returns the relevant entry values grouped in struct - see dnx_data_fabric_cgm_access_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_cgm_access_map_t *(
    *dnx_data_fabric_cgm_access_map_get_f) (
    int unit,
    int control_type);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - CGM:
 * {
 */
/**
 * \brief Interface for fabric cgm data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_cgm_feature_get_f feature_get;
    /**
     * returns define data of nof_rci_levels
     */
    dnx_data_fabric_cgm_nof_rci_levels_get_f nof_rci_levels_get;
    /**
     * returns define data of nof_rci_threshold_levels
     */
    dnx_data_fabric_cgm_nof_rci_threshold_levels_get_f nof_rci_threshold_levels_get;
    /**
     * returns define data of egress_drop_th_clocks_resolution
     */
    dnx_data_fabric_cgm_egress_drop_th_clocks_resolution_get_f egress_drop_th_clocks_resolution_get;
    /**
     * returns define data of egress_fifo_fc_threshold
     */
    dnx_data_fabric_cgm_egress_fifo_fc_threshold_get_f egress_fifo_fc_threshold_get;
    /**
     * returns define data of static_shaper_credit_resolution_bytes
     */
    dnx_data_fabric_cgm_static_shaper_credit_resolution_bytes_get_f static_shaper_credit_resolution_bytes_get;
    /**
     * get table access_map entry 
     */
    dnx_data_fabric_cgm_access_map_get_f access_map_get;
    /**
     * get general info table about table (for example key size)access_map info
     */
    dnxc_data_table_info_get_f access_map_info_get;
} dnx_data_if_fabric_cgm_t;

/*
 * }
 */

/*
 * SUBMODULE  - DTQS:
 * DTQs info
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_dtqs_feature_nof
} dnx_data_fabric_dtqs_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_dtqs_feature_get_f) (
    int unit,
    dnx_data_fabric_dtqs_feature_e feature);

/**
 * \brief returns define data of max_nof_subdtqs
 * Module - 'fabric', Submodule - 'dtqs', data - 'max_nof_subdtqs'
 * Number of sub-DTQs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_subdtqs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dtqs_max_nof_subdtqs_get_f) (
    int unit);

/**
 * \brief returns define data of max_size
 * Module - 'fabric', Submodule - 'dtqs', data - 'max_size'
 * Maximum size for all DTQs together
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dtqs_max_size_get_f) (
    int unit);

/**
 * \brief returns define data of ocb_only_size
 * Module - 'fabric', Submodule - 'dtqs', data - 'ocb_only_size'
 * Size of OCB-Only DTQs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ocb_only_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dtqs_ocb_only_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_active_dtqs
 * Module - 'fabric', Submodule - 'dtqs', data - 'nof_active_dtqs'
 * Number of active DTQs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_active_dtqs - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dtqs_nof_active_dtqs_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - DTQS:
 * {
 */
/**
 * \brief Interface for fabric dtqs data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_dtqs_feature_get_f feature_get;
    /**
     * returns define data of max_nof_subdtqs
     */
    dnx_data_fabric_dtqs_max_nof_subdtqs_get_f max_nof_subdtqs_get;
    /**
     * returns define data of max_size
     */
    dnx_data_fabric_dtqs_max_size_get_f max_size_get;
    /**
     * returns define data of ocb_only_size
     */
    dnx_data_fabric_dtqs_ocb_only_size_get_f ocb_only_size_get;
    /**
     * returns numeric data of nof_active_dtqs
     */
    dnx_data_fabric_dtqs_nof_active_dtqs_get_f nof_active_dtqs_get;
} dnx_data_if_fabric_dtqs_t;

/*
 * }
 */

/*
 * SUBMODULE  - ILKN:
 * data about ILKN over fabric
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ilkn table bypass_info
 * Table info:
 * data about bypassed links
 */
typedef struct
{
    /**
     * Links in bypass mode
     */
    uint32 links;
} dnx_data_fabric_ilkn_bypass_info_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_ilkn_feature_nof
} dnx_data_fabric_ilkn_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_ilkn_feature_get_f) (
    int unit,
    dnx_data_fabric_ilkn_feature_e feature);

/**
 * \brief get table bypass_info entry 
 * data about bypassed links
 * 
 * \param [in] unit - unit #
 * \param [in] pm_id - Internal Port Macro identifier
 * 
 * \return
 *     bypass_info - returns the relevant entry values grouped in struct - see dnx_data_fabric_ilkn_bypass_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_ilkn_bypass_info_t *(
    *dnx_data_fabric_ilkn_bypass_info_get_f) (
    int unit,
    int pm_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - ILKN:
 * {
 */
/**
 * \brief Interface for fabric ilkn data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_ilkn_feature_get_f feature_get;
    /**
     * get table bypass_info entry 
     */
    dnx_data_fabric_ilkn_bypass_info_get_f bypass_info_get;
    /**
     * get general info table about table (for example key size)bypass_info info
     */
    dnxc_data_table_info_get_f bypass_info_info_get;
} dnx_data_if_fabric_ilkn_t;

/*
 * }
 */

/*
 * SUBMODULE  - DBAL:
 * fabric dbal defines
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_dbal_feature_nof
} dnx_data_fabric_dbal_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_dbal_feature_get_f) (
    int unit,
    dnx_data_fabric_dbal_feature_e feature);

/**
 * \brief returns define data of link_rci_threshold_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'link_rci_threshold_bits_nof'
 * number of bits in LINK_RCI_THRESHOLD field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     link_rci_threshold_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_link_rci_threshold_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_llfc_threshold_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_llfc_threshold_bits_nof'
 * number of bits in link level flow control thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_llfc_threshold_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_llfc_threshold_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_llfc_threshold_max_value
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_llfc_threshold_max_value'
 * maximum value of link level flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_llfc_threshold_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_llfc_threshold_max_value_get_f) (
    int unit);

/**
 * \brief returns define data of egress_fifo_drop_threshold_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'egress_fifo_drop_threshold_bits_nof'
 * number of bits in egress fifo drop thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_fifo_drop_threshold_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_egress_fifo_drop_threshold_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of egress_fifo_drop_threshold_max_value
 * Module - 'fabric', Submodule - 'dbal', data - 'egress_fifo_drop_threshold_max_value'
 * maximum value of egress fifo drop threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_fifo_drop_threshold_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_egress_fifo_drop_threshold_max_value_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_link_fifo_base_address_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_link_fifo_base_address_bits_nof'
 * number of bits in link fifo base address
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_link_fifo_base_address_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_link_fifo_base_address_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_link_fifo_base_address_max_value
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_link_fifo_base_address_max_value'
 * maximum value of link fifo base address
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_link_fifo_base_address_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_link_fifo_base_address_max_value_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_egress_fifo_base_address_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_egress_fifo_base_address_bits_nof'
 * number of bits in egress fifo base address
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_egress_fifo_base_address_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_egress_fifo_base_address_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_egress_fifo_base_address_max_value
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_egress_fifo_base_address_max_value'
 * maximum value of egress fifo base address
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_egress_fifo_base_address_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_egress_fifo_base_address_max_value_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_egress_fifo_fc_threshold_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_egress_fifo_fc_threshold_bits_nof'
 * number of bits in egress fifo flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_egress_fifo_fc_threshold_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_egress_fifo_fc_threshold_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_egress_fifo_fc_threshold_max_value
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_egress_fifo_fc_threshold_max_value'
 * maximum value of egress fifo flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_egress_fifo_fc_threshold_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_egress_fifo_fc_threshold_max_value_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_egress_drop_mc_low_prio_th_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_egress_drop_mc_low_prio_th_bits_nof'
 * number of bits in low priority multicast cells drop threshold in egress
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_egress_drop_mc_low_prio_th_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_egress_drop_mc_low_prio_th_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_ingress_fc_threshold_max_value
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_ingress_fc_threshold_max_value'
 * maximum value of ingress flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_ingress_fc_threshold_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_ingress_fc_threshold_max_value_get_f) (
    int unit);

/**
 * \brief returns define data of cgm_static_shaper_calendar_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'cgm_static_shaper_calendar_bits_nof'
 * number of bits in static shaper's calendar
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_static_shaper_calendar_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_cgm_static_shaper_calendar_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of fabric_transmit_wfq_index_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'fabric_transmit_wfq_index_bits_nof'
 * number of bits in fabric transmit wfq index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_transmit_wfq_index_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_fabric_transmit_wfq_index_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of fabric_transmit_wfq_index_max_value
 * Module - 'fabric', Submodule - 'dbal', data - 'fabric_transmit_wfq_index_max_value'
 * maximum value of fabric transmit wfq index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_transmit_wfq_index_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_fabric_transmit_wfq_index_max_value_get_f) (
    int unit);

/**
 * \brief returns define data of mesh_topology_init_config_2_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'mesh_topology_init_config_2_bits_nof'
 * number of bits in mesh topology init config 2
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mesh_topology_init_config_2_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_mesh_topology_init_config_2_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of fabric_transmit_dtq_fc_thresholds_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'fabric_transmit_dtq_fc_thresholds_bits_nof'
 * number of bits in fabric transmit dtq fc thresholds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_transmit_dtq_fc_thresholds_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_fabric_transmit_dtq_fc_thresholds_bits_nof_get_f) (
    int unit);

/**
 * \brief returns define data of fabric_transmit_pdq_size_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'fabric_transmit_pdq_size_bits_nof'
 * number of bits in fabric transmit pdq size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fabric_transmit_pdq_size_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_fabric_transmit_pdq_size_bits_nof_get_f) (
    int unit);

/**
 * \brief returns numeric data of priority_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'priority_bits_nof'
 * Number of bits in FABRIC_PRIORITY field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_priority_bits_nof_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_links_bits_nof
 * Module - 'fabric', Submodule - 'dbal', data - 'nof_links_bits_nof'
 * Number of bits in FABRIC_LINK_ID field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_links_bits_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_dbal_nof_links_bits_nof_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - DBAL:
 * {
 */
/**
 * \brief Interface for fabric dbal data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_dbal_feature_get_f feature_get;
    /**
     * returns define data of link_rci_threshold_bits_nof
     */
    dnx_data_fabric_dbal_link_rci_threshold_bits_nof_get_f link_rci_threshold_bits_nof_get;
    /**
     * returns define data of cgm_llfc_threshold_bits_nof
     */
    dnx_data_fabric_dbal_cgm_llfc_threshold_bits_nof_get_f cgm_llfc_threshold_bits_nof_get;
    /**
     * returns define data of cgm_llfc_threshold_max_value
     */
    dnx_data_fabric_dbal_cgm_llfc_threshold_max_value_get_f cgm_llfc_threshold_max_value_get;
    /**
     * returns define data of egress_fifo_drop_threshold_bits_nof
     */
    dnx_data_fabric_dbal_egress_fifo_drop_threshold_bits_nof_get_f egress_fifo_drop_threshold_bits_nof_get;
    /**
     * returns define data of egress_fifo_drop_threshold_max_value
     */
    dnx_data_fabric_dbal_egress_fifo_drop_threshold_max_value_get_f egress_fifo_drop_threshold_max_value_get;
    /**
     * returns define data of cgm_link_fifo_base_address_bits_nof
     */
    dnx_data_fabric_dbal_cgm_link_fifo_base_address_bits_nof_get_f cgm_link_fifo_base_address_bits_nof_get;
    /**
     * returns define data of cgm_link_fifo_base_address_max_value
     */
    dnx_data_fabric_dbal_cgm_link_fifo_base_address_max_value_get_f cgm_link_fifo_base_address_max_value_get;
    /**
     * returns define data of cgm_egress_fifo_base_address_bits_nof
     */
    dnx_data_fabric_dbal_cgm_egress_fifo_base_address_bits_nof_get_f cgm_egress_fifo_base_address_bits_nof_get;
    /**
     * returns define data of cgm_egress_fifo_base_address_max_value
     */
    dnx_data_fabric_dbal_cgm_egress_fifo_base_address_max_value_get_f cgm_egress_fifo_base_address_max_value_get;
    /**
     * returns define data of cgm_egress_fifo_fc_threshold_bits_nof
     */
    dnx_data_fabric_dbal_cgm_egress_fifo_fc_threshold_bits_nof_get_f cgm_egress_fifo_fc_threshold_bits_nof_get;
    /**
     * returns define data of cgm_egress_fifo_fc_threshold_max_value
     */
    dnx_data_fabric_dbal_cgm_egress_fifo_fc_threshold_max_value_get_f cgm_egress_fifo_fc_threshold_max_value_get;
    /**
     * returns define data of cgm_egress_drop_mc_low_prio_th_bits_nof
     */
    dnx_data_fabric_dbal_cgm_egress_drop_mc_low_prio_th_bits_nof_get_f cgm_egress_drop_mc_low_prio_th_bits_nof_get;
    /**
     * returns define data of cgm_ingress_fc_threshold_max_value
     */
    dnx_data_fabric_dbal_cgm_ingress_fc_threshold_max_value_get_f cgm_ingress_fc_threshold_max_value_get;
    /**
     * returns define data of cgm_static_shaper_calendar_bits_nof
     */
    dnx_data_fabric_dbal_cgm_static_shaper_calendar_bits_nof_get_f cgm_static_shaper_calendar_bits_nof_get;
    /**
     * returns define data of fabric_transmit_wfq_index_bits_nof
     */
    dnx_data_fabric_dbal_fabric_transmit_wfq_index_bits_nof_get_f fabric_transmit_wfq_index_bits_nof_get;
    /**
     * returns define data of fabric_transmit_wfq_index_max_value
     */
    dnx_data_fabric_dbal_fabric_transmit_wfq_index_max_value_get_f fabric_transmit_wfq_index_max_value_get;
    /**
     * returns define data of mesh_topology_init_config_2_bits_nof
     */
    dnx_data_fabric_dbal_mesh_topology_init_config_2_bits_nof_get_f mesh_topology_init_config_2_bits_nof_get;
    /**
     * returns define data of fabric_transmit_dtq_fc_thresholds_bits_nof
     */
    dnx_data_fabric_dbal_fabric_transmit_dtq_fc_thresholds_bits_nof_get_f fabric_transmit_dtq_fc_thresholds_bits_nof_get;
    /**
     * returns define data of fabric_transmit_pdq_size_bits_nof
     */
    dnx_data_fabric_dbal_fabric_transmit_pdq_size_bits_nof_get_f fabric_transmit_pdq_size_bits_nof_get;
    /**
     * returns numeric data of priority_bits_nof
     */
    dnx_data_fabric_dbal_priority_bits_nof_get_f priority_bits_nof_get;
    /**
     * returns numeric data of nof_links_bits_nof
     */
    dnx_data_fabric_dbal_nof_links_bits_nof_get_f nof_links_bits_nof_get;
} dnx_data_if_fabric_dbal_t;

/*
 * }
 */

/*
 * SUBMODULE  - MESH_MC:
 * fabric mesh mc defines
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_fabric_mesh_mc_feature_nof
} dnx_data_fabric_mesh_mc_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_mesh_mc_feature_get_f) (
    int unit,
    dnx_data_fabric_mesh_mc_feature_e feature);

/**
 * \brief returns define data of nof_replication
 * Module - 'fabric', Submodule - 'mesh_mc', data - 'nof_replication'
 * number of replication
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_replication - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_mesh_mc_nof_replication_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - MESH_MC:
 * {
 */
/**
 * \brief Interface for fabric mesh_mc data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_mesh_mc_feature_get_f feature_get;
    /**
     * returns define data of nof_replication
     */
    dnx_data_fabric_mesh_mc_nof_replication_get_f nof_replication_get;
} dnx_data_if_fabric_mesh_mc_t;

/*
 * }
 */

/*
 * SUBMODULE  - TRANSMIT:
 * fabric transmit defines
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule transmit table pdq_to_dqcq_fc_th_select
 * Table info:
 * Select PDQs to DQCQs FC thresholds index
 */
typedef struct
{
    /**
     * SRAM DQCQ
     */
    uint32 sram;
    /**
     * MIXS DQCQ
     */
    uint32 mixs;
    /**
     * MIXD DQCQ
     */
    uint32 mixd;
    /**
     * MIX_MIXS DQCQ
     */
    uint32 mix_mixs;
    /**
     * MIX_MIXD DQCQ
     */
    uint32 mix_mixd;
    /**
     * S2D DQCQ
     */
    uint32 s2d;
} dnx_data_fabric_transmit_pdq_to_dqcq_fc_th_select_t;

/**
 * \brief Holds values of submodule transmit table eir_fc_leaky_bucket
 * Table info:
 * Configure the EIR FC leaky bucket machine
 */
typedef struct
{
    /**
     * FIFO almost full threshold
     */
    uint32 almost_full_th;
    /**
     * FIFO almost empty threshold
     */
    uint32 almost_empty_th;
    /**
     * Bucket size
     */
    uint32 bucket_size;
    /**
     * Bucket flow control threshold
     */
    uint32 bucket_fc_threshold;
    /**
     * Token update period
     */
    uint32 period;
    /**
     * Tokens delta 0
     */
    uint32 tokens_delta0;
    /**
     * Tokens delta 1
     */
    uint32 tokens_delta1;
    /**
     * Tokens delta 2
     */
    uint32 tokens_delta2;
    /**
     * Tokens delta 3
     */
    uint32 tokens_delta3;
} dnx_data_fabric_transmit_eir_fc_leaky_bucket_t;

/**
 * \brief Holds values of submodule transmit table eir_fc_leaky_bucket_delta_select
 * Table info:
 * Select which delta will be associated with FIFO state
 */
typedef struct
{
    /**
     * Select delta for the case where FIFO is between almost full and almost empty thresholds
     */
    uint32 fifo_in_between;
    /**
     * Select delta for the case where FIFO is partially almost full
     */
    uint32 fifo_partially_almost_full;
    /**
     * Select delta for the case where FIFO is almost full
     */
    uint32 fifo_almost_full;
    /**
     * Select delta for the case where FIFO is partially almost empty
     */
    uint32 fifo_partially_almost_empty;
    /**
     * Select delta for the case where FIFO is not stable
     */
    uint32 fifo_not_stable;
    /**
     * Select delta for the case where FIFO is almost empty
     */
    uint32 fifo_almost_empty;
} dnx_data_fabric_transmit_eir_fc_leaky_bucket_delta_select_t;

/**
 * \brief Holds values of submodule transmit table dtq_fc_local_thresholds
 * Table info:
 * DTQ FC local thresholds
 */
typedef struct
{
    /**
     * FC threshold
     */
    uint32 threshold;
} dnx_data_fabric_transmit_dtq_fc_local_thresholds_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * EIR FC uses leaky bucket mechanism
     */
    dnx_data_fabric_transmit_eir_fc_leaky_backet,

    /**
     * Must be last one!
     */
    _dnx_data_fabric_transmit_feature_nof
} dnx_data_fabric_transmit_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_transmit_feature_get_f) (
    int unit,
    dnx_data_fabric_transmit_feature_e feature);

/**
 * \brief returns define data of s2d_pdq_size
 * Module - 'fabric', Submodule - 'transmit', data - 's2d_pdq_size'
 * Sram to Dram PDQ size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     s2d_pdq_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_s2d_pdq_size_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_sram_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_sram_fc_th'
 * PDQ to SRAM DQCQ flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_sram_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_sram_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_mixs_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_mixs_fc_th'
 * PDQ to MIX-S DQCQ flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_mixs_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_mixs_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_mixd_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_mixd_fc_th'
 * PDQ to MIX-D DQCQ flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_mixd_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_mixd_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_mix_mixs_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_mix_mixs_fc_th'
 * PDQ to MIX MIX-S DQCQ flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_mix_mixs_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_mix_mixs_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_mix_mixd_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_mix_mixd_fc_th'
 * PDQ to MIX MIX-D DQCQ flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_mix_mixd_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_mix_mixd_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_ocb_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_ocb_fc_th'
 * PDQ OCB flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_ocb_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_ocb_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_dram_delete_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_dram_delete_fc_th'
 * PDQ dram delete flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_dram_delete_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_dram_delete_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_sram_delete_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_sram_delete_fc_th'
 * PDQ sram delete flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_sram_delete_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_sram_delete_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_s2d_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_s2d_fc_th'
 * Sram to Dram PDQ flow control threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_s2d_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_s2d_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_sram_eir_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_sram_eir_fc_th'
 * PDQ to sram EIR flow control
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_sram_eir_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_sram_eir_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_mixs_eir_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_mixs_eir_fc_th'
 * PDQ to mix-s EIR flow control
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_mixs_eir_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_mixs_eir_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_mixd_eir_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_mixd_eir_fc_th'
 * PDQ to mix-d EIR flow control
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_mixd_eir_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_mixd_eir_fc_th_get_f) (
    int unit);

/**
 * \brief returns define data of pdq_ocb_eir_fc_th
 * Module - 'fabric', Submodule - 'transmit', data - 'pdq_ocb_eir_fc_th'
 * PDQ ocb EIR flow control
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pdq_ocb_eir_fc_th - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_transmit_pdq_ocb_eir_fc_th_get_f) (
    int unit);

/**
 * \brief get table pdq_to_dqcq_fc_th_select entry 
 * Select PDQs to DQCQs FC thresholds index
 * 
 * \param [in] unit - unit #
 * \param [in] dqcq_priority - DQCQ priority
 * 
 * \return
 *     pdq_to_dqcq_fc_th_select - returns the relevant entry values grouped in struct - see dnx_data_fabric_transmit_pdq_to_dqcq_fc_th_select_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_transmit_pdq_to_dqcq_fc_th_select_t *(
    *dnx_data_fabric_transmit_pdq_to_dqcq_fc_th_select_get_f) (
    int unit,
    int dqcq_priority);

/**
 * \brief get table eir_fc_leaky_bucket entry 
 * Configure the EIR FC leaky bucket machine
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eir_fc_leaky_bucket - returns the relevant entry values grouped in struct - see dnx_data_fabric_transmit_eir_fc_leaky_bucket_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_transmit_eir_fc_leaky_bucket_t *(
    *dnx_data_fabric_transmit_eir_fc_leaky_bucket_get_f) (
    int unit);

/**
 * \brief get table eir_fc_leaky_bucket_delta_select entry 
 * Select which delta will be associated with FIFO state
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eir_fc_leaky_bucket_delta_select - returns the relevant entry values grouped in struct - see dnx_data_fabric_transmit_eir_fc_leaky_bucket_delta_select_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_transmit_eir_fc_leaky_bucket_delta_select_t *(
    *dnx_data_fabric_transmit_eir_fc_leaky_bucket_delta_select_get_f) (
    int unit);

/**
 * \brief get table dtq_fc_local_thresholds entry 
 * DTQ FC local thresholds
 * 
 * \param [in] unit - unit #
 * \param [in] dtq_fc - DTQ FC
 * 
 * \return
 *     dtq_fc_local_thresholds - returns the relevant entry values grouped in struct - see dnx_data_fabric_transmit_dtq_fc_local_thresholds_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_fabric_transmit_dtq_fc_local_thresholds_t *(
    *dnx_data_fabric_transmit_dtq_fc_local_thresholds_get_f) (
    int unit,
    int dtq_fc);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - TRANSMIT:
 * {
 */
/**
 * \brief Interface for fabric transmit data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_fabric_transmit_feature_get_f feature_get;
    /**
     * returns define data of s2d_pdq_size
     */
    dnx_data_fabric_transmit_s2d_pdq_size_get_f s2d_pdq_size_get;
    /**
     * returns define data of pdq_sram_fc_th
     */
    dnx_data_fabric_transmit_pdq_sram_fc_th_get_f pdq_sram_fc_th_get;
    /**
     * returns define data of pdq_mixs_fc_th
     */
    dnx_data_fabric_transmit_pdq_mixs_fc_th_get_f pdq_mixs_fc_th_get;
    /**
     * returns define data of pdq_mixd_fc_th
     */
    dnx_data_fabric_transmit_pdq_mixd_fc_th_get_f pdq_mixd_fc_th_get;
    /**
     * returns define data of pdq_mix_mixs_fc_th
     */
    dnx_data_fabric_transmit_pdq_mix_mixs_fc_th_get_f pdq_mix_mixs_fc_th_get;
    /**
     * returns define data of pdq_mix_mixd_fc_th
     */
    dnx_data_fabric_transmit_pdq_mix_mixd_fc_th_get_f pdq_mix_mixd_fc_th_get;
    /**
     * returns define data of pdq_ocb_fc_th
     */
    dnx_data_fabric_transmit_pdq_ocb_fc_th_get_f pdq_ocb_fc_th_get;
    /**
     * returns define data of pdq_dram_delete_fc_th
     */
    dnx_data_fabric_transmit_pdq_dram_delete_fc_th_get_f pdq_dram_delete_fc_th_get;
    /**
     * returns define data of pdq_sram_delete_fc_th
     */
    dnx_data_fabric_transmit_pdq_sram_delete_fc_th_get_f pdq_sram_delete_fc_th_get;
    /**
     * returns define data of pdq_s2d_fc_th
     */
    dnx_data_fabric_transmit_pdq_s2d_fc_th_get_f pdq_s2d_fc_th_get;
    /**
     * returns define data of pdq_sram_eir_fc_th
     */
    dnx_data_fabric_transmit_pdq_sram_eir_fc_th_get_f pdq_sram_eir_fc_th_get;
    /**
     * returns define data of pdq_mixs_eir_fc_th
     */
    dnx_data_fabric_transmit_pdq_mixs_eir_fc_th_get_f pdq_mixs_eir_fc_th_get;
    /**
     * returns define data of pdq_mixd_eir_fc_th
     */
    dnx_data_fabric_transmit_pdq_mixd_eir_fc_th_get_f pdq_mixd_eir_fc_th_get;
    /**
     * returns define data of pdq_ocb_eir_fc_th
     */
    dnx_data_fabric_transmit_pdq_ocb_eir_fc_th_get_f pdq_ocb_eir_fc_th_get;
    /**
     * get table pdq_to_dqcq_fc_th_select entry 
     */
    dnx_data_fabric_transmit_pdq_to_dqcq_fc_th_select_get_f pdq_to_dqcq_fc_th_select_get;
    /**
     * get general info table about table (for example key size)pdq_to_dqcq_fc_th_select info
     */
    dnxc_data_table_info_get_f pdq_to_dqcq_fc_th_select_info_get;
    /**
     * get table eir_fc_leaky_bucket entry 
     */
    dnx_data_fabric_transmit_eir_fc_leaky_bucket_get_f eir_fc_leaky_bucket_get;
    /**
     * get general info table about table (for example key size)eir_fc_leaky_bucket info
     */
    dnxc_data_table_info_get_f eir_fc_leaky_bucket_info_get;
    /**
     * get table eir_fc_leaky_bucket_delta_select entry 
     */
    dnx_data_fabric_transmit_eir_fc_leaky_bucket_delta_select_get_f eir_fc_leaky_bucket_delta_select_get;
    /**
     * get general info table about table (for example key size)eir_fc_leaky_bucket_delta_select info
     */
    dnxc_data_table_info_get_f eir_fc_leaky_bucket_delta_select_info_get;
    /**
     * get table dtq_fc_local_thresholds entry 
     */
    dnx_data_fabric_transmit_dtq_fc_local_thresholds_get_f dtq_fc_local_thresholds_get;
    /**
     * get general info table about table (for example key size)dtq_fc_local_thresholds info
     */
    dnxc_data_table_info_get_f dtq_fc_local_thresholds_info_get;
} dnx_data_if_fabric_transmit_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_FABRIC:
 * {
 */
/**
 * \brief Interface for fabric data
 */
typedef struct
{
    /**
     * Interface for fabric general data
     */
    dnx_data_if_fabric_general_t general;
    /**
     * Interface for fabric links data
     */
    dnx_data_if_fabric_links_t links;
    /**
     * Interface for fabric blocks data
     */
    dnx_data_if_fabric_blocks_t blocks;
    /**
     * Interface for fabric reachability data
     */
    dnx_data_if_fabric_reachability_t reachability;
    /**
     * Interface for fabric mesh data
     */
    dnx_data_if_fabric_mesh_t mesh;
    /**
     * Interface for fabric cell data
     */
    dnx_data_if_fabric_cell_t cell;
    /**
     * Interface for fabric pipes data
     */
    dnx_data_if_fabric_pipes_t pipes;
    /**
     * Interface for fabric debug data
     */
    dnx_data_if_fabric_debug_t debug;
    /**
     * Interface for fabric mesh_topology data
     */
    dnx_data_if_fabric_mesh_topology_t mesh_topology;
    /**
     * Interface for fabric tdm data
     */
    dnx_data_if_fabric_tdm_t tdm;
    /**
     * Interface for fabric cgm data
     */
    dnx_data_if_fabric_cgm_t cgm;
    /**
     * Interface for fabric dtqs data
     */
    dnx_data_if_fabric_dtqs_t dtqs;
    /**
     * Interface for fabric ilkn data
     */
    dnx_data_if_fabric_ilkn_t ilkn;
    /**
     * Interface for fabric dbal data
     */
    dnx_data_if_fabric_dbal_t dbal;
    /**
     * Interface for fabric mesh_mc data
     */
    dnx_data_if_fabric_mesh_mc_t mesh_mc;
    /**
     * Interface for fabric transmit data
     */
    dnx_data_if_fabric_transmit_t transmit;
} dnx_data_if_fabric_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_fabric_t dnx_data_fabric;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_FABRIC_H_*/
/* *INDENT-ON* */
