/** \file dnx_data_internal_ingr_reassembly.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_INGR_REASSEMBLY_H_
/*{*/
#define _DNX_DATA_INTERNAL_INGR_REASSEMBLY_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_ingr_reassembly.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_ingr_reassembly_submodule_context,
    dnx_data_ingr_reassembly_submodule_ilkn,
    dnx_data_ingr_reassembly_submodule_rcy,
    dnx_data_ingr_reassembly_submodule_priority,
    dnx_data_ingr_reassembly_submodule_dbal,

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_submodule_nof
} dnx_data_ingr_reassembly_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE CONTEXT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_ingr_reassembly_context_feature_get(
    int unit,
    dnx_data_ingr_reassembly_context_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_ingr_reassembly_context_define_nof_contexts,
    dnx_data_ingr_reassembly_context_define_invalid_context,

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_context_define_nof
} dnx_data_ingr_reassembly_context_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_contexts
 * Module - 'ingr_reassembly', Submodule - 'context', data - 'nof_contexts'
 * Number of ingress reassembly contexts per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_contexts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_context_nof_contexts_get(
    int unit);

/**
 * \brief returns define data of invalid_context
 * Module - 'ingr_reassembly', Submodule - 'context', data - 'invalid_context'
 * Invalid reassembly context
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     invalid_context - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_context_invalid_context_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_ingr_reassembly_context_table_context_map,

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_context_table_nof
} dnx_data_ingr_reassembly_context_table_e;

/* Get Data */
/**
 * \brief get table context_map entry 
 * Context Map configuration information per port type 
 * 
 * \param [in] unit - unit #
 * \param [in] port_type - interface type
 * 
 * \return
 *     context_map - returns the relevant entry values grouped in struct - see dnx_data_ingr_reassembly_context_context_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_ingr_reassembly_context_context_map_t * dnx_data_ingr_reassembly_context_context_map_get(
    int unit,
    int port_type);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'ingr_reassembly', Submodule - 'context', table - 'context_map'
 * Context Map configuration information per port type 
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_ingr_reassembly_context_context_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)context_map info
 * Context Map configuration information per port type 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     context_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_ingr_reassembly_context_context_map_info_get(
    int unit);

/*
 * SUBMODULE ILKN:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_ingr_reassembly_ilkn_feature_get(
    int unit,
    dnx_data_ingr_reassembly_ilkn_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_ilkn_define_nof
} dnx_data_ingr_reassembly_ilkn_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_ilkn_table_nof
} dnx_data_ingr_reassembly_ilkn_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE RCY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_ingr_reassembly_rcy_feature_get(
    int unit,
    dnx_data_ingr_reassembly_rcy_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_ingr_reassembly_rcy_define_nof_interfaces,

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_rcy_define_nof
} dnx_data_ingr_reassembly_rcy_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_interfaces
 * Module - 'ingr_reassembly', Submodule - 'rcy', data - 'nof_interfaces'
 * Number of RCY interfaces per core
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_interfaces - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_rcy_nof_interfaces_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_rcy_table_nof
} dnx_data_ingr_reassembly_rcy_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE PRIORITY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_ingr_reassembly_priority_feature_get(
    int unit,
    dnx_data_ingr_reassembly_priority_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_ingr_reassembly_priority_define_nif_eth_priorities_nof,
    dnx_data_ingr_reassembly_priority_define_mirror_priorities_nof,
    dnx_data_ingr_reassembly_priority_define_rcy_priorities_nof,
    dnx_data_ingr_reassembly_priority_define_priorities_nof,
    dnx_data_ingr_reassembly_priority_define_cgm_priorities_nof,

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_priority_define_nof
} dnx_data_ingr_reassembly_priority_define_e;

/* Get Data */
/**
 * \brief returns define data of nif_eth_priorities_nof
 * Module - 'ingr_reassembly', Submodule - 'priority', data - 'nif_eth_priorities_nof'
 * Number of priorities for NIF ETH port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_eth_priorities_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_priority_nif_eth_priorities_nof_get(
    int unit);

/**
 * \brief returns define data of mirror_priorities_nof
 * Module - 'ingr_reassembly', Submodule - 'priority', data - 'mirror_priorities_nof'
 * Number of priorities for mirror channel
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mirror_priorities_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_priority_mirror_priorities_nof_get(
    int unit);

/**
 * \brief returns define data of rcy_priorities_nof
 * Module - 'ingr_reassembly', Submodule - 'priority', data - 'rcy_priorities_nof'
 * Number of priorities (groups) for RCY interface
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rcy_priorities_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_priority_rcy_priorities_nof_get(
    int unit);

/**
 * \brief returns define data of priorities_nof
 * Module - 'ingr_reassembly', Submodule - 'priority', data - 'priorities_nof'
 * Number of priorities (groups) for any interface type
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priorities_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_priority_priorities_nof_get(
    int unit);

/**
 * \brief returns define data of cgm_priorities_nof
 * Module - 'ingr_reassembly', Submodule - 'priority', data - 'cgm_priorities_nof'
 * Number of priorities (groups) for any interface type as considered by CGM module
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cgm_priorities_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_priority_cgm_priorities_nof_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_priority_table_nof
} dnx_data_ingr_reassembly_priority_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE DBAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_ingr_reassembly_dbal_feature_get(
    int unit,
    dnx_data_ingr_reassembly_dbal_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_ingr_reassembly_dbal_define_reassembly_context_bits,
    dnx_data_ingr_reassembly_dbal_define_interface_bits,
    dnx_data_ingr_reassembly_dbal_define_interface_max,
    dnx_data_ingr_reassembly_dbal_define_context_map_base_address_bits,
    dnx_data_ingr_reassembly_dbal_define_context_map_base_address_max,
    dnx_data_ingr_reassembly_dbal_define_context_map_base_offest_ext_max,
    dnx_data_ingr_reassembly_dbal_define_interleaved_interface_max,
    dnx_data_ingr_reassembly_dbal_define_interleaved_interface_bits,

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_dbal_define_nof
} dnx_data_ingr_reassembly_dbal_define_e;

/* Get Data */
/**
 * \brief returns define data of reassembly_context_bits
 * Module - 'ingr_reassembly', Submodule - 'dbal', data - 'reassembly_context_bits'
 * number of bits in reassembly context
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     reassembly_context_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_dbal_reassembly_context_bits_get(
    int unit);

/**
 * \brief returns define data of interface_bits
 * Module - 'ingr_reassembly', Submodule - 'dbal', data - 'interface_bits'
 * number of bits in ingress reassembly interface ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     interface_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_dbal_interface_bits_get(
    int unit);

/**
 * \brief returns define data of interface_max
 * Module - 'ingr_reassembly', Submodule - 'dbal', data - 'interface_max'
 * maximal ingress reassembly interface ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     interface_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_dbal_interface_max_get(
    int unit);

/**
 * \brief returns define data of context_map_base_address_bits
 * Module - 'ingr_reassembly', Submodule - 'dbal', data - 'context_map_base_address_bits'
 * number of bits in context_map_base_address
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     context_map_base_address_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_dbal_context_map_base_address_bits_get(
    int unit);

/**
 * \brief returns define data of context_map_base_address_max
 * Module - 'ingr_reassembly', Submodule - 'dbal', data - 'context_map_base_address_max'
 * maximal value of context_map_base_address
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     context_map_base_address_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_dbal_context_map_base_address_max_get(
    int unit);

/**
 * \brief returns define data of context_map_base_offest_ext_max
 * Module - 'ingr_reassembly', Submodule - 'dbal', data - 'context_map_base_offest_ext_max'
 * maximal value of offset ext field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     context_map_base_offest_ext_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_dbal_context_map_base_offest_ext_max_get(
    int unit);

/**
 * \brief returns define data of interleaved_interface_max
 * Module - 'ingr_reassembly', Submodule - 'dbal', data - 'interleaved_interface_max'
 * maximal interleaved interface ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     interleaved_interface_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_dbal_interleaved_interface_max_get(
    int unit);

/**
 * \brief returns numeric data of interleaved_interface_bits
 * Module - 'ingr_reassembly', Submodule - 'dbal', data - 'interleaved_interface_bits'
 * number of bits in interleaved interface ID
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     interleaved_interface_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_ingr_reassembly_dbal_interleaved_interface_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_ingr_reassembly_dbal_table_nof
} dnx_data_ingr_reassembly_dbal_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_ingr_reassembly_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_INGR_REASSEMBLY_H_*/
/* *INDENT-ON* */
