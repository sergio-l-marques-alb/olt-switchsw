/** \file dnx_data_max_nif.h
 * 
 * MODULE DATA MAX - 
 * Maintain max value (of all devices) per define
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MAX_NIF_H_
/*{*/
#define _DNX_DATA_MAX_NIF_H_
/*
 * INCLUDE FILES:
 * {
 */
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MAX DEFINES:
 * {
 */
/**
 * \brief
 * number of lcplls supported
 */
#define DNX_DATA_MAX_NIF_GLOBAL_NOF_LCPLLS (2)

/**
 * \brief
 * The max of core access per port
 */
#define DNX_DATA_MAX_NIF_GLOBAL_MAX_CORE_ACCESS_PER_PORT (6)

/**
 * \brief
 * Number of Nif ports/interfaces per core
 */
#define DNX_DATA_MAX_NIF_GLOBAL_NOF_NIF_INTERFACES_PER_CORE (144)

/**
 * \brief
 * Granularity of the nif_interface_id_to_unit_id table
 */
#define DNX_DATA_MAX_NIF_GLOBAL_NIF_INTERFACE_ID_TO_UNIT_ID_GRANULARITY (8)

/**
 * \brief
 * Default value of reassembler FIFO threshold
 */
#define DNX_DATA_MAX_NIF_GLOBAL_REASSEMBLER_FIFO_THRESHOLD (90)

/**
 * \brief
 * the last port of led scan chain
 */
#define DNX_DATA_MAX_NIF_GLOBAL_LAST_PORT_LED_SCAN (88)

/**
 * \brief
 * number of phys supported
 */
#define DNX_DATA_MAX_NIF_PHYS_NOF_PHYS  (144)

/**
 * \brief
 * number of phys per core supported
 */
#define DNX_DATA_MAX_NIF_PHYS_NOF_PHYS_PER_CORE (128)

/**
 * \brief
 * The generation of Blackhalk PM that the device uses. IIf older generation some abilities are not supported
 */
#define DNX_DATA_MAX_NIF_PHYS_PM8X50_GEN (2)

/**
 * \brief
 * If PAM4 speed supported in the device
 */
#define DNX_DATA_MAX_NIF_PHYS_IS_PAM4_SPEED_SUPPORTED (1)

/**
 * \brief
 * Number of ILU instances in the device
 */
#define DNX_DATA_MAX_NIF_ILKN_ILU_NOF   (8)

/**
 * \brief
 * Number of ILKN units in the device
 */
#define DNX_DATA_MAX_NIF_ILKN_ILKN_UNIT_NOF (8)

/**
 * \brief
 * Number of ILKN Interfaces in each ILKN unit
 */
#define DNX_DATA_MAX_NIF_ILKN_ILKN_UNIT_IF_NOF (2)

/**
 * \brief
 * Number of ILKN Interfaces in the device
 */
#define DNX_DATA_MAX_NIF_ILKN_ILKN_IF_NOF (16)

/**
 * \brief
 * Number of ILKN FEC units per core in the device
 */
#define DNX_DATA_MAX_NIF_ILKN_FEC_UNITS_PER_CORE_NOF (16)

/**
 * \brief
 * Number of ilkn lanes per ILKN FEC unit in the device
 */
#define DNX_DATA_MAX_NIF_ILKN_NOF_LANES_PER_FEC_UNIT (2)

/**
 * \brief
 * Max number of lanes for ILKN port
 */
#define DNX_DATA_MAX_NIF_ILKN_LANES_MAX_NOF (24)

/**
 * \brief
 * Max number of lanes for ILKN port interface when FEC is enabled
 */
#define DNX_DATA_MAX_NIF_ILKN_LANES_MAX_NOF_USING_FEC (24)

/**
 * \brief
 * The allowed lanes for each ILKN port
 */
#define DNX_DATA_MAX_NIF_ILKN_LANES_ALLOWED_NOF (24)

/**
 * \brief
 * Max number eth pms ilkn lanes is part of
 */
#define DNX_DATA_MAX_NIF_ILKN_ILKN_OVER_ETH_PMS_MAX (6)

/**
 * \brief
 * Max number of segments in ILKN protocol. (Segment is a resource of ILKN which is shared between all ports of the ILKN unit)
 */
#define DNX_DATA_MAX_NIF_ILKN_SEGMENTS_MAX_NOF (8)

/**
 * \brief
 * Min number of segments in ILKN protocol. (Segment is a resource of ILKN which is shared between all ports of the ILKN unit)
 */
#define DNX_DATA_MAX_NIF_ILKN_SEGMENTS_HALF_NOF (4)

/**
 * \brief
 * Maximal number of PMs connectted to the ILKN unit
 */
#define DNX_DATA_MAX_NIF_ILKN_PMS_NOF   (6)

/**
 * \brief
 * Fabric MAC bus size [bits], relevant for ILKN over fabric ports
 */
#define DNX_DATA_MAX_NIF_ILKN_FMAC_BUS_SIZE (70)

/**
 * \brief
 * Number of High Rate Fifo queues in RX
 */
#define DNX_DATA_MAX_NIF_ILKN_ILKN_RX_HRF_NOF (4)

/**
 * \brief
 * Number of High Rate Fifo queues in TX
 */
#define DNX_DATA_MAX_NIF_ILKN_ILKN_TX_HRF_NOF (2)

/**
 * \brief
 * Number of entries in High Rate Fifo for data
 */
#define DNX_DATA_MAX_NIF_ILKN_DATA_RX_HRF_SIZE (2048)

/**
 * \brief
 * Number of entries in High Rate Fifo for tdm
 */
#define DNX_DATA_MAX_NIF_ILKN_TDM_RX_HRF_SIZE (256)

/**
 * \brief
 * Number of credits needed per High Rate Fifo for tx
 */
#define DNX_DATA_MAX_NIF_ILKN_TX_HRF_CREDITS (192)

/**
 * \brief
 * Number of High Rate Fifo queues in RX per port
 */
#define DNX_DATA_MAX_NIF_ILKN_NOF_RX_HRF_PER_PORT (2)

/**
 * \brief
 * High Watermark value for ILKN ELK
 */
#define DNX_DATA_MAX_NIF_ILKN_WATERMARK_HIGH_ELK (3)

/**
 * \brief
 * Low Watermark value for ILKN ELK
 */
#define DNX_DATA_MAX_NIF_ILKN_WATERMARK_LOW_ELK (4)

/**
 * \brief
 * High Watermark value for ILKN Data
 */
#define DNX_DATA_MAX_NIF_ILKN_WATERMARK_HIGH_DATA (11)

/**
 * \brief
 * Low Watermark value for ILKN Data
 */
#define DNX_DATA_MAX_NIF_ILKN_WATERMARK_LOW_DATA (12)

/**
 * \brief
 * Indicated if device supports ILKN with speed of 20625
 */
#define DNX_DATA_MAX_NIF_ILKN_IS_20G_SPEED_SUPPORTED (1)

/**
 * \brief
 * Indicated if device supports ILKN with speed of 25000
 */
#define DNX_DATA_MAX_NIF_ILKN_IS_25G_SPEED_SUPPORTED (1)

/**
 * \brief
 * Indicated if device supports ILKN with speed of 27343
 */
#define DNX_DATA_MAX_NIF_ILKN_IS_27G_SPEED_SUPPORTED (0)

/**
 * \brief
 * Indicated if device supports ILKN with speed of 28125
 */
#define DNX_DATA_MAX_NIF_ILKN_IS_28G_SPEED_SUPPORTED (1)

/**
 * \brief
 * Indicated if device supports ILKN with speed of 53125
 */
#define DNX_DATA_MAX_NIF_ILKN_IS_53G_SPEED_SUPPORTED (1)

/**
 * \brief
 * Indicated if device supports ILKN over nif with speed of 56G
 */
#define DNX_DATA_MAX_NIF_ILKN_IS_NIF_56G_SPEED_SUPPORTED (1)

/**
 * \brief
 * Indicated if device supports ILKN over fabric with speed of 56G
 */
#define DNX_DATA_MAX_NIF_ILKN_IS_FABRIC_56G_SPEED_SUPPORTED (1)

/**
 * \brief
 * Packet size for ILKN. Packet will be to this size if packet is smaller than this size
 */
#define DNX_DATA_MAX_NIF_ILKN_PAD_SIZE  (60)

/**
 * \brief
 * Number of CDU instances in the device
 */
#define DNX_DATA_MAX_NIF_ETH_CDU_NOF    (18)

/**
 * \brief
 * Number of CLU instances in the device
 */
#define DNX_DATA_MAX_NIF_ETH_CLU_NOF    (6)

/**
 * \brief
 * Number of CDUM instances in the device
 */
#define DNX_DATA_MAX_NIF_ETH_CDUM_NOF   (2)

/**
 * \brief
 * Number of pms in each CDU in the device
 */
#define DNX_DATA_MAX_NIF_ETH_NOF_PMS_IN_CDU (1)

/**
 * \brief
 * Number of pms in each CLU in the device
 */
#define DNX_DATA_MAX_NIF_ETH_NOF_PMS_IN_CLU (4)

/**
 * \brief
 * Maximum number of ETHU pms in the device
 */
#define DNX_DATA_MAX_NIF_ETH_TOTAL_NOF_ETHU_PMS_IN_DEVICE (28)

/**
 * \brief
 * Number of lanes in pm in CDU unit in the device
 */
#define DNX_DATA_MAX_NIF_ETH_NOF_CDU_LANES_IN_PM (8)

/**
 * \brief
 * Number of lanes in pm in CLU unit in the device
 */
#define DNX_DATA_MAX_NIF_ETH_NOF_CLU_LANES_IN_PM (4)

/**
 * \brief
 * Number of CDU pms in the device
 */
#define DNX_DATA_MAX_NIF_ETH_NOF_CDU_PMS (18)

/**
 * \brief
 * Number of CLU pms in the device
 */
#define DNX_DATA_MAX_NIF_ETH_NOF_CLU_PMS (24)

/**
 * \brief
 * Maximum number of ETHU in the device
 */
#define DNX_DATA_MAX_NIF_ETH_ETHU_NOF   (18)

/**
 * \brief
 * Maximum number of ETHU in each device core
 */
#define DNX_DATA_MAX_NIF_ETH_ETHU_NOF_PER_CORE (10)

/**
 * \brief
 * Number of CDU instances in each device core
 */
#define DNX_DATA_MAX_NIF_ETH_CDU_NOF_PER_CORE (9)

/**
 * \brief
 * Number of CLU instances in each device core
 */
#define DNX_DATA_MAX_NIF_ETH_CLU_NOF_PER_CORE (6)

/**
 * \brief
 * Number of lanes in each CDU
 */
#define DNX_DATA_MAX_NIF_ETH_NOF_LANES_IN_CDU (8)

/**
 * \brief
 * Number of lanes in each CLU
 */
#define DNX_DATA_MAX_NIF_ETH_NOF_LANES_IN_CLU (16)

/**
 * \brief
 * Maximal number of lanes in ethernet unit (maximum between CLU and CDU)
 */
#define DNX_DATA_MAX_NIF_ETH_MAX_NOF_LANES_IN_ETHU (16)

/**
 * \brief
 * Number of CDU lanes in device
 */
#define DNX_DATA_MAX_NIF_ETH_TOTAL_NOF_CDU_LANES_IN_DEVICE (144)

/**
 * \brief
 * Number of MAC mode config units per CDU
 */
#define DNX_DATA_MAX_NIF_ETH_CDU_MAC_MODE_CONFIG_NOF (2)

/**
 * \brief
 * Number of lanes in each MAC mode config
 */
#define DNX_DATA_MAX_NIF_ETH_MAC_MODE_CONFIG_LANES_NOF (4)

/**
 * \brief
 * Number of MAC units per CDU
 */
#define DNX_DATA_MAX_NIF_ETH_CDU_MAC_NOF (2)

/**
 * \brief
 * Number of lanes in each MAC
 */
#define DNX_DATA_MAX_NIF_ETH_MAC_LANES_NOF (8)

/**
 * \brief
 * number of logical fifos in the CDU
 */
#define DNX_DATA_MAX_NIF_ETH_ETHU_LOGICAL_FIFO_NOF (16)

/**
 * \brief
 * number of entries in the CDU memory, to be shared between all logical FIFOs
 */
#define DNX_DATA_MAX_NIF_ETH_CDU_MEMORY_ENTRIES_NOF (1024)

/**
 * \brief
 * number of entries in the CLU memory, to be shared between all logical FIFOs
 */
#define DNX_DATA_MAX_NIF_ETH_CLU_MEMORY_ENTRIES_NOF (1024)

/**
 * \brief
 * minimum number of entries to allocate to a priority group (priority group = RMC)
 */
#define DNX_DATA_MAX_NIF_ETH_PRIORITY_GROUP_NOF_ENTRIES_MIN (4)

/**
 * \brief
 * number of allowed priority groups per port (priority group = RMC)
 */
#define DNX_DATA_MAX_NIF_ETH_PRIORITY_GROUPS_NOF (3)

/**
 * \brief
 * min padding size
 */
#define DNX_DATA_MAX_NIF_ETH_PAD_SIZE_MIN (64)

/**
 * \brief
 * max padding size
 */
#define DNX_DATA_MAX_NIF_ETH_PAD_SIZE_MAX (96)

/**
 * \brief
 * max packet size
 */
#define DNX_DATA_MAX_NIF_ETH_PACKET_SIZE_MAX (16383)

/**
 * \brief
 * max auto-negotiation abilities
 */
#define DNX_DATA_MAX_NIF_ETH_AN_MAX_NOF_ABILITIES (20)

/**
 * \brief
 * Phy granularity of phy_map table
 */
#define DNX_DATA_MAX_NIF_ETH_PHY_MAP_GRANULARITY (8)

/**
 * \brief
 * Marks if 400G speed port is supported for the device
 */
#define DNX_DATA_MAX_NIF_ETH_IS_400G_SUPPORTED (1)

/**
 * \brief
 * Number of FEU instances in the device
 */
#define DNX_DATA_MAX_NIF_FLEXE_FEU_NOF  (1)

/**
 * \brief
 * Number of total clients, including 1588 and OAM channel
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_CLIENTS (82)

/**
 * \brief
 * Number of FlexE clients
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_FLEXE_CLIENTS (80)

/**
 * \brief
 * Number of special clients for 1588 and OAM
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_SPECIAL_CLIENTS (2)

/**
 * \brief
 * Number of FlexE groups
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_GROUPS (8)

/**
 * \brief
 * MAX FlexE group ID
 */
#define DNX_DATA_MAX_NIF_FLEXE_MAX_GROUP_ID (1048574)

/**
 * \brief
 * MIN FlexE group ID
 */
#define DNX_DATA_MAX_NIF_FLEXE_MIN_GROUP_ID (1)

/**
 * \brief
 * The TX delay in NB interface
 */
#define DNX_DATA_MAX_NIF_FLEXE_NB_TX_DELAY (6)

/**
 * \brief
 * first read from fifo will start only after data has accumulated in the fifo.
 */
#define DNX_DATA_MAX_NIF_FLEXE_NB_TX_FIFO_TH_FOR_FIRST_READ (25)

/**
 * \brief
 * Number of FlexE pcs
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_PCS  (8)

/**
 * \brief
 * Number of PHY speed
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_PHY_SPEEDS (4)

/**
 * \brief
 * The granularity for PHY speed
 */
#define DNX_DATA_MAX_NIF_FLEXE_PHY_SPEED_GRANULARITY (50000)

/**
 * \brief
 * The max capacity for FlexE core
 */
#define DNX_DATA_MAX_NIF_FLEXE_MAX_FLEXE_CORE_SPEED (400000)

/**
 * \brief
 * Define the clock source PM id for flexe core
 */
#define DNX_DATA_MAX_NIF_FLEXE_FLEXE_CORE_CLOCK_SOURCE_PM (0)

/**
 * \brief
 * Number of FlexE client logical fifos
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_LOGICAL_FIFOS (128)

/**
 * \brief
 * base number for SAR channel
 */
#define DNX_DATA_MAX_NIF_FLEXE_SAR_CHANNEL_BASE (80)

/**
 * \brief
 * base number for MAC channel
 */
#define DNX_DATA_MAX_NIF_FLEXE_MAC_CHANNEL_BASE (160)

/**
 * \brief
 * The FlexE client speed granularity
 */
#define DNX_DATA_MAX_NIF_FLEXE_CLIENT_SPEED_GRANULARITY (5000)

/**
 * \brief
 * Number of SB RX fifos
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_SB_RX_FIFOS (256)

/**
 * \brief
 * Client channel ID for OAM
 */
#define DNX_DATA_MAX_NIF_FLEXE_OAM_CLIENT_CHANNEL (80)

/**
 * \brief
 * Client channel ID for 1588
 */
#define DNX_DATA_MAX_NIF_FLEXE_PTP_CLIENT_CHANNEL (81)

/**
 * \brief
 * TMC Calendar slot for OAM
 */
#define DNX_DATA_MAX_NIF_FLEXE_OAM_TX_CAL_SLOT (0)

/**
 * \brief
 * TMC Calendar slot for 1588
 */
#define DNX_DATA_MAX_NIF_FLEXE_PTP_TX_CAL_SLOT (40)

/**
 * \brief
 * number of allowed priority groups per port (priority group = RMC)
 */
#define DNX_DATA_MAX_NIF_FLEXE_PRIORITY_GROUPS_NOF (2)

/**
 * \brief
 * Define the MAX number of time slots
 */
#define DNX_DATA_MAX_NIF_FLEXE_MAX_NOF_SLOTS (80)

/**
 * \brief
 * Define the Min client ID
 */
#define DNX_DATA_MAX_NIF_FLEXE_MIN_CLIENT_ID (1)

/**
 * \brief
 * Define the MAX client ID
 */
#define DNX_DATA_MAX_NIF_FLEXE_MAX_CLIENT_ID (65534)

/**
 * \brief
 * Max bandwidth for PTP channel
 */
#define DNX_DATA_MAX_NIF_FLEXE_PTP_CHANNEL_MAX_BANDWIDTH (500)

/**
 * \brief
 * Max bandwidth for OAM channel
 */
#define DNX_DATA_MAX_NIF_FLEXE_OAM_CHANNEL_MAX_BANDWIDTH (2500)

/**
 * \brief
 * Nof memory entries per RMC slots
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_MEM_ENTRIES_PER_SLOT (128)

/**
 * \brief
 * Nof FIFO entries for PTP OAM client in SB RX FIFO
 */
#define DNX_DATA_MAX_NIF_FLEXE_PTP_OAM_FIFO_ENTRIES_IN_SB_RX (4)

/**
 * \brief
 * Number of FlexE instances
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_FLEXE_INSTANCES (8)

/**
 * \brief
 * Number of FlexE logical PHYs
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_FLEXE_LPHYS (8)

/**
 * \brief
 * Number of FlexE SAR timeslots
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_SAR_TIMESLOTS (80)

/**
 * \brief
 * Number of FlexE MAC timeslots
 */
#define DNX_DATA_MAX_NIF_FLEXE_NOF_MAC_TIMESLOTS (81)

/**
 * \brief
 * ILKN CORE ID for FlexE distributed mode
 */
#define DNX_DATA_MAX_NIF_FLEXE_DISTRIBUTED_ILU_ID (1)

/**
 * \brief
 * Max NIF capacity when flexe is enabled in centralized mode
 */
#define DNX_DATA_MAX_NIF_FLEXE_MAX_NIF_RATE_CENTRALIZED (1220000)

/**
 * \brief
 * Nof slots for RMC calendar
 */
#define DNX_DATA_MAX_NIF_FLEXE_RMC_CAL_NOF_SLOTS (128)

/**
 * \brief
 * Max NIF capacity when flexe is enabled in distributed mode
 */
#define DNX_DATA_MAX_NIF_FLEXE_MAX_NIF_RATE_DISTRIBUTED (420000)

/**
 * \brief
 * Max ILU capacity for flexe distributed interface
 */
#define DNX_DATA_MAX_NIF_FLEXE_MAX_ILU_RATE_DISTRIBUTED (618744)

/**
 * \brief
 * Burst size for ILKN in FEU
 */
#define DNX_DATA_MAX_NIF_FLEXE_ILKN_BURST_SIZE_IN_FEU (244)

/**
 * \brief
 * Average IPG in bits for L1 ports
 */
#define DNX_DATA_MAX_NIF_FLEXE_AVERAGE_IPG_FOR_L1 (88)

/**
 * \brief
 * Tx threshold in Tiny MAC
 */
#define DNX_DATA_MAX_NIF_FLEXE_MAC_TX_THRESHOLD (4)

/**
 * \brief
 * Number of control frame properties to which each packet is compared in order to be recognized as control frame in the PRD parser
 */
#define DNX_DATA_MAX_NIF_PRD_NOF_CONTROL_FRAMES (4)

/**
 * \brief
 * Number of ether types supported by the PRD Parser
 */
#define DNX_DATA_MAX_NIF_PRD_NOF_ETHER_TYPE_CODES (16)

/**
 * \brief
 * Number of entries in PRD Parser soft stage TCAM
 */
#define DNX_DATA_MAX_NIF_PRD_NOF_TCAM_ENTRIES (32)

/**
 * \brief
 * Number of MPLS special labels recognized by the PRD parser
 */
#define DNX_DATA_MAX_NIF_PRD_NOF_MPLS_SPECIAL_LABELS (4)

/**
 * \brief
 * Number of PRD Priorities
 */
#define DNX_DATA_MAX_NIF_PRD_NOF_PRIORITIES (4)

/**
 * \brief
 * Min value of the configurable ether type codes
 */
#define DNX_DATA_MAX_NIF_PRD_CUSTOM_ETHER_TYPE_CODE_MIN (1)

/**
 * \brief
 * Max value of the configurable ether type codes
 */
#define DNX_DATA_MAX_NIF_PRD_CUSTOM_ETHER_TYPE_CODE_MAX (6)

/**
 * \brief
 * Max value of the  ether type code
 */
#define DNX_DATA_MAX_NIF_PRD_ETHER_TYPE_CODE_MAX (15)

/**
 * \brief
 * Max value of the  ether type
 */
#define DNX_DATA_MAX_NIF_PRD_ETHER_TYPE_MAX (65535)

/**
 * \brief
 * Max value of the ingress port drop threshold for RMC
 */
#define DNX_DATA_MAX_NIF_PRD_RMC_THRESHOLD_MAX (32767)

/**
 * \brief
 * Max value of the ingress CDU port drop threshold for RMC
 */
#define DNX_DATA_MAX_NIF_PRD_CDU_RMC_THRESHOLD_MAX (32767)

/**
 * \brief
 * Max value of the ingress port drop threshold for HRF
 */
#define DNX_DATA_MAX_NIF_PRD_HRF_THRESHOLD_MAX (8191)

/**
 * \brief
 * Max value of the  MPLS special label
 */
#define DNX_DATA_MAX_NIF_PRD_MPLS_SPECIAL_LABEL_MAX (15)

/**
 * \brief
 * Max value of the  FLEX Key offset key
 */
#define DNX_DATA_MAX_NIF_PRD_FLEX_KEY_OFFSET_KEY_MAX (127)

/**
 * \brief
 * Max value of the  FLEX Key offset result
 */
#define DNX_DATA_MAX_NIF_PRD_FLEX_KEY_OFFSET_RESULT_MAX (255)

/**
 * \brief
 * Max value of the  tpid
 */
#define DNX_DATA_MAX_NIF_PRD_TPID_MAX   (65535)

/**
 * \brief
 * Number of prd porfiles per CLU
 */
#define DNX_DATA_MAX_NIF_PRD_NOF_CLU_PORT_PROFILES (4)

/**
 * \brief
 * Number of prd porfiles per FEU
 */
#define DNX_DATA_MAX_NIF_PRD_NOF_FEU_PORT_PROFILES (8)

/**
 * \brief
 * Number of pm types
 */
#define DNX_DATA_MAX_NIF_PORTMOD_PM_TYPES_NOF (4)

/**
 * \brief
 * The Rate equivalent to 1 weight bit of ETHU scheduler
 */
#define DNX_DATA_MAX_NIF_SCHEDULER_RATE_PER_ETHU_BIT (100000)

/**
 * \brief
 * The Rate equivalent to 1 weight bit of ILU scheduler
 */
#define DNX_DATA_MAX_NIF_SCHEDULER_RATE_PER_ILU_BIT (150000)

/**
 * \brief
 * The Rate equivalent to 1 bit of CDU RMC scheduler
 */
#define DNX_DATA_MAX_NIF_SCHEDULER_RATE_PER_CDU_RMC_BIT (100000)

/**
 * \brief
 * The Rate equivalent to 1 bit of CLU RMC scheduler
 */
#define DNX_DATA_MAX_NIF_SCHEDULER_RATE_PER_CLU_RMC_BIT (25000)

/**
 * \brief
 * Number of weight bits in UNIT scheduler
 */
#define DNX_DATA_MAX_NIF_SCHEDULER_NOF_WEIGHT_BITS (4)

/**
 * \brief
 * Number of bits in RMC scheduler
 */
#define DNX_DATA_MAX_NIF_SCHEDULER_NOF_RMC_BITS (4)

/**
 * \brief
 * size of the cdu rmc fifo entry size in bits
 */
#define DNX_DATA_MAX_NIF_DBAL_CDU_RX_RMC_ENTRY_SIZE (12)

/**
 * \brief
 * size of the clu rmc fifo entry size in bits
 */
#define DNX_DATA_MAX_NIF_DBAL_CLU_RX_RMC_ENTRY_SIZE (10)

/**
 * \brief
 * size of the cdu tx start threshold entry size
 */
#define DNX_DATA_MAX_NIF_DBAL_CDU_TX_START_THRESHOLD_ENTRY_SIZE (14)

/**
 * \brief
 * size of the clu tx start threshold entry size
 */
#define DNX_DATA_MAX_NIF_DBAL_CLU_TX_START_THRESHOLD_ENTRY_SIZE (14)

/**
 * \brief
 * size of the ilu burst min entry size
 */
#define DNX_DATA_MAX_NIF_DBAL_ILU_BURST_MIN_ENTRY_SIZE (2)

/**
 * \brief
 * ethu rx rmc counter entry size
 */
#define DNX_DATA_MAX_NIF_DBAL_ETHU_RX_RMC_COUNTER_ENTRY_SIZE (15)

/**
 * \brief
 * cdu nif status fifo level and occupancy entry size
 */
#define DNX_DATA_MAX_NIF_DBAL_CDU_LANE_FIFO_LEVEL_AND_OCCUPANCY_ENTRY_SIZE (14)

/**
 * \brief
 * clu nif status fifo level and occupancy entry size
 */
#define DNX_DATA_MAX_NIF_DBAL_CLU_LANE_FIFO_LEVEL_AND_OCCUPANCY_ENTRY_SIZE (14)

/**
 * \brief
 * nof bits in SCH_CNT_DEC_THRESHOLD field
 */
#define DNX_DATA_MAX_NIF_DBAL_SCH_CNT_DEC_THRESHOLD_BIT_SIZE (15)

/**
 * \brief
 * nof bits in TX credit value field
 */
#define DNX_DATA_MAX_NIF_DBAL_TX_CREDITS_BITS (8)

/*
 * }
 */

/*}*/
#endif /*_DNX_DATA_MAX_NIF_H_*/
/* *INDENT-ON* */
