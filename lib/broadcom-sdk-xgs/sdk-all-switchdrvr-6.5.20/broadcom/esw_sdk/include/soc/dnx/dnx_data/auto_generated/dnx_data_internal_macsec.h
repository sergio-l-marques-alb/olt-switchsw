/** \file dnx_data_internal_macsec.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_MACSEC_H_
/*{*/
#define _DNX_DATA_INTERNAL_MACSEC_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_macsec.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_macsec_submodule_general,
    dnx_data_macsec_submodule_ingress,
    dnx_data_macsec_submodule_egress,

    /**
     * Must be last one!
     */
    _dnx_data_macsec_submodule_nof
} dnx_data_macsec_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_macsec_general_feature_get(
    int unit,
    dnx_data_macsec_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_macsec_general_define_macsec_nof,
    dnx_data_macsec_general_define_macsec_nof_bits,
    dnx_data_macsec_general_define_ports_in_macsec_nof,
    dnx_data_macsec_general_define_ports_in_macsec_nof_bits,
    dnx_data_macsec_general_define_etype_nof,

    /**
     * Must be last one!
     */
    _dnx_data_macsec_general_define_nof
} dnx_data_macsec_general_define_e;

/* Get Data */
/**
 * \brief returns define data of macsec_nof
 * Module - 'macsec', Submodule - 'general', data - 'macsec_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     macsec_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_general_macsec_nof_get(
    int unit);

/**
 * \brief returns define data of macsec_nof_bits
 * Module - 'macsec', Submodule - 'general', data - 'macsec_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     macsec_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_general_macsec_nof_bits_get(
    int unit);

/**
 * \brief returns define data of ports_in_macsec_nof
 * Module - 'macsec', Submodule - 'general', data - 'ports_in_macsec_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ports_in_macsec_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_general_ports_in_macsec_nof_get(
    int unit);

/**
 * \brief returns define data of ports_in_macsec_nof_bits
 * Module - 'macsec', Submodule - 'general', data - 'ports_in_macsec_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ports_in_macsec_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_general_ports_in_macsec_nof_bits_get(
    int unit);

/**
 * \brief returns define data of etype_nof
 * Module - 'macsec', Submodule - 'general', data - 'etype_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     etype_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_general_etype_nof_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_macsec_general_table_pm_to_macsec,
    dnx_data_macsec_general_table_macsec_instances,

    /**
     * Must be last one!
     */
    _dnx_data_macsec_general_table_nof
} dnx_data_macsec_general_table_e;

/* Get Data */
/**
 * \brief get table pm_to_macsec entry 
 * 
 * \param [in] unit - unit #
 * \param [in] ethu_index - 
 * 
 * \return
 *     pm_to_macsec - returns the relevant entry values grouped in struct - see dnx_data_macsec_general_pm_to_macsec_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_macsec_general_pm_to_macsec_t * dnx_data_macsec_general_pm_to_macsec_get(
    int unit,
    int ethu_index);

/**
 * \brief get table macsec_instances entry 
 * 
 * \param [in] unit - unit #
 * \param [in] macsec_id - 
 * 
 * \return
 *     macsec_instances - returns the relevant entry values grouped in struct - see dnx_data_macsec_general_macsec_instances_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_macsec_general_macsec_instances_t * dnx_data_macsec_general_macsec_instances_get(
    int unit,
    int macsec_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'macsec', Submodule - 'general', table - 'pm_to_macsec'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_macsec_general_pm_to_macsec_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'macsec', Submodule - 'general', table - 'macsec_instances'
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_macsec_general_macsec_instances_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)pm_to_macsec info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pm_to_macsec - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_macsec_general_pm_to_macsec_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)macsec_instances info
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     macsec_instances - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_macsec_general_macsec_instances_info_get(
    int unit);

/*
 * SUBMODULE INGRESS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_macsec_ingress_feature_get(
    int unit,
    dnx_data_macsec_ingress_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_macsec_ingress_define_flow_nof,
    dnx_data_macsec_ingress_define_policy_nof,
    dnx_data_macsec_ingress_define_secure_channel_nof,
    dnx_data_macsec_ingress_define_secure_assoc_nof,
    dnx_data_macsec_ingress_define_udf_nof_bits,
    dnx_data_macsec_ingress_define_mgmt_rule_exact_nof,
    dnx_data_macsec_ingress_define_tpid_nof,
    dnx_data_macsec_ingress_define_cpu_flex_map_nof,
    dnx_data_macsec_ingress_define_sc_tcam_nof,
    dnx_data_macsec_ingress_define_sa_per_sc_nof,
    dnx_data_macsec_ingress_define_invalidate_sa,

    /**
     * Must be last one!
     */
    _dnx_data_macsec_ingress_define_nof
} dnx_data_macsec_ingress_define_e;

/* Get Data */
/**
 * \brief returns define data of flow_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'flow_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_flow_nof_get(
    int unit);

/**
 * \brief returns define data of policy_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'policy_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     policy_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_policy_nof_get(
    int unit);

/**
 * \brief returns define data of secure_channel_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'secure_channel_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     secure_channel_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_secure_channel_nof_get(
    int unit);

/**
 * \brief returns define data of secure_assoc_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'secure_assoc_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     secure_assoc_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_secure_assoc_nof_get(
    int unit);

/**
 * \brief returns define data of udf_nof_bits
 * Module - 'macsec', Submodule - 'ingress', data - 'udf_nof_bits'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     udf_nof_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_udf_nof_bits_get(
    int unit);

/**
 * \brief returns define data of mgmt_rule_exact_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'mgmt_rule_exact_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mgmt_rule_exact_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_mgmt_rule_exact_nof_get(
    int unit);

/**
 * \brief returns define data of tpid_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'tpid_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tpid_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_tpid_nof_get(
    int unit);

/**
 * \brief returns define data of cpu_flex_map_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'cpu_flex_map_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cpu_flex_map_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_cpu_flex_map_nof_get(
    int unit);

/**
 * \brief returns define data of sc_tcam_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'sc_tcam_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sc_tcam_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_sc_tcam_nof_get(
    int unit);

/**
 * \brief returns numeric data of sa_per_sc_nof
 * Module - 'macsec', Submodule - 'ingress', data - 'sa_per_sc_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sa_per_sc_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_sa_per_sc_nof_get(
    int unit);

/**
 * \brief returns numeric data of invalidate_sa
 * Module - 'macsec', Submodule - 'ingress', data - 'invalidate_sa'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     invalidate_sa - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_ingress_invalidate_sa_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_macsec_ingress_table_nof
} dnx_data_macsec_ingress_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE EGRESS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_macsec_egress_feature_get(
    int unit,
    dnx_data_macsec_egress_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_macsec_egress_define_secure_channel_nof,
    dnx_data_macsec_egress_define_secure_assoc_nof,
    dnx_data_macsec_egress_define_soft_expiry_threshold_profiles_nof,
    dnx_data_macsec_egress_define_sa_per_sc_nof,

    /**
     * Must be last one!
     */
    _dnx_data_macsec_egress_define_nof
} dnx_data_macsec_egress_define_e;

/* Get Data */
/**
 * \brief returns define data of secure_channel_nof
 * Module - 'macsec', Submodule - 'egress', data - 'secure_channel_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     secure_channel_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_egress_secure_channel_nof_get(
    int unit);

/**
 * \brief returns define data of secure_assoc_nof
 * Module - 'macsec', Submodule - 'egress', data - 'secure_assoc_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     secure_assoc_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_egress_secure_assoc_nof_get(
    int unit);

/**
 * \brief returns define data of soft_expiry_threshold_profiles_nof
 * Module - 'macsec', Submodule - 'egress', data - 'soft_expiry_threshold_profiles_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     soft_expiry_threshold_profiles_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_egress_soft_expiry_threshold_profiles_nof_get(
    int unit);

/**
 * \brief returns numeric data of sa_per_sc_nof
 * Module - 'macsec', Submodule - 'egress', data - 'sa_per_sc_nof'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sa_per_sc_nof - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_macsec_egress_sa_per_sc_nof_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_macsec_egress_table_nof
} dnx_data_macsec_egress_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_macsec_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_MACSEC_H_*/
/* *INDENT-ON* */
