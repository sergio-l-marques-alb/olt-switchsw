/** \file dnxf_data_dev_init.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNXF_DATA_DEV_INIT_H_
/*{*/
#define _DNXF_DATA_DEV_INIT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/property.h>
#include <sal/limits.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnxf/dnxf_data/auto_generated/dnxf_data_max_dev_init.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNXF_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnxf_data_if_dev_init
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_if_dev_init_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - TIME:
 * time relevant for init
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule time table step_thresh
 * Table info:
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 */
typedef struct
{
    /**
     * Time threshold in microseconds. The default value was chosen because the majority of the steps are below it. For steps that are expected to be above the default, a specific threshold can be set
     */
    uint32 value;
} dnxf_data_dev_init_time_step_thresh_t;

/**
 * \brief Holds values of submodule time table appl_step_thresh
 * Table info:
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 */
typedef struct
{
    /**
     * Time threshold in microseconds. The default value was chosen because the majority of the steps are below it. For steps that are expected to be above the default, a specific threshold can be set
     */
    uint32 value;
} dnxf_data_dev_init_time_appl_step_thresh_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_time_feature_nof
} dnxf_data_dev_init_time_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_dev_init_time_feature_get_f) (
    int unit,
    dnxf_data_dev_init_time_feature_e feature);

/**
 * \brief returns define data of init_total_thresh
 * Module - 'dev_init', Submodule - 'time', data - 'init_total_thresh'
 * Default time threshold (in microseconds) for the overall time that the BCM Init takes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     init_total_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_time_init_total_thresh_get_f) (
    int unit);

/**
 * \brief returns define data of appl_init_total_thresh
 * Module - 'dev_init', Submodule - 'time', data - 'appl_init_total_thresh'
 * Default time threshold (in microseconds) for the overall time that the APPL Init takes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     appl_init_total_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_time_appl_init_total_thresh_get_f) (
    int unit);

/**
 * \brief get table step_thresh entry 
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 * 
 * \param [in] unit - unit #
 * \param [in] step_id - IDs for the different steps and sub-steps of the Init.
 * 
 * \return
 *     step_thresh - returns the relevant entry values grouped in struct - see dnxf_data_dev_init_time_step_thresh_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_dev_init_time_step_thresh_t *(
    *dnxf_data_dev_init_time_step_thresh_get_f) (
    int unit,
    int step_id);

/**
 * \brief get table appl_step_thresh entry 
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 * 
 * \param [in] unit - unit #
 * \param [in] step_id - IDs for the different steps and sub-steps of the Init.
 * 
 * \return
 *     appl_step_thresh - returns the relevant entry values grouped in struct - see dnxf_data_dev_init_time_appl_step_thresh_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_dev_init_time_appl_step_thresh_t *(
    *dnxf_data_dev_init_time_appl_step_thresh_get_f) (
    int unit,
    int step_id);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_DEV_INIT - TIME:
 * {
 */
/**
 * \brief Interface for dev_init time data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_dev_init_time_feature_get_f feature_get;
    /**
     * returns define data of init_total_thresh
     */
    dnxf_data_dev_init_time_init_total_thresh_get_f init_total_thresh_get;
    /**
     * returns define data of appl_init_total_thresh
     */
    dnxf_data_dev_init_time_appl_init_total_thresh_get_f appl_init_total_thresh_get;
    /**
     * get table step_thresh entry 
     */
    dnxf_data_dev_init_time_step_thresh_get_f step_thresh_get;
    /**
     * get general info table about table (for example key size)step_thresh info
     */
    dnxc_data_table_info_get_f step_thresh_info_get;
    /**
     * get table appl_step_thresh entry 
     */
    dnxf_data_dev_init_time_appl_step_thresh_get_f appl_step_thresh_get;
    /**
     * get general info table about table (for example key size)appl_step_thresh info
     */
    dnxc_data_table_info_get_f appl_step_thresh_info_get;
} dnxf_data_if_dev_init_time_t;

/*
 * }
 */

/*
 * SUBMODULE  - SHADOW:
 * shadow memory for init
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule shadow table uncacheable_mem
 * Table info:
 * uncache memory
 */
typedef struct
{
    /**
     * memory
     */
    soc_mem_t mem;
} dnxf_data_dev_init_shadow_uncacheable_mem_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_shadow_feature_nof
} dnxf_data_dev_init_shadow_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_dev_init_shadow_feature_get_f) (
    int unit,
    dnxf_data_dev_init_shadow_feature_e feature);

/**
 * \brief returns numeric data of cache_enable_all
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_all'
 * if true shadow all cacheable memory
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_all - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_shadow_cache_enable_all_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_enable_ecc
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_ecc'
 * if true shadow all cacheable memory which contain ecc field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_ecc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_shadow_cache_enable_ecc_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_enable_parity
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_parity'
 * if true shadow all cacheable memory which contain parity field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_parity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_shadow_cache_enable_parity_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_enable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_specific'
 * if true, some specific memory be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_shadow_cache_enable_specific_get_f) (
    int unit);

/**
 * \brief returns numeric data of cache_disable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_disable_specific'
 * if true, some specific memory won't be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_disable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_shadow_cache_disable_specific_get_f) (
    int unit);

/**
 * \brief get table uncacheable_mem entry 
 * uncache memory
 * 
 * \param [in] unit - unit #
 * \param [in] index - uncacheable memory index
 * 
 * \return
 *     uncacheable_mem - returns the relevant entry values grouped in struct - see dnxf_data_dev_init_shadow_uncacheable_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_dev_init_shadow_uncacheable_mem_t *(
    *dnxf_data_dev_init_shadow_uncacheable_mem_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_DEV_INIT - SHADOW:
 * {
 */
/**
 * \brief Interface for dev_init shadow data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_dev_init_shadow_feature_get_f feature_get;
    /**
     * returns numeric data of cache_enable_all
     */
    dnxf_data_dev_init_shadow_cache_enable_all_get_f cache_enable_all_get;
    /**
     * returns numeric data of cache_enable_ecc
     */
    dnxf_data_dev_init_shadow_cache_enable_ecc_get_f cache_enable_ecc_get;
    /**
     * returns numeric data of cache_enable_parity
     */
    dnxf_data_dev_init_shadow_cache_enable_parity_get_f cache_enable_parity_get;
    /**
     * returns numeric data of cache_enable_specific
     */
    dnxf_data_dev_init_shadow_cache_enable_specific_get_f cache_enable_specific_get;
    /**
     * returns numeric data of cache_disable_specific
     */
    dnxf_data_dev_init_shadow_cache_disable_specific_get_f cache_disable_specific_get;
    /**
     * get table uncacheable_mem entry 
     */
    dnxf_data_dev_init_shadow_uncacheable_mem_get_f uncacheable_mem_get;
    /**
     * get general info table about table (for example key size)uncacheable_mem info
     */
    dnxc_data_table_info_get_f uncacheable_mem_info_get;
} dnxf_data_if_dev_init_shadow_t;

/*
 * }
 */

/*
 * SUBMODULE  - HA:
 * values for sw state and high availability init
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ha table stable_filename
 * Table info:
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 */
typedef struct
{
    /**
     * stable filename
     */
    char *val;
} dnxf_data_dev_init_ha_stable_filename_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_ha_feature_nof
} dnxf_data_dev_init_ha_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_dev_init_ha_feature_get_f) (
    int unit,
    dnxf_data_dev_init_ha_feature_e feature);

/**
 * \brief returns numeric data of warmboot_support
 * Module - 'dev_init', Submodule - 'ha', data - 'warmboot_support'
 * specify if unit should support wb
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     warmboot_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_ha_warmboot_support_get_f) (
    int unit);

/**
 * \brief returns numeric data of sw_state_max_size
 * Module - 'dev_init', Submodule - 'ha', data - 'sw_state_max_size'
 * specify the amount of memory (in bytes) preallocated for sw state
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sw_state_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_ha_sw_state_max_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of stable_location
 * Module - 'dev_init', Submodule - 'ha', data - 'stable_location'
 * Specify the stable cache option for Warm Boot operations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_location - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_ha_stable_location_get_f) (
    int unit);

/**
 * \brief returns numeric data of stable_size
 * Module - 'dev_init', Submodule - 'ha', data - 'stable_size'
 * Specify the stable cache size in bytes used for Warm boot operations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_dev_init_ha_stable_size_get_f) (
    int unit);

/**
 * \brief get table stable_filename entry 
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_filename - returns the relevant entry values grouped in struct - see dnxf_data_dev_init_ha_stable_filename_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_dev_init_ha_stable_filename_t *(
    *dnxf_data_dev_init_ha_stable_filename_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_DEV_INIT - HA:
 * {
 */
/**
 * \brief Interface for dev_init ha data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_dev_init_ha_feature_get_f feature_get;
    /**
     * returns numeric data of warmboot_support
     */
    dnxf_data_dev_init_ha_warmboot_support_get_f warmboot_support_get;
    /**
     * returns numeric data of sw_state_max_size
     */
    dnxf_data_dev_init_ha_sw_state_max_size_get_f sw_state_max_size_get;
    /**
     * returns numeric data of stable_location
     */
    dnxf_data_dev_init_ha_stable_location_get_f stable_location_get;
    /**
     * returns numeric data of stable_size
     */
    dnxf_data_dev_init_ha_stable_size_get_f stable_size_get;
    /**
     * get table stable_filename entry 
     */
    dnxf_data_dev_init_ha_stable_filename_get_f stable_filename_get;
    /**
     * get general info table about table (for example key size)stable_filename info
     */
    dnxc_data_table_info_get_f stable_filename_info_get;
} dnxf_data_if_dev_init_ha_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNXF_DATA_IF_DEV_INIT:
 * {
 */
/**
 * \brief Interface for dev_init data
 */
typedef struct
{
    /**
     * Interface for dev_init time data
     */
    dnxf_data_if_dev_init_time_t time;
    /**
     * Interface for dev_init shadow data
     */
    dnxf_data_if_dev_init_shadow_t shadow;
    /**
     * Interface for dev_init ha data
     */
    dnxf_data_if_dev_init_ha_t ha;
} dnxf_data_if_dev_init_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnxf_data_if_dev_init_t dnxf_data_dev_init;
/*
 * }
 */
/*}*/
#endif /*_DNXF_DATA_DEV_INIT_H_*/
/* *INDENT-ON* */
