/** \file dnxf_data_intr.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNXF_DATA_INTR_H_
/*{*/
#define _DNXF_DATA_INTR_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/property.h>
#include <sal/limits.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnxc/intr.h>
#include <soc/dnxf/dnxf_data/auto_generated/dnxf_data_max_intr.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNXF_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnxf_data_if_intr
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_if_intr_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * General interrupt information.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule general table active_on_init
 * Table info:
 * interrupt active on init
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
} dnxf_data_intr_general_active_on_init_t;

/**
 * \brief Holds values of submodule general table disable_on_init
 * Table info:
 * interrupt disabled on init
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
} dnxf_data_intr_general_disable_on_init_t;

/**
 * \brief Holds values of submodule general table disable_print_on_init
 * Table info:
 * interrupt disable print on init
 */
typedef struct
{
    /**
     * interrupt ident
     */
    uint32 intr;
} dnxf_data_intr_general_disable_print_on_init_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_intr_general_feature_nof
} dnxf_data_intr_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_intr_general_feature_get_f) (
    int unit,
    dnxf_data_intr_general_feature_e feature);

/**
 * \brief returns numeric data of nof_interrupts
 * Module - 'intr', Submodule - 'general', data - 'nof_interrupts'
 * Number of interrupts in the device.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_interrupts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_intr_general_nof_interrupts_get_f) (
    int unit);

/**
 * \brief returns numeric data of polled_irq_mode
 * Module - 'intr', Submodule - 'general', data - 'polled_irq_mode'
 * Are interrupts supported polling mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     polled_irq_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_intr_general_polled_irq_mode_get_f) (
    int unit);

/**
 * \brief get table active_on_init entry 
 * interrupt active on init
 * 
 * \param [in] unit - unit #
 * \param [in] offset - active interrupt offset
 * 
 * \return
 *     active_on_init - returns the relevant entry values grouped in struct - see dnxf_data_intr_general_active_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_intr_general_active_on_init_t *(
    *dnxf_data_intr_general_active_on_init_get_f) (
    int unit,
    int offset);

/**
 * \brief get table disable_on_init entry 
 * interrupt disabled on init
 * 
 * \param [in] unit - unit #
 * \param [in] offset - disable interrupt offset
 * 
 * \return
 *     disable_on_init - returns the relevant entry values grouped in struct - see dnxf_data_intr_general_disable_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_intr_general_disable_on_init_t *(
    *dnxf_data_intr_general_disable_on_init_get_f) (
    int unit,
    int offset);

/**
 * \brief get table disable_print_on_init entry 
 * interrupt disable print on init
 * 
 * \param [in] unit - unit #
 * \param [in] offset - disable print on init offset
 * 
 * \return
 *     disable_print_on_init - returns the relevant entry values grouped in struct - see dnxf_data_intr_general_disable_print_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_intr_general_disable_print_on_init_t *(
    *dnxf_data_intr_general_disable_print_on_init_get_f) (
    int unit,
    int offset);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_INTR - GENERAL:
 * {
 */
/**
 * \brief Interface for intr general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_intr_general_feature_get_f feature_get;
    /**
     * returns numeric data of nof_interrupts
     */
    dnxf_data_intr_general_nof_interrupts_get_f nof_interrupts_get;
    /**
     * returns numeric data of polled_irq_mode
     */
    dnxf_data_intr_general_polled_irq_mode_get_f polled_irq_mode_get;
    /**
     * get table active_on_init entry 
     */
    dnxf_data_intr_general_active_on_init_get_f active_on_init_get;
    /**
     * get general info table about table (for example key size)active_on_init info
     */
    dnxc_data_table_info_get_f active_on_init_info_get;
    /**
     * get table disable_on_init entry 
     */
    dnxf_data_intr_general_disable_on_init_get_f disable_on_init_get;
    /**
     * get general info table about table (for example key size)disable_on_init info
     */
    dnxc_data_table_info_get_f disable_on_init_info_get;
    /**
     * get table disable_print_on_init entry 
     */
    dnxf_data_intr_general_disable_print_on_init_get_f disable_print_on_init_get;
    /**
     * get general info table about table (for example key size)disable_print_on_init info
     */
    dnxc_data_table_info_get_f disable_print_on_init_info_get;
} dnxf_data_if_intr_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - SER:
 * SER handle information.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule ser table mem_mask
 * Table info:
 * memory need masked
 */
typedef struct
{
    /**
     * register name for  memory mask
     */
    soc_reg_t reg;
    /**
     * If field defined - will set just the specified field
     */
    soc_field_t field;
    /**
     * Register field should be set value, 0 or 1
     */
    dnxc_mem_mask_mode_e mode;
} dnxf_data_intr_ser_mem_mask_t;

/**
 * \brief Holds values of submodule ser table xor_mem
 * Table info:
 * XOR memory information
 */
typedef struct
{
    /**
     * xor memory name
     */
    soc_mem_t mem;
    /**
     * SRAM bank wide bits
     */
    int sram_banks_bits;
    /**
     * Entry number address wide for each bank
     */
    int entry_used_bits;
} dnxf_data_intr_ser_xor_mem_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_intr_ser_feature_nof
} dnxf_data_intr_ser_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_intr_ser_feature_get_f) (
    int unit,
    dnxf_data_intr_ser_feature_e feature);

/**
 * \brief get table mem_mask entry 
 * memory need masked
 * 
 * \param [in] unit - unit #
 * \param [in] index - memory masked index
 * 
 * \return
 *     mem_mask - returns the relevant entry values grouped in struct - see dnxf_data_intr_ser_mem_mask_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_intr_ser_mem_mask_t *(
    *dnxf_data_intr_ser_mem_mask_get_f) (
    int unit,
    int index);

/**
 * \brief get table xor_mem entry 
 * XOR memory information
 * 
 * \param [in] unit - unit #
 * \param [in] index - XOR memory index
 * 
 * \return
 *     xor_mem - returns the relevant entry values grouped in struct - see dnxf_data_intr_ser_xor_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_intr_ser_xor_mem_t *(
    *dnxf_data_intr_ser_xor_mem_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_INTR - SER:
 * {
 */
/**
 * \brief Interface for intr ser data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_intr_ser_feature_get_f feature_get;
    /**
     * get table mem_mask entry 
     */
    dnxf_data_intr_ser_mem_mask_get_f mem_mask_get;
    /**
     * get general info table about table (for example key size)mem_mask info
     */
    dnxc_data_table_info_get_f mem_mask_info_get;
    /**
     * get table xor_mem entry 
     */
    dnxf_data_intr_ser_xor_mem_get_f xor_mem_get;
    /**
     * get general info table about table (for example key size)xor_mem info
     */
    dnxc_data_table_info_get_f xor_mem_info_get;
} dnxf_data_if_intr_ser_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNXF_DATA_IF_INTR:
 * {
 */
/**
 * \brief Interface for intr data
 */
typedef struct
{
    /**
     * Interface for intr general data
     */
    dnxf_data_if_intr_general_t general;
    /**
     * Interface for intr ser data
     */
    dnxf_data_if_intr_ser_t ser;
} dnxf_data_if_intr_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnxf_data_if_intr_t dnxf_data_intr;
/*
 * }
 */
/*}*/
#endif /*_DNXF_DATA_INTR_H_*/
/* *INDENT-ON* */
