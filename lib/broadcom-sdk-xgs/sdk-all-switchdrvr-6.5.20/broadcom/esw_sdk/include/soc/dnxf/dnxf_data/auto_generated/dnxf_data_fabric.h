/** \file dnxf_data_fabric.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2020 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNXF_DATA_FABRIC_H_
/*{*/
#define _DNXF_DATA_FABRIC_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/property.h>
#include <sal/limits.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/types.h>
#include <soc/dnxc/fabric.h>
#include <soc/dnxf/cmn/dnxf_diag.h>
#include <soc/dnxf/cmn/dnxf_defs.h>
#include <soc/dnxf/dnxf_data/auto_generated/dnxf_data_max_fabric.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNXF_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnxf_data_if_fabric
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_if_fabric_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * General fabric attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Indicates if device can operate in any of the multistage modes
     */
    dnxf_data_fabric_general_is_multi_stage_supported,

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_general_feature_nof
} dnxf_data_fabric_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_general_feature_get_f) (
    int unit,
    dnxf_data_fabric_general_feature_e feature);

/**
 * \brief returns define data of max_nof_pipes
 * Module - 'fabric', Submodule - 'general', data - 'max_nof_pipes'
 * The maximum number of pipes that the device supports.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_pipes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_general_max_nof_pipes_get_f) (
    int unit);

/**
 * \brief returns numeric data of device_mode
 * Module - 'fabric', Submodule - 'general', data - 'device_mode'
 * Sets the device operational mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     device_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_general_device_mode_get_f) (
    int unit);

/**
 * \brief returns numeric data of local_routing_enable_uc
 * Module - 'fabric', Submodule - 'general', data - 'local_routing_enable_uc'
 * Enables unicast local routing from FE1 to FE3.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     local_routing_enable_uc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_general_local_routing_enable_uc_get_f) (
    int unit);

/**
 * \brief returns numeric data of local_routing_enable_mc
 * Module - 'fabric', Submodule - 'general', data - 'local_routing_enable_mc'
 * Enables multicast local routing from FE1 to FE3.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     local_routing_enable_mc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_general_local_routing_enable_mc_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - GENERAL:
 * {
 */
/**
 * \brief Interface for fabric general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_general_feature_get_f feature_get;
    /**
     * returns define data of max_nof_pipes
     */
    dnxf_data_fabric_general_max_nof_pipes_get_f max_nof_pipes_get;
    /**
     * returns numeric data of device_mode
     */
    dnxf_data_fabric_general_device_mode_get_f device_mode_get;
    /**
     * returns numeric data of local_routing_enable_uc
     */
    dnxf_data_fabric_general_local_routing_enable_uc_get_f local_routing_enable_uc_get;
    /**
     * returns numeric data of local_routing_enable_mc
     */
    dnxf_data_fabric_general_local_routing_enable_mc_get_f local_routing_enable_mc_get;
} dnxf_data_if_fabric_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - PIPES:
 * General pipes attributes
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule pipes table map
 * Table info:
 * map traffic cast X priority to fabric pipe
 */
typedef struct
{
    /**
     * each element represents uc priority pipe
     */
    uint32 uc[DNXF_DATA_MAX_FABRIC_CONGESTION_NOF_THRESHOLD_PRIORITIES];
    /**
     * each element represents mc priority pipe
     */
    uint32 mc[DNXF_DATA_MAX_FABRIC_CONGESTION_NOF_THRESHOLD_PRIORITIES];
    /**
     * The configuration display name
     */
    char *name;
    /**
     * The pipe mapping type
     */
    soc_dnxc_fabric_pipe_map_type_t type;
    /**
     * Minimum priority to be considered as high priority multicast
     */
    int min_hp_mc;
} dnxf_data_fabric_pipes_map_t;

/**
 * \brief Holds values of submodule pipes table valid_map_config
 * Table info:
 * pipes map valid configurations
 */
typedef struct
{
    /**
     * Number of pipes
     */
    uint32 nof_pipes;
    /**
     * map unicast cell priority to pipe
     */
    uint32 uc[DNXF_DATA_MAX_FABRIC_CONGESTION_NOF_THRESHOLD_PRIORITIES];
    /**
     * map multicast cell priority to pipe
     */
    uint32 mc[DNXF_DATA_MAX_FABRIC_CONGESTION_NOF_THRESHOLD_PRIORITIES];
    /**
     * The configuration display name
     */
    char *name;
    /**
     * The pipe mapping type
     */
    soc_dnxc_fabric_pipe_map_type_t type;
    /**
     * Minimum priority to be considered as high priority multicast
     */
    int min_hp_mc;
} dnxf_data_fabric_pipes_valid_map_config_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_pipes_feature_nof
} dnxf_data_fabric_pipes_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_pipes_feature_get_f) (
    int unit,
    dnxf_data_fabric_pipes_feature_e feature);

/**
 * \brief returns define data of max_nof_pipes
 * Module - 'fabric', Submodule - 'pipes', data - 'max_nof_pipes'
 * Max number of pipes supported by the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_pipes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_pipes_max_nof_pipes_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_valid_mapping_options
 * Module - 'fabric', Submodule - 'pipes', data - 'nof_valid_mapping_options'
 * Number of all valid cast/priority to pipe mapping options 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_valid_mapping_options - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_pipes_nof_valid_mapping_options_get_f) (
    int unit);

/**
 * \brief returns numeric data of nof_pipes
 * Module - 'fabric', Submodule - 'pipes', data - 'nof_pipes'
 * Configure number of fabric pipes.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_pipes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_pipes_nof_pipes_get_f) (
    int unit);

/**
 * \brief returns numeric data of system_contains_multiple_pipe_device
 * Module - 'fabric', Submodule - 'pipes', data - 'system_contains_multiple_pipe_device'
 * Determines if there is a multiple pipe device in the system
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     system_contains_multiple_pipe_device - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_pipes_system_contains_multiple_pipe_device_get_f) (
    int unit);

/**
 * \brief returns numeric data of system_tdm_priority
 * Module - 'fabric', Submodule - 'pipes', data - 'system_tdm_priority'
 * Mark a CGM fabric priority as TDM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     system_tdm_priority - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_pipes_system_tdm_priority_get_f) (
    int unit);

/**
 * \brief get table map entry 
 * map traffic cast X priority to fabric pipe
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     map - returns the relevant entry values grouped in struct - see dnxf_data_fabric_pipes_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_fabric_pipes_map_t *(
    *dnxf_data_fabric_pipes_map_get_f) (
    int unit);

/**
 * \brief get table valid_map_config entry 
 * pipes map valid configurations
 * 
 * \param [in] unit - unit #
 * \param [in] mapping_option_idx - The configuration running number
 * 
 * \return
 *     valid_map_config - returns the relevant entry values grouped in struct - see dnxf_data_fabric_pipes_valid_map_config_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_fabric_pipes_valid_map_config_t *(
    *dnxf_data_fabric_pipes_valid_map_config_get_f) (
    int unit,
    int mapping_option_idx);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - PIPES:
 * {
 */
/**
 * \brief Interface for fabric pipes data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_pipes_feature_get_f feature_get;
    /**
     * returns define data of max_nof_pipes
     */
    dnxf_data_fabric_pipes_max_nof_pipes_get_f max_nof_pipes_get;
    /**
     * returns numeric data of nof_valid_mapping_options
     */
    dnxf_data_fabric_pipes_nof_valid_mapping_options_get_f nof_valid_mapping_options_get;
    /**
     * returns numeric data of nof_pipes
     */
    dnxf_data_fabric_pipes_nof_pipes_get_f nof_pipes_get;
    /**
     * returns numeric data of system_contains_multiple_pipe_device
     */
    dnxf_data_fabric_pipes_system_contains_multiple_pipe_device_get_f system_contains_multiple_pipe_device_get;
    /**
     * returns numeric data of system_tdm_priority
     */
    dnxf_data_fabric_pipes_system_tdm_priority_get_f system_tdm_priority_get;
    /**
     * get table map entry 
     */
    dnxf_data_fabric_pipes_map_get_f map_get;
    /**
     * get general info table about table (for example key size)map info
     */
    dnxc_data_table_info_get_f map_info_get;
    /**
     * get table valid_map_config entry 
     */
    dnxf_data_fabric_pipes_valid_map_config_get_f valid_map_config_get;
    /**
     * get general info table about table (for example key size)valid_map_config info
     */
    dnxc_data_table_info_get_f valid_map_config_info_get;
} dnxf_data_if_fabric_pipes_t;

/*
 * }
 */

/*
 * SUBMODULE  - MULTICAST:
 * General multicast attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_multicast_feature_nof
} dnxf_data_fabric_multicast_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_multicast_feature_get_f) (
    int unit,
    dnxf_data_fabric_multicast_feature_e feature);

/**
 * \brief returns define data of table_row_size_in_uint32
 * Module - 'fabric', Submodule - 'multicast', data - 'table_row_size_in_uint32'
 * Multicast table row size in UINT32s.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_row_size_in_uint32 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_multicast_table_row_size_in_uint32_get_f) (
    int unit);

/**
 * \brief returns numeric data of id_range
 * Module - 'fabric', Submodule - 'multicast', data - 'id_range'
 * Specifies the MC IDs range.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     id_range - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_multicast_id_range_get_f) (
    int unit);

/**
 * \brief returns numeric data of mode
 * Module - 'fabric', Submodule - 'multicast', data - 'mode'
 * Specifies the MC mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_multicast_mode_get_f) (
    int unit);

/**
 * \brief returns numeric data of priority_map_enable
 * Module - 'fabric', Submodule - 'multicast', data - 'priority_map_enable'
 * Enable mapping internal multicast priority according to MC-ID ranges.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     priority_map_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_multicast_priority_map_enable_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - MULTICAST:
 * {
 */
/**
 * \brief Interface for fabric multicast data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_multicast_feature_get_f feature_get;
    /**
     * returns define data of table_row_size_in_uint32
     */
    dnxf_data_fabric_multicast_table_row_size_in_uint32_get_f table_row_size_in_uint32_get;
    /**
     * returns numeric data of id_range
     */
    dnxf_data_fabric_multicast_id_range_get_f id_range_get;
    /**
     * returns numeric data of mode
     */
    dnxf_data_fabric_multicast_mode_get_f mode_get;
    /**
     * returns numeric data of priority_map_enable
     */
    dnxf_data_fabric_multicast_priority_map_enable_get_f priority_map_enable_get;
} dnxf_data_if_fabric_multicast_t;

/*
 * }
 */

/*
 * SUBMODULE  - FIFOS:
 * Fabric FIFOs attributes
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule fifos table rx_depth_per_pipe
 * Table info:
 * RX FIFO depth per pipe
 */
typedef struct
{
    /**
     * FE1 FIFOs depth
     */
    uint32 fe1;
    /**
     * FE3 FIFOs depth
     */
    uint32 fe3;
} dnxf_data_fabric_fifos_rx_depth_per_pipe_t;

/**
 * \brief Holds values of submodule fifos table mid_depth_per_pipe
 * Table info:
 * Middle FIFO depth per pipe
 */
typedef struct
{
    /**
     * FE1 FIFOs Non Local Route Depth
     */
    uint32 fe1_nlr;
    /**
     * FE3 FIFOs Non Local Route Depth
     */
    uint32 fe3_nlr;
    /**
     * FE1 FIFOs Local Route Depth
     */
    uint32 fe1_lr;
    /**
     * FE3 FIFOs Local Route Depth
     */
    uint32 fe3_lr;
} dnxf_data_fabric_fifos_mid_depth_per_pipe_t;

/**
 * \brief Holds values of submodule fifos table tx_depth_per_pipe
 * Table info:
 * TX FIFO depth per pipe
 */
typedef struct
{
    /**
     * FE1 FIFOs Non Local Route Depth
     */
    uint32 fe1_nlr;
    /**
     * FE3 FIFOs Non Local Route Depth
     */
    uint32 fe3_nlr;
    /**
     * FE1 FIFOs Local Route Depth
     */
    uint32 fe1_lr;
    /**
     * FE3 FIFOs Local Route Depth
     */
    uint32 fe3_lr;
} dnxf_data_fabric_fifos_tx_depth_per_pipe_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_fifos_feature_nof
} dnxf_data_fabric_fifos_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_fifos_feature_get_f) (
    int unit,
    dnxf_data_fabric_fifos_feature_e feature);

/**
 * \brief returns define data of granularity
 * Module - 'fabric', Submodule - 'fifos', data - 'granularity'
 * FIFO granularity
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_fifos_granularity_get_f) (
    int unit);

/**
 * \brief returns define data of min_depth
 * Module - 'fabric', Submodule - 'fifos', data - 'min_depth'
 * Minimal FIFO depth
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     min_depth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_fifos_min_depth_get_f) (
    int unit);

/**
 * \brief returns define data of max_unused_resources
 * Module - 'fabric', Submodule - 'fifos', data - 'max_unused_resources'
 * Maximal unused resources allowed per FIFO
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_unused_resources - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_fifos_max_unused_resources_get_f) (
    int unit);

/**
 * \brief returns define data of rx_resources
 * Module - 'fabric', Submodule - 'fifos', data - 'rx_resources'
 * Maximal Available Resources per RX FIFO
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_resources - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_fifos_rx_resources_get_f) (
    int unit);

/**
 * \brief returns define data of mid_resources
 * Module - 'fabric', Submodule - 'fifos', data - 'mid_resources'
 * Maximal Available Resources per MIDDLE FIFO
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mid_resources - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_fifos_mid_resources_get_f) (
    int unit);

/**
 * \brief returns define data of tx_resources
 * Module - 'fabric', Submodule - 'fifos', data - 'tx_resources'
 * Maximal Available Resources per TX FIFO
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tx_resources - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_fifos_tx_resources_get_f) (
    int unit);

/**
 * \brief returns define data of rx_full_offset
 * Module - 'fabric', Submodule - 'fifos', data - 'rx_full_offset'
 * RX FULL-to-DEPTH offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_full_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_fifos_rx_full_offset_get_f) (
    int unit);

/**
 * \brief returns define data of mid_full_offset
 * Module - 'fabric', Submodule - 'fifos', data - 'mid_full_offset'
 * MID FULL-to-DEPTH offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mid_full_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_fifos_mid_full_offset_get_f) (
    int unit);

/**
 * \brief returns define data of tx_full_offset
 * Module - 'fabric', Submodule - 'fifos', data - 'tx_full_offset'
 * TX FULL-to-DEPTH offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tx_full_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_fifos_tx_full_offset_get_f) (
    int unit);

/**
 * \brief get table rx_depth_per_pipe entry 
 * RX FIFO depth per pipe
 * 
 * \param [in] unit - unit #
 * \param [in] pipe_id - Pipe ID.
 * 
 * \return
 *     rx_depth_per_pipe - returns the relevant entry values grouped in struct - see dnxf_data_fabric_fifos_rx_depth_per_pipe_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_fabric_fifos_rx_depth_per_pipe_t *(
    *dnxf_data_fabric_fifos_rx_depth_per_pipe_get_f) (
    int unit,
    int pipe_id);

/**
 * \brief get table mid_depth_per_pipe entry 
 * Middle FIFO depth per pipe
 * 
 * \param [in] unit - unit #
 * \param [in] pipe_id - Pipe ID.
 * 
 * \return
 *     mid_depth_per_pipe - returns the relevant entry values grouped in struct - see dnxf_data_fabric_fifos_mid_depth_per_pipe_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_fabric_fifos_mid_depth_per_pipe_t *(
    *dnxf_data_fabric_fifos_mid_depth_per_pipe_get_f) (
    int unit,
    int pipe_id);

/**
 * \brief get table tx_depth_per_pipe entry 
 * TX FIFO depth per pipe
 * 
 * \param [in] unit - unit #
 * \param [in] pipe_id - Pipe ID.
 * 
 * \return
 *     tx_depth_per_pipe - returns the relevant entry values grouped in struct - see dnxf_data_fabric_fifos_tx_depth_per_pipe_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_fabric_fifos_tx_depth_per_pipe_t *(
    *dnxf_data_fabric_fifos_tx_depth_per_pipe_get_f) (
    int unit,
    int pipe_id);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - FIFOS:
 * {
 */
/**
 * \brief Interface for fabric fifos data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_fifos_feature_get_f feature_get;
    /**
     * returns define data of granularity
     */
    dnxf_data_fabric_fifos_granularity_get_f granularity_get;
    /**
     * returns define data of min_depth
     */
    dnxf_data_fabric_fifos_min_depth_get_f min_depth_get;
    /**
     * returns define data of max_unused_resources
     */
    dnxf_data_fabric_fifos_max_unused_resources_get_f max_unused_resources_get;
    /**
     * returns define data of rx_resources
     */
    dnxf_data_fabric_fifos_rx_resources_get_f rx_resources_get;
    /**
     * returns define data of mid_resources
     */
    dnxf_data_fabric_fifos_mid_resources_get_f mid_resources_get;
    /**
     * returns define data of tx_resources
     */
    dnxf_data_fabric_fifos_tx_resources_get_f tx_resources_get;
    /**
     * returns define data of rx_full_offset
     */
    dnxf_data_fabric_fifos_rx_full_offset_get_f rx_full_offset_get;
    /**
     * returns define data of mid_full_offset
     */
    dnxf_data_fabric_fifos_mid_full_offset_get_f mid_full_offset_get;
    /**
     * returns define data of tx_full_offset
     */
    dnxf_data_fabric_fifos_tx_full_offset_get_f tx_full_offset_get;
    /**
     * get table rx_depth_per_pipe entry 
     */
    dnxf_data_fabric_fifos_rx_depth_per_pipe_get_f rx_depth_per_pipe_get;
    /**
     * get general info table about table (for example key size)rx_depth_per_pipe info
     */
    dnxc_data_table_info_get_f rx_depth_per_pipe_info_get;
    /**
     * get table mid_depth_per_pipe entry 
     */
    dnxf_data_fabric_fifos_mid_depth_per_pipe_get_f mid_depth_per_pipe_get;
    /**
     * get general info table about table (for example key size)mid_depth_per_pipe info
     */
    dnxc_data_table_info_get_f mid_depth_per_pipe_info_get;
    /**
     * get table tx_depth_per_pipe entry 
     */
    dnxf_data_fabric_fifos_tx_depth_per_pipe_get_f tx_depth_per_pipe_get;
    /**
     * get general info table about table (for example key size)tx_depth_per_pipe info
     */
    dnxc_data_table_info_get_f tx_depth_per_pipe_info_get;
} dnxf_data_if_fabric_fifos_t;

/*
 * }
 */

/*
 * SUBMODULE  - CONGESTION:
 * General CGM attributes
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule congestion table thresholds_info
 * Table info:
 * Congestion manager thresholds information.
 */
typedef struct
{
    /**
     * String associated to the threshold used for diagnostic printouts.
     */
    char *threshold_str;
    /**
     * Shows the threshold group which is used for diagnostic filtering.
     */
    soc_dnxf_threshold_group_options_t threshold_group;
    /**
     * Shows the threshold stage which is used for diagnostic filtering.
     */
    soc_dnxf_threshold_stage_options_t threshold_stage;
    /**
     * Shows the threshold index type used to specify the threshold application.
     */
    _shr_dnxf_cgm_index_type_t index_type;
    /**
     * Indicates which of the API flags are supported for the given threshold.
     */
    uint32 supported_flags;
    /**
     * Indicates if the threshold controls DCH or DCML blocks.
     */
    uint32 is_tx;
    /**
     * Additional threshold checks.
     */
    uint32 th_validity_bmp;
    /**
     * Indicates if the threshold should be displaied in the diagnostic
     */
    uint32 is_to_be_displayed;
} dnxf_data_fabric_congestion_thresholds_info_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_congestion_feature_nof
} dnxf_data_fabric_congestion_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_congestion_feature_get_f) (
    int unit,
    dnxf_data_fabric_congestion_feature_e feature);

/**
 * \brief returns define data of nof_profiles
 * Module - 'fabric', Submodule - 'congestion', data - 'nof_profiles'
 * Number of CGM profiles.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_congestion_nof_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_threshold_priorities
 * Module - 'fabric', Submodule - 'congestion', data - 'nof_threshold_priorities'
 * Number of CGM threhold priorities.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_threshold_priorities - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_congestion_nof_threshold_priorities_get_f) (
    int unit);

/**
 * \brief returns define data of nof_threshold_levels
 * Module - 'fabric', Submodule - 'congestion', data - 'nof_threshold_levels'
 * Number of CGM threhold levels.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_threshold_levels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_congestion_nof_threshold_levels_get_f) (
    int unit);

/**
 * \brief returns define data of nof_threshold_index_dimensions
 * Module - 'fabric', Submodule - 'congestion', data - 'nof_threshold_index_dimensions'
 * Number of threshold index dimendions used to indicate the application of the threshold value.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_threshold_index_dimensions - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_congestion_nof_threshold_index_dimensions_get_f) (
    int unit);

/**
 * \brief returns define data of nof_thresholds
 * Module - 'fabric', Submodule - 'congestion', data - 'nof_thresholds'
 * Number of CGM thresholds for each device.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_thresholds - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_congestion_nof_thresholds_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dfl_banks
 * Module - 'fabric', Submodule - 'congestion', data - 'nof_dfl_banks'
 * Number of DFL banks.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dfl_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_congestion_nof_dfl_banks_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dfl_sub_banks
 * Module - 'fabric', Submodule - 'congestion', data - 'nof_dfl_sub_banks'
 * Number of sub-banks for each DFL bank.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dfl_sub_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_congestion_nof_dfl_sub_banks_get_f) (
    int unit);

/**
 * \brief returns define data of nof_dfl_bank_entries
 * Module - 'fabric', Submodule - 'congestion', data - 'nof_dfl_bank_entries'
 * Number of overall entries in each DFL bank.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_dfl_bank_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_congestion_nof_dfl_bank_entries_get_f) (
    int unit);

/**
 * \brief returns define data of nof_rci_bits
 * Module - 'fabric', Submodule - 'congestion', data - 'nof_rci_bits'
 * Number of RCI indication bits.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_rci_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_congestion_nof_rci_bits_get_f) (
    int unit);

/**
 * \brief get table thresholds_info entry 
 * Congestion manager thresholds information.
 * 
 * \param [in] unit - unit #
 * \param [in] threshold_id - The name of the threshold follwing the convention _SHR_FABRIC[Stage][Name][Index]th.
 * 
 * \return
 *     thresholds_info - returns the relevant entry values grouped in struct - see dnxf_data_fabric_congestion_thresholds_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnxf_data_fabric_congestion_thresholds_info_t *(
    *dnxf_data_fabric_congestion_thresholds_info_get_f) (
    int unit,
    int threshold_id);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - CONGESTION:
 * {
 */
/**
 * \brief Interface for fabric congestion data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_congestion_feature_get_f feature_get;
    /**
     * returns define data of nof_profiles
     */
    dnxf_data_fabric_congestion_nof_profiles_get_f nof_profiles_get;
    /**
     * returns define data of nof_threshold_priorities
     */
    dnxf_data_fabric_congestion_nof_threshold_priorities_get_f nof_threshold_priorities_get;
    /**
     * returns define data of nof_threshold_levels
     */
    dnxf_data_fabric_congestion_nof_threshold_levels_get_f nof_threshold_levels_get;
    /**
     * returns define data of nof_threshold_index_dimensions
     */
    dnxf_data_fabric_congestion_nof_threshold_index_dimensions_get_f nof_threshold_index_dimensions_get;
    /**
     * returns define data of nof_thresholds
     */
    dnxf_data_fabric_congestion_nof_thresholds_get_f nof_thresholds_get;
    /**
     * returns define data of nof_dfl_banks
     */
    dnxf_data_fabric_congestion_nof_dfl_banks_get_f nof_dfl_banks_get;
    /**
     * returns define data of nof_dfl_sub_banks
     */
    dnxf_data_fabric_congestion_nof_dfl_sub_banks_get_f nof_dfl_sub_banks_get;
    /**
     * returns define data of nof_dfl_bank_entries
     */
    dnxf_data_fabric_congestion_nof_dfl_bank_entries_get_f nof_dfl_bank_entries_get;
    /**
     * returns define data of nof_rci_bits
     */
    dnxf_data_fabric_congestion_nof_rci_bits_get_f nof_rci_bits_get;
    /**
     * get table thresholds_info entry 
     */
    dnxf_data_fabric_congestion_thresholds_info_get_f thresholds_info_get;
    /**
     * get general info table about table (for example key size)thresholds_info info
     */
    dnxc_data_table_info_get_f thresholds_info_info_get;
} dnxf_data_if_fabric_congestion_t;

/*
 * }
 */

/*
 * SUBMODULE  - CELL:
 * General cell attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_cell_feature_nof
} dnxf_data_fabric_cell_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_cell_feature_get_f) (
    int unit,
    dnxf_data_fabric_cell_feature_e feature);

/**
 * \brief returns define data of fifo_dma_fabric_cell_nof_entries_per_cell
 * Module - 'fabric', Submodule - 'cell', data - 'fifo_dma_fabric_cell_nof_entries_per_cell'
 * Number of entries per one cell (chunk).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifo_dma_fabric_cell_nof_entries_per_cell - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_fifo_dma_fabric_cell_nof_entries_per_cell_get_f) (
    int unit);

/**
 * \brief returns define data of rx_cpu_cell_max_payload_size
 * Module - 'fabric', Submodule - 'cell', data - 'rx_cpu_cell_max_payload_size'
 * Payload size of data cpu cells (bits).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_cpu_cell_max_payload_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_rx_cpu_cell_max_payload_size_get_f) (
    int unit);

/**
 * \brief returns define data of rx_max_nof_cpu_buffers
 * Module - 'fabric', Submodule - 'cell', data - 'rx_max_nof_cpu_buffers'
 * Number of rx CPU buffers.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_max_nof_cpu_buffers - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_rx_max_nof_cpu_buffers_get_f) (
    int unit);

/**
 * \brief returns define data of source_routed_cells_header_offset
 * Module - 'fabric', Submodule - 'cell', data - 'source_routed_cells_header_offset'
 * Offset in the header fields of sr cells.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     source_routed_cells_header_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_source_routed_cells_header_offset_get_f) (
    int unit);

/**
 * \brief returns define data of fifo_dma_nof_channels
 * Module - 'fabric', Submodule - 'cell', data - 'fifo_dma_nof_channels'
 * Number of channels used for fifo DMA.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifo_dma_nof_channels - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_fifo_dma_nof_channels_get_f) (
    int unit);

/**
 * \brief returns define data of fifo_dma_entry_size
 * Module - 'fabric', Submodule - 'cell', data - 'fifo_dma_entry_size'
 * DMA entry size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifo_dma_entry_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_fifo_dma_entry_size_get_f) (
    int unit);

/**
 * \brief returns define data of fifo_dma_max_nof_entries
 * Module - 'fabric', Submodule - 'cell', data - 'fifo_dma_max_nof_entries'
 * MAX number of entries in DMA buffer.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifo_dma_max_nof_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_fifo_dma_max_nof_entries_get_f) (
    int unit);

/**
 * \brief returns define data of fifo_dma_min_nof_entries
 * Module - 'fabric', Submodule - 'cell', data - 'fifo_dma_min_nof_entries'
 * MIN number of entries in DMA buffer.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifo_dma_min_nof_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_fifo_dma_min_nof_entries_get_f) (
    int unit);

/**
 * \brief returns numeric data of fifo_dma_enable
 * Module - 'fabric', Submodule - 'cell', data - 'fifo_dma_enable'
 * Deterimins if to use or not to use FIFO DMA.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifo_dma_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_fifo_dma_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of fifo_dma_buffer_size
 * Module - 'fabric', Submodule - 'cell', data - 'fifo_dma_buffer_size'
 * Size of the host memory stored allocated by the CPU.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifo_dma_buffer_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_fifo_dma_buffer_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of fifo_dma_threshold
 * Module - 'fabric', Submodule - 'cell', data - 'fifo_dma_threshold'
 * The number of writes by the DMA until a threshold based interrupt is triggered
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifo_dma_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_fifo_dma_threshold_get_f) (
    int unit);

/**
 * \brief returns numeric data of fifo_dma_timeout
 * Module - 'fabric', Submodule - 'cell', data - 'fifo_dma_timeout'
 * The amount of time in microseconds that passes from the first write by the DMA until a timeout based interrupt is triggered.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fifo_dma_timeout - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_fifo_dma_timeout_get_f) (
    int unit);

/**
 * \brief returns numeric data of rx_thread_pri
 * Module - 'fabric', Submodule - 'cell', data - 'rx_thread_pri'
 * Rx thread priority.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_thread_pri - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_cell_rx_thread_pri_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - CELL:
 * {
 */
/**
 * \brief Interface for fabric cell data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_cell_feature_get_f feature_get;
    /**
     * returns define data of fifo_dma_fabric_cell_nof_entries_per_cell
     */
    dnxf_data_fabric_cell_fifo_dma_fabric_cell_nof_entries_per_cell_get_f fifo_dma_fabric_cell_nof_entries_per_cell_get;
    /**
     * returns define data of rx_cpu_cell_max_payload_size
     */
    dnxf_data_fabric_cell_rx_cpu_cell_max_payload_size_get_f rx_cpu_cell_max_payload_size_get;
    /**
     * returns define data of rx_max_nof_cpu_buffers
     */
    dnxf_data_fabric_cell_rx_max_nof_cpu_buffers_get_f rx_max_nof_cpu_buffers_get;
    /**
     * returns define data of source_routed_cells_header_offset
     */
    dnxf_data_fabric_cell_source_routed_cells_header_offset_get_f source_routed_cells_header_offset_get;
    /**
     * returns define data of fifo_dma_nof_channels
     */
    dnxf_data_fabric_cell_fifo_dma_nof_channels_get_f fifo_dma_nof_channels_get;
    /**
     * returns define data of fifo_dma_entry_size
     */
    dnxf_data_fabric_cell_fifo_dma_entry_size_get_f fifo_dma_entry_size_get;
    /**
     * returns define data of fifo_dma_max_nof_entries
     */
    dnxf_data_fabric_cell_fifo_dma_max_nof_entries_get_f fifo_dma_max_nof_entries_get;
    /**
     * returns define data of fifo_dma_min_nof_entries
     */
    dnxf_data_fabric_cell_fifo_dma_min_nof_entries_get_f fifo_dma_min_nof_entries_get;
    /**
     * returns numeric data of fifo_dma_enable
     */
    dnxf_data_fabric_cell_fifo_dma_enable_get_f fifo_dma_enable_get;
    /**
     * returns numeric data of fifo_dma_buffer_size
     */
    dnxf_data_fabric_cell_fifo_dma_buffer_size_get_f fifo_dma_buffer_size_get;
    /**
     * returns numeric data of fifo_dma_threshold
     */
    dnxf_data_fabric_cell_fifo_dma_threshold_get_f fifo_dma_threshold_get;
    /**
     * returns numeric data of fifo_dma_timeout
     */
    dnxf_data_fabric_cell_fifo_dma_timeout_get_f fifo_dma_timeout_get;
    /**
     * returns numeric data of rx_thread_pri
     */
    dnxf_data_fabric_cell_rx_thread_pri_get_f rx_thread_pri_get;
} dnxf_data_if_fabric_cell_t;

/*
 * }
 */

/*
 * SUBMODULE  - TOPOLOGY:
 * General topology attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_topology_feature_nof
} dnxf_data_fabric_topology_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_topology_feature_get_f) (
    int unit,
    dnxf_data_fabric_topology_feature_e feature);

/**
 * \brief returns define data of max_link_score
 * Module - 'fabric', Submodule - 'topology', data - 'max_link_score'
 * Max link score.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_link_score - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_topology_max_link_score_get_f) (
    int unit);

/**
 * \brief returns define data of nof_local_modid
 * Module - 'fabric', Submodule - 'topology', data - 'nof_local_modid'
 * Number of local modids.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_local_modid - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_topology_nof_local_modid_get_f) (
    int unit);

/**
 * \brief returns define data of nof_local_modid_fe13
 * Module - 'fabric', Submodule - 'topology', data - 'nof_local_modid_fe13'
 * Number of local modids in FE13 mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_local_modid_fe13 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_topology_nof_local_modid_fe13_get_f) (
    int unit);

/**
 * \brief returns numeric data of load_balancing_mode
 * Module - 'fabric', Submodule - 'topology', data - 'load_balancing_mode'
 * Sets the load balancing method.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     load_balancing_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_topology_load_balancing_mode_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - TOPOLOGY:
 * {
 */
/**
 * \brief Interface for fabric topology data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_topology_feature_get_f feature_get;
    /**
     * returns define data of max_link_score
     */
    dnxf_data_fabric_topology_max_link_score_get_f max_link_score_get;
    /**
     * returns define data of nof_local_modid
     */
    dnxf_data_fabric_topology_nof_local_modid_get_f nof_local_modid_get;
    /**
     * returns define data of nof_local_modid_fe13
     */
    dnxf_data_fabric_topology_nof_local_modid_fe13_get_f nof_local_modid_fe13_get;
    /**
     * returns numeric data of load_balancing_mode
     */
    dnxf_data_fabric_topology_load_balancing_mode_get_f load_balancing_mode_get;
} dnxf_data_if_fabric_topology_t;

/*
 * }
 */

/*
 * SUBMODULE  - GPD:
 * General graceful power down attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_gpd_feature_nof
} dnxf_data_fabric_gpd_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_gpd_feature_get_f) (
    int unit,
    dnxf_data_fabric_gpd_feature_e feature);

/**
 * \brief returns define data of in_time
 * Module - 'fabric', Submodule - 'gpd', data - 'in_time'
 * Time interval between 2 GPD cells to enter GPD mode (usec).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     in_time - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_gpd_in_time_get_f) (
    int unit);

/**
 * \brief returns define data of out_time
 * Module - 'fabric', Submodule - 'gpd', data - 'out_time'
 * Time to get out of GPD mode if no GPD cells arrived (msec).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     out_time - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_gpd_out_time_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - GPD:
 * {
 */
/**
 * \brief Interface for fabric gpd data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_gpd_feature_get_f feature_get;
    /**
     * returns define data of in_time
     */
    dnxf_data_fabric_gpd_in_time_get_f in_time_get;
    /**
     * returns define data of out_time
     */
    dnxf_data_fabric_gpd_out_time_get_f out_time_get;
} dnxf_data_if_fabric_gpd_t;

/*
 * }
 */

/*
 * SUBMODULE  - REACHABILITY:
 * General reachability  attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_reachability_feature_nof
} dnxf_data_fabric_reachability_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_reachability_feature_get_f) (
    int unit,
    dnxf_data_fabric_reachability_feature_e feature);

/**
 * \brief returns define data of table_row_size_in_uint32
 * Module - 'fabric', Submodule - 'reachability', data - 'table_row_size_in_uint32'
 * RTP table Row Size in UINT32s.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_row_size_in_uint32 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_reachability_table_row_size_in_uint32_get_f) (
    int unit);

/**
 * \brief returns define data of table_group_size
 * Module - 'fabric', Submodule - 'reachability', data - 'table_group_size'
 * RMHMT Group Size.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_group_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_reachability_table_group_size_get_f) (
    int unit);

/**
 * \brief returns define data of rmgr_units
 * Module - 'fabric', Submodule - 'reachability', data - 'rmgr_units'
 * RTP RMGR resolution.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmgr_units - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_reachability_rmgr_units_get_f) (
    int unit);

/**
 * \brief returns define data of rmgr_nof_links
 * Module - 'fabric', Submodule - 'reachability', data - 'rmgr_nof_links'
 * RTP RMGR number of links that should be taken into account.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rmgr_nof_links - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_reachability_rmgr_nof_links_get_f) (
    int unit);

/**
 * \brief returns define data of gpd_rmgr_time_factor
 * Module - 'fabric', Submodule - 'reachability', data - 'gpd_rmgr_time_factor'
 * Factor waiting for the GPD to spread in the system.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gpd_rmgr_time_factor - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_reachability_gpd_rmgr_time_factor_get_f) (
    int unit);

/**
 * \brief returns define data of gen_rate_link_delta
 * Module - 'fabric', Submodule - 'reachability', data - 'gen_rate_link_delta'
 * Reachability gen rate between links.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gen_rate_link_delta - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_reachability_gen_rate_link_delta_get_f) (
    int unit);

/**
 * \brief returns define data of gen_rate_full_cycle
 * Module - 'fabric', Submodule - 'reachability', data - 'gen_rate_full_cycle'
 * RTP Reachability gen rate full cycle.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gen_rate_full_cycle - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_reachability_gen_rate_full_cycle_get_f) (
    int unit);

/**
 * \brief returns define data of gpd_gen_rate_full_cycle
 * Module - 'fabric', Submodule - 'reachability', data - 'gpd_gen_rate_full_cycle'
 * RTP GPD Reachability gen rate full cycle (nsec).
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gpd_gen_rate_full_cycle - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_reachability_gpd_gen_rate_full_cycle_get_f) (
    int unit);

/**
 * \brief returns define data of watchdog_rate
 * Module - 'fabric', Submodule - 'reachability', data - 'watchdog_rate'
 * RTP Reachability watchdog rate.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     watchdog_rate - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnxf_data_fabric_reachability_watchdog_rate_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - REACHABILITY:
 * {
 */
/**
 * \brief Interface for fabric reachability data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_reachability_feature_get_f feature_get;
    /**
     * returns define data of table_row_size_in_uint32
     */
    dnxf_data_fabric_reachability_table_row_size_in_uint32_get_f table_row_size_in_uint32_get;
    /**
     * returns define data of table_group_size
     */
    dnxf_data_fabric_reachability_table_group_size_get_f table_group_size_get;
    /**
     * returns define data of rmgr_units
     */
    dnxf_data_fabric_reachability_rmgr_units_get_f rmgr_units_get;
    /**
     * returns define data of rmgr_nof_links
     */
    dnxf_data_fabric_reachability_rmgr_nof_links_get_f rmgr_nof_links_get;
    /**
     * returns define data of gpd_rmgr_time_factor
     */
    dnxf_data_fabric_reachability_gpd_rmgr_time_factor_get_f gpd_rmgr_time_factor_get;
    /**
     * returns define data of gen_rate_link_delta
     */
    dnxf_data_fabric_reachability_gen_rate_link_delta_get_f gen_rate_link_delta_get;
    /**
     * returns define data of gen_rate_full_cycle
     */
    dnxf_data_fabric_reachability_gen_rate_full_cycle_get_f gen_rate_full_cycle_get;
    /**
     * returns define data of gpd_gen_rate_full_cycle
     */
    dnxf_data_fabric_reachability_gpd_gen_rate_full_cycle_get_f gpd_gen_rate_full_cycle_get;
    /**
     * returns define data of watchdog_rate
     */
    dnxf_data_fabric_reachability_watchdog_rate_get_f watchdog_rate_get;
} dnxf_data_if_fabric_reachability_t;

/*
 * }
 */

/*
 * SUBMODULE  - HW_SNAKE:
 * Internal HW snake test attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Shows if SW configuration is required
     */
    dnxf_data_fabric_hw_snake_is_sw_config_required,

    /**
     * Must be last one!
     */
    _dnxf_data_fabric_hw_snake_feature_nof
} dnxf_data_fabric_hw_snake_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnxf_data_fabric_hw_snake_feature_get_f) (
    int unit,
    dnxf_data_fabric_hw_snake_feature_e feature);

/*
 * SUBMODULE INTERFACE DNXF_DATA_IF_FABRIC - HW_SNAKE:
 * {
 */
/**
 * \brief Interface for fabric hw_snake data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnxf_data_fabric_hw_snake_feature_get_f feature_get;
} dnxf_data_if_fabric_hw_snake_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNXF_DATA_IF_FABRIC:
 * {
 */
/**
 * \brief Interface for fabric data
 */
typedef struct
{
    /**
     * Interface for fabric general data
     */
    dnxf_data_if_fabric_general_t general;
    /**
     * Interface for fabric pipes data
     */
    dnxf_data_if_fabric_pipes_t pipes;
    /**
     * Interface for fabric multicast data
     */
    dnxf_data_if_fabric_multicast_t multicast;
    /**
     * Interface for fabric fifos data
     */
    dnxf_data_if_fabric_fifos_t fifos;
    /**
     * Interface for fabric congestion data
     */
    dnxf_data_if_fabric_congestion_t congestion;
    /**
     * Interface for fabric cell data
     */
    dnxf_data_if_fabric_cell_t cell;
    /**
     * Interface for fabric topology data
     */
    dnxf_data_if_fabric_topology_t topology;
    /**
     * Interface for fabric gpd data
     */
    dnxf_data_if_fabric_gpd_t gpd;
    /**
     * Interface for fabric reachability data
     */
    dnxf_data_if_fabric_reachability_t reachability;
    /**
     * Interface for fabric hw_snake data
     */
    dnxf_data_if_fabric_hw_snake_t hw_snake;
} dnxf_data_if_fabric_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnxf_data_if_fabric_t dnxf_data_fabric;
/*
 * }
 */
/*}*/
#endif /*_DNXF_DATA_FABRIC_H_*/
/* *INDENT-ON* */
