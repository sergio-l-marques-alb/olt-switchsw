Index: src/soc/phy/chip/koi/merlin_koi_src/merlin_koi_functions.c
===================================================================
--- src/soc/phy/chip/koi/merlin_koi_src/merlin_koi_functions.c	(revision 3373)
+++ src/soc/phy/chip/koi/merlin_koi_src/merlin_koi_functions.c	(revision 3374)
@@ -278,13 +278,13 @@ err_code_t merlin_koi_display_eye_scan_s
         return(_error(ERR_CODE_BAD_PTR_OR_INVALID_INPUT));
     }
 
     EFUN_PRINTF(("%6dmV : ",level));
 
     for (x=-31;x<32;x++) {
-      for (i=0;i<7;i++) {
+        for (i=0;i<7;i++) {
             if (buffer[x+31]>=limits[i]) {
                 EFUN_PRINTF(("%c", '0'+i+1));
                 break;
             }
         }
         if (i==7) {
Index: src/shared/libxml/parser.c
===================================================================
--- src/shared/libxml/parser.c	(revision 3373)
+++ src/shared/libxml/parser.c	(revision 3374)
@@ -633,17 +633,17 @@ xmlValidityError(xmlParserCtxtPtr ctxt,
               const char *msg, const xmlChar *str1, const xmlChar *str2)
 {
     xmlStructuredErrorFunc schannel = NULL;
 
     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
         (ctxt->instate == XML_PARSER_EOF))
-	return;
+	   return;
     if (ctxt != NULL) {
-	ctxt->errNo = error;
-	if ((ctxt->sax != NULL) && (ctxt->sax->initialized == XML_SAX2_MAGIC))
-	    schannel = ctxt->sax->serror;
+	   ctxt->errNo = error;
+	   if ((ctxt->sax != NULL) && (ctxt->sax->initialized == XML_SAX2_MAGIC))
+	       schannel = ctxt->sax->serror;
     }
     if (ctxt != NULL) {
         __xmlRaiseError(schannel,
                     ctxt->vctxt.error, ctxt->vctxt.userData,
                     ctxt, NULL, XML_FROM_DTD, error,
                     XML_ERR_ERROR, NULL, 0, (const char *) str1,
Index: src/shared/libxml/tree.c
===================================================================
--- src/shared/libxml/tree.c	(revision 3373)
+++ src/shared/libxml/tree.c	(revision 3374)
@@ -4761,15 +4761,15 @@ xmlGetNodePath(const xmlNode *node)
 		    occur++;
                 tmp = tmp->prev;
             }
             if (occur == 0) {
                 tmp = cur->next;
                 while (tmp != NULL && occur == 0) {
-		    if (tmp->type == XML_COMMENT_NODE)
-		        occur++;
-                    tmp = tmp->next;
+		          if (tmp->type == XML_COMMENT_NODE)
+		              occur++;
+                  tmp = tmp->next;
                 }
                 if (occur != 0)
                     occur = 1;
             } else
                 occur++;
         } else if ((cur->type == XML_TEXT_NODE) ||
Index: src/appl/diag/infix.c
===================================================================
--- src/appl/diag/infix.c	(revision 3373)
+++ src/appl/diag/infix.c	(revision 3374)
@@ -136,15 +136,17 @@ static void infix_doop(infix_data_t *id,
     switch (op) {
     case OP_BNOT:    v = ~v;                break;
     case OP_UNEG:    v = 0 - v;            break;
     case OP_CNOT:    v = ! v;            break;
     case OP_MUL:    v = infix_pop(id) * v;        break;
     case OP_DIV:    if (v == 0) { id->err = 1; }
-                else { v = infix_pop(id) / v; }  break;
+                    else { v = infix_pop(id) / v; }
+                    break;
     case OP_MOD:    if (v == 0) { id->err = 1; }
-                else { v = infix_pop(id) % v; }  break;
+                    else { v = infix_pop(id) % v; }
+                    break;
     case OP_ADD:    v = infix_pop(id) + v;        break;
     case OP_SUB:    v = infix_pop(id) - v;        break;
     case OP_LSH:    v = infix_pop(id) << v;        break;
     case OP_RSH:    v = infix_pop(id) >> v;        break;
     case OP_BAND:    v = infix_pop(id) & v;        break;
     case OP_BXOR:    v = infix_pop(id) ^ v;        break;
