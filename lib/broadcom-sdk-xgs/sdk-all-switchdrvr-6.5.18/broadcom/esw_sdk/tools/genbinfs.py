#! /usr/bin/env python
###############################################################################
#
# This script is used to convert files under $SDK/rc/cmicfw into C header files.
# and then put C header files into $SDK/include/binfs/files and instance all
# C header files at $SDK/src/shared/binfs/binfsi_file_list.c.
#
# $Copyright: (c) 2019 Broadcom.
# Broadcom Proprietary and Confidential. All rights reserved.$
#
###############################################################################

import os.path
import re
import struct
import sys
from datetime import date

header = """/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 * Tool: tools/genbinfs.py
 * Date: {date}
 *
 * $Copyright: (c) 2019 Broadcom Corp.
 * All Rights Reserved. $
 */

#include <sal/types.h>
#include <shared/binfs/binfs.h>
"""

def binfs_node_name_get(filename) :
    return "binfs_file_" + re.sub(r"\W", "_", filename)

def binfs_node_data_name_get(filename) :
    return "binfs_file_data_" + re.sub(r"\W", "_", filename)

def genbin2h(filename, rootdir, outdir):

    incstart = """
#ifndef {file}
#define {file}
"""
    incend = """
#endif /* {file} */
"""

    arraydef = """
/*! {description} {length} bytes. */
static const {dtype} {array}[] = {{{content}}};
"""

    binfsdef = """
/*! {description} */
const {dtype} {name} = {{
    "{filename}",
    {data},
    sizeof({data})
}};
"""

    basename = os.path.basename(filename)
    basename = re.sub(rootdir + "/*", "", filename)
    outputfile = os.path.join(outdir, basename) + ".h"
    dirname = os.path.dirname(outputfile)
    reltive_input = re.sub(sdk_path + "/*", "", filename)
    reltive_output = re.sub(sdk_path + "/*", "", outputfile)

    arrayname = binfs_node_data_name_get(basename)
    array = ""
    length = 0

    print("Convert {0} ....\n".format(reltive_input))
    if not os.path.isdir(dirname):
        os.makedirs(dirname)
    outfd = open(outputfile, "wt")
    fd = open(filename, "rb")

    outfd.write(header)
    s = re.sub(r"\W", "_", os.path.basename(reltive_input))

    outfd.write(incstart.format(file=s.upper()))

    while True:
        block = fd.read(16)

        if len(block):
            # Indent 4 space.
            array += "\n    "

        i = 0
        for b in block:
            # Python 2/3 compat
            if type(b) is str:
                b = ord(b)
            array += "0x{:02X},".format(b)
            i = i + 1
            if i < len(block):
                array += " "

        if len(block) == 0:
           break

        length += len(block)

    if len(array):
        array += "\n"

    fd.close()
    outfd.write(arraydef.format(dtype="uint8", \
                                length=length, \
                                array=binfs_node_data_name_get(basename), \
                content=array, \
                description="File data of " + reltive_input))
    outfd.write(binfsdef.format(dtype="binfs_file_t", \
                                description="File structure of " + reltive_input, \
                                name=binfs_node_name_get(basename), \
                                filename= basename, \
                                data = binfs_node_data_name_get(basename)))

    outfd.write(incend.format(file=s.upper()))

    outfd.close()
    return reltive_output

def genbinfs_node_list(outfile, filelist):
    outfd = open(outfile, "w")
    extern_defs = """#include <{file}>\n"""
    binfs_node_list = "\n/* List for files in binfs. */\nconst binfs_file_t *binfs_file_list[] = {\n"
    extern = ""
    for f in filelist:
        s = re.sub("include/shared/binfs/files/", "", f)
        s = re.sub("\.h$","", s)
        binfs_node_name = binfs_node_name_get(s)
        extern += extern_defs.format(file=re.sub("include/", "", f))
        binfs_node_list += ("    &" + binfs_node_name + ",\n")

    binfs_node_list += "    NULL\n};\n\n"
    outfd.write(header.format(date=date.today()))
    outfd.write(extern)
    outfd.write(binfs_node_list)
    outfd.close()
    return


def genbinfs(rootdir, outdir, incdir):
    filelist = []
    pattern = re.compile('.+\.bin$')
    for dirPath, dirNames, fileNames in os.walk(rootdir):
        for f in fileNames:
            if (pattern.match(f) == None):
                continue
            infile = os.path.join(dirPath, f)
            outfile = genbin2h(infile, rootdir, incdir + "/files")
            filelist.append(outfile)

    genbinfs_node_list(os.path.join(outdir, "binfs_file_list.c"), filelist)


def main():
    global sdk_path
    sdk_path = os.getenv('SDK')
    if (sdk_path == None):
        print("$SDK is undefined. ");
        sys.exit(1)

    rootdir = os.path.join(sdk_path, "rc/cmicfw")
    outdir = os.path.join(sdk_path, "src/shared/binfs")
    incdir = os.path.join(sdk_path, "include/shared/binfs")
    genbinfs(rootdir, outdir, incdir)

if __name__ == "__main__":
    main()
