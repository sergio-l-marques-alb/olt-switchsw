/** \file algo/swstate/auto_generated/types/lif_mngr_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __LIF_MNGR_TYPES_H__
#define __LIF_MNGR_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <include/soc/dnx/dbal/dbal_structures.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_device.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_lif.h>
#include <soc/dnxc/swstate/callbacks/sw_state_htb_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/dnxc/swstate/types/sw_state_hash_table.h>
/*
 * STRUCTs
 */

/**
 * To indentify an inlif, we need to know the physical table it's using (LIF1 or LIF2-3), and the core it's allocated on (a single core or all at once). We use this struct to get the lif data.
 */
typedef struct {
    /**
     * Relevant local lif. Can be input or output, depending on the api.
     */
    int local_lif;
    /**
     * Relevant core id. Only relevant for DPC inlif. Can be input or output, depending on API.
     */
    int8 core_id;
    /**
     * Relevant physical table. Only relevant for inlif. Can be input or output, depending on API.
     */
    dbal_physical_tables_e phy_table;
} lif_mapping_local_lif_info_t;

/**
 * Sw state for lif mapping.
 * 
 * Since the range of global lif IDs is much wider (by powers of 10) than the physical databases that
 * hold them, we use hash tables to keep the mapping between global and local.
 * 
 * The local lif ID range is about the same size as the physical database, so we use arrays to keep
 * the mapping between local and global.
 */
typedef struct {
    /**
     * Array for sbc ingress lif to global lif map.
     */
    int* ingress_sbc_lif_to_global_lif_map;
    /**
     * Array for dpc ingress lif to global lif map. It's per core.
     */
    int** ingress_dpc_lif_to_global_lif_map;
    /**
     * Hash table for ingress global lif to lif.
     */
    sw_state_htbl_t ingress_global_lif_to_lif_htb;
    /**
     * Array for egress lif to global lif map.
     */
    int* egress_lif_to_global_lif_map;
    /**
     * Hash table for egress global lif to lif.
     */
    sw_state_htbl_t egress_global_lif_to_lif_htb;
} lif_mapping_info_t;

/**
 * Sw state for the global lif allocation
 */
typedef struct {
    /**
     * sw state resource variable for the Symetric global lif.
     */
    dnx_algo_res_t symmetric_global_lif;
    /**
     * sw state resource variable for the Ingress global lif.
     */
    dnx_algo_res_t ingress_global_lif;
    /**
     * sw state resource variable for the Egress global lif.
     */
    dnx_algo_res_t egress_global_lif;
    /**
     * Counter for allocated ingress global lifs.
     */
    int ingress_global_lif_counter;
    /**
     * Counter for allocated egress global lifs.
     */
    int egress_global_lif_counter;
    /**
     * For each global lif, indicate whether it's symmetric between egress and ingress or not
     */
    SHR_BITDCL* global_lif_symmetric_indication;
} global_lif_allocation_info_t;

/**
 * Sw state for local inlif allocation
 */
typedef struct {
    /**
     * sw state resource variable for the Inlif table shared by cores.
     */
    dnx_algo_res_t inlif_table_shared_by_cores;
    /**
     * sw state resource variable for the Inlif table dedicated per core.
     */
    dnx_algo_res_t* inlif_table_dedicated_per_core;
    /**
     * Resource manager for inlifs that are dedicated per core, but allocated on all cores.
     */
    dnx_algo_res_t inlif_table_dpc_all_cores;
    /**
     * For each dpc local inlif, inidcate whether it's allocated on all cores or just on one core.
     */
    SHR_BITDCL* inlif_table_dpc_all_cores_indication;
} local_inlif_allocation_info_t;

/**
 * Sw state for lif manager
 */
typedef struct {
    /**
     * Sw state for lif mapping
     */
    lif_mapping_info_t lif_mapping;
    /**
     * Sw state for the global lif allocation
     */
    global_lif_allocation_info_t global_lif_allocation;
    /**
     * SW state for the local inlif allocation.
     */
    local_inlif_allocation_info_t local_inlif;
    /**
     * sw state resource variable for the Engress local lif.
     */
    dnx_algo_res_t* egress_local_lif;
} lif_mngr_sw_state_t;


#endif /* __LIF_MNGR_TYPES_H__ */
