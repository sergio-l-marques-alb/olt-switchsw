/** \file dnx_data_max_field.h
 * 
 * MODULE DATA MAX - 
 * Maintain max value (of all devices) per define
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MAX_FIELD_H_
/*{*/
#define _DNX_DATA_MAX_FIELD_H_
/*
 * INCLUDE FILES:
 * {
 */
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MAX DEFINES:
 * {
 */
/**
 * \brief
 * Number of FFC's per context. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FFC (64)

/**
 * \brief
 * Number of FFC Groups. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FFC_GROUPS (4)

/**
 * \brief
 * Min FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FFC_GROUP_ONE_LOWER (0)

/**
 * \brief
 * Max FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FFC_GROUP_ONE_UPPER (15)

/**
 * \brief
 * Min FFC Index for Second FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FFC_GROUP_TWO_LOWER (16)

/**
 * \brief
 * Max FFC Index for Second FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FFC_GROUP_TWO_UPPER (31)

/**
 * \brief
 * Min FFC Index for Thirth FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FFC_GROUP_THREE_LOWER (32)

/**
 * \brief
 * Max FFC Index for Thirth FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FFC_GROUP_THREE_UPPER (47)

/**
 * \brief
 * Min FFC Index for Fourth FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FFC_GROUP_FOUR_LOWER (48)

/**
 * \brief
 * Max FFC Index for Fourth FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FFC_GROUP_FOUR_UPPER (63)

/**
 * \brief
 * Number of keys for the this PMF stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_KEYS (10)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_KEYS_ALLOC (5)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for TCAM access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_KEYS_ALLOC_FOR_TCAM (4)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for EXEM access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_KEYS_ALLOC_FOR_EXEM (1)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for MDB_DT access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_KEYS_ALLOC_FOR_MDB_DT (1)

/**
 * \brief
 * Number of masks per FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_MASKS_PER_FES (4)

/**
 * \brief
 * Number FESes in each FES array. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FES_ID_PER_ARRAY (16)

/**
 * \brief
 * Number FES arrays. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FES_ARRAY (2)

/**
 * \brief
 * Number of FES INSTRUCTIONs per context. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FES_INSTRUCTION_PER_CONTEXT (32)

/**
 * \brief
 * Number of FES programs. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FES_PROGRAMS (32)

/**
 * \brief
 * Number of MS bits instruction programs per FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_PROG_PER_FES (4)

/**
 * \brief
 * Number of bits for data or mask in the memory IHB_FLP_PROGRAM_SELECTION_CAM. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_PROGRAM_SELECTION_CAM_MASK_NOF_BITS (95)

/**
 * \brief
 * Number of bits taken from general data for context selection.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_CS_CONTAINER_5_SELECTED_BITS_SIZE (9)

/**
 * \brief
 * Number of Ingress PMF_A programs (contexts). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_CONTEXTS (64)

/**
 * \brief
 * Number of profiles assigned to iPMF1 contexts in order to create links between iPMF1 and iPMF2 contexts. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_LINK_PROFILES (32)

/**
 * \brief
 * Number of program selection lines. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_CS_LINES (128)

/**
 * \brief
 * Number of actions. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_ACTIONS (128)

/**
 * \brief
 * Number of qualifiers. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_QUALIFIERS (128)

/**
 * \brief
 * Number of Ingress PMF 80b dedicated instruction groupsv
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_80B_ZONES (2)

/**
 * \brief
 * Number of Ingress PMF 80b key zones. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_KEY_ZONES (4)

/**
 * \brief
 * Number of Ingress PMF 80b key zone bits. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_KEY_ZONE_BITS (80)

/**
 * \brief
 * Number of bits on the output of a FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FES_ACTION (32)

/**
 * \brief
 * Number of bits on input to FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FES_KEY_SELECT (64)

/**
 * \brief
 * Number of 'key select's that can go into one line on actions table.('double key' actions are considered one line). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FES_KEY_SELECTS_ON_ONE_ACTIONS_LINE (3)

/**
 * \brief
 * The minumum legal value to be set in bit select for a FEM. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FEM_CONDITION_MS_BIT_MIN_VALUE (3)

/**
 * \brief
 * The maximum legal value to be set in bit select for a FEM. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FEM_CONDITION_MS_BIT_MAX_VALUE (31)

/**
 * \brief
 * Number of bit in FEM program representation. This is log2 of the number of fem programs. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FEM_PROGRAMS (2)

/**
 * \brief
 * Total number FEM programs available. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FEM_PROGRAMS (4)

/**
 * \brief
 * Log2 of number of bits on one 'chunk' of input to FEM. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_LOG_NOF_BITS_IN_FEM_KEY_SELECT (5)

/**
 * \brief
 * Number of bits on one 'chunk' of input to FEM. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FEM_KEY_SELECT (32)

/**
 * \brief
 * Number of bits in the 'step' from one 'key select' to the following. See dbal_enum_value_field_field_pmf_a_fem_key_select_e. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FEM_KEY_SELECT_RESOLUTION_IN_BITS (16)

/**
 * \brief
 * Log2 of number of bits on MAP_DATA field in IPPC_FEM_MAP_INDEX_TABLE (See FIELD_PMF_A_FEM_MAP_INDEX dbal table). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_LOG_NOF_BITS_IN_FEM_MAP_DATA_FIELD (2)

/**
 * \brief
 * Number of bits on MAP_DATA field in IPPC_FEM_MAP_INDEX_TABLE (See FIELD_PMF_A_FEM_MAP_INDEX dbal table). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FEM_MAP_DATA_FIELD (4)

/**
 * \brief
 * Number of bits on action value in IPPC_FEM_*_24B_MAP_TABLE. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FEM_ACTION_FEMS_2_15 (24)

/**
 * \brief
 * Number of bits on action value in IPPC_FEM_*_4B_MAP_TABLE. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FEM_ACTION_FEMS_0_1 (4)

/**
 * \brief
 * Maximal number of bits on action value in IPPC_FEM_*_*_MAP_TABLE. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FEM_ACTION (24)

/**
 * \brief
 * Number of bits on fem condition. This is log2 of the number of conditions that may be assigned to each (fem_id,fem_program) combination. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FEM_CONDITION (4)

/**
 * \brief
 * Total number of fem conditions. This is the number of conditions that may be assigned to each (fem_id,fem_program) combination. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FEM_CONDITION (16)

/**
 * \brief
 * Number of bits on fem map index. This represents log2 of the number of actions that may be assigned to each condition. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FEM_MAP_INDEX (2)

/**
 * \brief
 * Total number fem map indices. This represents the number of actions that may be assigned to each condition. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FEM_MAP_INDEX (4)

/**
 * \brief
 * Number of bits on fem identifier. This represents the number of FEMs in the system: No. of FEMs is 2^nof_bits_in_fem_id. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_BITS_IN_FEM_ID (4)

/**
 * \brief
 * Total number 'FEM id's available. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FEM_ID (16)

/**
 * \brief
 * Number of FEMs, starting from 'fem_id=0', which have only 4 bits on action value. The rest have 24 bits on action value. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NUM_FEMS_WITH_SHORT_ACTION (2)

/**
 * \brief
 * Number of bits on each of the HW field marked FIELD_SELECT_MAP_*. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NUM_BITS_IN_FEM_FIELD_SELECT (6)

/**
 * \brief
 * Number FEMes in each FEM array. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FEM_ID_PER_ARRAY (8)

/**
 * \brief
 * Number FEM arrays. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FEM_ARRAY (2)

/**
 * \brief
 * Number of FEMs per context. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_FEMS_PER_CONTEXT (16)

/**
 * \brief
 * Default value for PMF strength. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_DEFAULT_STRENGTH (5)

/**
 * \brief
 * Number compare pairs in compare mode. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_COMPARE_PAIRS_IN_COMPARE_MODE (2)

/**
 * \brief
 * Number compare keys in compare mode. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_COMPARE_KEYS_IN_COMPARE_MODE (2)

/**
 * \brief
 * Size of the compare key in the system. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_COMPARE_KEY_SIZE (32)

/**
 * \brief
 * Number of ranges for L4 Ops legacy. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_L4_OPS_RANGES_LEGACY (24)

/**
 * \brief
 * Number of ranges for External L4 Ops. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_EXT_L4_OPS_RANGES (0)

/**
 * \brief
 * Number of ranges for PKT HDR. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_PKT_HDR_RANGES (3)

/**
 * \brief
 * Number of ranges for Out Lif. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_NOF_OUT_LIF_RANGES (3)

/**
 * \brief
 * The key select used for obtaining an always zero bit for input to FES (for example, using a zero padded bit). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FES_KEY_SELECT_FOR_ZERO_BIT (16)

/**
 * \brief
 * The shift used for obtaining an always zero bit for input to FES (for example, using a zero padded bit). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FES_SHIFT_FOR_ZERO_BIT (0)

/**
 * \brief
 * Indicated if the stage can perform a SEXEM lookup. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_USES_SMALL_EXEM (0)

/**
 * \brief
 * Indicated if the stage can perform a LEXEM lookup. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_USES_LARGE_EXEM (0)

/**
 * \brief
 * Compare selection for both keys of 2nd compare, See the CMP_SELECTION field in IPPC_PMF_GENERAL register for additional information. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_CMP_SELECTION (15)

/**
 * \brief
 * Number of bits in one fes instruction.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FES_INSTRUCTION_SIZE (11)

/**
 * \brief
 * FES Program ID offset pointing to IPPC_PMF_FES_PROGRAMm->FES_2ND_INSTRUCTION_LSB_ADDRESSf.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF1_FES_PGM_ID_OFFSET (6)

/**
 * \brief
 * Number of FFC's per context. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_FFC (32)

/**
 * \brief
 * Number of FFC Groups. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_FFC_GROUPS (1)

/**
 * \brief
 * Min FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_FFC_GROUP_ONE_LOWER (0)

/**
 * \brief
 * Max FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_FFC_GROUP_ONE_UPPER (31)

/**
 * \brief
 * Number of keys for the this PMF stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_KEYS (5)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_KEYS_ALLOC (5)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for TCAM access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_KEYS_ALLOC_FOR_TCAM (4)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for EXEM access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_KEYS_ALLOC_FOR_EXEM (1)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for DIRECT EXTRACTION. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_KEYS_ALLOC_FOR_DIR_EXT (2)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for MDB_DT access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_KEYS_ALLOC_FOR_MDB_DT (1)

/**
 * \brief
 * Number of masks per FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_MASKS_PER_FES (4)

/**
 * \brief
 * Number FESes in each FES array. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_FES_ID_PER_ARRAY (16)

/**
 * \brief
 * Number FES arrays. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_FES_ARRAY (2)

/**
 * \brief
 * Number of FES INSTRUCTIONs per context. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_FES_INSTRUCTION_PER_CONTEXT (32)

/**
 * \brief
 * Number of program selection lines. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_CS_LINES (128)

/**
 * \brief
 * Number of contexts. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_CONTEXTS (64)

/**
 * \brief
 * Number of bits for data or mask in the memory IHB_FLP_PROGRAM_SELECTION_CAM. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_PROGRAM_SELECTION_CAM_MASK_NOF_BITS (95)

/**
 * \brief
 * Number of qualifiers. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_QUALIFIERS (128)

/**
 * \brief
 * Number of Ingress PMF 80b dedicated instruction groups. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_80B_ZONES (2)

/**
 * \brief
 * Number of Ingress PMF 80b key zones. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_KEY_ZONES (4)

/**
 * \brief
 * Number of Ingress PMF 80b key zone bits. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_NOF_KEY_ZONE_BITS (80)

/**
 * \brief
 * The key select used for obtaining an always zero bit for input to FES (for example, using a zero padded bit). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_FES_KEY_SELECT_FOR_ZERO_BIT (16)

/**
 * \brief
 * The shift used for obtaining an always zero bit for input to FES (for example, using a zero padded bit). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_FES_SHIFT_FOR_ZERO_BIT (0)

/**
 * \brief
 * Indicated if the stage can perform a SEXEM lookup. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_USES_SMALL_EXEM (0)

/**
 * \brief
 * Indicated if the stage can perform a LEXEM lookup. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF2_USES_LARGE_EXEM (0)

/**
 * \brief
 * Number of FFC's. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_FFC (32)

/**
 * \brief
 * Number of FFC Groups. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_FFC_GROUPS (1)

/**
 * \brief
 * Min FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_FFC_GROUP_ONE_LOWER (0)

/**
 * \brief
 * Max FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_FFC_GROUP_ONE_UPPER (31)

/**
 * \brief
 * Number of keys for the this PMF stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_KEYS (3)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_KEYS_ALLOC (3)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for TCAM access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_KEYS_ALLOC_FOR_TCAM (2)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for EXEM access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_KEYS_ALLOC_FOR_EXEM (1)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for DIRECT EXTRACTION. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_KEYS_ALLOC_FOR_DIR_EXT (2)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for MDB_DT access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_KEYS_ALLOC_FOR_MDB_DT (1)

/**
 * \brief
 * Number of masks per FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_MASKS_PER_FES (4)

/**
 * \brief
 * Number FESes in each FES array. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_FES_ID_PER_ARRAY (16)

/**
 * \brief
 * Number FES arrays. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_FES_ARRAY (1)

/**
 * \brief
 * Number of FES INSTRUCTIONs per context. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_FES_INSTRUCTION_PER_CONTEXT (16)

/**
 * \brief
 * Number of FES programs. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_FES_PROGRAMS (32)

/**
 * \brief
 * Number of MS bits instruction programs per FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_PROG_PER_FES (4)

/**
 * \brief
 * Number of bits for data or mask in the memory IHB_FLP_PROGRAM_SELECTION_CAM. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_PROGRAM_SELECTION_CAM_MASK_NOF_BITS (95)

/**
 * \brief
 * Number of bits taken from general data for context selection.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_CS_SCRATCH_PAD_SIZE (33)

/**
 * \brief
 * Number of Ingress PMF_B programs. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_CONTEXTS (64)

/**
 * \brief
 * Number of program selection lines. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_CS_LINES (128)

/**
 * \brief
 * Number of actions. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_ACTIONS (64)

/**
 * \brief
 * Number of qualifiers. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_QUALIFIERS (64)

/**
 * \brief
 * Number of Ingress PMF 80b dedicated instruction groups. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_80B_ZONES (2)

/**
 * \brief
 * Number of Ingress PMF 80b key zones. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_KEY_ZONES (4)

/**
 * \brief
 * Number of Ingress PMF 80b key zone bits. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_KEY_ZONE_BITS (80)

/**
 * \brief
 * Number of bits on the output of a FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_BITS_IN_FES_ACTION (32)

/**
 * \brief
 * Number of bits on input to FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_BITS_IN_FES_KEY_SELECT (64)

/**
 * \brief
 * Number of 'key select's that can go into one line on actions table.('double key' actions are considered one line). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_FES_KEY_SELECTS_ON_ONE_ACTIONS_LINE (3)

/**
 * \brief
 * Default value for PMF strength. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_DEFAULT_STRENGTH (6)

/**
 * \brief
 * Number of ranges for Out Lif. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_NOF_OUT_LIF_RANGES (7)

/**
 * \brief
 * The key select used for obtaining an always zero bit for input to FES (for example, using a zero padded bit). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_FES_KEY_SELECT_FOR_ZERO_BIT (4)

/**
 * \brief
 * The shift used for obtaining an always zero bit for input to FES (for example, using a zero padded bit). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_FES_SHIFT_FOR_ZERO_BIT (0)

/**
 * \brief
 * Indicated if the stage can perform a SEXEM lookup. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_USES_SMALL_EXEM (0)

/**
 * \brief
 * Indicated if the stage can perform a LEXEM lookup. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_USES_LARGE_EXEM (0)

/**
 * \brief
 * Number of bits in one fes instruction.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_FES_INSTRUCTION_SIZE (10)

/**
 * \brief
 * FES Program ID offset pointing to IPPD_PMF_FES_PROGRAMm->FES_2ND_INSTRUCTION_LSB_ADDRESSf.
 */
#define DNX_DATA_MAX_FIELD_BASE_IPMF3_FES_PGM_ID_OFFSET (5)

/**
 * \brief
 * Number of FFC's. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_FFC (20)

/**
 * \brief
 * Number of FFC Groups. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_FFC_GROUPS (1)

/**
 * \brief
 * Min FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_FFC_GROUP_ONE_LOWER (0)

/**
 * \brief
 * Max FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_FFC_GROUP_ONE_UPPER (19)

/**
 * \brief
 * Number of keys for the this PMF stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_KEYS (3)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_KEYS_ALLOC (3)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for TCAM access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_KEYS_ALLOC_FOR_TCAM (2)

/**
 * \brief
 * Number of keys available for allocation for use by this specific PMF stage for EXEM access. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_KEYS_ALLOC_FOR_EXEM (1)

/**
 * \brief
 * Number of masks per FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_MASKS_PER_FES (4)

/**
 * \brief
 * Number FESes in each FES array. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_FES_ID_PER_ARRAY (12)

/**
 * \brief
 * Number FES arrays. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_FES_ARRAY (1)

/**
 * \brief
 * Number of FES INSTRUCTIONs per context. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_FES_INSTRUCTION_PER_CONTEXT (12)

/**
 * \brief
 * Number of FES programs. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_FES_PROGRAMS (32)

/**
 * \brief
 * Number of MS bits instruction programs per FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_PROG_PER_FES (4)

/**
 * \brief
 * Number of bits for data or mask in the memory EGQ_PMF_PROGRAM_SELECTION_CAM. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_PROGRAM_SELECTION_CAM_MASK_NOF_BITS (37)

/**
 * \brief
 * Number of program selection lines. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_CS_LINES (128)

/**
 * \brief
 * Number of Egress contexts. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_CONTEXTS (64)

/**
 * \brief
 * Number of actions. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_ACTIONS (64)

/**
 * \brief
 * Number of qualifiers. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_QUALIFIERS (64)

/**
 * \brief
 * Number of Egress PMF 80b dedicated instruction groups. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_80B_ZONES (2)

/**
 * \brief
 * Number of Egress PMF 80b key zones. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_KEY_ZONES (4)

/**
 * \brief
 * Number of Egress PMF key zone bits. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_KEY_ZONE_BITS (80)

/**
 * \brief
 * Number of bits on the output of a FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_BITS_IN_FES_ACTION (32)

/**
 * \brief
 * Number of bits on input to FES. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_BITS_IN_FES_KEY_SELECT (64)

/**
 * \brief
 * Number of 'key select's that can applied on one line on actions table.('double key' actions are considered one line). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_FES_KEY_SELECTS_ON_ONE_ACTIONS_LINE (1)

/**
 * \brief
 * Number of ranges for L4 Ops legacy. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_NOF_L4_OPS_RANGES_LEGACY (24)

/**
 * \brief
 * The key select used for obtaining an always zero bit for input to FES (for example, using a zero padded bit). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_FES_KEY_SELECT_FOR_ZERO_BIT (0)

/**
 * \brief
 * The shift used for obtaining an always zero bit for input to FES (for example, using a zero padded bit). For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_FES_SHIFT_FOR_ZERO_BIT (60)

/**
 * \brief
 * Indicated if the stage can perform a SEXEM lookup. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_USES_SMALL_EXEM (0)

/**
 * \brief
 * Indicated if the stage can perform a LEXEM lookup. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_USES_LARGE_EXEM (0)

/**
 * \brief
 * Number of bits in one fes instruction.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_FES_INSTRUCTION_SIZE (9)

/**
 * \brief
 * FES Program ID offset pointing to ERPP_PMF_FES_PROGRAMmm->FES_2ND_INSTRUCTION_LSB_ADDRESSf.
 */
#define DNX_DATA_MAX_FIELD_BASE_EPMF_FES_PGM_ID_OFFSET (4)

/**
 * \brief
 * Number of FFC's in this specific IFWD2 stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IFWD2_NOF_FFC (38)

/**
 * \brief
 * Number of FFC Groups. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IFWD2_NOF_FFC_GROUPS (1)

/**
 * \brief
 * Min FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IFWD2_FFC_GROUP_ONE_LOWER (0)

/**
 * \brief
 * Max FFC Index for First FFC Group. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IFWD2_FFC_GROUP_ONE_UPPER (37)

/**
 * \brief
 * Number of keys available for allocation for use by this specific IFWD2 stage. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IFWD2_NOF_KEYS (2)

/**
 * \brief
 * Number of KBP ACL contexts. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IFWD2_NOF_CONTEXTS (64)

/**
 * \brief
 * Number of program selection lines. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_BASE_IFWD2_NOF_CS_LINES (128)

/**
 * \brief
 * Number of External TCAM Field Groups
 */
#define DNX_DATA_MAX_FIELD_KBP_NOF_FGS  (32)

/**
 * \brief
 * Maximum single key size
 */
#define DNX_DATA_MAX_FIELD_KBP_MAX_SINGLE_KEY_SIZE (160)

/**
 * \brief
 * The maximum number of keys that can be used by ACL (not FWD) in KBP for a single context
 */
#define DNX_DATA_MAX_FIELD_KBP_NOF_ACL_KEYS_MASTER_MAX (3)

/**
 * \brief
 * The maximum number of keys that can be used by ACL (not FWD) in KBP for a single field group
 */
#define DNX_DATA_MAX_FIELD_KBP_NOF_ACL_KEYS_FG_MAX (3)

/**
 * \brief
 * Minimum number of FFC's that should be allocated for each context for ACL purposes.
 */
#define DNX_DATA_MAX_FIELD_KBP_MIN_ACL_NOF_FFC (8)

/**
 * \brief
 * Maximum number of fwd contexts that could be mapped to an apptype 
 */
#define DNX_DATA_MAX_FIELD_KBP_MAX_FWD_CONTEXT_NUM_FOR_ONE_APPTYPE (5)

/**
 * \brief
 * Maximum number of ACL contexts in the KBP 
 */
#define DNX_DATA_MAX_FIELD_KBP_MAX_ACL_CONTEXT_NUM (64)

/**
 * \brief
 * Size in bits of the apptype profile ID (based on iFED2 ACL context)
 */
#define DNX_DATA_MAX_FIELD_KBP_SIZE_APPTYPE_PROFILE_ID (6)

/**
 * \brief
 * bitmap of the key IDs used by the KBP.
 */
#define DNX_DATA_MAX_FIELD_KBP_KEY_BMP  (196656)

/**
 * \brief
 * First User defined Apptype id to avoid overlapping with static ones
 */
#define DNX_DATA_MAX_FIELD_KBP_APPTYPE_USER_1ST (128)

/**
 * \brief
 * Number of user Defined apptypes that can be created
 */
#define DNX_DATA_MAX_FIELD_KBP_APPTYPE_USER_NOF (16)

/**
 * \brief
 * The total payload size of the KBP
 */
#define DNX_DATA_MAX_FIELD_KBP_MAX_PAYLOAD_SIZE_PER_OPCODE (248)

/**
 * \brief
 * Half TCAM key size
 */
#define DNX_DATA_MAX_FIELD_TCAM_KEY_SIZE_HALF (80)

/**
 * \brief
 * Single TCAM key size
 */
#define DNX_DATA_MAX_FIELD_TCAM_KEY_SIZE_SINGLE (160)

/**
 * \brief
 * Double TCAM key size
 */
#define DNX_DATA_MAX_FIELD_TCAM_KEY_SIZE_DOUBLE (320)

/**
 * \brief
 * Maximum key size for TCAM DT
 */
#define DNX_DATA_MAX_FIELD_TCAM_DT_MAX_KEY_SIZE (11)

/**
 * \brief
 * When the key size is half key (80b), this holds the action width payload
 */
#define DNX_DATA_MAX_FIELD_TCAM_ACTION_SIZE_HALF (32)

/**
 * \brief
 * When the key size is single key (160b), this holds the action width payload
 */
#define DNX_DATA_MAX_FIELD_TCAM_ACTION_SIZE_SINGLE (64)

/**
 * \brief
 * When the key size is double key (320b), this holds the action width payload
 */
#define DNX_DATA_MAX_FIELD_TCAM_ACTION_SIZE_DOUBLE (128)

/**
 * \brief
 * Number of bits representing the entry size for each half entry.
 */
#define DNX_DATA_MAX_FIELD_TCAM_KEY_MODE_SIZE (2)

/**
 * \brief
 * The full key size in HW, includingd entry size field, not including payload and valid bits.
 */
#define DNX_DATA_MAX_FIELD_TCAM_ENTRY_SIZE_SINGLE_KEY_HW (164)

/**
 * \brief
 * The size of the valid bits in HW.
 */
#define DNX_DATA_MAX_FIELD_TCAM_ENTRY_SIZE_SINGLE_VALID_BITS_HW (2)

/**
 * \brief
 * The full payload size in HW for half an entry.
 */
#define DNX_DATA_MAX_FIELD_TCAM_ENTRY_SIZE_HALF_PAYLOAD_HW (32)

/**
 * \brief
 * Size of a TCAM bank in HW
 */
#define DNX_DATA_MAX_FIELD_TCAM_HW_BANK_SIZE (4096)

/**
 * \brief
 * Number of entries per small TCAM bank
 */
#define DNX_DATA_MAX_FIELD_TCAM_SMALL_BANK_SIZE (256)

/**
 * \brief
 * Number of TCAM big bank lines
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_BIG_BANK_LINES (4096)

/**
 * \brief
 * Number of TCAM small bank lines
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_SMALL_BANK_LINES (512)

/**
 * \brief
 * Number of TCAM big banks
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_BIG_BANKS (12)

/**
 * \brief
 * Number of TCAM small banks
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_SMALL_BANKS (4)

/**
 * \brief
 * Number of TCAM banks
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_BANKS (16)

/**
 * \brief
 * Number of action tables
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_PAYLOAD_TABLES (32)

/**
 * \brief
 * Number of TCAM access profiles
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_ACCESS_PROFILES (64)

/**
 * \brief
 * The action width selector size for each bank in each access profile, each bit represents the corresponding 32 bit in the action table
 */
#define DNX_DATA_MAX_FIELD_TCAM_ACTION_WIDTH_SELECTOR_SIZE (2)

/**
 * \brief
 * Number of TCAM cascaded data bits
 */
#define DNX_DATA_MAX_FIELD_TCAM_CASCADED_DATA_NOF_BITS (20)

/**
 * \brief
 * Number of TCAM big bank key bits
 */
#define DNX_DATA_MAX_FIELD_TCAM_BIG_BANK_KEY_NOF_BITS (11)

/**
 * \brief
 * Number of 160 bits TCAM entries; Value: (nof_big_banks*nof_big_bank_lines)+(nof_small_banks*nof_small_bank_lines)
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_ENTRIES_160_BITS (25600)

/**
 * \brief
 * Number of 80 bits TCAM entries; Value: (2*nof_big_banks*nof_big_bank_lines)+(2*nof_small_banks*nof_small_bank_lines)
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_ENTRIES_80_BITS (51200)

/**
 * \brief
 * The size of TCAM_TCAM_BANK which is equal to (nof_big_banks + nof_small_banks) * nof_big_bank_lines
 */
#define DNX_DATA_MAX_FIELD_TCAM_TCAM_BANKS_SIZE (65536)

/**
 * \brief
 * Last index available in TCAM banks
 */
#define DNX_DATA_MAX_FIELD_TCAM_TCAM_BANKS_LAST_INDEX (61952)

/**
 * \brief
 * Number of TCAM handlers in device
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_TCAM_HANDLERS (64)

/**
 * \brief
 * Maximum prefix size in TCAM
 */
#define DNX_DATA_MAX_FIELD_TCAM_MAX_PREFIX_SIZE (5)

/**
 * \brief
 * Maximum prefix value in TCAM
 */
#define DNX_DATA_MAX_FIELD_TCAM_MAX_PREFIX_VALUE (32)

/**
 * \brief
 * Number of 160'b key's in double key
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_KEYS_IN_DOUBLE_KEY (2)

/**
 * \brief
 * Number of 160'b key's in one search lookup
 */
#define DNX_DATA_MAX_FIELD_TCAM_NOF_KEYS_MAX (2)

/**
 * \brief
 * Half key mode in access profile
 */
#define DNX_DATA_MAX_FIELD_TCAM_ACCESS_PROFILE_HALF_KEY_MODE (0)

/**
 * \brief
 * Single key mode in access profile
 */
#define DNX_DATA_MAX_FIELD_TCAM_ACCESS_PROFILE_SINGLE_KEY_MODE (1)

/**
 * \brief
 * Double key mode in access profile
 */
#define DNX_DATA_MAX_FIELD_TCAM_ACCESS_PROFILE_DOUBLE_KEY_MODE (3)

/**
 * \brief
 * Number of entries in byte, in TCAM and CS TCAM HIT and indication memories.
 */
#define DNX_DATA_MAX_FIELD_TCAM_HIT_INDICATION_ENTRIES_PER_BYTE (8)

/**
 * \brief
 * The biggest valid value for the priority of a TCAM entry
 */
#define DNX_DATA_MAX_FIELD_TCAM_MAX_TCAM_PRIORITY (2147483647)

/**
 * \brief
 * Number of Field Groups
 */
#define DNX_DATA_MAX_FIELD_GROUP_NOF_FGS (128)

/**
 * \brief
 * Number of action per Field Group
 */
#define DNX_DATA_MAX_FIELD_GROUP_NOF_ACTION_PER_FG (32)

/**
 * \brief
 * Number of qualifiers per Field Group
 */
#define DNX_DATA_MAX_FIELD_GROUP_NOF_QUALS_PER_FG (32)

/**
 * \brief
 * Maximum number of keys (KBRs) a field group can have.
 */
#define DNX_DATA_MAX_FIELD_GROUP_NOF_KEYS_PER_FG_MAX (3)

/**
 * \brief
 * FEC WA is being used in more then one WA context, hence must be created with_id so that other WA can re-use the FG
 */
#define DNX_DATA_MAX_FIELD_GROUP_ID_FEC_WA (127)

/**
 * \brief
 * Number of key selects in table for each field IO
 */
#define DNX_DATA_MAX_FIELD_EFES_MAX_NOF_KEY_SELECTS_PER_FIELD_IO (11)

/**
 * \brief
 * Number of key selects in table for each field IO
 */
#define DNX_DATA_MAX_FIELD_FEM_MAX_NOF_KEY_SELECTS_PER_FIELD_IO (21)

/**
 * \brief
 * Default Context Id (used for Ethernet Packets)
 */
#define DNX_DATA_MAX_FIELD_CONTEXT_DEFAULT_CONTEXT (0)

/**
 * \brief
 * Default Context Id for ITMH Packets
 */
#define DNX_DATA_MAX_FIELD_CONTEXT_DEFAULT_ITMH_CONTEXT (63)

/**
 * \brief
 * Default Context Id for ITMH_PPH Packets
 */
#define DNX_DATA_MAX_FIELD_CONTEXT_DEFAULT_ITMH_PPH_CONTEXT (62)

/**
 * \brief
 * Default Context Id for J1 ITMH Packets
 */
#define DNX_DATA_MAX_FIELD_CONTEXT_DEFAULT_J1_ITMH_CONTEXT (58)

/**
 * \brief
 * Default Context Id for J1 ITMH_PPH Packets
 */
#define DNX_DATA_MAX_FIELD_CONTEXT_DEFAULT_J1_ITMH_PPH_CONTEXT (57)

/**
 * \brief
 * Default Context Id for Stacking Packets
 */
#define DNX_DATA_MAX_FIELD_CONTEXT_DEFAULT_STACKING_CONTEXT (61)

/**
 * \brief
 * Default Context Id for OAM Packets
 */
#define DNX_DATA_MAX_FIELD_CONTEXT_DEFAULT_OAM_CONTEXT (60)

/**
 * \brief
 * Default Context Id for OAM downmep reflector Packets
 */
#define DNX_DATA_MAX_FIELD_CONTEXT_DEFAULT_OAM_REFLECTOR_CONTEXT (59)

/**
 * \brief
 * Default Context Id for 2nd pass of J1 Learning WA
 */
#define DNX_DATA_MAX_FIELD_CONTEXT_DEFAULT_J1_LEARNING_2NDPASS_CONTEXT (56)

/**
 * \brief
 * Default Presel Id in iPMF1 for OAM Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_OAM_PRESEL_ID_IPMF1 (1)

/**
 * \brief
 * Default Presel Id in iPMF1 for ITMH injected Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_ITMH_PRESEL_ID_IPMF1 (126)

/**
 * \brief
 * Default Presel Id in iPMF1 for ITMHoPPH injected Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_ITMH_PPH_PRESEL_ID_IPMF1 (125)

/**
 * \brief
 * Default Presel Id in iPMF1 for ITMH_J1 injected Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_ITMH_PRESEL_ID_IPMF1 (124)

/**
 * \brief
 * Default Presel Id in iPMF1 for ITMH_J1oPPH_J1 injected Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_ITMH_PPH_PRESEL_ID_IPMF1 (123)

/**
 * \brief
 * Default Presel Id in iPMF1 for ITMH_J1oPPH_J1 injected Packets from OAMP
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_ITMH_PPH_OAMP_PRESEL_ID_IPMF1 (121)

/**
 * \brief
 * Default Presel in iPMF1 Id for Stacking Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_STACKING_PRESEL_ID_IPMF1 (120)

/**
 * \brief
 * Default Presel in iPMF1 Learn WA 1st Pass
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_LEARN_WA_PRESEL_ID_1ST_PASS_IPMF1 (119)

/**
 * \brief
 * Default Presel in iPMF1 Learn WA 2nd Pass
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_LEARN_WA_PRESEL_ID_2ND_PASS_IPMF1 (118)

/**
 * \brief
 * Default Presel Id in iPMF1 for ITMHoPPH injected Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_ITMH_PPH_PRESEL_ID_IPMF3 (126)

/**
 * \brief
 * Default Presel Id in iPMF1 for ITMH_J1oPPH_J1 injected Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_ITMH_PPH_PRESEL_ID_IPMF3 (117)

/**
 * \brief
 * Default Presel in iPMF3 Id for IPv4 with ROO Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_OAM_ROO_IPV4_PRESEL_ID_IPMF3 (125)

/**
 * \brief
 * Default Presel in iPMF3 Id for IPv6 with ROO Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_OAM_ROO_IPV6_PRESEL_ID_IPMF3 (124)

/**
 * \brief
 * Default Presel in iPMF3 Id for IPv4 without ROO Packets no RIF
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_OAM_W_O_ROO_NO_RIF_IPV4_PRESEL_ID_IPMF3 (123)

/**
 * \brief
 * Default Presel in iPMF3 Id for IPv6 without ROO Packets no RIF
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_OAM_W_O_ROO_NO_RIF_IPV6_PRESEL_ID_IPMF3 (122)

/**
 * \brief
 * Default Presel in iPMF3 Id for IPv4 without ROO Packets with RIF
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_OAM_W_O_ROO_WITH_RIF_IPV4_PRESEL_ID_IPMF3 (121)

/**
 * \brief
 * Default Presel in iPMF3 Id for IPv6 without ROO Packets with RIF
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_OAM_W_O_ROO_WITH_RIF_IPV6_PRESEL_ID_IPMF3 (120)

/**
 * \brief
 * Default Presel in iPMF3 Id for IPv4 MC Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_IPV4_MC_IN_LIF_PRESEL_ID_IPMF3 (119)

/**
 * \brief
 * Default Presel in iPMF3 Id for IPv6 MC Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_IPV6_MC_IN_LIF_PRESEL_ID_IPMF3 (118)

/**
 * \brief
 * Default Presel in iPMF3 Id for MPLS PHP Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_PHP_PRESEL_ID_IPMF3 (115)

/**
 * \brief
 * Default Presel in iPMF3 Id for MPLS SWAP Packets
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_SWAP_PRESEL_ID_IPMF3 (116)

/**
 * \brief
 * Default Presel in ePMF Same port WA
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_J1_SAME_PORT_WA_PRESEL_ID_EPMF (126)

/**
 * \brief
 * Default Presel in ePMF Learn WA
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_DEFAULT_LEARN_LIMIT_WA_PRESEL_ID_EPMF (125)

/**
 * \brief
 * The number of CS entries which are used for inlif profile mapping
 */
#define DNX_DATA_MAX_FIELD_PRESELECTOR_NUM_CS_INLIF_PROFILE_ENTRIES (256)

/**
 * \brief
 * First User qualifier id to avoid overlapping with static ones
 */
#define DNX_DATA_MAX_FIELD_QUAL_USER_1ST (2048)

/**
 * \brief
 * Number of User Define Data qualifiers that can be created
 */
#define DNX_DATA_MAX_FIELD_QUAL_USER_NOF (256)

/**
 * \brief
 * First VW qualifier id to avoid overlapping with static or user defined qualifiers
 */
#define DNX_DATA_MAX_FIELD_QUAL_VW_1ST  (8292)

/**
 * \brief
 * Number of VW qualifiers that can be created
 */
#define DNX_DATA_MAX_FIELD_QUAL_VW_NOF  (100)

/**
 * \brief
 * Maximum number of bits that any qualifier can have
 */
#define DNX_DATA_MAX_FIELD_QUAL_MAX_BITS_IN_QUAL (160)

/**
 * \brief
 * Number of bits reserved in ingress PBUS for header.
 */
#define DNX_DATA_MAX_FIELD_QUAL_INGRESS_PBUS_HEADER_LENGTH (1152)

/**
 * \brief
 * Number of bits reserved in egress PBUS for header.
 */
#define DNX_DATA_MAX_FIELD_QUAL_EGRESS_PBUS_HEADER_LENGTH (1024)

/**
 * \brief
 * Number of bits in the PBUS of iFWD2
 */
#define DNX_DATA_MAX_FIELD_QUAL_IFWD2_PBUS_SIZE (3239)

/**
 * \brief
 * Number of bits in the PBUS of iPMF1
 */
#define DNX_DATA_MAX_FIELD_QUAL_IPMF1_PBUS_SIZE (3391)

/**
 * \brief
 * Number of bits in the PBUS of iPMF3
 */
#define DNX_DATA_MAX_FIELD_QUAL_IPMF2_PBUS_SIZE (1384)

/**
 * \brief
 * Number of bits in the PBUS of iPMF3
 */
#define DNX_DATA_MAX_FIELD_QUAL_IPMF3_PBUS_SIZE (1849)

/**
 * \brief
 * Number of bits in the PBUS of ePMF
 */
#define DNX_DATA_MAX_FIELD_QUAL_EPMF_PBUS_SIZE (2573)

/**
 * \brief
 * Number of layer records taken from the parser in ingress stages.
 */
#define DNX_DATA_MAX_FIELD_QUAL_INGRESS_NOF_LAYER_RECORDS (8)

/**
 * \brief
 * Number of bits in each layer record in ingress stages.
 */
#define DNX_DATA_MAX_FIELD_QUAL_INGRESS_LAYER_RECORD_SIZE (32)

/**
 * \brief
 * Number of layer records taken from the parser in egress stages.
 */
#define DNX_DATA_MAX_FIELD_QUAL_EGRESS_NOF_LAYER_RECORDS (5)

/**
 * \brief
 * Number of bits in each layer record in egress stages.
 */
#define DNX_DATA_MAX_FIELD_QUAL_EGRESS_LAYER_RECORD_SIZE (30)

/**
 * \brief
 * Size of AC_LIF_WIDE data size
 */
#define DNX_DATA_MAX_FIELD_QUAL_AC_LIF_WIDE_SIZE (28)

/**
 * \brief
 * First user action id to avaoid overlapping with static ones
 */
#define DNX_DATA_MAX_FIELD_ACTION_USER_1ST (2048)

/**
 * \brief
 * Number of User Define Data actions that can be created
 */
#define DNX_DATA_MAX_FIELD_ACTION_USER_NOF (256)

/**
 * \brief
 * First VW action id to avoid overlapping with static or user defined qualifiers
 */
#define DNX_DATA_MAX_FIELD_ACTION_VW_1ST (8292)

/**
 * \brief
 * Number of VW action that can be created
 */
#define DNX_DATA_MAX_FIELD_ACTION_VW_NOF (100)

/**
 * \brief
 * Number of elements in the table vw_quals.
 */
#define DNX_DATA_MAX_FIELD_VIRTUAL_WIRE_SIGNALS_NOF (128)

/**
 * \brief
 * Maximum number of actions that write to a signal.
 */
#define DNX_DATA_MAX_FIELD_VIRTUAL_WIRE_ACTIONS_PER_SIGNAL_NOF (10)

/**
 * \brief
 * The size in bits of the user_general part of the general_data (before the comp_general_data part).
 */
#define DNX_DATA_MAX_FIELD_VIRTUAL_WIRE_GENERAL_DATA_USER_GENERAL_CONTAINERS_SIZE (384)

/**
 * \brief
 * The index in signal_qual_mapping table of the general data signal for iPMF1.
 */
#define DNX_DATA_MAX_FIELD_VIRTUAL_WIRE_IPMF1_GENERAL_DATA_INDEX (4)

/**
 * \brief
 * Number of reserved bits for Ingress FP in in_lif_profile
 */
#define DNX_DATA_MAX_FIELD_PROFILE_BITS_NOF_ING_IN_LIF (2)

/**
 * \brief
 * Number of reserved bits for Egress FP in in_lif_profile
 */
#define DNX_DATA_MAX_FIELD_PROFILE_BITS_NOF_EG_IN_LIF (2)

/**
 * \brief
 * Number of reserved bits for Ingress FP in in_rif_profile
 */
#define DNX_DATA_MAX_FIELD_PROFILE_BITS_NOF_ING_ETH_RIF (2)

/**
 * \brief
 * Number of reserved bits for Egress FP in in_rif_profile
 */
#define DNX_DATA_MAX_FIELD_PROFILE_BITS_NOF_EG_ETH_RIF (2)

/**
 * \brief
 * Number of bits available on the key_ken_per per PP port
 */
#define DNX_DATA_MAX_FIELD_PROFILE_BITS_INGRESS_PP_PORT_KEY_GEN_VAR_SIZE (64)

/**
 * \brief
 * The maximum number in bits of all port profiles hw memories possible
 */
#define DNX_DATA_MAX_FIELD_PROFILE_BITS_MAX_PORT_PROFILE_SIZE (64)

/**
 * \brief
 * The number of bits used by the PMF for port profiles. Note that the actual number may be lower in some stages.
 */
#define DNX_DATA_MAX_FIELD_PROFILE_BITS_NOF_BITS_IN_PORT_PROFILE (24)

/**
 * \brief
 * The number of bits used by the PMF for per PP port general data.
 */
#define DNX_DATA_MAX_FIELD_PROFILE_BITS_NOF_BITS_IN_INGRESS_PP_PORT_GENERAL_DATA (40)

/**
 * \brief
 * Half key size of direct extraction
 */
#define DNX_DATA_MAX_FIELD_DIR_EXT_HALF_KEY_SIZE (80)

/**
 * \brief
 * Single key size of direct extraction
 */
#define DNX_DATA_MAX_FIELD_DIR_EXT_SINGLE_KEY_SIZE (160)

/**
 * \brief
 * Double key size of direct extraction
 */
#define DNX_DATA_MAX_FIELD_DIR_EXT_DOUBLE_KEY_SIZE (320)

/**
 * \brief
 * Size of the state table key in the system
 */
#define DNX_DATA_MAX_FIELD_STATE_TABLE_KEY_SIZE (19)

/**
 * \brief
 * Max address for the state table
 */
#define DNX_DATA_MAX_FIELD_STATE_TABLE_ADDRESS_MAX (1023)

/**
 * \brief
 * Size of the address field in State Table in bits
 */
#define DNX_DATA_MAX_FIELD_STATE_TABLE_ADDRESS_SIZE (10)

/**
 * \brief
 * Size of the data field in State Table in bits
 */
#define DNX_DATA_MAX_FIELD_STATE_TABLE_DATA_SIZE (8)

/**
 * \brief
 * Size of the MAP key in the system
 */
#define DNX_DATA_MAX_FIELD_MAP_KEY_SIZE (20)

/**
 * \brief
 * Size of the small MAP action in the system
 */
#define DNX_DATA_MAX_FIELD_MAP_ACTION_SIZE_SMALL (30)

/**
 * \brief
 * Size of the mid MAP action in the system
 */
#define DNX_DATA_MAX_FIELD_MAP_ACTION_SIZE_MID (60)

/**
 * \brief
 * Size of the large MAP action in the system
 */
#define DNX_DATA_MAX_FIELD_MAP_ACTION_SIZE_LARGE (120)

/**
 * \brief
 * The PMF key used for MAP lookup by iPMF1. The value is the offset from the first key in the stage.
 */
#define DNX_DATA_MAX_FIELD_MAP_IPMF1_KEY_SELECT (2)

/**
 * \brief
 * The PMF key used for MAP lookup by iPMF2. The value is the offset from the first key in the stage.
 */
#define DNX_DATA_MAX_FIELD_MAP_IPMF2_KEY_SELECT (2)

/**
 * \brief
 * The PMF key used for MAP lookup by iPMF3. The value is the offset from the first key in the stage.
 */
#define DNX_DATA_MAX_FIELD_MAP_IPMF3_KEY_SELECT (2)

/**
 * \brief
 * maximal key size Field Group type 
 */
#define DNX_DATA_MAX_FIELD_HASH_MAX_KEY_SIZE (320)

/**
 * \brief
 * UDH Type count
 */
#define DNX_DATA_MAX_FIELD_UDH_TYPE_COUNT (4)

/**
 * \brief
 * UDH Type 0 length in bytes
 */
#define DNX_DATA_MAX_FIELD_UDH_TYPE_0_LENGTH (0)

/**
 * \brief
 * UDH Type 1 length in bytes
 */
#define DNX_DATA_MAX_FIELD_UDH_TYPE_1_LENGTH (4)

/**
 * \brief
 * UDH Type 2 length in bytes
 */
#define DNX_DATA_MAX_FIELD_UDH_TYPE_2_LENGTH (4)

/**
 * \brief
 * UDH Type 3 length in bytes
 */
#define DNX_DATA_MAX_FIELD_UDH_TYPE_3_LENGTH (4)

/**
 * \brief
 * Number of system headers in device
 */
#define DNX_DATA_MAX_FIELD_SYSTEM_HEADERS_NOF_PROFILES (16)

/**
 * \brief
 * Number of bits used application db
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_APP_DB_ID_SIZE (6)

/**
 * \brief
 * Number of bits used application db
 */
#define DNX_DATA_MAX_FIELD_EXEM_LARGE_APP_DB_ID_SIZE (6)

/**
 * \brief
 * Small EXEM key size in bits
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_MAX_KEY_SIZE (80)

/**
 * \brief
 * Large EXEM key size in bits
 */
#define DNX_DATA_MAX_FIELD_EXEM_LARGE_MAX_KEY_SIZE (160)

/**
 * \brief
 * Small EXEM result (payload) size in bits, including VMV
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_MAX_RESULT_SIZE (60)

/**
 * \brief
 * Large EXEM result (payload) size in bits, including VMV
 */
#define DNX_DATA_MAX_FIELD_EXEM_LARGE_MAX_RESULT_SIZE (60)

/**
 * \brief
 * Large EXEM maximal container size in bits
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_MAX_CONTAINER_SIZE (120)

/**
 * \brief
 * Large EXEM result (payload) size in bits
 */
#define DNX_DATA_MAX_FIELD_EXEM_LARGE_MAX_CONTAINER_SIZE (240)

/**
 * \brief
 * number of bits out of key used for hashing (these bits are spared from saving in container)
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_KEY_HASH_SIZE (13)

/**
 * \brief
 * number of bits out of key used for hashing (these bits are spared from saving in container)
 */
#define DNX_DATA_MAX_FIELD_EXEM_LARGE_KEY_HASH_SIZE (13)

/**
 * \brief
 * Small EXEM first APP_DB_ID allocated to PMF module
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_MIN_APP_DB_ID_RANGE (48)

/**
 * \brief
 * Large EXEM first APP_DB_ID allocated to PMF module
 */
#define DNX_DATA_MAX_FIELD_EXEM_LARGE_MIN_APP_DB_ID_RANGE (48)

/**
 * \brief
 * Small EXEM last APP_DB_ID allocated to PMF module
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_MAX_APP_DB_ID_RANGE (63)

/**
 * \brief
 * Large EXEM last APP_DB_ID allocated to PMF module
 */
#define DNX_DATA_MAX_FIELD_EXEM_LARGE_MAX_APP_DB_ID_RANGE (63)

/**
 * \brief
 * The PMF key used for EXEM lookup by iPMF2. The value is the offset from the first key in the stage.
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_IPMF2_KEY (4)

/**
 * \brief
 * The PMF key part used for EXEM lookup by iPMF2. 0 means the LSB half, 1 the MSB half.
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_IPMF2_KEY_PART (0)

/**
 * \brief
 * The HW value to provide for selecting small_ipmf2_key and small_ipmf2_key_part.
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_IPMF2_KEY_HW_VALUE (4)

/**
 * \brief
 * The number of bits used by the HW for selecting small_ipmf2_key and small_ipmf2_key_part.
 */
#define DNX_DATA_MAX_FIELD_EXEM_SMALL_IPMF2_KEY_HW_BITS (3)

/**
 * \brief
 * Whether or not the EXEM key for iPMF1 can be configured on a chip wide basis.
 */
#define DNX_DATA_MAX_FIELD_EXEM_LARGE_IPMF1_KEY_CONFIGURABLE (1)

/**
 * \brief
 * The PMF key used for EXEM lookup by iPMF1. The value is the offset from the first key in the stage.
 */
#define DNX_DATA_MAX_FIELD_EXEM_LARGE_IPMF1_KEY (4)

/**
 * \brief
 * Number of bits used for the ACE ID (result type), which serves as an ID for the ACE format and context ID for the ACE EFES.
 */
#define DNX_DATA_MAX_FIELD_ACE_ACE_ID_SIZE (6)

/**
 * \brief
 * Number of bits in the key of the PPMC table, including the prefix that indicates the type to the entry
 */
#define DNX_DATA_MAX_FIELD_ACE_KEY_SIZE (22)

/**
 * \brief
 * Number of bits in the key that are only used in the hash and aren't placed in the entry.
 */
#define DNX_DATA_MAX_FIELD_ACE_KEY_HASH_SIZE (17)

/**
 * \brief
 * Number of bits Used for the APP DB ID.
 */
#define DNX_DATA_MAX_FIELD_ACE_APP_DB_ID_SIZE (0)

/**
 * \brief
 * Number of bits used to encode the container size, including the result type
 */
#define DNX_DATA_MAX_FIELD_ACE_PAYLOAD_SIZE (110)

/**
 * \brief
 * The first entry in the range of ACE keys allocated to ACE pointers (but not to MC replication ID).
 */
#define DNX_DATA_MAX_FIELD_ACE_MIN_KEY_RANGE_PMF (3932160)

/**
 * \brief
 * The last entry in the range of ACE keys allocated to ACE pointers (but not to MC replication ID).
 */
#define DNX_DATA_MAX_FIELD_ACE_MAX_KEY_RANGE_PMF (4194303)

/**
 * \brief
 * Minimal number of ACE ID that can be allocated dynamically.
 */
#define DNX_DATA_MAX_FIELD_ACE_MIN_ACE_ID_DYNAMIC_RANGE (1)

/**
 * \brief
 * Number of ACE IDs.
 */
#define DNX_DATA_MAX_FIELD_ACE_NOF_ACE_ID (64)

/**
 * \brief
 * Number of action per ACE Format
 */
#define DNX_DATA_MAX_FIELD_ACE_NOF_ACTION_PER_ACE_FORMAT (8)

/**
 * \brief
 * Number of bits per raw, entry size is number row size times VMV encoding meaning, e.g. half row encoding VMV would mean 60 bits entry size.
 */
#define DNX_DATA_MAX_FIELD_ACE_ROW_SIZE (120)

/**
 * \brief
 * Minimum number of bits in entry.
 */
#define DNX_DATA_MAX_FIELD_ACE_MIN_ENTRY_SIZE (30)

/**
 * \brief
 * The first ACE ID allocated to ACE, that is to ePMF extension.
 */
#define DNX_DATA_MAX_FIELD_ACE_ACE_ID_PMF_ALLOC_FIRST (48)

/**
 * \brief
 * The last ACE ID allocated to ACE, that is to ePMF extension.
 */
#define DNX_DATA_MAX_FIELD_ACE_ACE_ID_PMF_ALLOC_LAST (63)

/**
 * \brief
 * Number of masks per FES
 */
#define DNX_DATA_MAX_FIELD_ACE_NOF_MASKS_PER_FES (2)

/**
 * \brief
 * Number FESes in each FES array
 */
#define DNX_DATA_MAX_FIELD_ACE_NOF_FES_ID_PER_ARRAY (8)

/**
 * \brief
 * Number FES arrays
 */
#define DNX_DATA_MAX_FIELD_ACE_NOF_FES_ARRAY (1)

/**
 * \brief
 * Number of FES INSTRUCTIONs per ACE ID, also the number of FESes.
 */
#define DNX_DATA_MAX_FIELD_ACE_NOF_FES_INSTRUCTION_PER_CONTEXT (8)

/**
 * \brief
 * Number of FES programs. For ACE the FES program is the same as ACE ID. Used here for compatibility with PMF FESes.
 */
#define DNX_DATA_MAX_FIELD_ACE_NOF_FES_PROGRAMS (64)

/**
 * \brief
 * Number of MS bits instruction programs per FES
 */
#define DNX_DATA_MAX_FIELD_ACE_NOF_PROG_PER_FES (1)

/**
 * \brief
 * Number of bits on the output of a FES.
 */
#define DNX_DATA_MAX_FIELD_ACE_NOF_BITS_IN_FES_ACTION (32)

/**
 * \brief
 * The shift used for obtaining an always zero bit for input to FES. Uses the zero padding at the end of the payload, expected to work only if EFES field type=1.
 */
#define DNX_DATA_MAX_FIELD_ACE_FES_SHIFT_FOR_ZERO_BIT (110)

/**
 * \brief
 * Number of bits in one fes instruction.
 */
#define DNX_DATA_MAX_FIELD_ACE_FES_INSTRUCTION_SIZE (21)

/**
 * \brief
 * FES shift offset in ETPPA_PRP_FES_PROGRAM_TABLEm->DATA_PER_FESf
 */
#define DNX_DATA_MAX_FIELD_ACE_FES_SHIFT_OFFSET (1)

/**
 * \brief
 * FES invalid bits offset in ETPPA_PRP_FES_PROGRAM_TABLEm->DATA_PER_FESf
 */
#define DNX_DATA_MAX_FIELD_ACE_FES_INVALID_BITS_OFFSET (8)

/**
 * \brief
 * FES type offset in ETPPA_PRP_FES_PROGRAM_TABLEm->DATA_PER_FESf
 */
#define DNX_DATA_MAX_FIELD_ACE_FES_TYPE_OFFSET (13)

/**
 * \brief
 * FES ace action offset in ETPPA_PRP_FES_PROGRAM_TABLEm->DATA_PER_FESf
 */
#define DNX_DATA_MAX_FIELD_ACE_FES_ACE_ACTION_OFFSET (14)

/**
 * \brief
 * FES chosen mask offset in ETPPA_PRP_FES_PROGRAM_TABLEm->DATA_PER_FESf
 */
#define DNX_DATA_MAX_FIELD_ACE_FES_CHOSEN_MASK_OFFSET (20)

/**
 * \brief
 * The maximum number of fields in a direct extraction request. \n                                                   (e.g. if we want the action to be composed of 3 bits of constant value, 5 bits from the key, \n                                                   5 bits of constant value and then 4 bits from the key we need at least 4 fields.)\n                                                   Used by dnx_field_dir_ext_action_t for the array size of the fields. \n                                                   Arbitrary value, can be increased.
 */
#define DNX_DATA_MAX_FIELD_ENTRY_DIR_EXT_NOF_FIELDS (6)

/**
 * \brief
 * Number of action parameters can be given for each action \n                                                             e.g. action values that are filled for TCAM action result
 */
#define DNX_DATA_MAX_FIELD_ENTRY_NOF_ACTION_PARAMS_PER_ENTRY (4)

/**
 * \brief
 * Number of qualifiers parameters can be given for each qualifier type \n                                                             e.g. qualifier/key values that are filled for TCAM key
 */
#define DNX_DATA_MAX_FIELD_ENTRY_NOF_QUAL_PARAMS_PER_ENTRY (5)

/**
 * \brief
 * The position of the UDP protocol in the register
 */
#define DNX_DATA_MAX_FIELD_L4_OPS_UDP_POSITION (9)

/**
 * \brief
 * The position of the UDP protocol in the register
 */
#define DNX_DATA_MAX_FIELD_L4_OPS_TCP_POSITION (8)

/**
 * \brief
 * number of range entries in L4 Ops
 */
#define DNX_DATA_MAX_FIELD_L4_OPS_NOF_RANGE_ENTRIES (32)

/**
 * \brief
 * Number of range result encoders in extended L4 OPs
 */
#define DNX_DATA_MAX_FIELD_L4_OPS_NOF_EXT_ENCODERS (4)

/**
 * \brief
 * Number of range types in extended L4 OPs
 */
#define DNX_DATA_MAX_FIELD_L4_OPS_NOF_EXT_TYPES (4)

/**
 * \brief
 * The offset of the Trap Strength in the action
 */
#define DNX_DATA_MAX_FIELD_ENCODED_QUAL_ACTIONS_OFFSET_TRAP_STRENGTH_OFFSET (9)

/**
 * \brief
 * The offset of the Trap Qualifier in the action
 */
#define DNX_DATA_MAX_FIELD_ENCODED_QUAL_ACTIONS_OFFSET_TRAP_QUALIFIER_OFFSET (13)

/**
 * \brief
 * The offset of the Snoop qualifier in the action
 */
#define DNX_DATA_MAX_FIELD_ENCODED_QUAL_ACTIONS_OFFSET_SNIFF_QUALIFIER_OFFSET (12)

/**
 * \brief
 * The offset of the Mirror Qualifier in the action
 */
#define DNX_DATA_MAX_FIELD_ENCODED_QUAL_ACTIONS_OFFSET_MIRROR_QUALIFIER_OFFSET (9)

/**
 * \brief
 * The position in the qual showing that the result of compare is equal
 */
#define DNX_DATA_MAX_FIELD_COMPARE_OPERAND_EQUAL (4)

/**
 * \brief
 * The position in the qual showing that the result of compare is not equal
 */
#define DNX_DATA_MAX_FIELD_COMPARE_OPERAND_NOT_EQUAL (0)

/**
 * \brief
 * The position in the qual showing that the first compare value is smaller then the second
 */
#define DNX_DATA_MAX_FIELD_COMPARE_OPERAND_SMALLER (2)

/**
 * \brief
 * The position in the qual showing that the first compare value is not smaller then the second
 */
#define DNX_DATA_MAX_FIELD_COMPARE_OPERAND_NOT_SMALLER (3)

/**
 * \brief
 * The position in the qual showing that the first compare value is bigger then the second
 */
#define DNX_DATA_MAX_FIELD_COMPARE_OPERAND_BIGGER (5)

/**
 * \brief
 * The position in the qual showing that the first compare value is not bigger then the second
 */
#define DNX_DATA_MAX_FIELD_COMPARE_OPERAND_NOT_BIGGER (1)

/**
 * \brief
 * The number of all operands
 */
#define DNX_DATA_MAX_FIELD_COMPARE_OPERAND_NOF_OPERANDS (6)

/**
 * \brief
 * Mask of bits, which are related to the value of bytes to remove, from the signal.
 */
#define DNX_DATA_MAX_FIELD_DIAG_BYTES_TO_REMOVE_MASK (15)

/**
 * \brief
 * Size of the layers to remove value in bits, to be used for shifting the signal value.
 */
#define DNX_DATA_MAX_FIELD_DIAG_LAYERS_TO_REMOVE_SIZE_IN_BIT (3)

/**
 * \brief
 * Mask of bits, which are related to the value of layers to remove, from the signal.
 */
#define DNX_DATA_MAX_FIELD_DIAG_LAYERS_TO_REMOVE_MASK (7)

/**
 * \brief
 * Maximum number of signals per action.
 */
#define DNX_DATA_MAX_FIELD_DIAG_NOF_SIGNALS_PER_ACTION (10)

/**
 * \brief
 * Maximum number of signals per qualifier.
 */
#define DNX_DATA_MAX_FIELD_DIAG_NOF_SIGNALS_PER_QUALIFIER (10)

/**
 * \brief
 * Maximal number of FFC's in all stages
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FFC (64)

/**
 * \brief
 * Number of keys for the entire PMF module
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_KEYS (10)

/**
 * \brief
 * Number of masks per FES
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_MASKS_PER_FES (4)

/**
 * \brief
 * Number FESes in each FES array
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FES_ID_PER_ARRAY (16)

/**
 * \brief
 * Number FES arrays
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FES_ARRAY (2)

/**
 * \brief
 * Number of FES INSTRUCTIONs per context
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FES_INSTRUCTION_PER_CONTEXT (32)

/**
 * \brief
 * Number of FES programs
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FES_PROGRAMS (32)

/**
 * \brief
 * Number of MS bits instruction programs per FES
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_PROG_PER_FES (4)

/**
 * \brief
 * Number of Ingress context selection lines
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_PROGRAM_SELECTION_LINES (128)

/**
 * \brief
 * Number of bits for data or mask in the memory IHB_FLP_PROGRAM_SELECTION_CAM
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_PROGRAM_SELECTION_CAM_MASK_NOF_BITS (95)

/**
 * \brief
 * Number of program selection lines
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_CS_LINES (128)

/**
 * \brief
 * Number of contexts per PMF
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_CONTEXTS (64)

/**
 * \brief
 * Number of actions
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_ACTIONS (128)

/**
 * \brief
 * Number of qualifiers
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_QUALIFIERS (128)

/**
 * \brief
 * Number of Ingress PMF 80b dedicated instruction groups
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_80B_ZONES (2)

/**
 * \brief
 * Number of Ingress PMF 80b key zones
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_KEY_ZONES (4)

/**
 * \brief
 * Number of Ingress PMF 80b key zone bits
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_KEY_ZONE_BITS (80)

/**
 * \brief
 * Number of bits on the outpus of a FES.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_BITS_IN_FES_ACTION (32)

/**
 * \brief
 * Number of bits on input to FES.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_BITS_IN_FES_KEY_SELECT (64)

/**
 * \brief
 * Number of 'key select's that can be applied on one line on actions table. ('double key' actions are considered one line)
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FES_KEY_SELECTS_ON_ONE_ACTIONS_LINE (3)

/**
 * \brief
 * Maximal number of ffc for one qualifier.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FFC_IN_QUAL (6)

/**
 * \brief
 * Number of bits in ffc.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_BITS_IN_FFC (32)

/**
 * \brief
 * Number of uint32 needed to hold bitmap for maximum number of FFC's.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FFC_IN_UINT32 (2)

/**
 * \brief
 * Maxmimal number of actions between both Field Group and ACE format. Used for arrays in functions that serve both.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_ACTION_PER_GROUP (32)

/**
 * \brief
 * Maximal number of layer records.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_LAYER_RECORDS (8)

/**
 * \brief
 * Maximal size of layer records.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_LAYER_RECORD_SIZE (32)

/**
 * \brief
 * Maximal number of ranges for L4 Ops legacy.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_L4_OPS_RANGES_LEGACY (24)

/**
 * \brief
 * Maximal number of ranges for packet header.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_PKT_HDR_RANGES (3)

/**
 * \brief
 * Maximal number of ranges for Out Lif.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_OUT_LIF_RANGES (7)

/**
 * \brief
 * Maximal KBR size.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_KBR_SIZE (160)

/**
 * \brief
 * Maximal number of pairs used for compare.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_COMPARE_PAIRS (2)

/**
 * \brief
 * Number compare pairs in compare mode.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_COMPARE_PAIRS_IN_COMPARE_MODE (2)

/**
 * \brief
 * Number compare keys in compare mode.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_COMPARE_KEYS_IN_COMPARE_MODE (2)

/**
 * \brief
 * Maximal number of bits on action value in IPPC_FEM_*_*_MAP_TABLE.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_BITS_IN_FEM_ACTION (24)

/**
 * \brief
 * Total number of fem conditions. This is the number of conditions that may be assigned to each (fem_id,fem_program) combination.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FEM_CONDITION (16)

/**
 * \brief
 * Total number fem map indices. This represents the number of actions that may be assigned to each condition. For internal DNX_DATA use only.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FEM_MAP_INDEX (4)

/**
 * \brief
 * Total number 'FEM id's available.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_FEM_ID (16)

/**
 * \brief
 * Total number of 'array_is's which are used to identify a range of FESes or FEMs. See BCM_FIELD_ACTION_POSITION.
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_NOF_ARRAY_IDS (4)

/**
 * \brief
 * Maximum number of pairs which are used to identify the DBAL key/result field in dnx_field_dbal_entry_set function. 
 */
#define DNX_DATA_MAX_FIELD_COMMON_MAX_VAL_DBAL_PAIRS (10)

/**
 * \brief
 * APP WA for fec destination
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_FEC_DEST (1)

/**
 * \brief
 * APP WA for L4 Trap
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_L4_TRAP (1)

/**
 * \brief
 * APP WA for OAM Layer Index
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_OAM_LAYER_INDEX (1)

/**
 * \brief
 * APP WA for OAM Statistics
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_OAM_STAT (1)

/**
 * \brief
 * APP WA for Flow ID
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_FLOW_ID (1)

/**
 * \brief
 * APP WA for Roo
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_ROO  (1)

/**
 * \brief
 * APP WA for IPMC In LIF
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_JR1_IPMC_INLIF (1)

/**
 * \brief
 * APP WA for J1 Same port
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_J1_SAME_PORT (1)

/**
 * \brief
 * APP WA for J1 Learning
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_J1_LEARNING (1)

/**
 * \brief
 * APP WA for Learn Limit
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_LEARN_LIMIT (1)

/**
 * \brief
 * APP WA for J1 MPLS PHP
 */
#define DNX_DATA_MAX_FIELD_INIT_WA_J1_PHP (1)

/**
 * \brief
 * ECC is calculated per whole entry on each entry write, therefore, when writing half-entries\n                      wrong ECC values is being calculated, this workaround enables read-modify-write of the whole\n                      entry instead of writing half-entries to have correct ECC calculated on each write.
 */
#define DNX_DATA_MAX_FIELD_FEATURES_ECC_WA_ENABLE (1)

/**
 * \brief
 * Allows to swap the acl_context and fwd_context signals after iPMF1/2 using IPPC_PMF_GENERAL.SWITCH_TO_ACL_CONTEXT.
 */
#define DNX_DATA_MAX_FIELD_FEATURES_SWITCH_TO_ACL_CONTEXT (1)

/**
 * \brief
 * The placement of PMF_PROFILE field within ERPP_PER_PORT_TABLE. Used because DBAL mapping by device didn't work.
 */
#define DNX_DATA_MAX_FIELD_FEATURES_PER_PP_PORT_PMF_PROFILE_CS_OFFSET (83)

/**
 * \brief
 * The TCAM result flip ECO is about flippiing lsb and msb parts of the TCAM-result in order to support 80b result being parsed by ARR
 */
#define DNX_DATA_MAX_FIELD_FEATURES_TCAM_RESULT_FLIP_ECO (1)

/**
 * \brief
 * Indicates that for half payload lookup the result is on the MSB half, but not using the tcam_result_flip_eco.
 */
#define DNX_DATA_MAX_FIELD_FEATURES_TCAM_RESULT_HALF_PAYLOAD_ON_MSB (1)

/**
 * \brief
 * In JR2, the parsing_start_offset signal is 8 bit in ingress but only 7 in egress, so we make the action smaller so as not to have a meaningles MSB.
 */
#define DNX_DATA_MAX_FIELD_FEATURES_PARSING_START_OFFSET_MSB_MEANINGLESS (1)

/**
 * \brief
 * Indicates whether the context selection of iPMF1 takes the KBP opcode into account.
 */
#define DNX_DATA_MAX_FIELD_FEATURES_KBP_OPCODE_IN_IPMF1_CS (1)

/**
 * \brief
 * Indicates whether the context selection of iPMF1 takes the KBP hitbits from the correct place of the elk payload. Assumed to be either 0 or 1.
 */
#define DNX_DATA_MAX_FIELD_FEATURES_KBP_HITBITS_CORRECT_IN_IPMF1_CS (1)

/**
 * \brief
 * Indicates whether it is possible to configure a shift to remove the from the EXEM payload.
 */
#define DNX_DATA_MAX_FIELD_FEATURES_EXEM_VMV_REMOVABLE_FROM_PAYLOAD (1)

/**
 * \brief
 * Indicates whether it is possible to configure dynamic memory enablers for ST, CS hit, TCAM entry protection etc.
 */
#define DNX_DATA_MAX_FIELD_FEATURES_MULTIPLE_DYNAMIC_MEM_ENABLERS (1)

/**
 * \brief
 * Indicates whether it is possible to configure Super Group Handler for AACL
 */
#define DNX_DATA_MAX_FIELD_FEATURES_AACL_SUPER_GROUP_HANDLER_ENABLE (1)

/**
 * \brief
 * Indicates whether it is possible to configure TCAM swap for AACL
 */
#define DNX_DATA_MAX_FIELD_FEATURES_AACL_TCAM_SWAP_ENABLE (1)

/**
 * \brief
 * Whether extended L4 Ops is supported
 */
#define DNX_DATA_MAX_FIELD_FEATURES_EXTENDED_L4_OPS (1)

/**
 * \brief
 * Dual queue added by HWJERICHO2C-55 and increased in size in HWJERICHO2P-127. Not supported in J2, but we still configure a value because the DBAL field needs a size.
 */
#define DNX_DATA_MAX_FIELD_SIGNAL_SIZES_DUAL_QUEUE_SIZE (4)

/**
 * \brief
 * packet_header_size. Changed in HWJERICHO2P-384.
 */
#define DNX_DATA_MAX_FIELD_SIGNAL_SIZES_PACKET_HEADER_SIZE (8)

/**
 * \brief
 * ECN signal. Changed in HWJERICHO2C-565.
 */
#define DNX_DATA_MAX_FIELD_SIGNAL_SIZES_ECN (3)

/**
 * \brief
 * CONGESTION_INFO signal. Takes ECN by default, and changed with it.
 */
#define DNX_DATA_MAX_FIELD_SIGNAL_SIZES_CONGESTION_INFO (3)

/**
 * \brief
 * Whether layer record ETH_IS_DA_MAC works on device (works on JR2_B0 but not on JR2_A0).
 */
#define DNX_DATA_MAX_FIELD_DNX_DATA_INTERNAL_LR_ETH_IS_DA_MAC_VALID (1)

/*
 * }
 */

/*}*/
#endif /*_DNX_DATA_MAX_FIELD_H_*/
/* *INDENT-ON* */
