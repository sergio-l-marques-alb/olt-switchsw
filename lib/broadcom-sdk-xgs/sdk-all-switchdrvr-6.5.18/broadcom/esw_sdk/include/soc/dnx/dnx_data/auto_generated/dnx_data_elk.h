/** \file dnx_data_elk.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_ELK_H_
/*{*/
#define _DNX_DATA_ELK_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/kbp/alg_kbp/include/init.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_elk.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_elk
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_elk_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * ELK general data.
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_elk_general_feature_nof
} dnx_data_elk_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_elk_general_feature_get_f) (
    int unit,
    dnx_data_elk_general_feature_e feature);

/**
 * \brief returns define data of max_ports
 * Module - 'elk', Submodule - 'general', data - 'max_ports'
 * Max Elk ports
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_ports - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_general_max_ports_get_f) (
    int unit);

/**
 * \brief returns define data of rop_fifo_depth
 * Module - 'elk', Submodule - 'general', data - 'rop_fifo_depth'
 * ROP Fifo memory depth in EGW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rop_fifo_depth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_general_rop_fifo_depth_get_f) (
    int unit);

/**
 * \brief returns define data of flp_full_treshold
 * Module - 'elk', Submodule - 'general', data - 'flp_full_treshold'
 *  number of elements in the FLPB lookup accessing FIFO, should be size of IPPB_FLPB_LOOKUP_ACCESS_LOOKUP_FIFO_3 - const: (less than the max queue size)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flp_full_treshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_general_flp_full_treshold_get_f) (
    int unit);

/**
 * \brief returns define data of max_lane_id
 * Module - 'elk', Submodule - 'general', data - 'max_lane_id'
 * KBP MAX lane id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_lane_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_general_max_lane_id_get_f) (
    int unit);

/**
 * \brief returns define data of egw_max_opcode
 * Module - 'elk', Submodule - 'general', data - 'egw_max_opcode'
 * Maximum value for the EGW opcode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egw_max_opcode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_general_egw_max_opcode_get_f) (
    int unit);

/**
 * \brief returns numeric data of device_type
 * Module - 'elk', Submodule - 'general', data - 'device_type'
 * External Tcam device type.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     device_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_general_device_type_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ELK - GENERAL:
 * {
 */
/**
 * \brief Interface for elk general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_elk_general_feature_get_f feature_get;
    /**
     * returns define data of max_ports
     */
    dnx_data_elk_general_max_ports_get_f max_ports_get;
    /**
     * returns define data of rop_fifo_depth
     */
    dnx_data_elk_general_rop_fifo_depth_get_f rop_fifo_depth_get;
    /**
     * returns define data of flp_full_treshold
     */
    dnx_data_elk_general_flp_full_treshold_get_f flp_full_treshold_get;
    /**
     * returns define data of max_lane_id
     */
    dnx_data_elk_general_max_lane_id_get_f max_lane_id_get;
    /**
     * returns define data of egw_max_opcode
     */
    dnx_data_elk_general_egw_max_opcode_get_f egw_max_opcode_get;
    /**
     * returns numeric data of device_type
     */
    dnx_data_elk_general_device_type_get_f device_type_get;
} dnx_data_if_elk_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - APPLICATION:
 * ELK forwarding applications.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule application table db_property
 * Table info:
 * DB properties
 */
typedef struct
{
    /**
     * Initial capacity for the regular result type
     */
    int initial_regular_capacity;
    /**
     * Initial capacity for the optimized result type
     */
    int initial_optimized_capacity;
    /**
     * Property value for extra large DB
     */
    int xl_db;
    /**
     * Property value for DB locality
     */
    int locality;
    /**
     * Indication if zero_size_ad needs to be initialized (OP2 suppot only)
     */
    int zero_size_ad;
    /**
     * Indicates if the DBAL NONE_DIRECT_OPTIMIZED indication should be set to the table for improving the insertion rate
     */
    int dbal_none_direct_optimized;
} dnx_data_elk_application_db_property_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * KBP IPv4 application enabled
     */
    dnx_data_elk_application_ipv4,
    /**
     * KBP IPv6 application enabled
     */
    dnx_data_elk_application_ipv6,

    /**
     * Must be last one!
     */
    _dnx_data_elk_application_feature_nof
} dnx_data_elk_application_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_elk_application_feature_get_f) (
    int unit,
    dnx_data_elk_application_feature_e feature);

/**
 * \brief returns numeric data of optimized_result
 * Module - 'elk', Submodule - 'application', data - 'optimized_result'
 * Device use optimized result
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     optimized_result - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_application_optimized_result_get_f) (
    int unit);

/**
 * \brief returns numeric data of split_rpf
 * Module - 'elk', Submodule - 'application', data - 'split_rpf'
 * Device use split or non-split FWD and RPF tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     split_rpf - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_application_split_rpf_get_f) (
    int unit);

/**
 * \brief returns numeric data of thread_safety
 * Module - 'elk', Submodule - 'application', data - 'thread_safety'
 * Device has KBP thread safety enabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     thread_safety - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_application_thread_safety_get_f) (
    int unit);

/**
 * \brief returns numeric data of ipv4_large_mc_enable
 * Module - 'elk', Submodule - 'application', data - 'ipv4_large_mc_enable'
 * Device use large or small IPv4 multicast table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv4_large_mc_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_application_ipv4_large_mc_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of ipv6_large_mc_enable
 * Module - 'elk', Submodule - 'application', data - 'ipv6_large_mc_enable'
 * Device use large or small IPv6 multicast table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv6_large_mc_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_application_ipv6_large_mc_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of ipv4_mc_hash_table_size
 * Module - 'elk', Submodule - 'application', data - 'ipv4_mc_hash_table_size'
 * Number of SW entries for KBP IPv4 Multicast; Not relevant when IPv4 application is not enabled; Actual hash table size will be the smallest power fo 2, which can fit this size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv4_mc_hash_table_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_application_ipv4_mc_hash_table_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of ipv6_mc_hash_table_size
 * Module - 'elk', Submodule - 'application', data - 'ipv6_mc_hash_table_size'
 * Number of SW entries for KBP IPv6 Multicast; Not relevant when IPv6 application is not enabled; Actual hash table size will be the smallest power fo 2, which can fit this size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv6_mc_hash_table_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_application_ipv6_mc_hash_table_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of ipv4_mc_table_size
 * Module - 'elk', Submodule - 'application', data - 'ipv4_mc_table_size'
 * Number of SW entries for KBP IPv4 Multicast; Not relevant when IPv4 application is not enabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv4_mc_table_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_application_ipv4_mc_table_size_get_f) (
    int unit);

/**
 * \brief returns numeric data of ipv6_mc_table_size
 * Module - 'elk', Submodule - 'application', data - 'ipv6_mc_table_size'
 * Number of SW entries for KBP IPv6 Multicast; Not relevant when IPv6 application is not enabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv6_mc_table_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_application_ipv6_mc_table_size_get_f) (
    int unit);

/**
 * \brief get table db_property entry 
 * DB properties
 * 
 * \param [in] unit - unit #
 * \param [in] db - DBAL table ID of the DB
 * 
 * \return
 *     db_property - returns the relevant entry values grouped in struct - see dnx_data_elk_application_db_property_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_elk_application_db_property_t *(
    *dnx_data_elk_application_db_property_get_f) (
    int unit,
    int db);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ELK - APPLICATION:
 * {
 */
/**
 * \brief Interface for elk application data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_elk_application_feature_get_f feature_get;
    /**
     * returns numeric data of optimized_result
     */
    dnx_data_elk_application_optimized_result_get_f optimized_result_get;
    /**
     * returns numeric data of split_rpf
     */
    dnx_data_elk_application_split_rpf_get_f split_rpf_get;
    /**
     * returns numeric data of thread_safety
     */
    dnx_data_elk_application_thread_safety_get_f thread_safety_get;
    /**
     * returns numeric data of ipv4_large_mc_enable
     */
    dnx_data_elk_application_ipv4_large_mc_enable_get_f ipv4_large_mc_enable_get;
    /**
     * returns numeric data of ipv6_large_mc_enable
     */
    dnx_data_elk_application_ipv6_large_mc_enable_get_f ipv6_large_mc_enable_get;
    /**
     * returns numeric data of ipv4_mc_hash_table_size
     */
    dnx_data_elk_application_ipv4_mc_hash_table_size_get_f ipv4_mc_hash_table_size_get;
    /**
     * returns numeric data of ipv6_mc_hash_table_size
     */
    dnx_data_elk_application_ipv6_mc_hash_table_size_get_f ipv6_mc_hash_table_size_get;
    /**
     * returns numeric data of ipv4_mc_table_size
     */
    dnx_data_elk_application_ipv4_mc_table_size_get_f ipv4_mc_table_size_get;
    /**
     * returns numeric data of ipv6_mc_table_size
     */
    dnx_data_elk_application_ipv6_mc_table_size_get_f ipv6_mc_table_size_get;
    /**
     * get table db_property entry 
     */
    dnx_data_elk_application_db_property_get_f db_property_get;
    /**
     * get general info table about table (for example key size)db_property info
     */
    dnxc_data_table_info_get_f db_property_info_get;
} dnx_data_if_elk_application_t;

/*
 * }
 */

/*
 * SUBMODULE  - CONNECTIVITY:
 * ELK connectivity parameters.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule connectivity table ilkn_reverse
 * Table info:
 * External lookup (elk) ILKN lanes swap
 */
typedef struct
{
    /**
     * If set, reverse the lanes numbering order on elk device side
     */
    uint32 reverse;
} dnx_data_elk_connectivity_ilkn_reverse_t;

/**
 * \brief Holds values of submodule connectivity table topology
 * Table info:
 * KBP to Jericho connection topology.
 */
typedef struct
{
    /**
     * Start lane number for each kbp port.
     */
    uint32 start_lane[DNX_DATA_MAX_ELK_GENERAL_MAX_PORTS];
    /**
     * KBP port to Jericho2 core mapping.
     */
    uint32 port_core_mapping[DNX_DATA_MAX_ELK_GENERAL_MAX_PORTS];
} dnx_data_elk_connectivity_topology_t;

/**
 * \brief Holds values of submodule connectivity table kbp_serdes_tx_taps
 * Table info:
 * PHY TX tap configuration on KBP side per device
 */
typedef struct
{
    /**
     * Tx fir pre tap
     */
    int pre;
    /**
     * Tx fir main tap
     */
    int main;
    /**
     * Tx fir post tap
     */
    int post;
    /**
     * Tx fir pre2 tap
     */
    int pre2;
    /**
     * Tx fir post2 tap
     */
    int post2;
    /**
     * Tx fir post3 tap
     */
    int post3;
    /**
     * TXFIR Tap Enable Enum
     */
    enum kbp_blackhawk_tsc_txfir_tap_enable_enum txfir_tap_enable;
} dnx_data_elk_connectivity_kbp_serdes_tx_taps_t;

/**
 * \brief Holds values of submodule connectivity table kbp_lane_serdes_tx_taps
 * Table info:
 * PHY TX tap configuration on KBP side per lane
 */
typedef struct
{
    /**
     * Tx fir pre tap
     */
    int pre;
    /**
     * Tx fir main tap
     */
    int main;
    /**
     * Tx fir post tap
     */
    int post;
    /**
     * Tx fir pre2 tap
     */
    int pre2;
    /**
     * Tx fir post2 tap
     */
    int post2;
    /**
     * Tx fir post3 tap
     */
    int post3;
    /**
     * TXFIR Tap Enable Enum
     */
    enum kbp_blackhawk_tsc_txfir_tap_enable_enum txfir_tap_enable;
} dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * KBP Blackhole mode enabled
     */
    dnx_data_elk_connectivity_blackhole,

    /**
     * Must be last one!
     */
    _dnx_data_elk_connectivity_feature_nof
} dnx_data_elk_connectivity_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_elk_connectivity_feature_get_f) (
    int unit,
    dnx_data_elk_connectivity_feature_e feature);

/**
 * \brief returns numeric data of connect_mode
 * Module - 'elk', Submodule - 'connectivity', data - 'connect_mode'
 * External Tcam connect mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     connect_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_connectivity_connect_mode_get_f) (
    int unit);

/**
 * \brief returns numeric data of mdio_id
 * Module - 'elk', Submodule - 'connectivity', data - 'mdio_id'
 * KBP MDIO ID.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdio_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_connectivity_mdio_id_get_f) (
    int unit);

/**
 * \brief get table ilkn_reverse entry 
 * External lookup (elk) ILKN lanes swap
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - port id elk device side
 * 
 * \return
 *     ilkn_reverse - returns the relevant entry values grouped in struct - see dnx_data_elk_connectivity_ilkn_reverse_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_elk_connectivity_ilkn_reverse_t *(
    *dnx_data_elk_connectivity_ilkn_reverse_get_f) (
    int unit,
    int ilkn_id);

/**
 * \brief get table topology entry 
 * KBP to Jericho connection topology.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     topology - returns the relevant entry values grouped in struct - see dnx_data_elk_connectivity_topology_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_elk_connectivity_topology_t *(
    *dnx_data_elk_connectivity_topology_get_f) (
    int unit);

/**
 * \brief get table kbp_serdes_tx_taps entry 
 * PHY TX tap configuration on KBP side per device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     kbp_serdes_tx_taps - returns the relevant entry values grouped in struct - see dnx_data_elk_connectivity_kbp_serdes_tx_taps_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_elk_connectivity_kbp_serdes_tx_taps_t *(
    *dnx_data_elk_connectivity_kbp_serdes_tx_taps_get_f) (
    int unit);

/**
 * \brief get table kbp_lane_serdes_tx_taps entry 
 * PHY TX tap configuration on KBP side per lane
 * 
 * \param [in] unit - unit #
 * \param [in] lane_id - lane id on KBP side
 * 
 * \return
 *     kbp_lane_serdes_tx_taps - returns the relevant entry values grouped in struct - see dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_t *(
    *dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_get_f) (
    int unit,
    int lane_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ELK - CONNECTIVITY:
 * {
 */
/**
 * \brief Interface for elk connectivity data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_elk_connectivity_feature_get_f feature_get;
    /**
     * returns numeric data of connect_mode
     */
    dnx_data_elk_connectivity_connect_mode_get_f connect_mode_get;
    /**
     * returns numeric data of mdio_id
     */
    dnx_data_elk_connectivity_mdio_id_get_f mdio_id_get;
    /**
     * get table ilkn_reverse entry 
     */
    dnx_data_elk_connectivity_ilkn_reverse_get_f ilkn_reverse_get;
    /**
     * get general info table about table (for example key size)ilkn_reverse info
     */
    dnxc_data_table_info_get_f ilkn_reverse_info_get;
    /**
     * get table topology entry 
     */
    dnx_data_elk_connectivity_topology_get_f topology_get;
    /**
     * get general info table about table (for example key size)topology info
     */
    dnxc_data_table_info_get_f topology_info_get;
    /**
     * get table kbp_serdes_tx_taps entry 
     */
    dnx_data_elk_connectivity_kbp_serdes_tx_taps_get_f kbp_serdes_tx_taps_get;
    /**
     * get general info table about table (for example key size)kbp_serdes_tx_taps info
     */
    dnxc_data_table_info_get_f kbp_serdes_tx_taps_info_get;
    /**
     * get table kbp_lane_serdes_tx_taps entry 
     */
    dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_get_f kbp_lane_serdes_tx_taps_get;
    /**
     * get general info table about table (for example key size)kbp_lane_serdes_tx_taps info
     */
    dnxc_data_table_info_get_f kbp_lane_serdes_tx_taps_info_get;
} dnx_data_if_elk_connectivity_t;

/*
 * }
 */

/*
 * SUBMODULE  - RECOVERY:
 * ELK general data.
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_elk_recovery_feature_nof
} dnx_data_elk_recovery_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_elk_recovery_feature_get_f) (
    int unit,
    dnx_data_elk_recovery_feature_e feature);

/**
 * \brief returns numeric data of enable
 * Module - 'elk', Submodule - 'recovery', data - 'enable'
 * Enable the KBP recovery sequence.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_recovery_enable_get_f) (
    int unit);

/**
 * \brief returns numeric data of iteration
 * Module - 'elk', Submodule - 'recovery', data - 'iteration'
 * KBP recovery iteration.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     iteration - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_elk_recovery_iteration_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ELK - RECOVERY:
 * {
 */
/**
 * \brief Interface for elk recovery data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_elk_recovery_feature_get_f feature_get;
    /**
     * returns numeric data of enable
     */
    dnx_data_elk_recovery_enable_get_f enable_get;
    /**
     * returns numeric data of iteration
     */
    dnx_data_elk_recovery_iteration_get_f iteration_get;
} dnx_data_if_elk_recovery_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_ELK:
 * {
 */
/**
 * \brief Interface for elk data
 */
typedef struct
{
    /**
     * Interface for elk general data
     */
    dnx_data_if_elk_general_t general;
    /**
     * Interface for elk application data
     */
    dnx_data_if_elk_application_t application;
    /**
     * Interface for elk connectivity data
     */
    dnx_data_if_elk_connectivity_t connectivity;
    /**
     * Interface for elk recovery data
     */
    dnx_data_if_elk_recovery_t recovery;
} dnx_data_if_elk_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_elk_t dnx_data_elk;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_ELK_H_*/
/* *INDENT-ON* */
