/** \file dnx_data_stack.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_STACK_H_
/*{*/
#define _DNX_DATA_STACK_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_stack.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_stack
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_stack_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * stack module general attributes
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_stack_general_feature_nof
} dnx_data_stack_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_stack_general_feature_get_f) (
    int unit,
    dnx_data_stack_general_feature_e feature);

/**
 * \brief returns define data of nof_tm_domains_max
 * Module - 'stack', Submodule - 'general', data - 'nof_tm_domains_max'
 * Max number of TM domains in the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_tm_domains_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_nof_tm_domains_max_get_f) (
    int unit);

/**
 * \brief returns define data of dest_port_base_queue_min
 * Module - 'stack', Submodule - 'general', data - 'dest_port_base_queue_min'
 * Min base queue value for stacking destination system port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dest_port_base_queue_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_dest_port_base_queue_min_get_f) (
    int unit);

/**
 * \brief returns define data of dest_port_base_queue_max
 * Module - 'stack', Submodule - 'general', data - 'dest_port_base_queue_max'
 * Max base queue value for stacking destination system port
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dest_port_base_queue_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_dest_port_base_queue_max_get_f) (
    int unit);

/**
 * \brief returns define data of lag_stack_trunk_resolve_entry_min
 * Module - 'stack', Submodule - 'general', data - 'lag_stack_trunk_resolve_entry_min'
 * Min entry for stack trunk resolve on stack lag
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lag_stack_trunk_resolve_entry_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_lag_stack_trunk_resolve_entry_min_get_f) (
    int unit);

/**
 * \brief returns define data of lag_stack_trunk_resolve_entry_max
 * Module - 'stack', Submodule - 'general', data - 'lag_stack_trunk_resolve_entry_max'
 * Max entry for stack trunk resolve on stack lag
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lag_stack_trunk_resolve_entry_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_lag_stack_trunk_resolve_entry_max_get_f) (
    int unit);

/**
 * \brief returns define data of lag_stack_trunk_resolve_entry_all
 * Module - 'stack', Submodule - 'general', data - 'lag_stack_trunk_resolve_entry_all'
 * All entries for stack trunk resolve on stack lag
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lag_stack_trunk_resolve_entry_all - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_lag_stack_trunk_resolve_entry_all_get_f) (
    int unit);

/**
 * \brief returns define data of lag_stack_fec_resolve_entry_min
 * Module - 'stack', Submodule - 'general', data - 'lag_stack_fec_resolve_entry_min'
 * Min entry for stack fec resolve on stack lag
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lag_stack_fec_resolve_entry_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_lag_stack_fec_resolve_entry_min_get_f) (
    int unit);

/**
 * \brief returns define data of lag_stack_fec_resolve_entry_max
 * Module - 'stack', Submodule - 'general', data - 'lag_stack_fec_resolve_entry_max'
 * Max entry for stack fec resolve on stack lag
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lag_stack_fec_resolve_entry_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_lag_stack_fec_resolve_entry_max_get_f) (
    int unit);

/**
 * \brief returns define data of lag_stack_fec_resolve_entry_all
 * Module - 'stack', Submodule - 'general', data - 'lag_stack_fec_resolve_entry_all'
 * All entries for stack fec resolve on stack lag
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lag_stack_fec_resolve_entry_all - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_lag_stack_fec_resolve_entry_all_get_f) (
    int unit);

/**
 * \brief returns define data of lag_domain_min
 * Module - 'stack', Submodule - 'general', data - 'lag_domain_min'
 * Min value for stack lag tm-domain
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lag_domain_min - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_lag_domain_min_get_f) (
    int unit);

/**
 * \brief returns define data of lag_domain_max
 * Module - 'stack', Submodule - 'general', data - 'lag_domain_max'
 * Max value for stack lag tm-domain
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lag_domain_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_lag_domain_max_get_f) (
    int unit);

/**
 * \brief returns define data of trunk_entry_per_tmd_bit_num
 * Module - 'stack', Submodule - 'general', data - 'trunk_entry_per_tmd_bit_num'
 * trunk entry per tmd bit number on stack lag
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trunk_entry_per_tmd_bit_num - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_trunk_entry_per_tmd_bit_num_get_f) (
    int unit);

/**
 * \brief returns numeric data of stacking_enable
 * Module - 'stack', Submodule - 'general', data - 'stacking_enable'
 * is stacking enabled on this device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stacking_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_stack_general_stacking_enable_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_STACK - GENERAL:
 * {
 */
/**
 * \brief Interface for stack general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_stack_general_feature_get_f feature_get;
    /**
     * returns define data of nof_tm_domains_max
     */
    dnx_data_stack_general_nof_tm_domains_max_get_f nof_tm_domains_max_get;
    /**
     * returns define data of dest_port_base_queue_min
     */
    dnx_data_stack_general_dest_port_base_queue_min_get_f dest_port_base_queue_min_get;
    /**
     * returns define data of dest_port_base_queue_max
     */
    dnx_data_stack_general_dest_port_base_queue_max_get_f dest_port_base_queue_max_get;
    /**
     * returns define data of lag_stack_trunk_resolve_entry_min
     */
    dnx_data_stack_general_lag_stack_trunk_resolve_entry_min_get_f lag_stack_trunk_resolve_entry_min_get;
    /**
     * returns define data of lag_stack_trunk_resolve_entry_max
     */
    dnx_data_stack_general_lag_stack_trunk_resolve_entry_max_get_f lag_stack_trunk_resolve_entry_max_get;
    /**
     * returns define data of lag_stack_trunk_resolve_entry_all
     */
    dnx_data_stack_general_lag_stack_trunk_resolve_entry_all_get_f lag_stack_trunk_resolve_entry_all_get;
    /**
     * returns define data of lag_stack_fec_resolve_entry_min
     */
    dnx_data_stack_general_lag_stack_fec_resolve_entry_min_get_f lag_stack_fec_resolve_entry_min_get;
    /**
     * returns define data of lag_stack_fec_resolve_entry_max
     */
    dnx_data_stack_general_lag_stack_fec_resolve_entry_max_get_f lag_stack_fec_resolve_entry_max_get;
    /**
     * returns define data of lag_stack_fec_resolve_entry_all
     */
    dnx_data_stack_general_lag_stack_fec_resolve_entry_all_get_f lag_stack_fec_resolve_entry_all_get;
    /**
     * returns define data of lag_domain_min
     */
    dnx_data_stack_general_lag_domain_min_get_f lag_domain_min_get;
    /**
     * returns define data of lag_domain_max
     */
    dnx_data_stack_general_lag_domain_max_get_f lag_domain_max_get;
    /**
     * returns define data of trunk_entry_per_tmd_bit_num
     */
    dnx_data_stack_general_trunk_entry_per_tmd_bit_num_get_f trunk_entry_per_tmd_bit_num_get;
    /**
     * returns numeric data of stacking_enable
     */
    dnx_data_stack_general_stacking_enable_get_f stacking_enable_get;
} dnx_data_if_stack_general_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_STACK:
 * {
 */
/**
 * \brief Interface for stack data
 */
typedef struct
{
    /**
     * Interface for stack general data
     */
    dnx_data_if_stack_general_t general;
} dnx_data_if_stack_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_stack_t dnx_data_stack;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_STACK_H_*/
/* *INDENT-ON* */
