/** \file dnx_data_qos.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_QOS_H_
/*{*/
#define _DNX_DATA_QOS_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_qos.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_qos
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_qos_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - QOS:
 * QOS data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * ecn 1 bit for L4S
     */
    dnx_data_qos_qos_ecn_L4S,
    /**
     * Enable configuration of QOS var type map
     */
    dnx_data_qos_qos_qos_var_type_map_enable,

    /**
     * Must be last one!
     */
    _dnx_data_qos_qos_feature_nof
} dnx_data_qos_qos_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_qos_qos_feature_get_f) (
    int unit,
    dnx_data_qos_qos_feature_e feature);

/**
 * \brief returns define data of nof_ingress_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_profiles'
 * Number of ingress qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_ingress_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ingress_opcode_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_opcode_profiles'
 * Number of ingress opcode qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_opcode_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_ingress_opcode_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ingress_ecn_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_ecn_profiles'
 * Number of ingress ecn qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_ecn_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_ingress_ecn_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ingress_policer_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_policer_profiles'
 * Number of ingress policer qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_policer_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_ingress_policer_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ingress_vlan_pcp_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_vlan_pcp_profiles'
 * Number of ingress vlan pcp qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_vlan_pcp_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_ingress_vlan_pcp_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egress_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_profiles'
 * Number of egress qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_egress_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egress_policer_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_policer_profiles'
 * Number of egress policer qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_policer_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_egress_policer_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egress_mpls_php_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_mpls_php_profiles'
 * Number of egress mpls php qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_mpls_php_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_egress_mpls_php_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egress_opcode_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_opcode_profiles'
 * Number of egress opcode qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_opcode_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_egress_opcode_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egress_php_opcode_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_php_opcode_profiles'
 * Number of egress php opcode qos prfiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_php_opcode_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_egress_php_opcode_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egress_ttl_pipe_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_ttl_pipe_profiles'
 * Number of egress ttl qos pipe profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_ttl_pipe_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_egress_ttl_pipe_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ingress_propagation_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_propagation_profiles'
 * Number of propagation profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_propagation_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_ingress_propagation_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_ingress_ecn_opcode_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_ingress_ecn_opcode_profiles'
 * Number of ingress ecn opcode profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ingress_ecn_opcode_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_ingress_ecn_opcode_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egress_network_qos_pipe_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_network_qos_pipe_profiles'
 * Number of network_qos profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_network_qos_pipe_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_egress_network_qos_pipe_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of nof_egress_cos_profiles
 * Module - 'qos', Submodule - 'qos', data - 'nof_egress_cos_profiles'
 * Number of egress cos profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_egress_cos_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_nof_egress_cos_profiles_get_f) (
    int unit);

/**
 * \brief returns define data of packet_max_priority
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_priority'
 * QOS Max priority for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_priority - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_packet_max_priority_get_f) (
    int unit);

/**
 * \brief returns define data of packet_max_exp
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_exp'
 * QOS Max exp for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_exp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_packet_max_exp_get_f) (
    int unit);

/**
 * \brief returns define data of packet_max_dscp
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_dscp'
 * QOS Max dscp for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_dscp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_packet_max_dscp_get_f) (
    int unit);

/**
 * \brief returns define data of packet_max_cfi
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_cfi'
 * QOS Max cfi for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_cfi - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_packet_max_cfi_get_f) (
    int unit);

/**
 * \brief returns define data of packet_max_tc
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_tc'
 * QOS Max tc for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_tc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_packet_max_tc_get_f) (
    int unit);

/**
 * \brief returns define data of packet_max_dp
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_dp'
 * QOS Max dp for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_dp - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_packet_max_dp_get_f) (
    int unit);

/**
 * \brief returns define data of packet_max_ecn
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_ecn'
 * QOS Max ecn for packet
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_ecn - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_packet_max_ecn_get_f) (
    int unit);

/**
 * \brief returns define data of packet_max_egress_policer_offset
 * Module - 'qos', Submodule - 'qos', data - 'packet_max_egress_policer_offset'
 * QOS egress policer max offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_max_egress_policer_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_packet_max_egress_policer_offset_get_f) (
    int unit);

/**
 * \brief returns define data of max_int_map_id
 * Module - 'qos', Submodule - 'qos', data - 'max_int_map_id'
 * QOS Max int map id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_int_map_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_max_int_map_id_get_f) (
    int unit);

/**
 * \brief returns define data of max_egress_var
 * Module - 'qos', Submodule - 'qos', data - 'max_egress_var'
 * QOS Max egress var
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_egress_var - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_max_egress_var_get_f) (
    int unit);

/**
 * \brief returns define data of ecn_bits_width
 * Module - 'qos', Submodule - 'qos', data - 'ecn_bits_width'
 * QOS ecn bits width
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecn_bits_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_ecn_bits_width_get_f) (
    int unit);

/**
 * \brief returns numeric data of routing_dscp_preserve_mode
 * Module - 'qos', Submodule - 'qos', data - 'routing_dscp_preserve_mode'
 * DSCP preserve modes in routing case.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     routing_dscp_preserve_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_qos_routing_dscp_preserve_mode_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_QOS - QOS:
 * {
 */
/**
 * \brief Interface for qos qos data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_qos_qos_feature_get_f feature_get;
    /**
     * returns define data of nof_ingress_profiles
     */
    dnx_data_qos_qos_nof_ingress_profiles_get_f nof_ingress_profiles_get;
    /**
     * returns define data of nof_ingress_opcode_profiles
     */
    dnx_data_qos_qos_nof_ingress_opcode_profiles_get_f nof_ingress_opcode_profiles_get;
    /**
     * returns define data of nof_ingress_ecn_profiles
     */
    dnx_data_qos_qos_nof_ingress_ecn_profiles_get_f nof_ingress_ecn_profiles_get;
    /**
     * returns define data of nof_ingress_policer_profiles
     */
    dnx_data_qos_qos_nof_ingress_policer_profiles_get_f nof_ingress_policer_profiles_get;
    /**
     * returns define data of nof_ingress_vlan_pcp_profiles
     */
    dnx_data_qos_qos_nof_ingress_vlan_pcp_profiles_get_f nof_ingress_vlan_pcp_profiles_get;
    /**
     * returns define data of nof_egress_profiles
     */
    dnx_data_qos_qos_nof_egress_profiles_get_f nof_egress_profiles_get;
    /**
     * returns define data of nof_egress_policer_profiles
     */
    dnx_data_qos_qos_nof_egress_policer_profiles_get_f nof_egress_policer_profiles_get;
    /**
     * returns define data of nof_egress_mpls_php_profiles
     */
    dnx_data_qos_qos_nof_egress_mpls_php_profiles_get_f nof_egress_mpls_php_profiles_get;
    /**
     * returns define data of nof_egress_opcode_profiles
     */
    dnx_data_qos_qos_nof_egress_opcode_profiles_get_f nof_egress_opcode_profiles_get;
    /**
     * returns define data of nof_egress_php_opcode_profiles
     */
    dnx_data_qos_qos_nof_egress_php_opcode_profiles_get_f nof_egress_php_opcode_profiles_get;
    /**
     * returns define data of nof_egress_ttl_pipe_profiles
     */
    dnx_data_qos_qos_nof_egress_ttl_pipe_profiles_get_f nof_egress_ttl_pipe_profiles_get;
    /**
     * returns define data of nof_ingress_propagation_profiles
     */
    dnx_data_qos_qos_nof_ingress_propagation_profiles_get_f nof_ingress_propagation_profiles_get;
    /**
     * returns define data of nof_ingress_ecn_opcode_profiles
     */
    dnx_data_qos_qos_nof_ingress_ecn_opcode_profiles_get_f nof_ingress_ecn_opcode_profiles_get;
    /**
     * returns define data of nof_egress_network_qos_pipe_profiles
     */
    dnx_data_qos_qos_nof_egress_network_qos_pipe_profiles_get_f nof_egress_network_qos_pipe_profiles_get;
    /**
     * returns define data of nof_egress_cos_profiles
     */
    dnx_data_qos_qos_nof_egress_cos_profiles_get_f nof_egress_cos_profiles_get;
    /**
     * returns define data of packet_max_priority
     */
    dnx_data_qos_qos_packet_max_priority_get_f packet_max_priority_get;
    /**
     * returns define data of packet_max_exp
     */
    dnx_data_qos_qos_packet_max_exp_get_f packet_max_exp_get;
    /**
     * returns define data of packet_max_dscp
     */
    dnx_data_qos_qos_packet_max_dscp_get_f packet_max_dscp_get;
    /**
     * returns define data of packet_max_cfi
     */
    dnx_data_qos_qos_packet_max_cfi_get_f packet_max_cfi_get;
    /**
     * returns define data of packet_max_tc
     */
    dnx_data_qos_qos_packet_max_tc_get_f packet_max_tc_get;
    /**
     * returns define data of packet_max_dp
     */
    dnx_data_qos_qos_packet_max_dp_get_f packet_max_dp_get;
    /**
     * returns define data of packet_max_ecn
     */
    dnx_data_qos_qos_packet_max_ecn_get_f packet_max_ecn_get;
    /**
     * returns define data of packet_max_egress_policer_offset
     */
    dnx_data_qos_qos_packet_max_egress_policer_offset_get_f packet_max_egress_policer_offset_get;
    /**
     * returns define data of max_int_map_id
     */
    dnx_data_qos_qos_max_int_map_id_get_f max_int_map_id_get;
    /**
     * returns define data of max_egress_var
     */
    dnx_data_qos_qos_max_egress_var_get_f max_egress_var_get;
    /**
     * returns define data of ecn_bits_width
     */
    dnx_data_qos_qos_ecn_bits_width_get_f ecn_bits_width_get;
    /**
     * returns numeric data of routing_dscp_preserve_mode
     */
    dnx_data_qos_qos_routing_dscp_preserve_mode_get_f routing_dscp_preserve_mode_get;
} dnx_data_if_qos_qos_t;

/*
 * }
 */

/*
 * SUBMODULE  - HW_BUG:
 * qos related HW update
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * enabler map table for remarking egress forward header
     */
    dnx_data_qos_hw_bug_egress_remark_or_keep_enabler,
    /**
     * eve pcp source at fwd stage is different with encap stage
     */
    dnx_data_qos_hw_bug_fwd_eve_pcp_diff_encap,
    /**
     * phb and remark FFCs extend 1 bit each for field_size and key_offset
     */
    dnx_data_qos_hw_bug_phb_rm_ffc_extend,

    /**
     * Must be last one!
     */
    _dnx_data_qos_hw_bug_feature_nof
} dnx_data_qos_hw_bug_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_qos_hw_bug_feature_get_f) (
    int unit,
    dnx_data_qos_hw_bug_feature_e feature);

/**
 * \brief returns define data of phb_rm_ffc_bits_width
 * Module - 'qos', Submodule - 'hw_bug', data - 'phb_rm_ffc_bits_width'
 * phb and remark ffc bits width
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     phb_rm_ffc_bits_width - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_qos_hw_bug_phb_rm_ffc_bits_width_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_QOS - HW_BUG:
 * {
 */
/**
 * \brief Interface for qos hw_bug data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_qos_hw_bug_feature_get_f feature_get;
    /**
     * returns define data of phb_rm_ffc_bits_width
     */
    dnx_data_qos_hw_bug_phb_rm_ffc_bits_width_get_f phb_rm_ffc_bits_width_get;
} dnx_data_if_qos_hw_bug_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_QOS:
 * {
 */
/**
 * \brief Interface for qos data
 */
typedef struct
{
    /**
     * Interface for qos qos data
     */
    dnx_data_if_qos_qos_t qos;
    /**
     * Interface for qos hw_bug data
     */
    dnx_data_if_qos_hw_bug_t hw_bug;
} dnx_data_if_qos_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_qos_t dnx_data_qos;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_QOS_H_*/
/* *INDENT-ON* */
