/** \file dnx_data_switch.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_SWITCH_H_
/*{*/
#define _DNX_DATA_SWITCH_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_switch.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_switch
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_switch_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - LOAD_BALANCING:
 * Definitions related to load balancing on L2 and L3.
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule load_balancing table lb_clients
 * Table info:
 * Given hw identifier ('client id') get the corresponding logical client name, from 'bcm_switch_control_t'.
 */
typedef struct
{
    /**
     * Corresponding logical identifier of client (value taken from 'bcm_switch_control_t')
     */
    int client_logical_id;
} dnx_data_switch_load_balancing_lb_clients_t;

/**
 * \brief Holds values of submodule load_balancing table lb_client_crc
 * Table info:
 * Define default CRC hash function selection (bcm_switch_hash_config_t) based on hw identifier.
 */
typedef struct
{
    /**
     * Default hashing function for identifier of client
     */
    int crc_hash_func;
} dnx_data_switch_load_balancing_lb_client_crc_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_switch_load_balancing_feature_nof
} dnx_data_switch_load_balancing_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_switch_load_balancing_feature_get_f) (
    int unit,
    dnx_data_switch_load_balancing_feature_e feature);

/**
 * \brief returns define data of nof_lb_clients
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_lb_clients'
 * Number of load balancing clients (users of CRC functions)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lb_clients - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_nof_lb_clients_get_f) (
    int unit);

/**
 * \brief returns define data of nof_lb_crc_sel_tcam_entries
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_lb_crc_sel_tcam_entries'
 * Number of entries on IPPB_LOAD_BALANCING_CRC_SELECTION_CAM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_lb_crc_sel_tcam_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_nof_lb_crc_sel_tcam_entries_get_f) (
    int unit);

/**
 * \brief returns define data of nof_crc_functions
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_crc_functions'
 * Number of crc functions available for 'load balancing'
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_crc_functions - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_nof_crc_functions_get_f) (
    int unit);

/**
 * \brief returns define data of initial_reserved_label
 * Module - 'switch', Submodule - 'load_balancing', data - 'initial_reserved_label'
 * Bitmap. Each bit indicates the corresponding reserved label is to be                         included into load balancing calculation
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     initial_reserved_label - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_initial_reserved_label_get_f) (
    int unit);

/**
 * \brief returns define data of initial_reserved_label_force
 * Module - 'switch', Submodule - 'load_balancing', data - 'initial_reserved_label_force'
 * Bitmap. Each bit indicates the corresponding reserved label is to be                         forced into load balancing calculation even if it was terminated
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     initial_reserved_label_force - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_initial_reserved_label_force_get_f) (
    int unit);

/**
 * \brief returns define data of initial_reserved_next_label
 * Module - 'switch', Submodule - 'load_balancing', data - 'initial_reserved_next_label'
 * Bitmap. Each bit indicates whether label following correponding reserved label                         is to be forced into load balancing calculation even if it was terminated
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     initial_reserved_next_label - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_initial_reserved_next_label_get_f) (
    int unit);

/**
 * \brief returns define data of initial_reserved_next_label_valid
 * Module - 'switch', Submodule - 'load_balancing', data - 'initial_reserved_next_label_valid'
 * Bitmap. Currently redundant. Should be equal to 'initial_reserved_next_label' 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     initial_reserved_next_label_valid - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_initial_reserved_next_label_valid_get_f) (
    int unit);

/**
 * \brief returns define data of reserved_next_label_valid
 * Module - 'switch', Submodule - 'load_balancing', data - 'reserved_next_label_valid'
 * Indicate whether the field reserved_next_label_valid exists
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     reserved_next_label_valid - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_reserved_next_label_valid_get_f) (
    int unit);

/**
 * \brief returns define data of num_valid_mpls_protocols
 * Module - 'switch', Submodule - 'load_balancing', data - 'num_valid_mpls_protocols'
 * Number of supported MPLS protocols in dbal_enum_value_field_current_protocol_type_e
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_valid_mpls_protocols - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_num_valid_mpls_protocols_get_f) (
    int unit);

/**
 * \brief returns define data of nof_layer_records_from_parser
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_layer_records_from_parser'
 * Number of 32-bits layer records, cretaed by parser, which are used for hashing on load balancing
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_layer_records_from_parser - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_nof_layer_records_from_parser_get_f) (
    int unit);

/**
 * \brief returns define data of nof_seeds_per_crc_function
 * Module - 'switch', Submodule - 'load_balancing', data - 'nof_seeds_per_crc_function'
 * Number of crc seeds that may be selected per crc function on load balancing
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_seeds_per_crc_function - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_nof_seeds_per_crc_function_get_f) (
    int unit);

/**
 * \brief returns define data of hashing_selection_per_layer
 * Module - 'switch', Submodule - 'load_balancing', data - 'hashing_selection_per_layer'
 * Indicate whether the functionality of using the LB key in hashing per layer is enabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     hashing_selection_per_layer - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_hashing_selection_per_layer_get_f) (
    int unit);

/**
 * \brief returns define data of mpls_stack_split_hashing
 * Module - 'switch', Submodule - 'load_balancing', data - 'mpls_stack_split_hashing'
 * Indicate whether the MPLS stacks are split in two - terminated and non-terminated.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mpls_stack_split_hashing - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_load_balancing_mpls_stack_split_hashing_get_f) (
    int unit);

/**
 * \brief get table lb_clients entry 
 * Given hw identifier ('client id') get the corresponding logical client name, from 'bcm_switch_control_t'.
 * 
 * \param [in] unit - unit #
 * \param [in] client_hw_id - Hw identifier of load-balancing client. See table LOAD_BALANCING_CRC_SELECTION_CAM (IPPB_LOAD_BALANCING_CRC_SELECTION_CAM)
 * 
 * \return
 *     lb_clients - returns the relevant entry values grouped in struct - see dnx_data_switch_load_balancing_lb_clients_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_switch_load_balancing_lb_clients_t *(
    *dnx_data_switch_load_balancing_lb_clients_get_f) (
    int unit,
    int client_hw_id);

/**
 * \brief get table lb_client_crc entry 
 * Define default CRC hash function selection (bcm_switch_hash_config_t) based on hw identifier.
 * 
 * \param [in] unit - unit #
 * \param [in] client_hw_id - Hw identifier of load-balancing client. See table LOAD_BALANCING_CRC_SELECTION_CAM (IPPB_LOAD_BALANCING_CRC_SELECTION_CAM)
 * 
 * \return
 *     lb_client_crc - returns the relevant entry values grouped in struct - see dnx_data_switch_load_balancing_lb_client_crc_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_switch_load_balancing_lb_client_crc_t *(
    *dnx_data_switch_load_balancing_lb_client_crc_get_f) (
    int unit,
    int client_hw_id);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SWITCH - LOAD_BALANCING:
 * {
 */
/**
 * \brief Interface for switch load_balancing data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_switch_load_balancing_feature_get_f feature_get;
    /**
     * returns define data of nof_lb_clients
     */
    dnx_data_switch_load_balancing_nof_lb_clients_get_f nof_lb_clients_get;
    /**
     * returns define data of nof_lb_crc_sel_tcam_entries
     */
    dnx_data_switch_load_balancing_nof_lb_crc_sel_tcam_entries_get_f nof_lb_crc_sel_tcam_entries_get;
    /**
     * returns define data of nof_crc_functions
     */
    dnx_data_switch_load_balancing_nof_crc_functions_get_f nof_crc_functions_get;
    /**
     * returns define data of initial_reserved_label
     */
    dnx_data_switch_load_balancing_initial_reserved_label_get_f initial_reserved_label_get;
    /**
     * returns define data of initial_reserved_label_force
     */
    dnx_data_switch_load_balancing_initial_reserved_label_force_get_f initial_reserved_label_force_get;
    /**
     * returns define data of initial_reserved_next_label
     */
    dnx_data_switch_load_balancing_initial_reserved_next_label_get_f initial_reserved_next_label_get;
    /**
     * returns define data of initial_reserved_next_label_valid
     */
    dnx_data_switch_load_balancing_initial_reserved_next_label_valid_get_f initial_reserved_next_label_valid_get;
    /**
     * returns define data of reserved_next_label_valid
     */
    dnx_data_switch_load_balancing_reserved_next_label_valid_get_f reserved_next_label_valid_get;
    /**
     * returns define data of num_valid_mpls_protocols
     */
    dnx_data_switch_load_balancing_num_valid_mpls_protocols_get_f num_valid_mpls_protocols_get;
    /**
     * returns define data of nof_layer_records_from_parser
     */
    dnx_data_switch_load_balancing_nof_layer_records_from_parser_get_f nof_layer_records_from_parser_get;
    /**
     * returns define data of nof_seeds_per_crc_function
     */
    dnx_data_switch_load_balancing_nof_seeds_per_crc_function_get_f nof_seeds_per_crc_function_get;
    /**
     * returns define data of hashing_selection_per_layer
     */
    dnx_data_switch_load_balancing_hashing_selection_per_layer_get_f hashing_selection_per_layer_get;
    /**
     * returns define data of mpls_stack_split_hashing
     */
    dnx_data_switch_load_balancing_mpls_stack_split_hashing_get_f mpls_stack_split_hashing_get;
    /**
     * get table lb_clients entry 
     */
    dnx_data_switch_load_balancing_lb_clients_get_f lb_clients_get;
    /**
     * get general info table about table (for example key size)lb_clients info
     */
    dnxc_data_table_info_get_f lb_clients_info_get;
    /**
     * get table lb_client_crc entry 
     */
    dnx_data_switch_load_balancing_lb_client_crc_get_f lb_client_crc_get;
    /**
     * get general info table about table (for example key size)lb_client_crc info
     */
    dnxc_data_table_info_get_f lb_client_crc_info_get;
} dnx_data_if_switch_load_balancing_t;

/*
 * }
 */

/*
 * SUBMODULE  - SVTAG:
 * Definitions related to the SVTAG.
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_switch_svtag_feature_nof
} dnx_data_switch_svtag_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_switch_svtag_feature_get_f) (
    int unit,
    dnx_data_switch_svtag_feature_e feature);

/**
 * \brief returns define data of supported
 * Module - 'switch', Submodule - 'svtag', data - 'supported'
 * Indicate if the SVTAG supported on the device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     supported - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_supported_get_f) (
    int unit);

/**
 * \brief returns define data of svtag_label_size_bits
 * Module - 'switch', Submodule - 'svtag', data - 'svtag_label_size_bits'
 * The size in bits of an SVTAG label
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     svtag_label_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_svtag_label_size_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_offset_addr_size_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_offset_addr_size_bits'
 * The size in bits of the offset addr on the egress svtag 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_offset_addr_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_offset_addr_size_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_offset_addr_position_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_offset_addr_position_bits'
 * The position in bits of the offset addr in the egress svtag 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_offset_addr_position_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_offset_addr_position_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_signature_size_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_signature_size_bits'
 * The size in bits of the signature on the egress svtag 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_signature_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_signature_size_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_signature_position_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_signature_position_bits'
 * The position in bits of the signature in the egress svtag 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_signature_position_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_signature_position_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_sci_size_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_sci_size_bits'
 * The size in bits of the SCI on the egress svtag 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_sci_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_sci_size_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_sci_position_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_sci_position_bits'
 * The position in bits of the SCI in the egress svtag 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_sci_position_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_sci_position_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_pkt_type_size_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_pkt_type_size_bits'
 * The size in bits of the packet type on the egress svtag 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_pkt_type_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_pkt_type_size_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_pkt_type_position_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_pkt_type_position_bits'
 * The position in bits of the packet type in the egress svtag 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_pkt_type_position_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_pkt_type_position_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_ipv6_indication_position_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_ipv6_indication_position_bits'
 * The position in bits of the IPv6 indication in the egress svtag 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_ipv6_indication_position_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_ipv6_indication_position_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_hw_field_position_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_hw_field_position_bits'
 * The position in bits of the SVTAG in the HW field.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_hw_field_position_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_hw_field_position_bits_get_f) (
    int unit);

/**
 * \brief returns define data of egress_svtag_accumulation_indication_hw_field_position_bits
 * Module - 'switch', Submodule - 'svtag', data - 'egress_svtag_accumulation_indication_hw_field_position_bits'
 * The HW field position in bits of the SVTAG accumulation indication.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egress_svtag_accumulation_indication_hw_field_position_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_egress_svtag_accumulation_indication_hw_field_position_bits_get_f) (
    int unit);

/**
 * \brief returns define data of UDP_dedicated_port
 * Module - 'switch', Submodule - 'svtag', data - 'UDP_dedicated_port'
 * The source and destination port value in case of a security tag over a UDP tunnel.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     UDP_dedicated_port - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_UDP_dedicated_port_get_f) (
    int unit);

/**
 * \brief returns define data of ingress_svtag_position_bytes
 * Module - 'switch', Submodule - 'svtag', data - 'ingress_svtag_position_bytes'
 * The ingress SVTAG position in bytes before it swapped to the beginning  of the packet.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ingress_svtag_position_bytes - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_switch_svtag_ingress_svtag_position_bytes_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SWITCH - SVTAG:
 * {
 */
/**
 * \brief Interface for switch svtag data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_switch_svtag_feature_get_f feature_get;
    /**
     * returns define data of supported
     */
    dnx_data_switch_svtag_supported_get_f supported_get;
    /**
     * returns define data of svtag_label_size_bits
     */
    dnx_data_switch_svtag_svtag_label_size_bits_get_f svtag_label_size_bits_get;
    /**
     * returns define data of egress_svtag_offset_addr_size_bits
     */
    dnx_data_switch_svtag_egress_svtag_offset_addr_size_bits_get_f egress_svtag_offset_addr_size_bits_get;
    /**
     * returns define data of egress_svtag_offset_addr_position_bits
     */
    dnx_data_switch_svtag_egress_svtag_offset_addr_position_bits_get_f egress_svtag_offset_addr_position_bits_get;
    /**
     * returns define data of egress_svtag_signature_size_bits
     */
    dnx_data_switch_svtag_egress_svtag_signature_size_bits_get_f egress_svtag_signature_size_bits_get;
    /**
     * returns define data of egress_svtag_signature_position_bits
     */
    dnx_data_switch_svtag_egress_svtag_signature_position_bits_get_f egress_svtag_signature_position_bits_get;
    /**
     * returns define data of egress_svtag_sci_size_bits
     */
    dnx_data_switch_svtag_egress_svtag_sci_size_bits_get_f egress_svtag_sci_size_bits_get;
    /**
     * returns define data of egress_svtag_sci_position_bits
     */
    dnx_data_switch_svtag_egress_svtag_sci_position_bits_get_f egress_svtag_sci_position_bits_get;
    /**
     * returns define data of egress_svtag_pkt_type_size_bits
     */
    dnx_data_switch_svtag_egress_svtag_pkt_type_size_bits_get_f egress_svtag_pkt_type_size_bits_get;
    /**
     * returns define data of egress_svtag_pkt_type_position_bits
     */
    dnx_data_switch_svtag_egress_svtag_pkt_type_position_bits_get_f egress_svtag_pkt_type_position_bits_get;
    /**
     * returns define data of egress_svtag_ipv6_indication_position_bits
     */
    dnx_data_switch_svtag_egress_svtag_ipv6_indication_position_bits_get_f egress_svtag_ipv6_indication_position_bits_get;
    /**
     * returns define data of egress_svtag_hw_field_position_bits
     */
    dnx_data_switch_svtag_egress_svtag_hw_field_position_bits_get_f egress_svtag_hw_field_position_bits_get;
    /**
     * returns define data of egress_svtag_accumulation_indication_hw_field_position_bits
     */
    dnx_data_switch_svtag_egress_svtag_accumulation_indication_hw_field_position_bits_get_f egress_svtag_accumulation_indication_hw_field_position_bits_get;
    /**
     * returns define data of UDP_dedicated_port
     */
    dnx_data_switch_svtag_UDP_dedicated_port_get_f UDP_dedicated_port_get;
    /**
     * returns define data of ingress_svtag_position_bytes
     */
    dnx_data_switch_svtag_ingress_svtag_position_bytes_get_f ingress_svtag_position_bytes_get;
} dnx_data_if_switch_svtag_t;

/*
 * }
 */

/*
 * SUBMODULE  - HW_BUG:
 * switch related hw bug
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * mpls labels content doesn't participate in the build of the LB keys.
     */
    dnx_data_switch_hw_bug_mpls_labels_included_in_hash,

    /**
     * Must be last one!
     */
    _dnx_data_switch_hw_bug_feature_nof
} dnx_data_switch_hw_bug_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_switch_hw_bug_feature_get_f) (
    int unit,
    dnx_data_switch_hw_bug_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SWITCH - HW_BUG:
 * {
 */
/**
 * \brief Interface for switch hw_bug data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_switch_hw_bug_feature_get_f feature_get;
} dnx_data_if_switch_hw_bug_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_SWITCH:
 * {
 */
/**
 * \brief Interface for switch data
 */
typedef struct
{
    /**
     * Interface for switch load_balancing data
     */
    dnx_data_if_switch_load_balancing_t load_balancing;
    /**
     * Interface for switch svtag data
     */
    dnx_data_if_switch_svtag_t svtag;
    /**
     * Interface for switch hw_bug data
     */
    dnx_data_if_switch_hw_bug_t hw_bug;
} dnx_data_if_switch_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_switch_t dnx_data_switch;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_SWITCH_H_*/
/* *INDENT-ON* */
