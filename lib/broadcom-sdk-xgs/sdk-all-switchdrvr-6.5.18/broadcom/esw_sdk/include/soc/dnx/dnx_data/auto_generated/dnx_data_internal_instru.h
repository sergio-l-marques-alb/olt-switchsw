/** \file dnx_data_internal_instru.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_INSTRU_H_
/*{*/
#define _DNX_DATA_INTERNAL_INSTRU_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_instru.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_instru_submodule_ipt,
    dnx_data_instru_submodule_sflow,
    dnx_data_instru_submodule_eventor,
    dnx_data_instru_submodule_synced_counters,

    /**
     * Must be last one!
     */
    _dnx_data_instru_submodule_nof
} dnx_data_instru_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE IPT:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_instru_ipt_feature_get(
    int unit,
    dnx_data_instru_ipt_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_ipt_define_nof
} dnx_data_instru_ipt_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_instru_ipt_table_profile_info,
    dnx_data_instru_ipt_table_metadata,

    /**
     * Must be last one!
     */
    _dnx_data_instru_ipt_table_nof
} dnx_data_instru_ipt_table_e;

/* Get Data */
/**
 * \brief get table profile_info entry 
 * per ipt profile information
 * 
 * \param [in] unit - unit #
 * \param [in] profile_id - profile index
 * 
 * \return
 *     profile_info - returns the relevant entry values grouped in struct - see dnx_data_instru_ipt_profile_info_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_instru_ipt_profile_info_t * dnx_data_instru_ipt_profile_info_get(
    int unit,
    int profile_id);

/**
 * \brief get table metadata entry 
 * Translate API metadata flag ID to HW values (bit index, size in bytes, etc...)
 * 
 * \param [in] unit - unit #
 * \param [in] flag_id - running index (API flag ID)
 * 
 * \return
 *     metadata - returns the relevant entry values grouped in struct - see dnx_data_instru_ipt_metadata_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_instru_ipt_metadata_t * dnx_data_instru_ipt_metadata_get(
    int unit,
    int flag_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'instru', Submodule - 'ipt', table - 'profile_info'
 * per ipt profile information
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_instru_ipt_profile_info_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'instru', Submodule - 'ipt', table - 'metadata'
 * Translate API metadata flag ID to HW values (bit index, size in bytes, etc...)
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_instru_ipt_metadata_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)profile_info info
 * per ipt profile information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     profile_info - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_instru_ipt_profile_info_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)metadata info
 * Translate API metadata flag ID to HW values (bit index, size in bytes, etc...)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     metadata - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_instru_ipt_metadata_info_get(
    int unit);

/*
 * SUBMODULE SFLOW:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_instru_sflow_feature_get(
    int unit,
    dnx_data_instru_sflow_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_instru_sflow_define_max_nof_sflow_encaps,
    dnx_data_instru_sflow_define_nof_sflow_raw_entries_per_stack,

    /**
     * Must be last one!
     */
    _dnx_data_instru_sflow_define_nof
} dnx_data_instru_sflow_define_e;

/* Get Data */
/**
 * \brief returns define data of max_nof_sflow_encaps
 * Module - 'instru', Submodule - 'sflow', data - 'max_nof_sflow_encaps'
 * Maximum number of possible sFlow encap entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_sflow_encaps - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_sflow_max_nof_sflow_encaps_get(
    int unit);

/**
 * \brief returns define data of nof_sflow_raw_entries_per_stack
 * Module - 'instru', Submodule - 'sflow', data - 'nof_sflow_raw_entries_per_stack'
 * Number of RAW entries used per sFlow ETPS stack
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sflow_raw_entries_per_stack - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_sflow_nof_sflow_raw_entries_per_stack_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_sflow_table_nof
} dnx_data_instru_sflow_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE EVENTOR:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_instru_eventor_feature_get(
    int unit,
    dnx_data_instru_eventor_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_instru_eventor_define_rx_evpck_header_size,
    dnx_data_instru_eventor_define_tx_builder_max_header_size,
    dnx_data_instru_eventor_define_nof_contexts,
    dnx_data_instru_eventor_define_nof_contexts_bits,
    dnx_data_instru_eventor_define_nof_builders,
    dnx_data_instru_eventor_define_nof_builders_bits,
    dnx_data_instru_eventor_define_nof_sram_banks,
    dnx_data_instru_eventor_define_sram_bank_bits,
    dnx_data_instru_eventor_define_sram_banks_full_size,
    dnx_data_instru_eventor_define_sram_banks_net_size,
    dnx_data_instru_eventor_define_builder_max_buffer_size,
    dnx_data_instru_eventor_define_rx_max_buffer_size,
    dnx_data_instru_eventor_define_axi_sram_offset,
    dnx_data_instru_eventor_define_builder_max_timeout_ms,
    dnx_data_instru_eventor_define_sram_bank_mask,

    /**
     * Must be last one!
     */
    _dnx_data_instru_eventor_define_nof
} dnx_data_instru_eventor_define_e;

/* Get Data */
/**
 * \brief returns define data of rx_evpck_header_size
 * Module - 'instru', Submodule - 'eventor', data - 'rx_evpck_header_size'
 * rx packet eventor header size in bytes (generated by PP)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_evpck_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_rx_evpck_header_size_get(
    int unit);

/**
 * \brief returns define data of tx_builder_max_header_size
 * Module - 'instru', Submodule - 'eventor', data - 'tx_builder_max_header_size'
 * Eventor Transmit header MAX size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tx_builder_max_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_tx_builder_max_header_size_get(
    int unit);

/**
 * \brief returns define data of nof_contexts
 * Module - 'instru', Submodule - 'eventor', data - 'nof_contexts'
 * rx channels, tx contexts
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_contexts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_nof_contexts_get(
    int unit);

/**
 * \brief returns define data of nof_contexts_bits
 * Module - 'instru', Submodule - 'eventor', data - 'nof_contexts_bits'
 * nof bits in nof_contexts
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_contexts_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_nof_contexts_bits_get(
    int unit);

/**
 * \brief returns define data of nof_builders
 * Module - 'instru', Submodule - 'eventor', data - 'nof_builders'
 * packet generators (builders)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_builders - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_nof_builders_get(
    int unit);

/**
 * \brief returns define data of nof_builders_bits
 * Module - 'instru', Submodule - 'eventor', data - 'nof_builders_bits'
 * nof bits in packet generators (builders)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_builders_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_nof_builders_bits_get(
    int unit);

/**
 * \brief returns define data of nof_sram_banks
 * Module - 'instru', Submodule - 'eventor', data - 'nof_sram_banks'
 * Number of SRAM banks
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_sram_banks - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_nof_sram_banks_get(
    int unit);

/**
 * \brief returns define data of sram_bank_bits
 * Module - 'instru', Submodule - 'eventor', data - 'sram_bank_bits'
 * Number of bits in sram bank
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_bank_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_sram_bank_bits_get(
    int unit);

/**
 * \brief returns define data of sram_banks_full_size
 * Module - 'instru', Submodule - 'eventor', data - 'sram_banks_full_size'
 * sram size in bytes including ECC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_banks_full_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_sram_banks_full_size_get(
    int unit);

/**
 * \brief returns define data of sram_banks_net_size
 * Module - 'instru', Submodule - 'eventor', data - 'sram_banks_net_size'
 * sram size in bytes excluding ECC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_banks_net_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_sram_banks_net_size_get(
    int unit);

/**
 * \brief returns define data of builder_max_buffer_size
 * Module - 'instru', Submodule - 'eventor', data - 'builder_max_buffer_size'
 * builder max buffer size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     builder_max_buffer_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_builder_max_buffer_size_get(
    int unit);

/**
 * \brief returns define data of rx_max_buffer_size
 * Module - 'instru', Submodule - 'eventor', data - 'rx_max_buffer_size'
 * builder max buffer size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rx_max_buffer_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_rx_max_buffer_size_get(
    int unit);

/**
 * \brief returns define data of axi_sram_offset
 * Module - 'instru', Submodule - 'eventor', data - 'axi_sram_offset'
 * axi address of eventor sram
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     axi_sram_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_axi_sram_offset_get(
    int unit);

/**
 * \brief returns numeric data of builder_max_timeout_ms
 * Module - 'instru', Submodule - 'eventor', data - 'builder_max_timeout_ms'
 * builder max timeout in micro seconds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     builder_max_timeout_ms - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_builder_max_timeout_ms_get(
    int unit);

/**
 * \brief returns numeric data of sram_bank_mask
 * Module - 'instru', Submodule - 'eventor', data - 'sram_bank_mask'
 * Mask of sram bank
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sram_bank_mask - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_eventor_sram_bank_mask_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_eventor_table_nof
} dnx_data_instru_eventor_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE SYNCED_COUNTERS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_instru_synced_counters_feature_get(
    int unit,
    dnx_data_instru_synced_counters_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_instru_synced_counters_define_icgm_type,
    dnx_data_instru_synced_counters_define_nif_type,
    dnx_data_instru_synced_counters_define_nof_types,
    dnx_data_instru_synced_counters_define_max_nof_intervals,

    /**
     * Must be last one!
     */
    _dnx_data_instru_synced_counters_define_nof
} dnx_data_instru_synced_counters_define_e;

/* Get Data */
/**
 * \brief returns numeric data of icgm_type
 * Module - 'instru', Submodule - 'synced_counters', data - 'icgm_type'
 * Synced counters source type ICGM
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     icgm_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_synced_counters_icgm_type_get(
    int unit);

/**
 * \brief returns numeric data of nif_type
 * Module - 'instru', Submodule - 'synced_counters', data - 'nif_type'
 * Synced counters source type NIF
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nif_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_synced_counters_nif_type_get(
    int unit);

/**
 * \brief returns numeric data of nof_types
 * Module - 'instru', Submodule - 'synced_counters', data - 'nof_types'
 * Number of Synced Counters source types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_types - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_synced_counters_nof_types_get(
    int unit);

/**
 * \brief returns define data of max_nof_intervals
 * Module - 'instru', Submodule - 'synced_counters', data - 'max_nof_intervals'
 * The number of intervals in one round of the Synced counters instrumentation logic
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_nof_intervals - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_instru_synced_counters_max_nof_intervals_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_instru_synced_counters_table_nof
} dnx_data_instru_synced_counters_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_instru_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_INSTRU_H_*/
/* *INDENT-ON* */
