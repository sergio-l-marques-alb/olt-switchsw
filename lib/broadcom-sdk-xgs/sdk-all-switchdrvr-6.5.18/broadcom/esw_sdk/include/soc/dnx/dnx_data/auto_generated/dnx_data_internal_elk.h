/** \file dnx_data_internal_elk.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_ELK_H_
/*{*/
#define _DNX_DATA_INTERNAL_ELK_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_elk.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_elk_submodule_general,
    dnx_data_elk_submodule_application,
    dnx_data_elk_submodule_connectivity,
    dnx_data_elk_submodule_recovery,

    /**
     * Must be last one!
     */
    _dnx_data_elk_submodule_nof
} dnx_data_elk_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_elk_general_feature_get(
    int unit,
    dnx_data_elk_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_elk_general_define_max_ports,
    dnx_data_elk_general_define_rop_fifo_depth,
    dnx_data_elk_general_define_flp_full_treshold,
    dnx_data_elk_general_define_max_lane_id,
    dnx_data_elk_general_define_egw_max_opcode,
    dnx_data_elk_general_define_device_type,

    /**
     * Must be last one!
     */
    _dnx_data_elk_general_define_nof
} dnx_data_elk_general_define_e;

/* Get Data */
/**
 * \brief returns define data of max_ports
 * Module - 'elk', Submodule - 'general', data - 'max_ports'
 * Max Elk ports
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_ports - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_general_max_ports_get(
    int unit);

/**
 * \brief returns define data of rop_fifo_depth
 * Module - 'elk', Submodule - 'general', data - 'rop_fifo_depth'
 * ROP Fifo memory depth in EGW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     rop_fifo_depth - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_general_rop_fifo_depth_get(
    int unit);

/**
 * \brief returns define data of flp_full_treshold
 * Module - 'elk', Submodule - 'general', data - 'flp_full_treshold'
 *  number of elements in the FLPB lookup accessing FIFO, should be size of IPPB_FLPB_LOOKUP_ACCESS_LOOKUP_FIFO_3 - const: (less than the max queue size)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flp_full_treshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_general_flp_full_treshold_get(
    int unit);

/**
 * \brief returns define data of max_lane_id
 * Module - 'elk', Submodule - 'general', data - 'max_lane_id'
 * KBP MAX lane id
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_lane_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_general_max_lane_id_get(
    int unit);

/**
 * \brief returns define data of egw_max_opcode
 * Module - 'elk', Submodule - 'general', data - 'egw_max_opcode'
 * Maximum value for the EGW opcode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     egw_max_opcode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_general_egw_max_opcode_get(
    int unit);

/**
 * \brief returns numeric data of device_type
 * Module - 'elk', Submodule - 'general', data - 'device_type'
 * External Tcam device type.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     device_type - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_general_device_type_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_elk_general_table_nof
} dnx_data_elk_general_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE APPLICATION:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_elk_application_feature_get(
    int unit,
    dnx_data_elk_application_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_elk_application_define_optimized_result,
    dnx_data_elk_application_define_split_rpf,
    dnx_data_elk_application_define_thread_safety,
    dnx_data_elk_application_define_ipv4_large_mc_enable,
    dnx_data_elk_application_define_ipv6_large_mc_enable,
    dnx_data_elk_application_define_ipv4_mc_hash_table_size,
    dnx_data_elk_application_define_ipv6_mc_hash_table_size,
    dnx_data_elk_application_define_ipv4_mc_table_size,
    dnx_data_elk_application_define_ipv6_mc_table_size,

    /**
     * Must be last one!
     */
    _dnx_data_elk_application_define_nof
} dnx_data_elk_application_define_e;

/* Get Data */
/**
 * \brief returns numeric data of optimized_result
 * Module - 'elk', Submodule - 'application', data - 'optimized_result'
 * Device use optimized result
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     optimized_result - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_application_optimized_result_get(
    int unit);

/**
 * \brief returns numeric data of split_rpf
 * Module - 'elk', Submodule - 'application', data - 'split_rpf'
 * Device use split or non-split FWD and RPF tables
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     split_rpf - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_application_split_rpf_get(
    int unit);

/**
 * \brief returns numeric data of thread_safety
 * Module - 'elk', Submodule - 'application', data - 'thread_safety'
 * Device has KBP thread safety enabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     thread_safety - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_application_thread_safety_get(
    int unit);

/**
 * \brief returns numeric data of ipv4_large_mc_enable
 * Module - 'elk', Submodule - 'application', data - 'ipv4_large_mc_enable'
 * Device use large or small IPv4 multicast table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv4_large_mc_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_application_ipv4_large_mc_enable_get(
    int unit);

/**
 * \brief returns numeric data of ipv6_large_mc_enable
 * Module - 'elk', Submodule - 'application', data - 'ipv6_large_mc_enable'
 * Device use large or small IPv6 multicast table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv6_large_mc_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_application_ipv6_large_mc_enable_get(
    int unit);

/**
 * \brief returns numeric data of ipv4_mc_hash_table_size
 * Module - 'elk', Submodule - 'application', data - 'ipv4_mc_hash_table_size'
 * Number of SW entries for KBP IPv4 Multicast; Not relevant when IPv4 application is not enabled; Actual hash table size will be the smallest power fo 2, which can fit this size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv4_mc_hash_table_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_application_ipv4_mc_hash_table_size_get(
    int unit);

/**
 * \brief returns numeric data of ipv6_mc_hash_table_size
 * Module - 'elk', Submodule - 'application', data - 'ipv6_mc_hash_table_size'
 * Number of SW entries for KBP IPv6 Multicast; Not relevant when IPv6 application is not enabled; Actual hash table size will be the smallest power fo 2, which can fit this size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv6_mc_hash_table_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_application_ipv6_mc_hash_table_size_get(
    int unit);

/**
 * \brief returns numeric data of ipv4_mc_table_size
 * Module - 'elk', Submodule - 'application', data - 'ipv4_mc_table_size'
 * Number of SW entries for KBP IPv4 Multicast; Not relevant when IPv4 application is not enabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv4_mc_table_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_application_ipv4_mc_table_size_get(
    int unit);

/**
 * \brief returns numeric data of ipv6_mc_table_size
 * Module - 'elk', Submodule - 'application', data - 'ipv6_mc_table_size'
 * Number of SW entries for KBP IPv6 Multicast; Not relevant when IPv6 application is not enabled
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ipv6_mc_table_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_application_ipv6_mc_table_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_elk_application_table_db_property,

    /**
     * Must be last one!
     */
    _dnx_data_elk_application_table_nof
} dnx_data_elk_application_table_e;

/* Get Data */
/**
 * \brief get table db_property entry 
 * DB properties
 * 
 * \param [in] unit - unit #
 * \param [in] db - DBAL table ID of the DB
 * 
 * \return
 *     db_property - returns the relevant entry values grouped in struct - see dnx_data_elk_application_db_property_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_elk_application_db_property_t * dnx_data_elk_application_db_property_get(
    int unit,
    int db);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'elk', Submodule - 'application', table - 'db_property'
 * DB properties
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_elk_application_db_property_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)db_property info
 * DB properties
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     db_property - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_elk_application_db_property_info_get(
    int unit);

/*
 * SUBMODULE CONNECTIVITY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_elk_connectivity_feature_get(
    int unit,
    dnx_data_elk_connectivity_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_elk_connectivity_define_connect_mode,
    dnx_data_elk_connectivity_define_mdio_id,

    /**
     * Must be last one!
     */
    _dnx_data_elk_connectivity_define_nof
} dnx_data_elk_connectivity_define_e;

/* Get Data */
/**
 * \brief returns numeric data of connect_mode
 * Module - 'elk', Submodule - 'connectivity', data - 'connect_mode'
 * External Tcam connect mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     connect_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_connectivity_connect_mode_get(
    int unit);

/**
 * \brief returns numeric data of mdio_id
 * Module - 'elk', Submodule - 'connectivity', data - 'mdio_id'
 * KBP MDIO ID.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdio_id - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_connectivity_mdio_id_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_elk_connectivity_table_ilkn_reverse,
    dnx_data_elk_connectivity_table_topology,
    dnx_data_elk_connectivity_table_kbp_serdes_tx_taps,
    dnx_data_elk_connectivity_table_kbp_lane_serdes_tx_taps,

    /**
     * Must be last one!
     */
    _dnx_data_elk_connectivity_table_nof
} dnx_data_elk_connectivity_table_e;

/* Get Data */
/**
 * \brief get table ilkn_reverse entry 
 * External lookup (elk) ILKN lanes swap
 * 
 * \param [in] unit - unit #
 * \param [in] ilkn_id - port id elk device side
 * 
 * \return
 *     ilkn_reverse - returns the relevant entry values grouped in struct - see dnx_data_elk_connectivity_ilkn_reverse_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_elk_connectivity_ilkn_reverse_t * dnx_data_elk_connectivity_ilkn_reverse_get(
    int unit,
    int ilkn_id);

/**
 * \brief get table topology entry 
 * KBP to Jericho connection topology.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     topology - returns the relevant entry values grouped in struct - see dnx_data_elk_connectivity_topology_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_elk_connectivity_topology_t * dnx_data_elk_connectivity_topology_get(
    int unit);

/**
 * \brief get table kbp_serdes_tx_taps entry 
 * PHY TX tap configuration on KBP side per device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     kbp_serdes_tx_taps - returns the relevant entry values grouped in struct - see dnx_data_elk_connectivity_kbp_serdes_tx_taps_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_elk_connectivity_kbp_serdes_tx_taps_t * dnx_data_elk_connectivity_kbp_serdes_tx_taps_get(
    int unit);

/**
 * \brief get table kbp_lane_serdes_tx_taps entry 
 * PHY TX tap configuration on KBP side per lane
 * 
 * \param [in] unit - unit #
 * \param [in] lane_id - lane id on KBP side
 * 
 * \return
 *     kbp_lane_serdes_tx_taps - returns the relevant entry values grouped in struct - see dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_t * dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_get(
    int unit,
    int lane_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'elk', Submodule - 'connectivity', table - 'ilkn_reverse'
 * External lookup (elk) ILKN lanes swap
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_elk_connectivity_ilkn_reverse_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'elk', Submodule - 'connectivity', table - 'topology'
 * KBP to Jericho connection topology.
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_elk_connectivity_topology_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'elk', Submodule - 'connectivity', table - 'kbp_serdes_tx_taps'
 * PHY TX tap configuration on KBP side per device
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_elk_connectivity_kbp_serdes_tx_taps_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'elk', Submodule - 'connectivity', table - 'kbp_lane_serdes_tx_taps'
 * PHY TX tap configuration on KBP side per lane
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)ilkn_reverse info
 * External lookup (elk) ILKN lanes swap
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ilkn_reverse - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_elk_connectivity_ilkn_reverse_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)topology info
 * KBP to Jericho connection topology.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     topology - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_elk_connectivity_topology_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)kbp_serdes_tx_taps info
 * PHY TX tap configuration on KBP side per device
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     kbp_serdes_tx_taps - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_elk_connectivity_kbp_serdes_tx_taps_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)kbp_lane_serdes_tx_taps info
 * PHY TX tap configuration on KBP side per lane
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     kbp_lane_serdes_tx_taps - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_elk_connectivity_kbp_lane_serdes_tx_taps_info_get(
    int unit);

/*
 * SUBMODULE RECOVERY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_elk_recovery_feature_get(
    int unit,
    dnx_data_elk_recovery_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_elk_recovery_define_enable,
    dnx_data_elk_recovery_define_iteration,

    /**
     * Must be last one!
     */
    _dnx_data_elk_recovery_define_nof
} dnx_data_elk_recovery_define_e;

/* Get Data */
/**
 * \brief returns numeric data of enable
 * Module - 'elk', Submodule - 'recovery', data - 'enable'
 * Enable the KBP recovery sequence.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_recovery_enable_get(
    int unit);

/**
 * \brief returns numeric data of iteration
 * Module - 'elk', Submodule - 'recovery', data - 'iteration'
 * KBP recovery iteration.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     iteration - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_elk_recovery_iteration_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_elk_recovery_table_nof
} dnx_data_elk_recovery_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_elk_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_ELK_H_*/
/* *INDENT-ON* */
