/** \file dnx_data_internal_l2.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_L2_H_
/*{*/
#define _DNX_DATA_INTERNAL_L2_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_l2.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_l2_submodule_general,
    dnx_data_l2_submodule_hw_bug,
    dnx_data_l2_submodule_vsi,
    dnx_data_l2_submodule_vlan_domain,
    dnx_data_l2_submodule_dma,
    dnx_data_l2_submodule_age_and_flush_machine,
    dnx_data_l2_submodule_olp,

    /**
     * Must be last one!
     */
    _dnx_data_l2_submodule_nof
} dnx_data_l2_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_l2_general_feature_get(
    int unit,
    dnx_data_l2_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_l2_general_define_vsi_offset_shift,
    dnx_data_l2_general_define_lif_offset_shift,
    dnx_data_l2_general_define_l2_learn_limit_mode,

    /**
     * Must be last one!
     */
    _dnx_data_l2_general_define_nof
} dnx_data_l2_general_define_e;

/* Get Data */
/**
 * \brief returns define data of vsi_offset_shift
 * Module - 'l2', Submodule - 'general', data - 'vsi_offset_shift'
 * Workaround for VSI location in MACT entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vsi_offset_shift - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_general_vsi_offset_shift_get(
    int unit);

/**
 * \brief returns define data of lif_offset_shift
 * Module - 'l2', Submodule - 'general', data - 'lif_offset_shift'
 * Workaround for LIF location in MACT entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lif_offset_shift - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_general_lif_offset_shift_get(
    int unit);

/**
 * \brief returns numeric data of l2_learn_limit_mode
 * Module - 'l2', Submodule - 'general', data - 'l2_learn_limit_mode'
 * MACT learning limit mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     l2_learn_limit_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_general_l2_learn_limit_mode_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_l2_general_table_nof
} dnx_data_l2_general_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE HW_BUG:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_l2_hw_bug_feature_get(
    int unit,
    dnx_data_l2_hw_bug_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_l2_hw_bug_define_nof
} dnx_data_l2_hw_bug_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_l2_hw_bug_table_nof
} dnx_data_l2_hw_bug_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE VSI:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_l2_vsi_feature_get(
    int unit,
    dnx_data_l2_vsi_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_l2_vsi_define_nof_vsi_aging_profiles,
    dnx_data_l2_vsi_define_nof_event_forwarding_profiles,
    dnx_data_l2_vsi_define_nof_vsi_learning_profiles,

    /**
     * Must be last one!
     */
    _dnx_data_l2_vsi_define_nof
} dnx_data_l2_vsi_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_vsi_aging_profiles
 * Module - 'l2', Submodule - 'vsi', data - 'nof_vsi_aging_profiles'
 * Number of VSI aging profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_vsi_aging_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_vsi_nof_vsi_aging_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_event_forwarding_profiles
 * Module - 'l2', Submodule - 'vsi', data - 'nof_event_forwarding_profiles'
 * Number of event forwarding profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_event_forwarding_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_vsi_nof_event_forwarding_profiles_get(
    int unit);

/**
 * \brief returns define data of nof_vsi_learning_profiles
 * Module - 'l2', Submodule - 'vsi', data - 'nof_vsi_learning_profiles'
 * Number of VSI learning profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_vsi_learning_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_vsi_nof_vsi_learning_profiles_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_l2_vsi_table_nof
} dnx_data_l2_vsi_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE VLAN_DOMAIN:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_l2_vlan_domain_feature_get(
    int unit,
    dnx_data_l2_vlan_domain_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_l2_vlan_domain_define_nof_vlan_domains,
    dnx_data_l2_vlan_domain_define_nof_bits_next_layer_network_domain,

    /**
     * Must be last one!
     */
    _dnx_data_l2_vlan_domain_define_nof
} dnx_data_l2_vlan_domain_define_e;

/* Get Data */
/**
 * \brief returns define data of nof_vlan_domains
 * Module - 'l2', Submodule - 'vlan_domain', data - 'nof_vlan_domains'
 * Number of supported vlan domains
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_vlan_domains - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_vlan_domain_nof_vlan_domains_get(
    int unit);

/**
 * \brief returns define data of nof_bits_next_layer_network_domain
 * Module - 'l2', Submodule - 'vlan_domain', data - 'nof_bits_next_layer_network_domain'
 * Number of bits for next layer network domain
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_bits_next_layer_network_domain - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_vlan_domain_nof_bits_next_layer_network_domain_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_l2_vlan_domain_table_nof
} dnx_data_l2_vlan_domain_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE DMA:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_l2_dma_feature_get(
    int unit,
    dnx_data_l2_dma_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_l2_dma_define_flush_nof_dma_entries,
    dnx_data_l2_dma_define_flush_db_nof_dma_rules,
    dnx_data_l2_dma_define_flush_db_nof_dma_rules_per_table,
    dnx_data_l2_dma_define_flush_db_rule_size,
    dnx_data_l2_dma_define_flush_db_data_size,
    dnx_data_l2_dma_define_flush_group_size,
    dnx_data_l2_dma_define_learning_fifo_dma_buffer_size,
    dnx_data_l2_dma_define_learning_fifo_dma_timeout,
    dnx_data_l2_dma_define_learning_fifo_dma_threshold,

    /**
     * Must be last one!
     */
    _dnx_data_l2_dma_define_nof
} dnx_data_l2_dma_define_e;

/* Get Data */
/**
 * \brief returns define data of flush_nof_dma_entries
 * Module - 'l2', Submodule - 'dma', data - 'flush_nof_dma_entries'
 * Number of flush DMA entries that the host can hold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_nof_dma_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_dma_flush_nof_dma_entries_get(
    int unit);

/**
 * \brief returns define data of flush_db_nof_dma_rules
 * Module - 'l2', Submodule - 'dma', data - 'flush_db_nof_dma_rules'
 * Number of flush DMA rules
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_db_nof_dma_rules - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_dma_flush_db_nof_dma_rules_get(
    int unit);

/**
 * \brief returns define data of flush_db_nof_dma_rules_per_table
 * Module - 'l2', Submodule - 'dma', data - 'flush_db_nof_dma_rules_per_table'
 * Number of flush DMA rules in a table
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_db_nof_dma_rules_per_table - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_dma_flush_db_nof_dma_rules_per_table_get(
    int unit);

/**
 * \brief returns define data of flush_db_rule_size
 * Module - 'l2', Submodule - 'dma', data - 'flush_db_rule_size'
 * Size in bytes of a flush DB rule
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_db_rule_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_dma_flush_db_rule_size_get(
    int unit);

/**
 * \brief returns define data of flush_db_data_size
 * Module - 'l2', Submodule - 'dma', data - 'flush_db_data_size'
 * Size in bytes of a flush DB action data
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_db_data_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_dma_flush_db_data_size_get(
    int unit);

/**
 * \brief returns define data of flush_group_size
 * Module - 'l2', Submodule - 'dma', data - 'flush_group_size'
 * the size of flush group field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush_group_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_dma_flush_group_size_get(
    int unit);

/**
 * \brief returns numeric data of learning_fifo_dma_buffer_size
 * Module - 'l2', Submodule - 'dma', data - 'learning_fifo_dma_buffer_size'
 * learning fifo dma buffer size in bytes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     learning_fifo_dma_buffer_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_dma_learning_fifo_dma_buffer_size_get(
    int unit);

/**
 * \brief returns numeric data of learning_fifo_dma_timeout
 * Module - 'l2', Submodule - 'dma', data - 'learning_fifo_dma_timeout'
 * learning fifo dma timeout in microseconds
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     learning_fifo_dma_timeout - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_dma_learning_fifo_dma_timeout_get(
    int unit);

/**
 * \brief returns numeric data of learning_fifo_dma_threshold
 * Module - 'l2', Submodule - 'dma', data - 'learning_fifo_dma_threshold'
 * learning fifo dma threshold
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     learning_fifo_dma_threshold - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_dma_learning_fifo_dma_threshold_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_l2_dma_table_nof
} dnx_data_l2_dma_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE AGE_AND_FLUSH_MACHINE:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_l2_age_and_flush_machine_feature_get(
    int unit,
    dnx_data_l2_age_and_flush_machine_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_l2_age_and_flush_machine_define_max_age_states,

    /**
     * Must be last one!
     */
    _dnx_data_l2_age_and_flush_machine_define_nof
} dnx_data_l2_age_and_flush_machine_define_e;

/* Get Data */
/**
 * \brief returns define data of max_age_states
 * Module - 'l2', Submodule - 'age_and_flush_machine', data - 'max_age_states'
 * The maximal NOF age states that an entry can have before aging out.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     max_age_states - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_age_and_flush_machine_max_age_states_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_l2_age_and_flush_machine_table_filter_rules,
    dnx_data_l2_age_and_flush_machine_table_data_rules,
    dnx_data_l2_age_and_flush_machine_table_flush,
    dnx_data_l2_age_and_flush_machine_table_age,

    /**
     * Must be last one!
     */
    _dnx_data_l2_age_and_flush_machine_table_nof
} dnx_data_l2_age_and_flush_machine_table_e;

/* Get Data */
/**
 * \brief get table filter_rules entry 
 * Holds flush filter rules
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     filter_rules - returns the relevant entry values grouped in struct - see dnx_data_l2_age_and_flush_machine_filter_rules_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_l2_age_and_flush_machine_filter_rules_t * dnx_data_l2_age_and_flush_machine_filter_rules_get(
    int unit);

/**
 * \brief get table data_rules entry 
 * Holds flush data for updates
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_rules - returns the relevant entry values grouped in struct - see dnx_data_l2_age_and_flush_machine_data_rules_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_l2_age_and_flush_machine_data_rules_t * dnx_data_l2_age_and_flush_machine_data_rules_get(
    int unit);

/**
 * \brief get table flush entry 
 * Flush machine related HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush - returns the relevant entry values grouped in struct - see dnx_data_l2_age_and_flush_machine_flush_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_l2_age_and_flush_machine_flush_t * dnx_data_l2_age_and_flush_machine_flush_get(
    int unit);

/**
 * \brief get table age entry 
 * Age machine related HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age - returns the relevant entry values grouped in struct - see dnx_data_l2_age_and_flush_machine_age_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_l2_age_and_flush_machine_age_t * dnx_data_l2_age_and_flush_machine_age_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'l2', Submodule - 'age_and_flush_machine', table - 'filter_rules'
 * Holds flush filter rules
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_l2_age_and_flush_machine_filter_rules_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'l2', Submodule - 'age_and_flush_machine', table - 'data_rules'
 * Holds flush data for updates
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_l2_age_and_flush_machine_data_rules_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'l2', Submodule - 'age_and_flush_machine', table - 'flush'
 * Flush machine related HW
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_l2_age_and_flush_machine_flush_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'l2', Submodule - 'age_and_flush_machine', table - 'age'
 * Age machine related HW
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_l2_age_and_flush_machine_age_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)filter_rules info
 * Holds flush filter rules
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     filter_rules - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_l2_age_and_flush_machine_filter_rules_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)data_rules info
 * Holds flush data for updates
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_rules - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_l2_age_and_flush_machine_data_rules_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)flush info
 * Flush machine related HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flush - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_l2_age_and_flush_machine_flush_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)age info
 * Age machine related HW
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     age - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_l2_age_and_flush_machine_age_info_get(
    int unit);

/*
 * SUBMODULE OLP:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_l2_olp_feature_get(
    int unit,
    dnx_data_l2_olp_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_l2_olp_define_lpkgv_shift,
    dnx_data_l2_olp_define_lpkgv_mask,
    dnx_data_l2_olp_define_lpkgv_with_outlif,
    dnx_data_l2_olp_define_lpkgv_wo_outlif,
    dnx_data_l2_olp_define_destination_offset,
    dnx_data_l2_olp_define_outlif_offset,
    dnx_data_l2_olp_define_eei_offset,
    dnx_data_l2_olp_define_fec_offset,
    dnx_data_l2_olp_define_jr_mode_enhanced_performance_enable,

    /**
     * Must be last one!
     */
    _dnx_data_l2_olp_define_nof
} dnx_data_l2_olp_define_e;

/* Get Data */
/**
 * \brief returns define data of lpkgv_shift
 * Module - 'l2', Submodule - 'olp', data - 'lpkgv_shift'
 * Learn_Payload_Key_Gen_Var shift in learn payload msb
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lpkgv_shift - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_olp_lpkgv_shift_get(
    int unit);

/**
 * \brief returns define data of lpkgv_mask
 * Module - 'l2', Submodule - 'olp', data - 'lpkgv_mask'
 * Learn_Payload_Key_Gen_Var mask in learn payload msb
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lpkgv_mask - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_olp_lpkgv_mask_get(
    int unit);

/**
 * \brief returns define data of lpkgv_with_outlif
 * Module - 'l2', Submodule - 'olp', data - 'lpkgv_with_outlif'
 * Learn_Payload_Key_Gen_Var for outlif is valid in learn payload
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lpkgv_with_outlif - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_olp_lpkgv_with_outlif_get(
    int unit);

/**
 * \brief returns define data of lpkgv_wo_outlif
 * Module - 'l2', Submodule - 'olp', data - 'lpkgv_wo_outlif'
 * Learn_Payload_Key_Gen_Var for outlif is invalid in learn payload
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lpkgv_wo_outlif - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_olp_lpkgv_wo_outlif_get(
    int unit);

/**
 * \brief returns define data of destination_offset
 * Module - 'l2', Submodule - 'olp', data - 'destination_offset'
 * destination offset in learn payload
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     destination_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_olp_destination_offset_get(
    int unit);

/**
 * \brief returns define data of outlif_offset
 * Module - 'l2', Submodule - 'olp', data - 'outlif_offset'
 * outlif offset in learn payload
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     outlif_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_olp_outlif_offset_get(
    int unit);

/**
 * \brief returns define data of eei_offset
 * Module - 'l2', Submodule - 'olp', data - 'eei_offset'
 * eei offset in learn payload
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eei_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_olp_eei_offset_get(
    int unit);

/**
 * \brief returns define data of fec_offset
 * Module - 'l2', Submodule - 'olp', data - 'fec_offset'
 * fec offset in learn payload
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fec_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_olp_fec_offset_get(
    int unit);

/**
 * \brief returns define data of jr_mode_enhanced_performance_enable
 * Module - 'l2', Submodule - 'olp', data - 'jr_mode_enhanced_performance_enable'
 * Enhance performance in jr mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     jr_mode_enhanced_performance_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_l2_olp_jr_mode_enhanced_performance_enable_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_l2_olp_table_nof
} dnx_data_l2_olp_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_l2_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_L2_H_*/
/* *INDENT-ON* */
