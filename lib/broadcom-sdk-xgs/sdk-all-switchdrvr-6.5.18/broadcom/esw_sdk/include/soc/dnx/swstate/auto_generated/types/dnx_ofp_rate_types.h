/** \file dnx/swstate/auto_generated/types/dnx_ofp_rate_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_OFP_RATE_TYPES_H__
#define __DNX_OFP_RATE_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_egr_queuing.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_device.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_egr_queuing.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_port.h>
/*
 * STRUCTs
 */

/**
 * info about shaping parameters
 */
typedef struct {
    /**
     * rate value
     */
    uint32 rate;
    /**
     * Boolean, is valid value
     */
    uint32 valid;
} dnx_ofp_rate_db_tcg_shaping_t;

/**
 * info about shaping parameters
 */
typedef struct {
    /**
     * rate value
     */
    uint32 rate;
    /**
     * Boolean, is valid value
     */
    uint32 valid;
} dnx_ofp_rate_db_qpair_shaping_t;

/**
 * info about shaping parameters for OTM
 */
typedef struct {
    /**
     * rate value
     */
    uint32 rate;
    /**
     * burst value
     */
    uint32 burst;
    /**
     * Boolean, is valid value
     */
    uint32 valid;
} dnx_ofp_rate_db_otm_shaping_t;

/**
 * info about OTM port
 */
typedef struct {
    /**
     * otm calendar instance number
     */
    uint32 cal_instance;
    /**
     * info about shaping parameters
     */
    dnx_ofp_rate_db_otm_shaping_t shaping;
} dnx_ofp_rate_db_otm_t;

/**
 * info about calendar parameters
 */
typedef struct {
    /**
     * rate value
     */
    uint32 rate;
    /**
     * Boolean, is modified
     */
    uint32 modified;
    /**
     * number of calcal instances
     */
    uint32 nof_calcal_instances;
} dnx_ofp_rate_db_cal_t;

/**
 * DB for used by algo port rate
 */
typedef struct {
    /**
     * [core][OTM index], data about OTM port
     */
    dnx_ofp_rate_db_otm_t* otm[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES];
    /**
     * [core][qpare index], data about qpair shaping parameters
     */
    dnx_ofp_rate_db_qpair_shaping_t qpair[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES][DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_Q_PAIRS];
    /**
     * [core][PS index][TCG index], data about TCG shaping parameters
     */
    dnx_ofp_rate_db_tcg_shaping_t tcg[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES][DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_PORT_SCHEDULERS][DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_TCG];
    /**
     * [core][calendar index], info about calendar parameters
     */
    dnx_ofp_rate_db_cal_t otm_cal[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES][DNX_DATA_MAX_EGR_QUEUING_PARAMS_NOF_CALENDARS];
    /**
     * [core] Boolean, calcal is modified
     */
    uint32 calcal_is_modified[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES];
    /**
     * [core] calcal length value
     */
    uint32 calcal_len[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES];
} dnx_ofp_rate_db_t;


#endif /* __DNX_OFP_RATE_TYPES_H__ */
