/** \file dnx/swstate/auto_generated/access/dnx_dram_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_DRAM_ACCESS_H__
#define __DNX_DRAM_ACCESS_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_dram_types.h>
#include <include/bcm/switch.h>
#include <include/shared/periodic_event.h>
#include <soc/dnxc/swstate/types/sw_state_mutex.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: dnx_dram_db_is_init
 */
typedef int (*dnx_dram_db_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: dnx_dram_db_init
 */
typedef int (*dnx_dram_db_init_cb)(
    int unit);

/**
 * implemented by: dnx_dram_db_sync_manager_deleted_buffers_file_mutex_create
 */
typedef int (*dnx_dram_db_sync_manager_deleted_buffers_file_mutex_create_cb)(
    int unit);

/**
 * implemented by: dnx_dram_db_sync_manager_deleted_buffers_file_mutex_is_created
 */
typedef int (*dnx_dram_db_sync_manager_deleted_buffers_file_mutex_is_created_cb)(
    int unit, uint8 *is_created);

/**
 * implemented by: dnx_dram_db_sync_manager_deleted_buffers_file_mutex_take
 */
typedef int (*dnx_dram_db_sync_manager_deleted_buffers_file_mutex_take_cb)(
    int unit, int usec);

/**
 * implemented by: dnx_dram_db_sync_manager_deleted_buffers_file_mutex_give
 */
typedef int (*dnx_dram_db_sync_manager_deleted_buffers_file_mutex_give_cb)(
    int unit);

/**
 * implemented by: dnx_dram_db_power_down_callback_callback_set
 */
typedef int (*dnx_dram_db_power_down_callback_callback_set_cb)(
    int unit, bcm_switch_dram_power_down_callback_t callback);

/**
 * implemented by: dnx_dram_db_power_down_callback_callback_get
 */
typedef int (*dnx_dram_db_power_down_callback_callback_get_cb)(
    int unit, bcm_switch_dram_power_down_callback_t *callback);

/**
 * implemented by: dnx_dram_db_power_down_callback_userdata_set
 */
typedef int (*dnx_dram_db_power_down_callback_userdata_set_cb)(
    int unit, dnx_power_down_callback_userdata_t userdata);

/**
 * implemented by: dnx_dram_db_power_down_callback_userdata_get
 */
typedef int (*dnx_dram_db_power_down_callback_userdata_get_cb)(
    int unit, dnx_power_down_callback_userdata_t *userdata);

/**
 * implemented by: dnx_dram_db_power_down_callback_power_on_set
 */
typedef int (*dnx_dram_db_power_down_callback_power_on_set_cb)(
    int unit, uint32 power_on);

/**
 * implemented by: dnx_dram_db_power_down_callback_power_on_get
 */
typedef int (*dnx_dram_db_power_down_callback_power_on_get_cb)(
    int unit, uint32 *power_on);

/**
 * implemented by: dnx_dram_db_override_bist_configurations_during_tuning_set
 */
typedef int (*dnx_dram_db_override_bist_configurations_during_tuning_set_cb)(
    int unit, int override_bist_configurations_during_tuning);

/**
 * implemented by: dnx_dram_db_override_bist_configurations_during_tuning_get
 */
typedef int (*dnx_dram_db_override_bist_configurations_during_tuning_get_cb)(
    int unit, int *override_bist_configurations_during_tuning);

/**
 * implemented by: dnx_dram_db_channel_soft_init_after_bist_set
 */
typedef int (*dnx_dram_db_channel_soft_init_after_bist_set_cb)(
    int unit, int channel_soft_init_after_bist);

/**
 * implemented by: dnx_dram_db_channel_soft_init_after_bist_get
 */
typedef int (*dnx_dram_db_channel_soft_init_after_bist_get_cb)(
    int unit, int *channel_soft_init_after_bist);

/**
 * implemented by: dnx_dram_db_traffic_tuning_core_mode_set
 */
typedef int (*dnx_dram_db_traffic_tuning_core_mode_set_cb)(
    int unit, int traffic_tuning_core_mode);

/**
 * implemented by: dnx_dram_db_traffic_tuning_core_mode_get
 */
typedef int (*dnx_dram_db_traffic_tuning_core_mode_get_cb)(
    int unit, int *traffic_tuning_core_mode);

/**
 * implemented by: dnx_dram_db_dynamic_calibration_enabled_set
 */
typedef int (*dnx_dram_db_dynamic_calibration_enabled_set_cb)(
    int unit, int dynamic_calibration_enabled);

/**
 * implemented by: dnx_dram_db_dynamic_calibration_enabled_get
 */
typedef int (*dnx_dram_db_dynamic_calibration_enabled_get_cb)(
    int unit, int *dynamic_calibration_enabled);

/**
 * implemented by: dnx_dram_db_temperature_monitoring_thread_state_set
 */
typedef int (*dnx_dram_db_temperature_monitoring_thread_state_set_cb)(
    int unit, dnx_dram_temperature_monitoring_state_e temperature_monitoring_thread_state);

/**
 * implemented by: dnx_dram_db_temperature_monitoring_thread_state_get
 */
typedef int (*dnx_dram_db_temperature_monitoring_thread_state_get_cb)(
    int unit, dnx_dram_temperature_monitoring_state_e *temperature_monitoring_thread_state);

/**
 * implemented by: dnx_dram_db_temperature_monitoring_thread_handler_set
 */
typedef int (*dnx_dram_db_temperature_monitoring_thread_handler_set_cb)(
    int unit, periodic_event_handler_t temperature_monitoring_thread_handler);

/**
 * implemented by: dnx_dram_db_temperature_monitoring_thread_handler_get
 */
typedef int (*dnx_dram_db_temperature_monitoring_thread_handler_get_cb)(
    int unit, periodic_event_handler_t *temperature_monitoring_thread_handler);

/**
 * implemented by: dnx_dram_db_vendor_info_is_init_set
 */
typedef int (*dnx_dram_db_vendor_info_is_init_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 is_init);

/**
 * implemented by: dnx_dram_db_vendor_info_is_init_get
 */
typedef int (*dnx_dram_db_vendor_info_is_init_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *is_init);

/**
 * implemented by: dnx_dram_db_vendor_info_gen2_test_set
 */
typedef int (*dnx_dram_db_vendor_info_gen2_test_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 gen2_test);

/**
 * implemented by: dnx_dram_db_vendor_info_gen2_test_get
 */
typedef int (*dnx_dram_db_vendor_info_gen2_test_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *gen2_test);

/**
 * implemented by: dnx_dram_db_vendor_info_ecc_set
 */
typedef int (*dnx_dram_db_vendor_info_ecc_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 ecc);

/**
 * implemented by: dnx_dram_db_vendor_info_ecc_get
 */
typedef int (*dnx_dram_db_vendor_info_ecc_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *ecc);

/**
 * implemented by: dnx_dram_db_vendor_info_density_set
 */
typedef int (*dnx_dram_db_vendor_info_density_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 density);

/**
 * implemented by: dnx_dram_db_vendor_info_density_get
 */
typedef int (*dnx_dram_db_vendor_info_density_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *density);

/**
 * implemented by: dnx_dram_db_vendor_info_manufacturer_id_set
 */
typedef int (*dnx_dram_db_vendor_info_manufacturer_id_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 manufacturer_id);

/**
 * implemented by: dnx_dram_db_vendor_info_manufacturer_id_get
 */
typedef int (*dnx_dram_db_vendor_info_manufacturer_id_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *manufacturer_id);

/**
 * implemented by: dnx_dram_db_vendor_info_manufacturing_location_set
 */
typedef int (*dnx_dram_db_vendor_info_manufacturing_location_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 manufacturing_location);

/**
 * implemented by: dnx_dram_db_vendor_info_manufacturing_location_get
 */
typedef int (*dnx_dram_db_vendor_info_manufacturing_location_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *manufacturing_location);

/**
 * implemented by: dnx_dram_db_vendor_info_manufacturing_year_set
 */
typedef int (*dnx_dram_db_vendor_info_manufacturing_year_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 manufacturing_year);

/**
 * implemented by: dnx_dram_db_vendor_info_manufacturing_year_get
 */
typedef int (*dnx_dram_db_vendor_info_manufacturing_year_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *manufacturing_year);

/**
 * implemented by: dnx_dram_db_vendor_info_manufacturing_week_set
 */
typedef int (*dnx_dram_db_vendor_info_manufacturing_week_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 manufacturing_week);

/**
 * implemented by: dnx_dram_db_vendor_info_manufacturing_week_get
 */
typedef int (*dnx_dram_db_vendor_info_manufacturing_week_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *manufacturing_week);

/**
 * implemented by: dnx_dram_db_vendor_info_serial_number_set
 */
typedef int (*dnx_dram_db_vendor_info_serial_number_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 serial_number_idx_0, uint32 serial_number);

/**
 * implemented by: dnx_dram_db_vendor_info_serial_number_get
 */
typedef int (*dnx_dram_db_vendor_info_serial_number_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 serial_number_idx_0, uint32 *serial_number);

/**
 * implemented by: dnx_dram_db_vendor_info_addressing_mode_set
 */
typedef int (*dnx_dram_db_vendor_info_addressing_mode_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 addressing_mode);

/**
 * implemented by: dnx_dram_db_vendor_info_addressing_mode_get
 */
typedef int (*dnx_dram_db_vendor_info_addressing_mode_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *addressing_mode);

/**
 * implemented by: dnx_dram_db_vendor_info_channel_available_set
 */
typedef int (*dnx_dram_db_vendor_info_channel_available_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 channel_available);

/**
 * implemented by: dnx_dram_db_vendor_info_channel_available_get
 */
typedef int (*dnx_dram_db_vendor_info_channel_available_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *channel_available);

/**
 * implemented by: dnx_dram_db_vendor_info_hbm_stack_hight_set
 */
typedef int (*dnx_dram_db_vendor_info_hbm_stack_hight_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 hbm_stack_hight);

/**
 * implemented by: dnx_dram_db_vendor_info_hbm_stack_hight_get
 */
typedef int (*dnx_dram_db_vendor_info_hbm_stack_hight_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *hbm_stack_hight);

/**
 * implemented by: dnx_dram_db_vendor_info_model_part_number_set
 */
typedef int (*dnx_dram_db_vendor_info_model_part_number_set_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 model_part_number);

/**
 * implemented by: dnx_dram_db_vendor_info_model_part_number_get
 */
typedef int (*dnx_dram_db_vendor_info_model_part_number_get_cb)(
    int unit, uint32 vendor_info_idx_0, uint32 *model_part_number);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_is_init_set
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_is_init_set_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 is_init);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_is_init_get
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_is_init_get_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 *is_init);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_manufacturer_vendor_code_set
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_manufacturer_vendor_code_set_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 manufacturer_vendor_code);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_manufacturer_vendor_code_get
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_manufacturer_vendor_code_get_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 *manufacturer_vendor_code);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_revision_id_set
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_revision_id_set_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 revision_id);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_revision_id_get
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_revision_id_get_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 *revision_id);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_density_set
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_density_set_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 density);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_density_get
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_density_get_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 *density);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_internal_wck_set
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_internal_wck_set_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 internal_wck);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_internal_wck_get
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_internal_wck_get_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 *internal_wck);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_wck_granularity_set
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_wck_granularity_set_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 wck_granularity);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_wck_granularity_get
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_wck_granularity_get_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 *wck_granularity);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_wck_frequency_set
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_wck_frequency_set_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 wck_frequency);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_wck_frequency_get
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_wck_frequency_get_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 *wck_frequency);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_vddq_off_set
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_vddq_off_set_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 vddq_off);

/**
 * implemented by: dnx_dram_db_gddr6_vendor_info_vddq_off_get
 */
typedef int (*dnx_dram_db_gddr6_vendor_info_vddq_off_get_cb)(
    int unit, uint32 gddr6_vendor_info_idx_0, uint32 *vddq_off);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable deleted_buffers_file_mutex
 */
typedef struct {
    dnx_dram_db_sync_manager_deleted_buffers_file_mutex_create_cb create;
    dnx_dram_db_sync_manager_deleted_buffers_file_mutex_is_created_cb is_created;
    dnx_dram_db_sync_manager_deleted_buffers_file_mutex_take_cb take;
    dnx_dram_db_sync_manager_deleted_buffers_file_mutex_give_cb give;
} dnx_dram_db_sync_manager_deleted_buffers_file_mutex_cbs;

/**
 * This structure holds the access functions for the variable dnx_dram_sync_manager_t
 */
typedef struct {
    /**
     * Access struct for deleted_buffers_file_mutex
     */
    dnx_dram_db_sync_manager_deleted_buffers_file_mutex_cbs deleted_buffers_file_mutex;
} dnx_dram_db_sync_manager_cbs;

/**
 * This structure holds the access functions for the variable callback
 */
typedef struct {
    dnx_dram_db_power_down_callback_callback_set_cb set;
    dnx_dram_db_power_down_callback_callback_get_cb get;
} dnx_dram_db_power_down_callback_callback_cbs;

/**
 * This structure holds the access functions for the variable userdata
 */
typedef struct {
    dnx_dram_db_power_down_callback_userdata_set_cb set;
    dnx_dram_db_power_down_callback_userdata_get_cb get;
} dnx_dram_db_power_down_callback_userdata_cbs;

/**
 * This structure holds the access functions for the variable power_on
 */
typedef struct {
    dnx_dram_db_power_down_callback_power_on_set_cb set;
    dnx_dram_db_power_down_callback_power_on_get_cb get;
} dnx_dram_db_power_down_callback_power_on_cbs;

/**
 * This structure holds the access functions for the variable dnx_power_down_t
 */
typedef struct {
    /**
     * Access struct for callback
     */
    dnx_dram_db_power_down_callback_callback_cbs callback;
    /**
     * Access struct for userdata
     */
    dnx_dram_db_power_down_callback_userdata_cbs userdata;
    /**
     * Access struct for power_on
     */
    dnx_dram_db_power_down_callback_power_on_cbs power_on;
} dnx_dram_db_power_down_callback_cbs;

/**
 * This structure holds the access functions for the variable override_bist_configurations_during_tuning
 */
typedef struct {
    dnx_dram_db_override_bist_configurations_during_tuning_set_cb set;
    dnx_dram_db_override_bist_configurations_during_tuning_get_cb get;
} dnx_dram_db_override_bist_configurations_during_tuning_cbs;

/**
 * This structure holds the access functions for the variable channel_soft_init_after_bist
 */
typedef struct {
    dnx_dram_db_channel_soft_init_after_bist_set_cb set;
    dnx_dram_db_channel_soft_init_after_bist_get_cb get;
} dnx_dram_db_channel_soft_init_after_bist_cbs;

/**
 * This structure holds the access functions for the variable traffic_tuning_core_mode
 */
typedef struct {
    dnx_dram_db_traffic_tuning_core_mode_set_cb set;
    dnx_dram_db_traffic_tuning_core_mode_get_cb get;
} dnx_dram_db_traffic_tuning_core_mode_cbs;

/**
 * This structure holds the access functions for the variable dynamic_calibration_enabled
 */
typedef struct {
    dnx_dram_db_dynamic_calibration_enabled_set_cb set;
    dnx_dram_db_dynamic_calibration_enabled_get_cb get;
} dnx_dram_db_dynamic_calibration_enabled_cbs;

/**
 * This structure holds the access functions for the variable temperature_monitoring_thread_state
 */
typedef struct {
    dnx_dram_db_temperature_monitoring_thread_state_set_cb set;
    dnx_dram_db_temperature_monitoring_thread_state_get_cb get;
} dnx_dram_db_temperature_monitoring_thread_state_cbs;

/**
 * This structure holds the access functions for the variable temperature_monitoring_thread_handler
 */
typedef struct {
    dnx_dram_db_temperature_monitoring_thread_handler_set_cb set;
    dnx_dram_db_temperature_monitoring_thread_handler_get_cb get;
} dnx_dram_db_temperature_monitoring_thread_handler_cbs;

/**
 * This structure holds the access functions for the variable is_init
 */
typedef struct {
    dnx_dram_db_vendor_info_is_init_set_cb set;
    dnx_dram_db_vendor_info_is_init_get_cb get;
} dnx_dram_db_vendor_info_is_init_cbs;

/**
 * This structure holds the access functions for the variable gen2_test
 */
typedef struct {
    dnx_dram_db_vendor_info_gen2_test_set_cb set;
    dnx_dram_db_vendor_info_gen2_test_get_cb get;
} dnx_dram_db_vendor_info_gen2_test_cbs;

/**
 * This structure holds the access functions for the variable ecc
 */
typedef struct {
    dnx_dram_db_vendor_info_ecc_set_cb set;
    dnx_dram_db_vendor_info_ecc_get_cb get;
} dnx_dram_db_vendor_info_ecc_cbs;

/**
 * This structure holds the access functions for the variable density
 */
typedef struct {
    dnx_dram_db_vendor_info_density_set_cb set;
    dnx_dram_db_vendor_info_density_get_cb get;
} dnx_dram_db_vendor_info_density_cbs;

/**
 * This structure holds the access functions for the variable manufacturer_id
 */
typedef struct {
    dnx_dram_db_vendor_info_manufacturer_id_set_cb set;
    dnx_dram_db_vendor_info_manufacturer_id_get_cb get;
} dnx_dram_db_vendor_info_manufacturer_id_cbs;

/**
 * This structure holds the access functions for the variable manufacturing_location
 */
typedef struct {
    dnx_dram_db_vendor_info_manufacturing_location_set_cb set;
    dnx_dram_db_vendor_info_manufacturing_location_get_cb get;
} dnx_dram_db_vendor_info_manufacturing_location_cbs;

/**
 * This structure holds the access functions for the variable manufacturing_year
 */
typedef struct {
    dnx_dram_db_vendor_info_manufacturing_year_set_cb set;
    dnx_dram_db_vendor_info_manufacturing_year_get_cb get;
} dnx_dram_db_vendor_info_manufacturing_year_cbs;

/**
 * This structure holds the access functions for the variable manufacturing_week
 */
typedef struct {
    dnx_dram_db_vendor_info_manufacturing_week_set_cb set;
    dnx_dram_db_vendor_info_manufacturing_week_get_cb get;
} dnx_dram_db_vendor_info_manufacturing_week_cbs;

/**
 * This structure holds the access functions for the variable serial_number
 */
typedef struct {
    dnx_dram_db_vendor_info_serial_number_set_cb set;
    dnx_dram_db_vendor_info_serial_number_get_cb get;
} dnx_dram_db_vendor_info_serial_number_cbs;

/**
 * This structure holds the access functions for the variable addressing_mode
 */
typedef struct {
    dnx_dram_db_vendor_info_addressing_mode_set_cb set;
    dnx_dram_db_vendor_info_addressing_mode_get_cb get;
} dnx_dram_db_vendor_info_addressing_mode_cbs;

/**
 * This structure holds the access functions for the variable channel_available
 */
typedef struct {
    dnx_dram_db_vendor_info_channel_available_set_cb set;
    dnx_dram_db_vendor_info_channel_available_get_cb get;
} dnx_dram_db_vendor_info_channel_available_cbs;

/**
 * This structure holds the access functions for the variable hbm_stack_hight
 */
typedef struct {
    dnx_dram_db_vendor_info_hbm_stack_hight_set_cb set;
    dnx_dram_db_vendor_info_hbm_stack_hight_get_cb get;
} dnx_dram_db_vendor_info_hbm_stack_hight_cbs;

/**
 * This structure holds the access functions for the variable model_part_number
 */
typedef struct {
    dnx_dram_db_vendor_info_model_part_number_set_cb set;
    dnx_dram_db_vendor_info_model_part_number_get_cb get;
} dnx_dram_db_vendor_info_model_part_number_cbs;

/**
 * This structure holds the access functions for the variable hbm_dram_vendor_info_hbm_t
 */
typedef struct {
    /**
     * Access struct for is_init
     */
    dnx_dram_db_vendor_info_is_init_cbs is_init;
    /**
     * Access struct for gen2_test
     */
    dnx_dram_db_vendor_info_gen2_test_cbs gen2_test;
    /**
     * Access struct for ecc
     */
    dnx_dram_db_vendor_info_ecc_cbs ecc;
    /**
     * Access struct for density
     */
    dnx_dram_db_vendor_info_density_cbs density;
    /**
     * Access struct for manufacturer_id
     */
    dnx_dram_db_vendor_info_manufacturer_id_cbs manufacturer_id;
    /**
     * Access struct for manufacturing_location
     */
    dnx_dram_db_vendor_info_manufacturing_location_cbs manufacturing_location;
    /**
     * Access struct for manufacturing_year
     */
    dnx_dram_db_vendor_info_manufacturing_year_cbs manufacturing_year;
    /**
     * Access struct for manufacturing_week
     */
    dnx_dram_db_vendor_info_manufacturing_week_cbs manufacturing_week;
    /**
     * Access struct for serial_number
     */
    dnx_dram_db_vendor_info_serial_number_cbs serial_number;
    /**
     * Access struct for addressing_mode
     */
    dnx_dram_db_vendor_info_addressing_mode_cbs addressing_mode;
    /**
     * Access struct for channel_available
     */
    dnx_dram_db_vendor_info_channel_available_cbs channel_available;
    /**
     * Access struct for hbm_stack_hight
     */
    dnx_dram_db_vendor_info_hbm_stack_hight_cbs hbm_stack_hight;
    /**
     * Access struct for model_part_number
     */
    dnx_dram_db_vendor_info_model_part_number_cbs model_part_number;
} dnx_dram_db_vendor_info_cbs;

/**
 * This structure holds the access functions for the variable is_init
 */
typedef struct {
    dnx_dram_db_gddr6_vendor_info_is_init_set_cb set;
    dnx_dram_db_gddr6_vendor_info_is_init_get_cb get;
} dnx_dram_db_gddr6_vendor_info_is_init_cbs;

/**
 * This structure holds the access functions for the variable manufacturer_vendor_code
 */
typedef struct {
    dnx_dram_db_gddr6_vendor_info_manufacturer_vendor_code_set_cb set;
    dnx_dram_db_gddr6_vendor_info_manufacturer_vendor_code_get_cb get;
} dnx_dram_db_gddr6_vendor_info_manufacturer_vendor_code_cbs;

/**
 * This structure holds the access functions for the variable revision_id
 */
typedef struct {
    dnx_dram_db_gddr6_vendor_info_revision_id_set_cb set;
    dnx_dram_db_gddr6_vendor_info_revision_id_get_cb get;
} dnx_dram_db_gddr6_vendor_info_revision_id_cbs;

/**
 * This structure holds the access functions for the variable density
 */
typedef struct {
    dnx_dram_db_gddr6_vendor_info_density_set_cb set;
    dnx_dram_db_gddr6_vendor_info_density_get_cb get;
} dnx_dram_db_gddr6_vendor_info_density_cbs;

/**
 * This structure holds the access functions for the variable internal_wck
 */
typedef struct {
    dnx_dram_db_gddr6_vendor_info_internal_wck_set_cb set;
    dnx_dram_db_gddr6_vendor_info_internal_wck_get_cb get;
} dnx_dram_db_gddr6_vendor_info_internal_wck_cbs;

/**
 * This structure holds the access functions for the variable wck_granularity
 */
typedef struct {
    dnx_dram_db_gddr6_vendor_info_wck_granularity_set_cb set;
    dnx_dram_db_gddr6_vendor_info_wck_granularity_get_cb get;
} dnx_dram_db_gddr6_vendor_info_wck_granularity_cbs;

/**
 * This structure holds the access functions for the variable wck_frequency
 */
typedef struct {
    dnx_dram_db_gddr6_vendor_info_wck_frequency_set_cb set;
    dnx_dram_db_gddr6_vendor_info_wck_frequency_get_cb get;
} dnx_dram_db_gddr6_vendor_info_wck_frequency_cbs;

/**
 * This structure holds the access functions for the variable vddq_off
 */
typedef struct {
    dnx_dram_db_gddr6_vendor_info_vddq_off_set_cb set;
    dnx_dram_db_gddr6_vendor_info_vddq_off_get_cb get;
} dnx_dram_db_gddr6_vendor_info_vddq_off_cbs;

/**
 * This structure holds the access functions for the variable gddr6_dram_vendor_info_t
 */
typedef struct {
    /**
     * Access struct for is_init
     */
    dnx_dram_db_gddr6_vendor_info_is_init_cbs is_init;
    /**
     * Access struct for manufacturer_vendor_code
     */
    dnx_dram_db_gddr6_vendor_info_manufacturer_vendor_code_cbs manufacturer_vendor_code;
    /**
     * Access struct for revision_id
     */
    dnx_dram_db_gddr6_vendor_info_revision_id_cbs revision_id;
    /**
     * Access struct for density
     */
    dnx_dram_db_gddr6_vendor_info_density_cbs density;
    /**
     * Access struct for internal_wck
     */
    dnx_dram_db_gddr6_vendor_info_internal_wck_cbs internal_wck;
    /**
     * Access struct for wck_granularity
     */
    dnx_dram_db_gddr6_vendor_info_wck_granularity_cbs wck_granularity;
    /**
     * Access struct for wck_frequency
     */
    dnx_dram_db_gddr6_vendor_info_wck_frequency_cbs wck_frequency;
    /**
     * Access struct for vddq_off
     */
    dnx_dram_db_gddr6_vendor_info_vddq_off_cbs vddq_off;
} dnx_dram_db_gddr6_vendor_info_cbs;

/**
 * This structure holds the access functions for the variable dnx_dram_db_t
 */
typedef struct {
    dnx_dram_db_is_init_cb is_init;
    dnx_dram_db_init_cb init;
    /**
     * Access struct for sync_manager
     */
    dnx_dram_db_sync_manager_cbs sync_manager;
    /**
     * Access struct for power_down_callback
     */
    dnx_dram_db_power_down_callback_cbs power_down_callback;
    /**
     * Access struct for override_bist_configurations_during_tuning
     */
    dnx_dram_db_override_bist_configurations_during_tuning_cbs override_bist_configurations_during_tuning;
    /**
     * Access struct for channel_soft_init_after_bist
     */
    dnx_dram_db_channel_soft_init_after_bist_cbs channel_soft_init_after_bist;
    /**
     * Access struct for traffic_tuning_core_mode
     */
    dnx_dram_db_traffic_tuning_core_mode_cbs traffic_tuning_core_mode;
    /**
     * Access struct for dynamic_calibration_enabled
     */
    dnx_dram_db_dynamic_calibration_enabled_cbs dynamic_calibration_enabled;
    /**
     * Access struct for temperature_monitoring_thread_state
     */
    dnx_dram_db_temperature_monitoring_thread_state_cbs temperature_monitoring_thread_state;
    /**
     * Access struct for temperature_monitoring_thread_handler
     */
    dnx_dram_db_temperature_monitoring_thread_handler_cbs temperature_monitoring_thread_handler;
    /**
     * Access struct for vendor_info
     */
    dnx_dram_db_vendor_info_cbs vendor_info;
    /**
     * Access struct for gddr6_vendor_info
     */
    dnx_dram_db_gddr6_vendor_info_cbs gddr6_vendor_info;
} dnx_dram_db_cbs;

/*
 * Global Variables
 */

/*
 * FUNCTIONs
 */

/*
 *
 * get_name function for enum type dnx_dram_temperature_monitoring_state_e
 * AUTO-GENERATED - DO NOT MODIFY
 *
 */
const char *
dnx_dram_temperature_monitoring_state_e_get_name(dnx_dram_temperature_monitoring_state_e value);


/*
 * Global Variables
 */

extern dnx_dram_db_cbs dnx_dram_db;

#endif /* __DNX_DRAM_ACCESS_H__ */
