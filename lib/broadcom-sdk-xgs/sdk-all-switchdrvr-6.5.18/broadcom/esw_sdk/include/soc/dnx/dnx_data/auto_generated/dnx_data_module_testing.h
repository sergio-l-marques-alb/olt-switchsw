/** \file dnx_data_module_testing.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MODULE_TESTING_H_
/*{*/
#define _DNX_DATA_MODULE_TESTING_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <bcm/fabric.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_module_testing.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_module_testing
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_module_testing_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - UNSUPPORTED:
 * submodule used to make sure that unsupporrted data will return the expected values
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule unsupported table supported_table
 * Table info:
 * supported table expected to return the required struct
 */
typedef struct
{
    /**
     * generic number
     */
    uint32 num;
} dnx_data_module_testing_unsupported_supported_table_t;

/**
 * \brief Holds values of submodule unsupported table unsupported_table
 * Table info:
 * usupported table expected to return NULL
 */
typedef struct
{
    /**
     * generic number
     */
    uint32 num;
} dnx_data_module_testing_unsupported_unsupported_table_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * supported feature expected to return 1
     */
    dnx_data_module_testing_unsupported_supported_feature,
    /**
     * usupported feature expected to return 0
     */
    dnx_data_module_testing_unsupported_unsupported_feature,

    /**
     * Must be last one!
     */
    _dnx_data_module_testing_unsupported_feature_nof
} dnx_data_module_testing_unsupported_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_unsupported_feature_get_f) (
    int unit,
    dnx_data_module_testing_unsupported_feature_e feature);

/**
 * \brief returns define data of supported_def
 * Module - 'module_testing', Submodule - 'unsupported', data - 'supported_def'
 * supported define expected to return value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     supported_def - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_unsupported_supported_def_get_f) (
    int unit);

/**
 * \brief returns define data of unsupported_def
 * Module - 'module_testing', Submodule - 'unsupported', data - 'unsupported_def'
 * unsupported feature expected to return NULL
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     unsupported_def - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_unsupported_unsupported_def_get_f) (
    int unit);

/**
 * \brief get table supported_table entry 
 * supported table expected to return the required struct
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     supported_table - returns the relevant entry values grouped in struct - see dnx_data_module_testing_unsupported_supported_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_unsupported_supported_table_t *(
    *dnx_data_module_testing_unsupported_supported_table_get_f) (
    int unit);

/**
 * \brief get table unsupported_table entry 
 * usupported table expected to return NULL
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     unsupported_table - returns the relevant entry values grouped in struct - see dnx_data_module_testing_unsupported_unsupported_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_unsupported_unsupported_table_t *(
    *dnx_data_module_testing_unsupported_unsupported_table_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MODULE_TESTING - UNSUPPORTED:
 * {
 */
/**
 * \brief Interface for module_testing unsupported data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_module_testing_unsupported_feature_get_f feature_get;
    /**
     * returns define data of supported_def
     */
    dnx_data_module_testing_unsupported_supported_def_get_f supported_def_get;
    /**
     * returns define data of unsupported_def
     */
    dnx_data_module_testing_unsupported_unsupported_def_get_f unsupported_def_get;
    /**
     * get table supported_table entry 
     */
    dnx_data_module_testing_unsupported_supported_table_get_f supported_table_get;
    /**
     * get general info table about table (for example key size)supported_table info
     */
    dnxc_data_table_info_get_f supported_table_info_get;
    /**
     * get table unsupported_table entry 
     */
    dnx_data_module_testing_unsupported_unsupported_table_get_f unsupported_table_get;
    /**
     * get general info table about table (for example key size)unsupported_table info
     */
    dnxc_data_table_info_get_f unsupported_table_info_get;
} dnx_data_if_module_testing_unsupported_t;

/*
 * }
 */

/*
 * SUBMODULE  - TYPES:
 * test different data types
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule types table all
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * test int
     */
    int intval;
    /**
     * test uint8
     */
    uint8 uint8val;
    /**
     * test char
     */
    char charval;
    /**
     * test uint16
     */
    uint16 uint16val;
    /**
     * test enum
     */
    bcm_fabric_device_type_t enumval;
    /**
     * test array
     */
    uint32 arrval[10];
    /**
     * test pbmp
     */
    bcm_pbmp_t pbmpval;
    /**
     * test string
     */
    char *strval;
    /**
     * test buffer
     */
    char bufferval[100];
} dnx_data_module_testing_types_all_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_module_testing_types_feature_nof
} dnx_data_module_testing_types_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_types_feature_get_f) (
    int unit,
    dnx_data_module_testing_types_feature_e feature);

/**
 * \brief returns define data of def_signed
 * Module - 'module_testing', Submodule - 'types', data - 'def_signed'
 * signed define
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     def_signed - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_types_def_signed_get_f) (
    int unit);

/**
 * \brief returns define data of def_unsigned
 * Module - 'module_testing', Submodule - 'types', data - 'def_unsigned'
 * unsigned define
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     def_unsigned - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_types_def_unsigned_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_signed
 * Module - 'module_testing', Submodule - 'types', data - 'num_signed'
 * signed numeric
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_signed - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_types_num_signed_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_unsigned
 * Module - 'module_testing', Submodule - 'types', data - 'num_unsigned'
 * unsigned numeric
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_unsigned - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_types_num_unsigned_get_f) (
    int unit);

/**
 * \brief get table all entry 
 * test all supported types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     all - returns the relevant entry values grouped in struct - see dnx_data_module_testing_types_all_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_types_all_t *(
    *dnx_data_module_testing_types_all_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MODULE_TESTING - TYPES:
 * {
 */
/**
 * \brief Interface for module_testing types data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_module_testing_types_feature_get_f feature_get;
    /**
     * returns define data of def_signed
     */
    dnx_data_module_testing_types_def_signed_get_f def_signed_get;
    /**
     * returns define data of def_unsigned
     */
    dnx_data_module_testing_types_def_unsigned_get_f def_unsigned_get;
    /**
     * returns numeric data of num_signed
     */
    dnx_data_module_testing_types_num_signed_get_f num_signed_get;
    /**
     * returns numeric data of num_unsigned
     */
    dnx_data_module_testing_types_num_unsigned_get_f num_unsigned_get;
    /**
     * get table all entry 
     */
    dnx_data_module_testing_types_all_get_f all_get;
    /**
     * get general info table about table (for example key size)all info
     */
    dnxc_data_table_info_get_f all_info_get;
} dnx_data_if_module_testing_types_t;

/*
 * }
 */

/*
 * SUBMODULE  - PROPERTY_METHODS:
 * test different data types
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule property_methods table enable
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * test enable method
     */
    uint32 val;
} dnx_data_module_testing_property_methods_enable_t;

/**
 * \brief Holds values of submodule property_methods table port_enable
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * test port enable method
     */
    uint32 val;
} dnx_data_module_testing_property_methods_port_enable_t;

/**
 * \brief Holds values of submodule property_methods table suffix_enable
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * test suffix enable method
     */
    uint32 val;
} dnx_data_module_testing_property_methods_suffix_enable_t;

/**
 * \brief Holds values of submodule property_methods table range
 * Table info:
 * test prop range method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_range_t;

/**
 * \brief Holds values of submodule property_methods table port_range
 * Table info:
 * test prop port range method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_port_range_t;

/**
 * \brief Holds values of submodule property_methods table suffix_range
 * Table info:
 * test prop suffix range method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_suffix_range_t;

/**
 * \brief Holds values of submodule property_methods table direct_map
 * Table info:
 * test prop direct map method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_direct_map_t;

/**
 * \brief Holds values of submodule property_methods table port_direct_map
 * Table info:
 * test prop port direct map method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_port_direct_map_t;

/**
 * \brief Holds values of submodule property_methods table suffix_direct_map
 * Table info:
 * test prop suffix direct map method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_suffix_direct_map_t;

/**
 * \brief Holds values of submodule property_methods table custom
 * Table info:
 * test prop custom method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_custom_t;

/**
 * \brief Holds values of submodule property_methods table pbmp
 * Table info:
 * test pbmp property moethod
 */
typedef struct
{
    /**
     * see table
     */
    bcm_pbmp_t val;
} dnx_data_module_testing_property_methods_pbmp_t;

/**
 * \brief Holds values of submodule property_methods table port_pbmp
 * Table info:
 * test port pbmp property moethod
 */
typedef struct
{
    /**
     * see table
     */
    bcm_pbmp_t val;
} dnx_data_module_testing_property_methods_port_pbmp_t;

/**
 * \brief Holds values of submodule property_methods table suffix_pbmp
 * Table info:
 * test suffix pbmp property moethod
 */
typedef struct
{
    /**
     * see table
     */
    bcm_pbmp_t val;
} dnx_data_module_testing_property_methods_suffix_pbmp_t;

/**
 * \brief Holds values of submodule property_methods table str
 * Table info:
 * test str property method
 */
typedef struct
{
    /**
     * see table
     */
    char *val;
} dnx_data_module_testing_property_methods_str_t;

/**
 * \brief Holds values of submodule property_methods table port_str
 * Table info:
 * test port str property moethod
 */
typedef struct
{
    /**
     * see table
     */
    char *val;
} dnx_data_module_testing_property_methods_port_str_t;

/**
 * \brief Holds values of submodule property_methods table suffix_str
 * Table info:
 * test suffix str property moethod
 */
typedef struct
{
    /**
     * see table
     */
    char *val;
} dnx_data_module_testing_property_methods_suffix_str_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * test feature enable method
     */
    dnx_data_module_testing_property_methods_feature_enable,
    /**
     * test feature enable method with default disabled
     */
    dnx_data_module_testing_property_methods_feature_disable,

    /**
     * Must be last one!
     */
    _dnx_data_module_testing_property_methods_feature_nof
} dnx_data_module_testing_property_methods_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_property_methods_feature_get_f) (
    int unit,
    dnx_data_module_testing_property_methods_feature_e feature);

/**
 * \brief returns numeric data of numeric_range
 * Module - 'module_testing', Submodule - 'property_methods', data - 'numeric_range'
 * test numeric range method
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     numeric_range - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_property_methods_numeric_range_get_f) (
    int unit);

/**
 * \brief get table enable entry 
 * test all supported types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     enable - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_enable_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_enable_t *(
    *dnx_data_module_testing_property_methods_enable_get_f) (
    int unit);

/**
 * \brief get table port_enable entry 
 * test all supported types
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port
 * 
 * \return
 *     port_enable - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_port_enable_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_port_enable_t *(
    *dnx_data_module_testing_property_methods_port_enable_get_f) (
    int unit,
    int port);

/**
 * \brief get table suffix_enable entry 
 * test all supported types
 * 
 * \param [in] unit - unit #
 * \param [in] link - link id
 * 
 * \return
 *     suffix_enable - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_suffix_enable_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_suffix_enable_t *(
    *dnx_data_module_testing_property_methods_suffix_enable_get_f) (
    int unit,
    int link);

/**
 * \brief get table range entry 
 * test prop range method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     range - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_range_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_range_t *(
    *dnx_data_module_testing_property_methods_range_get_f) (
    int unit);

/**
 * \brief get table port_range entry 
 * test prop port range method types
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port
 * 
 * \return
 *     port_range - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_port_range_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_port_range_t *(
    *dnx_data_module_testing_property_methods_port_range_get_f) (
    int unit,
    int port);

/**
 * \brief get table suffix_range entry 
 * test prop suffix range method types
 * 
 * \param [in] unit - unit #
 * \param [in] link - link id
 * 
 * \return
 *     suffix_range - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_suffix_range_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_suffix_range_t *(
    *dnx_data_module_testing_property_methods_suffix_range_get_f) (
    int unit,
    int link);

/**
 * \brief get table direct_map entry 
 * test prop direct map method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     direct_map - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_direct_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_direct_map_t *(
    *dnx_data_module_testing_property_methods_direct_map_get_f) (
    int unit);

/**
 * \brief get table port_direct_map entry 
 * test prop port direct map method types
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port
 * 
 * \return
 *     port_direct_map - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_port_direct_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_port_direct_map_t *(
    *dnx_data_module_testing_property_methods_port_direct_map_get_f) (
    int unit,
    int port);

/**
 * \brief get table suffix_direct_map entry 
 * test prop suffix direct map method types
 * 
 * \param [in] unit - unit #
 * \param [in] link - link id
 * 
 * \return
 *     suffix_direct_map - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_suffix_direct_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_suffix_direct_map_t *(
    *dnx_data_module_testing_property_methods_suffix_direct_map_get_f) (
    int unit,
    int link);

/**
 * \brief get table custom entry 
 * test prop custom method types
 * 
 * \param [in] unit - unit #
 * \param [in] link - link id
 * \param [in] pipe - pipe id
 * 
 * \return
 *     custom - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_custom_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_custom_t *(
    *dnx_data_module_testing_property_methods_custom_get_f) (
    int unit,
    int link,
    int pipe);

/**
 * \brief get table pbmp entry 
 * test pbmp property moethod
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pbmp - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_pbmp_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_pbmp_t *(
    *dnx_data_module_testing_property_methods_pbmp_get_f) (
    int unit);

/**
 * \brief get table port_pbmp entry 
 * test port pbmp property moethod
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     port_pbmp - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_port_pbmp_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_port_pbmp_t *(
    *dnx_data_module_testing_property_methods_port_pbmp_get_f) (
    int unit,
    int port);

/**
 * \brief get table suffix_pbmp entry 
 * test suffix pbmp property moethod
 * 
 * \param [in] unit - unit #
 * \param [in] index - index to test
 * 
 * \return
 *     suffix_pbmp - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_suffix_pbmp_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_suffix_pbmp_t *(
    *dnx_data_module_testing_property_methods_suffix_pbmp_get_f) (
    int unit,
    int index);

/**
 * \brief get table str entry 
 * test str property method
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     str - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_str_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_str_t *(
    *dnx_data_module_testing_property_methods_str_get_f) (
    int unit);

/**
 * \brief get table port_str entry 
 * test port str property moethod
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port number
 * 
 * \return
 *     port_str - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_port_str_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_port_str_t *(
    *dnx_data_module_testing_property_methods_port_str_get_f) (
    int unit,
    int port);

/**
 * \brief get table suffix_str entry 
 * test suffix str property moethod
 * 
 * \param [in] unit - unit #
 * \param [in] index - index to test
 * 
 * \return
 *     suffix_str - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_suffix_str_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_suffix_str_t *(
    *dnx_data_module_testing_property_methods_suffix_str_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MODULE_TESTING - PROPERTY_METHODS:
 * {
 */
/**
 * \brief Interface for module_testing property_methods data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_module_testing_property_methods_feature_get_f feature_get;
    /**
     * returns numeric data of numeric_range
     */
    dnx_data_module_testing_property_methods_numeric_range_get_f numeric_range_get;
    /**
     * get table enable entry 
     */
    dnx_data_module_testing_property_methods_enable_get_f enable_get;
    /**
     * get general info table about table (for example key size)enable info
     */
    dnxc_data_table_info_get_f enable_info_get;
    /**
     * get table port_enable entry 
     */
    dnx_data_module_testing_property_methods_port_enable_get_f port_enable_get;
    /**
     * get general info table about table (for example key size)port_enable info
     */
    dnxc_data_table_info_get_f port_enable_info_get;
    /**
     * get table suffix_enable entry 
     */
    dnx_data_module_testing_property_methods_suffix_enable_get_f suffix_enable_get;
    /**
     * get general info table about table (for example key size)suffix_enable info
     */
    dnxc_data_table_info_get_f suffix_enable_info_get;
    /**
     * get table range entry 
     */
    dnx_data_module_testing_property_methods_range_get_f range_get;
    /**
     * get general info table about table (for example key size)range info
     */
    dnxc_data_table_info_get_f range_info_get;
    /**
     * get table port_range entry 
     */
    dnx_data_module_testing_property_methods_port_range_get_f port_range_get;
    /**
     * get general info table about table (for example key size)port_range info
     */
    dnxc_data_table_info_get_f port_range_info_get;
    /**
     * get table suffix_range entry 
     */
    dnx_data_module_testing_property_methods_suffix_range_get_f suffix_range_get;
    /**
     * get general info table about table (for example key size)suffix_range info
     */
    dnxc_data_table_info_get_f suffix_range_info_get;
    /**
     * get table direct_map entry 
     */
    dnx_data_module_testing_property_methods_direct_map_get_f direct_map_get;
    /**
     * get general info table about table (for example key size)direct_map info
     */
    dnxc_data_table_info_get_f direct_map_info_get;
    /**
     * get table port_direct_map entry 
     */
    dnx_data_module_testing_property_methods_port_direct_map_get_f port_direct_map_get;
    /**
     * get general info table about table (for example key size)port_direct_map info
     */
    dnxc_data_table_info_get_f port_direct_map_info_get;
    /**
     * get table suffix_direct_map entry 
     */
    dnx_data_module_testing_property_methods_suffix_direct_map_get_f suffix_direct_map_get;
    /**
     * get general info table about table (for example key size)suffix_direct_map info
     */
    dnxc_data_table_info_get_f suffix_direct_map_info_get;
    /**
     * get table custom entry 
     */
    dnx_data_module_testing_property_methods_custom_get_f custom_get;
    /**
     * get general info table about table (for example key size)custom info
     */
    dnxc_data_table_info_get_f custom_info_get;
    /**
     * get table pbmp entry 
     */
    dnx_data_module_testing_property_methods_pbmp_get_f pbmp_get;
    /**
     * get general info table about table (for example key size)pbmp info
     */
    dnxc_data_table_info_get_f pbmp_info_get;
    /**
     * get table port_pbmp entry 
     */
    dnx_data_module_testing_property_methods_port_pbmp_get_f port_pbmp_get;
    /**
     * get general info table about table (for example key size)port_pbmp info
     */
    dnxc_data_table_info_get_f port_pbmp_info_get;
    /**
     * get table suffix_pbmp entry 
     */
    dnx_data_module_testing_property_methods_suffix_pbmp_get_f suffix_pbmp_get;
    /**
     * get general info table about table (for example key size)suffix_pbmp info
     */
    dnxc_data_table_info_get_f suffix_pbmp_info_get;
    /**
     * get table str entry 
     */
    dnx_data_module_testing_property_methods_str_get_f str_get;
    /**
     * get general info table about table (for example key size)str info
     */
    dnxc_data_table_info_get_f str_info_get;
    /**
     * get table port_str entry 
     */
    dnx_data_module_testing_property_methods_port_str_get_f port_str_get;
    /**
     * get general info table about table (for example key size)port_str info
     */
    dnxc_data_table_info_get_f port_str_info_get;
    /**
     * get table suffix_str entry 
     */
    dnx_data_module_testing_property_methods_suffix_str_get_f suffix_str_get;
    /**
     * get general info table about table (for example key size)suffix_str info
     */
    dnxc_data_table_info_get_f suffix_str_info_get;
} dnx_data_if_module_testing_property_methods_t;

/*
 * }
 */

/*
 * SUBMODULE  - DATA_POINTERS:
 * test pointers to dnx data and arithmetic operations
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule data_pointers table table_pointers
 * Table info:
 * test key using data pointer
 */
typedef struct
{
    /**
     * dummy
     */
    uint32 num_cores;
} dnx_data_module_testing_data_pointers_table_pointers_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_module_testing_data_pointers_feature_nof
} dnx_data_module_testing_data_pointers_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_data_pointers_feature_get_f) (
    int unit,
    dnx_data_module_testing_data_pointers_feature_e feature);

/**
 * \brief returns define data of cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'cores'
 * equal to num of cores
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_cores_get_f) (
    int unit);

/**
 * \brief returns define data of add_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'add_cores'
 * equal to num of cores + 1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     add_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_add_cores_get_f) (
    int unit);

/**
 * \brief returns define data of mul_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'mul_cores'
 * equal to num of cores * 3
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mul_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_mul_cores_get_f) (
    int unit);

/**
 * \brief returns define data of div_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'div_cores'
 * equal to num of cores / 2
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     div_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_div_cores_get_f) (
    int unit);

/**
 * \brief returns define data of op_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'op_cores'
 * equal to num of cores * 3 + 2 / 2 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     op_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_op_cores_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'num_cores'
 * equal to num of cores
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_num_cores_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_add_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'num_add_cores'
 * equal to num of cores + 1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_add_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_num_add_cores_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_mul_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'num_mul_cores'
 * equal to num of cores * 3
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_mul_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_num_mul_cores_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_div_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'num_div_cores'
 * equal to num of cores / 2
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_div_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_num_div_cores_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_op_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'num_op_cores'
 * equal to num of cores * 3 + 2 / 2 
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_op_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_num_op_cores_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_last_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'num_last_cores'
 * equal to num of cores
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_last_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_num_last_cores_get_f) (
    int unit);

/**
 * \brief returns numeric data of num_table_cores
 * Module - 'module_testing', Submodule - 'data_pointers', data - 'num_table_cores'
 * pointer to a table entry
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     num_table_cores - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_data_pointers_num_table_cores_get_f) (
    int unit);

/**
 * \brief get table table_pointers entry 
 * test key using data pointer
 * 
 * \param [in] unit - unit #
 * \param [in] index - size of cores
 * 
 * \return
 *     table_pointers - returns the relevant entry values grouped in struct - see dnx_data_module_testing_data_pointers_table_pointers_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_data_pointers_table_pointers_t *(
    *dnx_data_module_testing_data_pointers_table_pointers_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MODULE_TESTING - DATA_POINTERS:
 * {
 */
/**
 * \brief Interface for module_testing data_pointers data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_module_testing_data_pointers_feature_get_f feature_get;
    /**
     * returns define data of cores
     */
    dnx_data_module_testing_data_pointers_cores_get_f cores_get;
    /**
     * returns define data of add_cores
     */
    dnx_data_module_testing_data_pointers_add_cores_get_f add_cores_get;
    /**
     * returns define data of mul_cores
     */
    dnx_data_module_testing_data_pointers_mul_cores_get_f mul_cores_get;
    /**
     * returns define data of div_cores
     */
    dnx_data_module_testing_data_pointers_div_cores_get_f div_cores_get;
    /**
     * returns define data of op_cores
     */
    dnx_data_module_testing_data_pointers_op_cores_get_f op_cores_get;
    /**
     * returns numeric data of num_cores
     */
    dnx_data_module_testing_data_pointers_num_cores_get_f num_cores_get;
    /**
     * returns numeric data of num_add_cores
     */
    dnx_data_module_testing_data_pointers_num_add_cores_get_f num_add_cores_get;
    /**
     * returns numeric data of num_mul_cores
     */
    dnx_data_module_testing_data_pointers_num_mul_cores_get_f num_mul_cores_get;
    /**
     * returns numeric data of num_div_cores
     */
    dnx_data_module_testing_data_pointers_num_div_cores_get_f num_div_cores_get;
    /**
     * returns numeric data of num_op_cores
     */
    dnx_data_module_testing_data_pointers_num_op_cores_get_f num_op_cores_get;
    /**
     * returns numeric data of num_last_cores
     */
    dnx_data_module_testing_data_pointers_num_last_cores_get_f num_last_cores_get;
    /**
     * returns numeric data of num_table_cores
     */
    dnx_data_module_testing_data_pointers_num_table_cores_get_f num_table_cores_get;
    /**
     * get table table_pointers entry 
     */
    dnx_data_module_testing_data_pointers_table_pointers_get_f table_pointers_get;
    /**
     * get general info table about table (for example key size)table_pointers info
     */
    dnxc_data_table_info_get_f table_pointers_info_get;
} dnx_data_if_module_testing_data_pointers_t;

/*
 * }
 */

/*
 * SUBMODULE  - DBAL:
 * test dbal db init procedure
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule dbal table all
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * field in table size test
     */
    uint32 vlan_id_in_ingress;
    /**
     * field in table valid test
     */
    uint32 fid_in_mact;
    /**
     * usage example
     */
    uint32 key_max_val;
    /**
     * usage example
     */
    uint32 key_field_size;
} dnx_data_module_testing_dbal_all_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_module_testing_dbal_feature_nof
} dnx_data_module_testing_dbal_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_dbal_feature_get_f) (
    int unit,
    dnx_data_module_testing_dbal_feature_e feature);

/**
 * \brief returns define data of vrf_field_size
 * Module - 'module_testing', Submodule - 'dbal', data - 'vrf_field_size'
 * field size test
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vrf_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_dbal_vrf_field_size_get_f) (
    int unit);

/**
 * \brief returns define data of field_define_example
 * Module - 'module_testing', Submodule - 'dbal', data - 'field_define_example'
 * field define example
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     field_define_example - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_dbal_field_define_example_get_f) (
    int unit);

/**
 * \brief returns define data of res_max_val
 * Module - 'module_testing', Submodule - 'dbal', data - 'res_max_val'
 * usage example
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     res_max_val - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_dbal_res_max_val_get_f) (
    int unit);

/**
 * \brief returns define data of res_field_size
 * Module - 'module_testing', Submodule - 'dbal', data - 'res_field_size'
 * usage example
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     res_field_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_dbal_res_field_size_get_f) (
    int unit);

/**
 * \brief get table all entry 
 * test all supported types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     all - returns the relevant entry values grouped in struct - see dnx_data_module_testing_dbal_all_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_dbal_all_t *(
    *dnx_data_module_testing_dbal_all_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MODULE_TESTING - DBAL:
 * {
 */
/**
 * \brief Interface for module_testing dbal data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_module_testing_dbal_feature_get_f feature_get;
    /**
     * returns define data of vrf_field_size
     */
    dnx_data_module_testing_dbal_vrf_field_size_get_f vrf_field_size_get;
    /**
     * returns define data of field_define_example
     */
    dnx_data_module_testing_dbal_field_define_example_get_f field_define_example_get;
    /**
     * returns define data of res_max_val
     */
    dnx_data_module_testing_dbal_res_max_val_get_f res_max_val_get;
    /**
     * returns define data of res_field_size
     */
    dnx_data_module_testing_dbal_res_field_size_get_f res_field_size_get;
    /**
     * get table all entry 
     */
    dnx_data_module_testing_dbal_all_get_f all_get;
    /**
     * get general info table about table (for example key size)all info
     */
    dnxc_data_table_info_get_f all_info_get;
} dnx_data_if_module_testing_dbal_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_MODULE_TESTING:
 * {
 */
/**
 * \brief Interface for module_testing data
 */
typedef struct
{
    /**
     * Interface for module_testing unsupported data
     */
    dnx_data_if_module_testing_unsupported_t unsupported;
    /**
     * Interface for module_testing types data
     */
    dnx_data_if_module_testing_types_t types;
    /**
     * Interface for module_testing property_methods data
     */
    dnx_data_if_module_testing_property_methods_t property_methods;
    /**
     * Interface for module_testing data_pointers data
     */
    dnx_data_if_module_testing_data_pointers_t data_pointers;
    /**
     * Interface for module_testing dbal data
     */
    dnx_data_if_module_testing_dbal_t dbal;
} dnx_data_if_module_testing_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_module_testing_t dnx_data_module_testing;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_MODULE_TESTING_H_*/
/* *INDENT-ON* */
