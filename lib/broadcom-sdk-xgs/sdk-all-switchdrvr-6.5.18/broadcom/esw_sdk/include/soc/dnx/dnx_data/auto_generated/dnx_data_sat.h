/** \file dnx_data_sat.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_SAT_H_
/*{*/
#define _DNX_DATA_SAT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_sat.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_sat
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_sat_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - GENERAL:
 * SAT general data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_sat_general_feature_nof
} dnx_data_sat_general_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_sat_general_feature_get_f) (
    int unit,
    dnx_data_sat_general_feature_e feature);

/**
 * \brief returns define data of granularity
 * Module - 'sat', Submodule - 'general', data - 'granularity'
 * granularity (64kbits per sec)
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     granularity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_general_granularity_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SAT - GENERAL:
 * {
 */
/**
 * \brief Interface for sat general data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_sat_general_feature_get_f feature_get;
    /**
     * returns define data of granularity
     */
    dnx_data_sat_general_granularity_get_f granularity_get;
} dnx_data_if_sat_general_t;

/*
 * }
 */

/*
 * SUBMODULE  - GENERATOR:
 * SAT gtf data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_sat_generator_feature_nof
} dnx_data_sat_generator_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_sat_generator_feature_get_f) (
    int unit,
    dnx_data_sat_generator_feature_e feature);

/**
 * \brief returns define data of nof_evc_ids
 * Module - 'sat', Submodule - 'generator', data - 'nof_evc_ids'
 * Number of EVC IDs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_evc_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_nof_evc_ids_get_f) (
    int unit);

/**
 * \brief returns define data of nof_gtf_ids
 * Module - 'sat', Submodule - 'generator', data - 'nof_gtf_ids'
 * Number of GTF IDs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_gtf_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_nof_gtf_ids_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_pkt_header_max_length
 * Module - 'sat', Submodule - 'generator', data - 'gtf_pkt_header_max_length'
 * SAT GTF packet header max length
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_pkt_header_max_length - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_pkt_header_max_length_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_pkt_length_max_patn
 * Module - 'sat', Submodule - 'generator', data - 'gtf_pkt_length_max_patn'
 * SAT GTF packet length max pattern
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_pkt_length_max_patn - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_pkt_length_max_patn_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_max_seq_period
 * Module - 'sat', Submodule - 'generator', data - 'gtf_max_seq_period'
 * SAT GTF max sequence period
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_max_seq_period - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_max_seq_period_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_stamp_max_inc_step
 * Module - 'sat', Submodule - 'generator', data - 'gtf_stamp_max_inc_step'
 * SAT GTF stamp max increment step
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_stamp_max_inc_step - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_stamp_max_inc_step_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_stamp_max_inc_period
 * Module - 'sat', Submodule - 'generator', data - 'gtf_stamp_max_inc_period'
 * SAT GTF stamp max increment period
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_stamp_max_inc_period - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_stamp_max_inc_period_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_bw_max_value
 * Module - 'sat', Submodule - 'generator', data - 'gtf_bw_max_value'
 * GTF bandwidth max value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_bw_max_value - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_bw_max_value_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_rate_max
 * Module - 'sat', Submodule - 'generator', data - 'gtf_rate_max'
 * GTF max rate
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_rate_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_rate_max_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_pps_rate_max
 * Module - 'sat', Submodule - 'generator', data - 'gtf_pps_rate_max'
 * GTF max pps rate
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_pps_rate_max - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_pps_rate_max_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_pkt_header_entries
 * Module - 'sat', Submodule - 'generator', data - 'gtf_pkt_header_entries'
 * Gtf packet header entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_pkt_header_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_pkt_header_entries_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_pkt_header_length
 * Module - 'sat', Submodule - 'generator', data - 'gtf_pkt_header_length'
 * gtf packet header length
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_pkt_header_length - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_pkt_header_length_get_f) (
    int unit);

/**
 * \brief returns define data of gtf_pkt_len_patten_size
 * Module - 'sat', Submodule - 'generator', data - 'gtf_pkt_len_patten_size'
 * Packet length pattern size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     gtf_pkt_len_patten_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_generator_gtf_pkt_len_patten_size_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SAT - GENERATOR:
 * {
 */
/**
 * \brief Interface for sat generator data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_sat_generator_feature_get_f feature_get;
    /**
     * returns define data of nof_evc_ids
     */
    dnx_data_sat_generator_nof_evc_ids_get_f nof_evc_ids_get;
    /**
     * returns define data of nof_gtf_ids
     */
    dnx_data_sat_generator_nof_gtf_ids_get_f nof_gtf_ids_get;
    /**
     * returns define data of gtf_pkt_header_max_length
     */
    dnx_data_sat_generator_gtf_pkt_header_max_length_get_f gtf_pkt_header_max_length_get;
    /**
     * returns define data of gtf_pkt_length_max_patn
     */
    dnx_data_sat_generator_gtf_pkt_length_max_patn_get_f gtf_pkt_length_max_patn_get;
    /**
     * returns define data of gtf_max_seq_period
     */
    dnx_data_sat_generator_gtf_max_seq_period_get_f gtf_max_seq_period_get;
    /**
     * returns define data of gtf_stamp_max_inc_step
     */
    dnx_data_sat_generator_gtf_stamp_max_inc_step_get_f gtf_stamp_max_inc_step_get;
    /**
     * returns define data of gtf_stamp_max_inc_period
     */
    dnx_data_sat_generator_gtf_stamp_max_inc_period_get_f gtf_stamp_max_inc_period_get;
    /**
     * returns define data of gtf_bw_max_value
     */
    dnx_data_sat_generator_gtf_bw_max_value_get_f gtf_bw_max_value_get;
    /**
     * returns define data of gtf_rate_max
     */
    dnx_data_sat_generator_gtf_rate_max_get_f gtf_rate_max_get;
    /**
     * returns define data of gtf_pps_rate_max
     */
    dnx_data_sat_generator_gtf_pps_rate_max_get_f gtf_pps_rate_max_get;
    /**
     * returns define data of gtf_pkt_header_entries
     */
    dnx_data_sat_generator_gtf_pkt_header_entries_get_f gtf_pkt_header_entries_get;
    /**
     * returns define data of gtf_pkt_header_length
     */
    dnx_data_sat_generator_gtf_pkt_header_length_get_f gtf_pkt_header_length_get;
    /**
     * returns define data of gtf_pkt_len_patten_size
     */
    dnx_data_sat_generator_gtf_pkt_len_patten_size_get_f gtf_pkt_len_patten_size_get;
} dnx_data_if_sat_generator_t;

/*
 * }
 */

/*
 * SUBMODULE  - COLLECTOR:
 * SAT ctf data
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_sat_collector_feature_nof
} dnx_data_sat_collector_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_sat_collector_feature_get_f) (
    int unit,
    dnx_data_sat_collector_feature_e feature);

/**
 * \brief returns define data of nof_ctf_ids
 * Module - 'sat', Submodule - 'collector', data - 'nof_ctf_ids'
 * Number of CTF IDs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_ctf_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_nof_ctf_ids_get_f) (
    int unit);

/**
 * \brief returns define data of nof_oam_ids
 * Module - 'sat', Submodule - 'collector', data - 'nof_oam_ids'
 * Number of OAM IDs
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_oam_ids - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_nof_oam_ids_get_f) (
    int unit);

/**
 * \brief returns define data of mef_payload_offset
 * Module - 'sat', Submodule - 'collector', data - 'mef_payload_offset'
 * SAT MEF payload offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mef_payload_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_mef_payload_offset_get_f) (
    int unit);

/**
 * \brief returns define data of mef_seq_num_offset
 * Module - 'sat', Submodule - 'collector', data - 'mef_seq_num_offset'
 * SAT MEF seq num offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mef_seq_num_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_mef_seq_num_offset_get_f) (
    int unit);

/**
 * \brief returns define data of mef_time_stamp_offset
 * Module - 'sat', Submodule - 'collector', data - 'mef_time_stamp_offset'
 * SAT MEF time stamp offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mef_time_stamp_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_mef_time_stamp_offset_get_f) (
    int unit);

/**
 * \brief returns define data of mef_crc_byte_offset
 * Module - 'sat', Submodule - 'collector', data - 'mef_crc_byte_offset'
 * SAT MEF crc byte offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mef_crc_byte_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_mef_crc_byte_offset_get_f) (
    int unit);

/**
 * \brief returns define data of y1731_payload_offset
 * Module - 'sat', Submodule - 'collector', data - 'y1731_payload_offset'
 * SAT Y1731 payload offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     y1731_payload_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_y1731_payload_offset_get_f) (
    int unit);

/**
 * \brief returns define data of y1731_seq_num_offset
 * Module - 'sat', Submodule - 'collector', data - 'y1731_seq_num_offset'
 * SAT Y1731 seq num offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     y1731_seq_num_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_y1731_seq_num_offset_get_f) (
    int unit);

/**
 * \brief returns define data of y1731_time_stamp_offset
 * Module - 'sat', Submodule - 'collector', data - 'y1731_time_stamp_offset'
 * SAT Y1731 time stamp offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     y1731_time_stamp_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_y1731_time_stamp_offset_get_f) (
    int unit);

/**
 * \brief returns define data of y1731_crc_byte_offset
 * Module - 'sat', Submodule - 'collector', data - 'y1731_crc_byte_offset'
 * SAT Y1731 crc byte offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     y1731_crc_byte_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_y1731_crc_byte_offset_get_f) (
    int unit);

/**
 * \brief returns define data of ctf_bins_limit_entries
 * Module - 'sat', Submodule - 'collector', data - 'ctf_bins_limit_entries'
 * ctf bins limit entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ctf_bins_limit_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_ctf_bins_limit_entries_get_f) (
    int unit);

/**
 * \brief returns define data of trap_id_entries
 * Module - 'sat', Submodule - 'collector', data - 'trap_id_entries'
 * Trap id entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trap_id_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_trap_id_entries_get_f) (
    int unit);

/**
 * \brief returns define data of trap_data_entries
 * Module - 'sat', Submodule - 'collector', data - 'trap_data_entries'
 * Trap data entries
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trap_data_entries - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_sat_collector_trap_data_entries_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SAT - COLLECTOR:
 * {
 */
/**
 * \brief Interface for sat collector data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_sat_collector_feature_get_f feature_get;
    /**
     * returns define data of nof_ctf_ids
     */
    dnx_data_sat_collector_nof_ctf_ids_get_f nof_ctf_ids_get;
    /**
     * returns define data of nof_oam_ids
     */
    dnx_data_sat_collector_nof_oam_ids_get_f nof_oam_ids_get;
    /**
     * returns define data of mef_payload_offset
     */
    dnx_data_sat_collector_mef_payload_offset_get_f mef_payload_offset_get;
    /**
     * returns define data of mef_seq_num_offset
     */
    dnx_data_sat_collector_mef_seq_num_offset_get_f mef_seq_num_offset_get;
    /**
     * returns define data of mef_time_stamp_offset
     */
    dnx_data_sat_collector_mef_time_stamp_offset_get_f mef_time_stamp_offset_get;
    /**
     * returns define data of mef_crc_byte_offset
     */
    dnx_data_sat_collector_mef_crc_byte_offset_get_f mef_crc_byte_offset_get;
    /**
     * returns define data of y1731_payload_offset
     */
    dnx_data_sat_collector_y1731_payload_offset_get_f y1731_payload_offset_get;
    /**
     * returns define data of y1731_seq_num_offset
     */
    dnx_data_sat_collector_y1731_seq_num_offset_get_f y1731_seq_num_offset_get;
    /**
     * returns define data of y1731_time_stamp_offset
     */
    dnx_data_sat_collector_y1731_time_stamp_offset_get_f y1731_time_stamp_offset_get;
    /**
     * returns define data of y1731_crc_byte_offset
     */
    dnx_data_sat_collector_y1731_crc_byte_offset_get_f y1731_crc_byte_offset_get;
    /**
     * returns define data of ctf_bins_limit_entries
     */
    dnx_data_sat_collector_ctf_bins_limit_entries_get_f ctf_bins_limit_entries_get;
    /**
     * returns define data of trap_id_entries
     */
    dnx_data_sat_collector_trap_id_entries_get_f trap_id_entries_get;
    /**
     * returns define data of trap_data_entries
     */
    dnx_data_sat_collector_trap_data_entries_get_f trap_data_entries_get;
} dnx_data_if_sat_collector_t;

/*
 * }
 */

/*
 * SUBMODULE  - RX_FLOW_PARAM:
 * SAT rx flow param
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * indicate if the rx flow param table index is natural id or odd/even id
     */
    dnx_data_sat_rx_flow_param_natural_id,
    /**
     * indicate if the rx flow param table index is natural id or odd/even id
     */
    dnx_data_sat_rx_flow_param_odd_even_id,
    /**
     * indicate if TWAMP modei enable.
     */
    dnx_data_sat_rx_flow_param_twamp_mode,
    /**
     * indicate if TWAMP RX time stamp enable.
     */
    dnx_data_sat_rx_flow_param_twamp_rx_time_stamp,

    /**
     * Must be last one!
     */
    _dnx_data_sat_rx_flow_param_feature_nof
} dnx_data_sat_rx_flow_param_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_sat_rx_flow_param_feature_get_f) (
    int unit,
    dnx_data_sat_rx_flow_param_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SAT - RX_FLOW_PARAM:
 * {
 */
/**
 * \brief Interface for sat rx_flow_param data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_sat_rx_flow_param_feature_get_f feature_get;
} dnx_data_if_sat_rx_flow_param_t;

/*
 * }
 */

/*
 * SUBMODULE  - TX_FLOW_PARAM:
 * SAT tx param
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     *  SEQ number wrap-around 
     */
    dnx_data_sat_tx_flow_param_seq_number_wrap_around,

    /**
     * Must be last one!
     */
    _dnx_data_sat_tx_flow_param_feature_nof
} dnx_data_sat_tx_flow_param_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_sat_tx_flow_param_feature_get_f) (
    int unit,
    dnx_data_sat_tx_flow_param_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_SAT - TX_FLOW_PARAM:
 * {
 */
/**
 * \brief Interface for sat tx_flow_param data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_sat_tx_flow_param_feature_get_f feature_get;
} dnx_data_if_sat_tx_flow_param_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_SAT:
 * {
 */
/**
 * \brief Interface for sat data
 */
typedef struct
{
    /**
     * Interface for sat general data
     */
    dnx_data_if_sat_general_t general;
    /**
     * Interface for sat generator data
     */
    dnx_data_if_sat_generator_t generator;
    /**
     * Interface for sat collector data
     */
    dnx_data_if_sat_collector_t collector;
    /**
     * Interface for sat rx_flow_param data
     */
    dnx_data_if_sat_rx_flow_param_t rx_flow_param;
    /**
     * Interface for sat tx_flow_param data
     */
    dnx_data_if_sat_tx_flow_param_t tx_flow_param;
} dnx_data_if_sat_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_sat_t dnx_data_sat;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_SAT_H_*/
/* *INDENT-ON* */
