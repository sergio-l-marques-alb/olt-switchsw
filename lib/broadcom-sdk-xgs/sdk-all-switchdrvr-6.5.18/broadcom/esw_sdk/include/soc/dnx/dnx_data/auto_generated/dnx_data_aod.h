/** \file dnx_data_aod.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_AOD_H_
/*{*/
#define _DNX_DATA_AOD_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_aod.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_aod
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_aod_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - TABLES:
 * AOD tables
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule tables table ERPP_FORWARD_CODE_SELECTION
 * Table info:
 * ERPP_FORWARD_CODE_SELECTION
 */
typedef struct
{
    /**
     * indicates whether entry is valid
     */
    uint32 valid;
    /**
     * entry documentation
     */
    char *doc;
    /**
     * FAI
     */
    uint32 FAI;
    /**
     * FAI_mask
     */
    uint32 FAI_mask;
    /**
     * FAI_valid
     */
    uint32 FAI_valid;
    /**
     * FWD_Layer_Qualifier
     */
    uint32 FWD_Layer_Qualifier;
    /**
     * FWD_Layer_Qualifier_mask
     */
    uint32 FWD_Layer_Qualifier_mask;
    /**
     * FWD_Layer_Qualifier_valid
     */
    uint32 FWD_Layer_Qualifier_valid;
    /**
     * FWD_Layer_Type
     */
    char *FWD_Layer_Type;
    /**
     * FWD_Layer_Type_mask
     */
    uint32 FWD_Layer_Type_mask;
    /**
     * FWD_Layer_Type_valid
     */
    uint32 FWD_Layer_Type_valid;
    /**
     * FWD_code_port_profile
     */
    char *FWD_code_port_profile;
    /**
     * FWD_code_port_profile_mask
     */
    uint32 FWD_code_port_profile_mask;
    /**
     * FWD_code_port_profile_valid
     */
    uint32 FWD_code_port_profile_valid;
    /**
     * TM_Action_Type
     */
    uint32 TM_Action_Type;
    /**
     * TM_Action_Type_mask
     */
    uint32 TM_Action_Type_mask;
    /**
     * TM_Action_Type_valid
     */
    uint32 TM_Action_Type_valid;
    /**
     * ingress_trapped
     */
    uint32 ingress_trapped;
    /**
     * ingress_trapped_mask
     */
    uint32 ingress_trapped_mask;
    /**
     * ingress_trapped_valid
     */
    uint32 ingress_trapped_valid;
    /**
     * is_Applet
     */
    uint32 is_Applet;
    /**
     * is_Applet_mask
     */
    uint32 is_Applet_mask;
    /**
     * is_Applet_valid
     */
    uint32 is_Applet_valid;
    /**
     * is_TDM
     */
    uint32 is_TDM;
    /**
     * is_TDM_mask
     */
    uint32 is_TDM_mask;
    /**
     * is_TDM_valid
     */
    uint32 is_TDM_valid;
    /**
     * Egress_FWD_Code
     */
    char *Egress_FWD_Code;
    /**
     * Egress_FWD_Code_valid
     */
    uint32 Egress_FWD_Code_valid;
} dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_t;

/**
 * \brief Holds values of submodule tables table ETPP_FORWARD_CODE_SELECTION
 * Table info:
 * ETPP_FORWARD_CODE_SELECTION
 */
typedef struct
{
    /**
     * indicates whether entry is valid
     */
    uint32 valid;
    /**
     * entry documentation
     */
    char *doc;
    /**
     * ACE_Value
     */
    char *ACE_Value;
    /**
     * ACE_Value_mask
     */
    uint32 ACE_Value_mask;
    /**
     * ACE_Value_valid
     */
    uint32 ACE_Value_valid;
    /**
     * FAI
     */
    uint32 FAI;
    /**
     * FAI_mask
     */
    uint32 FAI_mask;
    /**
     * FAI_valid
     */
    uint32 FAI_valid;
    /**
     * FWD_Layer_Qualifier
     */
    uint32 FWD_Layer_Qualifier;
    /**
     * FWD_Layer_Qualifier_mask
     */
    uint32 FWD_Layer_Qualifier_mask;
    /**
     * FWD_Layer_Qualifier_valid
     */
    uint32 FWD_Layer_Qualifier_valid;
    /**
     * FWD_Layer_Type
     */
    char *FWD_Layer_Type;
    /**
     * FWD_Layer_Type_mask
     */
    uint32 FWD_Layer_Type_mask;
    /**
     * FWD_Layer_Type_valid
     */
    uint32 FWD_Layer_Type_valid;
    /**
     * FWD_code_port_profile
     */
    char *FWD_code_port_profile;
    /**
     * FWD_code_port_profile_mask
     */
    uint32 FWD_code_port_profile_mask;
    /**
     * FWD_code_port_profile_valid
     */
    uint32 FWD_code_port_profile_valid;
    /**
     * TM_Action_Type
     */
    uint32 TM_Action_Type;
    /**
     * TM_Action_Type_mask
     */
    uint32 TM_Action_Type_mask;
    /**
     * TM_Action_Type_valid
     */
    uint32 TM_Action_Type_valid;
    /**
     * ingress_trapped
     */
    uint32 ingress_trapped;
    /**
     * ingress_trapped_mask
     */
    uint32 ingress_trapped_mask;
    /**
     * ingress_trapped_valid
     */
    uint32 ingress_trapped_valid;
    /**
     * is_Applet
     */
    uint32 is_Applet;
    /**
     * is_Applet_mask
     */
    uint32 is_Applet_mask;
    /**
     * is_Applet_valid
     */
    uint32 is_Applet_valid;
    /**
     * is_TDM
     */
    uint32 is_TDM;
    /**
     * is_TDM_mask
     */
    uint32 is_TDM_mask;
    /**
     * is_TDM_valid
     */
    uint32 is_TDM_valid;
    /**
     * Egress_FWD_Code
     */
    char *Egress_FWD_Code;
    /**
     * Egress_FWD_Code_valid
     */
    uint32 Egress_FWD_Code_valid;
} dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_t;

/**
 * \brief Holds values of submodule tables table EGRESS_PER_LAYER_PROTOCOL
 * Table info:
 * EGRESS_PER_LAYER_PROTOCOL
 */
typedef struct
{
    /**
     * indicates whether entry is valid
     */
    uint32 valid;
    /**
     * entry documentation
     */
    char *doc;
    /**
     * Layer_Types
     */
    char *Layer_Types;
    /**
     * Layer_Types_mask
     */
    uint32 Layer_Types_mask;
    /**
     * Layer_Types_valid
     */
    uint32 Layer_Types_valid;
    /**
     * ERPP_1st_Parser_Parser_Context
     */
    char *ERPP_1st_Parser_Parser_Context;
    /**
     * ERPP_1st_Parser_Parser_Context_valid
     */
    uint32 ERPP_1st_Parser_Parser_Context_valid;
} dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_t;

/**
 * \brief Holds values of submodule tables table EGRESS_PARSING_CONTEXT_MAP_JR1_MODE
 * Table info:
 * EGRESS_PARSING_CONTEXT_MAP_JR1_MODE
 */
typedef struct
{
    /**
     * indicates whether entry is valid
     */
    uint32 valid;
    /**
     * entry documentation
     */
    char *doc;
    /**
     * JR_FWD_CODE
     */
    char *JR_FWD_CODE;
    /**
     * JR_FWD_CODE_mask
     */
    uint32 JR_FWD_CODE_mask;
    /**
     * JR_FWD_CODE_valid
     */
    uint32 JR_FWD_CODE_valid;
    /**
     * ERPP_1st_Parser_Parser_Context
     */
    char *ERPP_1st_Parser_Parser_Context;
    /**
     * ERPP_1st_Parser_Parser_Context_valid
     */
    uint32 ERPP_1st_Parser_Parser_Context_valid;
} dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_aod_tables_feature_nof
} dnx_data_aod_tables_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_aod_tables_feature_get_f) (
    int unit,
    dnx_data_aod_tables_feature_e feature);

/**
 * \brief get table ERPP_FORWARD_CODE_SELECTION entry 
 * ERPP_FORWARD_CODE_SELECTION
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * \param [in] soc_value - soc property value
 * 
 * \return
 *     ERPP_FORWARD_CODE_SELECTION - returns the relevant entry values grouped in struct - see dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_t *(
    *dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_get_f) (
    int unit,
    int index,
    int soc_value);

/**
 * \brief get table ETPP_FORWARD_CODE_SELECTION entry 
 * ETPP_FORWARD_CODE_SELECTION
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * \param [in] soc_value - soc property value
 * 
 * \return
 *     ETPP_FORWARD_CODE_SELECTION - returns the relevant entry values grouped in struct - see dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_t *(
    *dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_get_f) (
    int unit,
    int index,
    int soc_value);

/**
 * \brief get table EGRESS_PER_LAYER_PROTOCOL entry 
 * EGRESS_PER_LAYER_PROTOCOL
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * \param [in] soc_value - soc property value
 * 
 * \return
 *     EGRESS_PER_LAYER_PROTOCOL - returns the relevant entry values grouped in struct - see dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_t *(
    *dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_get_f) (
    int unit,
    int index,
    int soc_value);

/**
 * \brief get table EGRESS_PARSING_CONTEXT_MAP_JR1_MODE entry 
 * EGRESS_PARSING_CONTEXT_MAP_JR1_MODE
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * \param [in] soc_value - soc property value
 * 
 * \return
 *     EGRESS_PARSING_CONTEXT_MAP_JR1_MODE - returns the relevant entry values grouped in struct - see dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_t *(
    *dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_get_f) (
    int unit,
    int index,
    int soc_value);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_AOD - TABLES:
 * {
 */
/**
 * \brief Interface for aod tables data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_aod_tables_feature_get_f feature_get;
    /**
     * get table ERPP_FORWARD_CODE_SELECTION entry 
     */
    dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_get_f ERPP_FORWARD_CODE_SELECTION_get;
    /**
     * get general info table about table (for example key size)ERPP_FORWARD_CODE_SELECTION info
     */
    dnxc_data_table_info_get_f ERPP_FORWARD_CODE_SELECTION_info_get;
    /**
     * get table ETPP_FORWARD_CODE_SELECTION entry 
     */
    dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_get_f ETPP_FORWARD_CODE_SELECTION_get;
    /**
     * get general info table about table (for example key size)ETPP_FORWARD_CODE_SELECTION info
     */
    dnxc_data_table_info_get_f ETPP_FORWARD_CODE_SELECTION_info_get;
    /**
     * get table EGRESS_PER_LAYER_PROTOCOL entry 
     */
    dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_get_f EGRESS_PER_LAYER_PROTOCOL_get;
    /**
     * get general info table about table (for example key size)EGRESS_PER_LAYER_PROTOCOL info
     */
    dnxc_data_table_info_get_f EGRESS_PER_LAYER_PROTOCOL_info_get;
    /**
     * get table EGRESS_PARSING_CONTEXT_MAP_JR1_MODE entry 
     */
    dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_get_f EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_get;
    /**
     * get general info table about table (for example key size)EGRESS_PARSING_CONTEXT_MAP_JR1_MODE info
     */
    dnxc_data_table_info_get_f EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_info_get;
} dnx_data_if_aod_tables_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_AOD:
 * {
 */
/**
 * \brief Interface for aod data
 */
typedef struct
{
    /**
     * Interface for aod tables data
     */
    dnx_data_if_aod_tables_t tables;
} dnx_data_if_aod_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_aod_t dnx_data_aod;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_AOD_H_*/
/* *INDENT-ON* */
