/** \file dnx_data_aod_sizes.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_AOD_SIZES_H_
/*{*/
#define _DNX_DATA_AOD_SIZES_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_aod_sizes.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_aod_sizes
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_aod_sizes_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - AOD:
 * AOD table sizes
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule AOD table sizes
 * Table info:
 * AOD table sizes
 */
typedef struct
{
    /**
     * None
     */
    uint32 value;
} dnx_data_aod_sizes_AOD_sizes_t;

/**
 * \brief Holds values of submodule AOD table dynamic_sizes
 * Table info:
 * AOD table sizes
 */
typedef struct
{
    /**
     * None
     */
    uint32 value;
} dnx_data_aod_sizes_AOD_dynamic_sizes_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_aod_sizes_AOD_feature_nof
} dnx_data_aod_sizes_AOD_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_aod_sizes_AOD_feature_get_f) (
    int unit,
    dnx_data_aod_sizes_AOD_feature_e feature);

/**
 * \brief returns numeric data of count
 * Module - 'aod_sizes', Submodule - 'AOD', data - 'count'
 * None
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     count - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_aod_sizes_AOD_count_get_f) (
    int unit);

/**
 * \brief get table sizes entry 
 * AOD table sizes
 * 
 * \param [in] unit - unit #
 * \param [in] index - None
 * 
 * \return
 *     sizes - returns the relevant entry values grouped in struct - see dnx_data_aod_sizes_AOD_sizes_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_aod_sizes_AOD_sizes_t *(
    *dnx_data_aod_sizes_AOD_sizes_get_f) (
    int unit,
    int index);

/**
 * \brief get table dynamic_sizes entry 
 * AOD table sizes
 * 
 * \param [in] unit - unit #
 * \param [in] index - None
 * 
 * \return
 *     dynamic_sizes - returns the relevant entry values grouped in struct - see dnx_data_aod_sizes_AOD_dynamic_sizes_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef const dnx_data_aod_sizes_AOD_dynamic_sizes_t *(
    *dnx_data_aod_sizes_AOD_dynamic_sizes_get_f) (
    int unit,
    int index);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_AOD_SIZES - AOD:
 * {
 */
/**
 * \brief Interface for aod_sizes AOD data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_aod_sizes_AOD_feature_get_f feature_get;
    /**
     * returns numeric data of count
     */
    dnx_data_aod_sizes_AOD_count_get_f count_get;
    /**
     * get table sizes entry 
     */
    dnx_data_aod_sizes_AOD_sizes_get_f sizes_get;
    /**
     * get general info table about table (for example key size)sizes info
     */
    dnxc_data_table_info_get_f sizes_info_get;
    /**
     * get table dynamic_sizes entry 
     */
    dnx_data_aod_sizes_AOD_dynamic_sizes_get_f dynamic_sizes_get;
    /**
     * get general info table about table (for example key size)dynamic_sizes info
     */
    dnxc_data_table_info_get_f dynamic_sizes_info_get;
} dnx_data_if_aod_sizes_AOD_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_AOD_SIZES:
 * {
 */
/**
 * \brief Interface for aod_sizes data
 */
typedef struct
{
    /**
     * Interface for aod_sizes AOD data
     */
    dnx_data_if_aod_sizes_AOD_t AOD;
} dnx_data_if_aod_sizes_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_aod_sizes_t dnx_data_aod_sizes;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_AOD_SIZES_H_*/
/* *INDENT-ON* */
