/** \file dnx/swstate/auto_generated/types/dnx_field_key_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNX_FIELD_KEY_TYPES_H__
#define __DNX_FIELD_KEY_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_types.h>
/*
 * STRUCTs
 */

/**
 * Structure Holds the lsb and the size of qualifier type inside the Key
 * The qual type,lsb and size are saved so that action_add API can find the needed qualifier in the key
 */
typedef struct {
    /**
     * Qualifier type
     */
    dnx_field_qual_t qual_type;
    /**
     * LSB bit of the qualifier inside the key
     */
    uint16 lsb;
    /**
     * Size of the qualifier in the key
     */
    uint8 size;
} dnx_field_qual_map_in_key_t;

/**
 * Hold Key template,
 * Mapping of all the Qualifier configured for Field Group DB inside the key
 * i.e. the lsb and the size of each qualifier inside the key
 */
typedef struct {
    /**
     * Mapping of each qualifier inside the key. End of 'valid' entries is marked
     * by an entry with 'key_qual_map.qual_type = DNX_FIELD_QUAL_TYPE_INVALID'
     */
    dnx_field_qual_map_in_key_t key_qual_map[DNX_DATA_MAX_FIELD_GROUP_NOF_QUALS_PER_FG];
    /**
     * Hold the actual key size in Bit Resolution,
     * i.e. sum, in bits, of all qualifiers configured for this key
     */
    uint16 key_size_in_bits;
} dnx_field_key_template_t;

/**
 * Structure holds info on bit-ranges allocated on keys for a given context.
 * This whole structure is meaningful only if the 'bit-range' feature has been used for
 * allocation of a range on specified key. (Currently used for Direct Extraction only).
 */
typedef struct {
    /**
     * Boolean flag. If 'FALSE' then all elements of this structure are meaningless
     */
    uint8 bit_range_valid;
    /**
     * The LS bit of the bit-range that was allocated on the first key (That is 'id[0]' on
     * 'dnx_field_key_id_t'). Note that we, currently, only support a single key on this feature.
     */
    uint8 bit_range_offset;
    /**
     * The size (in bits) of the bit-range that was allocated on the first key (That is 'id[0]' on
     * 'dnx_field_key_id_t'). Note that we, currently, only support a single key on this feature.
     * This should be the same value as assigned when key template was created and is added
     * here mainly for cross-checking.
     */
    uint8 bit_range_size;
} dnx_field_bit_range_t;

/**
 * Structure holds the key-ids of the allocated keys for the given field group
 */
typedef struct {
    /**
     * Hold the information regarding the key allocated for the Context ID
     */
    dbal_enum_value_field_field_key_e id[DNX_DATA_MAX_FIELD_GROUP_NOF_KEYS_PER_FG_MAX];
    /**
     * Part of the key that was allocated (only meaningful for half-keys allocations
     */
    dnx_field_key_part_type_e key_part;
    /**
     * Hold the information regarding the bit-range allocated on key (specified in 'id', above) for this Context ID
     * Used for the implementation of the 'Multiple Direct Extractions' feature (allocation of ranges, within one key,
     * for various direct extraction field groups.
     */
    dnx_field_bit_range_t bit_range;
} dnx_field_key_id_t;


#endif /* __DNX_FIELD_KEY_TYPES_H__ */
