/** \file dnx_data_internal_intr.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_INTR_H_
/*{*/
#define _DNX_DATA_INTERNAL_INTR_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_intr.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_intr_submodule_general,
    dnx_data_intr_submodule_ser,

    /**
     * Must be last one!
     */
    _dnx_data_intr_submodule_nof
} dnx_data_intr_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_intr_general_feature_get(
    int unit,
    dnx_data_intr_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_intr_general_define_nof_interrupts,
    dnx_data_intr_general_define_polled_irq_mode,
    dnx_data_intr_general_define_polled_irq_priority,
    dnx_data_intr_general_define_polled_irq_delay,
    dnx_data_intr_general_define_table_dma_enable,
    dnx_data_intr_general_define_tdma_timeout_usec,
    dnx_data_intr_general_define_tdma_intr_enable,
    dnx_data_intr_general_define_tslam_dma_enable,
    dnx_data_intr_general_define_tslam_timeout_usec,
    dnx_data_intr_general_define_tslam_intr_enable,
    dnx_data_intr_general_define_schan_timeout_usec,
    dnx_data_intr_general_define_schan_intr_enable,
    dnx_data_intr_general_define_miim_timeout_usec,
    dnx_data_intr_general_define_miim_intr_enable,
    dnx_data_intr_general_define_sbus_dma_interval,
    dnx_data_intr_general_define_sbus_dma_intr_enable,
    dnx_data_intr_general_define_mem_clear_chunk_size,

    /**
     * Must be last one!
     */
    _dnx_data_intr_general_define_nof
} dnx_data_intr_general_define_e;

/* Get Data */
/**
 * \brief returns numeric data of nof_interrupts
 * Module - 'intr', Submodule - 'general', data - 'nof_interrupts'
 * Number of interrupts in the device.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_interrupts - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_nof_interrupts_get(
    int unit);

/**
 * \brief returns numeric data of polled_irq_mode
 * Module - 'intr', Submodule - 'general', data - 'polled_irq_mode'
 * Are interrupts supported polling mode.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     polled_irq_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_polled_irq_mode_get(
    int unit);

/**
 * \brief returns numeric data of polled_irq_priority
 * Module - 'intr', Submodule - 'general', data - 'polled_irq_priority'
 * The priority of IRQ polling thread.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     polled_irq_priority - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_intr_general_polled_irq_priority_get(
    int unit);

/**
 * \brief returns numeric data of polled_irq_delay
 * Module - 'intr', Submodule - 'general', data - 'polled_irq_delay'
 * The minimum delay between IRQ polls.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     polled_irq_delay - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_polled_irq_delay_get(
    int unit);

/**
 * \brief returns numeric data of table_dma_enable
 * Module - 'intr', Submodule - 'general', data - 'table_dma_enable'
 * Enable/disable table DMA operations.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     table_dma_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_table_dma_enable_get(
    int unit);

/**
 * \brief returns numeric data of tdma_timeout_usec
 * Module - 'intr', Submodule - 'general', data - 'tdma_timeout_usec'
 * Table DMA operation timeout.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tdma_timeout_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_tdma_timeout_usec_get(
    int unit);

/**
 * \brief returns numeric data of tdma_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'tdma_intr_enable'
 * Table DMA done is interrupt driven or by polling.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tdma_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_tdma_intr_enable_get(
    int unit);

/**
 * \brief returns numeric data of tslam_dma_enable
 * Module - 'intr', Submodule - 'general', data - 'tslam_dma_enable'
 * Enable/disable tslam DMA operations.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tslam_dma_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_tslam_dma_enable_get(
    int unit);

/**
 * \brief returns numeric data of tslam_timeout_usec
 * Module - 'intr', Submodule - 'general', data - 'tslam_timeout_usec'
 * Tslam DMA operation timeout.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tslam_timeout_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_tslam_timeout_usec_get(
    int unit);

/**
 * \brief returns numeric data of tslam_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'tslam_intr_enable'
 * Tslam DMA done is interrupt driven or by polling.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tslam_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_tslam_intr_enable_get(
    int unit);

/**
 * \brief returns numeric data of schan_timeout_usec
 * Module - 'intr', Submodule - 'general', data - 'schan_timeout_usec'
 * Schan operation timeout.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     schan_timeout_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_schan_timeout_usec_get(
    int unit);

/**
 * \brief returns numeric data of schan_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'schan_intr_enable'
 * Schan operation done is interrupt driven or by polling.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     schan_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_schan_intr_enable_get(
    int unit);

/**
 * \brief returns numeric data of miim_timeout_usec
 * Module - 'intr', Submodule - 'general', data - 'miim_timeout_usec'
 * MIM operation timeout.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     miim_timeout_usec - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_miim_timeout_usec_get(
    int unit);

/**
 * \brief returns numeric data of miim_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'miim_intr_enable'
 * MIM operation done is interrupt driver or by polling.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     miim_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_miim_intr_enable_get(
    int unit);

/**
 * \brief returns numeric data of sbus_dma_interval
 * Module - 'intr', Submodule - 'general', data - 'sbus_dma_interval'
 * sbus DMA operation interval.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sbus_dma_interval - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_sbus_dma_interval_get(
    int unit);

/**
 * \brief returns numeric data of sbus_dma_intr_enable
 * Module - 'intr', Submodule - 'general', data - 'sbus_dma_intr_enable'
 * sbus DMA interrupt enable.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sbus_dma_intr_enable - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_sbus_dma_intr_enable_get(
    int unit);

/**
 * \brief returns numeric data of mem_clear_chunk_size
 * Module - 'intr', Submodule - 'general', data - 'mem_clear_chunk_size'
 * sbus DMA chunk size.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mem_clear_chunk_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_general_mem_clear_chunk_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_intr_general_table_active_on_init,
    dnx_data_intr_general_table_disable_on_init,
    dnx_data_intr_general_table_disable_print_on_init,
    dnx_data_intr_general_table_block_intr_field_mapping,

    /**
     * Must be last one!
     */
    _dnx_data_intr_general_table_nof
} dnx_data_intr_general_table_e;

/* Get Data */
/**
 * \brief get table active_on_init entry 
 * interrupt active on init
 * 
 * \param [in] unit - unit #
 * \param [in] offset - active interrupt offset
 * 
 * \return
 *     active_on_init - returns the relevant entry values grouped in struct - see dnx_data_intr_general_active_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_intr_general_active_on_init_t * dnx_data_intr_general_active_on_init_get(
    int unit,
    int offset);

/**
 * \brief get table disable_on_init entry 
 * interrupt disabled on init
 * 
 * \param [in] unit - unit #
 * \param [in] offset - disable interrupt offset
 * 
 * \return
 *     disable_on_init - returns the relevant entry values grouped in struct - see dnx_data_intr_general_disable_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_intr_general_disable_on_init_t * dnx_data_intr_general_disable_on_init_get(
    int unit,
    int offset);

/**
 * \brief get table disable_print_on_init entry 
 * interrupt disable print on init
 * 
 * \param [in] unit - unit #
 * \param [in] offset - disable print on init offset
 * 
 * \return
 *     disable_print_on_init - returns the relevant entry values grouped in struct - see dnx_data_intr_general_disable_print_on_init_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_intr_general_disable_print_on_init_t * dnx_data_intr_general_disable_print_on_init_get(
    int unit,
    int offset);

/**
 * \brief get table block_intr_field_mapping entry 
 * block to intr field mapping
 * 
 * \param [in] unit - unit #
 * \param [in] offset - block to intr field mapping
 * 
 * \return
 *     block_intr_field_mapping - returns the relevant entry values grouped in struct - see dnx_data_intr_general_block_intr_field_mapping_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_intr_general_block_intr_field_mapping_t * dnx_data_intr_general_block_intr_field_mapping_get(
    int unit,
    int offset);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'intr', Submodule - 'general', table - 'active_on_init'
 * interrupt active on init
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_general_active_on_init_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'intr', Submodule - 'general', table - 'disable_on_init'
 * interrupt disabled on init
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_general_disable_on_init_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'intr', Submodule - 'general', table - 'disable_print_on_init'
 * interrupt disable print on init
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_general_disable_print_on_init_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'intr', Submodule - 'general', table - 'block_intr_field_mapping'
 * block to intr field mapping
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_general_block_intr_field_mapping_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)active_on_init info
 * interrupt active on init
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     active_on_init - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_intr_general_active_on_init_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)disable_on_init info
 * interrupt disabled on init
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     disable_on_init - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_intr_general_disable_on_init_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)disable_print_on_init info
 * interrupt disable print on init
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     disable_print_on_init - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_intr_general_disable_print_on_init_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)block_intr_field_mapping info
 * block to intr field mapping
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     block_intr_field_mapping - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_intr_general_block_intr_field_mapping_info_get(
    int unit);

/*
 * SUBMODULE SER:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_intr_ser_feature_get(
    int unit,
    dnx_data_intr_ser_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_intr_ser_define_tcam_protection_issue,

    /**
     * Must be last one!
     */
    _dnx_data_intr_ser_define_nof
} dnx_data_intr_ser_define_e;

/* Get Data */
/**
 * \brief returns define data of tcam_protection_issue
 * Module - 'intr', Submodule - 'ser', data - 'tcam_protection_issue'
 * If there are tcam protect machine issue at device\n
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tcam_protection_issue - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_intr_ser_tcam_protection_issue_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_intr_ser_table_mem_mask,
    dnx_data_intr_ser_table_xor_mem,
    dnx_data_intr_ser_table_intr_exception,
    dnx_data_intr_ser_table_static_mem,
    dnx_data_intr_ser_table_mdb_mem_map,

    /**
     * Must be last one!
     */
    _dnx_data_intr_ser_table_nof
} dnx_data_intr_ser_table_e;

/* Get Data */
/**
 * \brief get table mem_mask entry 
 * memory need masked
 * 
 * \param [in] unit - unit #
 * \param [in] index - memory masked index
 * 
 * \return
 *     mem_mask - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_mem_mask_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_intr_ser_mem_mask_t * dnx_data_intr_ser_mem_mask_get(
    int unit,
    int index);

/**
 * \brief get table xor_mem entry 
 * XOR memory information
 * 
 * \param [in] unit - unit #
 * \param [in] index - XOR memory index
 * 
 * \return
 *     xor_mem - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_xor_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_intr_ser_xor_mem_t * dnx_data_intr_ser_xor_mem_get(
    int unit,
    int index);

/**
 * \brief get table intr_exception entry 
 * interrupt exceptional
 * 
 * \param [in] unit - unit #
 * \param [in] index - exceptional_intr index
 * 
 * \return
 *     intr_exception - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_intr_exception_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_intr_ser_intr_exception_t * dnx_data_intr_ser_intr_exception_get(
    int unit,
    int index);

/**
 * \brief get table static_mem entry 
 * static memory
 * 
 * \param [in] unit - unit #
 * \param [in] index - static memory index
 * 
 * \return
 *     static_mem - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_static_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_intr_ser_static_mem_t * dnx_data_intr_ser_static_mem_get(
    int unit,
    int index);

/**
 * \brief get table mdb_mem_map entry 
 * mdb memory mapping
 * 
 * \param [in] unit - unit #
 * \param [in] index - mdb memory index
 * 
 * \return
 *     mdb_mem_map - returns the relevant entry values grouped in struct - see dnx_data_intr_ser_mdb_mem_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_intr_ser_mdb_mem_map_t * dnx_data_intr_ser_mdb_mem_map_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'intr', Submodule - 'ser', table - 'mem_mask'
 * memory need masked
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_ser_mem_mask_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'intr', Submodule - 'ser', table - 'xor_mem'
 * XOR memory information
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_ser_xor_mem_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'intr', Submodule - 'ser', table - 'intr_exception'
 * interrupt exceptional
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_ser_intr_exception_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'intr', Submodule - 'ser', table - 'static_mem'
 * static memory
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_ser_static_mem_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'intr', Submodule - 'ser', table - 'mdb_mem_map'
 * mdb memory mapping
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_ser_mdb_mem_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)mem_mask info
 * memory need masked
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mem_mask - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_intr_ser_mem_mask_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)xor_mem info
 * XOR memory information
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     xor_mem - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_intr_ser_xor_mem_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)intr_exception info
 * interrupt exceptional
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     intr_exception - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_intr_ser_intr_exception_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)static_mem info
 * static memory
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     static_mem - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_intr_ser_static_mem_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)mdb_mem_map info
 * mdb memory mapping
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mdb_mem_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_intr_ser_mdb_mem_map_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_intr_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_INTR_H_*/
/* *INDENT-ON* */
