/** \file dnx_data_internal_headers.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_HEADERS_H_
/*{*/
#define _DNX_DATA_INTERNAL_HEADERS_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_headers.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_headers_submodule_ftmh,
    dnx_data_headers_submodule_tsh,
    dnx_data_headers_submodule_otsh,
    dnx_data_headers_submodule_optimized_ftmh,
    dnx_data_headers_submodule_internal,
    dnx_data_headers_submodule_internal_legacy,
    dnx_data_headers_submodule_fhei_sz1_trap_sniff,
    dnx_data_headers_submodule_fhei_trap_sniff_legacy,
    dnx_data_headers_submodule_udh,
    dnx_data_headers_submodule_ftmh_legacy,
    dnx_data_headers_submodule_otsh_legacy,
    dnx_data_headers_submodule_system_headers,
    dnx_data_headers_submodule_otmh,
    dnx_data_headers_submodule_pph,
    dnx_data_headers_submodule_general,
    dnx_data_headers_submodule_hw_bug,

    /**
     * Must be last one!
     */
    _dnx_data_headers_submodule_nof
} dnx_data_headers_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE FTMH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_ftmh_feature_get(
    int unit,
    dnx_data_headers_ftmh_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_ftmh_define_packet_size_offset,
    dnx_data_headers_ftmh_define_traffic_class_offset,
    dnx_data_headers_ftmh_define_src_sys_port_aggregate_offset,
    dnx_data_headers_ftmh_define_pp_dsp_offset,
    dnx_data_headers_ftmh_define_drop_precedence_offset,
    dnx_data_headers_ftmh_define_tm_action_type_offset,
    dnx_data_headers_ftmh_define_tm_action_is_mc_offset,
    dnx_data_headers_ftmh_define_outlif_offset,
    dnx_data_headers_ftmh_define_cni_offset,
    dnx_data_headers_ftmh_define_ecn_enable_offset,
    dnx_data_headers_ftmh_define_tm_profile_offset,
    dnx_data_headers_ftmh_define_visibility_offset,
    dnx_data_headers_ftmh_define_internal_header_type_offset,
    dnx_data_headers_ftmh_define_tsh_en_offset,
    dnx_data_headers_ftmh_define_internal_header_en_offset,
    dnx_data_headers_ftmh_define_tm_dest_ext_present_offset,
    dnx_data_headers_ftmh_define_ase_present_offset,
    dnx_data_headers_ftmh_define_flow_id_ext_present_offset,
    dnx_data_headers_ftmh_define_bier_bfr_ext_present_offset,
    dnx_data_headers_ftmh_define_stack_route_history_bmp_offset,
    dnx_data_headers_ftmh_define_tm_dst_offset,
    dnx_data_headers_ftmh_define_observation_info_offset,
    dnx_data_headers_ftmh_define_destination_offset,
    dnx_data_headers_ftmh_define_src_sysport_offset,
    dnx_data_headers_ftmh_define_trajectory_trace_type_offset,
    dnx_data_headers_ftmh_define_port_offset,
    dnx_data_headers_ftmh_define_direction_offset,
    dnx_data_headers_ftmh_define_session_id_offset,
    dnx_data_headers_ftmh_define_truncated_offset,
    dnx_data_headers_ftmh_define_en_offset,
    dnx_data_headers_ftmh_define_cos_offset,
    dnx_data_headers_ftmh_define_vlan_offset,
    dnx_data_headers_ftmh_define_erspan_type_offset,
    dnx_data_headers_ftmh_define_flow_id_offset,
    dnx_data_headers_ftmh_define_flow_profile_offset,
    dnx_data_headers_ftmh_define_int_profile_offset,
    dnx_data_headers_ftmh_define_int_type_offset,
    dnx_data_headers_ftmh_define_packet_size_bits,
    dnx_data_headers_ftmh_define_traffic_class_bits,
    dnx_data_headers_ftmh_define_src_sys_port_aggregate_bits,
    dnx_data_headers_ftmh_define_pp_dsp_bits,
    dnx_data_headers_ftmh_define_drop_precedence_bits,
    dnx_data_headers_ftmh_define_tm_action_type_bits,
    dnx_data_headers_ftmh_define_tm_action_is_mc_bits,
    dnx_data_headers_ftmh_define_outlif_bits,
    dnx_data_headers_ftmh_define_cni_bits,
    dnx_data_headers_ftmh_define_ecn_enable_bits,
    dnx_data_headers_ftmh_define_tm_profile_bits,
    dnx_data_headers_ftmh_define_visibility_bits,
    dnx_data_headers_ftmh_define_tsh_en_bits,
    dnx_data_headers_ftmh_define_internal_header_en_bits,
    dnx_data_headers_ftmh_define_tm_dest_ext_present_bits,
    dnx_data_headers_ftmh_define_ase_present_bits,
    dnx_data_headers_ftmh_define_flow_id_ext_present_bits,
    dnx_data_headers_ftmh_define_bier_bfr_ext_present_bits,
    dnx_data_headers_ftmh_define_tm_dst_bits,
    dnx_data_headers_ftmh_define_observation_info_bits,
    dnx_data_headers_ftmh_define_destination_bits,
    dnx_data_headers_ftmh_define_src_sysport_bits,
    dnx_data_headers_ftmh_define_trajectory_trace_type_bits,
    dnx_data_headers_ftmh_define_port_bits,
    dnx_data_headers_ftmh_define_direction_bits,
    dnx_data_headers_ftmh_define_session_id_bits,
    dnx_data_headers_ftmh_define_truncated_bits,
    dnx_data_headers_ftmh_define_en_bits,
    dnx_data_headers_ftmh_define_cos_bits,
    dnx_data_headers_ftmh_define_vlan_bits,
    dnx_data_headers_ftmh_define_erspan_type_bits,
    dnx_data_headers_ftmh_define_flow_id_bits,
    dnx_data_headers_ftmh_define_flow_profile_bits,
    dnx_data_headers_ftmh_define_base_header_size,
    dnx_data_headers_ftmh_define_ase_header_size,
    dnx_data_headers_ftmh_define_tm_dst_size,
    dnx_data_headers_ftmh_define_flow_id_header_size,
    dnx_data_headers_ftmh_define_int_profile_bits,
    dnx_data_headers_ftmh_define_int_type_bits,
    dnx_data_headers_ftmh_define_add_dsp_ext,

    /**
     * Must be last one!
     */
    _dnx_data_headers_ftmh_define_nof
} dnx_data_headers_ftmh_define_e;

/* Get Data */
/**
 * \brief returns define data of packet_size_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'packet_size_offset'
 * packet size offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_size_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_packet_size_offset_get(
    int unit);

/**
 * \brief returns define data of traffic_class_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'traffic_class_offset'
 * traffic class offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     traffic_class_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_traffic_class_offset_get(
    int unit);

/**
 * \brief returns define data of src_sys_port_aggregate_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'src_sys_port_aggregate_offset'
 * source system port aggregate offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     src_sys_port_aggregate_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_src_sys_port_aggregate_offset_get(
    int unit);

/**
 * \brief returns define data of pp_dsp_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'pp_dsp_offset'
 * PP DSP offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pp_dsp_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_pp_dsp_offset_get(
    int unit);

/**
 * \brief returns define data of drop_precedence_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'drop_precedence_offset'
 * Drop Precedence offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     drop_precedence_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_drop_precedence_offset_get(
    int unit);

/**
 * \brief returns define data of tm_action_type_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_action_type_offset'
 * tm action type offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_action_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_action_type_offset_get(
    int unit);

/**
 * \brief returns define data of tm_action_is_mc_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_action_is_mc_offset'
 * tm action is multicast offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_action_is_mc_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_action_is_mc_offset_get(
    int unit);

/**
 * \brief returns define data of outlif_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'outlif_offset'
 * multicast_id or mc_rep_idx or outlif offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     outlif_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_outlif_offset_get(
    int unit);

/**
 * \brief returns define data of cni_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'cni_offset'
 * CNI offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cni_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_cni_offset_get(
    int unit);

/**
 * \brief returns define data of ecn_enable_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'ecn_enable_offset'
 * ECN enable offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecn_enable_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_ecn_enable_offset_get(
    int unit);

/**
 * \brief returns define data of tm_profile_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_profile_offset'
 * tm profile offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_profile_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_profile_offset_get(
    int unit);

/**
 * \brief returns define data of visibility_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'visibility_offset'
 * visibility offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     visibility_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_visibility_offset_get(
    int unit);

/**
 * \brief returns define data of internal_header_type_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'internal_header_type_offset'
 * internal header type offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     internal_header_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_internal_header_type_offset_get(
    int unit);

/**
 * \brief returns define data of tsh_en_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'tsh_en_offset'
 * TSH enable offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tsh_en_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tsh_en_offset_get(
    int unit);

/**
 * \brief returns define data of internal_header_en_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'internal_header_en_offset'
 * internal header enable offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     internal_header_en_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_internal_header_en_offset_get(
    int unit);

/**
 * \brief returns define data of tm_dest_ext_present_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_dest_ext_present_offset'
 * tm destination extension present offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_dest_ext_present_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_dest_ext_present_offset_get(
    int unit);

/**
 * \brief returns define data of ase_present_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'ase_present_offset'
 * application specific extension present offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ase_present_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_ase_present_offset_get(
    int unit);

/**
 * \brief returns define data of flow_id_ext_present_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'flow_id_ext_present_offset'
 * flow iD extension present offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_id_ext_present_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_flow_id_ext_present_offset_get(
    int unit);

/**
 * \brief returns define data of bier_bfr_ext_present_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'bier_bfr_ext_present_offset'
 * bier bfr extension present offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bier_bfr_ext_present_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_bier_bfr_ext_present_offset_get(
    int unit);

/**
 * \brief returns define data of stack_route_history_bmp_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'stack_route_history_bmp_offset'
 * stacking route history bitmap offset in stacking header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stack_route_history_bmp_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_stack_route_history_bmp_offset_get(
    int unit);

/**
 * \brief returns define data of tm_dst_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_dst_offset'
 * TM destination offset in TM destination extension header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_dst_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_dst_offset_get(
    int unit);

/**
 * \brief returns define data of observation_info_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'observation_info_offset'
 * observation information offset in ase header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     observation_info_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_observation_info_offset_get(
    int unit);

/**
 * \brief returns define data of destination_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'destination_offset'
 * destination offset in ase header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     destination_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_destination_offset_get(
    int unit);

/**
 * \brief returns define data of src_sysport_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'src_sysport_offset'
 * source system port offset in ase header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     src_sysport_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_src_sysport_offset_get(
    int unit);

/**
 * \brief returns define data of trajectory_trace_type_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'trajectory_trace_type_offset'
 * trajectory trace type offset in ase header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trajectory_trace_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_trajectory_trace_type_offset_get(
    int unit);

/**
 * \brief returns define data of port_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'port_offset'
 * Port field offset in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_port_offset_get(
    int unit);

/**
 * \brief returns define data of direction_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'direction_offset'
 * Direction field offset in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     direction_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_direction_offset_get(
    int unit);

/**
 * \brief returns define data of session_id_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'session_id_offset'
 * Session_ID field offset in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     session_id_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_session_id_offset_get(
    int unit);

/**
 * \brief returns define data of truncated_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'truncated_offset'
 * Truncated flag field offset in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     truncated_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_truncated_offset_get(
    int unit);

/**
 * \brief returns define data of en_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'en_offset'
 * The trunk encapsulation type field offset in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     en_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_en_offset_get(
    int unit);

/**
 * \brief returns define data of cos_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'cos_offset'
 * Class of service field offset in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cos_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_cos_offset_get(
    int unit);

/**
 * \brief returns define data of vlan_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'vlan_offset'
 * Vlan field offset in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vlan_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_vlan_offset_get(
    int unit);

/**
 * \brief returns define data of erspan_type_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'erspan_type_offset'
 * ERSPAN type offset in ERSPAN/sFLow header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     erspan_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_erspan_type_offset_get(
    int unit);

/**
 * \brief returns define data of flow_id_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'flow_id_offset'
 * Flow id offset in Flow-ID header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_id_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_flow_id_offset_get(
    int unit);

/**
 * \brief returns define data of flow_profile_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'flow_profile_offset'
 * Flow profile offset in Flow-ID header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_profile_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_flow_profile_offset_get(
    int unit);

/**
 * \brief returns define data of int_profile_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'int_profile_offset'
 * int profile offset in Inband Network Telemetry header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     int_profile_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_int_profile_offset_get(
    int unit);

/**
 * \brief returns define data of int_type_offset
 * Module - 'headers', Submodule - 'ftmh', data - 'int_type_offset'
 * INT type offset in Inband Network Telemetry header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     int_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_int_type_offset_get(
    int unit);

/**
 * \brief returns define data of packet_size_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'packet_size_bits'
 * packet size bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_packet_size_bits_get(
    int unit);

/**
 * \brief returns define data of traffic_class_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'traffic_class_bits'
 * traffic class bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     traffic_class_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_traffic_class_bits_get(
    int unit);

/**
 * \brief returns define data of src_sys_port_aggregate_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'src_sys_port_aggregate_bits'
 * source system port aggregate bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     src_sys_port_aggregate_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_src_sys_port_aggregate_bits_get(
    int unit);

/**
 * \brief returns define data of pp_dsp_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'pp_dsp_bits'
 * PP DSP bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pp_dsp_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_pp_dsp_bits_get(
    int unit);

/**
 * \brief returns define data of drop_precedence_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'drop_precedence_bits'
 * Drop Precedence bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     drop_precedence_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_drop_precedence_bits_get(
    int unit);

/**
 * \brief returns define data of tm_action_type_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_action_type_bits'
 * tm action type bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_action_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_action_type_bits_get(
    int unit);

/**
 * \brief returns define data of tm_action_is_mc_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_action_is_mc_bits'
 * tm action is multicast bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_action_is_mc_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_action_is_mc_bits_get(
    int unit);

/**
 * \brief returns define data of outlif_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'outlif_bits'
 * multicast_id or mc_rep_idx or outlif bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     outlif_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_outlif_bits_get(
    int unit);

/**
 * \brief returns define data of cni_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'cni_bits'
 * CNI bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cni_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_cni_bits_get(
    int unit);

/**
 * \brief returns define data of ecn_enable_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'ecn_enable_bits'
 * ECN enable bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecn_enable_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_ecn_enable_bits_get(
    int unit);

/**
 * \brief returns define data of tm_profile_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_profile_bits'
 * tm profile bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_profile_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_profile_bits_get(
    int unit);

/**
 * \brief returns define data of visibility_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'visibility_bits'
 * visibility bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     visibility_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_visibility_bits_get(
    int unit);

/**
 * \brief returns define data of tsh_en_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'tsh_en_bits'
 * TSH enable bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tsh_en_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tsh_en_bits_get(
    int unit);

/**
 * \brief returns define data of internal_header_en_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'internal_header_en_bits'
 * internal header enable bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     internal_header_en_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_internal_header_en_bits_get(
    int unit);

/**
 * \brief returns define data of tm_dest_ext_present_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_dest_ext_present_bits'
 * tm destination extension present bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_dest_ext_present_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_dest_ext_present_bits_get(
    int unit);

/**
 * \brief returns define data of ase_present_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'ase_present_bits'
 * application specific extension present bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ase_present_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_ase_present_bits_get(
    int unit);

/**
 * \brief returns define data of flow_id_ext_present_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'flow_id_ext_present_bits'
 * flow iD extension present bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_id_ext_present_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_flow_id_ext_present_bits_get(
    int unit);

/**
 * \brief returns define data of bier_bfr_ext_present_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'bier_bfr_ext_present_bits'
 * bier bfr extension present bits in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     bier_bfr_ext_present_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_bier_bfr_ext_present_bits_get(
    int unit);

/**
 * \brief returns define data of tm_dst_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_dst_bits'
 * TM destination bits in TM destination extension header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_dst_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_dst_bits_get(
    int unit);

/**
 * \brief returns define data of observation_info_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'observation_info_bits'
 * observation information bits in ase header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     observation_info_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_observation_info_bits_get(
    int unit);

/**
 * \brief returns define data of destination_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'destination_bits'
 * destination bits in ase header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     destination_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_destination_bits_get(
    int unit);

/**
 * \brief returns define data of src_sysport_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'src_sysport_bits'
 * source system port bits in ase header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     src_sysport_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_src_sysport_bits_get(
    int unit);

/**
 * \brief returns define data of trajectory_trace_type_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'trajectory_trace_type_bits'
 * trajectory trace type bits in ase header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     trajectory_trace_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_trajectory_trace_type_bits_get(
    int unit);

/**
 * \brief returns define data of port_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'port_bits'
 * Port field bits in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_port_bits_get(
    int unit);

/**
 * \brief returns define data of direction_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'direction_bits'
 * Direction field bits in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     direction_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_direction_bits_get(
    int unit);

/**
 * \brief returns define data of session_id_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'session_id_bits'
 * Session_ID field bits in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     session_id_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_session_id_bits_get(
    int unit);

/**
 * \brief returns define data of truncated_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'truncated_bits'
 * Truncated flag field bits in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     truncated_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_truncated_bits_get(
    int unit);

/**
 * \brief returns define data of en_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'en_bits'
 * The trunk encapsulation type field bits in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     en_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_en_bits_get(
    int unit);

/**
 * \brief returns define data of cos_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'cos_bits'
 * Class of service field bits in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cos_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_cos_bits_get(
    int unit);

/**
 * \brief returns define data of vlan_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'vlan_bits'
 * Vlan field bits in ERSPAN header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     vlan_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_vlan_bits_get(
    int unit);

/**
 * \brief returns define data of erspan_type_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'erspan_type_bits'
 * ERSPAN type bits in ERSPAN/sFlow header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     erspan_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_erspan_type_bits_get(
    int unit);

/**
 * \brief returns define data of flow_id_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'flow_id_bits'
 * Flow id bits in Flow-ID header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_id_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_flow_id_bits_get(
    int unit);

/**
 * \brief returns define data of flow_profile_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'flow_profile_bits'
 * Flow profile bits in Flow-ID header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_profile_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_flow_profile_bits_get(
    int unit);

/**
 * \brief returns define data of base_header_size
 * Module - 'headers', Submodule - 'ftmh', data - 'base_header_size'
 * FTMH BASE size in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     base_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_base_header_size_get(
    int unit);

/**
 * \brief returns define data of ase_header_size
 * Module - 'headers', Submodule - 'ftmh', data - 'ase_header_size'
 * FTMH Ase header extension size in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ase_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_ase_header_size_get(
    int unit);

/**
 * \brief returns define data of tm_dst_size
 * Module - 'headers', Submodule - 'ftmh', data - 'tm_dst_size'
 * FTMH TM destination extension header size in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_dst_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_tm_dst_size_get(
    int unit);

/**
 * \brief returns define data of flow_id_header_size
 * Module - 'headers', Submodule - 'ftmh', data - 'flow_id_header_size'
 * FTMH Flow-ID extension header size in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     flow_id_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_flow_id_header_size_get(
    int unit);

/**
 * \brief returns define data of int_profile_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'int_profile_bits'
 * int profile bits in Inband Network Telemetry header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     int_profile_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_int_profile_bits_get(
    int unit);

/**
 * \brief returns define data of int_type_bits
 * Module - 'headers', Submodule - 'ftmh', data - 'int_type_bits'
 * INT type bits in Inband Network Telemetry header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     int_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_int_type_bits_get(
    int unit);

/**
 * \brief returns numeric data of add_dsp_ext
 * Module - 'headers', Submodule - 'ftmh', data - 'add_dsp_ext'
 * adding dsp extension for the ftmh
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     add_dsp_ext - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_add_dsp_ext_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_ftmh_table_nof
} dnx_data_headers_ftmh_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE TSH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_tsh_feature_get(
    int unit,
    dnx_data_headers_tsh_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_tsh_define_base_header_size,

    /**
     * Must be last one!
     */
    _dnx_data_headers_tsh_define_nof
} dnx_data_headers_tsh_define_e;

/* Get Data */
/**
 * \brief returns define data of base_header_size
 * Module - 'headers', Submodule - 'tsh', data - 'base_header_size'
 * TSH header size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     base_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_tsh_base_header_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_tsh_table_nof
} dnx_data_headers_tsh_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE OTSH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_otsh_feature_get(
    int unit,
    dnx_data_headers_otsh_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_otsh_define_base_header_size,

    /**
     * Must be last one!
     */
    _dnx_data_headers_otsh_define_nof
} dnx_data_headers_otsh_define_e;

/* Get Data */
/**
 * \brief returns define data of base_header_size
 * Module - 'headers', Submodule - 'otsh', data - 'base_header_size'
 * OTSH header size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     base_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_base_header_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_otsh_table_nof
} dnx_data_headers_otsh_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE OPTIMIZED_FTMH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_optimized_ftmh_feature_get(
    int unit,
    dnx_data_headers_optimized_ftmh_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_optimized_ftmh_define_base_header_size,
    dnx_data_headers_optimized_ftmh_define_packet_size_7_0_offset,
    dnx_data_headers_optimized_ftmh_define_tm_action_is_mc_offset,
    dnx_data_headers_optimized_ftmh_define_packet_size_8_offset,
    dnx_data_headers_optimized_ftmh_define_user_defined_offset,
    dnx_data_headers_optimized_ftmh_define_fap_id_offset,
    dnx_data_headers_optimized_ftmh_define_pp_dsp_or_mc_id_offset,

    /**
     * Must be last one!
     */
    _dnx_data_headers_optimized_ftmh_define_nof
} dnx_data_headers_optimized_ftmh_define_e;

/* Get Data */
/**
 * \brief returns define data of base_header_size
 * Module - 'headers', Submodule - 'optimized_ftmh', data - 'base_header_size'
 * Optimized FTMH header size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     base_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_optimized_ftmh_base_header_size_get(
    int unit);

/**
 * \brief returns define data of packet_size_7_0_offset
 * Module - 'headers', Submodule - 'optimized_ftmh', data - 'packet_size_7_0_offset'
 * packet size offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_size_7_0_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_optimized_ftmh_packet_size_7_0_offset_get(
    int unit);

/**
 * \brief returns define data of tm_action_is_mc_offset
 * Module - 'headers', Submodule - 'optimized_ftmh', data - 'tm_action_is_mc_offset'
 * tm action is multicast offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_action_is_mc_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_optimized_ftmh_tm_action_is_mc_offset_get(
    int unit);

/**
 * \brief returns define data of packet_size_8_offset
 * Module - 'headers', Submodule - 'optimized_ftmh', data - 'packet_size_8_offset'
 * packet size offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_size_8_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_optimized_ftmh_packet_size_8_offset_get(
    int unit);

/**
 * \brief returns define data of user_defined_offset
 * Module - 'headers', Submodule - 'optimized_ftmh', data - 'user_defined_offset'
 * packet size offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     user_defined_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_optimized_ftmh_user_defined_offset_get(
    int unit);

/**
 * \brief returns define data of fap_id_offset
 * Module - 'headers', Submodule - 'optimized_ftmh', data - 'fap_id_offset'
 * fap id of multicast_id[18:8] offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fap_id_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_optimized_ftmh_fap_id_offset_get(
    int unit);

/**
 * \brief returns define data of pp_dsp_or_mc_id_offset
 * Module - 'headers', Submodule - 'optimized_ftmh', data - 'pp_dsp_or_mc_id_offset'
 * pp_dsp or multicast_id[7:0] offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pp_dsp_or_mc_id_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_optimized_ftmh_pp_dsp_or_mc_id_offset_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_optimized_ftmh_table_nof
} dnx_data_headers_optimized_ftmh_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE INTERNAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_internal_feature_get(
    int unit,
    dnx_data_headers_internal_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_internal_define_parsing_start_type_offset,
    dnx_data_headers_internal_define_parsing_start_type_bits,
    dnx_data_headers_internal_define_lif_ext_type_offset,
    dnx_data_headers_internal_define_lif_ext_type_bits,
    dnx_data_headers_internal_define_fai_offset,
    dnx_data_headers_internal_define_fai_bits,
    dnx_data_headers_internal_define_tail_edit_offset,
    dnx_data_headers_internal_define_tail_edit_bits,
    dnx_data_headers_internal_define_forward_domain_offset,
    dnx_data_headers_internal_define_forward_domain_bits,
    dnx_data_headers_internal_define_inlif_offset,
    dnx_data_headers_internal_define_inlif_bits,
    dnx_data_headers_internal_define_fhei_size,
    dnx_data_headers_internal_define_fhei_size_sz0,
    dnx_data_headers_internal_define_fhei_size_sz1,
    dnx_data_headers_internal_define_fhei_size_sz2,
    dnx_data_headers_internal_define_fhei_size_offset,
    dnx_data_headers_internal_define_fhei_size_bits,
    dnx_data_headers_internal_define_learning_ext_present_offset,
    dnx_data_headers_internal_define_learning_ext_present_bits,
    dnx_data_headers_internal_define_learning_ext_size,
    dnx_data_headers_internal_define_ttl_offset,
    dnx_data_headers_internal_define_ttl_bits,
    dnx_data_headers_internal_define_eth_rm_fli_offset,
    dnx_data_headers_internal_define_eth_rm_fli_bits,
    dnx_data_headers_internal_define_eth_rm_pso_offset,
    dnx_data_headers_internal_define_eth_rm_pso_bits,

    /**
     * Must be last one!
     */
    _dnx_data_headers_internal_define_nof
} dnx_data_headers_internal_define_e;

/* Get Data */
/**
 * \brief returns define data of parsing_start_type_offset
 * Module - 'headers', Submodule - 'internal', data - 'parsing_start_type_offset'
 * Parsing start type offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     parsing_start_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_parsing_start_type_offset_get(
    int unit);

/**
 * \brief returns define data of parsing_start_type_bits
 * Module - 'headers', Submodule - 'internal', data - 'parsing_start_type_bits'
 * Parsing start type bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     parsing_start_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_parsing_start_type_bits_get(
    int unit);

/**
 * \brief returns define data of lif_ext_type_offset
 * Module - 'headers', Submodule - 'internal', data - 'lif_ext_type_offset'
 * Lif Extenson type offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lif_ext_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_lif_ext_type_offset_get(
    int unit);

/**
 * \brief returns define data of lif_ext_type_bits
 * Module - 'headers', Submodule - 'internal', data - 'lif_ext_type_bits'
 * Lif Extenson type bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     lif_ext_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_lif_ext_type_bits_get(
    int unit);

/**
 * \brief returns define data of fai_offset
 * Module - 'headers', Submodule - 'internal', data - 'fai_offset'
 * FAI offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fai_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_fai_offset_get(
    int unit);

/**
 * \brief returns define data of fai_bits
 * Module - 'headers', Submodule - 'internal', data - 'fai_bits'
 * FAI bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fai_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_fai_bits_get(
    int unit);

/**
 * \brief returns define data of tail_edit_offset
 * Module - 'headers', Submodule - 'internal', data - 'tail_edit_offset'
 * tail edit profile offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tail_edit_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_tail_edit_offset_get(
    int unit);

/**
 * \brief returns define data of tail_edit_bits
 * Module - 'headers', Submodule - 'internal', data - 'tail_edit_bits'
 * tail edit profile bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tail_edit_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_tail_edit_bits_get(
    int unit);

/**
 * \brief returns define data of forward_domain_offset
 * Module - 'headers', Submodule - 'internal', data - 'forward_domain_offset'
 * Forward domain in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forward_domain_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_forward_domain_offset_get(
    int unit);

/**
 * \brief returns define data of forward_domain_bits
 * Module - 'headers', Submodule - 'internal', data - 'forward_domain_bits'
 * Forward domain bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forward_domain_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_forward_domain_bits_get(
    int unit);

/**
 * \brief returns define data of inlif_offset
 * Module - 'headers', Submodule - 'internal', data - 'inlif_offset'
 * In-LIF offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     inlif_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_inlif_offset_get(
    int unit);

/**
 * \brief returns define data of inlif_bits
 * Module - 'headers', Submodule - 'internal', data - 'inlif_bits'
 * In-LIF bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     inlif_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_inlif_bits_get(
    int unit);

/**
 * \brief returns define data of fhei_size
 * Module - 'headers', Submodule - 'internal', data - 'fhei_size'
 * FHEI header size for internal header stamped
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_fhei_size_get(
    int unit);

/**
 * \brief returns define data of fhei_size_sz0
 * Module - 'headers', Submodule - 'internal', data - 'fhei_size_sz0'
 * FHEI header size of type SZ0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_sz0 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_fhei_size_sz0_get(
    int unit);

/**
 * \brief returns define data of fhei_size_sz1
 * Module - 'headers', Submodule - 'internal', data - 'fhei_size_sz1'
 * FHEI header size of type SZ1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_sz1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_fhei_size_sz1_get(
    int unit);

/**
 * \brief returns define data of fhei_size_sz2
 * Module - 'headers', Submodule - 'internal', data - 'fhei_size_sz2'
 * FHEI header size of type SZ2
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_sz2 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_fhei_size_sz2_get(
    int unit);

/**
 * \brief returns define data of fhei_size_offset
 * Module - 'headers', Submodule - 'internal', data - 'fhei_size_offset'
 * FHEI size offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_fhei_size_offset_get(
    int unit);

/**
 * \brief returns define data of fhei_size_bits
 * Module - 'headers', Submodule - 'internal', data - 'fhei_size_bits'
 * FHEI size bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_fhei_size_bits_get(
    int unit);

/**
 * \brief returns define data of learning_ext_present_offset
 * Module - 'headers', Submodule - 'internal', data - 'learning_ext_present_offset'
 * Learning Extension present offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     learning_ext_present_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_learning_ext_present_offset_get(
    int unit);

/**
 * \brief returns define data of learning_ext_present_bits
 * Module - 'headers', Submodule - 'internal', data - 'learning_ext_present_bits'
 * Learning Extension present bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     learning_ext_present_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_learning_ext_present_bits_get(
    int unit);

/**
 * \brief returns define data of learning_ext_size
 * Module - 'headers', Submodule - 'internal', data - 'learning_ext_size'
 * Learning Extension header size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     learning_ext_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_learning_ext_size_get(
    int unit);

/**
 * \brief returns define data of ttl_offset
 * Module - 'headers', Submodule - 'internal', data - 'ttl_offset'
 * TTL offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ttl_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_ttl_offset_get(
    int unit);

/**
 * \brief returns define data of ttl_bits
 * Module - 'headers', Submodule - 'internal', data - 'ttl_bits'
 * TTL bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ttl_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_ttl_bits_get(
    int unit);

/**
 * \brief returns define data of eth_rm_fli_offset
 * Module - 'headers', Submodule - 'internal', data - 'eth_rm_fli_offset'
 * fwd layer index offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eth_rm_fli_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_eth_rm_fli_offset_get(
    int unit);

/**
 * \brief returns define data of eth_rm_fli_bits
 * Module - 'headers', Submodule - 'internal', data - 'eth_rm_fli_bits'
 * fwd layer index bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eth_rm_fli_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_eth_rm_fli_bits_get(
    int unit);

/**
 * \brief returns define data of eth_rm_pso_offset
 * Module - 'headers', Submodule - 'internal', data - 'eth_rm_pso_offset'
 * parsing start offset offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eth_rm_pso_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_eth_rm_pso_offset_get(
    int unit);

/**
 * \brief returns define data of eth_rm_pso_bits
 * Module - 'headers', Submodule - 'internal', data - 'eth_rm_pso_bits'
 * parsing start offset bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eth_rm_pso_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_eth_rm_pso_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_internal_table_nof
} dnx_data_headers_internal_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE INTERNAL_LEGACY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_internal_legacy_feature_get(
    int unit,
    dnx_data_headers_internal_legacy_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_internal_legacy_define_fhei_size,
    dnx_data_headers_internal_legacy_define_fhei_size_sz0,
    dnx_data_headers_internal_legacy_define_fhei_size_sz1,
    dnx_data_headers_internal_legacy_define_fhei_size_sz2,
    dnx_data_headers_internal_legacy_define_inlif_inrif_offset,
    dnx_data_headers_internal_legacy_define_inlif_inrif_bits,
    dnx_data_headers_internal_legacy_define_unknown_address_offset,
    dnx_data_headers_internal_legacy_define_unknown_address_bits,
    dnx_data_headers_internal_legacy_define_forwarding_header_offset_offset,
    dnx_data_headers_internal_legacy_define_forwarding_header_offset_bits,
    dnx_data_headers_internal_legacy_define_forward_code_offset,
    dnx_data_headers_internal_legacy_define_forward_code_bits,
    dnx_data_headers_internal_legacy_define_fhei_size_offset,
    dnx_data_headers_internal_legacy_define_fhei_size_bits,
    dnx_data_headers_internal_legacy_define_learning_ext_present_offset,
    dnx_data_headers_internal_legacy_define_learning_ext_present_bits,
    dnx_data_headers_internal_legacy_define_learning_ext_size,
    dnx_data_headers_internal_legacy_define_eei_ext_present_offset,
    dnx_data_headers_internal_legacy_define_eei_ext_present_bits,

    /**
     * Must be last one!
     */
    _dnx_data_headers_internal_legacy_define_nof
} dnx_data_headers_internal_legacy_define_e;

/* Get Data */
/**
 * \brief returns define data of fhei_size
 * Module - 'headers', Submodule - 'internal_legacy', data - 'fhei_size'
 * FHEI header size for internal header stamped
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_fhei_size_get(
    int unit);

/**
 * \brief returns define data of fhei_size_sz0
 * Module - 'headers', Submodule - 'internal_legacy', data - 'fhei_size_sz0'
 * FHEI header size of type SZ0
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_sz0 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_fhei_size_sz0_get(
    int unit);

/**
 * \brief returns define data of fhei_size_sz1
 * Module - 'headers', Submodule - 'internal_legacy', data - 'fhei_size_sz1'
 * FHEI header size of type SZ1
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_sz1 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_fhei_size_sz1_get(
    int unit);

/**
 * \brief returns define data of fhei_size_sz2
 * Module - 'headers', Submodule - 'internal_legacy', data - 'fhei_size_sz2'
 * FHEI header size of type SZ2
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_sz2 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_fhei_size_sz2_get(
    int unit);

/**
 * \brief returns define data of inlif_inrif_offset
 * Module - 'headers', Submodule - 'internal_legacy', data - 'inlif_inrif_offset'
 * In-LIF offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     inlif_inrif_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_inlif_inrif_offset_get(
    int unit);

/**
 * \brief returns define data of inlif_inrif_bits
 * Module - 'headers', Submodule - 'internal_legacy', data - 'inlif_inrif_bits'
 * In-LIF bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     inlif_inrif_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_inlif_inrif_bits_get(
    int unit);

/**
 * \brief returns define data of unknown_address_offset
 * Module - 'headers', Submodule - 'internal_legacy', data - 'unknown_address_offset'
 * Unknown address offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     unknown_address_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_unknown_address_offset_get(
    int unit);

/**
 * \brief returns define data of unknown_address_bits
 * Module - 'headers', Submodule - 'internal_legacy', data - 'unknown_address_bits'
 * Unknown address bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     unknown_address_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_unknown_address_bits_get(
    int unit);

/**
 * \brief returns define data of forwarding_header_offset_offset
 * Module - 'headers', Submodule - 'internal_legacy', data - 'forwarding_header_offset_offset'
 * Forwarding header offset in internal header, valid in jericho mode only
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forwarding_header_offset_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_forwarding_header_offset_offset_get(
    int unit);

/**
 * \brief returns define data of forwarding_header_offset_bits
 * Module - 'headers', Submodule - 'internal_legacy', data - 'forwarding_header_offset_bits'
 * Forwarding header offset in internal header, valid in jericho mode only
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forwarding_header_offset_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_forwarding_header_offset_bits_get(
    int unit);

/**
 * \brief returns define data of forward_code_offset
 * Module - 'headers', Submodule - 'internal_legacy', data - 'forward_code_offset'
 * Forward code offset in internal header, valid in jericho mode only
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forward_code_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_forward_code_offset_get(
    int unit);

/**
 * \brief returns define data of forward_code_bits
 * Module - 'headers', Submodule - 'internal_legacy', data - 'forward_code_bits'
 * Forward code present offset in internal header, valid in jericho mode only
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     forward_code_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_forward_code_bits_get(
    int unit);

/**
 * \brief returns define data of fhei_size_offset
 * Module - 'headers', Submodule - 'internal_legacy', data - 'fhei_size_offset'
 * FHEI size offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_fhei_size_offset_get(
    int unit);

/**
 * \brief returns define data of fhei_size_bits
 * Module - 'headers', Submodule - 'internal_legacy', data - 'fhei_size_bits'
 * FHEI size bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_fhei_size_bits_get(
    int unit);

/**
 * \brief returns define data of learning_ext_present_offset
 * Module - 'headers', Submodule - 'internal_legacy', data - 'learning_ext_present_offset'
 * Learning Extension present offset in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     learning_ext_present_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_learning_ext_present_offset_get(
    int unit);

/**
 * \brief returns define data of learning_ext_present_bits
 * Module - 'headers', Submodule - 'internal_legacy', data - 'learning_ext_present_bits'
 * Learning Extension present bits in internal header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     learning_ext_present_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_learning_ext_present_bits_get(
    int unit);

/**
 * \brief returns define data of learning_ext_size
 * Module - 'headers', Submodule - 'internal_legacy', data - 'learning_ext_size'
 * Learning Extension header size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     learning_ext_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_learning_ext_size_get(
    int unit);

/**
 * \brief returns define data of eei_ext_present_offset
 * Module - 'headers', Submodule - 'internal_legacy', data - 'eei_ext_present_offset'
 * EEI Extension present offset in internal header, valid in jericho mode only
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eei_ext_present_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_eei_ext_present_offset_get(
    int unit);

/**
 * \brief returns define data of eei_ext_present_bits
 * Module - 'headers', Submodule - 'internal_legacy', data - 'eei_ext_present_bits'
 * EEI Extension present bits in internal header, valid in jericho mode only
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     eei_ext_present_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_internal_legacy_eei_ext_present_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_internal_legacy_table_nof
} dnx_data_headers_internal_legacy_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE FHEI_SZ1_TRAP_SNIFF:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_fhei_sz1_trap_sniff_feature_get(
    int unit,
    dnx_data_headers_fhei_sz1_trap_sniff_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_fhei_sz1_trap_sniff_define_fhei_type_offset,
    dnx_data_headers_fhei_sz1_trap_sniff_define_fhei_type_bits,
    dnx_data_headers_fhei_sz1_trap_sniff_define_code_offset,
    dnx_data_headers_fhei_sz1_trap_sniff_define_code_bits,
    dnx_data_headers_fhei_sz1_trap_sniff_define_qualifier_offset,
    dnx_data_headers_fhei_sz1_trap_sniff_define_qualifier_bits,

    /**
     * Must be last one!
     */
    _dnx_data_headers_fhei_sz1_trap_sniff_define_nof
} dnx_data_headers_fhei_sz1_trap_sniff_define_e;

/* Get Data */
/**
 * \brief returns define data of fhei_type_offset
 * Module - 'headers', Submodule - 'fhei_sz1_trap_sniff', data - 'fhei_type_offset'
 * FHEI Extension type offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_sz1_trap_sniff_fhei_type_offset_get(
    int unit);

/**
 * \brief returns define data of fhei_type_bits
 * Module - 'headers', Submodule - 'fhei_sz1_trap_sniff', data - 'fhei_type_bits'
 * FHEI Extension type bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_sz1_trap_sniff_fhei_type_bits_get(
    int unit);

/**
 * \brief returns define data of code_offset
 * Module - 'headers', Submodule - 'fhei_sz1_trap_sniff', data - 'code_offset'
 * FHEI Extension code offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     code_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_sz1_trap_sniff_code_offset_get(
    int unit);

/**
 * \brief returns define data of code_bits
 * Module - 'headers', Submodule - 'fhei_sz1_trap_sniff', data - 'code_bits'
 * FHEI Extension code bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     code_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_sz1_trap_sniff_code_bits_get(
    int unit);

/**
 * \brief returns define data of qualifier_offset
 * Module - 'headers', Submodule - 'fhei_sz1_trap_sniff', data - 'qualifier_offset'
 * FHEI Extension qualifier offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     qualifier_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_sz1_trap_sniff_qualifier_offset_get(
    int unit);

/**
 * \brief returns define data of qualifier_bits
 * Module - 'headers', Submodule - 'fhei_sz1_trap_sniff', data - 'qualifier_bits'
 * FHEI Extension qualifier bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     qualifier_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_sz1_trap_sniff_qualifier_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_fhei_sz1_trap_sniff_table_nof
} dnx_data_headers_fhei_sz1_trap_sniff_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE FHEI_TRAP_SNIFF_LEGACY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_fhei_trap_sniff_legacy_feature_get(
    int unit,
    dnx_data_headers_fhei_trap_sniff_legacy_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_fhei_trap_sniff_legacy_define_code_offset,
    dnx_data_headers_fhei_trap_sniff_legacy_define_code_bits,
    dnx_data_headers_fhei_trap_sniff_legacy_define_qualifier_offset,
    dnx_data_headers_fhei_trap_sniff_legacy_define_qualifier_bits,

    /**
     * Must be last one!
     */
    _dnx_data_headers_fhei_trap_sniff_legacy_define_nof
} dnx_data_headers_fhei_trap_sniff_legacy_define_e;

/* Get Data */
/**
 * \brief returns define data of code_offset
 * Module - 'headers', Submodule - 'fhei_trap_sniff_legacy', data - 'code_offset'
 * FHEI Extension code offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     code_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_trap_sniff_legacy_code_offset_get(
    int unit);

/**
 * \brief returns define data of code_bits
 * Module - 'headers', Submodule - 'fhei_trap_sniff_legacy', data - 'code_bits'
 * FHEI Extension code bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     code_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_trap_sniff_legacy_code_bits_get(
    int unit);

/**
 * \brief returns define data of qualifier_offset
 * Module - 'headers', Submodule - 'fhei_trap_sniff_legacy', data - 'qualifier_offset'
 * FHEI Extension qualifier offset
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     qualifier_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_trap_sniff_legacy_qualifier_offset_get(
    int unit);

/**
 * \brief returns define data of qualifier_bits
 * Module - 'headers', Submodule - 'fhei_trap_sniff_legacy', data - 'qualifier_bits'
 * FHEI Extension qualifier bits
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     qualifier_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_fhei_trap_sniff_legacy_qualifier_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_fhei_trap_sniff_legacy_table_nof
} dnx_data_headers_fhei_trap_sniff_legacy_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE UDH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_udh_feature_get(
    int unit,
    dnx_data_headers_udh_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_udh_define_data_type0_offset,
    dnx_data_headers_udh_define_data_type1_offset,
    dnx_data_headers_udh_define_data_type2_offset,
    dnx_data_headers_udh_define_data_type3_offset,
    dnx_data_headers_udh_define_data_offset,
    dnx_data_headers_udh_define_data_type0_bits,
    dnx_data_headers_udh_define_data_type1_bits,
    dnx_data_headers_udh_define_data_type2_bits,
    dnx_data_headers_udh_define_data_type3_bits,
    dnx_data_headers_udh_define_data_bits,
    dnx_data_headers_udh_define_base_size,

    /**
     * Must be last one!
     */
    _dnx_data_headers_udh_define_nof
} dnx_data_headers_udh_define_e;

/* Get Data */
/**
 * \brief returns define data of data_type0_offset
 * Module - 'headers', Submodule - 'udh', data - 'data_type0_offset'
 * UDH data type0 offset in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_type0_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_type0_offset_get(
    int unit);

/**
 * \brief returns define data of data_type1_offset
 * Module - 'headers', Submodule - 'udh', data - 'data_type1_offset'
 * UDH data type1 offset in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_type1_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_type1_offset_get(
    int unit);

/**
 * \brief returns define data of data_type2_offset
 * Module - 'headers', Submodule - 'udh', data - 'data_type2_offset'
 * UDH data type2 offset in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_type2_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_type2_offset_get(
    int unit);

/**
 * \brief returns define data of data_type3_offset
 * Module - 'headers', Submodule - 'udh', data - 'data_type3_offset'
 * UDH data type3 offset in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_type3_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_type3_offset_get(
    int unit);

/**
 * \brief returns define data of data_offset
 * Module - 'headers', Submodule - 'udh', data - 'data_offset'
 * UDH data offset in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_offset_get(
    int unit);

/**
 * \brief returns define data of data_type0_bits
 * Module - 'headers', Submodule - 'udh', data - 'data_type0_bits'
 * UDH data type0 bits in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_type0_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_type0_bits_get(
    int unit);

/**
 * \brief returns define data of data_type1_bits
 * Module - 'headers', Submodule - 'udh', data - 'data_type1_bits'
 * UDH data type1 bits in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_type1_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_type1_bits_get(
    int unit);

/**
 * \brief returns define data of data_type2_bits
 * Module - 'headers', Submodule - 'udh', data - 'data_type2_bits'
 * UDH data type2 bits in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_type2_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_type2_bits_get(
    int unit);

/**
 * \brief returns define data of data_type3_bits
 * Module - 'headers', Submodule - 'udh', data - 'data_type3_bits'
 * UDH data type3 bits in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_type3_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_type3_bits_get(
    int unit);

/**
 * \brief returns define data of data_bits
 * Module - 'headers', Submodule - 'udh', data - 'data_bits'
 * UDH data bits in UDH header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     data_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_data_bits_get(
    int unit);

/**
 * \brief returns define data of base_size
 * Module - 'headers', Submodule - 'udh', data - 'base_size'
 * UDH base size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     base_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_udh_base_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_udh_table_nof
} dnx_data_headers_udh_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE FTMH_LEGACY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_ftmh_legacy_feature_get(
    int unit,
    dnx_data_headers_ftmh_legacy_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_ftmh_legacy_define_packet_size_offset,
    dnx_data_headers_ftmh_legacy_define_traffic_class_offset,
    dnx_data_headers_ftmh_legacy_define_src_sys_port_aggregate_offset,
    dnx_data_headers_ftmh_legacy_define_pp_dsp_offset,
    dnx_data_headers_ftmh_legacy_define_drop_precedence_offset,
    dnx_data_headers_ftmh_legacy_define_tm_action_type_offset,
    dnx_data_headers_ftmh_legacy_define_otsh_en_offset,
    dnx_data_headers_ftmh_legacy_define_internal_header_en_offset,
    dnx_data_headers_ftmh_legacy_define_outbound_mirr_disable_offset,
    dnx_data_headers_ftmh_legacy_define_tm_action_is_mc_offset,
    dnx_data_headers_ftmh_legacy_define_outlif_offset,
    dnx_data_headers_ftmh_legacy_define_dsp_ext_present_offset,
    dnx_data_headers_ftmh_legacy_define_cni_offset,
    dnx_data_headers_ftmh_legacy_define_ecn_enable_offset,
    dnx_data_headers_ftmh_legacy_define_exclude_source_offset,
    dnx_data_headers_ftmh_legacy_define_stack_route_history_bmp_offset,
    dnx_data_headers_ftmh_legacy_define_dsp_ext_header_offset,
    dnx_data_headers_ftmh_legacy_define_packet_size_bits,
    dnx_data_headers_ftmh_legacy_define_traffic_class_bits,
    dnx_data_headers_ftmh_legacy_define_src_sys_port_aggregate_bits,
    dnx_data_headers_ftmh_legacy_define_pp_dsp_bits,
    dnx_data_headers_ftmh_legacy_define_drop_precedence_bits,
    dnx_data_headers_ftmh_legacy_define_tm_action_type_bits,
    dnx_data_headers_ftmh_legacy_define_otsh_en_bits,
    dnx_data_headers_ftmh_legacy_define_internal_header_en_bits,
    dnx_data_headers_ftmh_legacy_define_outbound_mirr_disable_bits,
    dnx_data_headers_ftmh_legacy_define_tm_action_is_mc_bits,
    dnx_data_headers_ftmh_legacy_define_outlif_bits,
    dnx_data_headers_ftmh_legacy_define_dsp_ext_present_bits,
    dnx_data_headers_ftmh_legacy_define_cni_bits,
    dnx_data_headers_ftmh_legacy_define_ecn_enable_bits,
    dnx_data_headers_ftmh_legacy_define_exclude_source_bits,
    dnx_data_headers_ftmh_legacy_define_dsp_ext_header_bits,
    dnx_data_headers_ftmh_legacy_define_base_header_size,
    dnx_data_headers_ftmh_legacy_define_dsp_ext_header_size,

    /**
     * Must be last one!
     */
    _dnx_data_headers_ftmh_legacy_define_nof
} dnx_data_headers_ftmh_legacy_define_e;

/* Get Data */
/**
 * \brief returns define data of packet_size_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'packet_size_offset'
 * packet size offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_size_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_packet_size_offset_get(
    int unit);

/**
 * \brief returns define data of traffic_class_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'traffic_class_offset'
 * traffic class offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     traffic_class_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_traffic_class_offset_get(
    int unit);

/**
 * \brief returns define data of src_sys_port_aggregate_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'src_sys_port_aggregate_offset'
 * source system port aggregate offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     src_sys_port_aggregate_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_src_sys_port_aggregate_offset_get(
    int unit);

/**
 * \brief returns define data of pp_dsp_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'pp_dsp_offset'
 * PP DSP offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pp_dsp_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_pp_dsp_offset_get(
    int unit);

/**
 * \brief returns define data of drop_precedence_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'drop_precedence_offset'
 * Drop Precedence offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     drop_precedence_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_drop_precedence_offset_get(
    int unit);

/**
 * \brief returns define data of tm_action_type_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'tm_action_type_offset'
 * tm action type offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_action_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_tm_action_type_offset_get(
    int unit);

/**
 * \brief returns define data of otsh_en_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'otsh_en_offset'
 * OTSH enable offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     otsh_en_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_otsh_en_offset_get(
    int unit);

/**
 * \brief returns define data of internal_header_en_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'internal_header_en_offset'
 * internal header enable offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     internal_header_en_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_internal_header_en_offset_get(
    int unit);

/**
 * \brief returns define data of outbound_mirr_disable_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'outbound_mirr_disable_offset'
 * outbound-mirr-disable parameter offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     outbound_mirr_disable_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_outbound_mirr_disable_offset_get(
    int unit);

/**
 * \brief returns define data of tm_action_is_mc_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'tm_action_is_mc_offset'
 * tm action is multicast offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_action_is_mc_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_tm_action_is_mc_offset_get(
    int unit);

/**
 * \brief returns define data of outlif_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'outlif_offset'
 * multicast_id or outlif offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     outlif_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_outlif_offset_get(
    int unit);

/**
 * \brief returns define data of dsp_ext_present_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'dsp_ext_present_offset'
 * tm destination extension present offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dsp_ext_present_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_dsp_ext_present_offset_get(
    int unit);

/**
 * \brief returns define data of cni_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'cni_offset'
 * CNI offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cni_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_cni_offset_get(
    int unit);

/**
 * \brief returns define data of ecn_enable_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'ecn_enable_offset'
 * ECN enable offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecn_enable_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_ecn_enable_offset_get(
    int unit);

/**
 * \brief returns define data of exclude_source_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'exclude_source_offset'
 * exclude soutrce offset in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     exclude_source_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_exclude_source_offset_get(
    int unit);

/**
 * \brief returns define data of stack_route_history_bmp_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'stack_route_history_bmp_offset'
 * stacking route history bitmap offset for stacking header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stack_route_history_bmp_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_stack_route_history_bmp_offset_get(
    int unit);

/**
 * \brief returns define data of dsp_ext_header_offset
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'dsp_ext_header_offset'
 * DSP offset for TM destination extension header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dsp_ext_header_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_dsp_ext_header_offset_get(
    int unit);

/**
 * \brief returns define data of packet_size_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'packet_size_bits'
 * packet size bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     packet_size_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_packet_size_bits_get(
    int unit);

/**
 * \brief returns define data of traffic_class_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'traffic_class_bits'
 * traffic class bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     traffic_class_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_traffic_class_bits_get(
    int unit);

/**
 * \brief returns define data of src_sys_port_aggregate_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'src_sys_port_aggregate_bits'
 * source system port aggregate bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     src_sys_port_aggregate_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_src_sys_port_aggregate_bits_get(
    int unit);

/**
 * \brief returns define data of pp_dsp_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'pp_dsp_bits'
 * PP DSP bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pp_dsp_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_pp_dsp_bits_get(
    int unit);

/**
 * \brief returns define data of drop_precedence_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'drop_precedence_bits'
 * Drop Precedence bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     drop_precedence_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_drop_precedence_bits_get(
    int unit);

/**
 * \brief returns define data of tm_action_type_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'tm_action_type_bits'
 * tm action type bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_action_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_tm_action_type_bits_get(
    int unit);

/**
 * \brief returns define data of otsh_en_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'otsh_en_bits'
 * OTSH enable bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     otsh_en_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_otsh_en_bits_get(
    int unit);

/**
 * \brief returns define data of internal_header_en_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'internal_header_en_bits'
 * internal header enable bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     internal_header_en_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_internal_header_en_bits_get(
    int unit);

/**
 * \brief returns define data of outbound_mirr_disable_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'outbound_mirr_disable_bits'
 * outbound-mirr-disable parameter bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     outbound_mirr_disable_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_outbound_mirr_disable_bits_get(
    int unit);

/**
 * \brief returns define data of tm_action_is_mc_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'tm_action_is_mc_bits'
 * tm action is multicast bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tm_action_is_mc_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_tm_action_is_mc_bits_get(
    int unit);

/**
 * \brief returns define data of outlif_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'outlif_bits'
 * multicast_id or outlif bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     outlif_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_outlif_bits_get(
    int unit);

/**
 * \brief returns define data of dsp_ext_present_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'dsp_ext_present_bits'
 * tm destination extension present bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dsp_ext_present_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_dsp_ext_present_bits_get(
    int unit);

/**
 * \brief returns define data of cni_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'cni_bits'
 * CNI bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cni_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_cni_bits_get(
    int unit);

/**
 * \brief returns define data of ecn_enable_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'ecn_enable_bits'
 * ECN enable bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ecn_enable_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_ecn_enable_bits_get(
    int unit);

/**
 * \brief returns define data of exclude_source_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'exclude_source_bits'
 * exclude source bits in legacy FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     exclude_source_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_exclude_source_bits_get(
    int unit);

/**
 * \brief returns define data of dsp_ext_header_bits
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'dsp_ext_header_bits'
 * DSP bits for TM destination extension header
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dsp_ext_header_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_dsp_ext_header_bits_get(
    int unit);

/**
 * \brief returns define data of base_header_size
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'base_header_size'
 * Legacy FTMH BASE size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     base_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_base_header_size_get(
    int unit);

/**
 * \brief returns define data of dsp_ext_header_size
 * Module - 'headers', Submodule - 'ftmh_legacy', data - 'dsp_ext_header_size'
 * FTMH DSP extension header size in FTMH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     dsp_ext_header_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_ftmh_legacy_dsp_ext_header_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_ftmh_legacy_table_nof
} dnx_data_headers_ftmh_legacy_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE OTSH_LEGACY:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_otsh_legacy_feature_get(
    int unit,
    dnx_data_headers_otsh_legacy_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_otsh_legacy_define_type_offset,
    dnx_data_headers_otsh_legacy_define_type_bits,
    dnx_data_headers_otsh_legacy_define_oam_sub_type_offset,
    dnx_data_headers_otsh_legacy_define_oam_sub_type_bits,
    dnx_data_headers_otsh_legacy_define_mep_type_offset,
    dnx_data_headers_otsh_legacy_define_mep_type_bits,
    dnx_data_headers_otsh_legacy_define_tp_command_offset,
    dnx_data_headers_otsh_legacy_define_tp_command_bits,
    dnx_data_headers_otsh_legacy_define_ts_encapsulation_offset,
    dnx_data_headers_otsh_legacy_define_ts_encapsulation_bits,
    dnx_data_headers_otsh_legacy_define_oam_ts_data_0_offset,
    dnx_data_headers_otsh_legacy_define_oam_ts_data_0_bits,
    dnx_data_headers_otsh_legacy_define_oam_ts_data_1_offset,
    dnx_data_headers_otsh_legacy_define_oam_ts_data_1_bits,
    dnx_data_headers_otsh_legacy_define_offset_offset,
    dnx_data_headers_otsh_legacy_define_offset_bits,

    /**
     * Must be last one!
     */
    _dnx_data_headers_otsh_legacy_define_nof
} dnx_data_headers_otsh_legacy_define_e;

/* Get Data */
/**
 * \brief returns define data of type_offset
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'type_offset'
 * type offset in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_type_offset_get(
    int unit);

/**
 * \brief returns define data of type_bits
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'type_bits'
 * type bits in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_type_bits_get(
    int unit);

/**
 * \brief returns define data of oam_sub_type_offset
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'oam_sub_type_offset'
 * oam-sub-type offset in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_sub_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_oam_sub_type_offset_get(
    int unit);

/**
 * \brief returns define data of oam_sub_type_bits
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'oam_sub_type_bits'
 * oam-sub-type bits in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_sub_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_oam_sub_type_bits_get(
    int unit);

/**
 * \brief returns define data of mep_type_offset
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'mep_type_offset'
 * mep-type offset in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_type_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_mep_type_offset_get(
    int unit);

/**
 * \brief returns define data of mep_type_bits
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'mep_type_bits'
 * mep-type bits in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     mep_type_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_mep_type_bits_get(
    int unit);

/**
 * \brief returns define data of tp_command_offset
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'tp_command_offset'
 * tp-command offset in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tp_command_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_tp_command_offset_get(
    int unit);

/**
 * \brief returns define data of tp_command_bits
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'tp_command_bits'
 * tp-command  bits in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     tp_command_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_tp_command_bits_get(
    int unit);

/**
 * \brief returns define data of ts_encapsulation_offset
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'ts_encapsulation_offset'
 * ts-encapsulation offset in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_encapsulation_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_ts_encapsulation_offset_get(
    int unit);

/**
 * \brief returns define data of ts_encapsulation_bits
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'ts_encapsulation_bits'
 * ts-encapsulation bits in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ts_encapsulation_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_ts_encapsulation_bits_get(
    int unit);

/**
 * \brief returns define data of oam_ts_data_0_offset
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'oam_ts_data_0_offset'
 * oam-ts-data higher 2 bits offset in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_ts_data_0_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_oam_ts_data_0_offset_get(
    int unit);

/**
 * \brief returns define data of oam_ts_data_0_bits
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'oam_ts_data_0_bits'
 * oam-ts-data higher 2 bits in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_ts_data_0_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_oam_ts_data_0_bits_get(
    int unit);

/**
 * \brief returns define data of oam_ts_data_1_offset
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'oam_ts_data_1_offset'
 * oam-ts-data lower 32 bits offset in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_ts_data_1_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_oam_ts_data_1_offset_get(
    int unit);

/**
 * \brief returns define data of oam_ts_data_1_bits
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'oam_ts_data_1_bits'
 * oam-ts-data lower 32 bits in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     oam_ts_data_1_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_oam_ts_data_1_bits_get(
    int unit);

/**
 * \brief returns define data of offset_offset
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'offset_offset'
 * offset offset in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     offset_offset - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_offset_offset_get(
    int unit);

/**
 * \brief returns define data of offset_bits
 * Module - 'headers', Submodule - 'otsh_legacy', data - 'offset_bits'
 * offset bits in legacy OTSH
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     offset_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_otsh_legacy_offset_bits_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_otsh_legacy_table_nof
} dnx_data_headers_otsh_legacy_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE SYSTEM_HEADERS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_system_headers_feature_get(
    int unit,
    dnx_data_headers_system_headers_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_system_headers_define_system_headers_mode_jericho,
    dnx_data_headers_system_headers_define_system_headers_mode_jericho2,
    dnx_data_headers_system_headers_define_crc_size_counted_in_pkt_len,
    dnx_data_headers_system_headers_define_system_headers_mode,
    dnx_data_headers_system_headers_define_jr_mode_ftmh_lb_key_ext_mode,
    dnx_data_headers_system_headers_define_jr_mode_ftmh_stacking_ext_mode,
    dnx_data_headers_system_headers_define_udh_base_size,

    /**
     * Must be last one!
     */
    _dnx_data_headers_system_headers_define_nof
} dnx_data_headers_system_headers_define_e;

/* Get Data */
/**
 * \brief returns define data of system_headers_mode_jericho
 * Module - 'headers', Submodule - 'system_headers', data - 'system_headers_mode_jericho'
 * System headers mode Jericho
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     system_headers_mode_jericho - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_system_headers_system_headers_mode_jericho_get(
    int unit);

/**
 * \brief returns define data of system_headers_mode_jericho2
 * Module - 'headers', Submodule - 'system_headers', data - 'system_headers_mode_jericho2'
 * Sysstem headers mode Jericho2
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     system_headers_mode_jericho2 - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_system_headers_system_headers_mode_jericho2_get(
    int unit);

/**
 * \brief returns define data of crc_size_counted_in_pkt_len
 * Module - 'headers', Submodule - 'system_headers', data - 'crc_size_counted_in_pkt_len'
 * CRC size counted packet length
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     crc_size_counted_in_pkt_len - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_system_headers_crc_size_counted_in_pkt_len_get(
    int unit);

/**
 * \brief returns numeric data of system_headers_mode
 * Module - 'headers', Submodule - 'system_headers', data - 'system_headers_mode'
 * System headers mode the device supports.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     system_headers_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_system_headers_system_headers_mode_get(
    int unit);

/**
 * \brief returns numeric data of jr_mode_ftmh_lb_key_ext_mode
 * Module - 'headers', Submodule - 'system_headers', data - 'jr_mode_ftmh_lb_key_ext_mode'
 * global FTMH load balance key extention mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     jr_mode_ftmh_lb_key_ext_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_system_headers_jr_mode_ftmh_lb_key_ext_mode_get(
    int unit);

/**
 * \brief returns numeric data of jr_mode_ftmh_stacking_ext_mode
 * Module - 'headers', Submodule - 'system_headers', data - 'jr_mode_ftmh_stacking_ext_mode'
 * global FTMH Stacking extention mode
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     jr_mode_ftmh_stacking_ext_mode - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_system_headers_jr_mode_ftmh_stacking_ext_mode_get(
    int unit);

/**
 * \brief returns numeric data of udh_base_size
 * Module - 'headers', Submodule - 'system_headers', data - 'udh_base_size'
 * udh base header size
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     udh_base_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_system_headers_udh_base_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_system_headers_table_nof
} dnx_data_headers_system_headers_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE OTMH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_otmh_feature_get(
    int unit,
    dnx_data_headers_otmh_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_otmh_define_nof
} dnx_data_headers_otmh_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_otmh_table_nof
} dnx_data_headers_otmh_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE PPH:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_pph_feature_get(
    int unit,
    dnx_data_headers_pph_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_pph_define_pph_vsi_selection_size,

    /**
     * Must be last one!
     */
    _dnx_data_headers_pph_define_nof
} dnx_data_headers_pph_define_e;

/* Get Data */
/**
 * \brief returns define data of pph_vsi_selection_size
 * Module - 'headers', Submodule - 'pph', data - 'pph_vsi_selection_size'
 * Size of VSI selection field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     pph_vsi_selection_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_pph_pph_vsi_selection_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_pph_table_nof
} dnx_data_headers_pph_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_general_feature_get(
    int unit,
    dnx_data_headers_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_general_define_nof
} dnx_data_headers_general_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_general_table_nof
} dnx_data_headers_general_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * SUBMODULE HW_BUG:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_headers_hw_bug_feature_get(
    int unit,
    dnx_data_headers_hw_bug_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_headers_hw_bug_define_fhei_mpls_swap_remark_profile_size,

    /**
     * Must be last one!
     */
    _dnx_data_headers_hw_bug_define_nof
} dnx_data_headers_hw_bug_define_e;

/* Get Data */
/**
 * \brief returns define data of fhei_mpls_swap_remark_profile_size
 * Module - 'headers', Submodule - 'hw_bug', data - 'fhei_mpls_swap_remark_profile_size'
 * Size of remark_profile mapped from mpls swap command
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     fhei_mpls_swap_remark_profile_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnx_data_headers_hw_bug_fhei_mpls_swap_remark_profile_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_headers_hw_bug_table_nof
} dnx_data_headers_hw_bug_table_e;

/* Get Data */
/* Get Value Str */
/* Get Table info */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_headers_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_HEADERS_H_*/
/* *INDENT-ON* */
