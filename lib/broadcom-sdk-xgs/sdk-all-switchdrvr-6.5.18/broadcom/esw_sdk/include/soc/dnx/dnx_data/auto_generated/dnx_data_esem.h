/** \file dnx_data_esem.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_ESEM_H_
/*{*/
#define _DNX_DATA_ESEM_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <sal/limits.h>
#include <soc/property.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnxc/dnxc_data/dnxc_data_utils.h>
#include <soc/dnxc/dnxc_data/dnxc_data_mgmt.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_esem.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_esem
 * 
 * \param [in] unit - Unit #
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_if_esem_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - ACCESS_CMD:
 * data for egress sem access command
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_esem_access_cmd_feature_nof
} dnx_data_esem_access_cmd_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_esem_access_cmd_feature_get_f) (
    int unit,
    dnx_data_esem_access_cmd_feature_e feature);

/**
 * \brief returns define data of nof_esem_accesses
 * Module - 'esem', Submodule - 'access_cmd', data - 'nof_esem_accesses'
 * The number of accesses that can be preformed into the ESEM/EXEM.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_esem_accesses - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_access_cmd_nof_esem_accesses_get_f) (
    int unit);

/**
 * \brief returns define data of app_di_id_size_in_bits
 * Module - 'esem', Submodule - 'access_cmd', data - 'app_di_id_size_in_bits'
 * NOF bits for the APP DB ID.
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     app_di_id_size_in_bits - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_access_cmd_app_di_id_size_in_bits_get_f) (
    int unit);

/**
 * \brief returns define data of no_action
 * Module - 'esem', Submodule - 'access_cmd', data - 'no_action'
 * Undefined access command index
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     no_action - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_access_cmd_no_action_get_f) (
    int unit);

/**
 * \brief returns define data of default_native
 * Module - 'esem', Submodule - 'access_cmd', data - 'default_native'
 * Default access command for native AC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_native - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_access_cmd_default_native_get_f) (
    int unit);

/**
 * \brief returns define data of default_ac
 * Module - 'esem', Submodule - 'access_cmd', data - 'default_ac'
 * Default-access command index for outer AC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_ac - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_access_cmd_default_ac_get_f) (
    int unit);

/**
 * \brief returns define data of ip_tunnel_no_action
 * Module - 'esem', Submodule - 'access_cmd', data - 'ip_tunnel_no_action'
 * No lookup access command for ip tunnel cases
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ip_tunnel_no_action - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_access_cmd_ip_tunnel_no_action_get_f) (
    int unit);

/**
 * \brief returns define data of nof_cmds
 * Module - 'esem', Submodule - 'access_cmd', data - 'nof_cmds'
 * Number of esem access commands
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_cmds - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_access_cmd_nof_cmds_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ESEM - ACCESS_CMD:
 * {
 */
/**
 * \brief Interface for esem access_cmd data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_esem_access_cmd_feature_get_f feature_get;
    /**
     * returns define data of nof_esem_accesses
     */
    dnx_data_esem_access_cmd_nof_esem_accesses_get_f nof_esem_accesses_get;
    /**
     * returns define data of app_di_id_size_in_bits
     */
    dnx_data_esem_access_cmd_app_di_id_size_in_bits_get_f app_di_id_size_in_bits_get;
    /**
     * returns define data of no_action
     */
    dnx_data_esem_access_cmd_no_action_get_f no_action_get;
    /**
     * returns define data of default_native
     */
    dnx_data_esem_access_cmd_default_native_get_f default_native_get;
    /**
     * returns define data of default_ac
     */
    dnx_data_esem_access_cmd_default_ac_get_f default_ac_get;
    /**
     * returns define data of ip_tunnel_no_action
     */
    dnx_data_esem_access_cmd_ip_tunnel_no_action_get_f ip_tunnel_no_action_get;
    /**
     * returns define data of nof_cmds
     */
    dnx_data_esem_access_cmd_nof_cmds_get_f nof_cmds_get;
} dnx_data_if_esem_access_cmd_t;

/*
 * }
 */

/*
 * SUBMODULE  - DEFAULT_RESULT_PROFILE:
 * default results in case of mismatch in esem lookup
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_esem_default_result_profile_feature_nof
} dnx_data_esem_default_result_profile_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_esem_default_result_profile_feature_get_f) (
    int unit,
    dnx_data_esem_default_result_profile_feature_e feature);

/**
 * \brief returns define data of default_native
 * Module - 'esem', Submodule - 'default_result_profile', data - 'default_native'
 * Profile for Esem default result for default native
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_native - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_default_result_profile_default_native_get_f) (
    int unit);

/**
 * \brief returns define data of default_ac
 * Module - 'esem', Submodule - 'default_result_profile', data - 'default_ac'
 * Profile for Esem default result for default AC
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_ac - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_default_result_profile_default_ac_get_f) (
    int unit);

/**
 * \brief returns define data of default_dual_homing
 * Module - 'esem', Submodule - 'default_result_profile', data - 'default_dual_homing'
 * Profile for Esem default result for dual homing db
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     default_dual_homing - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_default_result_profile_default_dual_homing_get_f) (
    int unit);

/**
 * \brief returns define data of nof_profiles
 * Module - 'esem', Submodule - 'default_result_profile', data - 'nof_profiles'
 * Number of esem default result profiles
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     nof_profiles - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_esem_default_result_profile_nof_profiles_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ESEM - DEFAULT_RESULT_PROFILE:
 * {
 */
/**
 * \brief Interface for esem default_result_profile data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_esem_default_result_profile_feature_get_f feature_get;
    /**
     * returns define data of default_native
     */
    dnx_data_esem_default_result_profile_default_native_get_f default_native_get;
    /**
     * returns define data of default_ac
     */
    dnx_data_esem_default_result_profile_default_ac_get_f default_ac_get;
    /**
     * returns define data of default_dual_homing
     */
    dnx_data_esem_default_result_profile_default_dual_homing_get_f default_dual_homing_get;
    /**
     * returns define data of nof_profiles
     */
    dnx_data_esem_default_result_profile_nof_profiles_get_f nof_profiles_get;
} dnx_data_if_esem_default_result_profile_t;

/*
 * }
 */

/*
 * SUBMODULE  - HW_BUG:
 * ESEM-related HW bugs
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Properties are taken from ETPS TOS entry, instead of EES TOS entry
     */
    dnx_data_esem_hw_bug_etps_properties_assignment,
    /**
     * Does the constructed key contain member-id in case of trunk system port aggregate
     */
    dnx_data_esem_hw_bug_key_with_sspa_contains_member_id,

    /**
     * Must be last one!
     */
    _dnx_data_esem_hw_bug_feature_nof
} dnx_data_esem_hw_bug_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
typedef int(
    *dnx_data_esem_hw_bug_feature_get_f) (
    int unit,
    dnx_data_esem_hw_bug_feature_e feature);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_ESEM - HW_BUG:
 * {
 */
/**
 * \brief Interface for esem hw_bug data
 */
typedef struct
{
    /**
     * get submodule feature - disabled/enabled
     */
    dnx_data_esem_hw_bug_feature_get_f feature_get;
} dnx_data_if_esem_hw_bug_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_ESEM:
 * {
 */
/**
 * \brief Interface for esem data
 */
typedef struct
{
    /**
     * Interface for esem access_cmd data
     */
    dnx_data_if_esem_access_cmd_t access_cmd;
    /**
     * Interface for esem default_result_profile data
     */
    dnx_data_if_esem_default_result_profile_t default_result_profile;
    /**
     * Interface for esem hw_bug data
     */
    dnx_data_if_esem_hw_bug_t hw_bug;
} dnx_data_if_esem_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_esem_t dnx_data_esem;
/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_ESEM_H_*/
/* *INDENT-ON* */
