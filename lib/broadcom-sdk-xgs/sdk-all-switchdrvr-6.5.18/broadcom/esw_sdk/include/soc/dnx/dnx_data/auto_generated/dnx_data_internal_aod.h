/** \file dnx_data_internal_aod.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_AOD_H_
/*{*/
#define _DNX_DATA_INTERNAL_AOD_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/auto_generated/dnx_data_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_aod.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_aod_submodule_tables,

    /**
     * Must be last one!
     */
    _dnx_data_aod_submodule_nof
} dnx_data_aod_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE TABLES:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnx_data_aod_tables_feature_get(
    int unit,
    dnx_data_aod_tables_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnx_data_aod_tables_define_nof
} dnx_data_aod_tables_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_aod_tables_table_ERPP_FORWARD_CODE_SELECTION,
    dnx_data_aod_tables_table_ETPP_FORWARD_CODE_SELECTION,
    dnx_data_aod_tables_table_EGRESS_PER_LAYER_PROTOCOL,
    dnx_data_aod_tables_table_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE,

    /**
     * Must be last one!
     */
    _dnx_data_aod_tables_table_nof
} dnx_data_aod_tables_table_e;

/* Get Data */
/**
 * \brief get table ERPP_FORWARD_CODE_SELECTION entry 
 * ERPP_FORWARD_CODE_SELECTION
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * \param [in] soc_value - soc property value
 * 
 * \return
 *     ERPP_FORWARD_CODE_SELECTION - returns the relevant entry values grouped in struct - see dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_t * dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_get(
    int unit,
    int index,
    int soc_value);

/**
 * \brief get table ETPP_FORWARD_CODE_SELECTION entry 
 * ETPP_FORWARD_CODE_SELECTION
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * \param [in] soc_value - soc property value
 * 
 * \return
 *     ETPP_FORWARD_CODE_SELECTION - returns the relevant entry values grouped in struct - see dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_t * dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_get(
    int unit,
    int index,
    int soc_value);

/**
 * \brief get table EGRESS_PER_LAYER_PROTOCOL entry 
 * EGRESS_PER_LAYER_PROTOCOL
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * \param [in] soc_value - soc property value
 * 
 * \return
 *     EGRESS_PER_LAYER_PROTOCOL - returns the relevant entry values grouped in struct - see dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_t * dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_get(
    int unit,
    int index,
    int soc_value);

/**
 * \brief get table EGRESS_PARSING_CONTEXT_MAP_JR1_MODE entry 
 * EGRESS_PARSING_CONTEXT_MAP_JR1_MODE
 * 
 * \param [in] unit - unit #
 * \param [in] index - entry index
 * \param [in] soc_value - soc property value
 * 
 * \return
 *     EGRESS_PARSING_CONTEXT_MAP_JR1_MODE - returns the relevant entry values grouped in struct - see dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_t * dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_get(
    int unit,
    int index,
    int soc_value);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'aod', Submodule - 'tables', table - 'ERPP_FORWARD_CODE_SELECTION'
 * ERPP_FORWARD_CODE_SELECTION
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'aod', Submodule - 'tables', table - 'ETPP_FORWARD_CODE_SELECTION'
 * ETPP_FORWARD_CODE_SELECTION
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'aod', Submodule - 'tables', table - 'EGRESS_PER_LAYER_PROTOCOL'
 * EGRESS_PER_LAYER_PROTOCOL
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'aod', Submodule - 'tables', table - 'EGRESS_PARSING_CONTEXT_MAP_JR1_MODE'
 * EGRESS_PARSING_CONTEXT_MAP_JR1_MODE
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)ERPP_FORWARD_CODE_SELECTION info
 * ERPP_FORWARD_CODE_SELECTION
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ERPP_FORWARD_CODE_SELECTION - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_aod_tables_ERPP_FORWARD_CODE_SELECTION_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)ETPP_FORWARD_CODE_SELECTION info
 * ETPP_FORWARD_CODE_SELECTION
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     ETPP_FORWARD_CODE_SELECTION - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_aod_tables_ETPP_FORWARD_CODE_SELECTION_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)EGRESS_PER_LAYER_PROTOCOL info
 * EGRESS_PER_LAYER_PROTOCOL
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     EGRESS_PER_LAYER_PROTOCOL - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_aod_tables_EGRESS_PER_LAYER_PROTOCOL_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)EGRESS_PARSING_CONTEXT_MAP_JR1_MODE info
 * EGRESS_PARSING_CONTEXT_MAP_JR1_MODE
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     EGRESS_PARSING_CONTEXT_MAP_JR1_MODE - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnx_data_aod_tables_EGRESS_PARSING_CONTEXT_MAP_JR1_MODE_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnx_data_aod_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNX_DATA_INTERNAL_AOD_H_*/
/* *INDENT-ON* */
