/** \file dnxf_data_internal_module_testing.h
 * 
 * MODULE DEVICE DATA - DNXF_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNXF_DATA_INTERNAL_MODULE_TESTING_H_
/*{*/
#define _DNXF_DATA_INTERNAL_MODULE_TESTING_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnxf/dnxf_data/auto_generated/dnxf_data_internal.h>
#include <soc/dnxf/dnxf_data/auto_generated/dnxf_data_module_testing.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNXF_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnxf_data_module_testing_submodule_unsupported,
    dnxf_data_module_testing_submodule_types,
    dnxf_data_module_testing_submodule_property_methods,

    /**
     * Must be last one!
     */
    _dnxf_data_module_testing_submodule_nof
} dnxf_data_module_testing_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE UNSUPPORTED:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnxf_data_module_testing_unsupported_feature_get(
    int unit,
    dnxf_data_module_testing_unsupported_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnxf_data_module_testing_unsupported_define_supported_def,
    dnxf_data_module_testing_unsupported_define_unsupported_def,

    /**
     * Must be last one!
     */
    _dnxf_data_module_testing_unsupported_define_nof
} dnxf_data_module_testing_unsupported_define_e;

/* Get Data */
/**
 * \brief returns define data of supported_def
 * Module - 'module_testing', Submodule - 'unsupported', data - 'supported_def'
 * supported define expected to return value
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     supported_def - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_module_testing_unsupported_supported_def_get(
    int unit);

/**
 * \brief returns define data of unsupported_def
 * Module - 'module_testing', Submodule - 'unsupported', data - 'unsupported_def'
 * unsupported feature expected to return NULL
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     unsupported_def - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_module_testing_unsupported_unsupported_def_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnxf_data_module_testing_unsupported_table_supported_table,
    dnxf_data_module_testing_unsupported_table_unsupported_table,

    /**
     * Must be last one!
     */
    _dnxf_data_module_testing_unsupported_table_nof
} dnxf_data_module_testing_unsupported_table_e;

/* Get Data */
/**
 * \brief get table supported_table entry 
 * supported table expected to return the required struct
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     supported_table - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_unsupported_supported_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_unsupported_supported_table_t * dnxf_data_module_testing_unsupported_supported_table_get(
    int unit);

/**
 * \brief get table unsupported_table entry 
 * usupported table expected to return NULL
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     unsupported_table - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_unsupported_unsupported_table_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_unsupported_unsupported_table_t * dnxf_data_module_testing_unsupported_unsupported_table_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'unsupported', table - 'supported_table'
 * supported table expected to return the required struct
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_unsupported_supported_table_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'unsupported', table - 'unsupported_table'
 * usupported table expected to return NULL
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_unsupported_unsupported_table_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)supported_table info
 * supported table expected to return the required struct
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     supported_table - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_unsupported_supported_table_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)unsupported_table info
 * usupported table expected to return NULL
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     unsupported_table - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_unsupported_unsupported_table_info_get(
    int unit);

/*
 * SUBMODULE TYPES:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnxf_data_module_testing_types_feature_get(
    int unit,
    dnxf_data_module_testing_types_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    _dnxf_data_module_testing_types_define_nof
} dnxf_data_module_testing_types_define_e;

/* Get Data */
/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnxf_data_module_testing_types_table_all,

    /**
     * Must be last one!
     */
    _dnxf_data_module_testing_types_table_nof
} dnxf_data_module_testing_types_table_e;

/* Get Data */
/**
 * \brief get table all entry 
 * test all supported types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     all - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_types_all_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_types_all_t * dnxf_data_module_testing_types_all_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'types', table - 'all'
 * test all supported types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_types_all_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)all info
 * test all supported types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     all - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_types_all_info_get(
    int unit);

/*
 * SUBMODULE PROPERTY_METHODS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnxf_data_module_testing_property_methods_feature_get(
    int unit,
    dnxf_data_module_testing_property_methods_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnxf_data_module_testing_property_methods_define_numeric_range,

    /**
     * Must be last one!
     */
    _dnxf_data_module_testing_property_methods_define_nof
} dnxf_data_module_testing_property_methods_define_e;

/* Get Data */
/**
 * \brief returns numeric data of numeric_range
 * Module - 'module_testing', Submodule - 'property_methods', data - 'numeric_range'
 * test numeric range method
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     numeric_range - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_module_testing_property_methods_numeric_range_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnxf_data_module_testing_property_methods_table_enable,
    dnxf_data_module_testing_property_methods_table_port_enable,
    dnxf_data_module_testing_property_methods_table_suffix_enable,
    dnxf_data_module_testing_property_methods_table_range,
    dnxf_data_module_testing_property_methods_table_port_range,
    dnxf_data_module_testing_property_methods_table_suffix_range,
    dnxf_data_module_testing_property_methods_table_direct_map,
    dnxf_data_module_testing_property_methods_table_port_direct_map,
    dnxf_data_module_testing_property_methods_table_suffix_direct_map,
    dnxf_data_module_testing_property_methods_table_custom,

    /**
     * Must be last one!
     */
    _dnxf_data_module_testing_property_methods_table_nof
} dnxf_data_module_testing_property_methods_table_e;

/* Get Data */
/**
 * \brief get table enable entry 
 * test all supported types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     enable - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_enable_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_enable_t * dnxf_data_module_testing_property_methods_enable_get(
    int unit);

/**
 * \brief get table port_enable entry 
 * test all supported types
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port
 * 
 * \return
 *     port_enable - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_port_enable_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_port_enable_t * dnxf_data_module_testing_property_methods_port_enable_get(
    int unit,
    int port);

/**
 * \brief get table suffix_enable entry 
 * test all supported types
 * 
 * \param [in] unit - unit #
 * \param [in] link - link id
 * 
 * \return
 *     suffix_enable - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_suffix_enable_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_suffix_enable_t * dnxf_data_module_testing_property_methods_suffix_enable_get(
    int unit,
    int link);

/**
 * \brief get table range entry 
 * test prop range method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     range - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_range_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_range_t * dnxf_data_module_testing_property_methods_range_get(
    int unit);

/**
 * \brief get table port_range entry 
 * test prop port range method types
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port
 * 
 * \return
 *     port_range - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_port_range_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_port_range_t * dnxf_data_module_testing_property_methods_port_range_get(
    int unit,
    int port);

/**
 * \brief get table suffix_range entry 
 * test prop suffix range method types
 * 
 * \param [in] unit - unit #
 * \param [in] link - link id
 * 
 * \return
 *     suffix_range - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_suffix_range_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_suffix_range_t * dnxf_data_module_testing_property_methods_suffix_range_get(
    int unit,
    int link);

/**
 * \brief get table direct_map entry 
 * test prop direct map method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     direct_map - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_direct_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_direct_map_t * dnxf_data_module_testing_property_methods_direct_map_get(
    int unit);

/**
 * \brief get table port_direct_map entry 
 * test prop port direct map method types
 * 
 * \param [in] unit - unit #
 * \param [in] port - logical port
 * 
 * \return
 *     port_direct_map - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_port_direct_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_port_direct_map_t * dnxf_data_module_testing_property_methods_port_direct_map_get(
    int unit,
    int port);

/**
 * \brief get table suffix_direct_map entry 
 * test prop suffix direct map method types
 * 
 * \param [in] unit - unit #
 * \param [in] link - link id
 * 
 * \return
 *     suffix_direct_map - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_suffix_direct_map_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_suffix_direct_map_t * dnxf_data_module_testing_property_methods_suffix_direct_map_get(
    int unit,
    int link);

/**
 * \brief get table custom entry 
 * test prop custom method types
 * 
 * \param [in] unit - unit #
 * \param [in] link - link id
 * \param [in] pipe - pipe id
 * 
 * \return
 *     custom - returns the relevant entry values grouped in struct - see dnxf_data_module_testing_property_methods_custom_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_module_testing_property_methods_custom_t * dnxf_data_module_testing_property_methods_custom_get(
    int unit,
    int link,
    int pipe);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'enable'
 * test all supported types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_enable_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'port_enable'
 * test all supported types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_port_enable_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'suffix_enable'
 * test all supported types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_suffix_enable_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'range'
 * test prop range method types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_range_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'port_range'
 * test prop port range method types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_port_range_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'suffix_range'
 * test prop suffix range method types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_suffix_range_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'direct_map'
 * test prop direct map method types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_direct_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'port_direct_map'
 * test prop port direct map method types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_port_direct_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'suffix_direct_map'
 * test prop suffix direct map method types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_suffix_direct_map_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'module_testing', Submodule - 'property_methods', table - 'custom'
 * test prop custom method types
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_property_methods_custom_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)enable info
 * test all supported types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     enable - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_enable_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)port_enable info
 * test all supported types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_enable - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_port_enable_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)suffix_enable info
 * test all supported types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     suffix_enable - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_suffix_enable_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)range info
 * test prop range method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     range - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_range_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)port_range info
 * test prop port range method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_range - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_port_range_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)suffix_range info
 * test prop suffix range method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     suffix_range - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_suffix_range_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)direct_map info
 * test prop direct map method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     direct_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_direct_map_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)port_direct_map info
 * test prop port direct map method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     port_direct_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_port_direct_map_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)suffix_direct_map info
 * test prop suffix direct map method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     suffix_direct_map - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_suffix_direct_map_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)custom info
 * test prop custom method types
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     custom - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_module_testing_property_methods_custom_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_module_testing_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNXF_DATA_INTERNAL_MODULE_TESTING_H_*/
/* *INDENT-ON* */
