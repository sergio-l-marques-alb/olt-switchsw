/** \file dnxf_data_internal_dev_init.h
 * 
 * MODULE DEVICE DATA - DNXF_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * For additional details about Device Data Component goto 'dnxc_data_mgmt.h'
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNXF_DATA_INTERNAL_DEV_INIT_H_
/*{*/
#define _DNXF_DATA_INTERNAL_DEV_INIT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnxf/dnxf_data/auto_generated/dnxf_data_internal.h>
#include <soc/dnxf/dnxf_data/auto_generated/dnxf_data_dev_init.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNXF_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnxf_data_dev_init_submodule_time,
    dnxf_data_dev_init_submodule_shadow,
    dnxf_data_dev_init_submodule_ha,

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_submodule_nof
} dnxf_data_dev_init_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE TIME:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnxf_data_dev_init_time_feature_get(
    int unit,
    dnxf_data_dev_init_time_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnxf_data_dev_init_time_define_init_total_thresh,
    dnxf_data_dev_init_time_define_appl_init_total_thresh,

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_time_define_nof
} dnxf_data_dev_init_time_define_e;

/* Get Data */
/**
 * \brief returns define data of init_total_thresh
 * Module - 'dev_init', Submodule - 'time', data - 'init_total_thresh'
 * Default time threshold (in microseconds) for the overall time that the BCM Init takes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     init_total_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_time_init_total_thresh_get(
    int unit);

/**
 * \brief returns define data of appl_init_total_thresh
 * Module - 'dev_init', Submodule - 'time', data - 'appl_init_total_thresh'
 * Default time threshold (in microseconds) for the overall time that the APPL Init takes
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     appl_init_total_thresh - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_time_appl_init_total_thresh_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnxf_data_dev_init_time_table_step_thresh,
    dnxf_data_dev_init_time_table_appl_step_thresh,

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_time_table_nof
} dnxf_data_dev_init_time_table_e;

/* Get Data */
/**
 * \brief get table step_thresh entry 
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 * 
 * \param [in] unit - unit #
 * \param [in] step_id - IDs for the different steps and sub-steps of the Init.
 * 
 * \return
 *     step_thresh - returns the relevant entry values grouped in struct - see dnxf_data_dev_init_time_step_thresh_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_dev_init_time_step_thresh_t * dnxf_data_dev_init_time_step_thresh_get(
    int unit,
    int step_id);

/**
 * \brief get table appl_step_thresh entry 
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 * 
 * \param [in] unit - unit #
 * \param [in] step_id - IDs for the different steps and sub-steps of the Init.
 * 
 * \return
 *     appl_step_thresh - returns the relevant entry values grouped in struct - see dnxf_data_dev_init_time_appl_step_thresh_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_dev_init_time_appl_step_thresh_t * dnxf_data_dev_init_time_appl_step_thresh_get(
    int unit,
    int step_id);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'time', table - 'step_thresh'
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_dev_init_time_step_thresh_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'time', table - 'appl_step_thresh'
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_dev_init_time_appl_step_thresh_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)step_thresh info
 * Time threshold (in microseconds) for the time each step is taking during BCM init
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     step_thresh - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_dev_init_time_step_thresh_info_get(
    int unit);

/**
 * \brief get general info table about table (for example key size)appl_step_thresh info
 * Time threshold (in microseconds) for the time each step is taking during APPL init
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     appl_step_thresh - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_dev_init_time_appl_step_thresh_info_get(
    int unit);

/*
 * SUBMODULE SHADOW:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnxf_data_dev_init_shadow_feature_get(
    int unit,
    dnxf_data_dev_init_shadow_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnxf_data_dev_init_shadow_define_cache_enable_all,
    dnxf_data_dev_init_shadow_define_cache_enable_ecc,
    dnxf_data_dev_init_shadow_define_cache_enable_parity,
    dnxf_data_dev_init_shadow_define_cache_enable_specific,
    dnxf_data_dev_init_shadow_define_cache_disable_specific,

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_shadow_define_nof
} dnxf_data_dev_init_shadow_define_e;

/* Get Data */
/**
 * \brief returns numeric data of cache_enable_all
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_all'
 * if true shadow all cacheable memory
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_all - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_shadow_cache_enable_all_get(
    int unit);

/**
 * \brief returns numeric data of cache_enable_ecc
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_ecc'
 * if true shadow all cacheable memory which contain ecc field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_ecc - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_shadow_cache_enable_ecc_get(
    int unit);

/**
 * \brief returns numeric data of cache_enable_parity
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_parity'
 * if true shadow all cacheable memory which contain parity field
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_parity - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_shadow_cache_enable_parity_get(
    int unit);

/**
 * \brief returns numeric data of cache_enable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_enable_specific'
 * if true, some specific memory be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_enable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_shadow_cache_enable_specific_get(
    int unit);

/**
 * \brief returns numeric data of cache_disable_specific
 * Module - 'dev_init', Submodule - 'shadow', data - 'cache_disable_specific'
 * if true, some specific memory won't be shadowed
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     cache_disable_specific - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_shadow_cache_disable_specific_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnxf_data_dev_init_shadow_table_uncacheable_mem,

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_shadow_table_nof
} dnxf_data_dev_init_shadow_table_e;

/* Get Data */
/**
 * \brief get table uncacheable_mem entry 
 * uncache memory
 * 
 * \param [in] unit - unit #
 * \param [in] index - uncacheable memory index
 * 
 * \return
 *     uncacheable_mem - returns the relevant entry values grouped in struct - see dnxf_data_dev_init_shadow_uncacheable_mem_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_dev_init_shadow_uncacheable_mem_t * dnxf_data_dev_init_shadow_uncacheable_mem_get(
    int unit,
    int index);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'shadow', table - 'uncacheable_mem'
 * uncache memory
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_dev_init_shadow_uncacheable_mem_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)uncacheable_mem info
 * uncache memory
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     uncacheable_mem - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_dev_init_shadow_uncacheable_mem_info_get(
    int unit);

/*
 * SUBMODULE HA:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feature - disabled/enabled
 * 
 * \param [in] unit - Unit #
 * \param [in] feature - feature to get (see enum definition for more details
 * 
 * \return
 *     is_supported - returns 1 if and only if supported and 0 otherwise
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
int dnxf_data_dev_init_ha_feature_get(
    int unit,
    dnxf_data_dev_init_ha_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnxf_data_dev_init_ha_define_warmboot_support,
    dnxf_data_dev_init_ha_define_sw_state_max_size,
    dnxf_data_dev_init_ha_define_stable_location,
    dnxf_data_dev_init_ha_define_stable_size,

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_ha_define_nof
} dnxf_data_dev_init_ha_define_e;

/* Get Data */
/**
 * \brief returns numeric data of warmboot_support
 * Module - 'dev_init', Submodule - 'ha', data - 'warmboot_support'
 * specify if unit should support wb
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     warmboot_support - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_ha_warmboot_support_get(
    int unit);

/**
 * \brief returns numeric data of sw_state_max_size
 * Module - 'dev_init', Submodule - 'ha', data - 'sw_state_max_size'
 * specify the amount of memory (in bytes) preallocated for sw state
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     sw_state_max_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_ha_sw_state_max_size_get(
    int unit);

/**
 * \brief returns numeric data of stable_location
 * Module - 'dev_init', Submodule - 'ha', data - 'stable_location'
 * Specify the stable cache option for Warm Boot operations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_location - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_ha_stable_location_get(
    int unit);

/**
 * \brief returns numeric data of stable_size
 * Module - 'dev_init', Submodule - 'ha', data - 'stable_size'
 * Specify the stable cache size in bytes used for Warm boot operations
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_size - the required data value
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
uint32 dnxf_data_dev_init_ha_stable_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnxf_data_dev_init_ha_table_stable_filename,

    /**
     * Must be last one!
     */
    _dnxf_data_dev_init_ha_table_nof
} dnxf_data_dev_init_ha_table_e;

/* Get Data */
/**
 * \brief get table stable_filename entry 
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_filename - returns the relevant entry values grouped in struct - see dnxf_data_dev_init_ha_stable_filename_t
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxf_data_dev_init_ha_stable_filename_t * dnxf_data_dev_init_ha_stable_filename_get(
    int unit);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'dev_init', Submodule - 'ha', table - 'stable_filename'
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 * 
 * \param [in] unit - Unit #
 * \param [out] buffer - buffer for the value
 * \param [in] key0 - key #0 index - 0 if not used
 * \param [in] key1 - key #1 index - 0 if not used
 * \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * 
 * \return
 *     err - See shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_dev_init_ha_stable_filename_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/* Get Table info */
/**
 * \brief get general info table about table (for example key size)stable_filename info
 * If the stable cache location is BCM_SWITCH_STABLE_APPLICATION, the local file system will be used to save the stable cache data with this filename
 * 
 * \param [in] unit - unit #
 * 
 * \return
 *     stable_filename - returns table info
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
const dnxc_data_table_info_t * dnxf_data_dev_init_ha_stable_filename_info_get(
    int unit);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \param [in] unit - Unit #
 * \param [out] module_data - pointer to module data
 * 
 * \return
 *     rv - see 'shr_error_e
 * \remark
 *   * Auto-generated using device data autocoder
 * \see
 *   * None
 */
shr_error_e dnxf_data_dev_init_init(
    int unit,
    dnxc_data_module_t *module_data);

/*
 * }
 */
/*}*/
#endif /*_DNXF_DATA_INTERNAL_DEV_INIT_H_*/
/* *INDENT-ON* */
