/** \file dnxf/swstate/auto_generated/access/dnxf_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * $Copyright: (c) 2019 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */

#ifndef __DNXF_ACCESS_H__
#define __DNXF_ACCESS_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnxf/swstate/auto_generated/types/dnxf_types.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/types.h>
#include <soc/dnxc/swstate/auto_generated/types/dnxc_types.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: dnxf_state_is_init
 */
typedef int (*dnxf_state_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: dnxf_state_init
 */
typedef int (*dnxf_state_init_cb)(
    int unit);

/**
 * implemented by: dnxf_state_modid_local_map_set
 */
typedef int (*dnxf_state_modid_local_map_set_cb)(
    int unit, uint32 local_map_idx_0, CONST soc_dnxf_modid_local_map_t *local_map);

/**
 * implemented by: dnxf_state_modid_local_map_get
 */
typedef int (*dnxf_state_modid_local_map_get_cb)(
    int unit, uint32 local_map_idx_0, soc_dnxf_modid_local_map_t *local_map);

/**
 * implemented by: dnxf_state_modid_local_map_alloc
 */
typedef int (*dnxf_state_modid_local_map_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_modid_local_map_valid_set
 */
typedef int (*dnxf_state_modid_local_map_valid_set_cb)(
    int unit, uint32 local_map_idx_0, uint32 valid);

/**
 * implemented by: dnxf_state_modid_local_map_valid_get
 */
typedef int (*dnxf_state_modid_local_map_valid_get_cb)(
    int unit, uint32 local_map_idx_0, uint32 *valid);

/**
 * implemented by: dnxf_state_modid_local_map_module_id_set
 */
typedef int (*dnxf_state_modid_local_map_module_id_set_cb)(
    int unit, uint32 local_map_idx_0, uint32 module_id);

/**
 * implemented by: dnxf_state_modid_local_map_module_id_get
 */
typedef int (*dnxf_state_modid_local_map_module_id_get_cb)(
    int unit, uint32 local_map_idx_0, uint32 *module_id);

/**
 * implemented by: dnxf_state_modid_group_map_set
 */
typedef int (*dnxf_state_modid_group_map_set_cb)(
    int unit, uint32 group_map_idx_0, CONST soc_dnxf_modid_group_map_t *group_map);

/**
 * implemented by: dnxf_state_modid_group_map_get
 */
typedef int (*dnxf_state_modid_group_map_get_cb)(
    int unit, uint32 group_map_idx_0, soc_dnxf_modid_group_map_t *group_map);

/**
 * implemented by: dnxf_state_modid_group_map_alloc
 */
typedef int (*dnxf_state_modid_group_map_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_modid_group_map_raw_set
 */
typedef int (*dnxf_state_modid_group_map_raw_set_cb)(
    int unit, uint32 group_map_idx_0, uint32 raw_idx_0, uint32 raw);

/**
 * implemented by: dnxf_state_modid_group_map_raw_get
 */
typedef int (*dnxf_state_modid_group_map_raw_get_cb)(
    int unit, uint32 group_map_idx_0, uint32 raw_idx_0, uint32 *raw);

/**
 * implemented by: dnxf_state_modid_modid_to_group_map_set
 */
typedef int (*dnxf_state_modid_modid_to_group_map_set_cb)(
    int unit, uint32 modid_to_group_map_idx_0, soc_module_t modid_to_group_map);

/**
 * implemented by: dnxf_state_modid_modid_to_group_map_get
 */
typedef int (*dnxf_state_modid_modid_to_group_map_get_cb)(
    int unit, uint32 modid_to_group_map_idx_0, soc_module_t *modid_to_group_map);

/**
 * implemented by: dnxf_state_mc_mode_set
 */
typedef int (*dnxf_state_mc_mode_set_cb)(
    int unit, uint32 mode);

/**
 * implemented by: dnxf_state_mc_mode_get
 */
typedef int (*dnxf_state_mc_mode_get_cb)(
    int unit, uint32 *mode);

/**
 * implemented by: dnxf_state_mc_id_map_set
 */
typedef int (*dnxf_state_mc_id_map_set_cb)(
    int unit, uint32 id_map_idx_0, uint32 id_map);

/**
 * implemented by: dnxf_state_mc_id_map_get
 */
typedef int (*dnxf_state_mc_id_map_get_cb)(
    int unit, uint32 id_map_idx_0, uint32 *id_map);

/**
 * implemented by: dnxf_state_mc_id_map_alloc
 */
typedef int (*dnxf_state_mc_id_map_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_mc_nof_mc_groups_created_set
 */
typedef int (*dnxf_state_mc_nof_mc_groups_created_set_cb)(
    int unit, uint32 nof_mc_groups_created);

/**
 * implemented by: dnxf_state_mc_nof_mc_groups_created_get
 */
typedef int (*dnxf_state_mc_nof_mc_groups_created_get_cb)(
    int unit, uint32 *nof_mc_groups_created);

/**
 * implemented by: dnxf_state_lb_group_to_first_link_set
 */
typedef int (*dnxf_state_lb_group_to_first_link_set_cb)(
    int unit, uint32 group_to_first_link_idx_0, soc_port_t group_to_first_link);

/**
 * implemented by: dnxf_state_lb_group_to_first_link_get
 */
typedef int (*dnxf_state_lb_group_to_first_link_get_cb)(
    int unit, uint32 group_to_first_link_idx_0, soc_port_t *group_to_first_link);

/**
 * implemented by: dnxf_state_lb_group_to_first_link_alloc
 */
typedef int (*dnxf_state_lb_group_to_first_link_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_port_cl72_conf_set
 */
typedef int (*dnxf_state_port_cl72_conf_set_cb)(
    int unit, uint32 cl72_conf_idx_0, uint32 cl72_conf);

/**
 * implemented by: dnxf_state_port_cl72_conf_get
 */
typedef int (*dnxf_state_port_cl72_conf_get_cb)(
    int unit, uint32 cl72_conf_idx_0, uint32 *cl72_conf);

/**
 * implemented by: dnxf_state_port_cl72_conf_alloc
 */
typedef int (*dnxf_state_port_cl72_conf_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_port_phy_lane_config_set
 */
typedef int (*dnxf_state_port_phy_lane_config_set_cb)(
    int unit, uint32 phy_lane_config_idx_0, int phy_lane_config);

/**
 * implemented by: dnxf_state_port_phy_lane_config_get
 */
typedef int (*dnxf_state_port_phy_lane_config_get_cb)(
    int unit, uint32 phy_lane_config_idx_0, int *phy_lane_config);

/**
 * implemented by: dnxf_state_port_phy_lane_config_alloc
 */
typedef int (*dnxf_state_port_phy_lane_config_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_alloc_bitmap
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_alloc_bitmap_cb)(
    int unit, uint32 _nof_bits_to_alloc);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_set
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_set_cb)(
    int unit, uint32 _bit_num);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_clear
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_clear_cb)(
    int unit, uint32 _bit_num);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_get
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_get_cb)(
    int unit, uint32 _bit_num, uint8* result);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_read
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_read_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_write
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_write_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_and
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_and_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_or
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_or_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_xor
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_xor_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_remove
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_remove_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_negate
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_negate_cb)(
    int unit, uint32 _first, uint32 _count);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_clear
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_clear_cb)(
    int unit, uint32 _first, uint32 _count);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_set
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_set_cb)(
    int unit, uint32 _first, uint32 _count);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_null
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_null_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_test
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_test_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_eq
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_eq_cb)(
    int unit, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

/**
 * implemented by: dnxf_state_port_is_connected_to_repeater_bit_range_count
 */
typedef int (*dnxf_state_port_is_connected_to_repeater_bit_range_count_cb)(
    int unit, uint32 _first, uint32 _range, int *result);

/**
 * implemented by: dnxf_state_intr_flags_set
 */
typedef int (*dnxf_state_intr_flags_set_cb)(
    int unit, uint32 flags_idx_0, uint32 flags);

/**
 * implemented by: dnxf_state_intr_flags_get
 */
typedef int (*dnxf_state_intr_flags_get_cb)(
    int unit, uint32 flags_idx_0, uint32 *flags);

/**
 * implemented by: dnxf_state_intr_flags_alloc
 */
typedef int (*dnxf_state_intr_flags_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_intr_storm_timed_count_set
 */
typedef int (*dnxf_state_intr_storm_timed_count_set_cb)(
    int unit, uint32 storm_timed_count_idx_0, uint32 storm_timed_count);

/**
 * implemented by: dnxf_state_intr_storm_timed_count_get
 */
typedef int (*dnxf_state_intr_storm_timed_count_get_cb)(
    int unit, uint32 storm_timed_count_idx_0, uint32 *storm_timed_count);

/**
 * implemented by: dnxf_state_intr_storm_timed_count_alloc
 */
typedef int (*dnxf_state_intr_storm_timed_count_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_intr_storm_timed_period_set
 */
typedef int (*dnxf_state_intr_storm_timed_period_set_cb)(
    int unit, uint32 storm_timed_period_idx_0, uint32 storm_timed_period);

/**
 * implemented by: dnxf_state_intr_storm_timed_period_get
 */
typedef int (*dnxf_state_intr_storm_timed_period_get_cb)(
    int unit, uint32 storm_timed_period_idx_0, uint32 *storm_timed_period);

/**
 * implemented by: dnxf_state_intr_storm_timed_period_alloc
 */
typedef int (*dnxf_state_intr_storm_timed_period_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_intr_storm_nominal_set
 */
typedef int (*dnxf_state_intr_storm_nominal_set_cb)(
    int unit, uint32 storm_nominal);

/**
 * implemented by: dnxf_state_intr_storm_nominal_get
 */
typedef int (*dnxf_state_intr_storm_nominal_get_cb)(
    int unit, uint32 *storm_nominal);

/**
 * implemented by: dnxf_state_lane_map_db_map_size_set
 */
typedef int (*dnxf_state_lane_map_db_map_size_set_cb)(
    int unit, int map_size);

/**
 * implemented by: dnxf_state_lane_map_db_map_size_get
 */
typedef int (*dnxf_state_lane_map_db_map_size_get_cb)(
    int unit, int *map_size);

/**
 * implemented by: dnxf_state_lane_map_db_lane2serdes_set
 */
typedef int (*dnxf_state_lane_map_db_lane2serdes_set_cb)(
    int unit, uint32 lane2serdes_idx_0, CONST soc_dnxc_lane_map_db_map_t *lane2serdes);

/**
 * implemented by: dnxf_state_lane_map_db_lane2serdes_get
 */
typedef int (*dnxf_state_lane_map_db_lane2serdes_get_cb)(
    int unit, uint32 lane2serdes_idx_0, soc_dnxc_lane_map_db_map_t *lane2serdes);

/**
 * implemented by: dnxf_state_lane_map_db_lane2serdes_alloc
 */
typedef int (*dnxf_state_lane_map_db_lane2serdes_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_lane_map_db_lane2serdes_rx_id_set
 */
typedef int (*dnxf_state_lane_map_db_lane2serdes_rx_id_set_cb)(
    int unit, uint32 lane2serdes_idx_0, int rx_id);

/**
 * implemented by: dnxf_state_lane_map_db_lane2serdes_rx_id_get
 */
typedef int (*dnxf_state_lane_map_db_lane2serdes_rx_id_get_cb)(
    int unit, uint32 lane2serdes_idx_0, int *rx_id);

/**
 * implemented by: dnxf_state_lane_map_db_lane2serdes_tx_id_set
 */
typedef int (*dnxf_state_lane_map_db_lane2serdes_tx_id_set_cb)(
    int unit, uint32 lane2serdes_idx_0, int tx_id);

/**
 * implemented by: dnxf_state_lane_map_db_lane2serdes_tx_id_get
 */
typedef int (*dnxf_state_lane_map_db_lane2serdes_tx_id_get_cb)(
    int unit, uint32 lane2serdes_idx_0, int *tx_id);

/**
 * implemented by: dnxf_state_lane_map_db_serdes2lane_set
 */
typedef int (*dnxf_state_lane_map_db_serdes2lane_set_cb)(
    int unit, uint32 serdes2lane_idx_0, CONST soc_dnxc_lane_map_db_map_t *serdes2lane);

/**
 * implemented by: dnxf_state_lane_map_db_serdes2lane_get
 */
typedef int (*dnxf_state_lane_map_db_serdes2lane_get_cb)(
    int unit, uint32 serdes2lane_idx_0, soc_dnxc_lane_map_db_map_t *serdes2lane);

/**
 * implemented by: dnxf_state_lane_map_db_serdes2lane_alloc
 */
typedef int (*dnxf_state_lane_map_db_serdes2lane_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnxf_state_lane_map_db_serdes2lane_rx_id_set
 */
typedef int (*dnxf_state_lane_map_db_serdes2lane_rx_id_set_cb)(
    int unit, uint32 serdes2lane_idx_0, int rx_id);

/**
 * implemented by: dnxf_state_lane_map_db_serdes2lane_rx_id_get
 */
typedef int (*dnxf_state_lane_map_db_serdes2lane_rx_id_get_cb)(
    int unit, uint32 serdes2lane_idx_0, int *rx_id);

/**
 * implemented by: dnxf_state_lane_map_db_serdes2lane_tx_id_set
 */
typedef int (*dnxf_state_lane_map_db_serdes2lane_tx_id_set_cb)(
    int unit, uint32 serdes2lane_idx_0, int tx_id);

/**
 * implemented by: dnxf_state_lane_map_db_serdes2lane_tx_id_get
 */
typedef int (*dnxf_state_lane_map_db_serdes2lane_tx_id_get_cb)(
    int unit, uint32 serdes2lane_idx_0, int *tx_id);

/**
 * implemented by: dnxf_state_synce_master_synce_enabled_set
 */
typedef int (*dnxf_state_synce_master_synce_enabled_set_cb)(
    int unit, int master_synce_enabled);

/**
 * implemented by: dnxf_state_synce_master_synce_enabled_get
 */
typedef int (*dnxf_state_synce_master_synce_enabled_get_cb)(
    int unit, int *master_synce_enabled);

/**
 * implemented by: dnxf_state_synce_slave_synce_enabled_set
 */
typedef int (*dnxf_state_synce_slave_synce_enabled_set_cb)(
    int unit, int slave_synce_enabled);

/**
 * implemented by: dnxf_state_synce_slave_synce_enabled_get
 */
typedef int (*dnxf_state_synce_slave_synce_enabled_get_cb)(
    int unit, int *slave_synce_enabled);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable valid
 */
typedef struct {
    dnxf_state_modid_local_map_valid_set_cb set;
    dnxf_state_modid_local_map_valid_get_cb get;
} dnxf_state_modid_local_map_valid_cbs;

/**
 * This structure holds the access functions for the variable module_id
 */
typedef struct {
    dnxf_state_modid_local_map_module_id_set_cb set;
    dnxf_state_modid_local_map_module_id_get_cb get;
} dnxf_state_modid_local_map_module_id_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxf_modid_local_map_t
 */
typedef struct {
    dnxf_state_modid_local_map_set_cb set;
    dnxf_state_modid_local_map_get_cb get;
    dnxf_state_modid_local_map_alloc_cb alloc;
    /**
     * Access struct for valid
     */
    dnxf_state_modid_local_map_valid_cbs valid;
    /**
     * Access struct for module_id
     */
    dnxf_state_modid_local_map_module_id_cbs module_id;
} dnxf_state_modid_local_map_cbs;

/**
 * This structure holds the access functions for the variable raw
 */
typedef struct {
    dnxf_state_modid_group_map_raw_set_cb set;
    dnxf_state_modid_group_map_raw_get_cb get;
} dnxf_state_modid_group_map_raw_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxf_modid_group_map_t
 */
typedef struct {
    dnxf_state_modid_group_map_set_cb set;
    dnxf_state_modid_group_map_get_cb get;
    dnxf_state_modid_group_map_alloc_cb alloc;
    /**
     * Access struct for raw
     */
    dnxf_state_modid_group_map_raw_cbs raw;
} dnxf_state_modid_group_map_cbs;

/**
 * This structure holds the access functions for the variable modid_to_group_map
 */
typedef struct {
    dnxf_state_modid_modid_to_group_map_set_cb set;
    dnxf_state_modid_modid_to_group_map_get_cb get;
} dnxf_state_modid_modid_to_group_map_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxf_modid_t
 */
typedef struct {
    /**
     * Access struct for local_map
     */
    dnxf_state_modid_local_map_cbs local_map;
    /**
     * Access struct for group_map
     */
    dnxf_state_modid_group_map_cbs group_map;
    /**
     * Access struct for modid_to_group_map
     */
    dnxf_state_modid_modid_to_group_map_cbs modid_to_group_map;
} dnxf_state_modid_cbs;

/**
 * This structure holds the access functions for the variable mode
 */
typedef struct {
    dnxf_state_mc_mode_set_cb set;
    dnxf_state_mc_mode_get_cb get;
} dnxf_state_mc_mode_cbs;

/**
 * This structure holds the access functions for the variable id_map
 */
typedef struct {
    dnxf_state_mc_id_map_set_cb set;
    dnxf_state_mc_id_map_get_cb get;
    dnxf_state_mc_id_map_alloc_cb alloc;
} dnxf_state_mc_id_map_cbs;

/**
 * This structure holds the access functions for the variable nof_mc_groups_created
 */
typedef struct {
    dnxf_state_mc_nof_mc_groups_created_set_cb set;
    dnxf_state_mc_nof_mc_groups_created_get_cb get;
} dnxf_state_mc_nof_mc_groups_created_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxf_mc_t
 */
typedef struct {
    /**
     * Access struct for mode
     */
    dnxf_state_mc_mode_cbs mode;
    /**
     * Access struct for id_map
     */
    dnxf_state_mc_id_map_cbs id_map;
    /**
     * Access struct for nof_mc_groups_created
     */
    dnxf_state_mc_nof_mc_groups_created_cbs nof_mc_groups_created;
} dnxf_state_mc_cbs;

/**
 * This structure holds the access functions for the variable group_to_first_link
 */
typedef struct {
    dnxf_state_lb_group_to_first_link_set_cb set;
    dnxf_state_lb_group_to_first_link_get_cb get;
    dnxf_state_lb_group_to_first_link_alloc_cb alloc;
} dnxf_state_lb_group_to_first_link_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxf_lb_t
 */
typedef struct {
    /**
     * Access struct for group_to_first_link
     */
    dnxf_state_lb_group_to_first_link_cbs group_to_first_link;
} dnxf_state_lb_cbs;

/**
 * This structure holds the access functions for the variable cl72_conf
 */
typedef struct {
    dnxf_state_port_cl72_conf_set_cb set;
    dnxf_state_port_cl72_conf_get_cb get;
    dnxf_state_port_cl72_conf_alloc_cb alloc;
} dnxf_state_port_cl72_conf_cbs;

/**
 * This structure holds the access functions for the variable phy_lane_config
 */
typedef struct {
    dnxf_state_port_phy_lane_config_set_cb set;
    dnxf_state_port_phy_lane_config_get_cb get;
    dnxf_state_port_phy_lane_config_alloc_cb alloc;
} dnxf_state_port_phy_lane_config_cbs;

/**
 * This structure holds the access functions for the variable is_connected_to_repeater
 */
typedef struct {
    dnxf_state_port_is_connected_to_repeater_alloc_bitmap_cb alloc_bitmap;
    dnxf_state_port_is_connected_to_repeater_bit_set_cb bit_set;
    dnxf_state_port_is_connected_to_repeater_bit_clear_cb bit_clear;
    dnxf_state_port_is_connected_to_repeater_bit_get_cb bit_get;
    dnxf_state_port_is_connected_to_repeater_bit_range_read_cb bit_range_read;
    dnxf_state_port_is_connected_to_repeater_bit_range_write_cb bit_range_write;
    dnxf_state_port_is_connected_to_repeater_bit_range_and_cb bit_range_and;
    dnxf_state_port_is_connected_to_repeater_bit_range_or_cb bit_range_or;
    dnxf_state_port_is_connected_to_repeater_bit_range_xor_cb bit_range_xor;
    dnxf_state_port_is_connected_to_repeater_bit_range_remove_cb bit_range_remove;
    dnxf_state_port_is_connected_to_repeater_bit_range_negate_cb bit_range_negate;
    dnxf_state_port_is_connected_to_repeater_bit_range_clear_cb bit_range_clear;
    dnxf_state_port_is_connected_to_repeater_bit_range_set_cb bit_range_set;
    dnxf_state_port_is_connected_to_repeater_bit_range_null_cb bit_range_null;
    dnxf_state_port_is_connected_to_repeater_bit_range_test_cb bit_range_test;
    dnxf_state_port_is_connected_to_repeater_bit_range_eq_cb bit_range_eq;
    dnxf_state_port_is_connected_to_repeater_bit_range_count_cb bit_range_count;
} dnxf_state_port_is_connected_to_repeater_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxf_port_t
 */
typedef struct {
    /**
     * Access struct for cl72_conf
     */
    dnxf_state_port_cl72_conf_cbs cl72_conf;
    /**
     * Access struct for phy_lane_config
     */
    dnxf_state_port_phy_lane_config_cbs phy_lane_config;
    /**
     * Access struct for is_connected_to_repeater
     */
    dnxf_state_port_is_connected_to_repeater_cbs is_connected_to_repeater;
} dnxf_state_port_cbs;

/**
 * This structure holds the access functions for the variable flags
 */
typedef struct {
    dnxf_state_intr_flags_set_cb set;
    dnxf_state_intr_flags_get_cb get;
    dnxf_state_intr_flags_alloc_cb alloc;
} dnxf_state_intr_flags_cbs;

/**
 * This structure holds the access functions for the variable storm_timed_count
 */
typedef struct {
    dnxf_state_intr_storm_timed_count_set_cb set;
    dnxf_state_intr_storm_timed_count_get_cb get;
    dnxf_state_intr_storm_timed_count_alloc_cb alloc;
} dnxf_state_intr_storm_timed_count_cbs;

/**
 * This structure holds the access functions for the variable storm_timed_period
 */
typedef struct {
    dnxf_state_intr_storm_timed_period_set_cb set;
    dnxf_state_intr_storm_timed_period_get_cb get;
    dnxf_state_intr_storm_timed_period_alloc_cb alloc;
} dnxf_state_intr_storm_timed_period_cbs;

/**
 * This structure holds the access functions for the variable storm_nominal
 */
typedef struct {
    dnxf_state_intr_storm_nominal_set_cb set;
    dnxf_state_intr_storm_nominal_get_cb get;
} dnxf_state_intr_storm_nominal_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxf_intr_t
 */
typedef struct {
    /**
     * Access struct for flags
     */
    dnxf_state_intr_flags_cbs flags;
    /**
     * Access struct for storm_timed_count
     */
    dnxf_state_intr_storm_timed_count_cbs storm_timed_count;
    /**
     * Access struct for storm_timed_period
     */
    dnxf_state_intr_storm_timed_period_cbs storm_timed_period;
    /**
     * Access struct for storm_nominal
     */
    dnxf_state_intr_storm_nominal_cbs storm_nominal;
} dnxf_state_intr_cbs;

/**
 * This structure holds the access functions for the variable map_size
 */
typedef struct {
    dnxf_state_lane_map_db_map_size_set_cb set;
    dnxf_state_lane_map_db_map_size_get_cb get;
} dnxf_state_lane_map_db_map_size_cbs;

/**
 * This structure holds the access functions for the variable rx_id
 */
typedef struct {
    dnxf_state_lane_map_db_lane2serdes_rx_id_set_cb set;
    dnxf_state_lane_map_db_lane2serdes_rx_id_get_cb get;
} dnxf_state_lane_map_db_lane2serdes_rx_id_cbs;

/**
 * This structure holds the access functions for the variable tx_id
 */
typedef struct {
    dnxf_state_lane_map_db_lane2serdes_tx_id_set_cb set;
    dnxf_state_lane_map_db_lane2serdes_tx_id_get_cb get;
} dnxf_state_lane_map_db_lane2serdes_tx_id_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxc_lane_map_db_map_t
 */
typedef struct {
    dnxf_state_lane_map_db_lane2serdes_set_cb set;
    dnxf_state_lane_map_db_lane2serdes_get_cb get;
    dnxf_state_lane_map_db_lane2serdes_alloc_cb alloc;
    /**
     * Access struct for rx_id
     */
    dnxf_state_lane_map_db_lane2serdes_rx_id_cbs rx_id;
    /**
     * Access struct for tx_id
     */
    dnxf_state_lane_map_db_lane2serdes_tx_id_cbs tx_id;
} dnxf_state_lane_map_db_lane2serdes_cbs;

/**
 * This structure holds the access functions for the variable rx_id
 */
typedef struct {
    dnxf_state_lane_map_db_serdes2lane_rx_id_set_cb set;
    dnxf_state_lane_map_db_serdes2lane_rx_id_get_cb get;
} dnxf_state_lane_map_db_serdes2lane_rx_id_cbs;

/**
 * This structure holds the access functions for the variable tx_id
 */
typedef struct {
    dnxf_state_lane_map_db_serdes2lane_tx_id_set_cb set;
    dnxf_state_lane_map_db_serdes2lane_tx_id_get_cb get;
} dnxf_state_lane_map_db_serdes2lane_tx_id_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxc_lane_map_db_map_t
 */
typedef struct {
    dnxf_state_lane_map_db_serdes2lane_set_cb set;
    dnxf_state_lane_map_db_serdes2lane_get_cb get;
    dnxf_state_lane_map_db_serdes2lane_alloc_cb alloc;
    /**
     * Access struct for rx_id
     */
    dnxf_state_lane_map_db_serdes2lane_rx_id_cbs rx_id;
    /**
     * Access struct for tx_id
     */
    dnxf_state_lane_map_db_serdes2lane_tx_id_cbs tx_id;
} dnxf_state_lane_map_db_serdes2lane_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxc_lane_map_db_t
 */
typedef struct {
    /**
     * Access struct for map_size
     */
    dnxf_state_lane_map_db_map_size_cbs map_size;
    /**
     * Access struct for lane2serdes
     */
    dnxf_state_lane_map_db_lane2serdes_cbs lane2serdes;
    /**
     * Access struct for serdes2lane
     */
    dnxf_state_lane_map_db_serdes2lane_cbs serdes2lane;
} dnxf_state_lane_map_db_cbs;

/**
 * This structure holds the access functions for the variable master_synce_enabled
 */
typedef struct {
    dnxf_state_synce_master_synce_enabled_set_cb set;
    dnxf_state_synce_master_synce_enabled_get_cb get;
} dnxf_state_synce_master_synce_enabled_cbs;

/**
 * This structure holds the access functions for the variable slave_synce_enabled
 */
typedef struct {
    dnxf_state_synce_slave_synce_enabled_set_cb set;
    dnxf_state_synce_slave_synce_enabled_get_cb get;
} dnxf_state_synce_slave_synce_enabled_cbs;

/**
 * This structure holds the access functions for the variable soc_dnxc_synce_status_t
 */
typedef struct {
    /**
     * Access struct for master_synce_enabled
     */
    dnxf_state_synce_master_synce_enabled_cbs master_synce_enabled;
    /**
     * Access struct for slave_synce_enabled
     */
    dnxf_state_synce_slave_synce_enabled_cbs slave_synce_enabled;
} dnxf_state_synce_cbs;

/**
 * This structure holds the access functions for the variable dnxf_state_t
 */
typedef struct {
    dnxf_state_is_init_cb is_init;
    dnxf_state_init_cb init;
    /**
     * Access struct for modid
     */
    dnxf_state_modid_cbs modid;
    /**
     * Access struct for mc
     */
    dnxf_state_mc_cbs mc;
    /**
     * Access struct for lb
     */
    dnxf_state_lb_cbs lb;
    /**
     * Access struct for port
     */
    dnxf_state_port_cbs port;
    /**
     * Access struct for intr
     */
    dnxf_state_intr_cbs intr;
    /**
     * Access struct for lane_map_db
     */
    dnxf_state_lane_map_db_cbs lane_map_db;
    /**
     * Access struct for synce
     */
    dnxf_state_synce_cbs synce;
} dnxf_state_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern dnxf_state_cbs dnxf_state;

#endif /* __DNXF_ACCESS_H__ */
