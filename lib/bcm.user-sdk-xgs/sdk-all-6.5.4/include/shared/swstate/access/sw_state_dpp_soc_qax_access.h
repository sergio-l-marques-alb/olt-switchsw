/* $Id: $
 * 
 * $Copyright: Copyright 2016 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 * search for 'sw_state_cbs_t' for the root of the struct
 */

#ifndef _SHR_SW_STATE_DPP_SOC_QAX_ACCESS_H_
#define _SHR_SW_STATE_DPP_SOC_QAX_ACCESS_H_

/********************************* access calbacks definitions *************************************/
/* this set of callbacks, are the callbacks used in the access calbacks struct 'sw_state_cbs_t' to */
/* access the data in 'sw_state_t'.                                                                */
/* the calbacks are inserted into the access struct by 'sw_state_access_cb_init'.                  */
/***************************************************************************************************/

/* implemented by: sw_state_dpp_soc_qax_verify */
typedef int (*sw_state_dpp_soc_qax_verify_cb)(
    int unit);

/* implemented by: sw_state_dpp_soc_qax_tm_verify */
typedef int (*sw_state_dpp_soc_qax_tm_verify_cb)(
    int unit);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_verify */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_verify_cb)(
    int unit);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_alloc_bitmap */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_alloc_bitmap_cb)(
    int unit, int _nof_bits_to_alloc);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_free */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_free_cb)(
    int unit);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_set */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_set_cb)(
    int unit, int _bit_num);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_clear */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_clear_cb)(
    int unit, int _bit_num);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_get */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_get_cb)(
    int unit, int _bit_num, uint8* result);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_read */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_read_cb)(
    int unit, int sw_state_bmp_first, int result_first, int _range, SHR_BITDCL *result);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_write */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_write_cb)(
    int unit, int sw_state_bmp_first, int input_bmp_first, int _range, SHR_BITDCL *input_bmp);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_and */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_and_cb)(
    int unit, int _first, int _count, SHR_BITDCL *input_bmp);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_or */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_or_cb)(
    int unit, int _first, int _count, SHR_BITDCL *input_bmp);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_xor */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_xor_cb)(
    int unit, int _first, int _count, SHR_BITDCL *input_bmp);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_remove */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_remove_cb)(
    int unit, int _first, int _count, SHR_BITDCL *input_bmp);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_negate */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_negate_cb)(
    int unit, int _first, int _count);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_clear */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_clear_cb)(
    int unit, int _first, int _count);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_set */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_set_cb)(
    int unit, int _first, int _count);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_null */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_null_cb)(
    int unit, int _first, int _count, uint8 *result);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_test */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_test_cb)(
    int unit, int _first, int _count, uint8 *result);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_eq */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_eq_cb)(
    int unit, SHR_BITDCL *input_bmp, int _first, int _count, uint8 *result);

/* implemented by: sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_count */
typedef int (*sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_count_cb)(
    int unit, int _first, int _range, int *result);

/* implemented by: sw_state_dpp_soc_qax_ipsec_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_set_cb)(
    int unit, CONST soc_qax_sw_state_ipsec_t *ipsec);

/* implemented by: sw_state_dpp_soc_qax_ipsec_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_get_cb)(
    int unit, soc_qax_sw_state_ipsec_t *ipsec);

/* implemented by: sw_state_dpp_soc_qax_ipsec_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_verify_cb)(
    int unit);

/* implemented by: sw_state_dpp_soc_qax_ipsec_ipsec_port_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_ipsec_port_set_cb)(
    int unit, soc_port_t ipsec_port);

/* implemented by: sw_state_dpp_soc_qax_ipsec_ipsec_port_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_ipsec_port_get_cb)(
    int unit, soc_port_t *ipsec_port);

/* implemented by: sw_state_dpp_soc_qax_ipsec_ipsec_port_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_ipsec_port_verify_cb)(
    int unit);

/* implemented by: sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_set_cb)(
    int unit, uint32 num_of_ipsec_channels);

/* implemented by: sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_get_cb)(
    int unit, uint32 *num_of_ipsec_channels);

/* implemented by: sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_verify_cb)(
    int unit);

/* implemented by: sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_set_cb)(
    int unit, uint32 num_of_bfd_channels);

/* implemented by: sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_get_cb)(
    int unit, uint32 *num_of_bfd_channels);

/* implemented by: sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_verify_cb)(
    int unit);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_set_cb)(
    int unit, int sa_idx_0, CONST bcm_ipsec_sa_info_t *sa);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_get_cb)(
    int unit, int sa_idx_0, bcm_ipsec_sa_info_t *sa);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_verify_cb)(
    int unit, int sa_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_set_cb)(
    int unit, int sa_idx_0, uint32 initial_seq_num);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_get_cb)(
    int unit, int sa_idx_0, uint32 *initial_seq_num);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_verify_cb)(
    int unit, int sa_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_mtu_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_mtu_set_cb)(
    int unit, int sa_idx_0, uint32 mtu);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_mtu_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_mtu_get_cb)(
    int unit, int sa_idx_0, uint32 *mtu);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_mtu_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_mtu_verify_cb)(
    int unit, int sa_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_set_cb)(
    int unit, int sa_idx_0, uint8 fragmentation_enable);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_get_cb)(
    int unit, int sa_idx_0, uint8 *fragmentation_enable);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_verify_cb)(
    int unit, int sa_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_set_cb)(
    int unit, int sa_idx_0, bcm_ipsec_algo_type_t encrypt_type);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_get_cb)(
    int unit, int sa_idx_0, bcm_ipsec_algo_type_t *encrypt_type);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_verify_cb)(
    int unit, int sa_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_auth_type_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_auth_type_set_cb)(
    int unit, int sa_idx_0, bcm_ipsec_auth_type_t auth_type);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_auth_type_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_auth_type_get_cb)(
    int unit, int sa_idx_0, bcm_ipsec_auth_type_t *auth_type);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_auth_type_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_auth_type_verify_cb)(
    int unit, int sa_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_sa_direction_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_sa_direction_set_cb)(
    int unit, int sa_idx_0, bcm_ipsec_direction_t sa_direction);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_sa_direction_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_sa_direction_get_cb)(
    int unit, int sa_idx_0, bcm_ipsec_direction_t *sa_direction);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_sa_direction_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_sa_direction_verify_cb)(
    int unit, int sa_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_spi_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_spi_set_cb)(
    int unit, int sa_idx_0, uint32 spi);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_spi_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_spi_get_cb)(
    int unit, int sa_idx_0, uint32 *spi);

/* implemented by: sw_state_dpp_soc_qax_ipsec_sa_spi_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_sa_spi_verify_cb)(
    int unit, int sa_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_set_cb)(
    int unit, int tunnel_idx_0, CONST bcm_ipsec_tunnel_info_t *tunnel);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_get_cb)(
    int unit, int tunnel_idx_0, bcm_ipsec_tunnel_info_t *tunnel);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_context_id_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_context_id_set_cb)(
    int unit, int tunnel_idx_0, uint32 context_id);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_context_id_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_context_id_get_cb)(
    int unit, int tunnel_idx_0, uint32 *context_id);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_context_id_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_context_id_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_set_cb)(
    int unit, int tunnel_idx_0, CONST bcm_ip_addr_t *local_ip);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_get_cb)(
    int unit, int tunnel_idx_0, bcm_ip_addr_t *local_ip);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_set_cb)(
    int unit, int tunnel_idx_0, int protocol);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_get_cb)(
    int unit, int tunnel_idx_0, int *protocol);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_set_cb)(
    int unit, int tunnel_idx_0, CONST bcm_ipv4_ipv6_addr_t *addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_get_cb)(
    int unit, int tunnel_idx_0, bcm_ipv4_ipv6_addr_t *addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_set_cb)(
    int unit, int tunnel_idx_0, bcm_ip_t ipv4_addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_get_cb)(
    int unit, int tunnel_idx_0, bcm_ip_t *ipv4_addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_set_cb)(
    int unit, int tunnel_idx_0, int ipv6_addr_idx_0, uint8 ipv6_addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_get_cb)(
    int unit, int tunnel_idx_0, int ipv6_addr_idx_0, uint8 *ipv6_addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_verify_cb)(
    int unit, int tunnel_idx_0, int ipv6_addr_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_set_cb)(
    int unit, int tunnel_idx_0, CONST bcm_ip_addr_t *remote_ip);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_get_cb)(
    int unit, int tunnel_idx_0, bcm_ip_addr_t *remote_ip);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_set_cb)(
    int unit, int tunnel_idx_0, int protocol);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_get_cb)(
    int unit, int tunnel_idx_0, int *protocol);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_set_cb)(
    int unit, int tunnel_idx_0, CONST bcm_ipv4_ipv6_addr_t *addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_get_cb)(
    int unit, int tunnel_idx_0, bcm_ipv4_ipv6_addr_t *addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_set_cb)(
    int unit, int tunnel_idx_0, bcm_ip_t ipv4_addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_get_cb)(
    int unit, int tunnel_idx_0, bcm_ip_t *ipv4_addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_set_cb)(
    int unit, int tunnel_idx_0, int ipv6_addr_idx_0, uint8 ipv6_addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_get_cb)(
    int unit, int tunnel_idx_0, int ipv6_addr_idx_0, uint8 *ipv6_addr);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_verify_cb)(
    int unit, int tunnel_idx_0, int ipv6_addr_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_ttl_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_ttl_set_cb)(
    int unit, int tunnel_idx_0, uint8 ttl);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_ttl_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_ttl_get_cb)(
    int unit, int tunnel_idx_0, uint8 *ttl);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_ttl_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_ttl_verify_cb)(
    int unit, int tunnel_idx_0);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_dscp_set */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_dscp_set_cb)(
    int unit, int tunnel_idx_0, uint8 dscp);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_dscp_get */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_dscp_get_cb)(
    int unit, int tunnel_idx_0, uint8 *dscp);

/* implemented by: sw_state_dpp_soc_qax_ipsec_tunnel_dscp_verify */
typedef int (*sw_state_dpp_soc_qax_ipsec_tunnel_dscp_verify_cb)(
    int unit, int tunnel_idx_0);

/*********************************** access calbacks struct ****************************************/
/* this set of structs, rooted at 'sw_state_cbs_t' define the access layer for the entire SW state.*/
/* use this tree to alloc/free/set/get fields in the sw state rooted at 'sw_state_t'.              */
/* NOTE: 'sw_state_t' data should not be accessed directly.                                        */
/***************************************************************************************************/

typedef struct sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_cbs_s {
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_alloc_bitmap_cb alloc_bitmap;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_free_cb free;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_set_cb bit_set;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_clear_cb bit_clear;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_get_cb bit_get;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_read_cb bit_range_read;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_write_cb bit_range_write;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_and_cb bit_range_and;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_or_cb bit_range_or;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_xor_cb bit_range_xor;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_remove_cb bit_range_remove;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_negate_cb bit_range_negate;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_clear_cb bit_range_clear;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_set_cb bit_range_set;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_null_cb bit_range_null;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_test_cb bit_range_test;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_eq_cb bit_range_eq;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_bit_range_count_cb bit_range_count;
} sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_cbs_t;

typedef struct sw_state_dpp_soc_qax_tm_lb_info_cbs_s {
    sw_state_dpp_soc_qax_tm_lb_info_verify_cb verify;
    sw_state_dpp_soc_qax_tm_lb_info_lb_egr_if_bmp_used_cbs_t lb_egr_if_bmp_used;
} sw_state_dpp_soc_qax_tm_lb_info_cbs_t;

typedef struct sw_state_dpp_soc_qax_tm_cbs_s {
    sw_state_dpp_soc_qax_tm_verify_cb verify;
    sw_state_dpp_soc_qax_tm_lb_info_cbs_t lb_info;
} sw_state_dpp_soc_qax_tm_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_ipsec_port_cbs_s {
    sw_state_dpp_soc_qax_ipsec_ipsec_port_set_cb set;
    sw_state_dpp_soc_qax_ipsec_ipsec_port_get_cb get;
    sw_state_dpp_soc_qax_ipsec_ipsec_port_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_ipsec_port_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_cbs_s {
    sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_set_cb set;
    sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_get_cb get;
    sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_cbs_s {
    sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_set_cb set;
    sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_get_cb get;
    sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_cbs_s {
    sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_set_cb set;
    sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_get_cb get;
    sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_sa_mtu_cbs_s {
    sw_state_dpp_soc_qax_ipsec_sa_mtu_set_cb set;
    sw_state_dpp_soc_qax_ipsec_sa_mtu_get_cb get;
    sw_state_dpp_soc_qax_ipsec_sa_mtu_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_sa_mtu_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_cbs_s {
    sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_set_cb set;
    sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_get_cb get;
    sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_cbs_s {
    sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_set_cb set;
    sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_get_cb get;
    sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_sa_auth_type_cbs_s {
    sw_state_dpp_soc_qax_ipsec_sa_auth_type_set_cb set;
    sw_state_dpp_soc_qax_ipsec_sa_auth_type_get_cb get;
    sw_state_dpp_soc_qax_ipsec_sa_auth_type_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_sa_auth_type_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_sa_sa_direction_cbs_s {
    sw_state_dpp_soc_qax_ipsec_sa_sa_direction_set_cb set;
    sw_state_dpp_soc_qax_ipsec_sa_sa_direction_get_cb get;
    sw_state_dpp_soc_qax_ipsec_sa_sa_direction_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_sa_sa_direction_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_sa_spi_cbs_s {
    sw_state_dpp_soc_qax_ipsec_sa_spi_set_cb set;
    sw_state_dpp_soc_qax_ipsec_sa_spi_get_cb get;
    sw_state_dpp_soc_qax_ipsec_sa_spi_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_sa_spi_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_sa_cbs_s {
    sw_state_dpp_soc_qax_ipsec_sa_set_cb set;
    sw_state_dpp_soc_qax_ipsec_sa_get_cb get;
    sw_state_dpp_soc_qax_ipsec_sa_verify_cb verify;
    sw_state_dpp_soc_qax_ipsec_sa_initial_seq_num_cbs_t initial_seq_num;
    sw_state_dpp_soc_qax_ipsec_sa_mtu_cbs_t mtu;
    sw_state_dpp_soc_qax_ipsec_sa_fragmentation_enable_cbs_t fragmentation_enable;
    sw_state_dpp_soc_qax_ipsec_sa_encrypt_type_cbs_t encrypt_type;
    sw_state_dpp_soc_qax_ipsec_sa_auth_type_cbs_t auth_type;
    sw_state_dpp_soc_qax_ipsec_sa_sa_direction_cbs_t sa_direction;
    sw_state_dpp_soc_qax_ipsec_sa_spi_cbs_t spi;
} sw_state_dpp_soc_qax_ipsec_sa_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_context_id_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_context_id_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_context_id_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_context_id_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_tunnel_context_id_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_verify_cb verify;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv4_addr_cbs_t ipv4_addr;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_ipv6_addr_cbs_t ipv6_addr;
} sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_verify_cb verify;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_protocol_cbs_t protocol;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_addr_cbs_t addr;
} sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_verify_cb verify;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv4_addr_cbs_t ipv4_addr;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_ipv6_addr_cbs_t ipv6_addr;
} sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_verify_cb verify;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_protocol_cbs_t protocol;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_addr_cbs_t addr;
} sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_ttl_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_ttl_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_ttl_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_ttl_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_tunnel_ttl_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_dscp_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_dscp_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_dscp_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_dscp_verify_cb verify;
} sw_state_dpp_soc_qax_ipsec_tunnel_dscp_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_tunnel_cbs_s {
    sw_state_dpp_soc_qax_ipsec_tunnel_set_cb set;
    sw_state_dpp_soc_qax_ipsec_tunnel_get_cb get;
    sw_state_dpp_soc_qax_ipsec_tunnel_verify_cb verify;
    sw_state_dpp_soc_qax_ipsec_tunnel_context_id_cbs_t context_id;
    sw_state_dpp_soc_qax_ipsec_tunnel_local_ip_cbs_t local_ip;
    sw_state_dpp_soc_qax_ipsec_tunnel_remote_ip_cbs_t remote_ip;
    sw_state_dpp_soc_qax_ipsec_tunnel_ttl_cbs_t ttl;
    sw_state_dpp_soc_qax_ipsec_tunnel_dscp_cbs_t dscp;
} sw_state_dpp_soc_qax_ipsec_tunnel_cbs_t;

typedef struct sw_state_dpp_soc_qax_ipsec_cbs_s {
    sw_state_dpp_soc_qax_ipsec_set_cb set;
    sw_state_dpp_soc_qax_ipsec_get_cb get;
    sw_state_dpp_soc_qax_ipsec_verify_cb verify;
    sw_state_dpp_soc_qax_ipsec_ipsec_port_cbs_t ipsec_port;
    sw_state_dpp_soc_qax_ipsec_num_of_ipsec_channels_cbs_t num_of_ipsec_channels;
    sw_state_dpp_soc_qax_ipsec_num_of_bfd_channels_cbs_t num_of_bfd_channels;
    sw_state_dpp_soc_qax_ipsec_sa_cbs_t sa;
    sw_state_dpp_soc_qax_ipsec_tunnel_cbs_t tunnel;
} sw_state_dpp_soc_qax_ipsec_cbs_t;

typedef struct sw_state_dpp_soc_qax_cbs_s {
    sw_state_dpp_soc_qax_verify_cb verify;
    sw_state_dpp_soc_qax_tm_cbs_t tm;
    sw_state_dpp_soc_qax_ipsec_cbs_t ipsec;
} sw_state_dpp_soc_qax_cbs_t;


int sw_state_dpp_soc_qax_access_cb_init(int unit);

#endif /* _SHR_SW_STATE_DPP_SOC_QAX_ACCESS_H_ */
