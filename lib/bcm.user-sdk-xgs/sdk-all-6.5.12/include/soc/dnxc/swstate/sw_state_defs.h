
/*
 * $Id: $
 * $Copyright: (c) 2017 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *
 * INFO: here we have the internal implementation for the ACCESS layer MACROs.
 *       this allow changing the behaviour of the infrastructure without changing the autocoder
 *       and the autogenerated access code
 *
 */
#ifndef _DNX_SW_STATE_DEFS_H
/* { */
#define _DNX_SW_STATE_DEFS_H

#include <soc/types.h>
#include <sal/core/alloc.h>
#include <soc/error.h>
#include <shared/shrextend/shrextend_debug.h>

/* using this to mark functions that can be used as inline */
#define DNX_SW_STATE_INLINE

/* if we do SOC_INIT_FUNC_DEFS it breaks some tests */
#define DNX_SW_STATE_INIT_FUNC_DEFS\
    SHR_FUNC_INIT_VARS(unit)

/* if we do SOC_FUNC_RETURN it breaks some tests */
#define DNX_SW_STATE_FUNC_RETURN\
    goto exit;\
exit:\
    SHR_FUNC_EXIT

/* if we do SOC_FUNC_RETURN it breaks some tests */
#define DNX_SW_STATE_IF_ERR_EXIT(_rc)\
    _SOC_IF_ERR_EXIT(_rc)

#define DNXC_SW_STATE_ALIGN_SIZE(size) \
    size = (((size) + 0x3) & (~0x3))

/* sw state flags */
#define DNX_SW_STATE_NONE                       (0)
#define DNX_SW_STATE_NO_FLAGS                   (0)
#define DNX_SW_STATE_IS_WB_CHECK                (1 << 0)
#define DNX_SW_STATE_ALLOW_AUTOSYNC             (1 << 1)
#define DNX_SW_STATE_DNX_DATA_ALLOC             (1 << 2)
#define DNX_SW_STATE_DNX_DATA_ALLOC_EXCEPTION   (1 << 3)
#define DNX_SW_STATE_ALLOC_AFTER_INIT_EXCEPTION   (1 << 4)
#define DNX_SW_STATE_ALLOC_BITMAP_FLAG            (1 << 5)
#define DNX_SW_STATE_JOURNAL_ROLLING_BACK         (1 << 6)
#define DNX_SW_STATE_AUTO_GENERATED_ALLOCATION    (1 << 7)
#define DNX_SW_STATE_LINKED_LIST_FREE             (1 << 8)

typedef uint8 DNX_SW_STATE_BUFF;

#endif /* _DNX_SW_STATE_DEFS_H */
