/*
 * $Id: $
 * 
 * $Copyright: (c) 2017 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_FLOWTRACKER_H__
#define __BCM_FLOWTRACKER_H__

#include <bcm/types.h>

/* Flowtracker IPFIX observation domain. */
typedef uint32 bcm_flowtracker_ipfix_observation_domain_t;

/* Flowtracker export trigger types */
typedef enum bcm_flowtracker_export_trigger_e {
    bcmFlowtrackerExportTriggerNone = 0, /* No export trigger. */
    bcmFlowtrackerExportTriggerTimer = 1, /* Flow data will be exported to
                                           collector periodically. */
    bcmFlowtrackerExportTriggerCount = 2 /* Last Value. Not Usable. */
} bcm_flowtracker_export_trigger_t;

/* Flowtracker export trigger information. */
typedef struct bcm_flowtracker_export_trigger_info_s {
    SHR_BITDCL trigger_bmp[_SHR_BITDCLSIZE(bcmFlowtrackerExportTriggerCount)]; /* The bitmap of export triggers which
                                           will result in the export of the
                                           IPFIX packets. */
} bcm_flowtracker_export_trigger_info_t;

/* Manipulate the export trigger bitmap. */
#define BCM_FLOWTRACKER_TRIGGER_SET(_export_info, _trigger)  SHR_BITSET(((_export_info).trigger_bmp), (_trigger)) 
#define BCM_FLOWTRACKER_TRIGGER_GET(_export_info, _trigger)  SHR_BITGET(((_export_info).trigger_bmp), (_trigger)) 
#define BCM_FLOWTRACKER_TRIGGER_CLEAR(_export_info, _trigger)  SHR_BITCLR(((_export_info).trigger_bmp), (_trigger)) 
#define BCM_FLOWTRACKER_TRIGGER_CLEAR_ALL(_export_info)  SHR_BITCLR_RANGE(((_export_info).trigger_bmp), 0, bcmFlowtrackerExportTriggerCount) 

/* 
 * Macros for bcm_flowtracker_collector_eth_header_t.vlan_tag_structure
 * to indicate the tag structure of vlans.
 */
#define BCM_FLOWTRACKER_COLLECTOR_ETH_HDR_UNTAGGED 0x1        
#define BCM_FLOWTRACKER_COLLECTOR_ETH_HDR_SINGLE_TAGGED 0x2        
#define BCM_FLOWTRACKER_COLLECTOR_ETH_HDR_DOUBLE_TAGGED 0x3        

/* 
 * Ethernet header in the encap used to send the IPFIX packet to the
 * collector.
 */
typedef struct bcm_flowtracker_collector_eth_header_s {
    bcm_mac_t dst_mac; 
    bcm_mac_t src_mac; 
    uint8 vlan_tag_structure; 
    uint16 outer_tpid; 
    uint16 inner_tpid; 
    bcm_vlan_tag_t outer_vlan_tag; 
    bcm_vlan_tag_t inner_vlan_tag; 
} bcm_flowtracker_collector_eth_header_t;

/* 
 * IPv4 header in the encap used to send the IPFIX packet to the
 * collector.
 */
typedef struct bcm_flowtracker_collector_ipv4_header_s {
    bcm_ip_t src_ip; 
    bcm_ip_t dst_ip; 
    uint8 dscp; 
    uint8 ttl; 
} bcm_flowtracker_collector_ipv4_header_t;

/* 
 * IPv6 header in the encap used to send the IPFIX packet to the
 * collector.
 */
typedef struct bcm_flowtracker_collector_ipv6_header_s {
    bcm_ip6_t src_ip; 
    bcm_ip6_t dst_ip; 
    uint8 traffic_class; 
    uint32 flow_label; 
    uint8 hop_limit; 
} bcm_flowtracker_collector_ipv6_header_t;

/* 
 * UDP header in the encap used to send the IPFIX packet to the
 * collector.
 */
typedef struct bcm_flowtracker_collector_udp_header_s {
    bcm_l4_port_t src_port; 
    bcm_l4_port_t dst_port; 
} bcm_flowtracker_collector_udp_header_t;

/* Software ID given for a Flowtracker collector configuration. */
typedef int bcm_flowtracker_collector_t;

/* 
 * Transport types that are supported for exporting flow data to the
 * collector
 */
typedef enum bcm_flowtracker_collector_transport_type_e {
    bcmFlowtrackerCollectorTransportTypeIpfixIpv4Udp = 0, /* The encap will be of the format UDP
                                           over IPv4. */
    bcmFlowtrackerCollectorTransportTypeIpfixIpv6Udp = 1, /* The encap will be of the format UDP
                                           over IPv6. */
    bcmFlowtrackerCollectorTransportTypeRaw = 2, /* Indicates no encap. This will be
                                           useful when the raw IPFIX PDUs need
                                           to be transported to the local CPU. */
    bcmFlowtrackerCollectorTransportTypeCount = 3 /* Last Value. Not Usable. */
} bcm_flowtracker_collector_transport_type_t;

/* Flowtracker collector information. */
typedef struct bcm_flowtracker_collector_info_s {
    bcm_flowtracker_collector_transport_type_t transport_type; /* Transport type used for exporting
                                           flow data to the collector. This
                                           identifies the usable fields within
                                           the encap structure member defined
                                           below. */
    bcm_flowtracker_collector_eth_header_t eth; /* Ethernet encapsulation of the packet
                                           sent to collector. */
    bcm_flowtracker_collector_ipv4_header_t ipv4; /* IPv4 encapsulation of the packet sent
                                           to collector. */
    bcm_flowtracker_collector_ipv6_header_t ipv6; /* IPv6 encapsulation of the packet sent
                                           to collector. */
    bcm_flowtracker_collector_udp_header_t udp; /* UDP encapsulation of the packet sent
                                           to collector. */
    uint16 max_packet_length;           /* The maximum packet length of an
                                           export packet that can be sent to
                                           this collector. */
} bcm_flowtracker_collector_info_t;

/* Software ID given for a Flowtracker flow group configuration. */
typedef int bcm_flowtracker_group_t;

/* Flowtracker flow group information. */
typedef struct bcm_flowtracker_group_info_s {
    bcm_flowtracker_ipfix_observation_domain_t observation_domain_id; /* IPFIX observation domain to which
                                           this flow group belongs to. */
} bcm_flowtracker_group_info_t;

/* 
 * Five tuple of SRC IP, DST IP, L4 SRC PORT, L4 DST PORT and IP PROTOCOL
 * that constitutes a flow.
 */
typedef struct bcm_flowtracker_flow_key_s {
    bcm_ip_addr_t src_ip; 
    bcm_ip_addr_t dst_ip; 
    bcm_l4_port_t l4_src_port; 
    bcm_l4_port_t l4_dst_port; 
    uint8 ip_protocol; 
} bcm_flowtracker_flow_key_t;

/* Flowtracker flow group flow level data. */
typedef struct bcm_flowtracker_flow_data_s {
    uint64 packet_count; 
    uint64 byte_count; 
    uint64 flow_start_timestamp_msecs; 
    uint64 observation_timestamp_msecs; 
} bcm_flowtracker_flow_data_t;

/* Software ID given for a Flowtracker export template configuration. */
typedef int bcm_flowtracker_export_template_t;

/* Flowtracker export element flags. */
#define BCM_FLOWTRACKER_EXPORT_ELEMENT_FLAGS_ENTERPRISE (1 << 0)   /* Indicates that the
                                                          element is an
                                                          enterprise specific
                                                          element */

/* The different export element types that constitute an template. */
typedef enum bcm_flowtracker_export_element_type_e {
    bcmFlowtrackerExportElementTypeSrcIPv4 = 0, 
    bcmFlowtrackerExportElementTypeDstIPv4 = 1, 
    bcmFlowtrackerExportElementTypeSrcIPv6 = 2, 
    bcmFlowtrackerExportElementTypeDstIPv6 = 3, 
    bcmFlowtrackerExportElementTypeL4SrcPort = 4, 
    bcmFlowtrackerExportElementTypeL4DstPort = 5, 
    bcmFlowtrackerExportElementTypeIPProtocol = 6, 
    bcmFlowtrackerExportElementTypePktCount = 7, 
    bcmFlowtrackerExportElementTypeByteCount = 8, 
    bcmFlowtrackerExportElementTypePktDeltaCount = 9, 
    bcmFlowtrackerExportElementTypeByteDeltaCount = 10, 
    bcmFlowtrackerExportElementTypeVRF = 11, 
    bcmFlowtrackerExportElementTypeObservationTimeMsecs = 12, 
    bcmFlowtrackerExportElementTypeFlowStartTimeMsecs = 13, 
    bcmFlowtrackerExportElementTypeFlowtrackerGroup = 14, 
    bcmFlowtrackerExportElementTypeCount = 15 
} bcm_flowtracker_export_element_type_t;

/* Flowtracker export template elements information. */
typedef struct bcm_flowtracker_export_element_info_s {
    uint32 flags;                       /* See
                                           BCM_FLOWTRACKER_EXPORT_ELEMENT_FLAGS_XXX. */
    bcm_flowtracker_export_element_type_t element; /* Type of export element. */
    uint32 data_size;                   /* Size of information element in the
                                           export record in bytes. If the
                                           data_size is given as 0, then the
                                           default RFC size is used. */
    uint16 info_elem_id;                /* Information element to be used, when
                                           the template set is exported. */
} bcm_flowtracker_export_element_info_t;

/* Flowtracker template set transmit configuration. */
typedef struct bcm_flowtracker_template_transmit_config_s {
    int retransmit_interval_secs;   /* Interval in seconds at which the template
                                       set has to be transmitted. */
    int initial_burst;              /* Number of times the template set needs to
                                       be sent before settling to a periodic
                                       export. */
} bcm_flowtracker_template_transmit_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the Flowtracker subsystem. */
extern int bcm_flowtracker_init(
    int unit);

/* Shut down the Flowtracker subsystem. */
extern int bcm_flowtracker_detach(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Options that can be passed via options parameter during export
 * template creation.
 */
#define BCM_FLOWTRACKER_EXPORT_TEMPLATE_WITH_ID (1 << 0)   /* Create an export
                                                          template with ID. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a flowtracker export template. */
extern int bcm_flowtracker_export_template_create(
    int unit, 
    uint32 options, 
    bcm_flowtracker_export_template_t *id, 
    uint16 set_id, 
    int num_export_elements, 
    bcm_flowtracker_export_element_info_t *list_of_export_elements);

/* Get a flowtracker export template with ID. */
extern int bcm_flowtracker_export_template_get(
    int unit, 
    bcm_flowtracker_export_template_t id, 
    uint16 *set_id, 
    int max_size, 
    bcm_flowtracker_export_element_info_t *list_of_export_elements, 
    int *list_size);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize flowtracker template transmit configuration. */
extern void bcm_flowtracker_template_transmit_config_t_init(
    bcm_flowtracker_template_transmit_config_t *config);

#ifndef BCM_HIDE_DISPATCHABLE

/* Destroy a flowtracker export template with ID. */
extern int bcm_flowtracker_export_template_destroy(
    int unit, 
    bcm_flowtracker_export_template_t id);

/* Set the template transmit configuration. */
extern int bcm_flowtracker_template_transmit_config_set(
    int unit, 
    bcm_flowtracker_export_template_t template_id, 
    bcm_flowtracker_collector_t collector_id, 
    bcm_flowtracker_template_transmit_config_t *config);

/* Get the template transmit configuration. */
extern int bcm_flowtracker_template_transmit_config_get(
    int unit, 
    bcm_flowtracker_export_template_t template_id, 
    bcm_flowtracker_collector_t collector_id, 
    bcm_flowtracker_template_transmit_config_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize a flowtracker collector information structure. */
extern void bcm_flowtracker_collector_info_t_init(
    bcm_flowtracker_collector_info_t *collector_info);

/* 
 * Options that can be passed via options parameter during collector
 * creation.
 */
#define BCM_FLOWTRACKER_COLLECTOR_WITH_ID   (1 << 0)   /* Create a collector
                                                          with ID. */
#define BCM_FLOWTRACKER_COLLECTOR_REPLACE   (1 << 1)   /* Replace a collector
                                                          with ID. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a flowtracker collector with given collector info. */
extern int bcm_flowtracker_collector_create(
    int unit, 
    uint32 options, 
    bcm_flowtracker_collector_t *collector_id, 
    bcm_flowtracker_collector_info_t *collector_info);

/* Get flowtracker collector information with ID. */
extern int bcm_flowtracker_collector_get(
    int unit, 
    bcm_flowtracker_collector_t id, 
    bcm_flowtracker_collector_info_t *collector_info);

/* Get the list of all flowtracker collectors configured. */
extern int bcm_flowtracker_collector_get_all(
    int unit, 
    int max_size, 
    bcm_flowtracker_collector_t *collector_list, 
    int *list_size);

/* Destroy a flowtracker collector with ID. */
extern int bcm_flowtracker_collector_destroy(
    int unit, 
    bcm_flowtracker_collector_t id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize a flowtracker flow group information structure. */
extern void bcm_flowtracker_group_info_t_init(
    bcm_flowtracker_group_info_t *flow_group_info);

/* 
 * Options that can be passed via options parameter during flow group
 * creation.
 */
#define BCM_FLOWTRACKER_GROUP_WITH_ID   (1 << 0)   /* Create a flow group with
                                                      ID. */
#define BCM_FLOWTRACKER_GROUP_REPLACE   (1 << 1)   /* Replace a flow group with
                                                      ID. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a flowtracker flow group with given flow group info. */
extern int bcm_flowtracker_group_create(
    int unit, 
    uint32 options, 
    bcm_flowtracker_group_t *flow_group_id, 
    bcm_flowtracker_group_info_t *flow_group_info);

/* Get flowtracker flow group information with ID. */
extern int bcm_flowtracker_group_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    bcm_flowtracker_group_info_t *flow_group_info);

/* Get the list of all flowtracker flow groups configured. */
extern int bcm_flowtracker_group_get_all(
    int unit, 
    int max_size, 
    bcm_flowtracker_group_t *flow_group_list, 
    int *list_size);

/* Set flow limit on the flow group with ID. */
extern int bcm_flowtracker_group_flow_limit_set(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 flow_limit);

/* Get flow limit of the flow group with ID. */
extern int bcm_flowtracker_group_flow_limit_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 *flow_limit);

/* 
 * Set aging timer interval in ms on the flow group with ID. The minimum
 * is 100ms. And the value is expected to be multiples of 100ms. Default
 * would be 1 minute
 */
extern int bcm_flowtracker_group_age_timer_set(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 aging_interval_ms);

/* Get aging timer interval in ms of the flow group with ID. */
extern int bcm_flowtracker_group_age_timer_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 *aging_interval_ms);

/* Set export trigger information of the flow group with ID. */
extern int bcm_flowtracker_group_export_trigger_set(
    int unit, 
    bcm_flowtracker_group_t id, 
    bcm_flowtracker_export_trigger_info_t *export_trigger_info);

/* Get export trigger information of the flow group with ID. */
extern int bcm_flowtracker_group_export_trigger_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    bcm_flowtracker_export_trigger_info_t *export_trigger_info);

/* Get the number of flows learnt in the flow group with ID. */
extern int bcm_flowtracker_group_flow_count_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 *flow_count);

/* Destroy a flowtracker flow group with ID. */
extern int bcm_flowtracker_group_destroy(
    int unit, 
    bcm_flowtracker_group_t id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Flags that can be passed via flags parameter during flow group clear
 * operation.
 */
#define BCM_FLOWTRACKER_GROUP_CLEAR_ALL     (1 << 0)   /* Clear entire flow
                                                          group flow entries(key
                                                          and data). */
#define BCM_FLOWTRACKER_GROUP_CLEAR_FLOW_DATA_ONLY (1 << 1)   /* Clear only data of the
                                                          flow group flow
                                                          entries. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Clear a flow group's flow entries. */
extern int bcm_flowtracker_group_clear(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 flags);

/* Associate flow group to a collector with an export template. */
extern int bcm_flowtracker_group_collector_add(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_collector_t collector_id, 
    bcm_flowtracker_export_template_t template_id);

/* Dis-associate flow group from a collector with an export template. */
extern int bcm_flowtracker_group_collector_delete(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_collector_t collector_id, 
    bcm_flowtracker_export_template_t template_id);

/* 
 * Get the list of collectors and templates associated with the flow
 * group.
 */
extern int bcm_flowtracker_group_collector_get_all(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    int max_list_size, 
    bcm_flowtracker_collector_t *list_of_collectors, 
    bcm_flowtracker_export_template_t *list_of_templates, 
    int *list_size);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize flow key. */
extern void bcm_flowtracker_flow_key_t_init(
    bcm_flowtracker_flow_key_t *flow_key);

#ifndef BCM_HIDE_DISPATCHABLE

/* Get flow data for a given flow key within the given flow group. */
extern int bcm_flowtracker_group_data_get(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_flow_key_t *flow_key, 
    bcm_flowtracker_flow_data_t *flow_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Group actions set flags. */
#define BCM_FLOWTRACKER_GROUP_ACTIONS_SET_FLAGS_ELEPHANT_FLOWS (1 << 0)   /* Actions apply to only
                                                          elephant flows in the
                                                          group. */

/* 
 * Packet Color, need to be specified in param0 when using
 * bcmFlowtrackerGroupActionXXDropPrecedence.
 */
#define BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_GREEN 1          
#define BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_YELLOW 2          
#define BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_RED 3          

/* Flowtracker Group action types */
typedef enum bcm_flowtracker_group_action_e {
    bcmFlowtrackerGroupActionRpDropPrecedence = 0, /* Set Red Priority Drop Precedence;
                                           param0:
                                           BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_XXX.. */
    bcmFlowtrackerGroupActionYpDropPrecedence = 1, /* Set Yellow Priority Drop Precedence;
                                           param0:
                                           BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_XXX.. */
    bcmFlowtrackerGroupActionGpDropPrecedence = 2, /* Set Green Priority Drop Precedence;
                                           param0:
                                           BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_XXX.. */
    bcmFlowtrackerGroupActionUcastCosQNew = 3, /* Change CoS Queue for unicast packets;
                                           param0: New CoS Queue. */
    bcmFlowtrackerGroupActionMcastCosQNew = 4, /* Change CoS Queue for multicast
                                           packets; param0: New CoS Queue. */
    bcmFlowtrackerGroupActionPrioIntNew = 5, /* Change internal priority; param0: New
                                           internal priority */
    bcmFlowtrackerGroupActionCount = 6  /* Always Last. Not a usable value. */
} bcm_flowtracker_group_action_t;

/* Flowtracker Group action params */
typedef struct bcm_flowtracker_group_action_param_s {
    uint32 param0; 
    uint32 param1; 
} bcm_flowtracker_group_action_param_t;

/* Flowtracker Group action info */
typedef struct bcm_flowtracker_group_action_info_s {
    bcm_flowtracker_group_action_t action; /* Action */
    bcm_flowtracker_group_action_param_t params; /* Action param */
} bcm_flowtracker_group_action_info_t;

/* Initialize a flowtracker group action info structure. */
extern void bcm_flowtracker_group_action_info_t_init(
    bcm_flowtracker_group_action_info_t *action_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set list of actions on a flow group. */
extern int bcm_flowtracker_group_actions_set(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    uint32 flags, 
    int num_actions, 
    bcm_flowtracker_group_action_info_t *action_list);

/* Get list of actions applied on a flow group. */
extern int bcm_flowtracker_group_actions_get(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    uint32 flags, 
    int max_actions, 
    bcm_flowtracker_group_action_info_t *action_list, 
    int *num_actions);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Miscellaneous Flowtracker Elephant defines. */
#define BCM_FLOWTRACKER_ELEPHANT_MAX_PROMOTION_FILTERS 2          /* Maximum number of
                                                          promotion filters in
                                                          an elephant profile. */

/* Elephant filter flags. */
#define BCM_FLOWTRACKER_ELEPHANT_FILTER_FLAGS_INCREASING_RATE (1 << 0)   /* Rate must increase on
                                                          every scan */

/* 
 * Options that can be passed via options parameter during elephant
 * profile creation.
 */
#define BCM_FLOWTRACKER_ELEPHANT_PROFILE_WITH_ID (1 << 0)   /* Create an elephant
                                                          profile  with ID. */

/* Flowtracker Elephant profile Id. */
typedef int bcm_flowtracker_elephant_profile_t;

/* Flowtracker Elephant filter config */
typedef struct bcm_flowtracker_elephant_filter_s {
    uint32 flags;                       /* See
                                           BCM_FLOWTRACKER_ELEPHANT_FILTER_FLAGS_XXX
                                           definitions */
    uint32 monitor_interval_usecs;      /* How long should the flow be monitored */
    uint32 rate_low_threshold_kbits_sec; /* Minimum rate the flow must have to
                                           continue monitoring (kbits_sec = 1000
                                           bits/sec) */
    uint32 rate_high_threshold_kbits_sec; /* Rate that must be observed at least
                                           once during monitoring interval for a
                                           flow to pass the monitoring criteria
                                           (kbits_sec = 1000 bits/sec) */
    uint64 size_threshold_bytes;        /* Total size in bytes that must be
                                           observed after the monitoring
                                           interval for a flow to pass the
                                           monitoring criteria */
} bcm_flowtracker_elephant_filter_t;

/* Flowtracker Elephant profile info */
typedef struct bcm_flowtracker_elephant_profile_info_s {
    uint8 num_promotion_filters;        /* Number of promotion filters */
    bcm_flowtracker_elephant_filter_t promotion_filters[BCM_FLOWTRACKER_ELEPHANT_MAX_PROMOTION_FILTERS]; /* Promotion filters */
    bcm_flowtracker_elephant_filter_t demotion_filter; /* Demotion filter */
} bcm_flowtracker_elephant_profile_info_t;

/* Initialize a flowtracker elephant profile info structure. */
extern void bcm_flowtracker_elephant_profile_info_t_init(
    bcm_flowtracker_elephant_profile_info_t *profile);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create flowtracker elephant profile. */
extern int bcm_flowtracker_elephant_profile_create(
    int unit, 
    uint32 options, 
    bcm_flowtracker_elephant_profile_info_t *profile, 
    bcm_flowtracker_elephant_profile_t *profile_id);

/* Destroy a flowtracker elephant profile. */
extern int bcm_flowtracker_elephant_profile_destroy(
    int unit, 
    bcm_flowtracker_elephant_profile_t profile_id);

/* Get flowtracker elephant profile information. */
extern int bcm_flowtracker_elephant_profile_get(
    int unit, 
    bcm_flowtracker_elephant_profile_t profile_id, 
    bcm_flowtracker_elephant_profile_info_t *profile);

/* Get the list of all flowtracker elephant profiles configured. */
extern int bcm_flowtracker_elephant_profile_get_all(
    int unit, 
    int max, 
    bcm_flowtracker_elephant_profile_t *profile_list, 
    int *count);

/* Attach a flow group with an elephant profile. */
extern int bcm_flowtracker_group_elephant_profile_attach(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_elephant_profile_t profile_id);

/* Get the elephant profile Id attached to a flow group. */
extern int bcm_flowtracker_group_elephant_profile_attach_get(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_elephant_profile_t *profile_id);

/* Detach a flow group from an elephant profile. */
extern int bcm_flowtracker_group_elephant_profile_detach(
    int unit, 
    bcm_flowtracker_group_t flow_group_id);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_FLOWTRACKER_H__ */
