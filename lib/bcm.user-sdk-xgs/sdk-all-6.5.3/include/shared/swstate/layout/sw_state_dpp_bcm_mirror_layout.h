/* $Id: $
 * 
 * $Copyright: Copyright 2016 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
*/
#ifndef _SHR_sw_state_dpp_bcm_mirror_H_
#define _SHR_sw_state_dpp_bcm_mirror_H_


#define SW_STATE_DPP_BCM_MIRROR_INGRESSCOUNT_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_REFCOUNT_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DEST_ID_TYPE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DEST_ID_ID_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DEST_ID_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DEST_ID_TYPE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DEST_ID_ID_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_TC_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_TC_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_TC_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_TC_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_TC_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DP_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DP_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DP_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DP_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DP_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_LOW_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_LOW_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_LOW_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_LOW_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_LOW_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_UP_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_UP_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_UP_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_UP_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_UP_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_DP_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_DP_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_DP_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_DP_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_DP_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_1_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_1_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_1_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_1_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_1_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_2_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_2_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_2_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_2_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_2_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_IS_ING_MC_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_OUTLIF_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_OUTLIF_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_OUTLIF_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_OUTLIF_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_OUTLIF_ENABLE_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DEST_ID_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_TC_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_DP_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_LOW_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_PTR_UP_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_METER_DP_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_1_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_COUNTER_PTR_2_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_IS_ING_MC_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_OUTLIF_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_SIZE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_PROB_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_OUTBOUND_PROB_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_IS_TRAP_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CROP_PKT_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_ADD_ORIG_HEAD_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_VALID_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_IN_PORT_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_VSQ_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CNM_CANCEL_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_TRUNK_HASH_RESULT_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_ECN_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_VALID_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_CPU_TRAP_CODE_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_CPU_TRAP_QUALIFIER_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_ENCAP_ID_LAYOUT_NOF_MAX_LAYOUT_NODES (1) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_VALID_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_CPU_TRAP_CODE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_CPU_TRAP_QUALIFIER_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_ENCAP_ID_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CMD_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_SIZE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_PROB_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_OUTBOUND_PROB_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_IS_TRAP_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CROP_PKT_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_ADD_ORIG_HEAD_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_VALID_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_IN_PORT_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_VSQ_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_CNM_CANCEL_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_TRUNK_HASH_RESULT_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_ECN_VALUE_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_STAMPING_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_INGRESS_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESS_REFCOUNT_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_MIRRORINFO_LAYOUT_NOF_MAX_LAYOUT_NODES) 
#define SW_STATE_DPP_BCM_MIRROR_LAYOUT_NOF_MAX_LAYOUT_NODES (1 + SW_STATE_DPP_BCM_MIRROR_INGRESSCOUNT_LAYOUT_NOF_MAX_LAYOUT_NODES + SW_STATE_DPP_BCM_MIRROR_INGRESS_LAYOUT_NOF_MAX_LAYOUT_NODES) 

int sw_state_dpp_bcm_mirror_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingressCount_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_refCount_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_dest_id_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_dest_id_type_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_dest_id_id_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_tc_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_tc_value_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_tc_enable_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_dp_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_dp_value_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_dp_enable_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_meter_ptr_low_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_meter_ptr_low_value_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_meter_ptr_low_enable_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_meter_ptr_up_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_meter_ptr_up_value_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_meter_ptr_up_enable_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_meter_dp_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_meter_dp_value_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_meter_dp_enable_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_counter_ptr_1_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_counter_ptr_1_value_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_counter_ptr_1_enable_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_counter_ptr_2_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_counter_ptr_2_value_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_counter_ptr_2_enable_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_is_ing_mc_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_outlif_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_outlif_value_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cmd_outlif_enable_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_size_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_prob_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_outbound_prob_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_is_trap_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_crop_pkt_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_add_orig_head_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_valid_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_in_port_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_vsq_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_cnm_cancel_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_trunk_hash_result_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_ecn_value_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_stamping_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_stamping_valid_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_stamping_cpu_trap_code_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_stamping_cpu_trap_qualifier_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);
int sw_state_dpp_bcm_mirror_ingress_mirrorInfo_stamping_encap_id_layout_node_create(int unit, int* root_node_id, uint32* next_free_node_id);

#endif /* _SHR_sw_state_dpp_bcm_mirror_H_ */
