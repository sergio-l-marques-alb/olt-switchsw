/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: $
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *
 * File:    compat_658.h
 * Purpose: RPC Compatibility with sdk-6.5.8 routines
 * Generator:   mkdispatch 1.54
 */


#ifndef _COMPAT_658_H_
#define _COMPAT_658_H_

#ifdef BCM_RPC_SUPPORT


#include <bcm/ecn.h>
#include <bcm/field.h>
#include <bcm/mpls.h>
#include <bcm/oam.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/rx.h>
#include <bcm/stat.h>
#include <bcm/trunk.h>
#include <bcm/types.h>
#include <shared/phyconfig.h>
#include <shared/phyreg.h>
#include <shared/port.h>
#include <shared/port_ability.h>
#include <shared/portmode.h>
#include <shared/switch.h>


#if defined(INCLUDE_L3)
/* MPLS ECN Map Structure. */
typedef struct bcm_compat658_ecn_map_s {
    uint32 action_flags;    /* action flags for ECN map. */
    int int_cn;             /* Internal congestion. */
    uint8 inner_ecn;        /* IP ECN value in payload. */
    uint8 ecn;              /* IP ECN value. */
    uint8 exp;              /* Mpls EXP value. */
    uint8 new_ecn;          /* New ECN value. */
    uint8 new_exp;          /* New EXP value. */
} bcm_compat658_ecn_map_t;

#endif

#if defined(INCLUDE_L3)

extern int bcm_compat658_ecn_map_get (
    int unit,
    int ecn_map_id,
    bcm_compat658_ecn_map_t *ecn_map);

#endif


#if defined(INCLUDE_L3)

extern int bcm_compat658_ecn_map_set (
    int unit,
    uint32 options,
    int ecn_map_id,
    bcm_compat658_ecn_map_t *ecn_map);

#endif

/* 
 * Group configuration structure. Used to create a field group with
 * specific attributes.
 */
typedef struct bcm_compat658_field_group_config_s {
    uint32 flags;                       /* Group create flags
                                           BCM_FIELD_GROUP_CREATE_XXX. */
    bcm_field_qset_t qset;              /* Group qualifier set. */
    int priority;                       /* Group priority. */
    bcm_field_group_mode_t mode;        /* Group mode. */
    bcm_pbmp_t ports;                   /* Group member ports. */
    bcm_field_group_t group;            /* Group. */
    bcm_field_aset_t aset;              /* Group action set */
    bcm_field_presel_set_t preselset;   /* Group preselector set */
    bcm_field_presel_set_t group_ref;   /* Reference Field group for operation
                                           set by the Flag. */
    int max_entry_priorities;           /* Number of entries priorities in the
                                           group. 0 means unlimited. */
    bcm_field_hintid_t hintid;          /* Hints for Group Creation. */
    int action_res_id;                  /* Action resolution id for Group. */
    uint8 name[BCM_FIELD_MAX_NAME_LEN]; /* Name for Group. */
} bcm_compat658_field_group_config_t;


extern int bcm_compat658_field_group_config_validate (
    int unit,
    bcm_compat658_field_group_config_t *group_config,
    bcm_field_group_mode_t *mode);


extern int bcm_compat658_field_group_config_create (
    int unit,
    bcm_compat658_field_group_config_t *group_config);

/* 
 * OAM endpoint object.  This is equivalent to an 802.1ag Maintenance
 * Endpoint (MEP).
 */
typedef struct bcm_compat658_oam_endpoint_info_s {
    uint32 flags; 
    uint32 flags2; 
    uint32 opcode_flags;                /* OAM opcode flags */
    uint32 lm_flags;                    /* OAM loss measurment flags */
    bcm_oam_endpoint_t id; 
    bcm_oam_endpoint_type_t type; 
    bcm_oam_group_t group;              /* The ID of the group to which this
                                           endpoint belongs */
    uint16 name;                        /* A unique identifier of the endpoint
                                           within the group.  This is equivalent
                                           to the MEPID in 802.1ag. */
    bcm_oam_endpoint_t local_id;        /* Used by remote endpoints only. */
    int level;                          /* This is equivalent to the Maintenance
                                           Domain Level (MDL) in 802.1ag. */
    int ccm_period;                     /* For local endpoints, this is the CCM
                                           transmission period in ms.  For
                                           remote endpoints, this is the period
                                           on which CCM timeout is based. */
    bcm_vlan_t vlan;                    /* The VLAN associated with this
                                           endpoint */
    bcm_vlan_t inner_vlan;              /* Configure with CVID for two-tag
                                           operation or set to 0 for one-tag */
    bcm_gport_t gport;                  /* The gport associated with this
                                           endpoint */
    bcm_gport_t tx_gport;               /* TX gport associated with this
                                           endpoint */
    int trunk_index;                    /* The trunk port index for this
                                           endpoint */
    bcm_if_t intf_id;                   /* Interface Identifier */
    bcm_mpls_label_t mpls_label;        /* The MPLS label associated with
                                           packets received from the Peer
                                           Endpoint */
    bcm_mpls_egress_label_t egress_label; /* The MPLS outgoing label information
                                           for the Local Endpoint */
    bcm_oam_mpls_network_info_t mpls_network_info; /* MPLS networks information */
    bcm_mac_t dst_mac_address;          /* The destination MAC address
                                           associated with this endpoint */
    bcm_mac_t src_mac_address;          /* The source MAC address associated
                                           with this endpoint */
    uint8 pkt_pri;                      /* Egress marking for outgoing CCMs */
    uint8 inner_pkt_pri;                /* Packet priority of inner encpsulated
                                           packet */
    uint16 inner_tpid;                  /* Tpid of inner encpsulated packet */
    uint16 outer_tpid;                  /* Tpid of outer encpsulated packet */
    bcm_cos_t int_pri;                  /* Egress queuing for outgoing CCMs. For
                                           DownMEPs, this represents the index
                                           from the base queue. For UpMEPs, this
                                           represents the internal priority
                                           itself. */
    uint8 cpu_qid;                      /* CPU queue for CCMs */
    uint8 pri_map[BCM_OAM_INTPRI_MAX];  /* Priority mapping for LM counter table */
    uint32 faults;                      /* Fault flags */
    uint32 persistent_faults;           /* Persistent fault flags */
    uint32 clear_persistent_faults;     /* Persistent fault flags to clear on a
                                           'get' */
    int ing_map;                        /* Ingress QoS map profile */
    int egr_map;                        /* Egress QoS map profile */
    uint8 ms_pw_ttl;                    /* TTL used for multi-segment pseudowire */
    uint8 port_state;                   /* Endpoint port status */
    uint8 interface_state;              /* Endpoint interface status */
    bcm_oam_vccv_type_t vccv_type;      /* VCCV pseudowire type */
    bcm_vpn_t vpn;                      /* VPN id */
    int lm_counter_base_id;             /* Counter id assosiated to the mep */
    uint8 loc_clear_threshold;          /* Number of packets required to reset
                                           the Loss-of-Continuity status per end
                                           point */
    bcm_oam_timestamp_format_t timestamp_format; /* DM time stamp format -
                                           NTP/IEEE1588(PTP) */
    uint16 subport_tpid;                /* Tpid of subport Vlan in case of
                                           triple vlan encapsulation */
    bcm_gport_t remote_gport;           /* Local endpoint CCMs are forwarded to
                                           this remote unit for processing. */
    bcm_gport_t mpls_out_gport;         /* Out gport used for TX counting by BHH
                                           endpoints. */
    int sampling_ratio;                 /* 0 - No packets sampled to the CPU.
                                           1-8 - Count of packets (with events)
                                           that need to arrive before one is
                                           sampled to the CPU. */
    uint32 lm_payload_offset;           /* Offset in bytes from TOP of the MPLS
                                           label stack from where the payload
                                           starts for byte count computation. */
    uint32 lm_cos_offset;               /* Offset of the Label from top of the
                                           stack which gives the EXP value for
                                           deriving the COS value - valid values
                                           are 0/1/2. */
    bcm_oam_lm_counter_type_t lm_ctr_type; /* BYTE/PACKET. */
    bcm_oam_lm_counter_size_t lm_ctr_sample_size; /* Valid values are 32/64. */
    uint32 pri_map_id;                  /* OAM priority map id. */
    int lm_ctr_pool_id;                 /* The loss measurement counter pool id
                                           from which the counters should be
                                           allocated. Valid values are 0/1/2. */
    uint32 ccm_tx_update_lm_counter_base_id[BCM_OAM_LM_COUNTER_MAX]; /* The base index of the LM counter to
                                           be updated by Tx CCM packets */
    uint32 ccm_tx_update_lm_counter_offset[BCM_OAM_LM_COUNTER_MAX]; /* Offset to the Base LM counter Id to
                                           be incremented by Tx CCM packets */
    uint8 ccm_tx_update_lm_counter_action[BCM_OAM_LM_COUNTER_MAX]; /* LM Counter action (type
                                           bcm_oam_lm_counter_action_t) to be
                                           used by TX CCM packets */
    uint8 ccm_tx_update_lm_counter_size; /* Number of LM counters to be
                                           incremented by Tx CCM packets */
    uint32 session_id;                  /* OAM session id for packet processing
                                           in BTE. In FP based OAM - This will
                                           indicate flex counter base ID */
    uint8 session_num_entries;          /* Number of entries that can result in
                                           same session ID. In FP based OAM -
                                           This will indicate number of flex
                                           counter entries corresponding to same
                                           OAM session */
    uint8 lm_count_profile;             /* LM count profile for this endpoint.
                                           It will be 1 or 0 for selecting one
                                           of the two OAM LM count profiles. */
    uint8 mpls_exp;                     /* EXP on which BHH will be running */
    bcm_oam_endpoint_t action_reference_id; /* Reference endpoint id whose actions
                                           will be used on the new created
                                           endpoint. Default value:
                                           BCM_OAM_ENDPOINT_INVALID. API call
                                           will set the parameter to
                                           BCM_OAM_ENDPOINT_INVALID */
} bcm_compat658_oam_endpoint_info_t;


extern int bcm_compat658_oam_endpoint_get (
    int unit,
    bcm_oam_endpoint_t endpoint,
    bcm_compat658_oam_endpoint_info_t *endpoint_info);


extern int bcm_compat658_oam_endpoint_create (
    int unit,
    bcm_compat658_oam_endpoint_info_t *endpoint_info);

/* Policer Group Attribute Selector */
typedef struct bcm_compat658_policer_group_mode_attr_selector_s {
    uint32 flags;                       /* packet attribute selector flags */
    uint32 policer_offset;              /* Policer Offset */
    bcm_policer_group_mode_attr_t attr; /* Attribute Selector */
    uint32 attr_value;                  /* Attribute Values */
    uint32 attr_value_mask;             /* Attribute Mask */
    int udf_id;                         /* UDF ID created using bcm_udf_create.
                                           Applicable only if Group mode
                                           attribute is
                                           bcmPolicerGroupModeAttrUdf. */
    uint32 offset;                      /* Offset in bits from the beginning of
                                           the packet attribute */
    uint32 width;                       /* Number of bits in packet attribute
                                           from offset to be used for policer
                                           offset mapping */
    uint32 multi_attr_count;            /* Number of multiple elements specified
                                           in all of the multi_attr_xxx[] array. */
    uint32 multi_attr_flags[16];        /* Attribute flags */
    bcm_policer_group_mode_attr_t multi_attr[16]; /* Attribute Selector */
    uint32 multi_attr_value[16];        /* Attribute Values */
    uint32 multi_attr_value_mask[16];   /* Attribute Mask */
    int multi_udf_id[16];               /* UDF ID created using bcm_udf_create.
                                           Applicable only if attribute is
                                           bcmPolicerGroupModeAttrUdf. */
    uint32 multi_offset[16];            /* Offset in bits from the beginning of
                                           the packet attribute */
    uint32 multi_width[16];             /* Number of bits in packet attribute
                                           from offset to be used */
} bcm_compat658_policer_group_mode_attr_selector_t;

typedef struct bcm_compat658_policer_config_s {
    uint32 flags;                       /* BCM_POLICER_* Flags. */
    bcm_policer_mode_t mode;            /* Policer mode. */
    uint32 ckbits_sec;                  /* Committed rate (kbits per sec). */
    uint32 cbits_sec_lower;             /* Committed rate (lower digits; 0~999
                                           bits per sec). */
    uint32 max_ckbits_sec;              /* Maximum Committed rate (kbits per
                                           sec), Applicable only for cascade
                                           mode. */
    uint32 max_cbits_sec_lower;         /* Maximum Committed rate (lower digits;
                                           0~999 bits per sec). */
    uint32 ckbits_burst;                /* Committed burst size (kbits). */
    uint32 cbits_burst_lower;           /* Committed burst size (lower digits;
                                           0~999 bits). */
    uint32 pkbits_sec;                  /* Peak rate (kbits per sec). */
    uint32 pbits_sec_lower;             /* Peak rate (lower digits; 0~999 bits
                                           per sec). */
    uint32 max_pkbits_sec;              /* Maximum Peak rate (kbits per sec),
                                           Applicable only for cascade mode. */
    uint32 max_pbits_sec_lower;         /* Maximum Peak rate (lower digits;
                                           0~999 bits per sec). */
    uint32 pkbits_burst;                /* Peak burst size (kbits). */
    uint32 pbits_burst_lower;           /* Peak burst size (lower digits; 0~999
                                           bits). */
    uint32 kbits_current;               /* Current size (kbits). */
    uint32 bits_current_lower;          /* Current size (lower digits; 0~999
                                           bits). */
    uint32 action_id;                   /* Index of the global meter action
                                           entry */
    uint32 sharing_mode;                /* Meter sharing mode in case of Macro
                                           meter of Envelop */
    uint32 entropy_id;                  /* If set, indicate the configuration
                                           group the policer belongs to */
    bcm_policer_pool_t pool_id;         /* Meter Pool Id of the current policer */
    uint32 bucket_width;                /* Bucket width in bits of the current
                                           policer */
    uint32 token_gran;                  /* Token granularity of the current
                                           policer */
    uint32 bucket_init_val;             /* Initial bucket count of the current
                                           policer */
    uint32 bucket_rollover_val;         /* Rollover bucket count of the current
                                           policer */
    bcm_core_t core_id;                 /* Device core on which to allocate the
                                           policer */
    bcm_policer_t ncoflow_policer_id;   /* Next lower priority committed policer
                                           ID to overflow to. Applicable in
                                           Cascaded  policer modes on MEF 10.3+
                                           compliant devices */
    bcm_policer_t npoflow_policer_id;   /* Next lower priority peak policer ID
                                           to overflow to. Applicable in
                                           Cascaded and CoupledCascade policer
                                           modes on MEF 10.3+  compliant devices */
    uint32 actual_ckbits_sec;           /* Granularity adjusted Committed rate
                                           (kbits per sec). */
    uint32 actual_cbits_sec_lower;      /* Granularity adjusted Committed rate
                                           (lower digits; 0~999 bits per sec). */
    uint32 actual_ckbits_burst;         /* Granularity adjusted Committed burst
                                           size (kbits). */
    uint32 actual_cbits_burst_lower;    /* Granularity adjusted Committed burst
                                           size (lower digits; 0~999 bits). */
    uint32 actual_pkbits_sec;           /* Granularity adjusted Peak rate (kbits
                                           per sec). */
    uint32 actual_pbits_sec_lower;      /* Granularity adjusted Peak rate (lower
                                           digits; 0~999 bits per sec). */
    uint32 actual_pkbits_burst;         /* Granularity adjusted Peak burst size
                                           (kbits). */
    uint32 actual_pbits_burst_lower;    /* Granularity adjusted Peak burst size
                                           (lower digits; 0~999 bits). */
    uint32 average_pkt_size;            /* Estimated average Ethernet packet
                                           size (1 to 16383 Bytes) for more
                                           accurate metering. */
    int mark_drop_as_black;             /* For drop decision (no committed or
                                           Excess credits), mark it as black
                                           (otherwise, it will be marked as
                                           red). */
} bcm_compat658_policer_config_t;


extern int bcm_compat658_policer_group_mode_id_create (
    int unit,
    uint32 flags,
    bcm_policer_group_mode_type_t type,
    uint32 total_policers,
    uint32 num_selectors,
    bcm_compat658_policer_group_mode_attr_selector_t *attr_selectors,
    uint32 *mode_id);


extern int bcm_compat658_policer_group_mode_id_get (
    int unit,
    uint32 mode_id,
    uint32 num_selectors,
    uint32 *flags,
    bcm_policer_group_mode_type_t *type,
    uint32 *total_policers,
    bcm_compat658_policer_group_mode_attr_selector_t *attr_selectors,
    uint32 *actual_num_selectors);


extern int bcm_compat658_policer_create (
    int unit,
    bcm_compat658_policer_config_t *pol_cfg,
    bcm_policer_t *policer_id);


extern int bcm_compat658_policer_set (
    int unit,
    bcm_policer_t policer_id,
    bcm_compat658_policer_config_t *pol_cfg);


extern int bcm_compat658_policer_get (
    int unit,
    bcm_policer_t policer_id,
    bcm_compat658_policer_config_t *pol_cfg);

/* Port Configuration structure. */
typedef struct bcm_compat658_port_config_s {
    bcm_pbmp_t fe;                      /* Mask of FE ports. */
    bcm_pbmp_t ge;                      /* Mask of GE ports. */
    bcm_pbmp_t xe;                      /* Mask of 10gig ports. */
    bcm_pbmp_t ce;                      /* Mask of 100gig ports. */
    bcm_pbmp_t e;                       /* Mask of eth ports. */
    bcm_pbmp_t hg;                      /* Mask of Higig ports. */
    bcm_pbmp_t sci;                     /* Mask of SCI ports. */
    bcm_pbmp_t sfi;                     /* Mask of SFI ports. */
    bcm_pbmp_t spi;                     /* Mask of SPI ports. */
    bcm_pbmp_t spi_subport;             /* Mask of SPI subports. */
    bcm_pbmp_t port;                    /* Mask of all front panel ports. */
    bcm_pbmp_t cpu;                     /* Mask of CPU ports. */
    bcm_pbmp_t all;                     /* Mask of all ports. */
    bcm_pbmp_t stack_int;               /* Deprecated - unused. */
    bcm_pbmp_t stack_ext;               /* Mask of Stack ports. */
    bcm_pbmp_t tdm;                     /* Mask of TDM ports. */
    bcm_pbmp_t pon;                     /* Mask of PON ports. */
    bcm_pbmp_t llid;                    /* Mask of LLID ports. */
    bcm_pbmp_t il;                      /* Mask of ILKN ports. */
    bcm_pbmp_t xl;                      /* Mask of XLAUI ports. */
    bcm_pbmp_t rcy;                     /* Mask of RECYCLE ports. */
    bcm_pbmp_t sat;                     /* Mask of SAT ports. */
    bcm_pbmp_t ipsec;                   /* Mask of IPSEC ports. */
    bcm_pbmp_t per_pipe[BCM_PIPES_MAX]; /* Mask of ports per pipe. The number of
                                           pipes per device can be obtained via
                                           num_pipes field of bcm_info_t. */
    bcm_pbmp_t nif;                     /* Mask of Network Interfaces ports. */
    bcm_pbmp_t control;                 /* Mask of hot swap controlling ports. */
} bcm_compat658_port_config_t;


extern int bcm_compat658_port_config_get (
    int unit,
    bcm_compat658_port_config_t *config);

/* LIF Counting Source. */
typedef struct bcm_compat658_stat_lif_counting_source_s {
    bcm_stat_counter_source_type_t type; 
    int command_id; 
    int stif_counter_id; 
    uint32 offset; 
} bcm_compat658_stat_lif_counting_source_t;

/* LIF Counting Configuration. */
typedef struct bcm_compat658_stat_lif_counting_s {
    bcm_compat658_stat_lif_counting_source_t source; 
    bcm_stat_counter_lif_counting_range_t range; 
} bcm_compat658_stat_lif_counting_t;


extern int bcm_compat658_stat_lif_counting_profile_get (
    int unit,
    uint32 flags,
    int lif_counting_profile,
    bcm_compat658_stat_lif_counting_t *lif_counting);


extern int bcm_compat658_stat_lif_counting_profile_set (
    int unit,
    uint32 flags,
    int lif_counting_profile,
    bcm_compat658_stat_lif_counting_t *lif_counting);


extern int bcm_compat658_stat_lif_counting_stack_level_priority_get (
    int unit,
    uint32 flags,
    bcm_compat658_stat_lif_counting_source_t *source,
    bcm_stat_counter_lif_stack_id_t lif_stack_level,
    int *priority);


extern int bcm_compat658_stat_counter_get (
    int unit,
    uint32 flags,
    bcm_stat_counter_input_data_t *stat_counter_input_data,
    bcm_stat_counter_output_data_t *stat_counter_output_data);


extern int bcm_compat658_stat_lif_counting_stack_level_priority_set (
    int unit,
    uint32 flags,
    bcm_compat658_stat_lif_counting_source_t *source,
    bcm_stat_counter_lif_stack_id_t lif_stack_level,
    int priority);

/* Trunk group attributes structure. */
typedef struct bcm_compat658_trunk_info_s {
    uint32 flags;                       /* BCM_TRUNK_FLAG_xxx. */
    int psc;                            /* Port selection criteria. */
    int ipmc_psc;                       /* Port selection criteria for software
                                           IPMC trunk resolution. */
    int dlf_index;                      /* DLF/broadcast port for trunk group. */
    int mc_index;                       /* Multicast port for trunk group. */
    int ipmc_index;                     /* IPMC port for trunk group. */
    int dynamic_size;                   /* Number of flows for dynamic load
                                           balancing. Valid values are 512, 1k,
                                           doubling up to 32k */
    int dynamic_age;                    /* Inactivity duration, in microseconds. */
    int dynamic_load_exponent;          /* The exponent used in the
                                           exponentially weighted moving average
                                           calculation of historical member
                                           load. */
    int dynamic_expected_load_exponent; /* The exponent used in the
                                           exponentially weighted moving average
                                           calculation of historical expected
                                           member load. */
} bcm_compat658_trunk_info_t;


extern int bcm_compat658_trunk_set (
    int unit,
    bcm_trunk_t tid,
    bcm_compat658_trunk_info_t *trunk_info,
    int member_count,
    bcm_trunk_member_t *member_array);


extern int bcm_compat658_trunk_get (
    int unit,
    bcm_trunk_t tid,
    bcm_compat658_trunk_info_t *t_data,
    int member_max,
    bcm_trunk_member_t *member_array,
    int *member_count);


#endif  /* BCM_RPC_SUPPORT */


#endif /* _COMPAT_658_H_ */
