PAE module is now a platform device, and is accessible via SysFS after loading.
To conform with the other iProc modules, the Platform device name is "bcmiproc-pae".

You can load firmware through the "fw" file in SysFS:
  # cat BCM5302x-PAE.srec >/sys/devices/platform/bcmiproc-pae/fw

Statistics are available in SysFS, in the "stats" directory:
  # ls /sys/devices/platform/bcmiproc-pae/stats
  0.bytes    0.elapsed  0.hits     cpu        idle

  cpu: gives current and max R5 CPU percentage.  A write will reset the max.
  idle: gives R5 current time and cumulative idle time
  <N>.hits: number of times that action <N> has been invoked
  <N>.bytes : bytes processed by action <N>
  <N>.elapsed:  elapsed time since action <N> was last invoked

  note that action 0 is the "null" action, and is always present,
  while other actions will only have statistics if the action is
  present.

You can see the status of the PAE through the "status" file:

  # cat /sys/devices/platform/bcmiproc-pae/status
  Running


Debug output from the R5 is accessible via DebugFS:
  First, mount DebugFS:

  # mount -t debugfs none /sys/kernel/debug 
  Now, the debug log is accessible at /sys/kernel/debug/bcmiproc-pae/log

  # cat /sys/kernel/debug/bcmiproc-pae/log 
  PAE Start


Adding an action:
  # echo $idx $type $mtu $action_data > /sys/devices/platform/bcmiproc-pae/action-add
  All values are ascii decimal, $action_data is a space-seperated sequence of bytes, like "3 159 40"

Deleting an action:
  # echo $idx > /sys/devices/platform/bcmiproc-pae/action-delete

Updating an action:
  # echo $idx $offset $newdata > /sys/devices/platform/bcmiproc-pae/action-update

Adding a tuple rule, to match a (sip,dip,sport,dport,proto) tuple and map to an action index :
  # echo $ip_version $src_ip $dest_ip $src_port $dest_port $protocol $action_idx $flags> /sys/devices/platform/bcmiproc-pae/tuple_rule_add
    Addresses can be either hex, or standard form ie ffffff00, 255.255.255.0 or 2001:0db8::0001
    Flags should be '0' for a full 5-tuple match, or '1' for a masked match.  The tuple should be already masked.

Deleting a tuple rule:
  # echo $ip_version $src_ip $dest_ip $src_port $dest_port $protocol > /sys/devices/platform/bcmiproc-pae/tuple_rule_delete
    (note that extra arguments are ignored, so the action index can be provided to mimic the "add", if desired)

Setting the tuple mask:
  # echo $ip_version $src_ip_mask $dest_ip_mask $src_port_mask $dest_port_mask $protocol_mask> /sys/devices/platform/bcmiproc-pae/tuple_mask

Adding an arp watch :
    # echo $ip_address $mac_address > /sys/devices/platform/bcmiproc-pae/arp_watch_add

View the arp watch table
    # cat /sys/devices/platform/bcmiproc-pae/arp_watch_add

Delete an arp watch table entry
    # echo $ip_address > /sys/devices/platform/bcmiproc-pae/arp_watch_remove

Change the arp watch poll timer
    # echo $seconds > /sys/devices/platform/bcmiproc-pae/arp_watch_timer

View the arp watch poll timer
    # cat /sys/devices/platform/bcmiproc-pae/arp_watch_timer

Adding an arp watch notifier:
    The arp watcher leverages the kernel's network notifier_block subsystem in order to provide callbacks in the event that
    a particular interface/ip pair's mac address changes. 

        Sample code :

        static int arp_change_event(struct notifier_block *this, unsigned long event, void *ptr) 
        {
            printk(KERN_INFO "ARP Table Entry Changed [%s]\n",(char *)ptr);
            return 0;
        }

        struct notifier_block test_notifier = {
            arp_change_event,   // handler
            NULL,               // parameter is inserted later
            0                   // priority
        };

        char *parameter = "I am a string";
    
        void pae_register_test_callback(void)
        {
            uint8_t ip[4] = {192,168,1,57}; // bcmdev
            char *iface = "eth2.2";        
            if (pae_add_arp_watch_notifier(ip, iface, &test_notifier, parameter))
            {
                printk(KERN_ERR "Interface/IP pair is not in the arp watch table\n");
            }
        }


PAE Memory view:
  While most PAE memory is mapped into A9 address space, some is not.
  The SysFS file /sys/devices/platform/bcmiproc-pae/memory provides
  a mechanism to do reads/writes via the R5.

  # echo 0x40000014 >/sys/devices/platform/bcmiproc-pae/memory 
  Read PAE memory 40000014: 12345678

  # echo 0x40000014 0xf00df00d >/sys/devices/platform/bcmiproc-pae/memory 
  Wrote PAE memory 40000014: f00df00d (result 0)

Useful tip:
  Enable the "tcpdump" package in buildroot, and use it to inspect rewritten packets, like:
    tcpdump -e
    tcpdump -nnXX dst port 500

##################################
# Example actions:

# 4to6 basic rewrite (calculated csum)
echo "1 2 1500 0 128 32 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 " > /sys/devices/platform/bcmiproc-pae/action_add
# or, writing the 4-byte rewrite action operation as a 4-byte word:
echo "1 2 1500 0x00208000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 " > /sys/devices/platform/bcmiproc-pae/action_add

# 4to6 basic rewrite (precalculated csum)
echo 1 > /sys/devices/platform/bcmiproc-pae/action_delete
echo "1 2 1500 0x00210000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 01 17" > /sys/devices/platform/bcmiproc-pae/action_add

# DMAC Rewrite
echo 1 > /sys/devices/platform/bcmiproc-pae/action_delete
echo "1 2 1500 0 0 0 4 1 2 3 4 5 6" > /sys/devices/platform/bcmiproc-pae/action_add

# VLAN Drop, VLAN add of 0x81 00 00 05
echo 1 > /sys/devices/platform/bcmiproc-pae/action_delete
echo "1 2 1500 0 0 128 1 129 0 0 5" > /sys/devices/platform/bcmiproc-pae/action_add

# VLAN Drop, VLAN add of 0x91 00 00 05
echo 1 > /sys/devices/platform/bcmiproc-pae/action_delete
echo "1 2 1500 0 0 128 1 145 0 0 5" > /sys/devices/platform/bcmiproc-pae/action_add

// XXX Update doc
// XXX streamline main.c: keep enq0 / enq1 handling separate
// XXX fix up "pae_shared.h" to have a file actuallyshared between host & pae
