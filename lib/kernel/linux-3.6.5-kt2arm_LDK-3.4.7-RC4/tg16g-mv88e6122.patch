diff -rupN linux-3.6.5-arm.ori/bcmdrivers/mdio/iproc_mdio.c linux-3.6.5-arm.mod/bcmdrivers/mdio/iproc_mdio.c
--- linux-3.6.5-arm.ori/bcmdrivers/mdio/iproc_mdio.c	2016-07-20 23:30:07.327375000 +0100
+++ linux-3.6.5-arm.mod/bcmdrivers/mdio/iproc_mdio.c	2017-11-10 14:34:47.823859851 +0000
@@ -333,17 +333,41 @@ _dump_devs(void)
     }
 }
 
+static u32 iproc_wrap_misc_control=0;
+static void *wrapaddr = 0;
 static int 
 mdio_open(struct inode *inode, struct file *filp)
 {
+	u32 tmp;
+
+#if defined(CONFIG_MACH_HX4)
+        u32 mdio_sel= IPROC_WRAP_MISC_CONTROL__QUAD_SERDES_MDIO_SEL;
+        u32 ctrl_sel= IPROC_WRAP_MISC_CONTROL__QUAD_SERDES_CTRL_SEL;
+#else
+        u32 mdio_sel= IPROC_WRAP_MISC_CONTROL__UNICORE_SERDES_MDIO_SEL;
+        u32 ctrl_sel= IPROC_WRAP_MISC_CONTROL__UNICORE_SERDES_CTRL_SEL;
+#endif
+        u32 iproc_mdio_sel= IPROC_WRAP_MISC_CONTROL__IPROC_MDIO_SEL;
+
+	if (!wrapaddr) wrapaddr = ioremap(IPROC_WRAP_MISC_CONTROL, 0x10);
+
+	iproc_wrap_misc_control = ioread32(wrapaddr);
+
+       /* set bits IPROC_WRAP_MISC_CONTROL__IPROC_MDIO_SEL,
+          IPROC_WRAP_MISC_CONTROL__QUAD_SERDES_MDIO_SEL &
+          IPROC_WRAP_MISC_CONTROL__QUAD_SERDES_CTRL_SEL
+          so AMAC can access the Serdes and Phy */
+        tmp = iproc_wrap_misc_control | ((1<<mdio_sel)|(1<<ctrl_sel)|(1<<iproc_mdio_sel));
+	iowrite32(tmp, wrapaddr);
+
     filp->private_data = mdio_devices.mdio;
     return 0;
 }
 
 static int 
-mdio_release(struct inode *inode, struct file *filp)
-{
+mdio_release(struct inode *inode, struct file *filp) {
 
+    iowrite32(iproc_wrap_misc_control, wrapaddr);
     return 0;
 }    
 
@@ -357,7 +381,7 @@ static int mdio_message(mdio_info_t *mdi
     pa = u_xfers->pa;
     ra = u_xfers->ra;
 
-    MII_DBG(("mdio_message: op = %d\n", op));
+    MII_DBG(("mdio_message: op = %X %X %X %X %X\n", op, MDIO_IOC_OP_LOCAL_READ, MDIO_IOC_OP_LOCAL_WRITE, MDIO_IOC_OP_EXTERNAL_READ, MDIO_IOC_OP_EXTERNAL_WRITE));
 
     if(op == MDIO_IOC_OP_LOCAL_READ) {
         ccb_mii_read(MII_DEV_LOCAL, pa, ra, &regval);
@@ -392,7 +416,6 @@ mdio_ioctl(struct file *filp,
     mdio_info_t *mdio;
 
     MII_DBG(("mdio_ioctl: cmd = %d\n", cmd));
-
     /* Check type and command number */
     if (_IOC_TYPE(cmd) != MDIO_IOC_MAGIC){
         return -ENOTTY;
@@ -410,7 +433,6 @@ mdio_ioctl(struct file *filp,
             (void __user *)arg, _IOC_SIZE(cmd));
     if (err)
         return -EFAULT;
-
     mdio = (mdio_info_t *)filp->private_data;
 
 	switch (cmd) {
@@ -434,6 +456,7 @@ mdio_ioctl(struct file *filp,
         retval = -EINVAL;
         return retval;
     }
+
     n_ioc = tmp / sizeof(struct mdio_ioc_transfer);
     if (n_ioc == 0)
         return 0;
@@ -516,7 +539,7 @@ ccb_mii_init(void)
     /* Set the MII default clock 1MHz */
     ccb_mii_freq_set(1024);
 
-//    _dump_devs();
+    //_dump_devs();
     
     if(mdio_devices.init != 1) {
         return -ENOMEM;
diff -rupN linux-3.6.5-arm.ori/marvell88e6122/mainATU.c linux-3.6.5-arm.mod/marvell88e6122/mainATU.c
--- linux-3.6.5-arm.ori/marvell88e6122/mainATU.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.6.5-arm.mod/marvell88e6122/mainATU.c	2017-11-10 14:35:05.693884626 +0000
@@ -0,0 +1,190 @@
+// debug for e3m	1.01 13/04/2004 Nuno Monteiro
+// nuno-f-monteiro@ptinovacao.pt
+// Copyright (c) 2004 PT Inova��o, SA, All Rights Reserved.
+
+// This software is provided "AS IS," without a warranty of any kind. 
+
+// This software is not designed or intended for use in on-line control of
+// aircraft, air traffic, aircraft navigation or aircraft communications; or in
+// the design, construction, operation or maintenance of any nuclear
+// facility. Licensee represents and warrants that it will not use or
+// redistribute the Software for such purposes
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <unistd.h>
+#include "main.h"
+
+int mv_fd;
+
+void print_sintax(char *appName){
+
+    printf("\n\rmarvell 88E6122 ATU debug routine\n\r");
+    printf("Usage:\n\r");
+    printf("%s dump\n\r", appName);
+    printf("%s flush\n\r", appName);
+    printf("%s add <sport> <mac>\n\r", appName);
+    printf("%s del <mac>\n\r", appName);
+    printf("\n\r");
+    return;
+}
+
+uint16 mac_marvell_read(uint8 Port, uint8 Addr){
+    int rc; struct mdio_ioc_transfer tfx;
+
+    tfx.pa=Port;
+    tfx.ra=Addr;
+    rc=ioctl(mv_fd, MDIO_IOC_EXTERNAL_R_REG, &tfx);
+    if (rc == -1) {perror("ioctl"); return (-1);}
+
+    return tfx.rx_buf;
+}
+
+uint16 mac_marvell_write (uint8 Port, uint8 Addr, uint16 Data){
+    int rc; struct mdio_ioc_transfer tfx;
+
+    tfx.pa=Port;
+    tfx.ra=Addr;
+    tfx.tx_buf=Data;
+    rc = ioctl(mv_fd, MDIO_IOC_EXTERNAL_W_REG, &tfx);
+    if (rc == -1) perror("ioctl");
+    return 0;
+}
+
+static int marvell_dump_ATU(void) {
+	unsigned short data;
+	unsigned char mac[6];
+
+        mac_marvell_write(PORT_ATU, 0x0C, 0x0000);
+        mac_marvell_write(PORT_ATU, 0x0D, 0x0000);
+        mac_marvell_write(PORT_ATU, 0x0E, 0x0000);
+        mac_marvell_write(PORT_ATU, 0x0F, 0x0000);
+
+	printf("|-------------------|-----|---|\n");
+	printf("|     MAC ADDRESS   | Vect| ES|\n");
+	printf("|-------------------|-----|---|\n");
+
+	while (1) {
+		mac_marvell_write(PORT_ATU, 0x0B, 0xC000);
+		while ( mac_marvell_read(PORT_ATU, 0x0B) & 0x8000 ) usleep(10000);
+		
+		if ( mac_marvell_read(PORT_ATU, 0x0C) & 0x000F ) {
+			data=mac_marvell_read(PORT_ATU, 0x0D);
+			mac[0]=data>>8;mac[1]=data&0xFF;
+                        data=mac_marvell_read(PORT_ATU, 0x0E);
+                        mac[2]=data>>8;mac[3]=data&0xFF;
+                        data=mac_marvell_read(PORT_ATU, 0x0F);
+                        mac[4]=data>>8;mac[5]=data&0xFF;
+			data=mac_marvell_read(PORT_ATU, 0x0C);
+
+			printf("| %02X:%02X:%02X:%02X:%02X:%02X | %03X | %01X |\n", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5],(data>>4)&0x7FF, data&0x000F);
+		} else {
+			break;
+		}
+	}
+
+	printf("|-------------------|-----|---|\n");
+	return 0;
+}
+
+static int marvell_flush_ATU(void) {
+
+	mac_marvell_write(PORT_ATU, 0x0B, 0x9000);	
+        while ( mac_marvell_read(PORT_ATU, 0x0B) & 0x8000 ) usleep(10000);
+
+	printf("%s: flushed!\n",__FUNCTION__);
+	return 0;
+}
+
+static int marvell_add_ATU_entry (uint8 port, unsigned char *mac) {
+
+	mac_marvell_write(PORT_ATU, 0x0C, (1<<(port+4)|0xF));
+
+	mac_marvell_write(PORT_ATU, 0x0D, (mac[0]<<8)|mac[1]);
+	mac_marvell_write(PORT_ATU, 0x0E, (mac[2]<<8)|mac[3]);
+	mac_marvell_write(PORT_ATU, 0x0F, (mac[4]<<8)|mac[5]);
+
+        mac_marvell_write(PORT_ATU, 0x0B, 0xB000);
+        while ( mac_marvell_read(PORT_ATU, 0x0B) & 0x8000 ) usleep(10000);
+
+        printf("%s: %02X:%02X:%02X:%02X:%02X:%02X port %d added!\n",__FUNCTION__,  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5], port);
+        return 0;
+}
+
+static int marvell_del_ATU_entry (unsigned char *mac) {
+        
+
+	mac_marvell_write(PORT_ATU, 0x0C, 0x0000);
+
+        mac_marvell_write(PORT_ATU, 0x0D, (mac[0]<<8)|mac[1]);
+        mac_marvell_write(PORT_ATU, 0x0E, (mac[2]<<8)|mac[3]);
+        mac_marvell_write(PORT_ATU, 0x0F, (mac[4]<<8)|mac[5]);
+
+        mac_marvell_write(PORT_ATU, 0x0B, 0xB000);
+        while ( mac_marvell_read(PORT_ATU, 0x0B) & 0x8000 ) usleep(10000);
+
+	printf("%s: %02X:%02X:%02X:%02X:%02X:%02X\n",__FUNCTION__,  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+	return 0;
+}
+
+int main(int argc, char **argv){
+    int retCode;
+    
+    if (argc<=1) {
+        print_sintax(argv[0]);
+        exit(0);
+    }
+
+    if (strcmp(argv[1],"help")==0) {
+        print_sintax(argv[0]);
+        exit(0);
+    }
+    
+    mv_fd = open(DEVICE_NAME, O_RDWR);
+
+    if (strcmp(argv[1],"dump")==0) {
+        retCode=marvell_dump_ATU();
+    } else if (strcmp(argv[1],"flush")==0) {
+        retCode=marvell_flush_ATU();
+    } else if (strcmp(argv[1],"add")==0) {
+        int port; unsigned char mac[6];
+
+        if (argc!=4) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+        if (sscanf(argv[2], "%d", &port)!=1) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+        if (sscanf(argv[3], "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx", &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5])!=6) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+
+        retCode=marvell_add_ATU_entry((uint8)port, mac);
+    } else if (strcmp(argv[1],"del")==0) {
+        unsigned char mac[6];
+
+        if (argc!=3) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+        if (sscanf(argv[2], "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx", &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5])!=6) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+
+        retCode=marvell_del_ATU_entry(mac);
+    } else {
+        print_sintax(argv[0]);
+        close(mv_fd);
+        exit(1);
+    }
+    
+    close(mv_fd);
+    exit(retCode);
+}
diff -rupN linux-3.6.5-arm.ori/marvell88e6122/main.h linux-3.6.5-arm.mod/marvell88e6122/main.h
--- linux-3.6.5-arm.ori/marvell88e6122/main.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.6.5-arm.mod/marvell88e6122/main.h	2017-11-10 14:35:05.693884626 +0000
@@ -0,0 +1,40 @@
+
+#ifndef _main_h_
+#define _main_h_
+
+typedef unsigned char  		uint8;
+typedef unsigned short 		uint16;
+typedef unsigned int   		uint32;
+typedef unsigned long long  	uint64;
+typedef unsigned char           uint8_t;
+typedef unsigned short          uint16_t;
+
+
+#define PORT_ATU		0x1B
+
+#define READ_MV_REG_CMD 0x1
+#define WRITE_MV_REG_CMD 0x2
+           
+#define DEVICE_NAME "/dev/mdio" 
+     
+          
+struct mdio_ioc_transfer {
+    uint8_t   pa; /* phy address */
+    uint8_t   ra; /* register address */
+    uint16_t  tx_buf;
+    uint16_t  rx_buf;
+};
+
+#define MDIO_IOC_MAGIC       'm'
+#define MDIO_MSGSIZE(N) \
+        ((((N)*(sizeof (struct mdio_ioc_transfer))) < (1 << _IOC_SIZEBITS)) \
+                ? ((N)*(sizeof (struct mdio_ioc_transfer))) : 0)
+
+#define MDIO_IOC_MESSAGE(N) _IOW(MDIO_IOC_MAGIC, 0, char[MDIO_MSGSIZE(N)])
+
+#define MDIO_IOC_EXTERNAL_R_REG _IOWR(MDIO_IOC_MAGIC, 0, char[MDIO_MSGSIZE(1)])
+#define MDIO_IOC_EXTERNAL_W_REG _IOW(MDIO_IOC_MAGIC, 1, char[MDIO_MSGSIZE(1)])
+#define MDIO_IOC_LOCAL_R_REG _IOWR(MDIO_IOC_MAGIC, 2, char[MDIO_MSGSIZE(1)])
+#define MDIO_IOC_LOCAL_W_REG _IOW(MDIO_IOC_MAGIC, 3, char[MDIO_MSGSIZE(1)])
+ 
+#endif //
diff -rupN linux-3.6.5-arm.ori/marvell88e6122/Makefile.ATU linux-3.6.5-arm.mod/marvell88e6122/Makefile.ATU
--- linux-3.6.5-arm.ori/marvell88e6122/Makefile.ATU	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.6.5-arm.mod/marvell88e6122/Makefile.ATU	2017-11-10 14:35:05.693884626 +0000
@@ -0,0 +1,41 @@
+# Makefile for a multifile kernel module
+#CC=/opt/broadcom/bin/arm-linux-gcc
+#CC=/opt/eldk/usr/bin/ppc_85xxDP-gcc
+#CC=/usr/local/powerpc-linux-3.4.2/bin/powerpc-linux-gcc-3.4.2
+#CC=/opt/fsl/1.2/sysroots/i686-fslsdk-linux/usr/bin/ppce500mc-fsl-linux/powerpc-fsl-linux-gcc
+CC=/opt/broadcom/bin/arm-linux-gcc
+#CC=gcc
+#LD=arm-linux-ld
+#LD=arm-linux-ld
+#LD=ld
+#CFLAGS=-shared -Wl,-soname
+#CFLAGS=--save-temps
+CFLAGS= -I../linux-inc -Wall
+#CFLAGS= -DPTIN_X16
+#LDFLAGS=-static
+LDFLAGS=
+RM=rm -f
+#CROSSHOME=/usr/local/powerpc-linux-ptin   
+TARGET=./marvell88e6122-ATU
+
+VERSAO=1.0.0
+#INSTALL_DIR=/exports/ptinroot/lib
+
+OBJ = mainATU.o 
+    
+all:	Makefile.ATU $(OBJ)
+	       	$(CC) $(CFLAGS) $(LDFLAGS) -o $(TARGET) $(OBJ) -lc
+   
+
+clean:	
+		rm -f $(OBJ)  $(TARGET)
+								 
+vpath %.c	  # Search path for *.c files
+
+#
+# Rule for C compilation
+#
+obj/%.o : %.c
+	$(RM) $@
+	@echo Building $@
+	$(CC) $(CFLAGS) -Wall -Werror -c -o $@ $<
diff -rupN linux-3.6.5-arm.ori/marvell88e6122/README.txt linux-3.6.5-arm.mod/marvell88e6122/README.txt
--- linux-3.6.5-arm.ori/marvell88e6122/README.txt	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.6.5-arm.mod/marvell88e6122/README.txt	2017-11-10 14:36:22.381990956 +0000
@@ -0,0 +1,9 @@
+
+#No arranque da carta
+
+MV_Major=`cat /proc/devices |grep mdio|awk '{print $1}'`
+mknod /dev/mdio c $MV_Major 0
+ftpget -u root -p lampada 192.168.200.101 marvell88e6122-ATU marvell88e6122-ATU
+chmod +x marvell88e6122-ATU
+
+
