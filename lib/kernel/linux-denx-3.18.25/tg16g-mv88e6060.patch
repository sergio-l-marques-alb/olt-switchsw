diff -rupN linux-denx-3.18.25-ori/arch/powerpc/sysdev/Kconfig linux-denx-3.18.25-mod/arch/powerpc/sysdev/Kconfig
--- linux-denx-3.18.25-ori/arch/powerpc/sysdev/Kconfig	2016-11-17 13:38:47.915045000 +0000
+++ linux-denx-3.18.25-mod/arch/powerpc/sysdev/Kconfig	2017-11-08 13:26:46.322837620 +0000
@@ -40,3 +40,8 @@ config SCOM_DEBUGFS
 config GE_FPGA
 	bool
 	default n
+
+
+config PTIN_ETH_MARVELL_SWITCH
+	bool
+	default y
diff -rupN linux-denx-3.18.25-ori/arch/powerpc/sysdev/Makefile linux-denx-3.18.25-mod/arch/powerpc/sysdev/Makefile
--- linux-denx-3.18.25-ori/arch/powerpc/sysdev/Makefile	2016-11-17 13:38:47.915045000 +0000
+++ linux-denx-3.18.25-mod/arch/powerpc/sysdev/Makefile	2017-11-08 13:26:46.334837619 +0000
@@ -76,3 +76,5 @@ obj-$(CONFIG_USB_DWC_OTG)	+= amcc-usbotg
 obj-$(CONFIG_SATA_DWC)		+= amcc-sata.o
 
 obj-$(CONFIG_GE_FPGA)		+= ge/
+
+obj-$(CONFIG_PTIN_ETH_MARVELL_SWITCH)   += mv88e6060_of.o
diff -rupN linux-denx-3.18.25-ori/arch/powerpc/sysdev/mv88e6060_of.c linux-denx-3.18.25-mod/arch/powerpc/sysdev/mv88e6060_of.c
--- linux-denx-3.18.25-ori/arch/powerpc/sysdev/mv88e6060_of.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-denx-3.18.25-mod/arch/powerpc/sysdev/mv88e6060_of.c	2017-11-08 13:26:46.328837620 +0000
@@ -0,0 +1,181 @@
+/*
+ * net/dsa/mv88e6095.c - Marvell 88e6095/6095f/6131 switch chip support
+ * Copyright (c) 2008-2009 Marvell Semiconductor
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#include <linux/of.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+
+#include <linux/list.h>
+#include <linux/netdevice.h>    
+#include <linux/phy.h>
+#include <linux/cdev.h>
+#include <linux/miscdevice.h>
+#include <linux/fs.h>
+
+#include "mv88e6060_of.h"
+
+#define MV88E6060_MAJOR 249
+static struct mii_bus *mv88e6060_bus=NULL;
+
+#define READ_MV_REG_CMD    0x1
+#define WRITE_MV_REG_CMD   0x2
+
+static int mvdev_open = 0;
+
+static int Major;
+#define DEVICE_NAME "mv88e6060"
+
+int mv88e6060_reg_read(struct mii_bus *bus, int addr, int reg) {
+    int ret;
+
+    ret=mdiobus_read(bus, addr, reg) & 0xffff;
+#ifdef PTIN_DEBUG
+    printk("%s(addr %02X, reg %02X) %04X\n", __FUNCTION__, addr, reg, ret);
+#endif
+    return ret;
+}
+
+int mv88e6060_reg_write(struct mii_bus *bus, int addr, int reg, u16 val) {
+        
+#ifdef PTIN_DEBUG
+    printk("%s(addr %02X, reg %02X, val %04X)\n", __FUNCTION__, addr, reg, val);
+#endif
+    return mdiobus_write(bus, addr, reg, val);
+}
+
+static ssize_t read_mv88e6060(struct file *file, char __user *data, size_t size, loff_t *offset) {
+#ifdef PTIN_DEBUG
+	printk("%s(0x%p, 0x%p, 0x%zu, 0x%p)\n", __FUNCTION__, file, data, size, offset);
+#endif
+    return mv88e6060_reg_read(mv88e6060_bus, data[0], data[1]);
+}
+
+static ssize_t write_mv88e6060(struct file *file, const char __user *data, size_t size, loff_t *offset) {
+    u16 val = (data[2]<<8 | data [3]);
+#ifdef PTIN_DEBUG
+	printk("%s(0x%p, 0x%p, 0x%zu, 0x%p)\n", __FUNCTION__, file, data, size, offset);
+#endif
+    mv88e6060_reg_write(mv88e6060_bus, data[0], data[1], val);
+	return 0;
+}
+
+static int mv88e6060_probe(struct platform_device *ofdev) {
+    
+#ifdef PTIN_DEBUG
+    printk ("Probe do driver da PTIN MV88e6060\n");
+#endif
+    return 0;
+}
+
+static int mv88e6060_remove(struct platform_device *ofdev) {
+
+#ifdef PTIN_DEBUG
+    printk ("Remove do driver da PTIN MV88e6060\n");
+#endif
+	return 0;
+}
+
+static struct of_device_id mv88e6060_match[] = {
+	{
+		.compatible = "ptin,mv88e6060",
+	},
+	{}
+};
+MODULE_DEVICE_TABLE(of, mv88e6060_match);
+
+static int open_mv88e6060(struct inode *inode, struct file *file) {
+#ifdef PTIN_DEBUG
+	printk("%s(0x%p, 0x%p)\n", __FUNCTION__, inode, file);
+#endif
+    if (mvdev_open) return -EBUSY;
+    mvdev_open=1;
+	return 0;
+}
+
+static int release_mv88e6060(struct inode *inode, struct file *file) {
+#ifdef PTIN_DEBUG
+	printk("%s(0x%p, 0x%p)\n", __FUNCTION__, inode, file);
+#endif
+    mvdev_open=0;
+	return 0;
+}
+
+static long ioctl_mv88e6060(struct file *file, unsigned int cmd, unsigned long arg) {
+	int retval = 0;
+	switch ( cmd ) {
+        case READ_MV_REG_CMD:
+			return (mv88e6060_reg_read(mv88e6060_bus, (unsigned char)(arg>>8), (unsigned char)arg));
+			break;
+        case WRITE_MV_REG_CMD:
+            mv88e6060_reg_write(mv88e6060_bus, (unsigned char)(arg>>24), (unsigned char)(arg>>16), (unsigned short)arg);
+			break;
+		default:
+			retval = -EINVAL;
+	}
+	return retval;
+}
+
+static struct file_operations mv_fops = {
+    .open = open_mv88e6060,
+    .release = release_mv88e6060,
+    .read = read_mv88e6060,
+    .write = write_mv88e6060,
+    .unlocked_ioctl = ioctl_mv88e6060,
+};
+
+static struct platform_driver mv88e6060_driver = {
+	.driver = {
+		.name = "mv88e6060",
+		.owner = THIS_MODULE,
+		.of_match_table = of_match_ptr(mv88e6060_match),
+	},
+	.probe = mv88e6060_probe,
+	.remove = mv88e6060_remove,
+};
+module_platform_driver(mv88e6060_driver);
+
+struct phy_device * mv88e6060_detect(struct mii_bus *bus) {
+	u32 phy_id;
+    int ret=0;
+
+    Major = register_chrdev(MV88E6060_MAJOR, DEVICE_NAME, &mv_fops);
+    if (Major < 0) {
+        printk(KERN_ALERT "Registering marvell char device failed with %d\n", Major);
+    } else {
+        printk(KERN_ALERT "Registering marvell char device with %d\n", (Major)?Major:MV88E6060_MAJOR);
+    }
+
+	ret = mv88e6060_reg_read(bus, REG_PORT(0), 0x03);
+#ifdef PTIN_DEBUG
+    printk ("mv88e6060_reg_read %04X %04X\n\r", REG_PORT(0), ret);
+#endif
+	if (ret >= 0 && ret != 0xFFFF) {
+		phy_id = ret & 0xfff0;
+		if (phy_id == 0x0600)
+			printk("Marvell 88E6060/88E6060F Detected\n");
+        else{
+            printk("Unknown Device Detected - but will use it anyway\n");
+        }
+	}
+
+    mv88e6060_reg_write(bus, REG_PORT(0), 0x0B, 0x0001);
+    mv88e6060_reg_write(bus, REG_PORT(1), 0x0B, 0x0002);
+    mv88e6060_reg_write(bus, REG_PORT(2), 0x0B, 0x0004);
+    mv88e6060_reg_write(bus, REG_PORT(3), 0x0B, 0x0008);
+    mv88e6060_reg_write(bus, REG_PORT(4), 0x0B, 0x0010);
+    mv88e6060_reg_write(bus, REG_PORT(5), 0x0B, 0x0020);
+
+    mv88e6060_bus=bus;
+    return NULL;
+}
+
+MODULE_LICENSE("GPL");
+
diff -rupN linux-denx-3.18.25-ori/arch/powerpc/sysdev/mv88e6060_of.h linux-denx-3.18.25-mod/arch/powerpc/sysdev/mv88e6060_of.h
--- linux-denx-3.18.25-ori/arch/powerpc/sysdev/mv88e6060_of.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-denx-3.18.25-mod/arch/powerpc/sysdev/mv88e6060_of.h	2017-11-08 13:26:46.327837619 +0000
@@ -0,0 +1,11 @@
+#ifndef __MARVELL_88E6060X_DRIVER__
+#define __MARVELL_88E6060X_DRIVER__
+
+#define REG_PORT(p)		(8 + (p))
+//#define REG_PORT(p)		(0x10 + (p))
+//#define REG_GLOBAL		0x1b
+//#define REG_GLOBAL2		0x1c
+
+struct phy_device * mv88e6060_detect(struct mii_bus *bus);
+
+#endif  //__MARVELL_88E6060X_DRIVER__
diff -rupN linux-denx-3.18.25-ori/drivers/of/of_mdio.c linux-denx-3.18.25-mod/drivers/of/of_mdio.c
--- linux-denx-3.18.25-ori/drivers/of/of_mdio.c	2016-11-17 14:14:36.377418000 +0000
+++ linux-denx-3.18.25-mod/drivers/of/of_mdio.c	2017-11-08 13:26:42.082837723 +0000
@@ -20,6 +20,10 @@
 #include <linux/of_mdio.h>
 #include <linux/module.h>
 
+#ifdef CONFIG_PTIN_ETH_MARVELL_SWITCH
+#include <../arch/powerpc/sysdev/mv88e6060_of.h>
+#endif
+
 MODULE_AUTHOR("Grant Likely <grant.likely@secretlab.ca>");
 MODULE_LICENSE("GPL");
 
@@ -53,8 +57,20 @@ static int of_mdiobus_register_phy(struc
 
 	if (!is_c45 && !of_get_phy_id(child, &phy_id))
 		phy = phy_device_create(mdio, addr, phy_id, 0, NULL);
-	else
-		phy = get_phy_device(mdio, addr, is_c45);
+	else {
+#ifdef CONFIG_PTIN_ETH_MARVELL_SWITCH
+               if(of_device_is_compatible(child, "ptin,mv88e6060")){
+                       printk("bus addr 0x%p\n", mdio);
+                       mv88e6060_detect(mdio);
+                       phy = get_phy_device(mdio, addr, is_c45);
+               }else{
+                       printk("bus addr 0x%p\n", mdio);
+                       phy = get_phy_device(mdio, addr, is_c45);
+               }
+#else
+                phy = get_phy_device(mdio, addr, is_c45);
+#endif
+       }
 	if (!phy || IS_ERR(phy))
 		return 1;
 
diff -rupN linux-denx-3.18.25-ori/marvell88e6060/mainATU.c linux-denx-3.18.25-mod/marvell88e6060/mainATU.c
--- linux-denx-3.18.25-ori/marvell88e6060/mainATU.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-denx-3.18.25-mod/marvell88e6060/mainATU.c	2017-11-08 14:07:33.645696855 +0000
@@ -0,0 +1,188 @@
+// debug for e3m	1.01 13/04/2004 Nuno Monteiro
+// nuno-f-monteiro@ptinovacao.pt
+// Copyright (c) 2004 PT Inova��o, SA, All Rights Reserved.
+
+// This software is provided "AS IS," without a warranty of any kind. 
+
+// This software is not designed or intended for use in on-line control of
+// aircraft, air traffic, aircraft navigation or aircraft communications; or in
+// the design, construction, operation or maintenance of any nuclear
+// facility. Licensee represents and warrants that it will not use or
+// redistribute the Software for such purposes
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <unistd.h>
+#include "main.h"
+
+int mv_fd;
+
+void print_sintax(char *appName){
+
+    printf("\n\rmarvell 88E6095 ATU debug routine\n\r");
+    printf("Usage:\n\r");
+    printf("%s dump\n\r", appName);
+    printf("%s flush\n\r", appName);
+    printf("%s add <sport> <mac>\n\r", appName);
+    printf("%s del <mac>\n\r", appName);
+    printf("\n\r");
+    return;
+}
+
+uint16 mac_marvell_read  (uint8 Port, uint8 Addr){
+
+    unsigned long arg;
+
+    arg = ((unsigned long)(Port+0x00))<<8 | (unsigned long)Addr;
+    return ioctl(mv_fd, READ_MV_REG_CMD, arg);
+
+}
+
+uint16 mac_marvell_write (uint8 Port, uint8 Addr, uint16 Data){
+
+    unsigned long arg;
+
+    arg = ((unsigned long)(Port+0x00))<<24 | ((unsigned long)Addr)<<16 | (unsigned long)Data;
+    ioctl(mv_fd, WRITE_MV_REG_CMD, arg);
+    
+    return (0);
+
+}
+
+static int marvell_dump_ATU(void) {
+	unsigned short data;
+	unsigned char mac[6];
+
+        mac_marvell_write(PORT_GLOBAL, 0x0C, 0x0000);
+        mac_marvell_write(PORT_GLOBAL, 0x0D, 0x0000);
+        mac_marvell_write(PORT_GLOBAL, 0x0E, 0x0000);
+        mac_marvell_write(PORT_GLOBAL, 0x0F, 0x0000);
+
+	printf("|-------------------|-----|---|\n");
+	printf("|     MAC ADDRESS   | Vect| ES|\n");
+	printf("|-------------------|-----|---|\n");
+
+	while (1) {
+		mac_marvell_write(PORT_GLOBAL, 0x0B, 0xC000);
+		while ( mac_marvell_read(PORT_GLOBAL, 0x0B) & 0x8000 ) usleep(10000);
+		
+		if ( mac_marvell_read(PORT_GLOBAL, 0x0C) & 0x000F ) {
+			data=mac_marvell_read(PORT_GLOBAL, 0x0D);
+			mac[0]=data>>8;mac[1]=data&0xFF;
+                        data=mac_marvell_read(PORT_GLOBAL, 0x0E);
+                        mac[2]=data>>8;mac[3]=data&0xFF;
+                        data=mac_marvell_read(PORT_GLOBAL, 0x0F);
+                        mac[4]=data>>8;mac[5]=data&0xFF;
+			data=mac_marvell_read(PORT_GLOBAL, 0x0C);
+
+			printf("| %02X:%02X:%02X:%02X:%02X:%02X | %03X | %01X |\n", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5],(data>>4)&0x7FF, data&0x000F);
+		} else {
+			break;
+		}
+	}
+
+	printf("|-------------------|-----|---|\n");
+	return 0;
+}
+
+static int marvell_flush_ATU(void) {
+
+	mac_marvell_write(PORT_GLOBAL, 0x0B, 0x9000);	
+        while ( mac_marvell_read(PORT_GLOBAL, 0x0B) & 0x8000 ) usleep(10000);
+
+	printf("%s: flushed!\n",__FUNCTION__);
+	return 0;
+}
+
+static int marvell_add_ATU_entry (uint8 port, unsigned char *mac) {
+
+	mac_marvell_write(PORT_GLOBAL, 0x0C, (1<<(port+4)|0xF));
+
+	mac_marvell_write(PORT_GLOBAL, 0x0D, (mac[0]<<8)|mac[1]);
+	mac_marvell_write(PORT_GLOBAL, 0x0E, (mac[2]<<8)|mac[3]);
+	mac_marvell_write(PORT_GLOBAL, 0x0F, (mac[4]<<8)|mac[5]);
+
+        mac_marvell_write(PORT_GLOBAL, 0x0B, 0xB000);
+        while ( mac_marvell_read(PORT_GLOBAL, 0x0B) & 0x8000 ) usleep(10000);
+
+        printf("%s: %02X:%02X:%02X:%02X:%02X:%02X port %d added!\n",__FUNCTION__,  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5], port);
+        return 0;
+}
+
+static int marvell_del_ATU_entry (unsigned char *mac) {
+        
+
+	mac_marvell_write(PORT_GLOBAL, 0x0C, 0x0000);
+
+        mac_marvell_write(PORT_GLOBAL, 0x0D, (mac[0]<<8)|mac[1]);
+        mac_marvell_write(PORT_GLOBAL, 0x0E, (mac[2]<<8)|mac[3]);
+        mac_marvell_write(PORT_GLOBAL, 0x0F, (mac[4]<<8)|mac[5]);
+
+        mac_marvell_write(PORT_GLOBAL, 0x0B, 0xB000);
+        while ( mac_marvell_read(PORT_GLOBAL, 0x0B) & 0x8000 ) usleep(10000);
+
+	printf("%s: %02X:%02X:%02X:%02X:%02X:%02X\n",__FUNCTION__,  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+	return 0;
+}
+
+int main(int argc, char **argv){
+    int retCode;
+    
+    if (argc<=1) {
+        print_sintax(argv[0]);
+        exit(0);
+    }
+
+    if (strcmp(argv[1],"help")==0) {
+        print_sintax(argv[0]);
+        exit(0);
+    }
+    
+    mv_fd = open(DEVICE_NAME, O_RDWR);
+
+    if (strcmp(argv[1],"dump")==0) {
+        retCode=marvell_dump_ATU();
+    } else if (strcmp(argv[1],"flush")==0) {
+        retCode=marvell_flush_ATU();
+    } else if (strcmp(argv[1],"add")==0) {
+        int port; unsigned char mac[6];
+
+        if (argc!=4) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+        if (sscanf(argv[2], "%d", &port)!=1) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+        if (sscanf(argv[3], "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx", &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5])!=6) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+
+        retCode=marvell_add_ATU_entry((uint8)port, mac);
+    } else if (strcmp(argv[1],"del")==0) {
+        unsigned char mac[6];
+
+        if (argc!=3) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+        if (sscanf(argv[2], "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx", &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5])!=6) {
+            print_sintax(argv[0]);
+            close(mv_fd); exit(1);
+        }
+
+        retCode=marvell_del_ATU_entry(mac);
+    } else {
+        print_sintax(argv[0]);
+        close(mv_fd);
+        exit(1);
+    }
+    
+    close(mv_fd);
+    exit(retCode);
+}
diff -rupN linux-denx-3.18.25-ori/marvell88e6060/main.h linux-denx-3.18.25-mod/marvell88e6060/main.h
--- linux-denx-3.18.25-ori/marvell88e6060/main.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-denx-3.18.25-mod/marvell88e6060/main.h	2017-11-08 14:07:33.645696855 +0000
@@ -0,0 +1,25 @@
+
+#ifndef _main_h_
+#define _main_h_
+
+typedef unsigned char  		uint8;
+typedef unsigned short 		uint16;
+typedef unsigned int   		uint32;
+typedef unsigned long long  uint64;
+
+#define PORT_GLOBAL		0x0F
+
+#define READ_MV_REG_CMD 0x1
+#define WRITE_MV_REG_CMD 0x2
+           
+#define DEVICE_NAME "/dev/mv88e6060" 
+     
+#define STRING_LEN 32
+          
+struct mv_hw_stat {
+	char string[STRING_LEN];
+	int sizeof_stat;
+	int reg;
+};
+           
+#endif //
diff -rupN linux-denx-3.18.25-ori/marvell88e6060/Makefile.ATU linux-denx-3.18.25-mod/marvell88e6060/Makefile.ATU
--- linux-denx-3.18.25-ori/marvell88e6060/Makefile.ATU	1970-01-01 01:00:00.000000000 +0100
+++ linux-denx-3.18.25-mod/marvell88e6060/Makefile.ATU	2017-11-08 14:07:33.645696855 +0000
@@ -0,0 +1,41 @@
+# Makefile for a multifile kernel module
+#CC=/opt/broadcom/bin/arm-linux-gcc
+#CC=/opt/eldk/usr/bin/ppc_85xxDP-gcc
+#CC=/usr/local/powerpc-linux-3.4.2/bin/powerpc-linux-gcc-3.4.2
+#CC=/opt/fsl/1.2/sysroots/i686-fslsdk-linux/usr/bin/ppce500mc-fsl-linux/powerpc-fsl-linux-gcc
+CC=/opt/freescale/usr/local/gcc-4.0.2-glibc-2.3.6-nptl-2/powerpc-e300c3-linux/bin/powerpc-e300c3-linux-gcc
+#CC=gcc
+#LD=arm-linux-ld
+#LD=arm-linux-ld
+#LD=ld
+#CFLAGS=-shared -Wl,-soname
+#CFLAGS=--save-temps
+CFLAGS= -I../inux-denx-3.18.25-tg16g/linux-inc -Wall
+#CFLAGS= -DPTIN_X16
+#LDFLAGS=-static
+LDFLAGS=
+RM=rm -f
+#CROSSHOME=/usr/local/powerpc-linux-ptin   
+TARGET=./marvell88e6060-ATU
+
+VERSAO=1.0.0
+#INSTALL_DIR=/exports/ptinroot/lib
+
+OBJ = mainATU.o 
+    
+all:	Makefile.ATU $(OBJ)
+	       	$(CC) $(CFLAGS) $(LDFLAGS) -o $(TARGET) $(OBJ) -lc
+   
+
+clean:	
+		rm -f $(OBJ)  $(TARGET)
+								 
+vpath %.c	  # Search path for *.c files
+
+#
+# Rule for C compilation
+#
+obj/%.o : %.c
+	$(RM) $@
+	@echo Building $@
+	$(CC) $(CFLAGS) -Wall -Werror -c -o $@ $<
diff -rupN linux-denx-3.18.25-ori/marvell88e6060/README.txt linux-denx-3.18.25-mod/marvell88e6060/README.txt
--- linux-denx-3.18.25-ori/marvell88e6060/README.txt	1970-01-01 01:00:00.000000000 +0100
+++ linux-denx-3.18.25-mod/marvell88e6060/README.txt	2017-11-08 14:08:12.799743332 +0000
@@ -0,0 +1,9 @@
+
+#No arranque da carta
+
+MV_Major=`cat /proc/devices |grep mv88e6060|awk '{print $1}'`
+mknod /dev/mv88e6060 c $MV_Major 0
+ftpget -u root -p lampada 192.168.200.101 marvell88e6060-ATU marvell88e6060-ATU
+chmod +x marvell88e6060-ATU
+
+
diff -rupN linux-denx-3.18.25-ori/tg16g.dts linux-denx-3.18.25-mod/tg16g.dts
--- linux-denx-3.18.25-ori/tg16g.dts	2017-07-12 14:04:35.519624000 +0100
+++ linux-denx-3.18.25-mod/tg16g.dts	2017-11-08 14:01:38.468340001 +0000
@@ -16,7 +16,6 @@
 
 / {
         model = "TOLT8G";
-//      compatible = "MPC834xMDS";
         #address-cells = <1>;
         #size-cells = <1>;
 
@@ -183,6 +182,17 @@
                         };
                 };
 
+		mdio0: mdio@24520 {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			compatible = "fsl,gianfar-mdio";
+			reg = <0x24520 0x20>;
+
+			phy0: ethernet-phy@10 {
+				compatible = "ptin,mv88e6060";
+				reg = <0x0>;
+			};
+		};
 
                 enet0: ethernet@24000 {
                         #address-cells = <1>;
@@ -196,13 +206,13 @@
                         local-mac-address = [ 00 00 00 00 00 00 ];
                         interrupts = <0x20 8 0x21 8 0x22 8>;
                         interrupt-parent = <&ipic>;
-//                      phy-handle = <&phy0>;
+                      //phy-handle = <&phy0>;
+                      //tbi-handle = <&tbi0>;
                         fixed-link = <1 1 100 0 0>;
                         linux,network-index = <0>;
 						fsl,magic-packet;
                         phy-connection-type = "mii";
-
-                };
+		};
 
 //              ethernet@25000 {
 //                      #address-cells = <1>;
