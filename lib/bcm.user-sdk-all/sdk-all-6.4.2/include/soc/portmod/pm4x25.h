/*
 *         
 * $Id:$
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *         
 *     
 * DO NOT EDIT THIS FILE!
 *
 */

#ifndef _PM4X25_H__H_
#define _PM4X25_H__H_

#include <phymod/phymod.h>
#include <phymod/phymod_diagnostics.h>
#include <soc/portmod/portmod_defs.h>
/*Get whether the inerface type is supported by PM */
int pm4x25_pm_interface_type_is_supported(int unit, soc_port_if_t interface, int* is_supported);

/*Add new pm.*/
int pm4x25_pm_init(int unit, const portmod_pm_create_info_internal_t* pm_add_info, int wb_buffer_index, pm_info_t pm_info);

/*Release PM resources*/
int pm4x25_pm_destroy(int unit, pm_info_t pm_info);

/*Add new port*/
int pm4x25_port_attach(int unit, int port, pm_info_t pm_info, const portmod_port_add_info_t* add_info);

/*Set PM in bypass mode. should be called in the aggregator code.*/
int pm4x25_pm_bypass_set(int unit, pm_info_t pm_info, int enable);

/*Port remove in PM level*/
int pm4x25_port_detach(int unit, int port, pm_info_t pm_info);

/*Port enable*/
int pm4x25_port_enable_set(int unit, int port, pm_info_t pm_info, int flags, int enable);
int pm4x25_port_enable_get(int unit, int port, pm_info_t pm_info, int flags, int* enable);

/*set/get the interface, speed and encapsulation for the specified port.
            For the First port within core this function initialize the PM, MAC and PHY before configure the port.*/
int pm4x25_port_interface_config_set(int unit, int port, pm_info_t pm_info, const portmod_port_interface_config_t* config);
int pm4x25_port_interface_config_get(int unit, int port, pm_info_t pm_info, portmod_port_interface_config_t* config);

/*Port speed set\get*/
int pm4x25_port_loopback_set(int unit, int port, pm_info_t pm_info, portmod_loopback_mode_t loopback_type, int enable);
int pm4x25_port_loopback_get(int unit, int port, pm_info_t pm_info, portmod_loopback_mode_t loopback_type, int* enable);

/*get port auto negotiation local ability*/
int pm4x25_port_ability_local_get(int unit, int port, pm_info_t pm_info, const portmod_port_ability_t* ability);

/*Set\Get autoneg*/
int pm4x25_port_autoneg_set(int unit, int port, pm_info_t pm_info, const phymod_autoneg_control_t* an);
int pm4x25_port_autoneg_get(int unit, int port, pm_info_t pm_info, phymod_autoneg_control_t* an);

/*get link status*/
int pm4x25_port_link_get(int unit, int port, pm_info_t pm_info, int* link);

/*PRBS configuration set/get*/
int pm4x25_port_prbs_config_set(int unit, int port, pm_info_t pm_info, int mode, int flags, const phymod_prbs_t* config);
int pm4x25_port_prbs_config_get(int unit, int port, pm_info_t pm_info, int mode, int flags, phymod_prbs_t* config);

/*PRBS enable set/get*/
int pm4x25_port_prbs_enable_set(int unit, int port, pm_info_t pm_info, int mode, int flags, int enable);
int pm4x25_port_prbs_enable_get(int unit, int port, pm_info_t pm_info, int mode, int flags, int* enable);

/*PRBS status get*/
int pm4x25_port_prbs_status_get(int unit, int port, pm_info_t pm_info, int mode, int flags, phymod_prbs_status_t* status);

/*Set port PHYs' firmware mode*/
int pm4x25_port_firmware_mode_set(int unit, int port, pm_info_t pm_info, phymod_firmware_mode_t fw_mode);
int pm4x25_port_firmware_mode_get(int unit, int port, pm_info_t pm_info, phymod_firmware_mode_t* fw_mode);

/*Filter packets smaller than the specified threshold*/
int pm4x25_port_runt_threshold_set(int unit, int port, pm_info_t pm_info, int value);
int pm4x25_port_runt_threshold_get(int unit, int port, pm_info_t pm_info, int* value);

/*Filter packets bigger than the specified value*/
int pm4x25_port_max_packet_size_set(int unit, int port, pm_info_t pm_info, int value);
int pm4x25_port_max_packet_size_get(int unit, int port, pm_info_t pm_info, int* value);

/*TX pad packets to the specified size. values smaller than 17 means pad is disabled.*/
int pm4x25_port_pad_size_set(int unit, int port, pm_info_t pm_info, int value);
int pm4x25_port_pad_size_get(int unit, int port, pm_info_t pm_info, int* value);

/*local fault steatus get*/
int pm4x25_port_local_fault_status_get(int unit, int port, pm_info_t pm_info, int* value);

/*remote fault status get*/
int pm4x25_port_remote_fault_status_get(int unit, int port, pm_info_t pm_info, int* value);

/*set/get Pause FC configuration*/
int pm4x25_port_pause_control_set(int unit, int port, pm_info_t pm_info, const portmod_pause_control_t* control);
int pm4x25_port_pause_control_get(int unit, int port, pm_info_t pm_info, portmod_pause_control_t* control);

/*set/get PFC FC configuration*/
int pm4x25_port_pfc_control_set(int unit, int port, pm_info_t pm_info, const portmod_pfc_control_t* control);
int pm4x25_port_pfc_control_get(int unit, int port, pm_info_t pm_info, portmod_pfc_control_t* control);

/*set/get LLFC FC configuration*/
int pm4x25_port_llfc_control_set(int unit, int port, pm_info_t pm_info, const portmod_llfc_control_t* control);
int pm4x25_port_llfc_control_get(int unit, int port, pm_info_t pm_info, portmod_llfc_control_t* control);

/*get port cores' phymod access*/
int pm4x25_port_core_access_get(int unit, int port, pm_info_t pm_info, int phyn, int max_cores, phymod_core_access_t* core_access_arr, int* nof_cores);

/*Get lane phymod access structure. can be used for per lane operations*/
int pm4x25_port_phy_lane_access_get(int unit, int port, pm_info_t pm_info, const portmod_access_get_params_t* params, int max_phys, phymod_phy_access_t* access, int* nof_phys);

#endif /*_PM4X25_H_*/
