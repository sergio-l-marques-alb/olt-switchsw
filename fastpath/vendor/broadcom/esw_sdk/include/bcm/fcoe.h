/*
 * $Id: fcoe.h 1.4.14.1 Broadcom SDK $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_FCOE_H__
#define __BCM_FCOE_H__

#include <bcm/types.h>

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize FCOE module */
extern int bcm_fcoe_init(
    int unit);

/* De-initialize FCOE module */
extern int bcm_fcoe_cleanup(
    int unit);

/* enable/disable FCOE without clearing any FCOE table */
extern int bcm_fcoe_enable_set(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef uint32 bcm_fcoe_nport_id_t;

typedef uint32 bcm_fcoe_fcmap_t;

#define BCM_FCOE_HOST_ROUTE             0x00000001 /* Host FCOE route */
#define BCM_FCOE_SOURCE_ROUTE           0x00000002 /* Source FCOE route */
#define BCM_FCOE_DOMAIN_ROUTE           0x00000004 /* Domain FCOE route */
#define BCM_FCOE_DST_DISCARD            0x00000008 /* Destination match discard */
#define BCM_FCOE_SRC_DISCARD            0x00000010 /* Destination match discard */
#define BCM_FCOE_MULTIPATH              0x00000020 /* Specify ECMP treatment */
#define BCM_FCOE_RPE                    0x00000040 /* Pick up new priority from
                                                      Entry */
#define BCM_FCOE_LOCAL_ADDRESS          0x00000080 /* Address belong to switch -
                                                      for FCOE_HOST_ROUTE */
#define BCM_FCOE_NO_HOP_COUNT_CHANGE    0x00000100 /* Don't decrement VFP Hop
                                                      Count */
#define BCM_FCOE_COPY_TO_CPU            0x00000200 /* Send a Copy to CPU */
#define BCM_FCOE_DEFIP_ENTRY_TYPE_FCOE  0x00000400 /* FCOE Entry in DEFIP table */

/* FCOE route info */
typedef struct bcm_fcoe_route_s {
    uint32 flags;                       /* BCM_FCOE_* flags */
    bcm_vrf_t vrf;                      /* Virtual router instance */
    bcm_fcoe_nport_id_t nport_id;       /* Destination/Source FC Nport ID */
    bcm_fcoe_nport_id_t nport_id_mask;  /* Mask used for Domain/prefix routes */
    bcm_cos_t pri;                      /* New priority in packet */
    bcm_if_t intf;                      /* L3 intf associated with this address */
    bcm_mac_t nexthop_mac;              /* Next-hop mac address */
    bcm_gport_t port;                   /* Port */
    int lookup_class;                   /* Classification lookup class ID */
    bcm_if_t encap_id;                  /* encapsulation index */
} bcm_fcoe_route_t;

/* Initialize bcm_fcoe_route_t */
extern void bcm_fcoe_route_t_init(
    bcm_fcoe_route_t *route);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add an entry into the FCOE routing table */
extern int bcm_fcoe_route_add(
    int unit, 
    bcm_fcoe_route_t *route);

/* Delete an nport_id entry from the FCOE routing table */
extern int bcm_fcoe_route_delete(
    int unit, 
    bcm_fcoe_route_t *route);

/* Delete FCOE entries based on Masked Domain prefix (network) */
extern int bcm_fcoe_route_delete_by_prefix(
    int unit, 
    bcm_fcoe_route_t *route);

/* Delete FCOE entries that do/don't match a specified L3 interface */
extern int bcm_fcoe_route_delete_by_interface(
    int unit, 
    bcm_fcoe_route_t *route);

/* Deletes all FCOE routing table entries */
extern int bcm_fcoe_route_delete_all(
    int unit, 
    bcm_fcoe_route_t *route);

/* Look up an FCOE routing table entry based on nport id */
extern int bcm_fcoe_route_find(
    int unit, 
    bcm_fcoe_route_t *route);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_FCOE_VSAN_REPLACE_ID        0x00000001 /* Replace the VSAN ID */
#define BCM_FCOE_VSAN_NORMALIZED_CHECK  0x00000002 /* VSAN normalization check */
#define BCM_FCOE_VSAN_FCOE_ROUTE_ENABLE 0x00000004 /* Enable routing on VSAN */

/* FCOE VSAN object */
typedef struct bcm_fcoe_vsan_s {
    uint32 flags;           /* BCM_FCOE_VSAN_* flags */
    uint32 vsan;            /* VSAN identifier */
    bcm_if_t l3_intf_id;    /* L3 interface ID */
    bcm_fcoe_fcmap_t fcmap; /* Associated FC Map */
} bcm_fcoe_vsan_t;

/* VSAN controls */
typedef enum bcm_fcoe_vsan_control_e {
    bcmFcoeVsanNormalizedZoneCheck, /* FCoE Zone checking is normalized */
    bcmFcoeVsanRouteEnable          /* FCoE Routing enable */
} bcm_fcoe_vsan_control_t;

/* Initialize bcm_fcoe_vsan_t */
extern void bcm_fcoe_vsan_t_init(
    bcm_fcoe_vsan_t *vsan);

#ifndef BCM_HIDE_DISPATCHABLE

/* Allocate and configure a VSAN */
extern int bcm_fcoe_vsan_create(
    int unit, 
    bcm_fcoe_vsan_t *vsan);

/* Destroy a VSAN */
extern int bcm_fcoe_vsan_destroy(
    int unit, 
    bcm_fcoe_vsan_t *vsan);

/* Destroy all VSANs */
extern int bcm_fcoe_vsan_destroy_all(
    int unit);

/* Get VSAN controls */
extern int bcm_fcoe_control_vsan_get(
    int unit, 
    uint32 vsan_id, 
    bcm_fcoe_vsan_control_t type, 
    int *arg);

/* Set VSAN controls */
extern int bcm_fcoe_control_vsan_set(
    int unit, 
    uint32 vsan_id, 
    bcm_fcoe_vsan_control_t type, 
    int arg);

/* Get VSAN properties associated with a VSAN ID */
extern int bcm_fcoe_vsan_get(
    int unit, 
    uint32 vsan_id, 
    bcm_fcoe_vsan_t *vsan);

/* Update VSAN properties associated with a VSAN ID */
extern int bcm_fcoe_vsan_set(
    int unit, 
    uint32 vsan_id, 
    bcm_fcoe_vsan_t *vsan);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Actions on packets matching zone check */
typedef enum bcm_fcoe_zone_action_e {
    bcmFcoeZoneActionAllow,         /* Allow packets matching the zone check */
    bcmFcoeZoneActionDeny,          /* Deny packets matching the zone check */
    bcmFcoeZoneActionCopyToCpu,     /* Copy-to-CPU packets matching the zone
                                       check */
    bcmBcmFcoeZoneActionRedirect    /* redirect port to given port */
} bcm_fcoe_zone_action_t;

/* Device-independent Zone address structure */
typedef struct bcm_fcoe_zone_entry_s {
    uint32 flags;                   /* BCM_FCOE_ZONE_* flags - for Future */
    bcm_fcoe_vsan_t vsan;           /* VSAN identifier */
    bcm_fcoe_nport_id_t d_id;       /* Destination FC Nport ID */
    bcm_fcoe_nport_id_t s_id;       /* Source FC Nport ID */
    int class_id;                   /* Class id to Field Processor */
    bcm_fcoe_zone_action_t action;  /* Action to take for Zone match packets */
    bcm_gport_t dest_port;          /* destination port relevant for redirect
                                       action */
} bcm_fcoe_zone_entry_t;

/* Initialize bcm_fcoe_zone_t */
extern void bcm_fcoe_zone_entry_t_init(
    bcm_fcoe_zone_entry_t *zone);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add Zone check entry */
extern int bcm_fcoe_zone_add(
    int unit, 
    bcm_fcoe_zone_entry_t *zone);

/* Delete all zone check entries matching VSAN ID */
extern int bcm_fcoe_zone_delete_by_vsan(
    int unit, 
    bcm_fcoe_zone_entry_t *zone);

/* Delete Zone check entry */
extern int bcm_fcoe_zone_delete(
    int unit, 
    bcm_fcoe_zone_entry_t *zone);

/* Delete all zone check entries with matching Source ID */
extern int bcm_fcoe_zone_delete_by_sid(
    int unit, 
    bcm_fcoe_zone_entry_t *zone);

/* Delete all zone check entries with matching Destination ID */
extern int bcm_fcoe_zone_delete_by_did(
    int unit, 
    bcm_fcoe_zone_entry_t *zone);

/* Delete all zone check entries */
extern int bcm_fcoe_zone_delete_all(
    int unit);

/* Retrieve Zone info */
extern int bcm_fcoe_zone_get(
    int unit, 
    bcm_fcoe_zone_entry_t *zone);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_FCOE_H__ */
