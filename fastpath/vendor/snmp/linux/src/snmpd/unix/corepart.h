/*
 *
 * Copyright (C) 1992-2006 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -c core iso -snmpFrameworkMIB -apo -row_status -userpart -separate_type_file 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_COREPART_H
#define SR_COREPART_H


#ifdef __cplusplus
extern "C" {
#endif

/* only define name strings if we are not compiling LIGHT */
#ifndef LIGHT
#define STdeclare(name, value) static const char name [] = value;
#else	/* LIGHT */
#define STdeclare(name, value)
#endif	/* LIGHT */

/* define the OID components of the OID call table */

#if defined(N_iso)
#ifdef SNMPPART_DECL
const SR_UINT32 IDiso[] = { 1 };
#else
extern const SR_UINT32 IDiso[];
#endif	/* SNMPPART_DECL */
#define LNiso 1
#endif	/* defined(N_iso) */


#if defined(N_org)
#ifdef SNMPPART_DECL
const SR_UINT32 IDorg[] = { 1, 3 };
#else
extern const SR_UINT32 IDorg[];
#endif	/* SNMPPART_DECL */
#define LNorg 2
#endif	/* defined(N_org) */


#if defined(N_dod)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdod[] = { 1, 3, 6 };
#else
extern const SR_UINT32 IDdod[];
#endif	/* SNMPPART_DECL */
#define LNdod 3
#endif	/* defined(N_dod) */


#if defined(N_internet)
#ifdef SNMPPART_DECL
const SR_UINT32 IDinternet[] = { 1, 3, 6, 1 };
#else
extern const SR_UINT32 IDinternet[];
#endif	/* SNMPPART_DECL */
#define LNinternet 4
#endif	/* defined(N_internet) */


#if defined(N_directory)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdirectory[] = { 1, 3, 6, 1, 1 };
#else
extern const SR_UINT32 IDdirectory[];
#endif	/* SNMPPART_DECL */
#define LNdirectory 5
#endif	/* defined(N_directory) */


#if defined(N_mgmt)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmgmt[] = { 1, 3, 6, 1, 2 };
#else
extern const SR_UINT32 IDmgmt[];
#endif	/* SNMPPART_DECL */
#define LNmgmt 5
#endif	/* defined(N_mgmt) */


#if defined(N_mib_2)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmib_2[] = { 1, 3, 6, 1, 2, 1 };
#else
extern const SR_UINT32 IDmib_2[];
#endif	/* SNMPPART_DECL */
#define LNmib_2 6
#endif	/* defined(N_mib_2) */


#if defined(N_system)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsystem[] = { 1, 3, 6, 1, 2, 1, 1 };
#else
extern const SR_UINT32 IDsystem[];
#endif	/* SNMPPART_DECL */
#define LNsystem 7
#endif	/* defined(N_system) */


#if defined(I_sysDescr)
#ifdef SNMPPART_DECL
STdeclare(STsysDescr, "sysDescr")
const SR_UINT32 IDsysDescr[] = { 1, 3, 6, 1, 2, 1, 1, 1 };
#else
extern const SR_UINT32 IDsysDescr[];
#endif	/* SNMPPART_DECL */
#define LNsysDescr 8
#endif	/* defined(I_sysDescr) */


#if defined(I_sysObjectID)
#ifdef SNMPPART_DECL
STdeclare(STsysObjectID, "sysObjectID")
const SR_UINT32 IDsysObjectID[] = { 1, 3, 6, 1, 2, 1, 1, 2 };
#else
extern const SR_UINT32 IDsysObjectID[];
#endif	/* SNMPPART_DECL */
#define LNsysObjectID 8
#endif	/* defined(I_sysObjectID) */


#if defined(I_sysUpTime)
#ifdef SNMPPART_DECL
STdeclare(STsysUpTime, "sysUpTime")
const SR_UINT32 IDsysUpTime[] = { 1, 3, 6, 1, 2, 1, 1, 3 };
#else
extern const SR_UINT32 IDsysUpTime[];
#endif	/* SNMPPART_DECL */
#define LNsysUpTime 8
#endif	/* defined(I_sysUpTime) */


#if defined(I_sysContact)
#ifdef SNMPPART_DECL
STdeclare(STsysContact, "sysContact")
const SR_UINT32 IDsysContact[] = { 1, 3, 6, 1, 2, 1, 1, 4 };
#else
extern const SR_UINT32 IDsysContact[];
#endif	/* SNMPPART_DECL */
#define LNsysContact 8
#endif	/* defined(I_sysContact) */


#if defined(I_sysName)
#ifdef SNMPPART_DECL
STdeclare(STsysName, "sysName")
const SR_UINT32 IDsysName[] = { 1, 3, 6, 1, 2, 1, 1, 5 };
#else
extern const SR_UINT32 IDsysName[];
#endif	/* SNMPPART_DECL */
#define LNsysName 8
#endif	/* defined(I_sysName) */


#if defined(I_sysLocation)
#ifdef SNMPPART_DECL
STdeclare(STsysLocation, "sysLocation")
const SR_UINT32 IDsysLocation[] = { 1, 3, 6, 1, 2, 1, 1, 6 };
#else
extern const SR_UINT32 IDsysLocation[];
#endif	/* SNMPPART_DECL */
#define LNsysLocation 8
#endif	/* defined(I_sysLocation) */


#if defined(I_sysServices)
#ifdef SNMPPART_DECL
STdeclare(STsysServices, "sysServices")
const SR_UINT32 IDsysServices[] = { 1, 3, 6, 1, 2, 1, 1, 7 };
#else
extern const SR_UINT32 IDsysServices[];
#endif	/* SNMPPART_DECL */
#define LNsysServices 8
#endif	/* defined(I_sysServices) */


#if defined(I_sysORLastChange)
#ifdef SNMPPART_DECL
STdeclare(STsysORLastChange, "sysORLastChange")
const SR_UINT32 IDsysORLastChange[] = { 1, 3, 6, 1, 2, 1, 1, 8 };
#else
extern const SR_UINT32 IDsysORLastChange[];
#endif	/* SNMPPART_DECL */
#define LNsysORLastChange 8
#endif	/* defined(I_sysORLastChange) */







#if defined(I_sysORID)
#ifdef SNMPPART_DECL
STdeclare(STsysORID, "sysORID")
const SR_UINT32 IDsysORID[] = { 1, 3, 6, 1, 2, 1, 1, 9, 1, 2 };
#else
extern const SR_UINT32 IDsysORID[];
#endif	/* SNMPPART_DECL */
#define LNsysORID 10
#endif	/* defined(I_sysORID) */


#if defined(I_sysORDescr)
#ifdef SNMPPART_DECL
STdeclare(STsysORDescr, "sysORDescr")
const SR_UINT32 IDsysORDescr[] = { 1, 3, 6, 1, 2, 1, 1, 9, 1, 3 };
#else
extern const SR_UINT32 IDsysORDescr[];
#endif	/* SNMPPART_DECL */
#define LNsysORDescr 10
#endif	/* defined(I_sysORDescr) */


#if defined(I_sysORUpTime)
#ifdef SNMPPART_DECL
STdeclare(STsysORUpTime, "sysORUpTime")
const SR_UINT32 IDsysORUpTime[] = { 1, 3, 6, 1, 2, 1, 1, 9, 1, 4 };
#else
extern const SR_UINT32 IDsysORUpTime[];
#endif	/* SNMPPART_DECL */
#define LNsysORUpTime 10
#endif	/* defined(I_sysORUpTime) */

#if 0 /* LVL7 */
#if defined(N_interfaces)
#ifdef SNMPPART_DECL
const SR_UINT32 IDinterfaces[] = { 1, 3, 6, 1, 2, 1, 2 };
#else
extern const SR_UINT32 IDinterfaces[];
#endif	/* SNMPPART_DECL */
#define LNinterfaces 7
#endif	/* defined(N_interfaces) */


#if defined(I_ifNumber)
#ifdef SNMPPART_DECL
STdeclare(STifNumber, "ifNumber")
const SR_UINT32 IDifNumber[] = { 1, 3, 6, 1, 2, 1, 2, 1 };
#else
extern const SR_UINT32 IDifNumber[];
#endif	/* SNMPPART_DECL */
#define LNifNumber 8
#endif	/* defined(I_ifNumber) */






#if defined(I_ifIndex)
#ifdef SNMPPART_DECL
STdeclare(STifIndex, "ifIndex")
const SR_UINT32 IDifIndex[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 1 };
#else
extern const SR_UINT32 IDifIndex[];
#endif	/* SNMPPART_DECL */
#define LNifIndex 10
#endif	/* defined(I_ifIndex) */


#if defined(I_ifDescr)
#ifdef SNMPPART_DECL
STdeclare(STifDescr, "ifDescr")
const SR_UINT32 IDifDescr[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 2 };
#else
extern const SR_UINT32 IDifDescr[];
#endif	/* SNMPPART_DECL */
#define LNifDescr 10
#endif	/* defined(I_ifDescr) */


#if defined(I_ifType)
#ifdef SNMPPART_DECL
STdeclare(STifType, "ifType")
const SR_UINT32 IDifType[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 3 };
#else
extern const SR_UINT32 IDifType[];
#endif	/* SNMPPART_DECL */
#define LNifType 10
#endif	/* defined(I_ifType) */


#if defined(I_ifMtu)
#ifdef SNMPPART_DECL
STdeclare(STifMtu, "ifMtu")
const SR_UINT32 IDifMtu[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 4 };
#else
extern const SR_UINT32 IDifMtu[];
#endif	/* SNMPPART_DECL */
#define LNifMtu 10
#endif	/* defined(I_ifMtu) */


#if defined(I_ifSpeed)
#ifdef SNMPPART_DECL
STdeclare(STifSpeed, "ifSpeed")
const SR_UINT32 IDifSpeed[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 5 };
#else
extern const SR_UINT32 IDifSpeed[];
#endif	/* SNMPPART_DECL */
#define LNifSpeed 10
#endif	/* defined(I_ifSpeed) */


#if defined(I_ifPhysAddress)
#ifdef SNMPPART_DECL
STdeclare(STifPhysAddress, "ifPhysAddress")
const SR_UINT32 IDifPhysAddress[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 6 };
#else
extern const SR_UINT32 IDifPhysAddress[];
#endif	/* SNMPPART_DECL */
#define LNifPhysAddress 10
#endif	/* defined(I_ifPhysAddress) */


#if defined(I_ifAdminStatus)
#ifdef SNMPPART_DECL
STdeclare(STifAdminStatus, "ifAdminStatus")
const SR_UINT32 IDifAdminStatus[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 7 };
#else
extern const SR_UINT32 IDifAdminStatus[];
#endif	/* SNMPPART_DECL */
#define LNifAdminStatus 10
#endif	/* defined(I_ifAdminStatus) */


#if defined(I_ifOperStatus)
#ifdef SNMPPART_DECL
STdeclare(STifOperStatus, "ifOperStatus")
const SR_UINT32 IDifOperStatus[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 8 };
#else
extern const SR_UINT32 IDifOperStatus[];
#endif	/* SNMPPART_DECL */
#define LNifOperStatus 10
#endif	/* defined(I_ifOperStatus) */


#if defined(I_ifLastChange)
#ifdef SNMPPART_DECL
STdeclare(STifLastChange, "ifLastChange")
const SR_UINT32 IDifLastChange[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 9 };
#else
extern const SR_UINT32 IDifLastChange[];
#endif	/* SNMPPART_DECL */
#define LNifLastChange 10
#endif	/* defined(I_ifLastChange) */


#if defined(I_ifInOctets)
#ifdef SNMPPART_DECL
STdeclare(STifInOctets, "ifInOctets")
const SR_UINT32 IDifInOctets[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 10 };
#else
extern const SR_UINT32 IDifInOctets[];
#endif	/* SNMPPART_DECL */
#define LNifInOctets 10
#endif	/* defined(I_ifInOctets) */


#if defined(I_ifInUcastPkts)
#ifdef SNMPPART_DECL
STdeclare(STifInUcastPkts, "ifInUcastPkts")
const SR_UINT32 IDifInUcastPkts[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 11 };
#else
extern const SR_UINT32 IDifInUcastPkts[];
#endif	/* SNMPPART_DECL */
#define LNifInUcastPkts 10
#endif	/* defined(I_ifInUcastPkts) */


#if defined(I_ifInNUcastPkts)
#ifdef SNMPPART_DECL
STdeclare(STifInNUcastPkts, "ifInNUcastPkts")
const SR_UINT32 IDifInNUcastPkts[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 12 };
#else
extern const SR_UINT32 IDifInNUcastPkts[];
#endif	/* SNMPPART_DECL */
#define LNifInNUcastPkts 10
#endif	/* defined(I_ifInNUcastPkts) */


#if defined(I_ifInDiscards)
#ifdef SNMPPART_DECL
STdeclare(STifInDiscards, "ifInDiscards")
const SR_UINT32 IDifInDiscards[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 13 };
#else
extern const SR_UINT32 IDifInDiscards[];
#endif	/* SNMPPART_DECL */
#define LNifInDiscards 10
#endif	/* defined(I_ifInDiscards) */


#if defined(I_ifInErrors)
#ifdef SNMPPART_DECL
STdeclare(STifInErrors, "ifInErrors")
const SR_UINT32 IDifInErrors[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 14 };
#else
extern const SR_UINT32 IDifInErrors[];
#endif	/* SNMPPART_DECL */
#define LNifInErrors 10
#endif	/* defined(I_ifInErrors) */


#if defined(I_ifInUnknownProtos)
#ifdef SNMPPART_DECL
STdeclare(STifInUnknownProtos, "ifInUnknownProtos")
const SR_UINT32 IDifInUnknownProtos[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 15 };
#else
extern const SR_UINT32 IDifInUnknownProtos[];
#endif	/* SNMPPART_DECL */
#define LNifInUnknownProtos 10
#endif	/* defined(I_ifInUnknownProtos) */


#if defined(I_ifOutOctets)
#ifdef SNMPPART_DECL
STdeclare(STifOutOctets, "ifOutOctets")
const SR_UINT32 IDifOutOctets[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 16 };
#else
extern const SR_UINT32 IDifOutOctets[];
#endif	/* SNMPPART_DECL */
#define LNifOutOctets 10
#endif	/* defined(I_ifOutOctets) */


#if defined(I_ifOutUcastPkts)
#ifdef SNMPPART_DECL
STdeclare(STifOutUcastPkts, "ifOutUcastPkts")
const SR_UINT32 IDifOutUcastPkts[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 17 };
#else
extern const SR_UINT32 IDifOutUcastPkts[];
#endif	/* SNMPPART_DECL */
#define LNifOutUcastPkts 10
#endif	/* defined(I_ifOutUcastPkts) */


#if defined(I_ifOutNUcastPkts)
#ifdef SNMPPART_DECL
STdeclare(STifOutNUcastPkts, "ifOutNUcastPkts")
const SR_UINT32 IDifOutNUcastPkts[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 18 };
#else
extern const SR_UINT32 IDifOutNUcastPkts[];
#endif	/* SNMPPART_DECL */
#define LNifOutNUcastPkts 10
#endif	/* defined(I_ifOutNUcastPkts) */


#if defined(I_ifOutDiscards)
#ifdef SNMPPART_DECL
STdeclare(STifOutDiscards, "ifOutDiscards")
const SR_UINT32 IDifOutDiscards[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 19 };
#else
extern const SR_UINT32 IDifOutDiscards[];
#endif	/* SNMPPART_DECL */
#define LNifOutDiscards 10
#endif	/* defined(I_ifOutDiscards) */


#if defined(I_ifOutErrors)
#ifdef SNMPPART_DECL
STdeclare(STifOutErrors, "ifOutErrors")
const SR_UINT32 IDifOutErrors[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 20 };
#else
extern const SR_UINT32 IDifOutErrors[];
#endif	/* SNMPPART_DECL */
#define LNifOutErrors 10
#endif	/* defined(I_ifOutErrors) */


#if defined(I_ifOutQLen)
#ifdef SNMPPART_DECL
STdeclare(STifOutQLen, "ifOutQLen")
const SR_UINT32 IDifOutQLen[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 21 };
#else
extern const SR_UINT32 IDifOutQLen[];
#endif	/* SNMPPART_DECL */
#define LNifOutQLen 10
#endif	/* defined(I_ifOutQLen) */


#if defined(I_ifSpecific)
#ifdef SNMPPART_DECL
STdeclare(STifSpecific, "ifSpecific")
const SR_UINT32 IDifSpecific[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 22 };
#else
extern const SR_UINT32 IDifSpecific[];
#endif	/* SNMPPART_DECL */
#define LNifSpecific 10
#endif	/* defined(I_ifSpecific) */
#endif /* LVL7 */

#if defined(N_at)
#ifdef SNMPPART_DECL
const SR_UINT32 IDat[] = { 1, 3, 6, 1, 2, 1, 3 };
#else
extern const SR_UINT32 IDat[];
#endif	/* SNMPPART_DECL */
#define LNat 7
#endif	/* defined(N_at) */






#if defined(I_atIfIndex)
#ifdef SNMPPART_DECL
STdeclare(STatIfIndex, "atIfIndex")
const SR_UINT32 IDatIfIndex[] = { 1, 3, 6, 1, 2, 1, 3, 1, 1, 1 };
#else
extern const SR_UINT32 IDatIfIndex[];
#endif	/* SNMPPART_DECL */
#define LNatIfIndex 10
#endif	/* defined(I_atIfIndex) */


#if defined(I_atPhysAddress)
#ifdef SNMPPART_DECL
STdeclare(STatPhysAddress, "atPhysAddress")
const SR_UINT32 IDatPhysAddress[] = { 1, 3, 6, 1, 2, 1, 3, 1, 1, 2 };
#else
extern const SR_UINT32 IDatPhysAddress[];
#endif	/* SNMPPART_DECL */
#define LNatPhysAddress 10
#endif	/* defined(I_atPhysAddress) */


#if defined(I_atNetAddress)
#ifdef SNMPPART_DECL
STdeclare(STatNetAddress, "atNetAddress")
const SR_UINT32 IDatNetAddress[] = { 1, 3, 6, 1, 2, 1, 3, 1, 1, 3 };
#else
extern const SR_UINT32 IDatNetAddress[];
#endif	/* SNMPPART_DECL */
#define LNatNetAddress 10
#endif	/* defined(I_atNetAddress) */


#if defined(N_ip)
#ifdef SNMPPART_DECL
const SR_UINT32 IDip[] = { 1, 3, 6, 1, 2, 1, 4 };
#else
extern const SR_UINT32 IDip[];
#endif	/* SNMPPART_DECL */
#define LNip 7
#endif	/* defined(N_ip) */


#if defined(I_ipForwarding)
#ifdef SNMPPART_DECL
STdeclare(STipForwarding, "ipForwarding")
const SR_UINT32 IDipForwarding[] = { 1, 3, 6, 1, 2, 1, 4, 1 };
#else
extern const SR_UINT32 IDipForwarding[];
#endif	/* SNMPPART_DECL */
#define LNipForwarding 8
#endif	/* defined(I_ipForwarding) */


#if defined(I_ipDefaultTTL)
#ifdef SNMPPART_DECL
STdeclare(STipDefaultTTL, "ipDefaultTTL")
const SR_UINT32 IDipDefaultTTL[] = { 1, 3, 6, 1, 2, 1, 4, 2 };
#else
extern const SR_UINT32 IDipDefaultTTL[];
#endif	/* SNMPPART_DECL */
#define LNipDefaultTTL 8
#endif	/* defined(I_ipDefaultTTL) */


#if defined(I_ipInReceives)
#ifdef SNMPPART_DECL
STdeclare(STipInReceives, "ipInReceives")
const SR_UINT32 IDipInReceives[] = { 1, 3, 6, 1, 2, 1, 4, 3 };
#else
extern const SR_UINT32 IDipInReceives[];
#endif	/* SNMPPART_DECL */
#define LNipInReceives 8
#endif	/* defined(I_ipInReceives) */


#if defined(I_ipInHdrErrors)
#ifdef SNMPPART_DECL
STdeclare(STipInHdrErrors, "ipInHdrErrors")
const SR_UINT32 IDipInHdrErrors[] = { 1, 3, 6, 1, 2, 1, 4, 4 };
#else
extern const SR_UINT32 IDipInHdrErrors[];
#endif	/* SNMPPART_DECL */
#define LNipInHdrErrors 8
#endif	/* defined(I_ipInHdrErrors) */


#if defined(I_ipInAddrErrors)
#ifdef SNMPPART_DECL
STdeclare(STipInAddrErrors, "ipInAddrErrors")
const SR_UINT32 IDipInAddrErrors[] = { 1, 3, 6, 1, 2, 1, 4, 5 };
#else
extern const SR_UINT32 IDipInAddrErrors[];
#endif	/* SNMPPART_DECL */
#define LNipInAddrErrors 8
#endif	/* defined(I_ipInAddrErrors) */


#if defined(I_ipForwDatagrams)
#ifdef SNMPPART_DECL
STdeclare(STipForwDatagrams, "ipForwDatagrams")
const SR_UINT32 IDipForwDatagrams[] = { 1, 3, 6, 1, 2, 1, 4, 6 };
#else
extern const SR_UINT32 IDipForwDatagrams[];
#endif	/* SNMPPART_DECL */
#define LNipForwDatagrams 8
#endif	/* defined(I_ipForwDatagrams) */


#if defined(I_ipInUnknownProtos)
#ifdef SNMPPART_DECL
STdeclare(STipInUnknownProtos, "ipInUnknownProtos")
const SR_UINT32 IDipInUnknownProtos[] = { 1, 3, 6, 1, 2, 1, 4, 7 };
#else
extern const SR_UINT32 IDipInUnknownProtos[];
#endif	/* SNMPPART_DECL */
#define LNipInUnknownProtos 8
#endif	/* defined(I_ipInUnknownProtos) */


#if defined(I_ipInDiscards)
#ifdef SNMPPART_DECL
STdeclare(STipInDiscards, "ipInDiscards")
const SR_UINT32 IDipInDiscards[] = { 1, 3, 6, 1, 2, 1, 4, 8 };
#else
extern const SR_UINT32 IDipInDiscards[];
#endif	/* SNMPPART_DECL */
#define LNipInDiscards 8
#endif	/* defined(I_ipInDiscards) */


#if defined(I_ipInDelivers)
#ifdef SNMPPART_DECL
STdeclare(STipInDelivers, "ipInDelivers")
const SR_UINT32 IDipInDelivers[] = { 1, 3, 6, 1, 2, 1, 4, 9 };
#else
extern const SR_UINT32 IDipInDelivers[];
#endif	/* SNMPPART_DECL */
#define LNipInDelivers 8
#endif	/* defined(I_ipInDelivers) */


#if defined(I_ipOutRequests)
#ifdef SNMPPART_DECL
STdeclare(STipOutRequests, "ipOutRequests")
const SR_UINT32 IDipOutRequests[] = { 1, 3, 6, 1, 2, 1, 4, 10 };
#else
extern const SR_UINT32 IDipOutRequests[];
#endif	/* SNMPPART_DECL */
#define LNipOutRequests 8
#endif	/* defined(I_ipOutRequests) */


#if defined(I_ipOutDiscards)
#ifdef SNMPPART_DECL
STdeclare(STipOutDiscards, "ipOutDiscards")
const SR_UINT32 IDipOutDiscards[] = { 1, 3, 6, 1, 2, 1, 4, 11 };
#else
extern const SR_UINT32 IDipOutDiscards[];
#endif	/* SNMPPART_DECL */
#define LNipOutDiscards 8
#endif	/* defined(I_ipOutDiscards) */


#if defined(I_ipOutNoRoutes)
#ifdef SNMPPART_DECL
STdeclare(STipOutNoRoutes, "ipOutNoRoutes")
const SR_UINT32 IDipOutNoRoutes[] = { 1, 3, 6, 1, 2, 1, 4, 12 };
#else
extern const SR_UINT32 IDipOutNoRoutes[];
#endif	/* SNMPPART_DECL */
#define LNipOutNoRoutes 8
#endif	/* defined(I_ipOutNoRoutes) */


#if defined(I_ipReasmTimeout)
#ifdef SNMPPART_DECL
STdeclare(STipReasmTimeout, "ipReasmTimeout")
const SR_UINT32 IDipReasmTimeout[] = { 1, 3, 6, 1, 2, 1, 4, 13 };
#else
extern const SR_UINT32 IDipReasmTimeout[];
#endif	/* SNMPPART_DECL */
#define LNipReasmTimeout 8
#endif	/* defined(I_ipReasmTimeout) */


#if defined(I_ipReasmReqds)
#ifdef SNMPPART_DECL
STdeclare(STipReasmReqds, "ipReasmReqds")
const SR_UINT32 IDipReasmReqds[] = { 1, 3, 6, 1, 2, 1, 4, 14 };
#else
extern const SR_UINT32 IDipReasmReqds[];
#endif	/* SNMPPART_DECL */
#define LNipReasmReqds 8
#endif	/* defined(I_ipReasmReqds) */


#if defined(I_ipReasmOKs)
#ifdef SNMPPART_DECL
STdeclare(STipReasmOKs, "ipReasmOKs")
const SR_UINT32 IDipReasmOKs[] = { 1, 3, 6, 1, 2, 1, 4, 15 };
#else
extern const SR_UINT32 IDipReasmOKs[];
#endif	/* SNMPPART_DECL */
#define LNipReasmOKs 8
#endif	/* defined(I_ipReasmOKs) */


#if defined(I_ipReasmFails)
#ifdef SNMPPART_DECL
STdeclare(STipReasmFails, "ipReasmFails")
const SR_UINT32 IDipReasmFails[] = { 1, 3, 6, 1, 2, 1, 4, 16 };
#else
extern const SR_UINT32 IDipReasmFails[];
#endif	/* SNMPPART_DECL */
#define LNipReasmFails 8
#endif	/* defined(I_ipReasmFails) */


#if defined(I_ipFragOKs)
#ifdef SNMPPART_DECL
STdeclare(STipFragOKs, "ipFragOKs")
const SR_UINT32 IDipFragOKs[] = { 1, 3, 6, 1, 2, 1, 4, 17 };
#else
extern const SR_UINT32 IDipFragOKs[];
#endif	/* SNMPPART_DECL */
#define LNipFragOKs 8
#endif	/* defined(I_ipFragOKs) */


#if defined(I_ipFragFails)
#ifdef SNMPPART_DECL
STdeclare(STipFragFails, "ipFragFails")
const SR_UINT32 IDipFragFails[] = { 1, 3, 6, 1, 2, 1, 4, 18 };
#else
extern const SR_UINT32 IDipFragFails[];
#endif	/* SNMPPART_DECL */
#define LNipFragFails 8
#endif	/* defined(I_ipFragFails) */


#if defined(I_ipFragCreates)
#ifdef SNMPPART_DECL
STdeclare(STipFragCreates, "ipFragCreates")
const SR_UINT32 IDipFragCreates[] = { 1, 3, 6, 1, 2, 1, 4, 19 };
#else
extern const SR_UINT32 IDipFragCreates[];
#endif	/* SNMPPART_DECL */
#define LNipFragCreates 8
#endif	/* defined(I_ipFragCreates) */






#if defined(I_ipAdEntAddr)
#ifdef SNMPPART_DECL
STdeclare(STipAdEntAddr, "ipAdEntAddr")
const SR_UINT32 IDipAdEntAddr[] = { 1, 3, 6, 1, 2, 1, 4, 20, 1, 1 };
#else
extern const SR_UINT32 IDipAdEntAddr[];
#endif	/* SNMPPART_DECL */
#define LNipAdEntAddr 10
#endif	/* defined(I_ipAdEntAddr) */


#if defined(I_ipAdEntIfIndex)
#ifdef SNMPPART_DECL
STdeclare(STipAdEntIfIndex, "ipAdEntIfIndex")
const SR_UINT32 IDipAdEntIfIndex[] = { 1, 3, 6, 1, 2, 1, 4, 20, 1, 2 };
#else
extern const SR_UINT32 IDipAdEntIfIndex[];
#endif	/* SNMPPART_DECL */
#define LNipAdEntIfIndex 10
#endif	/* defined(I_ipAdEntIfIndex) */


#if defined(I_ipAdEntNetMask)
#ifdef SNMPPART_DECL
STdeclare(STipAdEntNetMask, "ipAdEntNetMask")
const SR_UINT32 IDipAdEntNetMask[] = { 1, 3, 6, 1, 2, 1, 4, 20, 1, 3 };
#else
extern const SR_UINT32 IDipAdEntNetMask[];
#endif	/* SNMPPART_DECL */
#define LNipAdEntNetMask 10
#endif	/* defined(I_ipAdEntNetMask) */


#if defined(I_ipAdEntBcastAddr)
#ifdef SNMPPART_DECL
STdeclare(STipAdEntBcastAddr, "ipAdEntBcastAddr")
const SR_UINT32 IDipAdEntBcastAddr[] = { 1, 3, 6, 1, 2, 1, 4, 20, 1, 4 };
#else
extern const SR_UINT32 IDipAdEntBcastAddr[];
#endif	/* SNMPPART_DECL */
#define LNipAdEntBcastAddr 10
#endif	/* defined(I_ipAdEntBcastAddr) */


#if defined(I_ipAdEntReasmMaxSize)
#ifdef SNMPPART_DECL
STdeclare(STipAdEntReasmMaxSize, "ipAdEntReasmMaxSize")
const SR_UINT32 IDipAdEntReasmMaxSize[] = { 1, 3, 6, 1, 2, 1, 4, 20, 1, 5 };
#else
extern const SR_UINT32 IDipAdEntReasmMaxSize[];
#endif	/* SNMPPART_DECL */
#define LNipAdEntReasmMaxSize 10
#endif	/* defined(I_ipAdEntReasmMaxSize) */






#if defined(I_ipRouteDest)
#ifdef SNMPPART_DECL
STdeclare(STipRouteDest, "ipRouteDest")
const SR_UINT32 IDipRouteDest[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 1 };
#else
extern const SR_UINT32 IDipRouteDest[];
#endif	/* SNMPPART_DECL */
#define LNipRouteDest 10
#endif	/* defined(I_ipRouteDest) */


#if defined(I_ipRouteIfIndex)
#ifdef SNMPPART_DECL
STdeclare(STipRouteIfIndex, "ipRouteIfIndex")
const SR_UINT32 IDipRouteIfIndex[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 2 };
#else
extern const SR_UINT32 IDipRouteIfIndex[];
#endif	/* SNMPPART_DECL */
#define LNipRouteIfIndex 10
#endif	/* defined(I_ipRouteIfIndex) */


#if defined(I_ipRouteMetric1)
#ifdef SNMPPART_DECL
STdeclare(STipRouteMetric1, "ipRouteMetric1")
const SR_UINT32 IDipRouteMetric1[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 3 };
#else
extern const SR_UINT32 IDipRouteMetric1[];
#endif	/* SNMPPART_DECL */
#define LNipRouteMetric1 10
#endif	/* defined(I_ipRouteMetric1) */


#if defined(I_ipRouteMetric2)
#ifdef SNMPPART_DECL
STdeclare(STipRouteMetric2, "ipRouteMetric2")
const SR_UINT32 IDipRouteMetric2[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 4 };
#else
extern const SR_UINT32 IDipRouteMetric2[];
#endif	/* SNMPPART_DECL */
#define LNipRouteMetric2 10
#endif	/* defined(I_ipRouteMetric2) */


#if defined(I_ipRouteMetric3)
#ifdef SNMPPART_DECL
STdeclare(STipRouteMetric3, "ipRouteMetric3")
const SR_UINT32 IDipRouteMetric3[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 5 };
#else
extern const SR_UINT32 IDipRouteMetric3[];
#endif	/* SNMPPART_DECL */
#define LNipRouteMetric3 10
#endif	/* defined(I_ipRouteMetric3) */


#if defined(I_ipRouteMetric4)
#ifdef SNMPPART_DECL
STdeclare(STipRouteMetric4, "ipRouteMetric4")
const SR_UINT32 IDipRouteMetric4[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 6 };
#else
extern const SR_UINT32 IDipRouteMetric4[];
#endif	/* SNMPPART_DECL */
#define LNipRouteMetric4 10
#endif	/* defined(I_ipRouteMetric4) */


#if defined(I_ipRouteNextHop)
#ifdef SNMPPART_DECL
STdeclare(STipRouteNextHop, "ipRouteNextHop")
const SR_UINT32 IDipRouteNextHop[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 7 };
#else
extern const SR_UINT32 IDipRouteNextHop[];
#endif	/* SNMPPART_DECL */
#define LNipRouteNextHop 10
#endif	/* defined(I_ipRouteNextHop) */


#if defined(I_ipRouteType)
#ifdef SNMPPART_DECL
STdeclare(STipRouteType, "ipRouteType")
const SR_UINT32 IDipRouteType[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 8 };
#else
extern const SR_UINT32 IDipRouteType[];
#endif	/* SNMPPART_DECL */
#define LNipRouteType 10
#endif	/* defined(I_ipRouteType) */


#if defined(I_ipRouteProto)
#ifdef SNMPPART_DECL
STdeclare(STipRouteProto, "ipRouteProto")
const SR_UINT32 IDipRouteProto[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 9 };
#else
extern const SR_UINT32 IDipRouteProto[];
#endif	/* SNMPPART_DECL */
#define LNipRouteProto 10
#endif	/* defined(I_ipRouteProto) */


#if defined(I_ipRouteAge)
#ifdef SNMPPART_DECL
STdeclare(STipRouteAge, "ipRouteAge")
const SR_UINT32 IDipRouteAge[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 10 };
#else
extern const SR_UINT32 IDipRouteAge[];
#endif	/* SNMPPART_DECL */
#define LNipRouteAge 10
#endif	/* defined(I_ipRouteAge) */


#if defined(I_ipRouteMask)
#ifdef SNMPPART_DECL
STdeclare(STipRouteMask, "ipRouteMask")
const SR_UINT32 IDipRouteMask[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 11 };
#else
extern const SR_UINT32 IDipRouteMask[];
#endif	/* SNMPPART_DECL */
#define LNipRouteMask 10
#endif	/* defined(I_ipRouteMask) */


#if defined(I_ipRouteMetric5)
#ifdef SNMPPART_DECL
STdeclare(STipRouteMetric5, "ipRouteMetric5")
const SR_UINT32 IDipRouteMetric5[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 12 };
#else
extern const SR_UINT32 IDipRouteMetric5[];
#endif	/* SNMPPART_DECL */
#define LNipRouteMetric5 10
#endif	/* defined(I_ipRouteMetric5) */


#if defined(I_ipRouteInfo)
#ifdef SNMPPART_DECL
STdeclare(STipRouteInfo, "ipRouteInfo")
const SR_UINT32 IDipRouteInfo[] = { 1, 3, 6, 1, 2, 1, 4, 21, 1, 13 };
#else
extern const SR_UINT32 IDipRouteInfo[];
#endif	/* SNMPPART_DECL */
#define LNipRouteInfo 10
#endif	/* defined(I_ipRouteInfo) */






#if defined(I_ipNetToMediaIfIndex)
#ifdef SNMPPART_DECL
STdeclare(STipNetToMediaIfIndex, "ipNetToMediaIfIndex")
const SR_UINT32 IDipNetToMediaIfIndex[] = { 1, 3, 6, 1, 2, 1, 4, 22, 1, 1 };
#else
extern const SR_UINT32 IDipNetToMediaIfIndex[];
#endif	/* SNMPPART_DECL */
#define LNipNetToMediaIfIndex 10
#endif	/* defined(I_ipNetToMediaIfIndex) */


#if defined(I_ipNetToMediaPhysAddress)
#ifdef SNMPPART_DECL
STdeclare(STipNetToMediaPhysAddress, "ipNetToMediaPhysAddress")
const SR_UINT32 IDipNetToMediaPhysAddress[] = { 1, 3, 6, 1, 2, 1, 4, 22, 1, 2 };
#else
extern const SR_UINT32 IDipNetToMediaPhysAddress[];
#endif	/* SNMPPART_DECL */
#define LNipNetToMediaPhysAddress 10
#endif	/* defined(I_ipNetToMediaPhysAddress) */


#if defined(I_ipNetToMediaNetAddress)
#ifdef SNMPPART_DECL
STdeclare(STipNetToMediaNetAddress, "ipNetToMediaNetAddress")
const SR_UINT32 IDipNetToMediaNetAddress[] = { 1, 3, 6, 1, 2, 1, 4, 22, 1, 3 };
#else
extern const SR_UINT32 IDipNetToMediaNetAddress[];
#endif	/* SNMPPART_DECL */
#define LNipNetToMediaNetAddress 10
#endif	/* defined(I_ipNetToMediaNetAddress) */


#if defined(I_ipNetToMediaType)
#ifdef SNMPPART_DECL
STdeclare(STipNetToMediaType, "ipNetToMediaType")
const SR_UINT32 IDipNetToMediaType[] = { 1, 3, 6, 1, 2, 1, 4, 22, 1, 4 };
#else
extern const SR_UINT32 IDipNetToMediaType[];
#endif	/* SNMPPART_DECL */
#define LNipNetToMediaType 10
#endif	/* defined(I_ipNetToMediaType) */


#if defined(I_ipRoutingDiscards)
#ifdef SNMPPART_DECL
STdeclare(STipRoutingDiscards, "ipRoutingDiscards")
const SR_UINT32 IDipRoutingDiscards[] = { 1, 3, 6, 1, 2, 1, 4, 23 };
#else
extern const SR_UINT32 IDipRoutingDiscards[];
#endif	/* SNMPPART_DECL */
#define LNipRoutingDiscards 8
#endif	/* defined(I_ipRoutingDiscards) */


#if defined(N_icmp)
#ifdef SNMPPART_DECL
const SR_UINT32 IDicmp[] = { 1, 3, 6, 1, 2, 1, 5 };
#else
extern const SR_UINT32 IDicmp[];
#endif	/* SNMPPART_DECL */
#define LNicmp 7
#endif	/* defined(N_icmp) */


#if defined(I_icmpInMsgs)
#ifdef SNMPPART_DECL
STdeclare(STicmpInMsgs, "icmpInMsgs")
const SR_UINT32 IDicmpInMsgs[] = { 1, 3, 6, 1, 2, 1, 5, 1 };
#else
extern const SR_UINT32 IDicmpInMsgs[];
#endif	/* SNMPPART_DECL */
#define LNicmpInMsgs 8
#endif	/* defined(I_icmpInMsgs) */


#if defined(I_icmpInErrors)
#ifdef SNMPPART_DECL
STdeclare(STicmpInErrors, "icmpInErrors")
const SR_UINT32 IDicmpInErrors[] = { 1, 3, 6, 1, 2, 1, 5, 2 };
#else
extern const SR_UINT32 IDicmpInErrors[];
#endif	/* SNMPPART_DECL */
#define LNicmpInErrors 8
#endif	/* defined(I_icmpInErrors) */


#if defined(I_icmpInDestUnreachs)
#ifdef SNMPPART_DECL
STdeclare(STicmpInDestUnreachs, "icmpInDestUnreachs")
const SR_UINT32 IDicmpInDestUnreachs[] = { 1, 3, 6, 1, 2, 1, 5, 3 };
#else
extern const SR_UINT32 IDicmpInDestUnreachs[];
#endif	/* SNMPPART_DECL */
#define LNicmpInDestUnreachs 8
#endif	/* defined(I_icmpInDestUnreachs) */


#if defined(I_icmpInTimeExcds)
#ifdef SNMPPART_DECL
STdeclare(STicmpInTimeExcds, "icmpInTimeExcds")
const SR_UINT32 IDicmpInTimeExcds[] = { 1, 3, 6, 1, 2, 1, 5, 4 };
#else
extern const SR_UINT32 IDicmpInTimeExcds[];
#endif	/* SNMPPART_DECL */
#define LNicmpInTimeExcds 8
#endif	/* defined(I_icmpInTimeExcds) */


#if defined(I_icmpInParmProbs)
#ifdef SNMPPART_DECL
STdeclare(STicmpInParmProbs, "icmpInParmProbs")
const SR_UINT32 IDicmpInParmProbs[] = { 1, 3, 6, 1, 2, 1, 5, 5 };
#else
extern const SR_UINT32 IDicmpInParmProbs[];
#endif	/* SNMPPART_DECL */
#define LNicmpInParmProbs 8
#endif	/* defined(I_icmpInParmProbs) */


#if defined(I_icmpInSrcQuenchs)
#ifdef SNMPPART_DECL
STdeclare(STicmpInSrcQuenchs, "icmpInSrcQuenchs")
const SR_UINT32 IDicmpInSrcQuenchs[] = { 1, 3, 6, 1, 2, 1, 5, 6 };
#else
extern const SR_UINT32 IDicmpInSrcQuenchs[];
#endif	/* SNMPPART_DECL */
#define LNicmpInSrcQuenchs 8
#endif	/* defined(I_icmpInSrcQuenchs) */


#if defined(I_icmpInRedirects)
#ifdef SNMPPART_DECL
STdeclare(STicmpInRedirects, "icmpInRedirects")
const SR_UINT32 IDicmpInRedirects[] = { 1, 3, 6, 1, 2, 1, 5, 7 };
#else
extern const SR_UINT32 IDicmpInRedirects[];
#endif	/* SNMPPART_DECL */
#define LNicmpInRedirects 8
#endif	/* defined(I_icmpInRedirects) */


#if defined(I_icmpInEchos)
#ifdef SNMPPART_DECL
STdeclare(STicmpInEchos, "icmpInEchos")
const SR_UINT32 IDicmpInEchos[] = { 1, 3, 6, 1, 2, 1, 5, 8 };
#else
extern const SR_UINT32 IDicmpInEchos[];
#endif	/* SNMPPART_DECL */
#define LNicmpInEchos 8
#endif	/* defined(I_icmpInEchos) */


#if defined(I_icmpInEchoReps)
#ifdef SNMPPART_DECL
STdeclare(STicmpInEchoReps, "icmpInEchoReps")
const SR_UINT32 IDicmpInEchoReps[] = { 1, 3, 6, 1, 2, 1, 5, 9 };
#else
extern const SR_UINT32 IDicmpInEchoReps[];
#endif	/* SNMPPART_DECL */
#define LNicmpInEchoReps 8
#endif	/* defined(I_icmpInEchoReps) */


#if defined(I_icmpInTimestamps)
#ifdef SNMPPART_DECL
STdeclare(STicmpInTimestamps, "icmpInTimestamps")
const SR_UINT32 IDicmpInTimestamps[] = { 1, 3, 6, 1, 2, 1, 5, 10 };
#else
extern const SR_UINT32 IDicmpInTimestamps[];
#endif	/* SNMPPART_DECL */
#define LNicmpInTimestamps 8
#endif	/* defined(I_icmpInTimestamps) */


#if defined(I_icmpInTimestampReps)
#ifdef SNMPPART_DECL
STdeclare(STicmpInTimestampReps, "icmpInTimestampReps")
const SR_UINT32 IDicmpInTimestampReps[] = { 1, 3, 6, 1, 2, 1, 5, 11 };
#else
extern const SR_UINT32 IDicmpInTimestampReps[];
#endif	/* SNMPPART_DECL */
#define LNicmpInTimestampReps 8
#endif	/* defined(I_icmpInTimestampReps) */


#if defined(I_icmpInAddrMasks)
#ifdef SNMPPART_DECL
STdeclare(STicmpInAddrMasks, "icmpInAddrMasks")
const SR_UINT32 IDicmpInAddrMasks[] = { 1, 3, 6, 1, 2, 1, 5, 12 };
#else
extern const SR_UINT32 IDicmpInAddrMasks[];
#endif	/* SNMPPART_DECL */
#define LNicmpInAddrMasks 8
#endif	/* defined(I_icmpInAddrMasks) */


#if defined(I_icmpInAddrMaskReps)
#ifdef SNMPPART_DECL
STdeclare(STicmpInAddrMaskReps, "icmpInAddrMaskReps")
const SR_UINT32 IDicmpInAddrMaskReps[] = { 1, 3, 6, 1, 2, 1, 5, 13 };
#else
extern const SR_UINT32 IDicmpInAddrMaskReps[];
#endif	/* SNMPPART_DECL */
#define LNicmpInAddrMaskReps 8
#endif	/* defined(I_icmpInAddrMaskReps) */


#if defined(I_icmpOutMsgs)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutMsgs, "icmpOutMsgs")
const SR_UINT32 IDicmpOutMsgs[] = { 1, 3, 6, 1, 2, 1, 5, 14 };
#else
extern const SR_UINT32 IDicmpOutMsgs[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutMsgs 8
#endif	/* defined(I_icmpOutMsgs) */


#if defined(I_icmpOutErrors)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutErrors, "icmpOutErrors")
const SR_UINT32 IDicmpOutErrors[] = { 1, 3, 6, 1, 2, 1, 5, 15 };
#else
extern const SR_UINT32 IDicmpOutErrors[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutErrors 8
#endif	/* defined(I_icmpOutErrors) */


#if defined(I_icmpOutDestUnreachs)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutDestUnreachs, "icmpOutDestUnreachs")
const SR_UINT32 IDicmpOutDestUnreachs[] = { 1, 3, 6, 1, 2, 1, 5, 16 };
#else
extern const SR_UINT32 IDicmpOutDestUnreachs[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutDestUnreachs 8
#endif	/* defined(I_icmpOutDestUnreachs) */


#if defined(I_icmpOutTimeExcds)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutTimeExcds, "icmpOutTimeExcds")
const SR_UINT32 IDicmpOutTimeExcds[] = { 1, 3, 6, 1, 2, 1, 5, 17 };
#else
extern const SR_UINT32 IDicmpOutTimeExcds[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutTimeExcds 8
#endif	/* defined(I_icmpOutTimeExcds) */


#if defined(I_icmpOutParmProbs)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutParmProbs, "icmpOutParmProbs")
const SR_UINT32 IDicmpOutParmProbs[] = { 1, 3, 6, 1, 2, 1, 5, 18 };
#else
extern const SR_UINT32 IDicmpOutParmProbs[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutParmProbs 8
#endif	/* defined(I_icmpOutParmProbs) */


#if defined(I_icmpOutSrcQuenchs)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutSrcQuenchs, "icmpOutSrcQuenchs")
const SR_UINT32 IDicmpOutSrcQuenchs[] = { 1, 3, 6, 1, 2, 1, 5, 19 };
#else
extern const SR_UINT32 IDicmpOutSrcQuenchs[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutSrcQuenchs 8
#endif	/* defined(I_icmpOutSrcQuenchs) */


#if defined(I_icmpOutRedirects)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutRedirects, "icmpOutRedirects")
const SR_UINT32 IDicmpOutRedirects[] = { 1, 3, 6, 1, 2, 1, 5, 20 };
#else
extern const SR_UINT32 IDicmpOutRedirects[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutRedirects 8
#endif	/* defined(I_icmpOutRedirects) */


#if defined(I_icmpOutEchos)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutEchos, "icmpOutEchos")
const SR_UINT32 IDicmpOutEchos[] = { 1, 3, 6, 1, 2, 1, 5, 21 };
#else
extern const SR_UINT32 IDicmpOutEchos[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutEchos 8
#endif	/* defined(I_icmpOutEchos) */


#if defined(I_icmpOutEchoReps)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutEchoReps, "icmpOutEchoReps")
const SR_UINT32 IDicmpOutEchoReps[] = { 1, 3, 6, 1, 2, 1, 5, 22 };
#else
extern const SR_UINT32 IDicmpOutEchoReps[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutEchoReps 8
#endif	/* defined(I_icmpOutEchoReps) */


#if defined(I_icmpOutTimestamps)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutTimestamps, "icmpOutTimestamps")
const SR_UINT32 IDicmpOutTimestamps[] = { 1, 3, 6, 1, 2, 1, 5, 23 };
#else
extern const SR_UINT32 IDicmpOutTimestamps[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutTimestamps 8
#endif	/* defined(I_icmpOutTimestamps) */


#if defined(I_icmpOutTimestampReps)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutTimestampReps, "icmpOutTimestampReps")
const SR_UINT32 IDicmpOutTimestampReps[] = { 1, 3, 6, 1, 2, 1, 5, 24 };
#else
extern const SR_UINT32 IDicmpOutTimestampReps[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutTimestampReps 8
#endif	/* defined(I_icmpOutTimestampReps) */


#if defined(I_icmpOutAddrMasks)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutAddrMasks, "icmpOutAddrMasks")
const SR_UINT32 IDicmpOutAddrMasks[] = { 1, 3, 6, 1, 2, 1, 5, 25 };
#else
extern const SR_UINT32 IDicmpOutAddrMasks[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutAddrMasks 8
#endif	/* defined(I_icmpOutAddrMasks) */


#if defined(I_icmpOutAddrMaskReps)
#ifdef SNMPPART_DECL
STdeclare(STicmpOutAddrMaskReps, "icmpOutAddrMaskReps")
const SR_UINT32 IDicmpOutAddrMaskReps[] = { 1, 3, 6, 1, 2, 1, 5, 26 };
#else
extern const SR_UINT32 IDicmpOutAddrMaskReps[];
#endif	/* SNMPPART_DECL */
#define LNicmpOutAddrMaskReps 8
#endif	/* defined(I_icmpOutAddrMaskReps) */


#if defined(N_tcp)
#ifdef SNMPPART_DECL
const SR_UINT32 IDtcp[] = { 1, 3, 6, 1, 2, 1, 6 };
#else
extern const SR_UINT32 IDtcp[];
#endif	/* SNMPPART_DECL */
#define LNtcp 7
#endif	/* defined(N_tcp) */


#if defined(I_tcpRtoAlgorithm)
#ifdef SNMPPART_DECL
STdeclare(STtcpRtoAlgorithm, "tcpRtoAlgorithm")
const SR_UINT32 IDtcpRtoAlgorithm[] = { 1, 3, 6, 1, 2, 1, 6, 1 };
#else
extern const SR_UINT32 IDtcpRtoAlgorithm[];
#endif	/* SNMPPART_DECL */
#define LNtcpRtoAlgorithm 8
#endif	/* defined(I_tcpRtoAlgorithm) */


#if defined(I_tcpRtoMin)
#ifdef SNMPPART_DECL
STdeclare(STtcpRtoMin, "tcpRtoMin")
const SR_UINT32 IDtcpRtoMin[] = { 1, 3, 6, 1, 2, 1, 6, 2 };
#else
extern const SR_UINT32 IDtcpRtoMin[];
#endif	/* SNMPPART_DECL */
#define LNtcpRtoMin 8
#endif	/* defined(I_tcpRtoMin) */


#if defined(I_tcpRtoMax)
#ifdef SNMPPART_DECL
STdeclare(STtcpRtoMax, "tcpRtoMax")
const SR_UINT32 IDtcpRtoMax[] = { 1, 3, 6, 1, 2, 1, 6, 3 };
#else
extern const SR_UINT32 IDtcpRtoMax[];
#endif	/* SNMPPART_DECL */
#define LNtcpRtoMax 8
#endif	/* defined(I_tcpRtoMax) */


#if defined(I_tcpMaxConn)
#ifdef SNMPPART_DECL
STdeclare(STtcpMaxConn, "tcpMaxConn")
const SR_UINT32 IDtcpMaxConn[] = { 1, 3, 6, 1, 2, 1, 6, 4 };
#else
extern const SR_UINT32 IDtcpMaxConn[];
#endif	/* SNMPPART_DECL */
#define LNtcpMaxConn 8
#endif	/* defined(I_tcpMaxConn) */


#if defined(I_tcpActiveOpens)
#ifdef SNMPPART_DECL
STdeclare(STtcpActiveOpens, "tcpActiveOpens")
const SR_UINT32 IDtcpActiveOpens[] = { 1, 3, 6, 1, 2, 1, 6, 5 };
#else
extern const SR_UINT32 IDtcpActiveOpens[];
#endif	/* SNMPPART_DECL */
#define LNtcpActiveOpens 8
#endif	/* defined(I_tcpActiveOpens) */


#if defined(I_tcpPassiveOpens)
#ifdef SNMPPART_DECL
STdeclare(STtcpPassiveOpens, "tcpPassiveOpens")
const SR_UINT32 IDtcpPassiveOpens[] = { 1, 3, 6, 1, 2, 1, 6, 6 };
#else
extern const SR_UINT32 IDtcpPassiveOpens[];
#endif	/* SNMPPART_DECL */
#define LNtcpPassiveOpens 8
#endif	/* defined(I_tcpPassiveOpens) */


#if defined(I_tcpAttemptFails)
#ifdef SNMPPART_DECL
STdeclare(STtcpAttemptFails, "tcpAttemptFails")
const SR_UINT32 IDtcpAttemptFails[] = { 1, 3, 6, 1, 2, 1, 6, 7 };
#else
extern const SR_UINT32 IDtcpAttemptFails[];
#endif	/* SNMPPART_DECL */
#define LNtcpAttemptFails 8
#endif	/* defined(I_tcpAttemptFails) */


#if defined(I_tcpEstabResets)
#ifdef SNMPPART_DECL
STdeclare(STtcpEstabResets, "tcpEstabResets")
const SR_UINT32 IDtcpEstabResets[] = { 1, 3, 6, 1, 2, 1, 6, 8 };
#else
extern const SR_UINT32 IDtcpEstabResets[];
#endif	/* SNMPPART_DECL */
#define LNtcpEstabResets 8
#endif	/* defined(I_tcpEstabResets) */


#if defined(I_tcpCurrEstab)
#ifdef SNMPPART_DECL
STdeclare(STtcpCurrEstab, "tcpCurrEstab")
const SR_UINT32 IDtcpCurrEstab[] = { 1, 3, 6, 1, 2, 1, 6, 9 };
#else
extern const SR_UINT32 IDtcpCurrEstab[];
#endif	/* SNMPPART_DECL */
#define LNtcpCurrEstab 8
#endif	/* defined(I_tcpCurrEstab) */


#if defined(I_tcpInSegs)
#ifdef SNMPPART_DECL
STdeclare(STtcpInSegs, "tcpInSegs")
const SR_UINT32 IDtcpInSegs[] = { 1, 3, 6, 1, 2, 1, 6, 10 };
#else
extern const SR_UINT32 IDtcpInSegs[];
#endif	/* SNMPPART_DECL */
#define LNtcpInSegs 8
#endif	/* defined(I_tcpInSegs) */


#if defined(I_tcpOutSegs)
#ifdef SNMPPART_DECL
STdeclare(STtcpOutSegs, "tcpOutSegs")
const SR_UINT32 IDtcpOutSegs[] = { 1, 3, 6, 1, 2, 1, 6, 11 };
#else
extern const SR_UINT32 IDtcpOutSegs[];
#endif	/* SNMPPART_DECL */
#define LNtcpOutSegs 8
#endif	/* defined(I_tcpOutSegs) */


#if defined(I_tcpRetransSegs)
#ifdef SNMPPART_DECL
STdeclare(STtcpRetransSegs, "tcpRetransSegs")
const SR_UINT32 IDtcpRetransSegs[] = { 1, 3, 6, 1, 2, 1, 6, 12 };
#else
extern const SR_UINT32 IDtcpRetransSegs[];
#endif	/* SNMPPART_DECL */
#define LNtcpRetransSegs 8
#endif	/* defined(I_tcpRetransSegs) */






#if defined(I_tcpConnState)
#ifdef SNMPPART_DECL
STdeclare(STtcpConnState, "tcpConnState")
const SR_UINT32 IDtcpConnState[] = { 1, 3, 6, 1, 2, 1, 6, 13, 1, 1 };
#else
extern const SR_UINT32 IDtcpConnState[];
#endif	/* SNMPPART_DECL */
#define LNtcpConnState 10
#endif	/* defined(I_tcpConnState) */


#if defined(I_tcpConnLocalAddress)
#ifdef SNMPPART_DECL
STdeclare(STtcpConnLocalAddress, "tcpConnLocalAddress")
const SR_UINT32 IDtcpConnLocalAddress[] = { 1, 3, 6, 1, 2, 1, 6, 13, 1, 2 };
#else
extern const SR_UINT32 IDtcpConnLocalAddress[];
#endif	/* SNMPPART_DECL */
#define LNtcpConnLocalAddress 10
#endif	/* defined(I_tcpConnLocalAddress) */


#if defined(I_tcpConnLocalPort)
#ifdef SNMPPART_DECL
STdeclare(STtcpConnLocalPort, "tcpConnLocalPort")
const SR_UINT32 IDtcpConnLocalPort[] = { 1, 3, 6, 1, 2, 1, 6, 13, 1, 3 };
#else
extern const SR_UINT32 IDtcpConnLocalPort[];
#endif	/* SNMPPART_DECL */
#define LNtcpConnLocalPort 10
#endif	/* defined(I_tcpConnLocalPort) */


#if defined(I_tcpConnRemAddress)
#ifdef SNMPPART_DECL
STdeclare(STtcpConnRemAddress, "tcpConnRemAddress")
const SR_UINT32 IDtcpConnRemAddress[] = { 1, 3, 6, 1, 2, 1, 6, 13, 1, 4 };
#else
extern const SR_UINT32 IDtcpConnRemAddress[];
#endif	/* SNMPPART_DECL */
#define LNtcpConnRemAddress 10
#endif	/* defined(I_tcpConnRemAddress) */


#if defined(I_tcpConnRemPort)
#ifdef SNMPPART_DECL
STdeclare(STtcpConnRemPort, "tcpConnRemPort")
const SR_UINT32 IDtcpConnRemPort[] = { 1, 3, 6, 1, 2, 1, 6, 13, 1, 5 };
#else
extern const SR_UINT32 IDtcpConnRemPort[];
#endif	/* SNMPPART_DECL */
#define LNtcpConnRemPort 10
#endif	/* defined(I_tcpConnRemPort) */


#if defined(I_tcpInErrs)
#ifdef SNMPPART_DECL
STdeclare(STtcpInErrs, "tcpInErrs")
const SR_UINT32 IDtcpInErrs[] = { 1, 3, 6, 1, 2, 1, 6, 14 };
#else
extern const SR_UINT32 IDtcpInErrs[];
#endif	/* SNMPPART_DECL */
#define LNtcpInErrs 8
#endif	/* defined(I_tcpInErrs) */


#if defined(I_tcpOutRsts)
#ifdef SNMPPART_DECL
STdeclare(STtcpOutRsts, "tcpOutRsts")
const SR_UINT32 IDtcpOutRsts[] = { 1, 3, 6, 1, 2, 1, 6, 15 };
#else
extern const SR_UINT32 IDtcpOutRsts[];
#endif	/* SNMPPART_DECL */
#define LNtcpOutRsts 8
#endif	/* defined(I_tcpOutRsts) */


#if defined(N_udp)
#ifdef SNMPPART_DECL
const SR_UINT32 IDudp[] = { 1, 3, 6, 1, 2, 1, 7 };
#else
extern const SR_UINT32 IDudp[];
#endif	/* SNMPPART_DECL */
#define LNudp 7
#endif	/* defined(N_udp) */


#if defined(I_udpInDatagrams)
#ifdef SNMPPART_DECL
STdeclare(STudpInDatagrams, "udpInDatagrams")
const SR_UINT32 IDudpInDatagrams[] = { 1, 3, 6, 1, 2, 1, 7, 1 };
#else
extern const SR_UINT32 IDudpInDatagrams[];
#endif	/* SNMPPART_DECL */
#define LNudpInDatagrams 8
#endif	/* defined(I_udpInDatagrams) */


#if defined(I_udpNoPorts)
#ifdef SNMPPART_DECL
STdeclare(STudpNoPorts, "udpNoPorts")
const SR_UINT32 IDudpNoPorts[] = { 1, 3, 6, 1, 2, 1, 7, 2 };
#else
extern const SR_UINT32 IDudpNoPorts[];
#endif	/* SNMPPART_DECL */
#define LNudpNoPorts 8
#endif	/* defined(I_udpNoPorts) */


#if defined(I_udpInErrors)
#ifdef SNMPPART_DECL
STdeclare(STudpInErrors, "udpInErrors")
const SR_UINT32 IDudpInErrors[] = { 1, 3, 6, 1, 2, 1, 7, 3 };
#else
extern const SR_UINT32 IDudpInErrors[];
#endif	/* SNMPPART_DECL */
#define LNudpInErrors 8
#endif	/* defined(I_udpInErrors) */


#if defined(I_udpOutDatagrams)
#ifdef SNMPPART_DECL
STdeclare(STudpOutDatagrams, "udpOutDatagrams")
const SR_UINT32 IDudpOutDatagrams[] = { 1, 3, 6, 1, 2, 1, 7, 4 };
#else
extern const SR_UINT32 IDudpOutDatagrams[];
#endif	/* SNMPPART_DECL */
#define LNudpOutDatagrams 8
#endif	/* defined(I_udpOutDatagrams) */






#if defined(I_udpLocalAddress)
#ifdef SNMPPART_DECL
STdeclare(STudpLocalAddress, "udpLocalAddress")
const SR_UINT32 IDudpLocalAddress[] = { 1, 3, 6, 1, 2, 1, 7, 5, 1, 1 };
#else
extern const SR_UINT32 IDudpLocalAddress[];
#endif	/* SNMPPART_DECL */
#define LNudpLocalAddress 10
#endif	/* defined(I_udpLocalAddress) */


#if defined(I_udpLocalPort)
#ifdef SNMPPART_DECL
STdeclare(STudpLocalPort, "udpLocalPort")
const SR_UINT32 IDudpLocalPort[] = { 1, 3, 6, 1, 2, 1, 7, 5, 1, 2 };
#else
extern const SR_UINT32 IDudpLocalPort[];
#endif	/* SNMPPART_DECL */
#define LNudpLocalPort 10
#endif	/* defined(I_udpLocalPort) */


#if defined(N_egp)
#ifdef SNMPPART_DECL
const SR_UINT32 IDegp[] = { 1, 3, 6, 1, 2, 1, 8 };
#else
extern const SR_UINT32 IDegp[];
#endif	/* SNMPPART_DECL */
#define LNegp 7
#endif	/* defined(N_egp) */


#if defined(I_egpInMsgs)
#ifdef SNMPPART_DECL
STdeclare(STegpInMsgs, "egpInMsgs")
const SR_UINT32 IDegpInMsgs[] = { 1, 3, 6, 1, 2, 1, 8, 1 };
#else
extern const SR_UINT32 IDegpInMsgs[];
#endif	/* SNMPPART_DECL */
#define LNegpInMsgs 8
#endif	/* defined(I_egpInMsgs) */


#if defined(I_egpInErrors)
#ifdef SNMPPART_DECL
STdeclare(STegpInErrors, "egpInErrors")
const SR_UINT32 IDegpInErrors[] = { 1, 3, 6, 1, 2, 1, 8, 2 };
#else
extern const SR_UINT32 IDegpInErrors[];
#endif	/* SNMPPART_DECL */
#define LNegpInErrors 8
#endif	/* defined(I_egpInErrors) */


#if defined(I_egpOutMsgs)
#ifdef SNMPPART_DECL
STdeclare(STegpOutMsgs, "egpOutMsgs")
const SR_UINT32 IDegpOutMsgs[] = { 1, 3, 6, 1, 2, 1, 8, 3 };
#else
extern const SR_UINT32 IDegpOutMsgs[];
#endif	/* SNMPPART_DECL */
#define LNegpOutMsgs 8
#endif	/* defined(I_egpOutMsgs) */


#if defined(I_egpOutErrors)
#ifdef SNMPPART_DECL
STdeclare(STegpOutErrors, "egpOutErrors")
const SR_UINT32 IDegpOutErrors[] = { 1, 3, 6, 1, 2, 1, 8, 4 };
#else
extern const SR_UINT32 IDegpOutErrors[];
#endif	/* SNMPPART_DECL */
#define LNegpOutErrors 8
#endif	/* defined(I_egpOutErrors) */






#if defined(I_egpNeighState)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighState, "egpNeighState")
const SR_UINT32 IDegpNeighState[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 1 };
#else
extern const SR_UINT32 IDegpNeighState[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighState 10
#endif	/* defined(I_egpNeighState) */


#if defined(I_egpNeighAddr)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighAddr, "egpNeighAddr")
const SR_UINT32 IDegpNeighAddr[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 2 };
#else
extern const SR_UINT32 IDegpNeighAddr[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighAddr 10
#endif	/* defined(I_egpNeighAddr) */


#if defined(I_egpNeighAs)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighAs, "egpNeighAs")
const SR_UINT32 IDegpNeighAs[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 3 };
#else
extern const SR_UINT32 IDegpNeighAs[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighAs 10
#endif	/* defined(I_egpNeighAs) */


#if defined(I_egpNeighInMsgs)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighInMsgs, "egpNeighInMsgs")
const SR_UINT32 IDegpNeighInMsgs[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 4 };
#else
extern const SR_UINT32 IDegpNeighInMsgs[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighInMsgs 10
#endif	/* defined(I_egpNeighInMsgs) */


#if defined(I_egpNeighInErrs)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighInErrs, "egpNeighInErrs")
const SR_UINT32 IDegpNeighInErrs[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 5 };
#else
extern const SR_UINT32 IDegpNeighInErrs[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighInErrs 10
#endif	/* defined(I_egpNeighInErrs) */


#if defined(I_egpNeighOutMsgs)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighOutMsgs, "egpNeighOutMsgs")
const SR_UINT32 IDegpNeighOutMsgs[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 6 };
#else
extern const SR_UINT32 IDegpNeighOutMsgs[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighOutMsgs 10
#endif	/* defined(I_egpNeighOutMsgs) */


#if defined(I_egpNeighOutErrs)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighOutErrs, "egpNeighOutErrs")
const SR_UINT32 IDegpNeighOutErrs[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 7 };
#else
extern const SR_UINT32 IDegpNeighOutErrs[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighOutErrs 10
#endif	/* defined(I_egpNeighOutErrs) */


#if defined(I_egpNeighInErrMsgs)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighInErrMsgs, "egpNeighInErrMsgs")
const SR_UINT32 IDegpNeighInErrMsgs[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 8 };
#else
extern const SR_UINT32 IDegpNeighInErrMsgs[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighInErrMsgs 10
#endif	/* defined(I_egpNeighInErrMsgs) */


#if defined(I_egpNeighOutErrMsgs)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighOutErrMsgs, "egpNeighOutErrMsgs")
const SR_UINT32 IDegpNeighOutErrMsgs[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 9 };
#else
extern const SR_UINT32 IDegpNeighOutErrMsgs[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighOutErrMsgs 10
#endif	/* defined(I_egpNeighOutErrMsgs) */


#if defined(I_egpNeighStateUps)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighStateUps, "egpNeighStateUps")
const SR_UINT32 IDegpNeighStateUps[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 10 };
#else
extern const SR_UINT32 IDegpNeighStateUps[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighStateUps 10
#endif	/* defined(I_egpNeighStateUps) */


#if defined(I_egpNeighStateDowns)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighStateDowns, "egpNeighStateDowns")
const SR_UINT32 IDegpNeighStateDowns[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 11 };
#else
extern const SR_UINT32 IDegpNeighStateDowns[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighStateDowns 10
#endif	/* defined(I_egpNeighStateDowns) */


#if defined(I_egpNeighIntervalHello)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighIntervalHello, "egpNeighIntervalHello")
const SR_UINT32 IDegpNeighIntervalHello[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 12 };
#else
extern const SR_UINT32 IDegpNeighIntervalHello[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighIntervalHello 10
#endif	/* defined(I_egpNeighIntervalHello) */


#if defined(I_egpNeighIntervalPoll)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighIntervalPoll, "egpNeighIntervalPoll")
const SR_UINT32 IDegpNeighIntervalPoll[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 13 };
#else
extern const SR_UINT32 IDegpNeighIntervalPoll[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighIntervalPoll 10
#endif	/* defined(I_egpNeighIntervalPoll) */


#if defined(I_egpNeighMode)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighMode, "egpNeighMode")
const SR_UINT32 IDegpNeighMode[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 14 };
#else
extern const SR_UINT32 IDegpNeighMode[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighMode 10
#endif	/* defined(I_egpNeighMode) */


#if defined(I_egpNeighEventTrigger)
#ifdef SNMPPART_DECL
STdeclare(STegpNeighEventTrigger, "egpNeighEventTrigger")
const SR_UINT32 IDegpNeighEventTrigger[] = { 1, 3, 6, 1, 2, 1, 8, 5, 1, 15 };
#else
extern const SR_UINT32 IDegpNeighEventTrigger[];
#endif	/* SNMPPART_DECL */
#define LNegpNeighEventTrigger 10
#endif	/* defined(I_egpNeighEventTrigger) */


#if defined(I_egpAs)
#ifdef SNMPPART_DECL
STdeclare(STegpAs, "egpAs")
const SR_UINT32 IDegpAs[] = { 1, 3, 6, 1, 2, 1, 8, 6 };
#else
extern const SR_UINT32 IDegpAs[];
#endif	/* SNMPPART_DECL */
#define LNegpAs 8
#endif	/* defined(I_egpAs) */


#if defined(N_transmission)
#ifdef SNMPPART_DECL
const SR_UINT32 IDtransmission[] = { 1, 3, 6, 1, 2, 1, 10 };
#else
extern const SR_UINT32 IDtransmission[];
#endif	/* SNMPPART_DECL */
#define LNtransmission 7
#endif	/* defined(N_transmission) */


#if defined(N_snmp)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmp[] = { 1, 3, 6, 1, 2, 1, 11 };
#else
extern const SR_UINT32 IDsnmp[];
#endif	/* SNMPPART_DECL */
#define LNsnmp 7
#endif	/* defined(N_snmp) */


#if defined(I_snmpInPkts)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInPkts, "snmpInPkts")
const SR_UINT32 IDsnmpInPkts[] = { 1, 3, 6, 1, 2, 1, 11, 1 };
#else
extern const SR_UINT32 IDsnmpInPkts[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInPkts 8
#endif	/* defined(I_snmpInPkts) */


#if defined(I_snmpOutPkts)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutPkts, "snmpOutPkts")
const SR_UINT32 IDsnmpOutPkts[] = { 1, 3, 6, 1, 2, 1, 11, 2 };
#else
extern const SR_UINT32 IDsnmpOutPkts[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutPkts 8
#endif	/* defined(I_snmpOutPkts) */


#if defined(I_snmpInBadVersions)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInBadVersions, "snmpInBadVersions")
const SR_UINT32 IDsnmpInBadVersions[] = { 1, 3, 6, 1, 2, 1, 11, 3 };
#else
extern const SR_UINT32 IDsnmpInBadVersions[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInBadVersions 8
#endif	/* defined(I_snmpInBadVersions) */


#if defined(I_snmpInBadCommunityNames)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInBadCommunityNames, "snmpInBadCommunityNames")
const SR_UINT32 IDsnmpInBadCommunityNames[] = { 1, 3, 6, 1, 2, 1, 11, 4 };
#else
extern const SR_UINT32 IDsnmpInBadCommunityNames[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInBadCommunityNames 8
#endif	/* defined(I_snmpInBadCommunityNames) */


#if defined(I_snmpInBadCommunityUses)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInBadCommunityUses, "snmpInBadCommunityUses")
const SR_UINT32 IDsnmpInBadCommunityUses[] = { 1, 3, 6, 1, 2, 1, 11, 5 };
#else
extern const SR_UINT32 IDsnmpInBadCommunityUses[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInBadCommunityUses 8
#endif	/* defined(I_snmpInBadCommunityUses) */


#if defined(I_snmpInASNParseErrs)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInASNParseErrs, "snmpInASNParseErrs")
const SR_UINT32 IDsnmpInASNParseErrs[] = { 1, 3, 6, 1, 2, 1, 11, 6 };
#else
extern const SR_UINT32 IDsnmpInASNParseErrs[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInASNParseErrs 8
#endif	/* defined(I_snmpInASNParseErrs) */


#if defined(I_snmpInTooBigs)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInTooBigs, "snmpInTooBigs")
const SR_UINT32 IDsnmpInTooBigs[] = { 1, 3, 6, 1, 2, 1, 11, 8 };
#else
extern const SR_UINT32 IDsnmpInTooBigs[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInTooBigs 8
#endif	/* defined(I_snmpInTooBigs) */


#if defined(I_snmpInNoSuchNames)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInNoSuchNames, "snmpInNoSuchNames")
const SR_UINT32 IDsnmpInNoSuchNames[] = { 1, 3, 6, 1, 2, 1, 11, 9 };
#else
extern const SR_UINT32 IDsnmpInNoSuchNames[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInNoSuchNames 8
#endif	/* defined(I_snmpInNoSuchNames) */


#if defined(I_snmpInBadValues)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInBadValues, "snmpInBadValues")
const SR_UINT32 IDsnmpInBadValues[] = { 1, 3, 6, 1, 2, 1, 11, 10 };
#else
extern const SR_UINT32 IDsnmpInBadValues[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInBadValues 8
#endif	/* defined(I_snmpInBadValues) */


#if defined(I_snmpInReadOnlys)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInReadOnlys, "snmpInReadOnlys")
const SR_UINT32 IDsnmpInReadOnlys[] = { 1, 3, 6, 1, 2, 1, 11, 11 };
#else
extern const SR_UINT32 IDsnmpInReadOnlys[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInReadOnlys 8
#endif	/* defined(I_snmpInReadOnlys) */


#if defined(I_snmpInGenErrs)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInGenErrs, "snmpInGenErrs")
const SR_UINT32 IDsnmpInGenErrs[] = { 1, 3, 6, 1, 2, 1, 11, 12 };
#else
extern const SR_UINT32 IDsnmpInGenErrs[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInGenErrs 8
#endif	/* defined(I_snmpInGenErrs) */


#if defined(I_snmpInTotalReqVars)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInTotalReqVars, "snmpInTotalReqVars")
const SR_UINT32 IDsnmpInTotalReqVars[] = { 1, 3, 6, 1, 2, 1, 11, 13 };
#else
extern const SR_UINT32 IDsnmpInTotalReqVars[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInTotalReqVars 8
#endif	/* defined(I_snmpInTotalReqVars) */


#if defined(I_snmpInTotalSetVars)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInTotalSetVars, "snmpInTotalSetVars")
const SR_UINT32 IDsnmpInTotalSetVars[] = { 1, 3, 6, 1, 2, 1, 11, 14 };
#else
extern const SR_UINT32 IDsnmpInTotalSetVars[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInTotalSetVars 8
#endif	/* defined(I_snmpInTotalSetVars) */


#if defined(I_snmpInGetRequests)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInGetRequests, "snmpInGetRequests")
const SR_UINT32 IDsnmpInGetRequests[] = { 1, 3, 6, 1, 2, 1, 11, 15 };
#else
extern const SR_UINT32 IDsnmpInGetRequests[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInGetRequests 8
#endif	/* defined(I_snmpInGetRequests) */


#if defined(I_snmpInGetNexts)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInGetNexts, "snmpInGetNexts")
const SR_UINT32 IDsnmpInGetNexts[] = { 1, 3, 6, 1, 2, 1, 11, 16 };
#else
extern const SR_UINT32 IDsnmpInGetNexts[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInGetNexts 8
#endif	/* defined(I_snmpInGetNexts) */


#if defined(I_snmpInSetRequests)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInSetRequests, "snmpInSetRequests")
const SR_UINT32 IDsnmpInSetRequests[] = { 1, 3, 6, 1, 2, 1, 11, 17 };
#else
extern const SR_UINT32 IDsnmpInSetRequests[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInSetRequests 8
#endif	/* defined(I_snmpInSetRequests) */


#if defined(I_snmpInGetResponses)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInGetResponses, "snmpInGetResponses")
const SR_UINT32 IDsnmpInGetResponses[] = { 1, 3, 6, 1, 2, 1, 11, 18 };
#else
extern const SR_UINT32 IDsnmpInGetResponses[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInGetResponses 8
#endif	/* defined(I_snmpInGetResponses) */


#if defined(I_snmpInTraps)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInTraps, "snmpInTraps")
const SR_UINT32 IDsnmpInTraps[] = { 1, 3, 6, 1, 2, 1, 11, 19 };
#else
extern const SR_UINT32 IDsnmpInTraps[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInTraps 8
#endif	/* defined(I_snmpInTraps) */


#if defined(I_snmpOutTooBigs)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutTooBigs, "snmpOutTooBigs")
const SR_UINT32 IDsnmpOutTooBigs[] = { 1, 3, 6, 1, 2, 1, 11, 20 };
#else
extern const SR_UINT32 IDsnmpOutTooBigs[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutTooBigs 8
#endif	/* defined(I_snmpOutTooBigs) */


#if defined(I_snmpOutNoSuchNames)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutNoSuchNames, "snmpOutNoSuchNames")
const SR_UINT32 IDsnmpOutNoSuchNames[] = { 1, 3, 6, 1, 2, 1, 11, 21 };
#else
extern const SR_UINT32 IDsnmpOutNoSuchNames[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutNoSuchNames 8
#endif	/* defined(I_snmpOutNoSuchNames) */


#if defined(I_snmpOutBadValues)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutBadValues, "snmpOutBadValues")
const SR_UINT32 IDsnmpOutBadValues[] = { 1, 3, 6, 1, 2, 1, 11, 22 };
#else
extern const SR_UINT32 IDsnmpOutBadValues[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutBadValues 8
#endif	/* defined(I_snmpOutBadValues) */


#if defined(I_snmpOutGenErrs)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutGenErrs, "snmpOutGenErrs")
const SR_UINT32 IDsnmpOutGenErrs[] = { 1, 3, 6, 1, 2, 1, 11, 24 };
#else
extern const SR_UINT32 IDsnmpOutGenErrs[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutGenErrs 8
#endif	/* defined(I_snmpOutGenErrs) */


#if defined(I_snmpOutGetRequests)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutGetRequests, "snmpOutGetRequests")
const SR_UINT32 IDsnmpOutGetRequests[] = { 1, 3, 6, 1, 2, 1, 11, 25 };
#else
extern const SR_UINT32 IDsnmpOutGetRequests[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutGetRequests 8
#endif	/* defined(I_snmpOutGetRequests) */


#if defined(I_snmpOutGetNexts)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutGetNexts, "snmpOutGetNexts")
const SR_UINT32 IDsnmpOutGetNexts[] = { 1, 3, 6, 1, 2, 1, 11, 26 };
#else
extern const SR_UINT32 IDsnmpOutGetNexts[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutGetNexts 8
#endif	/* defined(I_snmpOutGetNexts) */


#if defined(I_snmpOutSetRequests)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutSetRequests, "snmpOutSetRequests")
const SR_UINT32 IDsnmpOutSetRequests[] = { 1, 3, 6, 1, 2, 1, 11, 27 };
#else
extern const SR_UINT32 IDsnmpOutSetRequests[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutSetRequests 8
#endif	/* defined(I_snmpOutSetRequests) */


#if defined(I_snmpOutGetResponses)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutGetResponses, "snmpOutGetResponses")
const SR_UINT32 IDsnmpOutGetResponses[] = { 1, 3, 6, 1, 2, 1, 11, 28 };
#else
extern const SR_UINT32 IDsnmpOutGetResponses[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutGetResponses 8
#endif	/* defined(I_snmpOutGetResponses) */


#if defined(I_snmpOutTraps)
#ifdef SNMPPART_DECL
STdeclare(STsnmpOutTraps, "snmpOutTraps")
const SR_UINT32 IDsnmpOutTraps[] = { 1, 3, 6, 1, 2, 1, 11, 29 };
#else
extern const SR_UINT32 IDsnmpOutTraps[];
#endif	/* SNMPPART_DECL */
#define LNsnmpOutTraps 8
#endif	/* defined(I_snmpOutTraps) */


#if defined(I_snmpEnableAuthenTraps)
#ifdef SNMPPART_DECL
STdeclare(STsnmpEnableAuthenTraps, "snmpEnableAuthenTraps")
const SR_UINT32 IDsnmpEnableAuthenTraps[] = { 1, 3, 6, 1, 2, 1, 11, 30 };
#else
extern const SR_UINT32 IDsnmpEnableAuthenTraps[];
#endif	/* SNMPPART_DECL */
#define LNsnmpEnableAuthenTraps 8
#endif	/* defined(I_snmpEnableAuthenTraps) */


#if defined(I_snmpSilentDrops)
#ifdef SNMPPART_DECL
STdeclare(STsnmpSilentDrops, "snmpSilentDrops")
const SR_UINT32 IDsnmpSilentDrops[] = { 1, 3, 6, 1, 2, 1, 11, 31 };
#else
extern const SR_UINT32 IDsnmpSilentDrops[];
#endif	/* SNMPPART_DECL */
#define LNsnmpSilentDrops 8
#endif	/* defined(I_snmpSilentDrops) */


#if defined(I_snmpProxyDrops)
#ifdef SNMPPART_DECL
STdeclare(STsnmpProxyDrops, "snmpProxyDrops")
const SR_UINT32 IDsnmpProxyDrops[] = { 1, 3, 6, 1, 2, 1, 11, 32 };
#else
extern const SR_UINT32 IDsnmpProxyDrops[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxyDrops 8
#endif	/* defined(I_snmpProxyDrops) */


#if defined(N_experimental)
#ifdef SNMPPART_DECL
const SR_UINT32 IDexperimental[] = { 1, 3, 6, 1, 3 };
#else
extern const SR_UINT32 IDexperimental[];
#endif	/* SNMPPART_DECL */
#define LNexperimental 5
#endif	/* defined(N_experimental) */


#if defined(N_private)
#ifdef SNMPPART_DECL
const SR_UINT32 IDprivate[] = { 1, 3, 6, 1, 4 };
#else
extern const SR_UINT32 IDprivate[];
#endif	/* SNMPPART_DECL */
#define LNprivate 5
#endif	/* defined(N_private) */


#if defined(N_enterprises)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterprises[] = { 1, 3, 6, 1, 4, 1 };
#else
extern const SR_UINT32 IDenterprises[];
#endif	/* SNMPPART_DECL */
#define LNenterprises 6
#endif	/* defined(N_enterprises) */


#if defined(N_unix)
#ifdef SNMPPART_DECL
const SR_UINT32 IDunix[] = { 1, 3, 6, 1, 4, 1, 4 };
#else
extern const SR_UINT32 IDunix[];
#endif	/* SNMPPART_DECL */
#define LNunix 7
#endif	/* defined(N_unix) */


#if defined(N_agents)
#ifdef SNMPPART_DECL
const SR_UINT32 IDagents[] = { 1, 3, 6, 1, 4, 1, 4, 1 };
#else
extern const SR_UINT32 IDagents[];
#endif	/* SNMPPART_DECL */
#define LNagents 8
#endif	/* defined(N_agents) */


#if defined(N_fourBSD_isode)
#ifdef SNMPPART_DECL
const SR_UINT32 IDfourBSD_isode[] = { 1, 3, 6, 1, 4, 1, 4, 1, 2 };
#else
extern const SR_UINT32 IDfourBSD_isode[];
#endif	/* SNMPPART_DECL */
#define LNfourBSD_isode 9
#endif	/* defined(N_fourBSD_isode) */


#if defined(N_peers)
#ifdef SNMPPART_DECL
const SR_UINT32 IDpeers[] = { 1, 3, 6, 1, 4, 1, 4, 3 };
#else
extern const SR_UINT32 IDpeers[];
#endif	/* SNMPPART_DECL */
#define LNpeers 8
#endif	/* defined(N_peers) */


#if defined(N_unixd)
#ifdef SNMPPART_DECL
const SR_UINT32 IDunixd[] = { 1, 3, 6, 1, 4, 1, 4, 3, 1 };
#else
extern const SR_UINT32 IDunixd[];
#endif	/* SNMPPART_DECL */
#define LNunixd 9
#endif	/* defined(N_unixd) */


#if defined(N_snmpResearch)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearch[] = { 1, 3, 6, 1, 4, 1, 99 };
#else
extern const SR_UINT32 IDsnmpResearch[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearch 7
#endif	/* defined(N_snmpResearch) */


#if defined(N_snmpResearchNode)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchNode[] = { 1, 3, 6, 1, 4, 1, 99, 1 };
#else
extern const SR_UINT32 IDsnmpResearchNode[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchNode 8
#endif	/* defined(N_snmpResearchNode) */


#if defined(N_snmpResearchAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1 };
#else
extern const SR_UINT32 IDsnmpResearchAgent[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchAgent 9
#endif	/* defined(N_snmpResearchAgent) */


#if defined(N_snmpResearchUNIXAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchUNIXAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 1 };
#else
extern const SR_UINT32 IDsnmpResearchUNIXAgent[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchUNIXAgent 10
#endif	/* defined(N_snmpResearchUNIXAgent) */


#if defined(N_snmpResearchSnmpd)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchSnmpd[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 1, 1 };
#else
extern const SR_UINT32 IDsnmpResearchSnmpd[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchSnmpd 11
#endif	/* defined(N_snmpResearchSnmpd) */


#if defined(N_snmpResearchProxyAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchProxyAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 2 };
#else
extern const SR_UINT32 IDsnmpResearchProxyAgent[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchProxyAgent 10
#endif	/* defined(N_snmpResearchProxyAgent) */


#if defined(N_snmpResearchLb100Proxy)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchLb100Proxy[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 2, 1 };
#else
extern const SR_UINT32 IDsnmpResearchLb100Proxy[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchLb100Proxy 11
#endif	/* defined(N_snmpResearchLb100Proxy) */


#if defined(N_snmpResearchEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3 };
#else
extern const SR_UINT32 IDsnmpResearchEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchEMANATEMasterAgent 10
#endif	/* defined(N_snmpResearchEMANATEMasterAgent) */


#if defined(N_solarisEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsolarisEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 1 };
#else
extern const SR_UINT32 IDsolarisEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsolarisEMANATEMasterAgent 11
#endif	/* defined(N_solarisEMANATEMasterAgent) */


#if defined(N_solarisTCPEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsolarisTCPEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 2 };
#else
extern const SR_UINT32 IDsolarisTCPEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsolarisTCPEMANATEMasterAgent 11
#endif	/* defined(N_solarisTCPEMANATEMasterAgent) */


#if defined(N_solarisx86TCPEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsolarisx86TCPEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 3 };
#else
extern const SR_UINT32 IDsolarisx86TCPEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsolarisx86TCPEMANATEMasterAgent 11
#endif	/* defined(N_solarisx86TCPEMANATEMasterAgent) */


#if defined(N_sunosEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsunosEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 4 };
#else
extern const SR_UINT32 IDsunosEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsunosEMANATEMasterAgent 11
#endif	/* defined(N_sunosEMANATEMasterAgent) */


#if defined(N_dguxEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdguxEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 5 };
#else
extern const SR_UINT32 IDdguxEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNdguxEMANATEMasterAgent 11
#endif	/* defined(N_dguxEMANATEMasterAgent) */


#if defined(N_hpuxEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDhpuxEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 6 };
#else
extern const SR_UINT32 IDhpuxEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNhpuxEMANATEMasterAgent 11
#endif	/* defined(N_hpuxEMANATEMasterAgent) */


#if defined(N_vxworksEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDvxworksEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 7 };
#else
extern const SR_UINT32 IDvxworksEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNvxworksEMANATEMasterAgent 11
#endif	/* defined(N_vxworksEMANATEMasterAgent) */


#if defined(N_hprtEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDhprtEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 8 };
#else
extern const SR_UINT32 IDhprtEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNhprtEMANATEMasterAgent 11
#endif	/* defined(N_hprtEMANATEMasterAgent) */


#if defined(N_aixEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDaixEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 9 };
#else
extern const SR_UINT32 IDaixEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNaixEMANATEMasterAgent 11
#endif	/* defined(N_aixEMANATEMasterAgent) */


#if defined(N_sco3EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsco3EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 10 };
#else
extern const SR_UINT32 IDsco3EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsco3EMANATEMasterAgent 11
#endif	/* defined(N_sco3EMANATEMasterAgent) */


#if defined(N_ntEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 11 };
#else
extern const SR_UINT32 IDntEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNntEMANATEMasterAgent 11
#endif	/* defined(N_ntEMANATEMasterAgent) */


#if defined(N_win31EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDwin31EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 12 };
#else
extern const SR_UINT32 IDwin31EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNwin31EMANATEMasterAgent 11
#endif	/* defined(N_win31EMANATEMasterAgent) */


#if defined(N_dynixEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdynixEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 13 };
#else
extern const SR_UINT32 IDdynixEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNdynixEMANATEMasterAgent 11
#endif	/* defined(N_dynixEMANATEMasterAgent) */


#if defined(N_osf1EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDosf1EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 14 };
#else
extern const SR_UINT32 IDosf1EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNosf1EMANATEMasterAgent 11
#endif	/* defined(N_osf1EMANATEMasterAgent) */


#if defined(N_ncrEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDncrEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 15 };
#else
extern const SR_UINT32 IDncrEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNncrEMANATEMasterAgent 11
#endif	/* defined(N_ncrEMANATEMasterAgent) */


#if defined(N_sco5EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsco5EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 16 };
#else
extern const SR_UINT32 IDsco5EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsco5EMANATEMasterAgent 11
#endif	/* defined(N_sco5EMANATEMasterAgent) */


#if defined(N_solarisx86EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsolarisx86EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 17 };
#else
extern const SR_UINT32 IDsolarisx86EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsolarisx86EMANATEMasterAgent 11
#endif	/* defined(N_solarisx86EMANATEMasterAgent) */


#if defined(N_freebsdEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDfreebsdEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 18 };
#else
extern const SR_UINT32 IDfreebsdEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNfreebsdEMANATEMasterAgent 11
#endif	/* defined(N_freebsdEMANATEMasterAgent) */


#if defined(N_irixEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDirixEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 19 };
#else
extern const SR_UINT32 IDirixEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNirixEMANATEMasterAgent 11
#endif	/* defined(N_irixEMANATEMasterAgent) */


#if defined(N_os2EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDos2EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 20 };
#else
extern const SR_UINT32 IDos2EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNos2EMANATEMasterAgent 11
#endif	/* defined(N_os2EMANATEMasterAgent) */


#if defined(N_unixwareEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDunixwareEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 21 };
#else
extern const SR_UINT32 IDunixwareEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNunixwareEMANATEMasterAgent 11
#endif	/* defined(N_unixwareEMANATEMasterAgent) */


#if defined(N_bsdiEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDbsdiEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 22 };
#else
extern const SR_UINT32 IDbsdiEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNbsdiEMANATEMasterAgent 11
#endif	/* defined(N_bsdiEMANATEMasterAgent) */


#if defined(N_sinixEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsinixEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 23 };
#else
extern const SR_UINT32 IDsinixEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsinixEMANATEMasterAgent 11
#endif	/* defined(N_sinixEMANATEMasterAgent) */


#if defined(N_ftxEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDftxEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 24 };
#else
extern const SR_UINT32 IDftxEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNftxEMANATEMasterAgent 11
#endif	/* defined(N_ftxEMANATEMasterAgent) */


#if defined(N_hpux10EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDhpux10EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 25 };
#else
extern const SR_UINT32 IDhpux10EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNhpux10EMANATEMasterAgent 11
#endif	/* defined(N_hpux10EMANATEMasterAgent) */


#if defined(N_dguxx86EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdguxx86EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 26 };
#else
extern const SR_UINT32 IDdguxx86EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNdguxx86EMANATEMasterAgent 11
#endif	/* defined(N_dguxx86EMANATEMasterAgent) */


#if defined(N_unixware21EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDunixware21EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 27 };
#else
extern const SR_UINT32 IDunixware21EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNunixware21EMANATEMasterAgent 11
#endif	/* defined(N_unixware21EMANATEMasterAgent) */


#if defined(N_linuxEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDlinuxEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 28 };
#else
extern const SR_UINT32 IDlinuxEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNlinuxEMANATEMasterAgent 11
#endif	/* defined(N_linuxEMANATEMasterAgent) */


#if defined(N_osf4EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDosf4EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 29 };
#else
extern const SR_UINT32 IDosf4EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNosf4EMANATEMasterAgent 11
#endif	/* defined(N_osf4EMANATEMasterAgent) */


#if defined(N_hpux11EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDhpux11EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 30 };
#else
extern const SR_UINT32 IDhpux11EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNhpux11EMANATEMasterAgent 11
#endif	/* defined(N_hpux11EMANATEMasterAgent) */


#if defined(N_nextEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDnextEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 31 };
#else
extern const SR_UINT32 IDnextEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNnextEMANATEMasterAgent 11
#endif	/* defined(N_nextEMANATEMasterAgent) */


#if defined(N_netbsdEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDnetbsdEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 32 };
#else
extern const SR_UINT32 IDnetbsdEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNnetbsdEMANATEMasterAgent 11
#endif	/* defined(N_netbsdEMANATEMasterAgent) */


#if defined(N_openvmsEMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDopenvmsEMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 33 };
#else
extern const SR_UINT32 IDopenvmsEMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNopenvmsEMANATEMasterAgent 11
#endif	/* defined(N_openvmsEMANATEMasterAgent) */


#if defined(N_sol64EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsol64EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 34 };
#else
extern const SR_UINT32 IDsol64EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsol64EMANATEMasterAgent 11
#endif	/* defined(N_sol64EMANATEMasterAgent) */


#if defined(N_sol64x86EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsol64x86EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 35 };
#else
extern const SR_UINT32 IDsol64x86EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNsol64x86EMANATEMasterAgent 11
#endif	/* defined(N_sol64x86EMANATEMasterAgent) */


#if defined(N_hpux64EMANATEMasterAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDhpux64EMANATEMasterAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 3, 36 };
#else
extern const SR_UINT32 IDhpux64EMANATEMasterAgent[];
#endif	/* SNMPPART_DECL */
#define LNhpux64EMANATEMasterAgent 11
#endif	/* defined(N_hpux64EMANATEMasterAgent) */


#if defined(N_snmpResearchLTxxxAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchLTxxxAgent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 4 };
#else
extern const SR_UINT32 IDsnmpResearchLTxxxAgent[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchLTxxxAgent 10
#endif	/* defined(N_snmpResearchLTxxxAgent) */


#if defined(N_snmpResearchLT301Agent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchLT301Agent[] = { 1, 3, 6, 1, 4, 1, 99, 1, 1, 4, 1 };
#else
extern const SR_UINT32 IDsnmpResearchLT301Agent[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchLT301Agent 11
#endif	/* defined(N_snmpResearchLT301Agent) */


#if defined(N_snmpResearchManager)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchManager[] = { 1, 3, 6, 1, 4, 1, 99, 1, 2 };
#else
extern const SR_UINT32 IDsnmpResearchManager[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchManager 9
#endif	/* defined(N_snmpResearchManager) */


#if defined(N_snmpSecurityPack)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpSecurityPack[] = { 1, 3, 6, 1, 4, 1, 99, 1, 2, 1 };
#else
extern const SR_UINT32 IDsnmpSecurityPack[];
#endif	/* SNMPPART_DECL */
#define LNsnmpSecurityPack 10
#endif	/* defined(N_snmpSecurityPack) */


#if defined(N_snmpSecurityPackTgtOid)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpSecurityPackTgtOid[] = { 1, 3, 6, 1, 4, 1, 99, 1, 2, 1, 1 };
#else
extern const SR_UINT32 IDsnmpSecurityPackTgtOid[];
#endif	/* SNMPPART_DECL */
#define LNsnmpSecurityPackTgtOid 11
#endif	/* defined(N_snmpSecurityPackTgtOid) */


#if defined(N_snmpResearchVarVersion)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchVarVersion[] = { 1, 3, 6, 1, 4, 1, 99, 2 };
#else
extern const SR_UINT32 IDsnmpResearchVarVersion[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchVarVersion 8
#endif	/* defined(N_snmpResearchVarVersion) */


#if defined(N_snmpResearchMIBs)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchMIBs[] = { 1, 3, 6, 1, 4, 1, 99, 12 };
#else
extern const SR_UINT32 IDsnmpResearchMIBs[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchMIBs 8
#endif	/* defined(N_snmpResearchMIBs) */


#if defined(N_psMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDpsMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 2 };
#else
extern const SR_UINT32 IDpsMIB[];
#endif	/* SNMPPART_DECL */
#define LNpsMIB 9
#endif	/* defined(N_psMIB) */


#if defined(N_testMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDtestMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 3 };
#else
extern const SR_UINT32 IDtestMIB[];
#endif	/* SNMPPART_DECL */
#define LNtestMIB 9
#endif	/* defined(N_testMIB) */


#if defined(N_snmpResearchload)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchload[] = { 1, 3, 6, 1, 4, 1, 99, 12, 4 };
#else
extern const SR_UINT32 IDsnmpResearchload[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchload 9
#endif	/* defined(N_snmpResearchload) */


#if defined(N_oldExamples)
#ifdef SNMPPART_DECL
const SR_UINT32 IDoldExamples[] = { 1, 3, 6, 1, 4, 1, 99, 12, 5 };
#else
extern const SR_UINT32 IDoldExamples[];
#endif	/* SNMPPART_DECL */
#define LNoldExamples 9
#endif	/* defined(N_oldExamples) */


#if defined(N_dmiTestMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdmiTestMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 6 };
#else
extern const SR_UINT32 IDdmiTestMIB[];
#endif	/* SNMPPART_DECL */
#define LNdmiTestMIB 9
#endif	/* defined(N_dmiTestMIB) */


#if defined(N_emacs2)
#ifdef SNMPPART_DECL
const SR_UINT32 IDemacs2[] = { 1, 3, 6, 1, 4, 1, 99, 12, 7 };
#else
extern const SR_UINT32 IDemacs2[];
#endif	/* SNMPPART_DECL */
#define LNemacs2 9
#endif	/* defined(N_emacs2) */


#if defined(N_sample)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsample[] = { 1, 3, 6, 1, 4, 1, 99, 12, 8 };
#else
extern const SR_UINT32 IDsample[];
#endif	/* SNMPPART_DECL */
#define LNsample 9
#endif	/* defined(N_sample) */


#if defined(N_etc)
#ifdef SNMPPART_DECL
const SR_UINT32 IDetc[] = { 1, 3, 6, 1, 4, 1, 99, 12, 9 };
#else
extern const SR_UINT32 IDetc[];
#endif	/* SNMPPART_DECL */
#define LNetc 9
#endif	/* defined(N_etc) */


#if defined(N_spakes)
#ifdef SNMPPART_DECL
const SR_UINT32 IDspakes[] = { 1, 3, 6, 1, 4, 1, 99, 12, 10 };
#else
extern const SR_UINT32 IDspakes[];
#endif	/* SNMPPART_DECL */
#define LNspakes 9
#endif	/* defined(N_spakes) */


#if defined(N_demo)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdemo[] = { 1, 3, 6, 1, 4, 1, 99, 12, 12 };
#else
extern const SR_UINT32 IDdemo[];
#endif	/* SNMPPART_DECL */
#define LNdemo 9
#endif	/* defined(N_demo) */


#if defined(N_newV2ip)
#ifdef SNMPPART_DECL
const SR_UINT32 IDnewV2ip[] = { 1, 3, 6, 1, 4, 1, 99, 12, 13 };
#else
extern const SR_UINT32 IDnewV2ip[];
#endif	/* SNMPPART_DECL */
#define LNnewV2ip 9
#endif	/* defined(N_newV2ip) */


#if defined(N_newV2udp)
#ifdef SNMPPART_DECL
const SR_UINT32 IDnewV2udp[] = { 1, 3, 6, 1, 4, 1, 99, 12, 14 };
#else
extern const SR_UINT32 IDnewV2udp[];
#endif	/* SNMPPART_DECL */
#define LNnewV2udp 9
#endif	/* defined(N_newV2udp) */


#if defined(N_newV2tcp)
#ifdef SNMPPART_DECL
const SR_UINT32 IDnewV2tcp[] = { 1, 3, 6, 1, 4, 1, 99, 12, 15 };
#else
extern const SR_UINT32 IDnewV2tcp[];
#endif	/* SNMPPART_DECL */
#define LNnewV2tcp 9
#endif	/* defined(N_newV2tcp) */


#if defined(N_clusterMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDclusterMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 16 };
#else
extern const SR_UINT32 IDclusterMIB[];
#endif	/* SNMPPART_DECL */
#define LNclusterMIB 9
#endif	/* defined(N_clusterMIB) */


#if defined(N_instanceRep)
#ifdef SNMPPART_DECL
const SR_UINT32 IDinstanceRep[] = { 1, 3, 6, 1, 4, 1, 99, 12, 17 };
#else
extern const SR_UINT32 IDinstanceRep[];
#endif	/* SNMPPART_DECL */
#define LNinstanceRep 9
#endif	/* defined(N_instanceRep) */


#if defined(N_brassMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDbrassMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 18 };
#else
extern const SR_UINT32 IDbrassMIB[];
#endif	/* SNMPPART_DECL */
#define LNbrassMIB 9
#endif	/* defined(N_brassMIB) */


#if defined(N_srExamples)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrExamples[] = { 1, 3, 6, 1, 4, 1, 99, 12, 19 };
#else
extern const SR_UINT32 IDsrExamples[];
#endif	/* SNMPPART_DECL */
#define LNsrExamples 9
#endif	/* defined(N_srExamples) */


#if defined(N_srBasics)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrBasics[] = { 1, 3, 6, 1, 4, 1, 99, 12, 19, 1 };
#else
extern const SR_UINT32 IDsrBasics[];
#endif	/* SNMPPART_DECL */
#define LNsrBasics 10
#endif	/* defined(N_srBasics) */


#if defined(N_srProductFeatures)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrProductFeatures[] = { 1, 3, 6, 1, 4, 1, 99, 12, 19, 2 };
#else
extern const SR_UINT32 IDsrProductFeatures[];
#endif	/* SNMPPART_DECL */
#define LNsrProductFeatures 10
#endif	/* defined(N_srProductFeatures) */


#if defined(N_latin)
#ifdef SNMPPART_DECL
const SR_UINT32 IDlatin[] = { 1, 3, 6, 1, 4, 1, 99, 12, 21 };
#else
extern const SR_UINT32 IDlatin[];
#endif	/* SNMPPART_DECL */
#define LNlatin 9
#endif	/* defined(N_latin) */


#if defined(N_processControl)
#ifdef SNMPPART_DECL
const SR_UINT32 IDprocessControl[] = { 1, 3, 6, 1, 4, 1, 99, 12, 23 };
#else
extern const SR_UINT32 IDprocessControl[];
#endif	/* SNMPPART_DECL */
#define LNprocessControl 9
#endif	/* defined(N_processControl) */


#if defined(N_ltHardware)
#ifdef SNMPPART_DECL
const SR_UINT32 IDltHardware[] = { 1, 3, 6, 1, 4, 1, 99, 12, 25 };
#else
extern const SR_UINT32 IDltHardware[];
#endif	/* SNMPPART_DECL */
#define LNltHardware 9
#endif	/* defined(N_ltHardware) */


#if defined(N_alias)
#ifdef SNMPPART_DECL
const SR_UINT32 IDalias[] = { 1, 3, 6, 1, 4, 1, 99, 12, 27 };
#else
extern const SR_UINT32 IDalias[];
#endif	/* SNMPPART_DECL */
#define LNalias 9
#endif	/* defined(N_alias) */


#if defined(N_softTrap)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsoftTrap[] = { 1, 3, 6, 1, 4, 1, 99, 12, 28 };
#else
extern const SR_UINT32 IDsoftTrap[];
#endif	/* SNMPPART_DECL */
#define LNsoftTrap 9
#endif	/* defined(N_softTrap) */


#if defined(N_critApp)
#ifdef SNMPPART_DECL
const SR_UINT32 IDcritApp[] = { 1, 3, 6, 1, 4, 1, 99, 12, 29 };
#else
extern const SR_UINT32 IDcritApp[];
#endif	/* SNMPPART_DECL */
#define LNcritApp 9
#endif	/* defined(N_critApp) */


#if defined(N_htmlpage)
#ifdef SNMPPART_DECL
const SR_UINT32 IDhtmlpage[] = { 1, 3, 6, 1, 4, 1, 99, 12, 30 };
#else
extern const SR_UINT32 IDhtmlpage[];
#endif	/* SNMPPART_DECL */
#define LNhtmlpage 9
#endif	/* defined(N_htmlpage) */


#if defined(N_phoneSwitch)
#ifdef SNMPPART_DECL
const SR_UINT32 IDphoneSwitch[] = { 1, 3, 6, 1, 4, 1, 99, 12, 31 };
#else
extern const SR_UINT32 IDphoneSwitch[];
#endif	/* SNMPPART_DECL */
#define LNphoneSwitch 9
#endif	/* defined(N_phoneSwitch) */


#if defined(N_httpToSnmpAuthMappingMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDhttpToSnmpAuthMappingMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 32 };
#else
extern const SR_UINT32 IDhttpToSnmpAuthMappingMIB[];
#endif	/* SNMPPART_DECL */
#define LNhttpToSnmpAuthMappingMIB 9
#endif	/* defined(N_httpToSnmpAuthMappingMIB) */


#if defined(N_srCommunityMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrCommunityMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33 };
#else
extern const SR_UINT32 IDsrCommunityMIB[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunityMIB 9
#endif	/* defined(N_srCommunityMIB) */


#if defined(N_srAgtTest)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrAgtTest[] = { 1, 3, 6, 1, 4, 1, 99, 12, 34 };
#else
extern const SR_UINT32 IDsrAgtTest[];
#endif	/* SNMPPART_DECL */
#define LNsrAgtTest 9
#endif	/* defined(N_srAgtTest) */


#if defined(N_usmTargetTagMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusmTargetTagMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 35 };
#else
extern const SR_UINT32 IDusmTargetTagMIB[];
#endif	/* SNMPPART_DECL */
#define LNusmTargetTagMIB 9
#endif	/* defined(N_usmTargetTagMIB) */


#if defined(N_tgtAddressMaskMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDtgtAddressMaskMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 36 };
#else
extern const SR_UINT32 IDtgtAddressMaskMIB[];
#endif	/* SNMPPART_DECL */
#define LNtgtAddressMaskMIB 9
#endif	/* defined(N_tgtAddressMaskMIB) */


#if defined(N_siServiceMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsiServiceMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 38 };
#else
extern const SR_UINT32 IDsiServiceMIB[];
#endif	/* SNMPPART_DECL */
#define LNsiServiceMIB 9
#endif	/* defined(N_siServiceMIB) */


#if defined(N_siFsMonitor)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsiFsMonitor[] = { 1, 3, 6, 1, 4, 1, 99, 12, 39 };
#else
extern const SR_UINT32 IDsiFsMonitor[];
#endif	/* SNMPPART_DECL */
#define LNsiFsMonitor 9
#endif	/* defined(N_siFsMonitor) */


#if defined(N_siLog)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsiLog[] = { 1, 3, 6, 1, 4, 1, 99, 12, 40 };
#else
extern const SR_UINT32 IDsiLog[];
#endif	/* SNMPPART_DECL */
#define LNsiLog 9
#endif	/* defined(N_siLog) */


#if defined(N_smExtensionMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsmExtensionMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 41 };
#else
extern const SR_UINT32 IDsmExtensionMIB[];
#endif	/* SNMPPART_DECL */
#define LNsmExtensionMIB 9
#endif	/* defined(N_smExtensionMIB) */


#if defined(N_siCIAgentEval)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsiCIAgentEval[] = { 1, 3, 6, 1, 4, 1, 99, 12, 42 };
#else
extern const SR_UINT32 IDsiCIAgentEval[];
#endif	/* SNMPPART_DECL */
#define LNsiCIAgentEval 9
#endif	/* defined(N_siCIAgentEval) */


#if defined(N_siCIAgentEvalExpiredMsg)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsiCIAgentEvalExpiredMsg[] = { 1, 3, 6, 1, 4, 1, 99, 12, 42, 1 };
#else
extern const SR_UINT32 IDsiCIAgentEvalExpiredMsg[];
#endif	/* SNMPPART_DECL */
#define LNsiCIAgentEvalExpiredMsg 10
#endif	/* defined(N_siCIAgentEvalExpiredMsg) */


#if defined(N_siCIAgentEvalExpiredTrap)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsiCIAgentEvalExpiredTrap[] = { 1, 3, 6, 1, 4, 1, 99, 12, 42, 10 };
#else
extern const SR_UINT32 IDsiCIAgentEvalExpiredTrap[];
#endif	/* SNMPPART_DECL */
#define LNsiCIAgentEvalExpiredTrap 10
#endif	/* defined(N_siCIAgentEvalExpiredTrap) */


#if defined(N_siKernelMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsiKernelMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 43 };
#else
extern const SR_UINT32 IDsiKernelMIB[];
#endif	/* SNMPPART_DECL */
#define LNsiKernelMIB 9
#endif	/* defined(N_siKernelMIB) */


#if defined(N_srAutoDiscovery)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrAutoDiscovery[] = { 1, 3, 6, 1, 4, 1, 99, 12, 44 };
#else
extern const SR_UINT32 IDsrAutoDiscovery[];
#endif	/* SNMPPART_DECL */
#define LNsrAutoDiscovery 9
#endif	/* defined(N_srAutoDiscovery) */


#if defined(N_snmpSecurityPackMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpSecurityPackMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 45 };
#else
extern const SR_UINT32 IDsnmpSecurityPackMIB[];
#endif	/* SNMPPART_DECL */
#define LNsnmpSecurityPackMIB 9
#endif	/* defined(N_snmpSecurityPackMIB) */


#if defined(N_srAgentInfo)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrAgentInfo[] = { 1, 3, 6, 1, 4, 1, 99, 12, 46 };
#else
extern const SR_UINT32 IDsrAgentInfo[];
#endif	/* SNMPPART_DECL */
#define LNsrAgentInfo 9
#endif	/* defined(N_srAgentInfo) */


#if defined(I_srAgentInfoDescr)
#ifdef SNMPPART_DECL
STdeclare(STsrAgentInfoDescr, "srAgentInfoDescr")
const SR_UINT32 IDsrAgentInfoDescr[] = { 1, 3, 6, 1, 4, 1, 99, 12, 46, 1 };
#else
extern const SR_UINT32 IDsrAgentInfoDescr[];
#endif	/* SNMPPART_DECL */
#define LNsrAgentInfoDescr 10
#endif	/* defined(I_srAgentInfoDescr) */


#if defined(I_srAgentInfoOSFlavor)
#ifdef SNMPPART_DECL
STdeclare(STsrAgentInfoOSFlavor, "srAgentInfoOSFlavor")
const SR_UINT32 IDsrAgentInfoOSFlavor[] = { 1, 3, 6, 1, 4, 1, 99, 12, 46, 2 };
#else
extern const SR_UINT32 IDsrAgentInfoOSFlavor[];
#endif	/* SNMPPART_DECL */
#define LNsrAgentInfoOSFlavor 10
#endif	/* defined(I_srAgentInfoOSFlavor) */


#if defined(N_epicCLIMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDepicCLIMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 47 };
#else
extern const SR_UINT32 IDepicCLIMIB[];
#endif	/* SNMPPART_DECL */
#define LNepicCLIMIB 9
#endif	/* defined(N_epicCLIMIB) */


#if defined(N_mgrHintsMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmgrHintsMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 48 };
#else
extern const SR_UINT32 IDmgrHintsMIB[];
#endif	/* SNMPPART_DECL */
#define LNmgrHintsMIB 9
#endif	/* defined(N_mgrHintsMIB) */


#if defined(N_srPrograms)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrPrograms[] = { 1, 3, 6, 1, 4, 1, 99, 13 };
#else
extern const SR_UINT32 IDsrPrograms[];
#endif	/* SNMPPART_DECL */
#define LNsrPrograms 8
#endif	/* defined(N_srPrograms) */


#if defined(N_srExperimental)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrExperimental[] = { 1, 3, 6, 1, 4, 1, 99, 15 };
#else
extern const SR_UINT32 IDsrExperimental[];
#endif	/* SNMPPART_DECL */
#define LNsrExperimental 8
#endif	/* defined(N_srExperimental) */


#if defined(N_srExperimentalMIBs)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrExperimentalMIBs[] = { 1, 3, 6, 1, 4, 1, 99, 15, 1 };
#else
extern const SR_UINT32 IDsrExperimentalMIBs[];
#endif	/* SNMPPART_DECL */
#define LNsrExperimentalMIBs 9
#endif	/* defined(N_srExperimentalMIBs) */


#if defined(N_httpSecurityMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDhttpSecurityMIB[] = { 1, 3, 6, 1, 4, 1, 99, 15, 1, 1 };
#else
extern const SR_UINT32 IDhttpSecurityMIB[];
#endif	/* SNMPPART_DECL */
#define LNhttpSecurityMIB 10
#endif	/* defined(N_httpSecurityMIB) */


#if defined(N_reconfigMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDreconfigMIB[] = { 1, 3, 6, 1, 4, 1, 99, 15, 1, 2 };
#else
extern const SR_UINT32 IDreconfigMIB[];
#endif	/* SNMPPART_DECL */
#define LNreconfigMIB 10
#endif	/* defined(N_reconfigMIB) */


#if defined(N_reconfigAgent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDreconfigAgent[] = { 1, 3, 6, 1, 4, 1, 99, 15, 1, 2, 1 };
#else
extern const SR_UINT32 IDreconfigAgent[];
#endif	/* SNMPPART_DECL */
#define LNreconfigAgent 11
#endif	/* defined(N_reconfigAgent) */


#if defined(N_loadSubagent)
#ifdef SNMPPART_DECL
const SR_UINT32 IDloadSubagent[] = { 1, 3, 6, 1, 4, 1, 99, 15, 1, 2, 2 };
#else
extern const SR_UINT32 IDloadSubagent[];
#endif	/* SNMPPART_DECL */
#define LNloadSubagent 11
#endif	/* defined(N_loadSubagent) */


#if defined(N_srSmExt)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrSmExt[] = { 1, 3, 6, 1, 4, 1, 99, 15, 1, 3 };
#else
extern const SR_UINT32 IDsrSmExt[];
#endif	/* SNMPPART_DECL */
#define LNsrSmExt 10
#endif	/* defined(N_srSmExt) */


#if defined(N_eventMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDeventMIB[] = { 1, 3, 6, 1, 4, 1, 99, 15, 1, 5 };
#else
extern const SR_UINT32 IDeventMIB[];
#endif	/* SNMPPART_DECL */
#define LNeventMIB 10
#endif	/* defined(N_eventMIB) */


#if defined(N_srExperimentalDomains)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrExperimentalDomains[] = { 1, 3, 6, 1, 4, 1, 99, 15, 2 };
#else
extern const SR_UINT32 IDsrExperimentalDomains[];
#endif	/* SNMPPART_DECL */
#define LNsrExperimentalDomains 9
#endif	/* defined(N_srExperimentalDomains) */


#if defined(N_httpTCPIPDomain)
#ifdef SNMPPART_DECL
const SR_UINT32 IDhttpTCPIPDomain[] = { 1, 3, 6, 1, 4, 1, 99, 15, 2, 1 };
#else
extern const SR_UINT32 IDhttpTCPIPDomain[];
#endif	/* SNMPPART_DECL */
#define LNhttpTCPIPDomain 10
#endif	/* defined(N_httpTCPIPDomain) */


#if defined(N_snmpTCPDomain)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpTCPDomain[] = { 1, 3, 6, 1, 4, 1, 99, 15, 2, 2 };
#else
extern const SR_UINT32 IDsnmpTCPDomain[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTCPDomain 10
#endif	/* defined(N_snmpTCPDomain) */


#if defined(N_srExperimentalAPOErrorCodes)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrExperimentalAPOErrorCodes[] = { 1, 3, 6, 1, 4, 1, 99, 15, 3 };
#else
extern const SR_UINT32 IDsrExperimentalAPOErrorCodes[];
#endif	/* SNMPPART_DECL */
#define LNsrExperimentalAPOErrorCodes 9
#endif	/* defined(N_srExperimentalAPOErrorCodes) */


#if defined(N_srExperimentalAPOConsortium)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrExperimentalAPOConsortium[] = { 1, 3, 6, 1, 4, 1, 99, 15, 4 };
#else
extern const SR_UINT32 IDsrExperimentalAPOConsortium[];
#endif	/* SNMPPART_DECL */
#define LNsrExperimentalAPOConsortium 9
#endif	/* defined(N_srExperimentalAPOConsortium) */


#if defined(N_secureIntelligence)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsecureIntelligence[] = { 1, 3, 6, 1, 4, 1, 99, 16 };
#else
extern const SR_UINT32 IDsecureIntelligence[];
#endif	/* SNMPPART_DECL */
#define LNsecureIntelligence 8
#endif	/* defined(N_secureIntelligence) */


#if defined(N_enterpol)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpol[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1 };
#else
extern const SR_UINT32 IDenterpol[];
#endif	/* SNMPPART_DECL */
#define LNenterpol 9
#endif	/* defined(N_enterpol) */


#if defined(N_enterpolEvents)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolEvents[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 1 };
#else
extern const SR_UINT32 IDenterpolEvents[];
#endif	/* SNMPPART_DECL */
#define LNenterpolEvents 10
#endif	/* defined(N_enterpolEvents) */


#if defined(N_enterpolStatusEvents)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolStatusEvents[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 1, 1 };
#else
extern const SR_UINT32 IDenterpolStatusEvents[];
#endif	/* SNMPPART_DECL */
#define LNenterpolStatusEvents 11
#endif	/* defined(N_enterpolStatusEvents) */


#if defined(N_enterpolPingFailed)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolPingFailed[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 1, 1, 1 };
#else
extern const SR_UINT32 IDenterpolPingFailed[];
#endif	/* SNMPPART_DECL */
#define LNenterpolPingFailed 12
#endif	/* defined(N_enterpolPingFailed) */


#if defined(N_enterpolPollFailed)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolPollFailed[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 1, 1, 2 };
#else
extern const SR_UINT32 IDenterpolPollFailed[];
#endif	/* SNMPPART_DECL */
#define LNenterpolPollFailed 12
#endif	/* defined(N_enterpolPollFailed) */


#if defined(N_enterpolCdistribEvents)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolCdistribEvents[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 1, 2 };
#else
extern const SR_UINT32 IDenterpolCdistribEvents[];
#endif	/* SNMPPART_DECL */
#define LNenterpolCdistribEvents 11
#endif	/* defined(N_enterpolCdistribEvents) */


#if defined(N_enterpolRemoteEvents)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolRemoteEvents[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 1, 3 };
#else
extern const SR_UINT32 IDenterpolRemoteEvents[];
#endif	/* SNMPPART_DECL */
#define LNenterpolRemoteEvents 11
#endif	/* defined(N_enterpolRemoteEvents) */


#if defined(N_enterpolVarBinds)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolVarBinds[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 2 };
#else
extern const SR_UINT32 IDenterpolVarBinds[];
#endif	/* SNMPPART_DECL */
#define LNenterpolVarBinds 10
#endif	/* defined(N_enterpolVarBinds) */


#if defined(N_enterpolMapName)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolMapName[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 2, 1 };
#else
extern const SR_UINT32 IDenterpolMapName[];
#endif	/* SNMPPART_DECL */
#define LNenterpolMapName 11
#endif	/* defined(N_enterpolMapName) */


#if defined(N_enterpolScript)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolScript[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 2, 2 };
#else
extern const SR_UINT32 IDenterpolScript[];
#endif	/* SNMPPART_DECL */
#define LNenterpolScript 11
#endif	/* defined(N_enterpolScript) */


#if defined(N_enterpolProcesses)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolProcesses[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 3 };
#else
extern const SR_UINT32 IDenterpolProcesses[];
#endif	/* SNMPPART_DECL */
#define LNenterpolProcesses 10
#endif	/* defined(N_enterpolProcesses) */


#if defined(N_cdistrib)
#ifdef SNMPPART_DECL
const SR_UINT32 IDcdistrib[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 3, 1 };
#else
extern const SR_UINT32 IDcdistrib[];
#endif	/* SNMPPART_DECL */
#define LNcdistrib 11
#endif	/* defined(N_cdistrib) */


#if defined(N_pconfig)
#ifdef SNMPPART_DECL
const SR_UINT32 IDpconfig[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 3, 2 };
#else
extern const SR_UINT32 IDpconfig[];
#endif	/* SNMPPART_DECL */
#define LNpconfig 11
#endif	/* defined(N_pconfig) */


#if defined(N_enterpolSubsystems)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterpolSubsystems[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 4 };
#else
extern const SR_UINT32 IDenterpolSubsystems[];
#endif	/* SNMPPART_DECL */
#define LNenterpolSubsystems 10
#endif	/* defined(N_enterpolSubsystems) */


#if defined(N_pmamm)
#ifdef SNMPPART_DECL
const SR_UINT32 IDpmamm[] = { 1, 3, 6, 1, 4, 1, 99, 16, 1, 4, 1 };
#else
extern const SR_UINT32 IDpmamm[];
#endif	/* SNMPPART_DECL */
#define LNpmamm 11
#endif	/* defined(N_pmamm) */


#if defined(N_policyBasedManagement)
#ifdef SNMPPART_DECL
const SR_UINT32 IDpolicyBasedManagement[] = { 1, 3, 6, 1, 4, 1, 99, 17 };
#else
extern const SR_UINT32 IDpolicyBasedManagement[];
#endif	/* SNMPPART_DECL */
#define LNpolicyBasedManagement 8
#endif	/* defined(N_policyBasedManagement) */


#if defined(N_pbmScratchPad)
#ifdef SNMPPART_DECL
const SR_UINT32 IDpbmScratchPad[] = { 1, 3, 6, 1, 4, 1, 99, 17, 1 };
#else
extern const SR_UINT32 IDpbmScratchPad[];
#endif	/* SNMPPART_DECL */
#define LNpbmScratchPad 9
#endif	/* defined(N_pbmScratchPad) */


#if defined(N_srAgentCapabilities)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrAgentCapabilities[] = { 1, 3, 6, 1, 4, 1, 99, 18 };
#else
extern const SR_UINT32 IDsrAgentCapabilities[];
#endif	/* SNMPPART_DECL */
#define LNsrAgentCapabilities 8
#endif	/* defined(N_srAgentCapabilities) */


#if defined(N_mlmMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmlmMIB[] = { 1, 3, 6, 1, 4, 1, 99, 42 };
#else
extern const SR_UINT32 IDmlmMIB[];
#endif	/* SNMPPART_DECL */
#define LNmlmMIB 8
#endif	/* defined(N_mlmMIB) */


#if defined(N_apoConsortium)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoConsortium[] = { 1, 3, 6, 1, 4, 1, 21734 };
#else
extern const SR_UINT32 IDapoConsortium[];
#endif	/* SNMPPART_DECL */
#define LNapoConsortium 7
#endif	/* defined(N_apoConsortium) */


#if defined(N_apoModules)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoModules[] = { 1, 3, 6, 1, 4, 1, 21734, 1 };
#else
extern const SR_UINT32 IDapoModules[];
#endif	/* SNMPPART_DECL */
#define LNapoModules 8
#endif	/* defined(N_apoModules) */


#if defined(N_apoCapabilitiesMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoCapabilitiesMIB[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1 };
#else
extern const SR_UINT32 IDapoCapabilitiesMIB[];
#endif	/* SNMPPART_DECL */
#define LNapoCapabilitiesMIB 9
#endif	/* defined(N_apoCapabilitiesMIB) */


#if defined(N_apoCapabilitiesObjects)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoCapabilitiesObjects[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1, 1 };
#else
extern const SR_UINT32 IDapoCapabilitiesObjects[];
#endif	/* SNMPPART_DECL */
#define LNapoCapabilitiesObjects 10
#endif	/* defined(N_apoCapabilitiesObjects) */


#if defined(I_apoSupportedPduClasses)
#ifdef SNMPPART_DECL
STdeclare(STapoSupportedPduClasses, "apoSupportedPduClasses")
const SR_UINT32 IDapoSupportedPduClasses[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1, 1, 1 };
#else
extern const SR_UINT32 IDapoSupportedPduClasses[];
#endif	/* SNMPPART_DECL */
#define LNapoSupportedPduClasses 11
#endif	/* defined(I_apoSupportedPduClasses) */


#if defined(I_apoSupportedSnmpVersions)
#ifdef SNMPPART_DECL
STdeclare(STapoSupportedSnmpVersions, "apoSupportedSnmpVersions")
const SR_UINT32 IDapoSupportedSnmpVersions[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1, 1, 2 };
#else
extern const SR_UINT32 IDapoSupportedSnmpVersions[];
#endif	/* SNMPPART_DECL */
#define LNapoSupportedSnmpVersions 11
#endif	/* defined(I_apoSupportedSnmpVersions) */


#if defined(I_apoSupportedSecurityModels)
#ifdef SNMPPART_DECL
STdeclare(STapoSupportedSecurityModels, "apoSupportedSecurityModels")
const SR_UINT32 IDapoSupportedSecurityModels[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1, 1, 3 };
#else
extern const SR_UINT32 IDapoSupportedSecurityModels[];
#endif	/* SNMPPART_DECL */
#define LNapoSupportedSecurityModels 11
#endif	/* defined(I_apoSupportedSecurityModels) */







#if defined(I_apoAdditionalSupportedSecurityModelsDescr)
#ifdef SNMPPART_DECL
STdeclare(STapoAdditionalSupportedSecurityModelsDescr, "apoAdditionalSupportedSecurityModelsDescr")
const SR_UINT32 IDapoAdditionalSupportedSecurityModelsDescr[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1, 1, 4, 1, 2 };
#else
extern const SR_UINT32 IDapoAdditionalSupportedSecurityModelsDescr[];
#endif	/* SNMPPART_DECL */
#define LNapoAdditionalSupportedSecurityModelsDescr 13
#endif	/* defined(I_apoAdditionalSupportedSecurityModelsDescr) */


#if defined(I_apoSupportedAuthProtocols)
#ifdef SNMPPART_DECL
STdeclare(STapoSupportedAuthProtocols, "apoSupportedAuthProtocols")
const SR_UINT32 IDapoSupportedAuthProtocols[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1, 1, 5 };
#else
extern const SR_UINT32 IDapoSupportedAuthProtocols[];
#endif	/* SNMPPART_DECL */
#define LNapoSupportedAuthProtocols 11
#endif	/* defined(I_apoSupportedAuthProtocols) */







#if defined(I_apoAdditionalSupportedAuthProtocolsDescr)
#ifdef SNMPPART_DECL
STdeclare(STapoAdditionalSupportedAuthProtocolsDescr, "apoAdditionalSupportedAuthProtocolsDescr")
const SR_UINT32 IDapoAdditionalSupportedAuthProtocolsDescr[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1, 1, 6, 1, 2 };
#else
extern const SR_UINT32 IDapoAdditionalSupportedAuthProtocolsDescr[];
#endif	/* SNMPPART_DECL */
#define LNapoAdditionalSupportedAuthProtocolsDescr 13
#endif	/* defined(I_apoAdditionalSupportedAuthProtocolsDescr) */


#if defined(I_apoSupportedPrivProtocols)
#ifdef SNMPPART_DECL
STdeclare(STapoSupportedPrivProtocols, "apoSupportedPrivProtocols")
const SR_UINT32 IDapoSupportedPrivProtocols[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1, 1, 7 };
#else
extern const SR_UINT32 IDapoSupportedPrivProtocols[];
#endif	/* SNMPPART_DECL */
#define LNapoSupportedPrivProtocols 11
#endif	/* defined(I_apoSupportedPrivProtocols) */







#if defined(I_apoAdditionalSupportedPrivProtocolsDescr)
#ifdef SNMPPART_DECL
STdeclare(STapoAdditionalSupportedPrivProtocolsDescr, "apoAdditionalSupportedPrivProtocolsDescr")
const SR_UINT32 IDapoAdditionalSupportedPrivProtocolsDescr[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 1, 1, 8, 1, 2 };
#else
extern const SR_UINT32 IDapoAdditionalSupportedPrivProtocolsDescr[];
#endif	/* SNMPPART_DECL */
#define LNapoAdditionalSupportedPrivProtocolsDescr 13
#endif	/* defined(I_apoAdditionalSupportedPrivProtocolsDescr) */


#if defined(N_apoAggregateMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoAggregateMIB[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 2 };
#else
extern const SR_UINT32 IDapoAggregateMIB[];
#endif	/* SNMPPART_DECL */
#define LNapoAggregateMIB 9
#endif	/* defined(N_apoAggregateMIB) */


#if defined(N_apoTargetParamsMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoTargetParamsMIB[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 3 };
#else
extern const SR_UINT32 IDapoTargetParamsMIB[];
#endif	/* SNMPPART_DECL */
#define LNapoTargetParamsMIB 9
#endif	/* defined(N_apoTargetParamsMIB) */


#if defined(N_apoErrorCodes)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoErrorCodes[] = { 1, 3, 6, 1, 4, 1, 21734, 2 };
#else
extern const SR_UINT32 IDapoErrorCodes[];
#endif	/* SNMPPART_DECL */
#define LNapoErrorCodes 8
#endif	/* defined(N_apoErrorCodes) */


#if defined(N_apoNoError)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoNoError[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 0 };
#else
extern const SR_UINT32 IDapoNoError[];
#endif	/* SNMPPART_DECL */
#define LNapoNoError 9
#endif	/* defined(N_apoNoError) */


#if defined(N_apoTooBig)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoTooBig[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 1 };
#else
extern const SR_UINT32 IDapoTooBig[];
#endif	/* SNMPPART_DECL */
#define LNapoTooBig 9
#endif	/* defined(N_apoTooBig) */


#if defined(N_apoNoSuchName)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoNoSuchName[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 2 };
#else
extern const SR_UINT32 IDapoNoSuchName[];
#endif	/* SNMPPART_DECL */
#define LNapoNoSuchName 9
#endif	/* defined(N_apoNoSuchName) */


#if defined(N_apoBadValue)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoBadValue[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 3 };
#else
extern const SR_UINT32 IDapoBadValue[];
#endif	/* SNMPPART_DECL */
#define LNapoBadValue 9
#endif	/* defined(N_apoBadValue) */


#if defined(N_apoReadOnly)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoReadOnly[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 4 };
#else
extern const SR_UINT32 IDapoReadOnly[];
#endif	/* SNMPPART_DECL */
#define LNapoReadOnly 9
#endif	/* defined(N_apoReadOnly) */


#if defined(N_apoGenErr)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoGenErr[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 5 };
#else
extern const SR_UINT32 IDapoGenErr[];
#endif	/* SNMPPART_DECL */
#define LNapoGenErr 9
#endif	/* defined(N_apoGenErr) */


#if defined(N_apoNoAccess)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoNoAccess[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 6 };
#else
extern const SR_UINT32 IDapoNoAccess[];
#endif	/* SNMPPART_DECL */
#define LNapoNoAccess 9
#endif	/* defined(N_apoNoAccess) */


#if defined(N_apoWrongType)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoWrongType[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 7 };
#else
extern const SR_UINT32 IDapoWrongType[];
#endif	/* SNMPPART_DECL */
#define LNapoWrongType 9
#endif	/* defined(N_apoWrongType) */


#if defined(N_apoWrongLength)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoWrongLength[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 8 };
#else
extern const SR_UINT32 IDapoWrongLength[];
#endif	/* SNMPPART_DECL */
#define LNapoWrongLength 9
#endif	/* defined(N_apoWrongLength) */


#if defined(N_apoWrongEncoding)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoWrongEncoding[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 9 };
#else
extern const SR_UINT32 IDapoWrongEncoding[];
#endif	/* SNMPPART_DECL */
#define LNapoWrongEncoding 9
#endif	/* defined(N_apoWrongEncoding) */


#if defined(N_apoWrongValue)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoWrongValue[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 10 };
#else
extern const SR_UINT32 IDapoWrongValue[];
#endif	/* SNMPPART_DECL */
#define LNapoWrongValue 9
#endif	/* defined(N_apoWrongValue) */


#if defined(N_apoNoCreation)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoNoCreation[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 11 };
#else
extern const SR_UINT32 IDapoNoCreation[];
#endif	/* SNMPPART_DECL */
#define LNapoNoCreation 9
#endif	/* defined(N_apoNoCreation) */


#if defined(N_apoInconsistentValue)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoInconsistentValue[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 12 };
#else
extern const SR_UINT32 IDapoInconsistentValue[];
#endif	/* SNMPPART_DECL */
#define LNapoInconsistentValue 9
#endif	/* defined(N_apoInconsistentValue) */


#if defined(N_apoRapourceUnavailable)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoRapourceUnavailable[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 13 };
#else
extern const SR_UINT32 IDapoRapourceUnavailable[];
#endif	/* SNMPPART_DECL */
#define LNapoRapourceUnavailable 9
#endif	/* defined(N_apoRapourceUnavailable) */


#if defined(N_apoCommitFailed)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoCommitFailed[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 14 };
#else
extern const SR_UINT32 IDapoCommitFailed[];
#endif	/* SNMPPART_DECL */
#define LNapoCommitFailed 9
#endif	/* defined(N_apoCommitFailed) */


#if defined(N_apoUndoFailed)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoUndoFailed[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 15 };
#else
extern const SR_UINT32 IDapoUndoFailed[];
#endif	/* SNMPPART_DECL */
#define LNapoUndoFailed 9
#endif	/* defined(N_apoUndoFailed) */


#if defined(N_apoAuthorizationError)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoAuthorizationError[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 16 };
#else
extern const SR_UINT32 IDapoAuthorizationError[];
#endif	/* SNMPPART_DECL */
#define LNapoAuthorizationError 9
#endif	/* defined(N_apoAuthorizationError) */


#if defined(N_apoNotWritable)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoNotWritable[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 17 };
#else
extern const SR_UINT32 IDapoNotWritable[];
#endif	/* SNMPPART_DECL */
#define LNapoNotWritable 9
#endif	/* defined(N_apoNotWritable) */


#if defined(N_apoInconsistentName)
#ifdef SNMPPART_DECL
const SR_UINT32 IDapoInconsistentName[] = { 1, 3, 6, 1, 4, 1, 21734, 2, 18 };
#else
extern const SR_UINT32 IDapoInconsistentName[];
#endif	/* SNMPPART_DECL */
#define LNapoInconsistentName 9
#endif	/* defined(N_apoInconsistentName) */


#if defined(N_security)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsecurity[] = { 1, 3, 6, 1, 5 };
#else
extern const SR_UINT32 IDsecurity[];
#endif	/* SNMPPART_DECL */
#define LNsecurity 5
#endif	/* defined(N_security) */


#if defined(N_snmpV2)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpV2[] = { 1, 3, 6, 1, 6 };
#else
extern const SR_UINT32 IDsnmpV2[];
#endif	/* SNMPPART_DECL */
#define LNsnmpV2 5
#endif	/* defined(N_snmpV2) */


#if defined(N_snmpDomains)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpDomains[] = { 1, 3, 6, 1, 6, 1 };
#else
extern const SR_UINT32 IDsnmpDomains[];
#endif	/* SNMPPART_DECL */
#define LNsnmpDomains 6
#endif	/* defined(N_snmpDomains) */


#if defined(N_snmpUDPDomain)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpUDPDomain[] = { 1, 3, 6, 1, 6, 1, 1 };
#else
extern const SR_UINT32 IDsnmpUDPDomain[];
#endif	/* SNMPPART_DECL */
#define LNsnmpUDPDomain 7
#endif	/* defined(N_snmpUDPDomain) */


#if defined(N_snmpCLNSDomain)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpCLNSDomain[] = { 1, 3, 6, 1, 6, 1, 2 };
#else
extern const SR_UINT32 IDsnmpCLNSDomain[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCLNSDomain 7
#endif	/* defined(N_snmpCLNSDomain) */


#if defined(N_snmpCONSDomain)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpCONSDomain[] = { 1, 3, 6, 1, 6, 1, 3 };
#else
extern const SR_UINT32 IDsnmpCONSDomain[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCONSDomain 7
#endif	/* defined(N_snmpCONSDomain) */


#if defined(N_snmpDDPDomain)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpDDPDomain[] = { 1, 3, 6, 1, 6, 1, 4 };
#else
extern const SR_UINT32 IDsnmpDDPDomain[];
#endif	/* SNMPPART_DECL */
#define LNsnmpDDPDomain 7
#endif	/* defined(N_snmpDDPDomain) */


#if defined(N_snmpIPXDomain)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpIPXDomain[] = { 1, 3, 6, 1, 6, 1, 5 };
#else
extern const SR_UINT32 IDsnmpIPXDomain[];
#endif	/* SNMPPART_DECL */
#define LNsnmpIPXDomain 7
#endif	/* defined(N_snmpIPXDomain) */


#if defined(N_snmpProxys)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpProxys[] = { 1, 3, 6, 1, 6, 2 };
#else
extern const SR_UINT32 IDsnmpProxys[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxys 6
#endif	/* defined(N_snmpProxys) */


#if defined(N_rfc1157Proxy)
#ifdef SNMPPART_DECL
const SR_UINT32 IDrfc1157Proxy[] = { 1, 3, 6, 1, 6, 2, 1 };
#else
extern const SR_UINT32 IDrfc1157Proxy[];
#endif	/* SNMPPART_DECL */
#define LNrfc1157Proxy 7
#endif	/* defined(N_rfc1157Proxy) */


#if defined(N_rfc1157Domain)
#ifdef SNMPPART_DECL
const SR_UINT32 IDrfc1157Domain[] = { 1, 3, 6, 1, 6, 2, 1, 1 };
#else
extern const SR_UINT32 IDrfc1157Domain[];
#endif	/* SNMPPART_DECL */
#define LNrfc1157Domain 8
#endif	/* defined(N_rfc1157Domain) */


#if defined(N_snmpModules)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpModules[] = { 1, 3, 6, 1, 6, 3 };
#else
extern const SR_UINT32 IDsnmpModules[];
#endif	/* SNMPPART_DECL */
#define LNsnmpModules 6
#endif	/* defined(N_snmpModules) */


#if defined(N_snmpMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpMIB[] = { 1, 3, 6, 1, 6, 3, 1 };
#else
extern const SR_UINT32 IDsnmpMIB[];
#endif	/* SNMPPART_DECL */
#define LNsnmpMIB 7
#endif	/* defined(N_snmpMIB) */


#if defined(N_snmpMIBObjects)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpMIBObjects[] = { 1, 3, 6, 1, 6, 3, 1, 1 };
#else
extern const SR_UINT32 IDsnmpMIBObjects[];
#endif	/* SNMPPART_DECL */
#define LNsnmpMIBObjects 8
#endif	/* defined(N_snmpMIBObjects) */


#if defined(N_snmpTrap)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpTrap[] = { 1, 3, 6, 1, 6, 3, 1, 1, 4 };
#else
extern const SR_UINT32 IDsnmpTrap[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTrap 9
#endif	/* defined(N_snmpTrap) */




#if defined(N_snmpTraps)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpTraps[] = { 1, 3, 6, 1, 6, 3, 1, 1, 5 };
#else
extern const SR_UINT32 IDsnmpTraps[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTraps 9
#endif	/* defined(N_snmpTraps) */


#if defined(N_coldStart)
#ifdef SNMPPART_DECL
const SR_UINT32 IDcoldStart[] = { 1, 3, 6, 1, 6, 3, 1, 1, 5, 1 };
#else
extern const SR_UINT32 IDcoldStart[];
#endif	/* SNMPPART_DECL */
#define LNcoldStart 10
#endif	/* defined(N_coldStart) */


#if defined(N_warmStart)
#ifdef SNMPPART_DECL
const SR_UINT32 IDwarmStart[] = { 1, 3, 6, 1, 6, 3, 1, 1, 5, 2 };
#else
extern const SR_UINT32 IDwarmStart[];
#endif	/* SNMPPART_DECL */
#define LNwarmStart 10
#endif	/* defined(N_warmStart) */


#if defined(N_authenticationFailure)
#ifdef SNMPPART_DECL
const SR_UINT32 IDauthenticationFailure[] = { 1, 3, 6, 1, 6, 3, 1, 1, 5, 5 };
#else
extern const SR_UINT32 IDauthenticationFailure[];
#endif	/* SNMPPART_DECL */
#define LNauthenticationFailure 10
#endif	/* defined(N_authenticationFailure) */


#if defined(N_snmpSet)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpSet[] = { 1, 3, 6, 1, 6, 3, 1, 1, 6 };
#else
extern const SR_UINT32 IDsnmpSet[];
#endif	/* SNMPPART_DECL */
#define LNsnmpSet 9
#endif	/* defined(N_snmpSet) */


#if defined(I_snmpSetSerialNo)
#ifdef SNMPPART_DECL
STdeclare(STsnmpSetSerialNo, "snmpSetSerialNo")
const SR_UINT32 IDsnmpSetSerialNo[] = { 1, 3, 6, 1, 6, 3, 1, 1, 6, 1 };
#else
extern const SR_UINT32 IDsnmpSetSerialNo[];
#endif	/* SNMPPART_DECL */
#define LNsnmpSetSerialNo 10
#endif	/* defined(I_snmpSetSerialNo) */


#if defined(N_snmpMIBConformance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpMIBConformance[] = { 1, 3, 6, 1, 6, 3, 1, 2 };
#else
extern const SR_UINT32 IDsnmpMIBConformance[];
#endif	/* SNMPPART_DECL */
#define LNsnmpMIBConformance 8
#endif	/* defined(N_snmpMIBConformance) */


#if defined(N_snmpMIBCompliances)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpMIBCompliances[] = { 1, 3, 6, 1, 6, 3, 1, 2, 1 };
#else
extern const SR_UINT32 IDsnmpMIBCompliances[];
#endif	/* SNMPPART_DECL */
#define LNsnmpMIBCompliances 9
#endif	/* defined(N_snmpMIBCompliances) */


#if defined(N_snmpBasicCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpBasicCompliance[] = { 1, 3, 6, 1, 6, 3, 1, 2, 1, 2 };
#else
extern const SR_UINT32 IDsnmpBasicCompliance[];
#endif	/* SNMPPART_DECL */
#define LNsnmpBasicCompliance 10
#endif	/* defined(N_snmpBasicCompliance) */


#if defined(N_snmpMIBGroups)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpMIBGroups[] = { 1, 3, 6, 1, 6, 3, 1, 2, 2 };
#else
extern const SR_UINT32 IDsnmpMIBGroups[];
#endif	/* SNMPPART_DECL */
#define LNsnmpMIBGroups 9
#endif	/* defined(N_snmpMIBGroups) */


#if defined(N_snmpSetGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpSetGroup[] = { 1, 3, 6, 1, 6, 3, 1, 2, 2, 5 };
#else
extern const SR_UINT32 IDsnmpSetGroup[];
#endif	/* SNMPPART_DECL */
#define LNsnmpSetGroup 10
#endif	/* defined(N_snmpSetGroup) */


#if defined(N_systemGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsystemGroup[] = { 1, 3, 6, 1, 6, 3, 1, 2, 2, 6 };
#else
extern const SR_UINT32 IDsystemGroup[];
#endif	/* SNMPPART_DECL */
#define LNsystemGroup 10
#endif	/* defined(N_systemGroup) */


#if defined(N_snmpGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpGroup[] = { 1, 3, 6, 1, 6, 3, 1, 2, 2, 8 };
#else
extern const SR_UINT32 IDsnmpGroup[];
#endif	/* SNMPPART_DECL */
#define LNsnmpGroup 10
#endif	/* defined(N_snmpGroup) */


#if defined(N_snmpCommunityGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpCommunityGroup[] = { 1, 3, 6, 1, 6, 3, 1, 2, 2, 9 };
#else
extern const SR_UINT32 IDsnmpCommunityGroup[];
#endif	/* SNMPPART_DECL */
#define LNsnmpCommunityGroup 10
#endif	/* defined(N_snmpCommunityGroup) */


#if defined(N_snmpObsoleteGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpObsoleteGroup[] = { 1, 3, 6, 1, 6, 3, 1, 2, 2, 10 };
#else
extern const SR_UINT32 IDsnmpObsoleteGroup[];
#endif	/* SNMPPART_DECL */
#define LNsnmpObsoleteGroup 10
#endif	/* defined(N_snmpObsoleteGroup) */


#if defined(N_snmpv2tm)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpv2tm[] = { 1, 3, 6, 1, 6, 3, 19 };
#else
extern const SR_UINT32 IDsnmpv2tm[];
#endif	/* SNMPPART_DECL */
#define LNsnmpv2tm 7
#endif	/* defined(N_snmpv2tm) */


#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_COREPART_H */
