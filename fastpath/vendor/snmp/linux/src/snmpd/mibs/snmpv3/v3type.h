/*
 *
 * Copyright (C) 1992-2006 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -c v3 vacmAccessTable snmpEngine vacmContextTable vacmSecurityToGroupTable snmpMPDStats snmpNotifyTable snmpNotifyFilterProfileTable snmpNotifyFilterTable snmpProxyTable snmpProxyFilterTable snmpTargetObjects snmpTargetAddrTable snmpTargetParamsTable snmpTargetAddrExtTable usmStats usmUser usmUserTable vacmMIBViews vacmViewTreeFamilyTable usmTargetTagTable apoTargetParamsTable -apo -row_status -userpart -separate_type_file 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_V3TYPE_H
#define SR_V3TYPE_H


#ifdef __cplusplus
extern "C" {
#endif

#include "userpart.h"


/*
 * The snmpEngine family. 
 */


typedef
struct _snmpEngine_t {
        OctetString     *snmpEngineID;
        SR_INT32        snmpEngineBoots;
        SR_INT32        snmpEngineTime;
        SR_INT32        snmpEngineMaxMessageSize;
#ifdef U_snmpEngine
U_snmpEngine
#endif /* U_snmpEngine */
        char            valid[1];
} snmpEngine_t;


/*
 * The snmpMPDStats family. 
 */


typedef
struct _snmpMPDStats_t {
        SR_UINT32       snmpUnknownSecurityModels;
        SR_UINT32       snmpInvalidMsgs;
        SR_UINT32       snmpUnknownPDUHandlers;
#ifdef U_snmpMPDStats
U_snmpMPDStats
#endif /* U_snmpMPDStats */
        char            valid[1];
} snmpMPDStats_t;


/*
 * The snmpTargetObjects family. 
 */


typedef
struct _snmpTargetObjects_t {
        SR_INT32        snmpTargetSpinLock;
        SR_UINT32       snmpUnavailableContexts;
        SR_UINT32       snmpUnknownContexts;
#ifdef U_snmpTargetObjects
U_snmpTargetObjects
#endif /* U_snmpTargetObjects */
        char            valid[1];
        char            mod[1];
} snmpTargetObjects_t;


/*
 * The snmpTargetAddrEntry family. 
 */


typedef
struct _snmpTargetAddrEntry_t {
        OctetString     *snmpTargetAddrName;
        OID             *snmpTargetAddrTDomain;
        OctetString     *snmpTargetAddrTAddress;
        SR_INT32        snmpTargetAddrTimeout;
        SR_INT32        snmpTargetAddrRetryCount;
        OctetString     *snmpTargetAddrTagList;
        OctetString     *snmpTargetAddrParams;
        SR_INT32        snmpTargetAddrStorageType;
        SR_INT32        snmpTargetAddrRowStatus;
        OctetString     *snmpTargetAddrTMask;
        SR_INT32        snmpTargetAddrMMS;
        long            RowStatusTimerId;
#ifdef U_snmpTargetAddrEntry
U_snmpTargetAddrEntry
#endif /* U_snmpTargetAddrEntry */
        char            valid[2];
        char            mod[2];
} snmpTargetAddrEntry_t;

#define snmpTargetAddrExtEntry_get snmpTargetAddrEntry_get
#define snmpTargetAddrExtEntry_test snmpTargetAddrEntry_test
#define snmpTargetAddrExtEntry_set snmpTargetAddrEntry_set

#define snmpTargetAddrExtEntry_t snmpTargetAddrEntry_t

/*
 * The snmpTargetParamsEntry family. 
 */


typedef
struct _snmpTargetParamsEntry_t {
        OctetString     *snmpTargetParamsName;
        SR_INT32        snmpTargetParamsMPModel;
        SR_INT32        snmpTargetParamsSecurityModel;
        OctetString     *snmpTargetParamsSecurityName;
        SR_INT32        snmpTargetParamsSecurityLevel;
        SR_INT32        snmpTargetParamsStorageType;
        SR_INT32        snmpTargetParamsRowStatus;
        SR_INT32        apoTargetVersion;
        long            RowStatusTimerId;
#ifdef U_snmpTargetParamsEntry
U_snmpTargetParamsEntry
#endif /* U_snmpTargetParamsEntry */
        char            valid[2];
        char            mod[2];
} snmpTargetParamsEntry_t;

#define apoTargetParamsEntry_get snmpTargetParamsEntry_get
#define apoTargetParamsEntry_test snmpTargetParamsEntry_test
#define apoTargetParamsEntry_set snmpTargetParamsEntry_set

#define apoTargetParamsEntry_t snmpTargetParamsEntry_t

/*
 * The snmpNotifyEntry family. 
 */


typedef
struct _snmpNotifyEntry_t {
        OctetString     *snmpNotifyName;
        OctetString     *snmpNotifyTag;
        SR_INT32        snmpNotifyType;
        SR_INT32        snmpNotifyStorageType;
        SR_INT32        snmpNotifyRowStatus;
        long            RowStatusTimerId;
#ifdef U_snmpNotifyEntry
U_snmpNotifyEntry
#endif /* U_snmpNotifyEntry */
        char            valid[1];
        char            mod[1];
} snmpNotifyEntry_t;


/*
 * The snmpNotifyFilterProfileEntry family. 
 */


typedef
struct _snmpNotifyFilterProfileEntry_t {
        OctetString     *snmpNotifyFilterProfileName;
        SR_INT32        snmpNotifyFilterProfileStorType;
        SR_INT32        snmpNotifyFilterProfileRowStatus;
        OctetString *   snmpTargetParamsName;
        long            RowStatusTimerId;
#ifdef U_snmpNotifyFilterProfileEntry
U_snmpNotifyFilterProfileEntry
#endif /* U_snmpNotifyFilterProfileEntry */
        char            valid[1];
        char            mod[1];
} snmpNotifyFilterProfileEntry_t;


/*
 * The snmpNotifyFilterEntry family. 
 */


typedef
struct _snmpNotifyFilterEntry_t {
        OID             *snmpNotifyFilterSubtree;
        OctetString     *snmpNotifyFilterMask;
        SR_INT32        snmpNotifyFilterType;
        SR_INT32        snmpNotifyFilterStorageType;
        SR_INT32        snmpNotifyFilterRowStatus;
        OctetString *   snmpNotifyFilterProfileName;
        long            RowStatusTimerId;
#ifdef U_snmpNotifyFilterEntry
U_snmpNotifyFilterEntry
#endif /* U_snmpNotifyFilterEntry */
        char            valid[1];
        char            mod[1];
} snmpNotifyFilterEntry_t;


/*
 * The snmpProxyEntry family. 
 */


typedef
struct _snmpProxyEntry_t {
        OctetString     *snmpProxyName;
        SR_INT32        snmpProxyType;
        OctetString     *snmpProxyContextEngineID;
        OctetString     *snmpProxyContextName;
        OctetString     *snmpProxyTargetParamsIn;
        OctetString     *snmpProxySingleTargetOut;
        OctetString     *snmpProxyMultipleTargetOut;
        SR_INT32        snmpProxyStorageType;
        SR_INT32        snmpProxyRowStatus;
        long            RowStatusTimerId;
#ifdef U_snmpProxyEntry
U_snmpProxyEntry
#endif /* U_snmpProxyEntry */
        char            valid[4];
        char            mod[4];
} snmpProxyEntry_t;


/*
 * The usmStats family. 
 */


typedef
struct _usmStats_t {
        SR_UINT32       usmStatsUnsupportedSecLevels;
        SR_UINT32       usmStatsNotInTimeWindows;
        SR_UINT32       usmStatsUnknownUserNames;
        SR_UINT32       usmStatsUnknownEngineIDs;
        SR_UINT32       usmStatsWrongDigests;
        SR_UINT32       usmStatsDecryptionErrors;
#ifdef U_usmStats
U_usmStats
#endif /* U_usmStats */
        char            valid[1];
} usmStats_t;


/*
 * The usmUser family. 
 */


typedef
struct _usmUser_t {
        SR_INT32        usmUserSpinLock;
#ifdef U_usmUser
U_usmUser
#endif /* U_usmUser */
        char            valid[1];
        char            mod[1];
} usmUser_t;


/*
 * The usmUserEntry family. 
 */


typedef
struct _usmUserEntry_t {
        OctetString     *usmUserEngineID;
        OctetString     *usmUserName;
        OctetString     *usmUserSecurityName;
        OID             *usmUserCloneFrom;
        OID             *usmUserAuthProtocol;
        OctetString     *usmUserAuthKeyChange;
        OctetString     *usmUserOwnAuthKeyChange;
        OID             *usmUserPrivProtocol;
        OctetString     *usmUserPrivKeyChange;
        OctetString     *usmUserOwnPrivKeyChange;
        OctetString     *usmUserPublic;
        SR_INT32        usmUserStorageType;
        SR_INT32        usmUserStatus;
        OctetString     *usmTargetTag;
        long            RowStatusTimerId;
#ifdef U_usmUserEntry
U_usmUserEntry
#endif /* U_usmUserEntry */
        char            valid[3];   /* modified for additional
                                       privacy protocols */
        char            mod[2];
} usmUserEntry_t;

#define usmTargetTagEntry_get usmUserEntry_get
#define usmTargetTagEntry_test usmUserEntry_test
#define usmTargetTagEntry_set usmUserEntry_set

#define usmTargetTagEntry_t usmUserEntry_t

/*
 * The vacmContextEntry family. 
 */


typedef
struct _vacmContextEntry_t {
        OctetString     *vacmContextName;
#ifdef U_vacmContextEntry
U_vacmContextEntry
#endif /* U_vacmContextEntry */
        char            valid[1];
} vacmContextEntry_t;


/*
 * The vacmSecurityToGroupEntry family. 
 */


typedef
struct _vacmSecurityToGroupEntry_t {
        SR_INT32        vacmSecurityModel;
        OctetString     *vacmSecurityName;
        OctetString     *vacmGroupName;
        SR_INT32        vacmSecurityToGroupStorageType;
        SR_INT32        vacmSecurityToGroupStatus;
        long            RowStatusTimerId;
#ifdef U_vacmSecurityToGroupEntry
U_vacmSecurityToGroupEntry
#endif /* U_vacmSecurityToGroupEntry */
        char            valid[1];
        char            mod[1];
} vacmSecurityToGroupEntry_t;


/*
 * The vacmAccessEntry family. 
 */


typedef
struct _vacmAccessEntry_t {
        OctetString     *vacmAccessContextPrefix;
        SR_INT32        vacmAccessSecurityModel;
        SR_INT32        vacmAccessSecurityLevel;
        SR_INT32        vacmAccessContextMatch;
        OctetString     *vacmAccessReadViewName;
        OctetString     *vacmAccessWriteViewName;
        OctetString     *vacmAccessNotifyViewName;
        SR_INT32        vacmAccessStorageType;
        SR_INT32        vacmAccessStatus;
        OctetString *   vacmGroupName;
        long            RowStatusTimerId;
#ifdef U_vacmAccessEntry
U_vacmAccessEntry
#endif /* U_vacmAccessEntry */
        char            valid[2];
        char            mod[2];
} vacmAccessEntry_t;


/*
 * The vacmMIBViews family. 
 */


typedef
struct _vacmMIBViews_t {
        SR_INT32        vacmViewSpinLock;
#ifdef U_vacmMIBViews
U_vacmMIBViews
#endif /* U_vacmMIBViews */
        char            valid[1];
        char            mod[1];
} vacmMIBViews_t;


/*
 * The vacmViewTreeFamilyEntry family. 
 */


typedef
struct _vacmViewTreeFamilyEntry_t {
        OctetString     *vacmViewTreeFamilyViewName;
        OID             *vacmViewTreeFamilySubtree;
        OctetString     *vacmViewTreeFamilyMask;
        SR_INT32        vacmViewTreeFamilyType;
        SR_INT32        vacmViewTreeFamilyStorageType;
        SR_INT32        vacmViewTreeFamilyStatus;
        long            RowStatusTimerId;
#ifdef U_vacmViewTreeFamilyEntry
U_vacmViewTreeFamilyEntry
#endif /* U_vacmViewTreeFamilyEntry */
        char            valid[1];
        char            mod[1];
} vacmViewTreeFamilyEntry_t;


#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_V3TYPE_H */
