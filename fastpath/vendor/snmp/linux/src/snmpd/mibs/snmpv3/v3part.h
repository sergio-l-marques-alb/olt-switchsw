/*
 *
 * Copyright (C) 1992-2006 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -c v3 vacmAccessTable snmpEngine vacmContextTable vacmSecurityToGroupTable snmpMPDStats snmpNotifyTable snmpNotifyFilterProfileTable snmpNotifyFilterTable snmpProxyTable snmpProxyFilterTable snmpTargetObjects snmpTargetAddrTable snmpTargetParamsTable snmpTargetAddrExtTable usmStats usmUser usmUserTable vacmMIBViews vacmViewTreeFamilyTable usmTargetTagTable apoTargetParamsTable -apo -row_status -userpart -separate_type_file
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_V3PART_H
#define SR_V3PART_H


#ifdef __cplusplus
extern "C" {
#endif

/* only define name strings if we are not compiling LIGHT */
#ifndef LIGHT
#define STdeclare(name, value) static const char name [] = value;
#else	/* LIGHT */
#define STdeclare(name, value)
#endif	/* LIGHT */

/* define the OID components of the OID call table */





#if defined(I_usmTargetTag)
#ifdef SNMPPART_DECL
STdeclare(STusmTargetTag, "usmTargetTag")
const SR_UINT32 IDusmTargetTag[] = { 1, 3, 6, 1, 4, 1, 99, 12, 35, 1, 1, 1, 1 };
#else
extern const SR_UINT32 IDusmTargetTag[];
#endif	/* SNMPPART_DECL */
#define LNusmTargetTag 13
#endif	/* defined(I_usmTargetTag) */












#if defined(I_apoTargetVersion)
#ifdef SNMPPART_DECL
STdeclare(STapoTargetVersion, "apoTargetVersion")
const SR_UINT32 IDapoTargetVersion[] = { 1, 3, 6, 1, 4, 1, 21734, 1, 3, 1, 1, 1, 1 };
#else
extern const SR_UINT32 IDapoTargetVersion[];
#endif	/* SNMPPART_DECL */
#define LNapoTargetVersion 13
#endif	/* defined(I_apoTargetVersion) */


#if defined(N_snmpEngine)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpEngine[] = { 1, 3, 6, 1, 6, 3, 10, 2, 1 };
#else
extern const SR_UINT32 IDsnmpEngine[];
#endif	/* SNMPPART_DECL */
#define LNsnmpEngine 9
#endif	/* defined(N_snmpEngine) */


#if defined(I_snmpEngineID)
#ifdef SNMPPART_DECL
STdeclare(STsnmpEngineID, "snmpEngineID")
const SR_UINT32 IDsnmpEngineID[] = { 1, 3, 6, 1, 6, 3, 10, 2, 1, 1 };
#else
extern const SR_UINT32 IDsnmpEngineID[];
#endif	/* SNMPPART_DECL */
#define LNsnmpEngineID 10
#endif	/* defined(I_snmpEngineID) */


#if defined(I_snmpEngineBoots)
#ifdef SNMPPART_DECL
STdeclare(STsnmpEngineBoots, "snmpEngineBoots")
const SR_UINT32 IDsnmpEngineBoots[] = { 1, 3, 6, 1, 6, 3, 10, 2, 1, 2 };
#else
extern const SR_UINT32 IDsnmpEngineBoots[];
#endif	/* SNMPPART_DECL */
#define LNsnmpEngineBoots 10
#endif	/* defined(I_snmpEngineBoots) */


#if defined(I_snmpEngineTime)
#ifdef SNMPPART_DECL
STdeclare(STsnmpEngineTime, "snmpEngineTime")
const SR_UINT32 IDsnmpEngineTime[] = { 1, 3, 6, 1, 6, 3, 10, 2, 1, 3 };
#else
extern const SR_UINT32 IDsnmpEngineTime[];
#endif	/* SNMPPART_DECL */
#define LNsnmpEngineTime 10
#endif	/* defined(I_snmpEngineTime) */


#if defined(I_snmpEngineMaxMessageSize)
#ifdef SNMPPART_DECL
STdeclare(STsnmpEngineMaxMessageSize, "snmpEngineMaxMessageSize")
const SR_UINT32 IDsnmpEngineMaxMessageSize[] = { 1, 3, 6, 1, 6, 3, 10, 2, 1, 4 };
#else
extern const SR_UINT32 IDsnmpEngineMaxMessageSize[];
#endif	/* SNMPPART_DECL */
#define LNsnmpEngineMaxMessageSize 10
#endif	/* defined(I_snmpEngineMaxMessageSize) */


#if defined(N_snmpMPDStats)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpMPDStats[] = { 1, 3, 6, 1, 6, 3, 11, 2, 1 };
#else
extern const SR_UINT32 IDsnmpMPDStats[];
#endif	/* SNMPPART_DECL */
#define LNsnmpMPDStats 9
#endif	/* defined(N_snmpMPDStats) */


#if defined(I_snmpUnknownSecurityModels)
#ifdef SNMPPART_DECL
STdeclare(STsnmpUnknownSecurityModels, "snmpUnknownSecurityModels")
const SR_UINT32 IDsnmpUnknownSecurityModels[] = { 1, 3, 6, 1, 6, 3, 11, 2, 1, 1 };
#else
extern const SR_UINT32 IDsnmpUnknownSecurityModels[];
#endif	/* SNMPPART_DECL */
#define LNsnmpUnknownSecurityModels 10
#endif	/* defined(I_snmpUnknownSecurityModels) */


#if defined(I_snmpInvalidMsgs)
#ifdef SNMPPART_DECL
STdeclare(STsnmpInvalidMsgs, "snmpInvalidMsgs")
const SR_UINT32 IDsnmpInvalidMsgs[] = { 1, 3, 6, 1, 6, 3, 11, 2, 1, 2 };
#else
extern const SR_UINT32 IDsnmpInvalidMsgs[];
#endif	/* SNMPPART_DECL */
#define LNsnmpInvalidMsgs 10
#endif	/* defined(I_snmpInvalidMsgs) */


#if defined(I_snmpUnknownPDUHandlers)
#ifdef SNMPPART_DECL
STdeclare(STsnmpUnknownPDUHandlers, "snmpUnknownPDUHandlers")
const SR_UINT32 IDsnmpUnknownPDUHandlers[] = { 1, 3, 6, 1, 6, 3, 11, 2, 1, 3 };
#else
extern const SR_UINT32 IDsnmpUnknownPDUHandlers[];
#endif	/* SNMPPART_DECL */
#define LNsnmpUnknownPDUHandlers 10
#endif	/* defined(I_snmpUnknownPDUHandlers) */


#if defined(N_snmpTargetObjects)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpTargetObjects[] = { 1, 3, 6, 1, 6, 3, 12, 1 };
#else
extern const SR_UINT32 IDsnmpTargetObjects[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetObjects 8
#endif	/* defined(N_snmpTargetObjects) */


#if defined(I_snmpTargetSpinLock)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetSpinLock, "snmpTargetSpinLock")
const SR_UINT32 IDsnmpTargetSpinLock[] = { 1, 3, 6, 1, 6, 3, 12, 1, 1 };
#else
extern const SR_UINT32 IDsnmpTargetSpinLock[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetSpinLock 9
#endif	/* defined(I_snmpTargetSpinLock) */







#if defined(I_snmpTargetAddrTDomain)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrTDomain, "snmpTargetAddrTDomain")
const SR_UINT32 IDsnmpTargetAddrTDomain[] = { 1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 2 };
#else
extern const SR_UINT32 IDsnmpTargetAddrTDomain[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrTDomain 11
#endif	/* defined(I_snmpTargetAddrTDomain) */


#if defined(I_snmpTargetAddrTAddress)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrTAddress, "snmpTargetAddrTAddress")
const SR_UINT32 IDsnmpTargetAddrTAddress[] = { 1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 3 };
#else
extern const SR_UINT32 IDsnmpTargetAddrTAddress[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrTAddress 11
#endif	/* defined(I_snmpTargetAddrTAddress) */


#if defined(I_snmpTargetAddrTimeout)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrTimeout, "snmpTargetAddrTimeout")
const SR_UINT32 IDsnmpTargetAddrTimeout[] = { 1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 4 };
#else
extern const SR_UINT32 IDsnmpTargetAddrTimeout[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrTimeout 11
#endif	/* defined(I_snmpTargetAddrTimeout) */


#if defined(I_snmpTargetAddrRetryCount)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrRetryCount, "snmpTargetAddrRetryCount")
const SR_UINT32 IDsnmpTargetAddrRetryCount[] = { 1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 5 };
#else
extern const SR_UINT32 IDsnmpTargetAddrRetryCount[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrRetryCount 11
#endif	/* defined(I_snmpTargetAddrRetryCount) */


#if defined(I_snmpTargetAddrTagList)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrTagList, "snmpTargetAddrTagList")
const SR_UINT32 IDsnmpTargetAddrTagList[] = { 1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 6 };
#else
extern const SR_UINT32 IDsnmpTargetAddrTagList[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrTagList 11
#endif	/* defined(I_snmpTargetAddrTagList) */


#if defined(I_snmpTargetAddrParams)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrParams, "snmpTargetAddrParams")
const SR_UINT32 IDsnmpTargetAddrParams[] = { 1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 7 };
#else
extern const SR_UINT32 IDsnmpTargetAddrParams[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrParams 11
#endif	/* defined(I_snmpTargetAddrParams) */


#if defined(I_snmpTargetAddrStorageType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrStorageType, "snmpTargetAddrStorageType")
const SR_UINT32 IDsnmpTargetAddrStorageType[] = { 1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 8 };
#else
extern const SR_UINT32 IDsnmpTargetAddrStorageType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrStorageType 11
#endif	/* defined(I_snmpTargetAddrStorageType) */


#if defined(I_snmpTargetAddrRowStatus)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrRowStatus, "snmpTargetAddrRowStatus")
const SR_UINT32 IDsnmpTargetAddrRowStatus[] = { 1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 9 };
#else
extern const SR_UINT32 IDsnmpTargetAddrRowStatus[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrRowStatus 11
#endif	/* defined(I_snmpTargetAddrRowStatus) */







#if defined(I_snmpTargetParamsMPModel)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetParamsMPModel, "snmpTargetParamsMPModel")
const SR_UINT32 IDsnmpTargetParamsMPModel[] = { 1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 2 };
#else
extern const SR_UINT32 IDsnmpTargetParamsMPModel[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetParamsMPModel 11
#endif	/* defined(I_snmpTargetParamsMPModel) */


#if defined(I_snmpTargetParamsSecurityModel)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetParamsSecurityModel, "snmpTargetParamsSecurityModel")
const SR_UINT32 IDsnmpTargetParamsSecurityModel[] = { 1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 3 };
#else
extern const SR_UINT32 IDsnmpTargetParamsSecurityModel[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetParamsSecurityModel 11
#endif	/* defined(I_snmpTargetParamsSecurityModel) */


#if defined(I_snmpTargetParamsSecurityName)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetParamsSecurityName, "snmpTargetParamsSecurityName")
const SR_UINT32 IDsnmpTargetParamsSecurityName[] = { 1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 4 };
#else
extern const SR_UINT32 IDsnmpTargetParamsSecurityName[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetParamsSecurityName 11
#endif	/* defined(I_snmpTargetParamsSecurityName) */


#if defined(I_snmpTargetParamsSecurityLevel)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetParamsSecurityLevel, "snmpTargetParamsSecurityLevel")
const SR_UINT32 IDsnmpTargetParamsSecurityLevel[] = { 1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 5 };
#else
extern const SR_UINT32 IDsnmpTargetParamsSecurityLevel[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetParamsSecurityLevel 11
#endif	/* defined(I_snmpTargetParamsSecurityLevel) */


#if defined(I_snmpTargetParamsStorageType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetParamsStorageType, "snmpTargetParamsStorageType")
const SR_UINT32 IDsnmpTargetParamsStorageType[] = { 1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 6 };
#else
extern const SR_UINT32 IDsnmpTargetParamsStorageType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetParamsStorageType 11
#endif	/* defined(I_snmpTargetParamsStorageType) */


#if defined(I_snmpTargetParamsRowStatus)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetParamsRowStatus, "snmpTargetParamsRowStatus")
const SR_UINT32 IDsnmpTargetParamsRowStatus[] = { 1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 7 };
#else
extern const SR_UINT32 IDsnmpTargetParamsRowStatus[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetParamsRowStatus 11
#endif	/* defined(I_snmpTargetParamsRowStatus) */


#if defined(I_snmpUnavailableContexts)
#ifdef SNMPPART_DECL
STdeclare(STsnmpUnavailableContexts, "snmpUnavailableContexts")
const SR_UINT32 IDsnmpUnavailableContexts[] = { 1, 3, 6, 1, 6, 3, 12, 1, 4 };
#else
extern const SR_UINT32 IDsnmpUnavailableContexts[];
#endif	/* SNMPPART_DECL */
#define LNsnmpUnavailableContexts 9
#endif	/* defined(I_snmpUnavailableContexts) */


#if defined(I_snmpUnknownContexts)
#ifdef SNMPPART_DECL
STdeclare(STsnmpUnknownContexts, "snmpUnknownContexts")
const SR_UINT32 IDsnmpUnknownContexts[] = { 1, 3, 6, 1, 6, 3, 12, 1, 5 };
#else
extern const SR_UINT32 IDsnmpUnknownContexts[];
#endif	/* SNMPPART_DECL */
#define LNsnmpUnknownContexts 9
#endif	/* defined(I_snmpUnknownContexts) */







#if defined(I_snmpNotifyTag)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyTag, "snmpNotifyTag")
const SR_UINT32 IDsnmpNotifyTag[] = { 1, 3, 6, 1, 6, 3, 13, 1, 1, 1, 2 };
#else
extern const SR_UINT32 IDsnmpNotifyTag[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyTag 11
#endif	/* defined(I_snmpNotifyTag) */


#if defined(I_snmpNotifyType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyType, "snmpNotifyType")
const SR_UINT32 IDsnmpNotifyType[] = { 1, 3, 6, 1, 6, 3, 13, 1, 1, 1, 3 };
#else
extern const SR_UINT32 IDsnmpNotifyType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyType 11
#endif	/* defined(I_snmpNotifyType) */


#if defined(I_snmpNotifyStorageType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyStorageType, "snmpNotifyStorageType")
const SR_UINT32 IDsnmpNotifyStorageType[] = { 1, 3, 6, 1, 6, 3, 13, 1, 1, 1, 4 };
#else
extern const SR_UINT32 IDsnmpNotifyStorageType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyStorageType 11
#endif	/* defined(I_snmpNotifyStorageType) */


#if defined(I_snmpNotifyRowStatus)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyRowStatus, "snmpNotifyRowStatus")
const SR_UINT32 IDsnmpNotifyRowStatus[] = { 1, 3, 6, 1, 6, 3, 13, 1, 1, 1, 5 };
#else
extern const SR_UINT32 IDsnmpNotifyRowStatus[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyRowStatus 11
#endif	/* defined(I_snmpNotifyRowStatus) */






#if defined(I_snmpNotifyFilterProfileName)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyFilterProfileName, "snmpNotifyFilterProfileName")
const SR_UINT32 IDsnmpNotifyFilterProfileName[] = { 1, 3, 6, 1, 6, 3, 13, 1, 2, 1, 1 };
#else
extern const SR_UINT32 IDsnmpNotifyFilterProfileName[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyFilterProfileName 11
#endif	/* defined(I_snmpNotifyFilterProfileName) */


#if defined(I_snmpNotifyFilterProfileStorType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyFilterProfileStorType, "snmpNotifyFilterProfileStorType")
const SR_UINT32 IDsnmpNotifyFilterProfileStorType[] = { 1, 3, 6, 1, 6, 3, 13, 1, 2, 1, 2 };
#else
extern const SR_UINT32 IDsnmpNotifyFilterProfileStorType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyFilterProfileStorType 11
#endif	/* defined(I_snmpNotifyFilterProfileStorType) */


#if defined(I_snmpNotifyFilterProfileRowStatus)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyFilterProfileRowStatus, "snmpNotifyFilterProfileRowStatus")
const SR_UINT32 IDsnmpNotifyFilterProfileRowStatus[] = { 1, 3, 6, 1, 6, 3, 13, 1, 2, 1, 3 };
#else
extern const SR_UINT32 IDsnmpNotifyFilterProfileRowStatus[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyFilterProfileRowStatus 11
#endif	/* defined(I_snmpNotifyFilterProfileRowStatus) */







#if defined(I_snmpNotifyFilterMask)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyFilterMask, "snmpNotifyFilterMask")
const SR_UINT32 IDsnmpNotifyFilterMask[] = { 1, 3, 6, 1, 6, 3, 13, 1, 3, 1, 2 };
#else
extern const SR_UINT32 IDsnmpNotifyFilterMask[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyFilterMask 11
#endif	/* defined(I_snmpNotifyFilterMask) */


#if defined(I_snmpNotifyFilterType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyFilterType, "snmpNotifyFilterType")
const SR_UINT32 IDsnmpNotifyFilterType[] = { 1, 3, 6, 1, 6, 3, 13, 1, 3, 1, 3 };
#else
extern const SR_UINT32 IDsnmpNotifyFilterType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyFilterType 11
#endif	/* defined(I_snmpNotifyFilterType) */


#if defined(I_snmpNotifyFilterStorageType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyFilterStorageType, "snmpNotifyFilterStorageType")
const SR_UINT32 IDsnmpNotifyFilterStorageType[] = { 1, 3, 6, 1, 6, 3, 13, 1, 3, 1, 4 };
#else
extern const SR_UINT32 IDsnmpNotifyFilterStorageType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyFilterStorageType 11
#endif	/* defined(I_snmpNotifyFilterStorageType) */


#if defined(I_snmpNotifyFilterRowStatus)
#ifdef SNMPPART_DECL
STdeclare(STsnmpNotifyFilterRowStatus, "snmpNotifyFilterRowStatus")
const SR_UINT32 IDsnmpNotifyFilterRowStatus[] = { 1, 3, 6, 1, 6, 3, 13, 1, 3, 1, 5 };
#else
extern const SR_UINT32 IDsnmpNotifyFilterRowStatus[];
#endif	/* SNMPPART_DECL */
#define LNsnmpNotifyFilterRowStatus 11
#endif	/* defined(I_snmpNotifyFilterRowStatus) */







#if defined(I_snmpProxyType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpProxyType, "snmpProxyType")
const SR_UINT32 IDsnmpProxyType[] = { 1, 3, 6, 1, 6, 3, 14, 1, 2, 1, 2 };
#else
extern const SR_UINT32 IDsnmpProxyType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxyType 11
#endif	/* defined(I_snmpProxyType) */


#if defined(I_snmpProxyContextEngineID)
#ifdef SNMPPART_DECL
STdeclare(STsnmpProxyContextEngineID, "snmpProxyContextEngineID")
const SR_UINT32 IDsnmpProxyContextEngineID[] = { 1, 3, 6, 1, 6, 3, 14, 1, 2, 1, 3 };
#else
extern const SR_UINT32 IDsnmpProxyContextEngineID[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxyContextEngineID 11
#endif	/* defined(I_snmpProxyContextEngineID) */


#if defined(I_snmpProxyContextName)
#ifdef SNMPPART_DECL
STdeclare(STsnmpProxyContextName, "snmpProxyContextName")
const SR_UINT32 IDsnmpProxyContextName[] = { 1, 3, 6, 1, 6, 3, 14, 1, 2, 1, 4 };
#else
extern const SR_UINT32 IDsnmpProxyContextName[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxyContextName 11
#endif	/* defined(I_snmpProxyContextName) */


#if defined(I_snmpProxyTargetParamsIn)
#ifdef SNMPPART_DECL
STdeclare(STsnmpProxyTargetParamsIn, "snmpProxyTargetParamsIn")
const SR_UINT32 IDsnmpProxyTargetParamsIn[] = { 1, 3, 6, 1, 6, 3, 14, 1, 2, 1, 5 };
#else
extern const SR_UINT32 IDsnmpProxyTargetParamsIn[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxyTargetParamsIn 11
#endif	/* defined(I_snmpProxyTargetParamsIn) */


#if defined(I_snmpProxySingleTargetOut)
#ifdef SNMPPART_DECL
STdeclare(STsnmpProxySingleTargetOut, "snmpProxySingleTargetOut")
const SR_UINT32 IDsnmpProxySingleTargetOut[] = { 1, 3, 6, 1, 6, 3, 14, 1, 2, 1, 6 };
#else
extern const SR_UINT32 IDsnmpProxySingleTargetOut[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxySingleTargetOut 11
#endif	/* defined(I_snmpProxySingleTargetOut) */


#if defined(I_snmpProxyMultipleTargetOut)
#ifdef SNMPPART_DECL
STdeclare(STsnmpProxyMultipleTargetOut, "snmpProxyMultipleTargetOut")
const SR_UINT32 IDsnmpProxyMultipleTargetOut[] = { 1, 3, 6, 1, 6, 3, 14, 1, 2, 1, 7 };
#else
extern const SR_UINT32 IDsnmpProxyMultipleTargetOut[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxyMultipleTargetOut 11
#endif	/* defined(I_snmpProxyMultipleTargetOut) */


#if defined(I_snmpProxyStorageType)
#ifdef SNMPPART_DECL
STdeclare(STsnmpProxyStorageType, "snmpProxyStorageType")
const SR_UINT32 IDsnmpProxyStorageType[] = { 1, 3, 6, 1, 6, 3, 14, 1, 2, 1, 8 };
#else
extern const SR_UINT32 IDsnmpProxyStorageType[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxyStorageType 11
#endif	/* defined(I_snmpProxyStorageType) */


#if defined(I_snmpProxyRowStatus)
#ifdef SNMPPART_DECL
STdeclare(STsnmpProxyRowStatus, "snmpProxyRowStatus")
const SR_UINT32 IDsnmpProxyRowStatus[] = { 1, 3, 6, 1, 6, 3, 14, 1, 2, 1, 9 };
#else
extern const SR_UINT32 IDsnmpProxyRowStatus[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxyRowStatus 11
#endif	/* defined(I_snmpProxyRowStatus) */


#if defined(N_usmStats)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusmStats[] = { 1, 3, 6, 1, 6, 3, 15, 1, 1 };
#else
extern const SR_UINT32 IDusmStats[];
#endif	/* SNMPPART_DECL */
#define LNusmStats 9
#endif	/* defined(N_usmStats) */


#if defined(I_usmStatsUnsupportedSecLevels)
#ifdef SNMPPART_DECL
STdeclare(STusmStatsUnsupportedSecLevels, "usmStatsUnsupportedSecLevels")
const SR_UINT32 IDusmStatsUnsupportedSecLevels[] = { 1, 3, 6, 1, 6, 3, 15, 1, 1, 1 };
#else
extern const SR_UINT32 IDusmStatsUnsupportedSecLevels[];
#endif	/* SNMPPART_DECL */
#define LNusmStatsUnsupportedSecLevels 10
#endif	/* defined(I_usmStatsUnsupportedSecLevels) */


#if defined(I_usmStatsNotInTimeWindows)
#ifdef SNMPPART_DECL
STdeclare(STusmStatsNotInTimeWindows, "usmStatsNotInTimeWindows")
const SR_UINT32 IDusmStatsNotInTimeWindows[] = { 1, 3, 6, 1, 6, 3, 15, 1, 1, 2 };
#else
extern const SR_UINT32 IDusmStatsNotInTimeWindows[];
#endif	/* SNMPPART_DECL */
#define LNusmStatsNotInTimeWindows 10
#endif	/* defined(I_usmStatsNotInTimeWindows) */


#if defined(I_usmStatsUnknownUserNames)
#ifdef SNMPPART_DECL
STdeclare(STusmStatsUnknownUserNames, "usmStatsUnknownUserNames")
const SR_UINT32 IDusmStatsUnknownUserNames[] = { 1, 3, 6, 1, 6, 3, 15, 1, 1, 3 };
#else
extern const SR_UINT32 IDusmStatsUnknownUserNames[];
#endif	/* SNMPPART_DECL */
#define LNusmStatsUnknownUserNames 10
#endif	/* defined(I_usmStatsUnknownUserNames) */


#if defined(I_usmStatsUnknownEngineIDs)
#ifdef SNMPPART_DECL
STdeclare(STusmStatsUnknownEngineIDs, "usmStatsUnknownEngineIDs")
const SR_UINT32 IDusmStatsUnknownEngineIDs[] = { 1, 3, 6, 1, 6, 3, 15, 1, 1, 4 };
#else
extern const SR_UINT32 IDusmStatsUnknownEngineIDs[];
#endif	/* SNMPPART_DECL */
#define LNusmStatsUnknownEngineIDs 10
#endif	/* defined(I_usmStatsUnknownEngineIDs) */


#if defined(I_usmStatsWrongDigests)
#ifdef SNMPPART_DECL
STdeclare(STusmStatsWrongDigests, "usmStatsWrongDigests")
const SR_UINT32 IDusmStatsWrongDigests[] = { 1, 3, 6, 1, 6, 3, 15, 1, 1, 5 };
#else
extern const SR_UINT32 IDusmStatsWrongDigests[];
#endif	/* SNMPPART_DECL */
#define LNusmStatsWrongDigests 10
#endif	/* defined(I_usmStatsWrongDigests) */


#if defined(I_usmStatsDecryptionErrors)
#ifdef SNMPPART_DECL
STdeclare(STusmStatsDecryptionErrors, "usmStatsDecryptionErrors")
const SR_UINT32 IDusmStatsDecryptionErrors[] = { 1, 3, 6, 1, 6, 3, 15, 1, 1, 6 };
#else
extern const SR_UINT32 IDusmStatsDecryptionErrors[];
#endif	/* SNMPPART_DECL */
#define LNusmStatsDecryptionErrors 10
#endif	/* defined(I_usmStatsDecryptionErrors) */


#if defined(N_usmUser)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusmUser[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2 };
#else
extern const SR_UINT32 IDusmUser[];
#endif	/* SNMPPART_DECL */
#define LNusmUser 9
#endif	/* defined(N_usmUser) */


#if defined(I_usmUserSpinLock)
#ifdef SNMPPART_DECL
STdeclare(STusmUserSpinLock, "usmUserSpinLock")
const SR_UINT32 IDusmUserSpinLock[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 1 };
#else
extern const SR_UINT32 IDusmUserSpinLock[];
#endif	/* SNMPPART_DECL */
#define LNusmUserSpinLock 10
#endif	/* defined(I_usmUserSpinLock) */








#if defined(I_usmUserSecurityName)
#ifdef SNMPPART_DECL
STdeclare(STusmUserSecurityName, "usmUserSecurityName")
const SR_UINT32 IDusmUserSecurityName[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 3 };
#else
extern const SR_UINT32 IDusmUserSecurityName[];
#endif	/* SNMPPART_DECL */
#define LNusmUserSecurityName 12
#endif	/* defined(I_usmUserSecurityName) */


#if defined(I_usmUserCloneFrom)
#ifdef SNMPPART_DECL
STdeclare(STusmUserCloneFrom, "usmUserCloneFrom")
const SR_UINT32 IDusmUserCloneFrom[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 4 };
#else
extern const SR_UINT32 IDusmUserCloneFrom[];
#endif	/* SNMPPART_DECL */
#define LNusmUserCloneFrom 12
#endif	/* defined(I_usmUserCloneFrom) */


#if defined(I_usmUserAuthProtocol)
#ifdef SNMPPART_DECL
STdeclare(STusmUserAuthProtocol, "usmUserAuthProtocol")
const SR_UINT32 IDusmUserAuthProtocol[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 5 };
#else
extern const SR_UINT32 IDusmUserAuthProtocol[];
#endif	/* SNMPPART_DECL */
#define LNusmUserAuthProtocol 12
#endif	/* defined(I_usmUserAuthProtocol) */


#if defined(I_usmUserAuthKeyChange)
#ifdef SNMPPART_DECL
STdeclare(STusmUserAuthKeyChange, "usmUserAuthKeyChange")
const SR_UINT32 IDusmUserAuthKeyChange[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 6 };
#else
extern const SR_UINT32 IDusmUserAuthKeyChange[];
#endif	/* SNMPPART_DECL */
#define LNusmUserAuthKeyChange 12
#endif	/* defined(I_usmUserAuthKeyChange) */


#if defined(I_usmUserOwnAuthKeyChange)
#ifdef SNMPPART_DECL
STdeclare(STusmUserOwnAuthKeyChange, "usmUserOwnAuthKeyChange")
const SR_UINT32 IDusmUserOwnAuthKeyChange[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 7 };
#else
extern const SR_UINT32 IDusmUserOwnAuthKeyChange[];
#endif	/* SNMPPART_DECL */
#define LNusmUserOwnAuthKeyChange 12
#endif	/* defined(I_usmUserOwnAuthKeyChange) */


#if defined(I_usmUserPrivProtocol)
#ifdef SNMPPART_DECL
STdeclare(STusmUserPrivProtocol, "usmUserPrivProtocol")
const SR_UINT32 IDusmUserPrivProtocol[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 8 };
#else
extern const SR_UINT32 IDusmUserPrivProtocol[];
#endif	/* SNMPPART_DECL */
#define LNusmUserPrivProtocol 12
#endif	/* defined(I_usmUserPrivProtocol) */


#if defined(I_usmUserPrivKeyChange)
#ifdef SNMPPART_DECL
STdeclare(STusmUserPrivKeyChange, "usmUserPrivKeyChange")
const SR_UINT32 IDusmUserPrivKeyChange[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 9 };
#else
extern const SR_UINT32 IDusmUserPrivKeyChange[];
#endif	/* SNMPPART_DECL */
#define LNusmUserPrivKeyChange 12
#endif	/* defined(I_usmUserPrivKeyChange) */


#if defined(I_usmUserOwnPrivKeyChange)
#ifdef SNMPPART_DECL
STdeclare(STusmUserOwnPrivKeyChange, "usmUserOwnPrivKeyChange")
const SR_UINT32 IDusmUserOwnPrivKeyChange[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 10 };
#else
extern const SR_UINT32 IDusmUserOwnPrivKeyChange[];
#endif	/* SNMPPART_DECL */
#define LNusmUserOwnPrivKeyChange 12
#endif	/* defined(I_usmUserOwnPrivKeyChange) */


#if defined(I_usmUserPublic)
#ifdef SNMPPART_DECL
STdeclare(STusmUserPublic, "usmUserPublic")
const SR_UINT32 IDusmUserPublic[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 11 };
#else
extern const SR_UINT32 IDusmUserPublic[];
#endif	/* SNMPPART_DECL */
#define LNusmUserPublic 12
#endif	/* defined(I_usmUserPublic) */


#if defined(I_usmUserStorageType)
#ifdef SNMPPART_DECL
STdeclare(STusmUserStorageType, "usmUserStorageType")
const SR_UINT32 IDusmUserStorageType[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 12 };
#else
extern const SR_UINT32 IDusmUserStorageType[];
#endif	/* SNMPPART_DECL */
#define LNusmUserStorageType 12
#endif	/* defined(I_usmUserStorageType) */


#if defined(I_usmUserStatus)
#ifdef SNMPPART_DECL
STdeclare(STusmUserStatus, "usmUserStatus")
const SR_UINT32 IDusmUserStatus[] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 13 };
#else
extern const SR_UINT32 IDusmUserStatus[];
#endif	/* SNMPPART_DECL */
#define LNusmUserStatus 12
#endif	/* defined(I_usmUserStatus) */






#if defined(I_vacmContextName)
#ifdef SNMPPART_DECL
STdeclare(STvacmContextName, "vacmContextName")
const SR_UINT32 IDvacmContextName[] = { 1, 3, 6, 1, 6, 3, 16, 1, 1, 1, 1 };
#else
extern const SR_UINT32 IDvacmContextName[];
#endif	/* SNMPPART_DECL */
#define LNvacmContextName 11
#endif	/* defined(I_vacmContextName) */








#if defined(I_vacmGroupName)
#ifdef SNMPPART_DECL
STdeclare(STvacmGroupName, "vacmGroupName")
const SR_UINT32 IDvacmGroupName[] = { 1, 3, 6, 1, 6, 3, 16, 1, 2, 1, 3 };
#else
extern const SR_UINT32 IDvacmGroupName[];
#endif	/* SNMPPART_DECL */
#define LNvacmGroupName 11
#endif	/* defined(I_vacmGroupName) */


#if defined(I_vacmSecurityToGroupStorageType)
#ifdef SNMPPART_DECL
STdeclare(STvacmSecurityToGroupStorageType, "vacmSecurityToGroupStorageType")
const SR_UINT32 IDvacmSecurityToGroupStorageType[] = { 1, 3, 6, 1, 6, 3, 16, 1, 2, 1, 4 };
#else
extern const SR_UINT32 IDvacmSecurityToGroupStorageType[];
#endif	/* SNMPPART_DECL */
#define LNvacmSecurityToGroupStorageType 11
#endif	/* defined(I_vacmSecurityToGroupStorageType) */


#if defined(I_vacmSecurityToGroupStatus)
#ifdef SNMPPART_DECL
STdeclare(STvacmSecurityToGroupStatus, "vacmSecurityToGroupStatus")
const SR_UINT32 IDvacmSecurityToGroupStatus[] = { 1, 3, 6, 1, 6, 3, 16, 1, 2, 1, 5 };
#else
extern const SR_UINT32 IDvacmSecurityToGroupStatus[];
#endif	/* SNMPPART_DECL */
#define LNvacmSecurityToGroupStatus 11
#endif	/* defined(I_vacmSecurityToGroupStatus) */









#if defined(I_vacmAccessContextMatch)
#ifdef SNMPPART_DECL
STdeclare(STvacmAccessContextMatch, "vacmAccessContextMatch")
const SR_UINT32 IDvacmAccessContextMatch[] = { 1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 4 };
#else
extern const SR_UINT32 IDvacmAccessContextMatch[];
#endif	/* SNMPPART_DECL */
#define LNvacmAccessContextMatch 11
#endif	/* defined(I_vacmAccessContextMatch) */


#if defined(I_vacmAccessReadViewName)
#ifdef SNMPPART_DECL
STdeclare(STvacmAccessReadViewName, "vacmAccessReadViewName")
const SR_UINT32 IDvacmAccessReadViewName[] = { 1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 5 };
#else
extern const SR_UINT32 IDvacmAccessReadViewName[];
#endif	/* SNMPPART_DECL */
#define LNvacmAccessReadViewName 11
#endif	/* defined(I_vacmAccessReadViewName) */


#if defined(I_vacmAccessWriteViewName)
#ifdef SNMPPART_DECL
STdeclare(STvacmAccessWriteViewName, "vacmAccessWriteViewName")
const SR_UINT32 IDvacmAccessWriteViewName[] = { 1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 6 };
#else
extern const SR_UINT32 IDvacmAccessWriteViewName[];
#endif	/* SNMPPART_DECL */
#define LNvacmAccessWriteViewName 11
#endif	/* defined(I_vacmAccessWriteViewName) */


#if defined(I_vacmAccessNotifyViewName)
#ifdef SNMPPART_DECL
STdeclare(STvacmAccessNotifyViewName, "vacmAccessNotifyViewName")
const SR_UINT32 IDvacmAccessNotifyViewName[] = { 1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 7 };
#else
extern const SR_UINT32 IDvacmAccessNotifyViewName[];
#endif	/* SNMPPART_DECL */
#define LNvacmAccessNotifyViewName 11
#endif	/* defined(I_vacmAccessNotifyViewName) */


#if defined(I_vacmAccessStorageType)
#ifdef SNMPPART_DECL
STdeclare(STvacmAccessStorageType, "vacmAccessStorageType")
const SR_UINT32 IDvacmAccessStorageType[] = { 1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 8 };
#else
extern const SR_UINT32 IDvacmAccessStorageType[];
#endif	/* SNMPPART_DECL */
#define LNvacmAccessStorageType 11
#endif	/* defined(I_vacmAccessStorageType) */


#if defined(I_vacmAccessStatus)
#ifdef SNMPPART_DECL
STdeclare(STvacmAccessStatus, "vacmAccessStatus")
const SR_UINT32 IDvacmAccessStatus[] = { 1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 9 };
#else
extern const SR_UINT32 IDvacmAccessStatus[];
#endif	/* SNMPPART_DECL */
#define LNvacmAccessStatus 11
#endif	/* defined(I_vacmAccessStatus) */


#if defined(N_vacmMIBViews)
#ifdef SNMPPART_DECL
const SR_UINT32 IDvacmMIBViews[] = { 1, 3, 6, 1, 6, 3, 16, 1, 5 };
#else
extern const SR_UINT32 IDvacmMIBViews[];
#endif	/* SNMPPART_DECL */
#define LNvacmMIBViews 9
#endif	/* defined(N_vacmMIBViews) */


#if defined(I_vacmViewSpinLock)
#ifdef SNMPPART_DECL
STdeclare(STvacmViewSpinLock, "vacmViewSpinLock")
const SR_UINT32 IDvacmViewSpinLock[] = { 1, 3, 6, 1, 6, 3, 16, 1, 5, 1 };
#else
extern const SR_UINT32 IDvacmViewSpinLock[];
#endif	/* SNMPPART_DECL */
#define LNvacmViewSpinLock 10
#endif	/* defined(I_vacmViewSpinLock) */








#if defined(I_vacmViewTreeFamilyMask)
#ifdef SNMPPART_DECL
STdeclare(STvacmViewTreeFamilyMask, "vacmViewTreeFamilyMask")
const SR_UINT32 IDvacmViewTreeFamilyMask[] = { 1, 3, 6, 1, 6, 3, 16, 1, 5, 2, 1, 3 };
#else
extern const SR_UINT32 IDvacmViewTreeFamilyMask[];
#endif	/* SNMPPART_DECL */
#define LNvacmViewTreeFamilyMask 12
#endif	/* defined(I_vacmViewTreeFamilyMask) */


#if defined(I_vacmViewTreeFamilyType)
#ifdef SNMPPART_DECL
STdeclare(STvacmViewTreeFamilyType, "vacmViewTreeFamilyType")
const SR_UINT32 IDvacmViewTreeFamilyType[] = { 1, 3, 6, 1, 6, 3, 16, 1, 5, 2, 1, 4 };
#else
extern const SR_UINT32 IDvacmViewTreeFamilyType[];
#endif	/* SNMPPART_DECL */
#define LNvacmViewTreeFamilyType 12
#endif	/* defined(I_vacmViewTreeFamilyType) */


#if defined(I_vacmViewTreeFamilyStorageType)
#ifdef SNMPPART_DECL
STdeclare(STvacmViewTreeFamilyStorageType, "vacmViewTreeFamilyStorageType")
const SR_UINT32 IDvacmViewTreeFamilyStorageType[] = { 1, 3, 6, 1, 6, 3, 16, 1, 5, 2, 1, 5 };
#else
extern const SR_UINT32 IDvacmViewTreeFamilyStorageType[];
#endif	/* SNMPPART_DECL */
#define LNvacmViewTreeFamilyStorageType 12
#endif	/* defined(I_vacmViewTreeFamilyStorageType) */


#if defined(I_vacmViewTreeFamilyStatus)
#ifdef SNMPPART_DECL
STdeclare(STvacmViewTreeFamilyStatus, "vacmViewTreeFamilyStatus")
const SR_UINT32 IDvacmViewTreeFamilyStatus[] = { 1, 3, 6, 1, 6, 3, 16, 1, 5, 2, 1, 6 };
#else
extern const SR_UINT32 IDvacmViewTreeFamilyStatus[];
#endif	/* SNMPPART_DECL */
#define LNvacmViewTreeFamilyStatus 12
#endif	/* defined(I_vacmViewTreeFamilyStatus) */






#if defined(I_snmpTargetAddrTMask)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrTMask, "snmpTargetAddrTMask")
const SR_UINT32 IDsnmpTargetAddrTMask[] = { 1, 3, 6, 1, 6, 3, 18, 1, 2, 1, 1 };
#else
extern const SR_UINT32 IDsnmpTargetAddrTMask[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrTMask 11
#endif	/* defined(I_snmpTargetAddrTMask) */


#if defined(I_snmpTargetAddrMMS)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTargetAddrMMS, "snmpTargetAddrMMS")
const SR_UINT32 IDsnmpTargetAddrMMS[] = { 1, 3, 6, 1, 6, 3, 18, 1, 2, 1, 2 };
#else
extern const SR_UINT32 IDsnmpTargetAddrMMS[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTargetAddrMMS 11
#endif	/* defined(I_snmpTargetAddrMMS) */


#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_V3PART_H */
