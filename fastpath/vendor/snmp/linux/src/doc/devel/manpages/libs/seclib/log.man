.\"
.\"
.\" Copyright (C) 1992-2006 by SNMP Research, Incorporated.
.\"
.\" This software is furnished under a license and may be used and copied
.\" only in accordance with the terms of such license and with the
.\" inclusion of the above copyright notice. This software or any other
.\" copies thereof may not be provided or otherwise made available to any
.\" other person. No title to and ownership of the software is hereby
.\" transferred.
.\"
.\" The information in this software is subject to change without notice
.\" and should not be construed as a commitment by SNMP Research, Incorporated.
.\"
.\" Restricted Rights Legend:
.\"  Use, duplication, or disclosure by the Government is subject to
.\"  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
.\"  in Technical Data and Computer Software clause at DFARS 252.227-7013;
.\"  subparagraphs (c)(4) and (d) of the Commercial Computer
.\"  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
.\"  clauses in the NASA FAR Supplement and other corresponding
.\"  governmental regulations.
.\"
.\"
.\"
.\"                PROPRIETARY NOTICE
.\"
.\" This software is an unpublished work subject to a confidentiality agreement
.\" and is protected by copyright and trade secret law.  Unauthorized copying,
.\" redistribution or other use of this work is prohibited.
.\"
.\" The above notice of copyright on this source code product does not indicate
.\" any actual or intended publication of such source code.
.\"
.\"
.\"
.\"
.\"
.\"
.\"
.\"
.TH <MESSAGE\ LOGGING> SR_CLIBMAN "22 May 1996"

.SH NAME
DPRINTF,
SetLogLevel,
GetLogLevel,
SetLogFunction,
GetLogFunction,
SetLogUserData,
GetLogUserData,
SetProgname,
PrintLogMessage,
PrintShortLogMessage,
MakeLogMessage,
CopyLogMessage,
FreeLogMessage \- message logging

.SH SYNOPSIS
.nf
#define DEBUG
#include "sr_proto.h"
#include "sr_type.h"
#include "diag.h"

void
DPRINTF((log_level, format [ , arg... ] ))
   int log_level;
   char *format;

int
SetLogLevel(log_level)
   int log_level;

int
GetLogLevel(void)

LogFunc
SetLogFunction(new_func)
   LogFunc new_func;

LogFunc
GetLogFunction(void)

void *
SetLogUserData(new_data) 
   void *new_data;

void *
GetLogUserData(void)

void
SetProgname(s) 
   char *s;

void
PrintLogMessage(log) 
   LogEntry *log;

void
PrintShortLogMessage(log) 
   LogEntry *log;

LogEntry *
MakeLogMessage(LogLevel, timestamp, progname, filename,
               linenum, message, UserData) 
   SR_INT32 LogLevel;
   SR_UINT32 timestamp;
   char *progname;
   char *filename;
   SR_INT32 linenum;
   char *message;
   void *UserData;

LogEntry *
CopyLogMessage(log) 
   LogEntry *log;

void
FreeLogMessage(log) 
   LogEntry *log;
.fi

.SH DESCRIPTION
There are three types of messages that can be generated by SNMP
Research applications (including agents).  A global application setting
called the `LogLevel' selects which types of messages are generated,
and each log message, or
.I LogEntry,
has an associated
.I LogLevel.
.IP
.I Trace\ messages
are informational messages printed during
various interesting points of agent activity, including
reading a line from a configuration file, receiving an SNMP
packet, sending a trap, etc.  Trace messages can be very useful
for troubleshooting an application, but they are undesirable for
normal operations since a significant amount of system resources
are consumed to generate them.  The value macro
.I APTRACE
refers to trace messages.
.IP
.I Warning\ messages
are printed when an unexpected
but non\-fatal condition is encountered by the agent.  The value macro
.I APWARN
refers to trace messages.
.IP
.I Error\ messages
are printed when an unexpected
condition is experienced by the agent that can seriously affect
the operation of the agent.  The value macro
.I APERROR
refers to trace messages.
.PP
The
.BR DPRINTF ((\|))
macro is used to generate a log message.  This function converts,
formats, and prints its
.I args
under control of the
.I format
in the same manner as
.I printf(3).  The
.I log_level
parameter determines what type of message this log message will be.
If the LogLevel setting in the application includes the value of
.I log_level,
then this log message will be generated.
.B NOTE:
This macro requires that the set of all parameters must be enclosed
inside an additional pair of parentheses.

The
.BR SetLogLevel (\|)
function changes the LogLevel setting in the application.

The
.BR GetLogLevel (\|)
function retrieves the current LogLevel setting in the application.

The
.BR SetLogFunction (\|)
function selects the routine which handles log messages when they are
generated.  The default log handler is
.I PrintShortLogMessage(\|).

The
.BR GetLogFunction (\|)
function retrieves the current log handler function pointer.

The
.BR SetLogUserData (\|)
function changes the global value for
.I UserData
which is copied into each generated
.I LogEntry
structure.

The
.BR GetLogUserData (\|)
function retrieves the current value for
.I UserData.

The
.BR SetProgname (\|)
function sets the name of the current application.  The name of the
application is copied into each generated
.I LogEntry
structure.

The
.BR PrintLogMessage (\|)
function is a log handler routine which prints a detailed description
of the contents of a
.I LogEntry.
This log handler routine ignores
.I UserData.

The
.BR PrintShortLogMessage (\|)
function is a log handler routine which prints the generating application
name, message text, and the file name and line number where the call to
.I DPRINTF((\|))
is located.  This log handler routine ignores
.I UserData.

The
.BR MakeLogMessage (\|)
function builds and returns
.I LogEntry
structure.

The
.BR CopyLogMessage (\|)
function duplicates a
.I LogEntry
structure.

The
.BR FreeLogMessage (\|)
function frees all memory associated with a particular
.I LogEntry
structure.  When the log handler function called by the application
returns, the application issues a call to
.I FreeLogMessage(\|),
so, custom log handler functions usually need not call this function.
This function should be used to free any
.I LogEntry
structure created using
.I MakeLogMessage(\|)
or
.I CopyLogMessage(\|).

.SH EXAMPLE
.nf
int x = 1, y = 2;

SetProgname(argv[0]);
SetLogLevel(APERROR | APWARN);
SetLogFunction(PrintLogMessage);
SetLogUserData(NULL);

DPRINTF((APWARN, "warning: x is %d\\n", x));
DPRINTF((APERROR, "error: x is %d and y is %d\\n", x, y));
DPRINTF((APTRACE, "This log message NOT will be generated\\n"));

