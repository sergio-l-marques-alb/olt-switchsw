#
# EmWeb Top-level Makefile.
# Make Linux or VxWorks, whichever is defined.
#


# Source content.
#
srcdir  := $(FP_BASE)/src/mgmt/$(L7_EMWEBPACKAGE)/emweb
ROOT    := $(srcdir)

# Content source locations.
#
CONTENT := $(ROOT)/content
EWBUILD := $(ROOT)/build
LIB     := $(ROOT)/lib
FP_LSRC := $(ROOT)/websrc

# Content output location (if used).
#
CONTENT_OUTDIR := ./content

# OS-specific build configuration settings.
#
include $(ROOT)/config.$(CONFIG)/config.mak

# Sets ROOT_METHOD := root if using rearranged (selectable) content source tree.
#
ROOT_METHOD = $(shell if [ -d $(CONTENT)/root ] ; then echo "root" ; fi)


# Include EmWeb make variables and rules.
#
include $(EWBUILD)/make.pkg


# Output file names.
#
content_touch := _content_copy.touch
content_out   := _content.gen
content_old   := _content.gen.old
ew_proto_file := ew_proto.h
temp_out      := _temp.gen
temp1         := _templist1
temp2         := _templist2
temp3         := _templist3
tempsort      := _tempsort


# Build up Web Content tree definition.
#
# Note:  These paths are relative to content, but do not contain the source path
#        prefix so that they can also be used with an output content directory.
#
CONTENT_TREE :=
CONTENT_XTRA :=
include $(EWBUILD)/make.pkg.content

ifneq (,$(ROOT_METHOD))
  CONTENT_LIST := $(addprefix $(CONTENT)/,$(CONTENT_TREE))
  
else
  CONTENT_LIST := $(CONTENT_OUTDIR)
  
  ifneq (,$(filter content_prep,$(MAKECMDGOALS)))
    content_prep_dep  := _content_prep
  endif 

  ifneq (,$(filter content_copy,$(MAKECMDGOALS)))
    content_copy_dep := $(content_touch)
  endif 
  
endif


#
# Updated $(RM) .foo -f to $(RM) -f .foo to prevent build errors
# on different versions of Unix Tools. 
# Updated for Defect 33991 to change $(RM) -f .foo back to 
# $(RM) .foo since RM now has -f.
#
bldlib: bldlib-$(CONFIG)
	@:

installexe:
	@:

clean: clean-$(CONFIG) clean_ew_proto
	-$(DBG) $(RM) $(PKGLIB:.lib=.map)
	-$(DBG) $(RM) $(PKGLIB)
	-$(DBG) $(RM) -r $(CONTENT_OUTDIR)
	-$(DBG) $(RM) $(content_out) $(content_old) $(temp_out)
	-$(DBG) $(RM) $(temp1) $(temp2) $(temp3) $(tempsort)
	-$(DBG) $(RM) $(content_touch)

clean_ew_proto:
	@:


.PHONY: content_prep content_copy _content_prep

content_prep: $(content_prep_dep)
	$(DBG) if [[ -f $(content_out) ]] ; \
	then \
		mv -f $(content_out) $(content_old) ; \
	fi

content_copy: $(content_copy_dep)
	@:


# The following rules are only used when copying content to the output directory
# (i.e., when this Makefile is invoked with the 'content_copy' target).
#
# Note:  Be sure to run 'make content_prep' beforehand or else the copy won't occur.
#

ifneq (,$(COPYING_MSG))
  copying_msg2 = $(patsubst @%,%,$(COPYING_MSG)) "$(subst ../,$(BLANK),$(CONTENT))/$$i source subtree" ;
  copying_msg3 = $(patsubst @%,%,$(COPYING_MSG)) "$(subst ../,$(BLANK),$(CONTENT))/$$i source files" ;
endif

_content_prep:
	-$(DBG) $(RM) $(content_touch)

$(content_touch):
# Copy source content tree to output location (must create output dirs first).
	$(DBG) mkdir -p $(CONTENT_OUTDIR)
# Copy content subtrees (if any differences detected from source subtree).
	-$(DBG) $(RM) $(temp2) $(tempsort)
	$(DBG) touch $(temp2)
	$(DBG) $(foreach dir,$(CONTENT_TREE), echo $(dir) >> $(temp2);)
	$(DBG) cp $(temp2) $(tempsort)
	$(DBG) sort $(tempsort) > $(temp2)
	$(DBG) for i in `cat $(temp2)` ; \
	do \
		if ! diff -Nqr $(CONTENT)/$$i $(CONTENT_OUTDIR)/$$i $(REDIRERR) $(DEVNULL) ; \
		then \
			$(copying_msg2) \
			$(RM) -r $(CONTENT_OUTDIR)/$$i ; \
			mkdir -p $(CONTENT_OUTDIR)/$$i ; \
			cp -rpuf --backup=none $(CONTENT)/$$i/* $(CONTENT_OUTDIR)/$$i ; \
		fi ; \
	done
	-$(DBG) $(RM) $(temp2) $(tempsort)
# Copy individual content directory files (if any differences detected from source files).
	-$(DBG) $(RM) $(temp3) $(tempsort)
	$(DBG) touch $(temp3)
	$(DBG) $(foreach dir,$(CONTENT_XTRA), echo $(dir) >> $(temp3);)
	$(DBG) cp $(temp3) $(tempsort)
	$(DBG) sort $(tempsort) > $(temp3)
	$(DBG) for i in `cat $(temp3)` ; \
	do \
		if ! diff -Nq $(CONTENT)/$$i $(CONTENT_OUTDIR)/$$i $(REDIRERR) $(DEVNULL) ; \
		then \
			$(copying_msg3) \
			mkdir -p $(CONTENT_OUTDIR)/$$i ; \
			$(RM) $(CONTENT_OUTDIR)/$$i/* $(REDIRERR) | grep -iv "Is a directory" ; \
			find $(CONTENT)/$$i -maxdepth 1 -type f | sort | \
				xargs cp -puf --backup=none --target-directory=$(CONTENT_OUTDIR)/$$i ; \
		fi ; \
	done
ifeq (,$(ROOT_METHOD))
	$(DBG) cp -fp $(EWBUILD)/index.html $(CONTENT_OUTDIR)
endif
	-$(DBG) $(RM) $(temp3) $(tempsort)
	$(DBG) touch $@
# Note: Putting a sleep cmd after touch to compensate for mismatched system time-of-day clocks.
	$(DBG) sleep $(TOUCH_SLEEP)


# Content search controls.
#
content_types := *.html *.class *.css *.js *.gif *.jpg *.jar _ACCESS
content_grep  := ($(subst $(SPACE),|,$(subst *,\,$(content_types))))$$

ifneq (,$(filter bldlib,$(MAKECMDGOALS)))
$(content_out):
	@ mkdir -p $(OD)
# Build	list of content files and store results in a temp file.
	-$(DBG) $(RM) $(temp1)
	$(DBG) touch $(temp1)
	$(DBG) find $(CONTENT_LIST) -type f -name "*" -print | \
		grep -E "$(content_grep)" >> $(temp1)
# Create dependency list and build rule from content file list.
# NOTE: Using literals for $, (, ), etc., so make won't interpret variables
# being echoed to the output file.
	$(DBG) echo -e "$(ew_proto_file) : $(BKSL)" > $(temp_out)
	$(DBG) cat $(temp1) | xargs printf "\t%s $(BKSL)$(NEWL)" >> $(temp_out)
	$(DBG) echo -e "# DO NOT REMOVE (placeholder to catch previous line continuation)" >> $(temp_out)
	$(DBG) echo -e "\\t$(DSLP)CREATING_MSG$(RP)" >> $(temp_out)
	$(DBG) echo -e "\\t$(DSLP)DBG$(RP) $(DSLP)EWC$(RP) $(DSLP)EWFLAGS$(RP) --no-strict-const -o ew_ -c $(DSLP)CONTENT_LIST$(RP)" >> $(temp_out)
	$(DBG) echo -e "\\t$(DSLP)FINISHED_MSG$(RP)" >> $(temp_out)
	$(DBG) echo -e "\\t$(DSLP)DBG$(RP) $(DSLP)PERL$(RP) $(DSLP)EWBUILD$(RP)/ew_code.pl" >> $(temp_out)
	$(DBG) cat $(temp1) | xargs printf "%s:$(NEWL)" >> $(temp_out)
	-$(DBG) $(RM) $(temp1)
# Check if content tree has changed in order to force rebuild of ew_proto.h
# (since it has a dependency on the $(content_out) file).
	$(DBG) if ! cmp -s $(temp_out) $(content_old) ; \
	then \
		$(RM) $(ew_proto_file) ; \
	fi
	$(DBG) cp -f $(temp_out) $(content_out)
	$(DBG) $(RM) $(content_old)


# Manufactured rule to build ew_proto.h.
#
  -include $(content_out)

endif


.PHONY: debug-variables
debug-variables::
	@$(echo) ""
	@$(echo) "Makefile Debug Variables For '$(PKGNAME)' Package:"
	@$(echo) "===================================================="
	@$(echo) "CONFIG=$(CONFIG)"
	@$(echo) "ROOT_METHOD=$(ROOT_METHOD)"
	@$(echo) "CONTENT=$(CONTENT)"
	@$(echo) ""
	@$(echo) "CONTENT_TREE=$(CONTENT_TREE)"
	@$(echo) ""
	@$(echo) "CONTENT_XTRA=$(CONTENT_XTRA)"
	@$(echo) ""
	@$(echo) "CONTENT_LIST=$(CONTENT_LIST)"
	@$(echo) ""
	@$(echo) "EWC_SOURCES=$(EWC_SOURCES)"
	@$(echo) ""
	@$(echo) "SOURCES=$(SOURCES)"
	@$(echo) ""
	@$(echo) "CFLAGS_$(CONFIG)=$(CFLAGS_$(CONFIG))"
	@$(echo) ""
	@$(echo) "CFLAGS=$(CFLAGS)"
	@$(echo) ""
	@$(echo) "XCFLAGS=$(XCFLAGS)"
	@$(echo) ""
	@$(echo) "IFLAGS=$(IFLAGS)"
	@$(echo) ""
	@$(echo) "XIFLAGS=$(XIFLAGS)"
	@$(echo) ""
	@$(echo) "OBJECTS=$(OBJECTS)"
	@$(echo) ""
	@$(echo) "SOURCE_PATHS=$(SOURCE_PATHS)"
	@$(echo) ""
	@$(echo) "VPATH=$(VPATH)"
	@$(echo) ""
	@$(echo) "ORIGIN VPATH: $(origin VPATH)"
	@$(echo) ""
	@$(echo) "C_INCLUDE_PATH=$(C_INCLUDE_PATH)"
	@$(echo) ""
	@$(echo) "CD=$(CD)"
	@$(echo) "BD=$(BD)"
	@$(echo) "OD=$(OD)"
	@$(echo) ""

