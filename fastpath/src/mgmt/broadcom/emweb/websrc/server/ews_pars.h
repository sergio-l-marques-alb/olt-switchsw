/*
 * Product: EmWeb
 * Release: R6_2_0
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION OF VIRATA CORPORATION
 * THE EMWEB SOFTWARE ARCHITECTURE IS PATENTED (US PATENT #5,973,696)
 * AND OTHER US AND INTERNATIONAL PATENTS PENDING.
 * 'EMWEB' AND 'EMSTACK' ARE TRADEMARKS OF VIRATA CORPORATION
 * 
 * Notice to Users of this Software Product:
 * 
 * This software product of Virata Corporation ("Virata"), 5 Clock Tower
 * Place, Suite 400, Maynard, MA  01754 (e-mail: info@virata.com) in 
 * source and object code format embodies valuable intellectual property 
 * including trade secrets, copyrights and patents which are the exclusive
 * proprietary property of Virata. Access, use, reproduction, modification
 * disclsoure and distribution are expressly prohibited unless authorized
 * in writing by Virata.  Under no circumstances may you copy this
 * software or distribute it to anyone else by any means whatsoever except in
 * strict accordance with a license agreement between Virata and your
 * company.  This software is also protected under patent, trademark and 
 * copyright laws of the United States and foreign countries, as well as 
 * under the license agreement, against any unauthorized copying, modification,
 * or distribution.
 * Please see your supervisor or manager regarding any questions that you may
 * have about your right to use this software product.  Thank you for your
 * cooperation.
 * 
 * Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Virata Corporation
 * All Rights Reserved
 * 
 * Virata Corporation
 * 5 Clock Tower Place
 * Suite 400
 * Maynard, MA  01754
 * 
 * Voice: +1 (978) 461-0888
 * Fax:   +1 (978) 461-2080
 * 
 * http://www.emweb.com/
 *   support@agranat.com
 *     sales@agranat.com
 *
 * EmWeb/Server HTTP parser definitions
 *
 */

#ifndef EWS_PARS_H_
#define EWS_PARS_H_

#include "ew_types.h"
#include "ew_config.h"
#include "ews_def.h"
#include "ews_str.h"

/*
 * EwsRequestHeaderIndex
 *
 * This is an enum index list used for managing the parsing of request
 * headers.
 *
 * NOTE: This list must correspond exactly to ews_request_header_table[]
 *       defined in ews_pars.c.
 */
typedef enum EwsRequestHeaderIndex_e
  {

    /*
     * Note: start the table off at 0 since this is used as an index into
     *       the ews_request_header_table array
     */
    ewsRequestHeaderUnknown = 0,

    /*
     * The non-dummy elements of this enum are generated by including
     * ews_req.h with EW_REQ_ENUM defined.  ews_request_header_table[] is
     * constructed by ews_req.h as well.  This ensures that the two
     * are conditionalized in the same way, which reduces errors.
     */
#define EW_REQ_ENUM
#include "ews_req.h"
#undef EW_REQ_ENUM

    /*
     * This must be the last element in the enum.
     */
    ewsRequestHeaderCount

  } EwsRequestHeaderIndex;

#ifdef EW_CONFIG_OPTION_FIELDTYPE_FILE
/*
 * EwsFormDataHeaderIndex
 *
 * Similar to the EwsRequestHeaderIndex, this enum represents a
 * list of headers that the server is only interested in when parsing
 * the <INPUT TYPE=FILE> field in a multipart/form-data submission.
 * Unlike the request headers, these headers are only in use while the
 * server is processing the associated message segment.
 *
 * NOTE: MUST MATCH ews_form_data_header_table[] below!!!
 */
typedef enum EwsFormDataHeaderIndex_e
{
  ewsFormDataHeaderUnknown = 0,         /* unrecognized */
  ewsFormDataHeaderContentType,         /* Content-Type */
  ewsFormDataHeaderContentLength,       /* Content-Length */
  ewsFormDataHeaderContentDisposition,  /* Content-Disposition */
  ewsFormDataHeaderTransferEncoding,    /* Content-Transfer-Encoding */
  /*
   * the following must be last
   */
  ewsFormDataHeaderCount
} EwsFormDataHeaderIndex;
#endif /* EW_CONFIG_OPTION_FIELDTYPE_FILE */


#ifdef EW_CONFIG_OPTION_COOKIES

/*
 * structure to which cookie is copied after parsing
 *
 */

typedef struct EwsCookie_s {
  struct EwsCookie_s    *next;
  char                  *nameP;
  char                  *valueP;
} EwsCookie, *EwsCookieP;

#endif /* EW_CONFIG_OPTION_COOKIES */


#ifdef EW_CONFIG_OPTION_CONTENT_NEGOTIATION

/* structure to hold Negotiate header data */
typedef struct EwsNegotiateHdrData_s {
  struct EwsNegotiateHdrData_s  *next;
  char                          *directive;  /* Negotiate directive */
  boolean                       extn;        /* header extension */
} EwsNegotiateHdrData, *EwsNegotiateHdrDataP;
#endif /* EW_CONFIG_OPTION_CONTENT_NEGOTIATION */

#ifdef EW_CONFIG_OPTION_CONTENT_NEGOTIATION

/* structure to hold Accept header data */
typedef struct EwsAcceptHdrData_s {
  struct EwsAcceptHdrData_s  *next;
  char                       *data;    /* Accept data */
  char                       *qual;    /* quality value */
  boolean                    extn;     /* header extension */
} EwsAcceptHdrData, *EwsAcceptHdrDataP;

#endif /* EW_CONFIG_OPTION_CONTENT_NEGOTIATION */


/*
 * ewsParse
 * Crank HTTP parser state machine on HTTP request data queue attached to
 * request context.
 *
 * context      - Context of request
 *
 * Returns TRUE if there is more parsing to be done (e.g. after a state
 * transition), FALSE if more data is needed before parsing can continue.
 */
extern boolean ewsParse ( EwsContext context );

/*
 * ewsParseHeader
 * This function is called from ewsParse when context->req_header has been
 * parsed.  Some headers require special internal handling (e.g. for
 * authentication, content-length, etc.) and are handled here.
 *
 * context      - Context of request
 *
 * No return value
 */
extern void ewsParseHeader ( EwsContext context );

/*
 * ewsParseReleaseUnusedBuffers
 * This function is called each time the HTTP parser saves a string.  The
 * context keeps track of the last saved buffer (context->req_buf_used).
 * If this last buffer is equal to or immediately preceding the first buffer
 * in the saved estring (from context->req_str_begin), then there are no
 * unused buffers to release.  Otherwise, we can safely free buffers
 * starting with the buffer immediately following req_buf_used up to but
 * not including the first buffer in the saved estring req_str_begin.
 * This is a simple optimization intended to prevent EmWeb/Server from holding
 * on to large HTTP request headers if no useful information is contained in
 * them.
 *
 * context      - context of request
 * string_saved - TRUE if string just saved, otherwise FALSE.  If TRUE, the
 *                req_buf_used state is updated, otherwise it is left alone.
 *
 * No return value
 */
extern void ewsParseReleaseUnusedBuffers
  ( EwsContext context, boolean string_saved );

/*
 * ewsParseAwaitingRequest
 * Test if the parser is awaiting the beginning of a request.
 * Assumes context has returned from ewsPars().
 *
 * context      - Context of request
 *
 * Returns TRUE if the parser is in a state indicating that it expects the
 * beginning of an HTTP request next.
 * Returns FALSE if the parser has seen that an initial part of a request has
 * already been processed, but the request has not been finished.  I.e., a
 * state in which seeing end-of-input would indicate a malformed request.
 */
extern boolean ewsParseAwaitingRequest ( EwsContext context );

#ifdef EW_CONFIG_OPTION_FORM_REPEAT
/*
 * ewCheckPrefix
 * This functions parses string of format:
 *   #.#.#.name
 * to EwsRptName structure
 */
typedef struct EwsRptName_s
  {
    uint32    number;           /* which repeat body within form */
    uint32    iteration;        /* which iteration */
    uint32    total_cnt;        /* total number of body repeats */
  } EwsRptName;


boolean ewCheckPrefix(EwsStringP name, EwsRptName *rpt);
#endif /* EW_CONFIG_OPTION_FORM_REPEAT */

#if defined (EW_CONFIG_OPTION_COOKIES) \
    || defined (EW_CONFIG_OPTION_FIELDTYPE_FILE) \
    || defined (EW_CONFIG_OPTION_AUTH_DIGEST) \
    || defined (EW_CONFIG_OPTION_PERSISTENT) \
    || defined (EW_CONFIG_OPTION_CLIENT)

typedef enum EwsParseAttHdr_e {
     ewsParseValue
    ,ewsParsePair
} EwsParseAttHdr;

typedef enum EwsHdrUpdate_e {
     ewsHdrUpdateYes
    ,ewsHdrUpdateNo
} EwsHdrUpdate;

boolean
ewsParseAttributeFromHeader( EwsString *header
                     ,void *attribute
                     ,EwsString *value
                     ,EwsParseAttHdr function
                     ,char c
                     ,EwsHdrUpdate hdrUpdate );
#endif /* EW_CONFIG_OPTION_FIELDTYPE_FILE  || EW_CONFIG_OPTION_COOKIES
          || EW_CONFIG_OPTION_AUTH_DIGEST || EW_CONFIG_OPTION_PERSISTENT
          || EW_CONFIG_OPTION_CLIENT */

#if EW_CONFIG_HTTP_PROTOCOL >= HTTP_1_1 && \
    ( defined(EW_CONFIG_OPTION_FORM) || \
      defined(EW_CONFIG_OPTION_FILE_PUT) ||\
      defined(EW_CONFIG_OPTION_PRIMARY) ||\
      defined(EW_CONFIG_OPTION_PERSISTENT) ||\
      (defined(EW_CONFIG_OPTION_UPNP) && defined(EW_CONFIG_OPTION_SOAP)) ||\
      defined(EW_CONFIG_OPTION_PRIMARY) )
boolean ewsParseChunk(EwsContext context);
#endif

#endif /* EWS_PARS_H_ */
