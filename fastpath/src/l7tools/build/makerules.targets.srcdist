##############################################################################
#
# makerules.targets.srcdist
#
# Purpose:  
#      Defines all possible target rules supported by the make system.
#
# Note:
#      The actual set of targets that get invoked is determined by
#      the build characteristics per the package.cfg file.
#
# Note:
#      The contents of this file overwrites makerules.targets when a 
#      buildable view is converted to a linkable object build.
#
##############################################################################

# Include the make configuration file.
#
include $(FP_ROOT)/src/l7tools/build/make.cfg

# Include the target definitions.
#
include $(FP_ROOT)/src/l7tools/build/make.targets


# Modify active target name when invoking 'make' for a package-specific goal.
#
active_target = $(MAKECMDGOALS)
ifneq (,$(filter $(MAKECMDGOALS),$(LIB_TARGETS)))
  active_target = bldlib
endif
ifneq (,$(filter $(MAKECMDGOALS),$(LINK_TARGETS)))
  active_target = installexe
endif
ifneq (,$(filter $(MAKECMDGOALS),$(CLEAN_TARGETS)))
  active_target = clean
endif
ifneq (,$(filter $(MAKECMDGOALS),$(DEBUG_TARGETS)))
  active_target = debug-variables
endif

# Set up a build progress message.
#
ifneq (terse,$(CMD_DISPLAY_MODE))
  ifneq (,$(filter $(active_target),bldlib installexe))
    checking_msg = @printf "Checking '$@'\n"
  endif
endif


# Translate build target name into a package id.
#
outpkgid = $(OUT_$(patsubst clean-%,%,$(patsubst debug-%,%,$@)))


# Define common command for ensuring output directory is created.
#
create_dir = $(DBG)$(MKDIRP) $(FP_BASE)/$(outpkgid)


# Redirection command for makefile logging mode.
#
ifeq (Y,$(MKLOG))
  logging_cmd = >> $(FP_BASE)/$(outpkgid)/Makefile.log $(REDIRERR)
endif


# Note: Be sure to reference this using +$(FP_MAKE) so that certain make
#       command line parameters are passed through to the sub-makefile.
#
FP_MAKE         = $(DBG)$(MAKE) $(MPARMS) -C $(FP_BASE)/$(outpkgid)
make_cmd_common = $(active_target) $(logging_cmd)


.PHONY: $(ALL_TARGETS)


# Enforce disallowed targets when local dir/file is specified.
#
ifeq (1,$(CMD_LOCAL_DIR_OR_FILE))
$(DISALLOWED_LOCAL_TARGETS)::
	@$(echo) ""
	@$(echo) "The 'local=' command option is only allowed for 'all', 'bldlib' or individual package targets."
	@$(echo) ""
	@exit 50
endif


# Explicit targets.
#
        
bldlib:: $(LIB_TARGETS)

installexe cleanexe convert:: $(LINK_TARGETS)

clean:: $(CLEAN_TARGETS)

debug-variables:: $(DEBUG_TARGETS)


# Check all Makefile.log files for errors.
#
snafu::
	$(DBG)$(PERL) $(FP_ROOT)/src/l7tools/build/snafu.pl $(FP_ROOT)/$(OUTPATH) $(DBG)


# Print various build metrics from the .map files.
#
metrics::
	$(DBG)$(PERL) $(FP_ROOT)/src/l7tools/build/process_output_map.pl $(FP_ROOT)/$(OUTPATH)


# Individual package targets.
#
# Note: These target rules represent packages distributed as source-only
#       or as a source-object combination.  Do not put any object-only
#       package targets here (they belong in the makerules.targets file).
#
# Note: The ANDL package is treated as a special case, since it can be
#       distributed in either source or object form (choice is based on the
#       linkable object target name used).  The ANDL make system is handled
#       as though source form is used, but the files are built like most
#       object-only packages.
#

andl clean-andl debug-andl::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/andl/hapi/$(L7_CHIP)/make/Makefile $(make_cmd_common)
	+$(FP_MAKE) -f $(FP_BASE)/andl/make/Makefile $(make_cmd_common)
        
base clean-base debug-base::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/application/base/make/Makefile $(make_cmd_common)

binds clean-binds debug-binds::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/binds/make/Makefile $(make_cmd_common)

plat_bsp clean-plat_bsp debug-plat_bsp::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/bsp/platform/$(L7_COMPANY)/make/Makefile $(make_cmd_common)

cpu_bsp clean-cpu_bsp debug-cpu_bsp::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/bsp/cpu/make/Makefile $(make_cmd_common)

chassis clean-chassis debug-chassis::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/system_support/chassis/make/Makefile $(make_cmd_common)

cli clean-cli debug-cli::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/$(L7_EMWEBPACKAGE)/cli/make/Makefile $(make_cmd_common)

tr069ui clean-tr069ui debug-tr069ui::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/tr069/make/Makefile $(make_cmd_common)

emweb clean-emweb debug-emweb::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/$(L7_EMWEBPACKAGE)/emweb/make/Makefile.ews $(make_cmd_common)

web clean-web debug-web::
	$(checking_msg)
	+$(create_dir)
# Must build the EmWeb subsystem before building any Web source files.
ifneq (,$(filter bldlib,$(active_target)))
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/$(L7_EMWEBPACKAGE)/emweb/build/Makefile content_prep $(logging_cmd)
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/$(L7_EMWEBPACKAGE)/emweb/build/Makefile content_copy $(logging_cmd)
endif	
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/$(L7_EMWEBPACKAGE)/emweb/build/Makefile $(make_cmd_common)
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/$(L7_EMWEBPACKAGE)/emweb/make/Makefile $(make_cmd_common)

kmod clean-kmod debug-kmod::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/andl/hapi/$(L7_CHIP)/make/Makefile.kmod $(make_cmd_common)

nls clean-nls debug-nls::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/nls/make/Makefile $(make_cmd_common)

os clean-os debug-os::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/os/make/Makefile $(make_cmd_common)

snmp clean-snmp debug-snmp::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/snmp/make/Makefile $(make_cmd_common)


modb:: xlib
modb clean-modb debug-modb::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/modb/make/Makefile $(make_cmd_common)
	
xweb:: xlib
xweb clean-xweb debug-xweb::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/$(L7_CUSTOMER)/web/make/Makefile dep_$(make_cmd_common)	
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/web/make/Makefile $(make_cmd_common)	
	+$(FP_MAKE) -f $(FP_BASE)/src/mgmt/$(L7_CUSTOMER)/web/make/Makefile $(make_cmd_common)	

xlib clean-xlib debug-xlib:: 
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/src/xui/make/Makefile $(make_cmd_common)

# Final executable link targets.
#

ifeq (1,$(BLD_L7_TARGETOS_LINUX))

  ipl clean-ipl debug-ipl::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/bsp/cpu/common/linux/ipl/Makefile $(make_cmd_common)

endif

# Must build start before ipl for VxWorks.
ifeq (1,$(BLD_L7_TARGETOS_VXWORKS))

  start clean-start debug-start::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/bsp/cpu/$(L7_CPU)/vxworks/start/Makefile $(make_cmd_common)

  ipl clean-ipl debug-ipl:: %ipl : %start
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/bsp/cpu/$(L7_CPU)/vxworks/ipl/Makefile $(make_cmd_common)

endif

ifeq (1,$(BLD_L7_TARGETOS_ECOS))

  ipl clean-ipl debug-ipl::
	$(checking_msg)
	+$(create_dir)
	+$(FP_MAKE) -f $(FP_BASE)/bsp/cpu/common/ecos/ipl/Makefile $(make_cmd_common)

endif

