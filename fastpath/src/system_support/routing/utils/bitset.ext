/********************************************************************
 *
 * (C) Copyright Broadcom Corporation 2003-2007
 *
 * *********************************************************************
 *
 * @filename        bitset.ext
 *
 * @purpose         External prototypes for bitset object
 *
 * @component       Routing Utils Component
 *
 * @comments
 *
 * @create          12/25/2000
 *
 * @author          slipov 
 *
 * @end                                                                        
 *
 * ********************************************************************/        
#ifndef BIT_SET_EXT
#define BIT_SET_EXT

#include "std.h"

#define BS_IS_ALLOC   0x00000001 /* This bit set is created as an allocator */



/*********************************************************************
 * @purpose          Creates a bit set object of a given size.
 *
 *
 * @param size       @b{(input)}  bitset size in bits
 * @param flags      @b{(input)}  Bitset flags
 * @param p_bitset   @b{(output)}  pointer to the created object is returned here
 *
 * @returns          e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_Init( IN   ulng      size,
               IN   ulng      flags,
               OUT  t_Handle  *p_bitset);




/*********************************************************************
 * @purpose        Initializes a bit set object from an array of a given
 *                 size.
 *
 *
 * @param bsHandle   @b{(input)}  bitset handle
 * @param p_array    @b{(input)}  Pointer to array of longs
 * @param arSize     @b{(input)}  size of array in longs
 *
 * @returns          e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_From_Array( IN   t_Handle  bsHandle,
                     IN   ulng      *p_array,
                     IN   ulng      arSize);



/*********************************************************************
 * @purpose               Creates a bit set object cloned from another
 *                        bit set object
 *
 *
 * @param src             @b{(input)}  original bit set to be cloned
 * @param *p_bitset       @b{(output)}  pointer to the created object is
 *                                     returned here
 *
 * @returns               e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_Clone(IN   t_Handle  src,
               OUT  t_Handle  *p_bitset);




/*********************************************************************
 * @purpose        Copies a bit set object from another bit set object.
 *
 *
 * @param  src     @b{(input)}  original bit set to be copied
 * @param  dest    @b{(input)}  destination bit set
 *
 * @returns        e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_Copy( IN  t_Handle  src,
               IN  t_Handle  dest);





/*********************************************************************
 * @purpose           Destroys a bit set object.
 *
 *
 * @param bitset      @b{(input)}  bitset to be destoyed
 *
 * @returns           e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_Destroy( IN t_Handle  bitset);




/*********************************************************************
 * @purpose     Returns the value of the bit at index location.
 *
 *
 * @param       bitset  @b{(input)}  bitset handle
 * @param       index   @b{(input)}  tested bit index
 * @param       p_value @b{(input)}  it value is returned here (least
 *                                   significant bit of the byte)
 *
 * @returns     e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_GetBit( IN  t_Handle  bitset,
                 IN  ulng      index,
                 OUT byte      *p_value);




/*********************************************************************
 * @purpose          Sets the value of the bit at index location.
 *
 *
 * @param  bitset    @b{(input)}  bitset handle
 * @param  index     @b{(input)}  tested bit index
 * @param  value     @b{(input)}  bit value to set (least significant
 *                           bit of the byte)
 *
 * @returns          e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_SetBit( IN  t_Handle  bitset,
                 IN  ulng      index,
                 IN  byte      value);





/*********************************************************************
 * @purpose          Sets the entire bit set.
 *
 *
 * @param bitset     @b{(input)} bitset handle
 * @param value      @b{(input)}  bit value to set (least significant bit
 *                                                          of the byte)
 *
 * @returns          e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_SetAll( IN  t_Handle  bitset,
                 IN  byte      value);




/*********************************************************************
 * @purpose          Flips the value of the bit at index location.
 *
 *
 * @param bitset     @b{(input)}  bitset handle
 * @param index      @b{(input)}  tested bit index
 *
 * @returns          e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_FlipBit( IN  t_Handle  bitset,
                  IN  ulng      index);



/*********************************************************************
 * @purpose           Flips the entire bit set.
 *
 *
 * @param  bitset     @b{(input)}  bitset handle
 *
 * @returns           e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_FlipAll( IN  t_Handle  bitset);




/*********************************************************************
 * @purpose           AND operation over the entire bit set, i.e. bitsetL
 *                    &= bitsetR.
 *
 *
 * @param bitsetL      @b{(output)}  left hand bitset handle, source and
 *                                  result.
 * @param bitsetR      @b{(input)}  rigth hand bitset
 *
 * @returns            e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_AndAll( IN OUT  t_Handle  bitsetL,
              IN      t_Handle  bitsetR);



/*********************************************************************
 * @purpose            OR operation over the entire bit set, i.e. bitsetL
 *                     |= bitsetR.
 *
 *
 * @param bitsetL      @b{(output)}  left hand bitset handle, source and
 *                                  result.
 * @param bitsetR      @b{(input)}  rigth hand bitset
 *
 * @returns            e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_OrAll( IN OUT  t_Handle  bitsetL,
                IN      t_Handle  bitsetR);





/*********************************************************************
 * @purpose          XOR operation over the entire bit set, i.e. bitsetL
 *                   ^= bitsetR.
 *
 *
 * @param bitsetL     @b{(output)}  left hand bitset handle, source and result.
 * @param bitsetR     @b{(input)}  rigth hand bitset
 *
 * @returns           e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_XorAll( IN OUT  t_Handle  bitsetL,
                 IN      t_Handle  bitsetR);




/*********************************************************************
 * @purpose           Returns bit set object size.
 *
 *
 * @param bitset      @b{(input)}  bitset handle
 * @param p_size      @b{(input)}  bitmap size in bits is returned here
 *
 * @returns           e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_GetSize( IN  t_Handle  bitset,
                  OUT ulng      *p_size);






/*********************************************************************
 * @purpose           Returns index of the first element set to a given
 *                    value (0 or 1).
 *
 *
 * @param bitset      @b{(input)}  bitset handle
 * @param value       @b{(input)}  bit value to find (least significant bit of
 *                                                    the byte)
 * @param *p_index    @b{(output)}  index of the first set element is returned
 *                                 here
 *
 * @returns      e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_GetFirst( IN  t_Handle  bitset,
                   IN  byte      value,
                   OUT ulng      *p_index);



/*********************************************************************
 * @purpose     Returns index of the first element set to a given value
 *              (0 or 1) after the given previous element.
 *
 *
 * @param bitset      @b{(input)}  bitset handle
 * @param prevIndex   @b{(input)}  index of the previous found element
 * @param value       @b{(input)}  bit value to find (least significant bit
 *                                                     of the byte)
 * @param p_index     @b{(output)}  index of the next set element is returned
 *                                  here
 *
 * @returns           e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_GetNext(  IN  t_Handle  bitset,
                   IN  ulng      prevIndex,
                   IN  byte      value,
                   OUT ulng      *p_index);





/*********************************************************************
 * @purpose          Returns index of any element set to a given value
 *                     (0 or 1).
 *
 *
 * @param bitset     @b{(input)} bitset handle
 * @param value      @b{(input)} bit value to find (least significant bit
 *                                                  of the byte)
 * @param p_index    @b{(output)} index of the first set element is returned
 *                                here
 *
 * @returns          e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_GetAny( IN  t_Handle  bitset,
                 IN  byte      value,
                 OUT ulng      *p_index);




/*********************************************************************
 * @purpose          Returns index of the first element in the sequence
 *                   of elements set to a given value(0 or 1).
 *
 *
 * @param bitset     @b{(input)}  bitset handle
 * @param value      @b{(input)}  bit value to find (least significant bit of
 *                                                    the byte)
 * @param length     @b{(input)}  length of the sequence
 * @param p_index    @b{(output)}  index of the first set element is returned
 *                                here
 *
 * @returns          e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_GetSeq( IN  t_Handle  bitset,
                 IN  byte      value,
                 IN  ulng      length,
                 OUT ulng      *p_index);




/*********************************************************************
 * @purpose          Returns number of elements having a given value.
 *
 *
 * @param bitset     @b{(input)}  bitset handle
 * @param value      @b{(input)}  0 or 1
 * @param p_num      @b{(output)}  number of 1s is returned here
 *
 * @returns          e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_NumSet(IN  t_Handle  bitset,
                IN  byte      value,
                OUT ulng      *p_num);




/*********************************************************************
 * @purpose           Copies the bitset contents to the given array
 *                    of longs.
 *
 *
 * @param bsHandle    @b{(input)}  bitset handle
 * @param p_array     @b{(input)}  pointer to array of longs to copy
 *                                 the bitset
 * @param arSize      @b{(input)}  size of array in longs to fill
 *
 * @returns           e_Err
 *
 * @notes
 *
 * @end
 * ********************************************************************/
e_Err BS_To_Array( IN   t_Handle  bsHandle,
                   IN   ulng      *p_array,
                   IN   ulng      arSize);

#endif /* BIT_SET_EXT */
