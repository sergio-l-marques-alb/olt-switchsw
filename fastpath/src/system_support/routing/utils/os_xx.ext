/********************************************************************
 *
 * (C) Copyright Broadcom Corporation 2003-2007
 *
 * *********************************************************************
 *
 * @filename            os_xx.ext
 *
 * @purpose             OS dependent system services API
 *
 * @component           Routing Utils Component
 *
 * @comments
 *
 * @create              01/09/19993
 *
 * @author              Jonathan Masel
 *                      Igor Bryskin
 *
 * @end
 *
 * ********************************************************************/
#ifndef _OS_XX_EXT
#define _OS_XX_EXT

#include "std.h"
#include "local.h"

/* OS-dependend defines */

/* Number of 32 bit words of OS-specific extension in XX_Call block */
#if RTOS==ATMOS_RTOS
#define OS_XXCALL_EXT_WORDS      8
#else
#define OS_XXCALL_EXT_WORDS      0
#endif

#ifdef __cplusplus
extern "C"{
#endif

/********************************/
/* Non-Portable System Services */
/********************************/

typedef void (* FUNC_Interrupt)(t_HandleAsLong parm);
typedef void (* FUNC_Print)(char *);

typedef struct tagt_DateTime    /* date and time */
{
   unsigned char month;         /* month                */
   unsigned char day;           /* day                  */
   unsigned char year;          /* year                 */
   unsigned char hour;          /* hour - 24 hour clock */
   unsigned char min;           /* minute               */
   unsigned char sec;           /* second               */
   unsigned char tenths;        /* tenths of second     */
}
t_DateTime;


/*Terminate on fatal error */
void OS_Terminate(const char *reason);

/*General initialization of the memory management*/
void OS_MEM_InitAll(void);

/* General shut down with release of all resources */
void OS_XX_ShutDown(void);

#if RTOS == NUCLEUS_RTOS
void  OS_MEM_SetHeapStart( void *heapStart );
#endif

/* Init a pool */
e_Err OS_MEM_Init(void *begaddr, ulng memsize, t_Handle *p_poolHandle);
e_Err OS_MEM_InitAlign(void *begaddr, ulng memsize, word align, t_Handle *p_poolHandle);
ulng  OS_MEM_SizeofInitAlign(Bool staticPartition, ulng memsize, word align);

/* Allocate data from the pool */
void *OS_GetMem(t_Handle poolHandle, ulng size);

/* Return available free memory (in bytes) in the pool */
ulng OS_GetFreeMem(t_Handle poolHandle);

/* Delete a pool */
e_Err OS_MEM_Delete(t_Handle poolHandle);

/* Disable interrupts */
void OS_XX_Freeze(void);

/* Enable interrupts */
void  OS_XX_Thaw(void);

/* Get current processor id */
ulng OS_XX_GetCurProcId(void);

/* Check if specfied thread is current */
Bool OS_XX_IsThreadCurrent(t_Handle threadId);

/* Create a thread with operating system */
e_Err OS_XX_CreateThread(byte priority,
                         e_Err (*pThreadFunc)(void *), /* function to process messages  */
                                                       /* from other threads            */
                         Bool fPermanent,              /* if TRUE, thread is permanent, */
                                                       /* relevant in nonpreemtive environment */
                         t_Handle *p_threadId,         /* pointer to put thread handle  */
                         byte numQueues,               /* Num queues serviced by this thread */
                         unsigned int *queueLengths,   /* Array of queue lengths */
                         unsigned int *queueWeights,   /* Num msgs to reach from each queue */
                         char *ThreadName);            /* Name of thread. For status/debugging */

/* Kill thread */
e_Err OS_XX_KillThread(t_Handle threadId, Bool taskContext);

/* Create a timer task with operating system */
e_Err OS_XX_CreateTmrTsk(ulng period,             /* frequency in ticks of invoking */
                                                  /*   pTsk function                */
                         e_Err (*pTskFunc)(void), /* function to be called          */
                         t_Handle *p_TskHndle);   /* pointer to put task handle     */

/* Kill timer task */
e_Err OS_XX_KillTmrTsk(t_Handle tskHndle);

/* Post a message to another thread */
e_Err OS_XX_Call(t_Handle threadId,   /* destination thread handle */
                 void *msgBuf,        /* message buffer address    */
                 char *funcName,
                 ulng lineNum);

/* Print out a warning, comment or any arbitrary text on the system console */

void OS_XX_Print(const char *string);

/* Print out a message about system crash on the system console */
void OS_XX_Panic_Print(const char *string);

/* Check for input */
Bool OS_XX_IsCharAvailable( void );
/* Redirect print */
FUNC_Print OS_XX_RedirectPrint(FUNC_Print f_print);

/* Redirect OS Terminate */
FUNC_Print OS_XX_RedirectTerminate(FUNC_Print f_print);

/* Return current data */
void OS_XX_GetDateTime(t_DateTime *dt);

/* Lock mutex routine */
void OS_XX_Lock ( t_Handle p );

/* Unlock mutex routine */
void OS_XX_Unlock ( t_Handle p );

/* Create mutex */
e_Err OS_XX_CreateMutex(t_Handle *p);

/* Delete mutex */
void OS_XX_DeleteMutex(t_Handle *p);

/* Check if specified pointer is invalid */
Bool OS_XX_IsBadPtr(void *ptr, ulng length);

/* Initialize OS and processor related stuff */
e_Err OS_XX_InitAll( void );

/* Starts things running */
void OS_XX_Start( void );

byte   *OS_XX_MallocNoCache( ulng Size );
byte   *OS_XX_MallocNoCacheAlign( ulng Size, word Align );
void   OS_XX_FreeNoCache( void *buf );



#ifdef __cplusplus
}
#endif

#endif  /*_OS_XX_EXT */
