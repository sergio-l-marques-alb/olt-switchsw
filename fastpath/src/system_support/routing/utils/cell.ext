/********************************************************************
 *
 * (C) Copyright Broadcom Corporation 2003-2007
 *
 * *********************************************************************
 *
 * @filename     cell.ext
 *
 * @purpose      External prototypes for cell object
 *
 * @component    Routing Utils Component
 *
 * @comments
 *
 * @create       
 *
 * @author
 *
 * @end                                                                        
 *
 * ********************************************************************/
#ifndef cell_ext
#define cell_ext

#include "cell.h"
#include "mem.ext"

/* Bit-flags used in cell operations */

/* user cell flags */
#define CELL_MORE              0x0001   /* 0 signifies end of frame cell*/
#define CELL_LP                0x0002   /* loss priority indication     */
#define CELL_CONG              0x0004   /* congestion indication        */


/* Which type of cell is this */
#define CELL_TYPE              0x0f00
#define CELL_USER              0x0000
#define CELL_OAM_E2E           0x0100
#define CELL_OAM_SEG           0x0200
#define CELL_OAM               (CELL_OAM_E2E | CELL_OAM_SEG)
#define CELL_RM                0x0400

#define IS_CELL_USER(f)   (((f) & CELL_TYPE) == CELL_USER)
#define IS_CELL_OAM(f)     ((f) & CELL_OAM)
#define IS_CELL_OAM_E2E(f) ((f) & CELL_OAM_E2E)
#define IS_CELL_OAM_SEG(f) ((f) & CELL_OAM_SEG)
#define IS_CELL_RM(f)      ((f) & CELL_RM)

/* Cell status bits */
#define CELL_ERROR         0x8000   /* HEC error in received cell   */
#define CELL_CRC_ERROR     0x4000   /* CRC10 error in received cell */

/* AAL2 Microcell Rx Errors */
#define CELL_ERR0          0x8000  /* AAL2 CPS STF parity error     */
#define CELL_ERR1          0x4000  /* AAL2 CPS sequence number error*/
#define CELL_ERR2          0x2000  /* AAL2 CPS offset field error 1 */
#define CELL_ERR3          0x1000  /* AAL2 CPS offset field error 2 */
#define CELL_ERR4          0x0800  /* AAL2 CPS HEC error 1          */
#define CELL_ERR5          0x0400  /* AAL2 CPS LI error             */
#define CELL_ERR6          0x0200  /* AAL2 CPS discard              */
#define CELL_ERR7          0x0100  /* AAL2 CPS HEC error 2          */
#define CELL_PAD           0x0080  /* AAL2 All padding              */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



/* Cell_Data_Copy definition */

#if L7_CORE_CPU == 0
#define Cell_Data_Copy memcpy
#elif L7_CORE_CPU == MPC860
#define Cell_Data_Copy(to,from,count)                         \
             {                                                \
                if( count )                                   \
                   if( !(count & 3) )                         \
                   {                                          \
                      mem4cpy(to,from,count>>2);              \
                   } else                                     \
                      memcpy(to,from,count);                  \
             }
#else
#define Cell_Data_Copy(to,from,count )                        \
             {                                                \
                if( count == 48 )                             \
                {                                             \
                   register ulng *to_l = (ulng *)to;          \
                   register ulng *from_l = (ulng *)from;      \
                                                              \
                   /* do 12 straight move longs */            \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                   *to_l++ = *from_l++;                       \
                } else                                        \
                   memcpy( to, from, count );                 \
             }
#endif


#if L7_DEBUG

word  C_GetLength( void *p_Cell );
void *C_GetBuffer( void *p_Cell );
void  C_SetBuffer( void *p_Cell, void *p_Buffer );
void  C_CutFromStart( void *p_Cell, word Length );
void  C_CutFromEnd( void *p_Cell, word Length );
void  C_AddedToStart( void *p_Cell, word Len);
void  C_AddedToEnd( void *p_Cell, word Len);
word  C_GetFlags(void *p_Cell);
void  C_SetFlags(void *p_Cell, word Flags);
word  C_GetOffset(void *p_Cell);
void  C_SetLength(void *p_Cell, word Length );
void  *C_GetOwner(void *p_Cell);
void  C_SetOwner(void *p_Cell, void *Owner);
 
#else

#define C_GetFlags(p_C)   ((t_Cell *)p_C)->Flags
#define C_SetFlags(p_C,Flg) ((t_Cell *)p_C)->Flags = Flg
#define C_GetLength(p_C)  ((t_Cell *)p_C)->Length
#define C_SetLength(p_C,len)  (((t_Cell *)p_C)->Length = (len))
#define C_GetBuffer(p_C)  ( ((t_Cell *)p_C)->p_Buffer+((t_Cell *)p_C)->First+C_RESERVED )
#define C_GetOffset(p_C)  ((t_Cell *)p_C)->First
#define C_CutFromStart(p_C,len)  \
          {  word _l_=(len);                  \
             if (_l_>((t_Cell *)p_C)->Length) \
                _l_ = ((t_Cell *)p_C)->Length;\
             ((t_Cell *)p_C)->First += _l_;   \
             ((t_Cell *)p_C)->Length -= _l_;  \
          }
#define C_CutFromEnd(p_C,len)  \
          {  word _l_=(len);                  \
             if (_l_>((t_Cell *)p_C)->Length) \
                _l_ = ((t_Cell *)p_C)->Length;\
             ((t_Cell *)p_C)->Length -= _l_;  \
          }
#define C_AddedToStart(p_C,len)   \
          { \
             ((t_Cell *)p_C)->First -= len;   \
             ((t_Cell *)p_C)->Length += len; \
          } ;
#define C_AddedToEnd(p_C,len)   \
          { \
             ((t_Cell *)p_C)->Length += len; \
          } ;
#define C_GetOwner(p_C)   ((t_Cell *)p_C)->Owner
#define C_SetOwner(p_C,Ownr) ((t_Cell *)p_C)->Owner = Ownr
#define C_SetBuffer(p_C,p_Buf) ((t_Cell *)p_C)->p_Buffer = (byte *)(p_Buf)
#endif

e_Err     C_InitAll( word Num, byte *p_Buffs );
e_Err     C_InitAllMem( word Num, t_Handle pool );
t_Handle  C_DataPool( void );
void     *C_New( word Offset );
void      C_Delete( void *p_Cell );
word      C_AddToStart( void *p_Cell, byte *pData, word Length );
word      C_AddToEnd( void *p_Cell, byte *pData, word Length );
word      C_Set( void *p_Cell, byte Data, word Length );
word      C_Read( void *p_Data, void *p_Cell, word Offset, word Length );
word      C_ChkResources( void );

#ifdef __cplusplus
}
#endif

#endif

/* --- end of file cell.ext --- */

