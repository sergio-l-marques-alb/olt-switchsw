/********************************************************************
 *
 * (C) Copyright Broadcom Corporation 2003-2007
 *
 * *********************************************************************
 *
 * @filename          xxmon.ext
 *
 * @purpose           Monitor external interface
 *
 * @component         Routing Utils Component
 *
 * @comments
 *
 * @create           10/01/1998 
 *
 * @author            Igor Ternovsky
 *
 * @end
 *
 * ********************************************************************/


/*
 * xxmon.ext
 *
 * $Header: lvl7dev\src\application\layer3\virata\aticsys\gen\xxmon.ext 1.1.3.1 2002/02/13 23:07:05EST ssaraswatula Development  $
 *
 * Monitor external interface
 *
 * Created 10/98 by Igor Ternovsky
 *
 */

#ifndef xxmon_ext

#define xxmon_ext 1

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* Monitor parameter flags */
#define XXMON_PARM_OPTIONAL   0x01  /* Parameter is optional */
#define XXMON_PARM_DEFVAL     0x02  /* Default value is set */
#define XXMON_PARM_RANGE      0x04  /* Range is set */
#define XXMON_PARM_STRING     0x08  /* String parm */
#define XXMON_PARM_USERIO     0x10  /* User defined io functions */
#define XXMON_PARM_NOVAL      0x80  /* Internal flag: value is not assigned */

/* if XXMON_PARM_USERIO flag is set:
   low_val: t_userscanf_f function
   high_val: t_userprintf_f function
*/

/* User-defined scan function. Returns: 0=success, 1=fail */
typedef int (*t_userscan_f)(char *string_val, const char *format, void *p_value );

/* User-defined sprint function. */
typedef int (*t_userprint_f)(char *out_str, const char *format, ulng value );

/* Function parameter structure */
typedef struct t_MonParm
{
   const char *name;             /* Parameter name. Shouldn't be allocated on stack! */
   const char *format;           /* Parameter format. Shouldn't be allocated on stack! */
   byte flags;                   /* Combination of XXMON_PARM_xx flags */
   ulng low_val;                 /* Low val for range checking/length of string/user scanf */
   ulng hi_val;                  /* Hi val for range checking/user printf */
   ulng value;                   /* Value/address of string parameter */
} t_MonParm;

/* Monitor command handler prototype */
typedef void (*t_TokenFunc)(t_MonParm parm[], word nParms);

/* Add subdirectory to the p_root directory
   Returns the new directory handle
*/
t_Handle XX_MonAddDir( t_Handle   hRoot,      /* Upper directory handle. NULL=root */
                       const char *name );    /* New directory name */

/* Scan directory tree and look for directory named "name" starts from
   root directory with name root_name
   Returns the directory handle if found or NULL if not found
*/
t_Handle XX_MonGetDirEntry( const char  *root_name,
                            const char  *name );

/* Add token */
e_Err XX_MonAddToken( t_Handle      hDir,     /* Directory handle. NULL=root */
                      const char    *name,    /* Token name. Shouldn't be allocated on stack! */
                      const char    *help,    /* Token help. Shouldn't be allocated on stack! */
                      t_TokenFunc   p_func,   /* Token handler */
                      t_MonParm     p_parms[]);/* Array of token parameters. */
                                              /* The last array element has parameter */
                                              /* name = NULL */

/* Monitor driver.
   Calls XX_Gets in infinite loop to get input string.
   Gives the string to XX_MonParseString for processing.
   Monitor token handler can call XX_MonStop() to exit the
   XX_MonDriver.
*/
void XX_MonDriver( void );

/* Parse the given input string and exit.
   All commands in the input string are executed one by one.
*/
void XX_MonParseString( const char *input_string );

/* Stop monitor driver */
void XX_MonStop( void );

#ifdef __cplusplus
}
#endif

#endif   /* #ifndef xxmon_ext */
