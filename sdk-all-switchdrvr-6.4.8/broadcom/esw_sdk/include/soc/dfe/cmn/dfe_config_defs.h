/*
 * $Id:dfe_config_defs.csv,v 1.1.2.5 Broadcom SDK $
 * 
 * $Copyright: Copyright 2015 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * This file is auto-generated by autoCoder
 * DO NOT EDIT THIS FILE!
 *
 */
#ifndef DFE_CONFIG_DEFS
#define DFE_CONFIG_DEFS

#include <soc/error.h>
#include <soc/dcmn/error.h>
#include <soc/drv.h>
#include <sal/core/alloc.h>

#include <soc/dfe/fe1600/fe1600_config_defs.h>
#include <soc/dfe/fe3200/fe3200_config_defs.h>

/************************************/
/*          Structs define          */
/************************************/

/* Implementation-specific defines */

/*      Configuration defines       */
typedef struct soc_dfe_defines_s {
    int        soc_dfe_defs_nof_links;                                /* Number of Links */
    int        soc_dfe_defs_nof_instances_mac;                        /* Number of Instances of MAC */
    int        soc_dfe_defs_nof_links_in_mac;                         /* SOC_DCMN_NOF_LINKS_IN_MAC */
    int        soc_dfe_defs_nof_instances_mac_fsrd;                   /* Number of Instances of MAC FSRD */
    int        soc_dfe_defs_nof_instances_brdc_fsrd;                  /* Number of block instances BRDC FSRD */
    int        soc_dfe_defs_nof_links_in_fsrd;                        /* Number of links in FSRD */
    int        soc_dfe_defs_nof_quads_in_fsrd;                        /* Number of quads in FSRD */
    int        soc_dfe_defs_nof_links_in_quad;                        /* Number of links in QUAD */
    int        soc_dfe_defs_nof_instances_dch;                        /* Number of DCH instances */
    int        soc_dfe_defs_nof_instances_ccs;                        /* Number of CCS instances */
    int        soc_dfe_defs_nof_links_in_ccs;                         /* Number of links in CCS */
    int        soc_dfe_defs_nof_instances_dcl;                        /* Number of DCL instances */
    int        soc_dfe_defs_nof_links_in_dcq;                         /* Number of links in DCQ */
    int        soc_dfe_defs_nof_instances_rtp;                        /* Number of RTP instances */
    int        soc_dfe_defs_nof_instances_occg;                       /* Number of OCCG instances */
    int        soc_dfe_defs_nof_instances_eci;                        /* Number of ECI instances */
    int        soc_dfe_defs_nof_instances_dcma;                       /* Number of DCMA instances */
    int        soc_dfe_defs_nof_instances_dcmb;                       /* Number of DCMB instances */
    int        soc_dfe_defs_nof_instances_dcmc;                       /* Number of DCMC instances */
    int        soc_dfe_defs_nof_instances_dcm;                        /* Number of Instances DCM */
    int        soc_dfe_defs_nof_instances_cmic;                       /* Number of CMIC instances */
    int        soc_dfe_defs_nof_instances_mesh_topology;              /* Number of block instances Mesh Topology */
    int        soc_dfe_defs_nof_instances_otpc;                       /* Number of block instances OTPC */
    int        soc_dfe_defs_nof_instances_brdc_fmach;                 /* Number of Instances BRDC_FMACH */
    int        soc_dfe_defs_nof_instances_brdc_fmacl;                 /* Number of Instances  BRDC_FMACL dynamically */
    int        soc_dfe_defs_nof_instances_brdc_fmac_ac;               /* Number of Instances BRDC_FMAC_AC */
    int        soc_dfe_defs_nof_instances_brdc_fmac_bd;               /* Number of Instances BRDC_FMAC_BD */
    int        soc_dfe_defs_nof_instances_brdc_dch;                   /* Number of Instances BRDC_DCH */
    int        soc_dfe_defs_nof_instances_brdc_dcm;                   /* Number of Instances BRDC_DCM */
    int        soc_dfe_defs_nof_instances_brdc_dcl;                   /* Number of Instances BRDC_DCL */
    int        soc_dfe_defs_nof_instances_brdc_ccs;                   /* Number of Instances BRDC_CCS */
    int        soc_dfe_defs_max_link_score;                           /* Max Link Score */
    int        soc_dfe_defs_multicast_row_size_in_uint32;             /* Multicast Row Size in uint32s */
    int        soc_dfe_defs_max_bucket_fill_rate;                     /* Max Bucket Fill Rate */
    int        soc_dfe_defs_rtp_rmhmt_group_size;                     /* RMHMT Group Size */
    int        soc_dfe_defs_nof_lcpll;                                /* Number of LCPLL */
    int        soc_dfe_defs_nof_port_in_lcpll;                        /* Number of ports in LCPLL */
    int        soc_dfe_defs_rtp_rmgr_units;                           /* RTP RMGR resolution */
    int        soc_dfe_defs_rtp_rmgr_nof_links;                       /* RTP RMGR number of links that should be take into account */
    int        soc_dfe_defs_nof_interrupts;                           /* Number of Interrupts */
    int        soc_dfe_defs_nof_rtp_mclbtp_instances;                 /* Number of RTP MCLBTP instances */
    int        soc_dfe_defs_nof_rtp_mclbts_instances;                 /* Number of RTP MCLBTS instances */
    int        soc_dfe_defs_nof_links_in_dcl;                         /* Number of Links in DCL */
    int        soc_dfe_defs_fifo_dma_fabric_cell_first_channel;       /* first channel id of fabric cell fifo dma */
    int        soc_dfe_defs_fifo_dma_nof_fabric_cell_channels;        /* nof channels of fabric cell fifo dma */
    int        soc_dfe_defs_fifo_dma_fabric_cell_nof_entries_per_cell; /* number of entries per one cell (chunk) */
    int        soc_dfe_defs_repeater_none_empty_cell_size;            /* empty cell size while link not connected to repeater */
    int        soc_dfe_defs_repeater_default_empty_cell_size;         /* default empty cell size while link connected to repeater */
    int        soc_dfe_defs_nof_local_modid;                          /* Number of local modids */
    int        soc_dfe_defs_nof_local_modid_fe13;                     /* Number of local modids on fe13 */
    int        soc_dfe_defs_fabric_mac_bus_size;                      /* Size of fabric MAC */
    int        soc_dfe_defs_link_mask;                                /* mask adjusted to number of links */
    int        soc_dfe_defs_rx_cpu_cell_max_payload_size;             /* payload size of data cpu cells (bits) */
    int        soc_dfe_defs_source_routed_cells_header_offset;        /* offset in the header fields ofsr cells between fe3200 and fe1600 (bytes) */
} soc_dfe_defines_t;

extern soc_dfe_defines_t *soc_dfe_defines[SOC_MAX_NUM_DEVICES];

/************************************/
/*          Macros Define           */
/************************************/


/*         soc_dfe_defines macros            */
#define SOC_DFE_DEFS_SET(unit, dfe_define, value)    {soc_dfe_defines[unit]->soc_dfe_defs_##dfe_define = value;}
#define SOC_DFE_DEFS_GET(unit, dfe_define)           ( soc_dfe_defines[unit]->soc_dfe_defs_##dfe_define )
#define SOC_DFE_DEFS_MAX2(_a_, _b_)    (_a_ > _b_ ? _a_ : _b_)
#define SOC_DFE_DEFS_MAX(dfe_define)                 SOC_DFE_DEFS_MAX2(SOC_FE3200_GET(dfe_define),SOC_FE1600_GET(dfe_define))

int soc_dfe_defines_init(int unit);
int soc_dfe_defines_deinit(int unit);

#endif /* DFE_CONFIG_DEFS */
