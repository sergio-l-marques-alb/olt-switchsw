/* $Id: $
 * 
 * $Copyright: Copyright 2015 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 * search for 'sw_state_cbs_t' for the root of the struct
 */

#ifndef _SHR_SW_STATE_DPP_SOC_ARAD_TM_PHY_PORTS_INFO_ACCESS_H_
#define _SHR_SW_STATE_DPP_SOC_ARAD_TM_PHY_PORTS_INFO_ACCESS_H_

/********************************* access calbacks definitions *************************************/
/* this set of callbacks, are the callbacks used in the access calbacks struct 'sw_state_cbs_t' to */
/* access the data in 'sw_state_t'.                                                                */
/* the calbacks are inserted into the access struct by 'sw_state_access_cb_init'.                  */
/***************************************************************************************************/

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, CONST soc_phy_port_sw_db_t *phy_ports_info);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, soc_phy_port_sw_db_t *phy_ports_info);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_alloc */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_alloc_cb)(
    int _unit, int nof_instances_to_alloc);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_is_allocated */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_is_allocated_cb)(
    int _unit, uint8 *is_allocated);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_free */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_free_cb)(
    int _unit);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int initialized);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int *initialized);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, soc_pbmp_t phy_ports);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, soc_pbmp_t *phy_ports);


/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_NEQ */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_NEQ_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, _shr_pbmp_t input_pbmp, uint8 *result);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_EQ */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_EQ_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, _shr_pbmp_t input_pbmp, uint8 *result);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_MEMBER */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_MEMBER_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int _input_port, uint8 *result);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_NOT_NULL */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_NOT_NULL_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint8 *result);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_IS_NULL */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_IS_NULL_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint8 *result);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_COUNT */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_COUNT_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int *result);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_XOR */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_XOR_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,  _shr_pbmp_t input_pbmp);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_REMOVE */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_REMOVE_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,  _shr_pbmp_t input_pbmp);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_ASSIGN */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_ASSIGN_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,  _shr_pbmp_t input_pbmp);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_GET */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_GET_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,  _shr_pbmp_t *output_pbmp);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_AND */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_AND_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,  _shr_pbmp_t input_pbmp);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_NEGATE */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_NEGATE_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,  _shr_pbmp_t input_pbmp);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_OR */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_OR_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,  _shr_pbmp_t input_pbmp);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_CLEAR */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_CLEAR_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_ADD */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_ADD_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int _input_port);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_FLIP */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_FLIP_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int _input_port);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_REMOVE */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_REMOVE_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int _input_port);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_SET */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_SET_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int _input_port);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORTS_RANGE_ADD */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORTS_RANGE_ADD_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int _first_port, int _range);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_FMT */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_FMT_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, char* _buffer);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, soc_port_if_t interface_type);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, soc_port_if_t *interface_type);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_speed_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_speed_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int speed);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_speed_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_speed_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int *speed);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_speed_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_speed_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_speed_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_speed_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, soc_port_t master_port);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, soc_port_t *master_port);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint32 channels_count);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint32 *channels_count);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int is_channelized);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int *is_channelized);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int latch_down);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int *latch_down);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint32 runt_pad);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint32 *runt_pad);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_core_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_core_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int core);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_core_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_core_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int *core);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_core_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_core_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_core_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_core_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int is_single_cal_mode);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, int *is_single_cal_mode);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint32 high_pirority_cal);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint32 *high_pirority_cal);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_set */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_set_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint32 low_pirority_cal);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_get */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_get_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx, uint32 *low_pirority_cal);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_verify */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_verify_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx);

/* implemented by: sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_get_size */
typedef int (*sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_get_size_cb)(
    int _unit, int phy_ports_info_ptr_arr_idx,int *ret_size);

/*********************************** access calbacks struct ****************************************/
/* this set of structs, rooted at 'sw_state_cbs_t' define the access layer for the entire SW state.*/
/* use this tree to alloc/free/set/get fields in the sw state rooted at 'sw_state_t'.              */
/* NOTE: 'sw_state_t' data should not be accessed directly.                                        */
/***************************************************************************************************/

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_NEQ_cb pbmp_neq;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_EQ_cb pbmp_eq;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_MEMBER_cb pbmp_member;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_NOT_NULL_cb pbmp_not_null;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_IS_NULL_cb pbmp_is_null;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_COUNT_cb pbmp_count;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_XOR_cb pbmp_xor;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_REMOVE_cb pbmp_remove;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_ASSIGN_cb pbmp_assign;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_GET_cb pbmp_get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_AND_cb pbmp_and;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_NEGATE_cb pbmp_negate;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_OR_cb pbmp_or;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_CLEAR_cb pbmp_clear;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_ADD_cb pbmp_port_add;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_FLIP_cb pbmp_port_flip;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_REMOVE_cb pbmp_port_remove;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORT_SET_cb pbmp_port_set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_PORTS_RANGE_ADD_cb pbmp_ports_range_add;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_PBMP_FMT_cb pbmp_fmt;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_speed_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_speed_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_speed_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_speed_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_speed_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_speed_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_core_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_core_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_core_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_core_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_core_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_core_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_get_size_cb get_size;
} sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_cbs_t;

typedef struct sw_state_dpp_soc_arad_tm_phy_ports_info_cbs_s {
    sw_state_dpp_soc_arad_tm_phy_ports_info_set_cb set;
    sw_state_dpp_soc_arad_tm_phy_ports_info_get_cb get;
    sw_state_dpp_soc_arad_tm_phy_ports_info_alloc_cb alloc;
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_allocated_cb is_allocated;
    sw_state_dpp_soc_arad_tm_phy_ports_info_free_cb free;
    sw_state_dpp_soc_arad_tm_phy_ports_info_verify_cb verify;
    sw_state_dpp_soc_arad_tm_phy_ports_info_get_size_cb get_size;
    sw_state_dpp_soc_arad_tm_phy_ports_info_initialized_cbs_t initialized;
    sw_state_dpp_soc_arad_tm_phy_ports_info_phy_ports_cbs_t phy_ports;
    sw_state_dpp_soc_arad_tm_phy_ports_info_interface_type_cbs_t interface_type;
    sw_state_dpp_soc_arad_tm_phy_ports_info_speed_cbs_t speed;
    sw_state_dpp_soc_arad_tm_phy_ports_info_master_port_cbs_t master_port;
    sw_state_dpp_soc_arad_tm_phy_ports_info_channels_count_cbs_t channels_count;
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_channelized_cbs_t is_channelized;
    sw_state_dpp_soc_arad_tm_phy_ports_info_latch_down_cbs_t latch_down;
    sw_state_dpp_soc_arad_tm_phy_ports_info_runt_pad_cbs_t runt_pad;
    sw_state_dpp_soc_arad_tm_phy_ports_info_core_cbs_t core;
    sw_state_dpp_soc_arad_tm_phy_ports_info_is_single_cal_mode_cbs_t is_single_cal_mode;
    sw_state_dpp_soc_arad_tm_phy_ports_info_high_pirority_cal_cbs_t high_pirority_cal;
    sw_state_dpp_soc_arad_tm_phy_ports_info_low_pirority_cal_cbs_t low_pirority_cal;
} sw_state_dpp_soc_arad_tm_phy_ports_info_cbs_t;


int sw_state_dpp_soc_arad_tm_phy_ports_info_access_cb_init(int _unit);

#endif /* _SHR_SW_STATE_DPP_SOC_ARAD_TM_PHY_PORTS_INFO_ACCESS_H_ */
