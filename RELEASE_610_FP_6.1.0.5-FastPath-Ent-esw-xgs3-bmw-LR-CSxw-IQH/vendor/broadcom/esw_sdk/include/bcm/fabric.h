/*
 * $Id: fabric.h,v 1.1 2011/04/18 17:10:55 mruas Exp $
 * 
 * $Copyright: Copyright 2009 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_FABRIC_H__
#define __BCM_FABRIC_H__

#include <bcm/types.h>
#include <bcm/port.h>

#ifndef BCM_HIDE_DISPATCHABLE

/* Create subports corresponding to front panel ports. */
extern int bcm_fabric_port_create(
    int unit, 
    bcm_gport_t parent_port, 
    int offset, 
    uint32 flags, 
    bcm_gport_t *port);

/* Destroy subports corresponding to front panel ports. */
extern int bcm_fabric_port_destroy(
    int unit, 
    bcm_gport_t parent_port);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_fabric_control_t */
typedef enum bcm_fabric_control_e {
    bcmFabricArbiterId,             /* Arbiter Identifier */
    bcmFabricActiveArbiterId,       /* Active Arbiter Identifier */
    bcmFabricArbiterConfig,         /* Arbiter NULL Grant Mechanism */
    bcmFabricMaximumFailedLinks,    /* Maximum Failed Links for load shared data
                                       plane redundancy mode */
    bcmFabricActiveId,              /* retreives actual(versus provisioned)
                                       Active Arbiter Identifier */
    bcmFabricRedundancyMode,        /* Fabric Redundancy Mode */
    bcmFabricMode,                  /* Fabric Mode (fabric, TME) */
    bcmFabricMcGroupSourceKnockout, /* Multicast Group Source Knockout
                                       Configuration. For get operation the arg
                                       parameter direction In/Out */
    bcmFabricEgressQueueMin,        /* Local QID start index */
    bcmFabricEgressQueueMax,        /* Local QID end index */
    bcmFabricQueueMin,              /* FIC QID start index */
    bcmFabricQueueMax               /* FIC QID end index */
} bcm_fabric_control_t;

/* bcm_fabric_mode_t */
typedef enum bcm_fabric_mode_e {
    bcmFabricModeTME,   /* Standalone/TME */
    bcmFabricModeFabric /* Uses external fabric device */
} bcm_fabric_mode_t;

/* bcm_fabric_connection_mode_t */
typedef enum bcm_fabric_connection_mode_e {
    bcmFabricXbarConnectionModeA = 1,   /* Plane A */
    bcmFabricXbarConnectionModeB = 2,   /* Plane B */
    bcmFabricXbarConnectionModeC = 3    /* Worst Case Plane A/Plane B */
} bcm_fabric_connection_mode_t;

/* BCM_FABRIC_XBAR_ABILITY_ flags */
#define BCM_FABRIC_XBAR_ABILITY_PROTOCOL_A  1          /* Plane A */
#define BCM_FABRIC_XBAR_ABILITY_PROTOCOL_B  2          /* Plane B */
#define BCM_FABRIC_XBAR_ABILITY_PROTOCOL_C  3          /* Worst Case Plane
                                                          A/Plane B */

/* bcm_fabric_redundancy_mode_t */
typedef enum bcm_fabric_redundancy_mode_e {
    bcmFabricRedManual,     /* Manual Mode */
    bcmFabricRed1Plus1Both, /* 1+1 Control Plane and 1+1 Data Plane */
    bcmFabricRed1Plus1LS,   /* 1+1 Control Plane and Load Sharing Data Plane */
    bcmFabricRed1Plus1ELS,  /* 1+1 Control Planeand Enhanced Load Sharing Data
                               Plane */
    bcmFabricRedLS,         /* Load Sharing Data Plane */
    bcmFabricRedELS         /* Enhanced Load Sharing Data Plane */
} bcm_fabric_redundancy_mode_t;

/* Information passed back during callback of redundancy state change */
typedef struct bcm_fabric_control_redundancy_info_s {
    int active_arbiter_id;  /* Active Arbiter Identifier. */
    uint64 xbars;           /* xbar links that are being used. */
} bcm_fabric_control_redundancy_info_t;

/* BCM_FABRIC_DISTRIBUTION_* flags. */
#define BCM_FABRIC_DISTRIBUTION_WITH_ID 0x00000001 /* flag to create
                                                      distributionId that is
                                                      passed */

/* Reference bcm_fabric_control_t, bcmFabricMcGroupSourceKnockout type. */
#define BCM_FABRIC_MC_GROUP_SOURCE_KNOCKOUT_ENABLE 0x40000000 /* Indicates if source
                                                          knockout is enabled on
                                                          a multicast group */
#define BCM_FABRIC_MC_GROUP_MASK            0x3FFFFFFF /* multicast group mask */

/* bcm_fabric_control_redundancy_handler_t */
typedef void (*bcm_fabric_control_redundancy_handler_t)(
    int unit, 
    bcm_fabric_control_redundancy_info_t *redundancy_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the BCM Fabric subsystem. */
extern int bcm_fabric_init(
    int unit);

/* defines connection setup between two nodes. */
extern int bcm_fabric_crossbar_connection_set(
    int unit, 
    int xbar, 
    int src_modid, 
    bcm_port_t src_xbport, 
    int dst_modid, 
    bcm_port_t dst_xbport);

/* retreives connection setup between two nodes. */
extern int bcm_fabric_crossbar_connection_get(
    int unit, 
    int xbar, 
    int src_modid, 
    bcm_port_t src_xbport, 
    int dst_modid, 
    bcm_port_t *dst_xbport);

/* Retrieves the number of active crossbars between two modules */
extern int bcm_fabric_crossbar_connection_status_get(
    int unit, 
    int src_modid, 
    int dst_modid, 
    bcm_fabric_connection_mode_t mode, 
    uint64 *xbars);

/* Retrieve fabric operating interval - epoch time */
extern int bcm_fabric_operating_interval_get(
    int unit, 
    int link_fail_count, 
    int *operating_interval);

/* Retrieves the number of timeslots in an epoch */
extern int bcm_fabric_connection_max_get(
    int unit, 
    int link_fail_count, 
    int *connection);

/* Gets fabric connection interval - timeslot size */
extern int bcm_fabric_connection_interval_get(
    int unit, 
    int link_fail_count, 
    int *connection_interval);

/* retrieve bytes per connection - bytes sent in a timeslot */
extern int bcm_fabric_connection_bytes_get(
    int unit, 
    int src_modid, 
    int dst_modid, 
    bcm_fabric_connection_mode_t mode, 
    int link_fail_count, 
    int *max_bytes);

/* Enable/disable TDM calendar */
extern int bcm_fabric_tdm_enable_set(
    int unit, 
    int enable);

/* Get enable/disable status of TDM calendar. */
extern int bcm_fabric_tdm_enable_get(
    int unit, 
    int *enable);

/* Get maximum TDM calendar size that is supported by the device. */
extern int bcm_fabric_calendar_max_get(
    int unit, 
    int *max_size);

/* Configure TDM calendar size */
extern int bcm_fabric_calendar_size_set(
    int unit, 
    int config_size);

/* Retrieve TDM calendar size */
extern int bcm_fabric_calendar_size_get(
    int unit, 
    int *config_size);

/* Set single calendar entry */
extern int bcm_fabric_calendar_set(
    int unit, 
    int cindex, 
    int connection, 
    bcm_gport_t dest_port, 
    bcm_cos_queue_t dest_cosq);

/* Get single calendar entry */
extern int bcm_fabric_calendar_get(
    int unit, 
    int cindex, 
    int *connection, 
    bcm_gport_t *dest_port, 
    bcm_cos_queue_t *dest_cosq);

/* Set multiple calendar entries */
extern int bcm_fabric_calendar_multi_set(
    int unit, 
    int array_size, 
    int *connection_array, 
    bcm_gport_t *dest_port_array, 
    bcm_cos_queue_t *dest_cosq_array);

/* Get multiple calendar entries */
extern int bcm_fabric_calendar_multi_get(
    int unit, 
    int array_size, 
    int *connection_array, 
    bcm_gport_t *dest_port_array, 
    bcm_cos_queue_t *dest_cosq_array);

/* Arm TDM calendar */
extern int bcm_fabric_calendar_active(
    int unit);

/* defines SFI link remap. */
extern int bcm_fabric_crossbar_mapping_set(
    int unit, 
    int modid, 
    int switch_fabric_arbiter_id, 
    int xbar, 
    bcm_port_t port);

/* retreive SFI link remap. */
extern int bcm_fabric_crossbar_mapping_get(
    int unit, 
    int modid, 
    int switch_fabric_arbiter_id, 
    int xbar, 
    bcm_port_t *port);

/* configure Link enable. */
extern int bcm_fabric_crossbar_enable_set(
    int unit, 
    uint64 xbars);

/* retreive Link enable. */
extern int bcm_fabric_crossbar_enable_get(
    int unit, 
    uint64 *xbars);

/* retreive runtime Link enable configuration. */
extern int bcm_fabric_crossbar_status_get(
    int unit, 
    uint64 *xbars);

/* set packet length adjustment. */
extern int bcm_fabric_packet_adjust_set(
    int unit, 
    int pkt_adjust_selector, 
    int pkt_adjust_len);

/* retreive packet length adjustment. */
extern int bcm_fabric_packet_adjust_get(
    int unit, 
    int pkt_adjust_selector, 
    int *pkt_adjust_len);

/* set failover/APS configuration. */
extern int bcm_fabric_port_failover_set(
    int unit, 
    bcm_gport_t port, 
    bcm_failover_t failover_id, 
    bcm_gport_t failover_port);

/* retreive failover/APS configuration. */
extern int bcm_fabric_port_failover_get(
    int unit, 
    bcm_gport_t port, 
    bcm_failover_t *failover_id, 
    bcm_gport_t *failover_port);

/* set fabric control attributes. */
extern int bcm_fabric_control_set(
    int unit, 
    bcm_fabric_control_t type, 
    int arg);

/* get fabric control attributes. */
extern int bcm_fabric_control_get(
    int unit, 
    bcm_fabric_control_t type, 
    int *arg);

/* Register user callback for redundancy state changes. */
extern int bcm_fabric_control_redundancy_register(
    int unit, 
    bcm_fabric_control_redundancy_handler_t f);

/* Unregister user callback for redundancy state changes. */
extern int bcm_fabric_control_redundancy_unregister(
    int unit, 
    bcm_fabric_control_redundancy_handler_t f);

/* Create Distribution Group. Reference BCM_FABRIC_DISTRIBUTION_* flags. */
extern int bcm_fabric_distribution_create(
    int unit, 
    uint32 flags, 
    bcm_fabric_distribution_t *ds_id);

/* Destroy Distribution Group. */
extern int bcm_fabric_distribution_destroy(
    int unit, 
    bcm_fabric_distribution_t ds_id);

/* Configure Distribution Group. */
extern int bcm_fabric_distribution_set(
    int unit, 
    bcm_fabric_distribution_t ds_id, 
    int modid_count, 
    int *dist_modids);

/* Retreive Distribution Group. */
extern int bcm_fabric_distribution_get(
    int unit, 
    bcm_fabric_distribution_t ds_id, 
    int max_count, 
    int *dist_modids, 
    int *count);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_FABRIC_DISTRIBUTION_SCHED_ALL   0x00000000 
#define BCM_FABRIC_DISTRIBUTION_SCHED_ANY   0x00000001 

/* Multicast Fabric distribution feature control. */
typedef enum bcm_fabric_distribution_control_e {
    bcmFabricDistributionSched  /* Multicast fabric forwarding - all nodes must
                                   be available or any. */
} bcm_fabric_distribution_control_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Configure Distribution Group fabric forwarding settings. */
extern int bcm_fabric_distribution_control_set(
    int unit, 
    bcm_fabric_distribution_t ds_id, 
    bcm_fabric_distribution_control_t type, 
    int value);

/* Get Distribution Group fabric forwarding settings. */
extern int bcm_fabric_distribution_control_get(
    int unit, 
    bcm_fabric_distribution_t ds_id, 
    bcm_fabric_distribution_control_t type, 
    int *value);

/* 
 * Sets the number of port status messages that will be present in
 * congestion message (e.g. E2ECC).
 */
extern int bcm_fabric_congestion_size_set(
    int unit, 
    bcm_module_t module_id, 
    int max_ports);

/* 
 * Gets the number of port status messages that will be present in
 * congestion message (e.g. E2ECC).
 */
extern int bcm_fabric_congestion_size_get(
    int unit, 
    bcm_module_t module_id, 
    int *max_ports);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_FABRIC_H__ */
