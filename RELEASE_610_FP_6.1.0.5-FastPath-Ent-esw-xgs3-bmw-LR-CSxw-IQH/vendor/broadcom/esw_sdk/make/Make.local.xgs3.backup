# $Id: Make.local.xgs3.backup,v 1.1 2011/04/18 17:10:58 mruas Exp $
# $Copyright: Copyright 2007, Broadcom Corporation All Rights Reserved.
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES
# OF ANY KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE.
# BROADCOM SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.$
#

# Usage for Make.local.template and Make.local:
#
# Make.local.template is checked into the tree, but Make.local is never
# checked in.  Copy Make.local.template to Make.local, then change
# Make.local to select the desired compilation options (mostly debugging
# features).
#
# Note on CFGFLAGS usage:
#
#   Because CFGFLAGS may be used with other source preprocessing tools,
#   please limit the values added to CFGFLAGS to -D defines.
#
#
# Table of Contents:
#
#     Compiler Related Options
#     Boot and Debug Related Options
#     Operational and Policy Options
#     System Management and Multiple CPU Options
#     Selective Device Support (Switches and PHYs)
#     Miscelaneous Options
#

################################################################
#
# Compiler Related Options
#
################################################################

# Uncomment to build in parallel
#MAKE_PAR=-j

# Compiling out #ifdef DEBUG code saves about 1.3% on executable size.
# It is recommended to leave debug enabled when developing applications.
#DEBUG_IFDEFS=FALSE

# SAL resource usage tracking #ifdef control
# DEBUG_IFDEFS should also be  TRUE for this switch to take effect.
#BCM_RESOURCE_USAGE_PROFILE_IFDEFS=TRUE

# Uncomment to build without debug symbols
#DEBUG_SYMBOLS=FALSE

# Uncomment to add private CFLAGS
#DEBUG_CFLAGS=

# Uncomment to turn off the optimizer when debugging (recommended)
#DEBUG_OPTIMIZE=FALSE

# Compiling out assert() saves about 1.1% on executable size,
# however do so is VERY MUCH discouraged.
#DEBUG_ASSERTS=FALSE

# Controlling GCC -pedantic flag
#DEBUG_PEDANTIC=TRUE

# compiler.h overrides, these disable various compiler
# related features even if the compiler normally supports them

# Disable use of long long for uint64
#CFGFLAGS += -DCOMPILER_OVERRIDE_NO_LONGLONG

# Disable use of doubles
#CFGFLAGS += -DCOMPILER_OVERRIDE_NO_DOUBLE

# Disable inlining of functions
CFGFLAGS += -DCOMPILER_OVERRIDE_NO_INLINE

# Disable use of const
#CFGFLAGS += -DCOMPILER_OVERRIDE_NO_CONST

# Disable use of static functions
#CFGFLAGS += -DCOMPILER_OVERRIDE_NO_STATIC

# Enable RPC flexible (long) bitmaps.
# Warning: Enabling this bumps the RPC version to 3 and
# makes systems running this code incompatible with systems
# running previous versions of BCM RPC code.
#CFGFLAGS += -DBCM_RPC_FLEX_PBMP

#
# Define if longs are 64 bits on your compiler;
# this is typically true ONLY for 64-bit processors.
#CFGFLAGS += -DLONGS_ARE_64BITS

#
# Define if pointers are 64 bits on your compiler;
# this is typically true ONLY for 64-bit processors.
# NOTE: This support works ONLY under conditions where the
# upper 32 bits for ALL pointers are ZERO.
#CFGFLAGS += -DPTRS_ARE_64BITS


################################################################
#
# Boot and Debug Related Options
#
################################################################

# Options to turn on various debug flags at boot. BE SURE DK_ERR is set
# otherwise hardware error messages will not be printed.
#CFGFLAGS += -DDEBUG_STARTUP="DK_RCLOAD+DK_TX+DK_ERR"
#CFGFLAGS += -DDEBUG_STARTUP="DK_ERR"

# Define this to add debug code for RX pool buffer tracking
#CFGFLAGS += -DBCM_RXP_DEBUG

# Allow debugging of PCI reads/writes (debug +pci)
#CFGFLAGS += -DSOC_PCI_DEBUG

# Make default debugging settings be 0 (very very quiet)
#CFGFLAGS += -DNO_DEBUG_OUTPUT_DEFAULT

# Don't use vxMemProbe
#CFGFLAGS += -DVX_NO_MEM_PROBE

################################################################
#
# Operational and Policy Options
#
################################################################

# VLAN policy control:
#	NO_DEFAULT_ETHER	do not init ether ports into vlan 1
#	NO_DEFAULT_CPU		do not init cpu ports into vlan 1
#	NO_DEFAULT_SPI_SUBPORT	do not init spi subports into vlan 1
#	NO_AUTO_STACK		do not init stack/HG ports into created vlans
CFGFLAGS += -DBCM_VLAN_NO_DEFAULT_ETHER
CFGFLAGS += -DBCM_VLAN_NO_DEFAULT_CPU
#CFGFLAGS += -DBCM_VLAN_NO_DEFAULT_SPI_SUBPORT
#CFGFLAGS += -DBCM_VLAN_NO_AUTO_STACK

# VLAN multicast flood Policy Control:
# BCM_VLAN_MCAST_FLOOD_ALL      Flood all multicast packets to the VLAN
# BCM_VLAN_MCAST_FLOOD_UNKNOWN  Flood unknown multicast packets to the vlan
# BCM_VLAN_MCAST_FLOOD_NONE     Forward multicast packets with known
#                               destination addresses to the appropriate ports.
#                               All packets destined to an unknown multicast
#                               address are dropped.
#CFGFLAGS += -DBCM_MCAST_FLOOD_DEFAULT=BCM_VLAN_MCAST_FLOOD_ALL
CFGFLAGS += -DBCM_MCAST_FLOOD_DEFAULT=BCM_VLAN_MCAST_FLOOD_UNKNOWN
#CFGFLAGS += -DBCM_MCAST_FLOOD_DEFAULT=BCM_VLAN_MCAST_FLOOD_NONE

#Port Enable/Disable Policy control:
#       PORT_DEFAULT_DISABLE       disable ports during switch initialization
CFGFLAGS += -DBCM_PORT_DEFAULT_DISABLE

# sal thread priority override (this value used for all threads if defined)
#CFGFLAGS += -DSAL_THREAD_PRIORITY=255

# disable printing of thread name in messages
CFGFLAGS += -DSAL_THREAD_NAME_PRINT_DISABLE

# disable runtime reading of flash config.bcm file (even if !NO_FILEIO)
CFGFLAGS += -DSAL_CONFIG_FILE_DISABLE

# disable all Application SAL dependencies
#NO_SAL_APPL=1

# Prevent scheduling in SPL locks when interrupt code is run as a thread.
# This option should not be necessary if all locks are implemented correctly,
# however, some locks may still rely on the assumption that scheduling does
# not occur when interrupts are disabled. If you experience any locking
# problems in e.g. Linux User Mode, try enabling this option.
# Please note that turning on this option will reduce performance by an
# estimated 5 to 10 %.
#CFGFLAGS += -DSAL_SPL_NO_PREEMPT

# disable mapping of higig cosq when mapping priority to cosq
# (use identity mapping instead : map prio0->cos0, prio1->cos1, ... , prio7->cos7)
#CFGFLAGS += -DBCM_COSQ_HIGIG_MAP_DISABLE

################################################################
#
# System Management and Multiple CPU Options
#
################################################################

# Turn on BCMX inclusion
#     INCLUDE_BCMX for any support
INCLUDE_BCMX=1

# Telekinesis suite applications for CPU to CPU communication and discovery
#     CPUDB:         Simple CPU data base manager
#     CPUTRANS:      CPU to CPU communication mechanisms
#     DISCOVER:      Simple discovery; will also include CPUTRANS
#     STKTASK:       Stack manager application
#
CFGFLAGS += -DINCLUDE_LIB_CPUDB
CFGFLAGS += -DINCLUDE_LIB_CPUTRANS
CFGFLAGS += -DINCLUDE_LIB_DISCOVER
CFGFLAGS += -DINCLUDE_LIB_STKTASK

# Option for discovery to use the application-data field in routing
# packets for Board-ID and CPU base flag information.
#CFGFLAGS += -DDISCOVER_APP_DATA_BOARDID

# This option is not present in the default make.local.template.
ifdef LVL7_FIXUP
CFGFLAGS += -DBCM_BOARD_AUTO_TRUNK
endif

# Optionally override list of included dispatch modules
# Note: including RPC automatically includes the Telekinesis suite libs
DISPATCH_LIST = RPC ESW


# Define to have end-to-end flow control enabled on boards that
# support it
#CFGFLAGS += -DBCM_BOARD_AUTO_E2E

# Define the following to support per-CPU transmit pointers.
# This allows the TX setup and send functions to be defined on a
# per-CPU basis, allowing mixed in-band and out-of-band communication.
#CFGFLAGS += -DBCM_C2C_TRANSPORT_SWITCHING

# Options for feature list (INCLUDE_XXX)
# If FEATURE_LIST is defined, it is a list of features to include.
# See Make.config for the default feature list.
#
# Avaliable features:
#
#     ASE
#     BCMX
#     BCMX_DIAG
#     BSAFE
#     CHASSIS
#     CUSTOMER
#     DRIVERS
#     EDITLINE
#     I2C
#     L3
#     MEM_SCAN
#     ATPTRANS_SOCKET
#     TCL
#     TELNET
#     TEST
#     ACL
#     RCPU
#
FEATURE_LIST=ATPTRANS_SOCKET BCMX_DIAG L3 I2C BCMX MEM_SCAN EDITLINE ASE \
    CUSTOMER TEST ACL 

################################################################
#
# Selective Device Support (Switches and PHYs)
#
################################################################

# Multiple Chip Support
#
# By default, the driver supports all Strata switch and fabric chips
# included in this software release.  It checks device IDs at runtime
# to run the correct driver modules.
#
# To save space, the driver can be compiled to support just a subset of
# the chips.  To do this, uncomment the line for BCM_PTL_SPT (partial
# support) and uncomment one line for each chip to support.
#
# Note that there are a lot more chips than drivers.
# For example, the BCM5615 driver is also used for BCM5625 and BCM5645.
#

BCM_PTL_SPT = 1

#BCM_5600_C0 = 1
#BCM_5605_A0 = 1
#BCM_5615_A0 = 1
#BCM_5650_C0 = 1
#BCM_5665_A0 = 1
#BCM_5665_B0 = 1
#BCM_5670_A0 = 1
#BCM_5673_A0 = 1
#BCM_5674_A0 = 1
#BCM_5675_A0 = 1
#BCM_5680_B0 = 1
#BCM_5690_A0 = 1
#BCM_5695_A0 = 1
#BCM_56102_A0 = 1
#BCM_56112_A0 = 1
BCM_56304_B0 = 1
BCM_56314_A0 = 1
BCM_56504_A0 = 1
BCM_56504_B0 = 1
BCM_56514_A0 = 1
#BCM_56601_A0 = 1
#BCM_56602_A0 = 1
#BCM_56601_B0 = 1
#BCM_56602_B0 = 1
#BCM_56601_C0 = 1
#BCM_56602_C0 = 1
#BCM_56624_A0 = 1
#BCM_56624_B0 = 1
#BCM_56680_A0 = 1
#BCM_56580_A0 = 1
#BCM_56700_A0 = 1
BCM_56800_A0 = 1
#BCM_56218_A0 = 1
#BCM_56224_A0 = 1
#BCM_56725_A0 = 1
#BCM_56820_A0 = 1

#BCM_5338_A0 = 1
#BCM_5380_A0 = 1
#BCM_5338_B0 = 1
#BCM_5325_A1 = 1

#BCM_5324_A0 = 1
#BCM_5396_A0 = 1
#BCM_5389_A0 = 1
#BCM_5398_A0 = 1
#BCM_5324_A1 = 1

#BCM_53115_A0 = 1
#BCM_53118_A0 = 1

#BCM_FE2000_A0 = 1
#BCM_QE2000_A0 = 1
#BCM_BME3200_B0 = 1
#BCM_BM9600_A0 = 1

# Options for multiple PHY support
# If BCM_PHY_LIST is defined, it is a list of PHYs to include.
# The default is to include all of them.
# If none of them should be included specify BCM_PHY_LIST=EMPTY
#BCM_PHY_LIST=522X 54XX 5464 5482 5421S SERDES SIMUL 8703 8705 EMPTY 

# Options for BCM5338 5380
#CFGFLAGS += -DROBO_OLD
#ROBO_OLD = 1

# Support for phy simulation
#CFGFLAGS += -DINCLUDE_PHY_SIMUL
#CFGFLAGS += -DSIM_ALL_PHYS        # All phys use simulation driver
#CFGFLAGS += -DSIM_CMIC_LINK_STAT  # Get link status from CMIC register

# Support for event logging
#CFGFLAGS += -DINCLUDE_SHARED_EVLOG

################################################################
#
# Misc Options
#
################################################################
#CFGFLAGS += -DSOC_MEM_L3_DEFIP_WAR

# Compile out Register/Table descriptive strings to generate a
# compact image
#CFGFLAGS +=-DSOC_NO_NAMES
#CFGFLAGS +=-DSOC_NO_ALIAS
#CFGFLAGS +=-DSOC_NO_DESC

# Reload/WarmBoot
#
#CFGFLAGS += -DBCM_WARM_BOOT_SUPPORT
#
# Need this for validation using SOC scripts; Will move to tcl 
# someday
#CFGFLAGS += -DBCM_WARM_BOOT_SUPPORT_SW_DUMP

################################################################
#
# Enable Easy Reload Support
#
################################################################
#CFGFLAGS += -DBCM_EASY_RELOAD_SUPPORT

# Software Trunk failover Support
#
#CFGFLAGS += -DBCM_TRUNK_FAILOVER_SUPPORT

################################################################
#
# Override default VXWORKS thread options to make set 
# VX_UNBREAKABLE flag in task creation.
#
################################################################
#CFGFLAGS += -DVX_THREAD_OPT_UNBREAKABLE


################################################################
#
# Use default priority for BDE interrupt thread.
#
################################################################
#CFGFLAGS += -DSAL_BDE_THREAD_PRIO_DEFAULT

ifdef LVL7_FIXUP
# Turn on BCM Shell inclusion
L7_INCLUDE_BCM_SHELL = 1
CFGFLAGS += -DL7_BCM_SHELL_SUPPORT
endif
