/*
 * Product: EmWeb
 * Release: R6_2_0
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION OF VIRATA CORPORATION
 * THE EMWEB SOFTWARE ARCHITECTURE IS PATENTED (US PATENT #5,973,696)
 * AND OTHER US AND INTERNATIONAL PATENTS PENDING.
 * 'EMWEB' AND 'EMSTACK' ARE TRADEMARKS OF VIRATA CORPORATION
 * 
 * Notice to Users of this Software Product:
 * 
 * This software product of Virata Corporation ("Virata"), 5 Clock Tower
 * Place, Suite 400, Maynard, MA  01754 (e-mail: info@virata.com) in 
 * source and object code format embodies valuable intellectual property 
 * including trade secrets, copyrights and patents which are the exclusive
 * proprietary property of Virata. Access, use, reproduction, modification
 * disclsoure and distribution are expressly prohibited unless authorized
 * in writing by Virata.  Under no circumstances may you copy this
 * software or distribute it to anyone else by any means whatsoever except in
 * strict accordance with a license agreement between Virata and your
 * company.  This software is also protected under patent, trademark and 
 * copyright laws of the United States and foreign countries, as well as 
 * under the license agreement, against any unauthorized copying, modification,
 * or distribution.
 * Please see your supervisor or manager regarding any questions that you may
 * have about your right to use this software product.  Thank you for your
 * cooperation.
 * 
 * Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Virata Corporation
 * All Rights Reserved
 * 
 * Virata Corporation
 * 5 Clock Tower Place
 * Suite 400
 * Maynard, MA  01754
 * 
 * Voice: +1 (978) 461-0888
 * Fax:   +1 (978) 461-2080
 * 
 * http://www.emweb.com/
 *   support@agranat.com
 *     sales@agranat.com
 *
 * EmWeb/Server file system internals
 *
 */

#ifndef _EWS_FILE_H_
#define _EWS_FILE_H_

#include "ew_db.h"
#include "ews_doc.h"
#include "ew_lib.h"
#include "ews_secu.h"

#ifdef EW_CONFIG_OPTION_FILE_SYSTEM_LIST
#include "ews_sys.h"
typedef struct EwsFileSystemEntry_s
{
  EwsLink link;
  struct EwsFileSystem_s fs;
  uintf use_cnt;
} EwsFileSystemEntry;
#endif /* EW_CONFIG_OPTION_FILE_SYSTEM_LIST */

/* Archive contains Schema information - must include
 * generic schema processing for all of these options.
 */
#if defined(EW_CONFIG_OPTION_NS_GET) \
 || defined(EW_CONFIG_OPTION_NS_SET) \
 || defined(EW_CONFIG_OPTION_NS_LOOKUP)\
 || defined(EW_CONFIG_OPTION_CONVERT_XML)
#  define EW_CONFIG_SCHEMA_ARCHIVE      /* include schema processing */
#endif


/*
 * FILE SYSTEM
 *
 * The EmWeb/Server maintains a pseudo-filesystem for maintaining relationships
 * between URL pathnames and archive documents generated by EmWeb/Compiler.
 *
 * Each node in the filesystem represents a URL pathname, and is accessed by an
 * open hash table.
 *
 * The hashing algorithm is modular.  Currently, we simply add up all the
 * characters in the pathname modulo the hash table size.  Different heuristics
 * may be applied in the future.
 */
typedef struct EwsDocument_s
  {
    EwsDocument         next_hash;      /* next entry in bucket, or NULL */
    EwsDocument         prev_hash;      /* previous entry in bucket, or NULL */
    EwsDocument         next_archive;   /* next entry in archive list */

#   ifdef EW_CONFIG_OPTION_DEMAND_LOADING
    EwsLink             fault_list;     /* next entry in fault list */
#   endif

    uintf               hash;           /* index of hash bucket */

    const char          *url;  /* URL pathname "/..."
                                   Note: If cloned or registered, this is a
                                   malloc'ed string.  Otherwise, this points
                                   directly into the archive database URL
                                   string */

    uintf               flags;          /* Flags pertaining to node */
#   define              EWS_FILE_FLAG_LOADED     0x0001  /* in memory */
#   define              EWS_FILE_FLAG_CLONE      0x0002  /* a clone */
#   define              EWS_FILE_FLAG_REGISTERED 0x0004  /* registered */
#   ifdef EW_CONFIG_FILE_METHODS
#   define              EWS_FILE_FLAG_FILESYSTEM 0x0008  /* nonarchive file */
    union EwsFileParams_s   *fileParams;
#   endif /* EW_CONFIG_FILE_METHODS */

    EwsArchive          archive;        /* pointer to object archive */
    const uint8         *archive_data;  /* pointer to fixed-data archive */
    const EwsDocumentHeader *doc_header;/* pointer to archive document header */
    EwaDocumentHandle   doc_handle;     /* application-specific handle */

#   ifdef EW_CONFIG_OPTION_CLONING

    uintf               clone_count;    /* number of clones of this doc */
    EwsDocument         clone_base;     /* base document for this clone */

#   endif /* EW_CONFIG_OPTION_CLONING */

#   ifdef EW_CONFIG_OPTION_AUTH
    EwsRealmP           realmp;         /* authorization realm */
#   endif /* EW_CONFIG_OPTION_AUTH */

#   if defined( EW_CONFIG_SCHEMA_ARCHIVE )  /* archive schema management */
    const EwsDocumentNode   *schema_nodes;
    const EwsDocumentHeader *schema_document;
#   endif

  } EwsDocument_t;

#ifndef EWS_FILE_HASH_SIZE
#define EWS_FILE_HASH_SIZE      256     /* size of hash table */
#endif /* EWS_FILE_HASH_SIZE */

/*
 * Hash Table functions
 *   ewsFileHash        - returns index into hash table given URL string
 *   ewsFileHashInit    - initialize hash table
 *   ewsFileHashShutdown- free hash table resources
 *   ewsFileHashInsert  - creates and inserts a new entry into the hash table
 *   ewsFileHashDelete  - deletes an entry from the hash table
 *   ewsFileHashLookup  - searches a hash bucket for a matching URL string
 */
extern uintf ewsFileHash ( const char * url );
extern void ewsFileHashInit ( void ) ;
extern void ewsFileHashShutdown ( void ) ;
extern EwsDocument ewsFileHashInsert ( uintf indx );
extern void ewsFileHashDelete ( EwsDocument document );
extern EwsDocument ewsFileHashLookup ( uintf indx, const char * url );
#ifdef EW_CONFIG_FILE_METHODS
extern EwsDocument ewsFileSetupFilesystemDoc( EwsContext context, const char *url );
#endif /* EW_CONFIG_FILE_METHODS */
#endif /* _EWS_FILE_H_ */
