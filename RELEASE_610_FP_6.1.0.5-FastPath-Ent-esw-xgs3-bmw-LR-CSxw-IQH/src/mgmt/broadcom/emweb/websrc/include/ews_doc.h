/*
 *
 * Product: EmWeb
 * Release: R6_2_0
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION OF VIRATA CORPORATION
 * THE EMWEB SOFTWARE ARCHITECTURE IS PATENTED (US PATENT #5,973,696)
 * AND OTHER US AND INTERNATIONAL PATENTS PENDING.
 * 'EMWEB' AND 'EMSTACK' ARE TRADEMARKS OF VIRATA CORPORATION
 * 
 * Notice to Users of this Software Product:
 * 
 * This software product of Virata Corporation ("Virata"), 5 Clock Tower
 * Place, Suite 400, Maynard, MA  01754 (e-mail: info@virata.com) in 
 * source and object code format embodies valuable intellectual property 
 * including trade secrets, copyrights and patents which are the exclusive
 * proprietary property of Virata. Access, use, reproduction, modification
 * disclsoure and distribution are expressly prohibited unless authorized
 * in writing by Virata.  Under no circumstances may you copy this
 * software or distribute it to anyone else by any means whatsoever except in
 * strict accordance with a license agreement between Virata and your
 * company.  This software is also protected under patent, trademark and 
 * copyright laws of the United States and foreign countries, as well as 
 * under the license agreement, against any unauthorized copying, modification,
 * or distribution.
 * Please see your supervisor or manager regarding any questions that you may
 * have about your right to use this software product.  Thank you for your
 * cooperation.
 * 
 * Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Virata Corporation
 * All Rights Reserved
 * 
 * Virata Corporation
 * 5 Clock Tower Place
 * Suite 400
 * Maynard, MA  01754
 * 
 * Voice: +1 (978) 461-0888
 * Fax:   +1 (978) 461-2080
 * 
 * http://www.emweb.com/
 *   support@agranat.com
 *     sales@agranat.com
 *
 * EmWeb/Server application interface to document archives
 *
 */
#ifndef _EWS_DOC_H_
#define _EWS_DOC_H_

#include "ew_types.h"
#include "ew_config.h"
#include "ews_def.h"


/******************************************************************************
 * ARCHIVE MAINTENANCE
 *
 * The EmWeb/Compiler generates an archive of one or more documents.  Documents
 * can be HTML files, JAVA programs, graphical images, or any other information
 * resource addressable by a URL.  Archives may be independently loaded or
 * unloaded into the EmWeb/Server.
 *
 * In most applications, the entire set of available documents would be
 * compiled into a single archive and loaded at boot time.  However, some
 * applications may desire to dynamically load archives at run-time as needed
 * in order to reduce memory requirements.  In fact, some applications may
 * want to implement a scheme similar to page swapping under some operating
 * systems to cache an active set of documents in memory while storing other
 * documents in a secondary storage area.  Such a secondary storage area
 * could be in FLASH memory, or on a remote server using TFTP or other
 * protocols to load documents at run-time.
 *
 * An EmWeb archive consists of two components.  First, there is the archive
 * data component containing the database of compressed documents, information
 * about how to construct dynamic documents at run-time, access controls,
 * etc.  Second, there is the archive object component containing the run-time
 * object code used for the construction of dynamic documents, etc.
 *
 * Operating systems supporting the run-time loading and linking of object
 * code may offload both the data and object archive components to a secondary
 * storage area.  Otherwise, only the data components would be offloaded
 * while the object components would be statically linked into the run-time
 * executable image.
 *
 * Each archive contains an archive descriptor in the object component.  The
 * archive descriptor is referenced by a public symbol generated by the
 * EmWeb/Compiler.  In order to activate an archive at run-time, the
 * application must invoke ewsDocumentInstallArchive() with parameters
 * indicating the address of the data component and the archive descriptor of
 * the object component.  The archive may be deactivated by invoking
 * ewsDocumentRemoveArchive().
 *
 *****************************************************************************/

/*
 * ewsDocumentInstallArchive
 *
 * Install a document archive generated by EmWeb/Compiler into EmWeb/Server
 * run-time database.
 *
 * descriptor   - public symbol of archive object component descriptor
 * datap        - pointer to archive data component
 *
 * Returns EWS_STATUS_OK on success, else error code (TBD)
 */
extern EwsStatus ewsDocumentInstallArchive
  ( EwsArchive descriptor, EwsArchiveData datap );

#ifdef EW_CONFIG_OPTION_CLEANUP

/*
 * ewsDocumentRemoveArchive
 *
 * Removes previously installed document archive from run-time database.
 *
 * descriptor   - public symbol of archive object component descriptor
 *
 * Returns EWS_STATUS_OK on success, else error code (TBD)
 */
extern EwsStatus ewsDocumentRemoveArchive ( EwsArchive descriptor );

/*
 * ewsDocumentRemoveDataArchive
 *
 * Removes previously installed data (derived) archive from run-time database.
 *
 * datap   - address of data archive component
 *
 * Returns EWS_STATUS_OK on success, else error code (TBD)
 */
extern EwsStatus ewsDocumentRemoveDataArchive ( const uint8 *datap );

#endif /* EW_CONFIG_OPTION_CLEANUP */

/*
 * ewsDocumentArchiveName
 *
 * Returns the archive name as stored in the archive by the EmWeb/Compiler,
 * or NULL on error.
 */
extern const char * ewsDocumentArchiveName ( const uint8 *datap );

/*
 * ewsDocumentArchiveDate
 *
 * Returns the RFC1123 date string stored in the archive header generated
 * by the EmWeb/Compiler when the archive was created, or NULL on error.
 *
 * There is also a routine for the less preferred RFC1036 representation.
 */
extern const char * ewsDocumentArchiveDate ( const uint8 *datap );
extern const char * ewsDocumentArchiveDate1036 ( const uint8 *datap );

#ifdef EW_CONFIG_OPTION_DEMAND_LOADING

/******************************************************************************
 *
 * DEMAND LOADING
 *
 * In order to implement on-demand archive loading, the application may
 * register document URLs with the EmWeb/Server which are valid but not
 * loaded.  This is done by invoking ewsDocumentRegister().  If a registered
 * document is requested, the EmWeb/Server will notify the application by
 * invoking ewaDocumentFault().  At this point, the application may load
 * a new archive (possibly removing a previously installed archive to make
 * room).  When the archive containing the page is installed, the EmWeb/Server
 * will automatically complete processing the request.  The request can be
 * aborted either immediately by returning EWA_STATUS_ERROR from the
 * ewaDocumentFault() function, or by invoking ewsNetHTTPAbort().
 *
 * Once a document is registered, there is no need to re-register it in the
 * event that the corresponding archive is removed.  EmWeb/Server remembers
 * that the document has been registered as dynamically loadable.  However,
 * the application may deregister a document by invoking
 * ewsDocumentDeregister().
 *
 *****************************************************************************/

/*
 * ewsDocumentRegister
 * Registers the URL of a document with the run-time database indicating that
 * the given document is valid but not currently loaded into memory.
 *
 * url          - local URL of document to be registered
 * handle       - application-specific handle passed to ewaDocumentFault()
 *
 * Returns document descriptor, or EWS_DOCUMENT_NULL on failure.
 */
extern EwsDocument ewsDocumentRegister
  ( const char * url, EwaDocumentHandle handle );

/*
 * ewsDocumentDeregister
 * Unregisters a previously registered document from the run-time database
 * indicating that the given dynamically-loadable document is no longer valid.
 *
 * document     - descriptor of document to be deregistered
 *
 * Returns EWS_STATUS_OK on success, else error code (TBD).
 */
extern EwsStatus ewsDocumentDeregister ( EwsDocument document );

#ifndef ewaDocumentFault
/*
 * ewaDocumentFault (Application)
 * This function must be provided by the application, and is invoked by
 * EmWeb/Server when a registered document has been requested but is not
 * currently loaded into memory.
 *
 * context      - context of request for document
 * handle       - application-specific handle from ewsDocumentRegister()
 *
 * Returns EWA_STATUS_OK on success, EWA_STATUS_OK_YIELD on success with
 * request for EmWeb/Server to yield the CPU, or EWA_STATUS_ERROR on failure.
 * If failure status is returned, the request is aborted.  Otherwise, the
 * request will complete after the document has been loaded into memory.
 */
extern EwaStatus ewaDocumentFault
  ( EwsContext context, EwaDocumentHandle handle );
#endif

#endif /* EW_CONFIG_OPTION_DEMAND_LOADING */

#ifdef EW_CONFIG_OPTION_CLONING

/******************************************************************************
 *
 * DOCUMENT CLONING
 *
 * Documents may be cloned and assigned to a new URL.  This allows multiple
 * instances of a document to exist.  An application-specific handle can be
 * used to identify an instance of a document from the request context.
 *
 * The application clones a document by invoking ewsDocumentClone().  The
 * cloned document may be removed by invoking ewsDocumentRemove().  All
 * clones created from documents in an archive must be removed before the
 * archive can be removed.
 *
 *****************************************************************************/

/*
 * ewsDocumentClone
 * Clone an existing document under a new URL in the database.
 *
 * baseurl      - URL of existing document
 * newurl       - URL of new cloned document
 * handle       - application-specific handle available in request context
 *
 * Returns document descriptor or EWS_DOCUMENT_NULL on error.
 */
extern EwsDocument ewsDocumentClone
  ( const char * baseurl, const char * newurl, EwaDocumentHandle handle );

/*
 * ewsDocumentRemove
 * Remove a previously cloned document from the database.
 *
 * document     - document descriptor of previously cloned document.
 *
 * Returns EWS_STATUS_OK on success, else error code (TBD).
 */
extern EwsStatus ewsDocumentRemove ( EwsDocument document );
#endif /* EW_CONFIG_OPTION_CLONING */

#ifdef EW_CONFIG_OPTION_DOCUMENT_DATA
/*
 * ewsDocumentData
 * Retrieve pointer to raw data and data size from URL in archive
 *
 * url          - url of document
 * bytesp       - output: size of document (as-is in archive) in bytes
 * datapp       - output: pointer to start of document
 *
 * Returns EWS_STATUS_OK on success, else error code (TBD).
 */
extern EwsStatus ewsDocumentData ( const char * url
                                  ,uint32 *bytesp
                                  ,const uint8 **datapp );
#endif /* EW_CONFIG_OPTION_DOCUMENT_DATA */

#ifdef EW_CONFIG_OPTION_DOCUMENT_SET_REALM
#ifdef EW_CONFIG_OPTION_AUTH
/*
 * ewsDocumentSetRealm
 * Set or change authentication realm of document at run-time.
 *
 * url          - url of document
 * realm        - name of authentication realm, or NULL (or "") to disable.
 *
 * Returns EWS_STATUS_OK on success, else error code.
 */
extern EwsStatus ewsDocumentSetRealm ( const char * url, const char *realm );
#endif /* EW_CONFIG_OPTION_AUTH */
#endif /* EW_CONFIG_OPTION_DOCUMENT_SET_REALM */

#ifdef EW_CONFIG_OPTION_URL_GETNEXT
/*
 * ewsGetNextURL
 * Given a URL in the hash table, get the next URL.  Note that these are
 * in no particular order, but provides a means of scanning the list of
 * URLs by the application.
 *
 *   url - NULL to read first URL, else URL from which to find next URL
 *
 * Returns NULL if end of list, or next URL
 */
const char *
ewsGetNextURL ( const char * url );
#endif /* EW_CONFIG_OPTION_URL_GETNEXT */

#endif /* _EWS_DOC_H_ */
