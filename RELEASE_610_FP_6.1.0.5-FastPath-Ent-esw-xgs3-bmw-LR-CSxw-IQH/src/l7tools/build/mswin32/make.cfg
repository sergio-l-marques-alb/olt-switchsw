FP_BASE=../../../..

#
#######################################################################
##
## Module: build/make.cfg
##
## Function:  
##      This file, make.cfg, defines the make rules and variables 
##      used to build LVL7 software components from source code.
##      The file is included by all component make files.
##
#######################################################################

#######################################################################
# Build sources: the root directory for the source tree,
#                directories for system-wide include-files,
#                directories for build objects (e.g., *int.o files),
#                major interface library files,
#                system shared library files
#
# Note that the label, FP_SRC, is NOT DEFINED.  You MUST
# define FP_SRC in your environment before executing your make.
 
# Directory containing project include files: header files used by
# multiple components, export files,
#

L7PUBLIC_INCLDIR = -I$(FP_BASE)/src/l7public/common \
                   -I$(FP_BASE)/src/l7public/api \
                   -I$(FP_BASE)/src/l7public/porting

COMPONENT_INCLDIR = -I$(FP_BASE)/src/headers

#
OS_INCLDIR = -I. -I$(WIND_BASE)/target/h \
	     -I$(WIND_BASE)/target/h/arch/ppc \
	     $(L7PUBLIC_INCLDIR) \
             -I$(FP_HWSRC)/headers


# Directory containing build libraries. Object files made by other 
# components which you link to at build time are archived here.
# E.g., *int.o files for interfaces implemented through function calls.
LIBDIR = $(FP_HWSRC)/ipl
OSLIBDIR = $(WIND_BASE)/target/lib
ZLIBDIR = $(FP_BASE)/src/system_support/software/l7util/zlib
#


#######################################################################


# Define gcc flags for compiling any code intended to run on a
# host (not target) platform, such as image construction utilities, etc.
#
GCCFLAGS := -m32
export GCCFLAGS



######################################################################

######################################################################
## Commonly used Libraries.  If your component links to these libraries,
## reference the appropriate names in your LIBS macro definition. 
##
## These definitions are to be used for referencing as SOURCES ONLY!
## The following syntax is observed: *LIB refers to a -lkey option for
## cc and ld; *LIBA refers to a fully-qualified pathname to the archive
## file, to be used as a link object.  The former syntax is preferred.
## *EXP refers to the fully-qualified pathname of an import file, for
## linking libraries.  ALL LIBRARIES must use import files when 
## linking; referring to other *LIB or *LIBA macros is incorrect.
#######################################################################
#
# Target for link libraries. Library routines which your 
# component makes for use by other components are archived here. 
# E.g., *int.o files for interfaces implemented through function calls.
LIBA=libsw.a
#
# OS Open libraries
OSLIBS =$(OSLIBDIR)/libPPC860gnuvx.a 
# zlib library...
LIBZ=$(ZLIBDIR)/libz.a

#Operating System Version.
L7_OS_VERSION=-D_L7_OS_VXWORKS_
#
#
#######################################################################


CPU=PPC860

GFLAG=-gstabs

CFLAGSLOCAL=

CFLAGS_INC=$(COMPONENT_INCLDIR) $(OS_INCLDIR) \
	-I$(FP_BASE)/os/$(L7_TARGETOS)/bsp/$(L7_PLATFORM)/include

CFLAGS=-mcpu=860 -mstrict-align -ansi -nostdinc \
	-fvolatile -fno-builtin -fno-for-scope -Wall -DCPU=$(CPU) \
	$(L7_OS_VERSION) $(CFLAGS_INC)
        
        
CCST_FLAGS=-mcpu=860 \
	-fvolatile -fno-builtin -fno-for-scope -Wall -DCPU=$(CPU) \
	$(L7_OS_VERSION) $(CFLAGS_INC)

ASMFLAGS=-mcpu=860 -mstrict-align -ansi -nostdinc -fvolatile -fno-builtin \
-fno-for-scope -DCPU=$(CPU) -P -x assembler-with-cpp $(OS_INCLDIR) $(L7_OS_VERSION) 

SYMFLAGS=

asmcmd     = $(CC) $(ASMFLAGS) $(CFLAGSLOCAL) -c
CCST       = $(CC) $(CCST_FLAGS) $(CFLAGSLOCAL) $(SYMFLAGS) -c
compcmd    = $(CC) $(CFLAGS) $(CFLAGSLOCAL) -c
cpluscmd   = $(CC) $(CFLAGS) $(CFLAGSLOCAL) -c
dependcmd  = $(CC) $(CFLAGS) $(CFLAGSLOCAL) -M
linkcmd    = $(LD)
objcopycmd = $(OBJCOPY)

AR      = arppc
AS      = asppc
CC      = ccppc
LD      = ldppc
LD1     = ldppc
NM      = nmppc
OBJCOPY = objcopyppc
PERL    = perl
RANLIB  = ranlibppc
RM      = rm
SED     = sed
STRIP   = stripppc

export AR RANLIB STRIP


ifeq ($(WIN95),Y)
SLASH = \\
else
SLASH = /
endif

# In order to compile SNMP we need to pass defines in quotes. Different 
# versions of Tornado require a different way to specify quotes.
QUOTE=\\\"


%.o : %.c
	-rm -f $@
	$(compcmd) $< -o $@

%.o : %.s
	-rm -f $@
	$(asmcmd) $< -o $@

%.o : %.cpp
	-rm -f $@
	$(cpluscmd) $< -o $@

%.d : %.c
	$(dependcmd) $< | $(PERL) $(FP_BASE)/src/l7tools/build/helpdepend.pl $@ > $@

%.d : %.s
	$(dependcmd) $< | $(PERL) $(FP_BASE)/src/l7tools/build/helpdepend.pl $@ > $@ 

%.d : %.cpp
	$(dependcmd) $< | $(PERL) $(FP_BASE)/src/l7tools/build/helpdepend.pl $@ > $@ 

